void sub_198E29B04(_Unwind_Exception *a1, void *a2)
{
  WebKit::ARKitInlinePreviewModelPlayer *v2;

  WebKit::ARKitInlinePreviewModelPlayer::~ARKitInlinePreviewModelPlayer(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ARKitInlinePreviewModelPlayerIOS::modelPlayerForPageAndLayerID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    WebKit::instances(void)::instances = 0;
    *(void *)&dword_1E93CFC28 = 0;
  }
  v28 = &WebKit::instances(void)::instances;
  v29 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)&WebKit::instances(void)::instances);
  v30 = v6;
  uint64_t v7 = WebKit::instances(void)::instances;
  if (WebKit::instances(void)::instances)
  {
    uint64_t v8 = *(unsigned int *)(WebKit::instances(void)::instances - 4);
    uint64_t v9 = WebKit::instances(void)::instances + 8 * v8;
    uint64_t v31 = v9;
    uint64_t v32 = v9;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v28);
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v28);
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  v23 = &WebKit::instances(void)::instances;
  uint64_t v24 = v9;
  uint64_t v25 = v9;
  uint64_t v26 = v9;
  uint64_t v27 = v7 + 8 * v8;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v23);
  v10 = v29;
  v11 = (void *)v24;
  while (v10 != v11)
  {
    uint64_t v12 = *(void *)(*v10 + 8);
    uint64_t v13 = *(void *)(v12 + 32);
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 8);
      if (v14)
      {
        uint64_t v15 = *(void *)(v12 + 24);
        if (v15)
        {
          uint64_t v16 = *(void *)(v15 + 8);
          if (v16 && v16 - 16 == a1)
          {
            (*(void (**)(void *__return_ptr))(*(void *)v14 + 40))(v21);
            if (v22)
            {
              if (v21[1] == a3 && v21[0] == a2) {
                return v12;
              }
            }
          }
        }
      }
    }
    v19 = v10 + 1;
    v29 = v10 + 1;
    if (v10 + 1 != v30)
    {
      while ((unint64_t)(*v19 + 1) <= 1)
      {
        if (++v19 == v30)
        {
          v19 = v30;
          break;
        }
      }
      v29 = v19;
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v28);
    v10 = v29;
    ++*((_DWORD *)v28 + 2);
  }
  return 0;
}

uint64_t WebKit::ARKitInlinePreviewModelPlayerIOS::pageLoadedModelInlinePreview(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = WebKit::ARKitInlinePreviewModelPlayerIOS::modelPlayerForPageAndLayerID(a1, a2, a3);
  if (result)
  {
    v4 = *(uint64_t (**)(void))(**(void **)(*(void *)(result + 32) + 8) + 24);
    return v4();
  }
  return result;
}

uint64_t WebKit::ARKitInlinePreviewModelPlayerIOS::pageFailedToLoadModelInlinePreview(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = WebKit::ARKitInlinePreviewModelPlayerIOS::modelPlayerForPageAndLayerID(a1, a2, a3);
  if (result)
  {
    v4 = *(uint64_t (**)(void))(**(void **)(*(void *)(result + 32) + 8) + 32);
    return v4();
  }
  return result;
}

void *WebKit::ARKitInlinePreviewModelPlayerIOS::modelIdentifier@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this[4];
  if (v3
    && (this = *(void **)(v3 + 8)) != 0
    && (this = (*(void *(**)(long long *__return_ptr))(*this + 40))(&v4), v5))
  {
    *(_OWORD *)a2 = v4;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return this;
}

void WebKit::ARKitInlinePreviewModelPlayerIOS::enterFullscreen(WebKit::ARKitInlinePreviewModelPlayerIOS *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::ARKitInlinePreviewModelPlayerIOS::modelIdentifier(this, (uint64_t)v10);
      if (v11)
      {
        uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 16) + 56))(v2 + 16);
        char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)char v5 = 2112;
        *((void *)v5 + 1) = v4;
        *((void *)v5 + 66) = (char *)v5 + 16;
        *((void *)v5 + 67) = 512;
        *((void *)v5 + 68) = 0;
        *((void *)v5 + 70) = 0;
        *((void *)v5 + 69) = 0;
        IPC::Encoder::encodeHeader(v5);
        uint64_t v12 = v5;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, v10);
        uint64_t v13 = v10[1];
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, &v13);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v2 + 16) + 32))(v2 + 16, &v12, 0);
        uint64_t v7 = v12;
        uint64_t v12 = 0;
        if (v7)
        {
          IPC::Encoder::~Encoder(v7, v6);
          WTF::fastFree(v8, v9);
        }
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void sub_198E29F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, IPC::Encoder *a13)
{
  CFRelease(*(CFTypeRef *)(v13 - 8));
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayerIOS::setInteractionEnabled(WebKit::ARKitInlinePreviewModelPlayerIOS *this, char a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      WebKit::ARKitInlinePreviewModelPlayerIOS::modelIdentifier(this, (uint64_t)v14);
      if (v14[16])
      {
        uint64_t v12 = v14;
        char v13 = a2;
        uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 56))(v3 + 16);
        uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v7 = 2015;
        *((void *)v7 + 1) = v6;
        *((void *)v7 + 66) = (char *)v7 + 16;
        *((void *)v7 + 67) = 512;
        *((void *)v7 + 68) = 0;
        *((void *)v7 + 70) = 0;
        *((void *)v7 + 69) = 0;
        IPC::Encoder::encodeHeader(v7);
        uint64_t v15 = v7;
        IPC::ArgumentCoder<std::tuple<WebKit::ModelIdentifier const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebKit::ModelIdentifier const&,BOOL>,0ul,1ul>(v7, (uint64_t)&v12);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v3 + 16) + 32))(v3 + 16, &v15, 0);
        uint64_t v9 = v15;
        uint64_t v15 = 0;
        if (v9)
        {
          IPC::Encoder::~Encoder(v9, v8);
          WTF::fastFree(v10, v11);
        }
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void sub_198E2A0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::getCamera(WTF::CompletionHandler<void ()(std::optional<WebCore::HTMLModelElementCamera> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D80C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::getCamera(WTF::CompletionHandler<void ()(std::optional<WebCore::HTMLModelElementCamera> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D80C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::getCamera(WTF::CompletionHandler<void ()(std::optional<WebCore::HTMLModelElementCamera> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v7, a2);
  if (v9)
  {
    LOBYTE(v4) = 0;
    char v6 = 0;
  }
  else
  {
    long long v4 = v7;
    uint64_t v5 = v8;
    char v6 = 1;
  }
  uint64_t result = WTF::CompletionHandler<void ()(std::optional<WebCore::HTMLModelElementCamera> &&)>::operator()((uint64_t *)(a1 + 8));
  if (v9 != -1) {
    return ((uint64_t (*)(long long *, long long *))off_1EE9D80E0[v9])(&v4, &v7);
  }
  return result;
}

void sub_198E2A2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28)
{
  if (a28 != -1) {
    ((void (*)(char *, char *))off_1EE9D80E0[a28])(&a17, &a18);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8100;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8100;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v18 = *((void *)a2 + 3);
        if (v18)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v4, v5);
            unint64_t v16 = 0;
            uint64_t v26 = *(void *)a2;
            uint64_t v27 = *((void *)a2 + 1);
            uint64_t v28 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v17 = 0;
            if (v28 && v27)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26, v27);
              uint64_t v17 = *(void *)a2;
              unint64_t v16 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v16 = 0;
            uint64_t v17 = 0;
          }
        }
      }
      else
      {
        char v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (v7)
          {
            IPC::Decoder::decode<WebCore::HTMLModelElementCamera>(a2, (uint64_t)&v33);
            int v8 = v35;
            if (v35)
            {
              long long v40 = v33;
              uint64_t v41 = v34;
              int v42 = 0;
              int v8 = 1;
            }
            else
            {
              LOBYTE(v40) = 0;
            }
            char v43 = v8;
            if (v8) {
              goto LABEL_31;
            }
          }
          else
          {
            IPC::Decoder::decode<WebCore::ResourceError>(a2, (uint64_t)&v33);
            if (v36)
            {
              std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v29, (uint64_t *)&v33);
              std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)&v40, (uint64_t *)&v29);
              int v42 = 1;
              char v43 = 1;
              CFTypeRef v12 = cf;
              CFTypeRef cf = 0;
              if (v12) {
                CFRelease(v12);
              }
              char v13 = v31;
              uint64_t v31 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2) {
                  WTF::StringImpl::destroy(v13, v11);
                }
                else {
                  *(_DWORD *)v13 -= 2;
                }
              }
              uint64_t v14 = v30;
              v30 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 2) {
                  WTF::StringImpl::destroy(v14, v11);
                }
                else {
                  *(_DWORD *)v14 -= 2;
                }
              }
              uint64_t v15 = v29;
              v29 = 0;
              if (v15)
              {
                if (*(_DWORD *)v15 == 2) {
                  WTF::StringImpl::destroy(v15, v11);
                }
                else {
                  *(_DWORD *)v15 -= 2;
                }
              }
            }
            else
            {
              LOBYTE(v40) = 0;
              char v43 = 0;
            }
            std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v11);
            if (v43) {
              goto LABEL_31;
            }
          }
LABEL_43:
          uint64_t v20 = *(void *)a2;
          uint64_t v21 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v22 = *((void *)a2 + 3);
          if (!v22 || !v21 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20), !v43))
          {
            v37[0] = 0;
            char v39 = 0;
            goto LABEL_45;
          }
LABEL_31:
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v37, (uint64_t)&v40);
          char v39 = 1;
          if (!v43 || v42 == -1 || (((void (*)(long long *, long long *))off_1EE9D80E0[v42])(&v33, &v40), v39))
          {
LABEL_34:
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v40, (uint64_t)v37);
            uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()(v2, (uint64_t)&v40);
            if (v42 != -1) {
              uint64_t result = ((uint64_t (*)(long long *, long long *))off_1EE9D80E0[v42])(&v33, &v40);
            }
            if (v39)
            {
              if (v38 != -1) {
                return ((uint64_t (*)(long long *, unsigned char *))off_1EE9D80E0[v38])(&v40, v37);
              }
            }
            return result;
          }
LABEL_45:
          uint64_t v23 = *(void *)a2;
          uint64_t v24 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v25 = *((void *)a2 + 3);
          if (!v25) {
            return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(v2);
          }
          if (!v24) {
            return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(v2);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23);
          if (!v39) {
            return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(v2);
          }
          goto LABEL_34;
        }
        unint64_t v16 = v5;
        uint64_t v17 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v19 = *((void *)a2 + 3);
      if (v19 && v16) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
      }
      LOBYTE(v40) = 0;
      char v43 = 0;
      goto LABEL_43;
    }
  }
  int v9 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(v9);
}

void sub_198E2A814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, CFTypeRef cf, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,int a42,char a43)
{
  if (a43)
  {
    if (a41 != -1) {
      ((void (*)(uint64_t, char *))off_1EE9D80E0[a41])(v43 - 144, &a31);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(uint64_t *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  v3[1] = 0;
  v3[2] = 0x3FF0000000000000;
  int v4 = 0;
  uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v3);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9D80E0[v4])(&v2, v3);
  }
  return result;
}

void sub_198E2AA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1) {
    ((void (*)(char *, char *))off_1EE9D80E0[a24])(&a13, &a14);
  }
  _Unwind_Resume(exception_object);
}

void *IPC::Decoder::decode<WebCore::HTMLModelElementCamera>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setCamera(WebCore::HTMLModelElementCamera,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8128;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setCamera(WebCore::HTMLModelElementCamera,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8128;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setCamera(WebCore::HTMLModelElementCamera,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetCamera,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8150;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetCamera,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8150;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetCamera,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) <= 0xFFu)
      {
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v6 = a2[3];
        if (v6)
        {
          if (v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isPlayingAnimation(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8178;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isPlayingAnimation(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8178;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isPlayingAnimation(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v4, a2);
  if (v5)
  {
    __int16 v6 = 0;
  }
  else
  {
    LOBYTE(v6) = v4[0];
    HIBYTE(v6) = 1;
  }
  uint64_t result = WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>::operator()(v2);
  if (v5 != -1) {
    return ((uint64_t (*)(__int16 *, unsigned char *))off_1EE9D8190[v5])(&v6, v4);
  }
  return result;
}

void sub_198E2AEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9D8190[a19])(v19 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsPlayingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D81B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsPlayingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D81B0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsPlayingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>>(v5, a2);
    if (v7)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v8, (uint64_t)v5);
      uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(v2, (uint64_t)v8);
      if (v9 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9D8190[v9])(&v10, v8);
      }
      if (v7)
      {
        if (v6 != -1) {
          return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9D8190[v6])(v8, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsPlayingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(v2);
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsPlayingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(v4);
  }
  return result;
}

void sub_198E2B0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  if (a35 != -1) {
    ((void (*)(uint64_t, __int16 *))off_1EE9D8190[a35])(v35 - 17, &a23);
  }
  if (a21)
  {
    if (a19 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9D8190[a19])(v35 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsPlayingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(uint64_t *a1)
{
  v2[0] = 0;
  int v3 = 0;
  uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v2);
  if (v3 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9D8190[v3])(&v4, v2);
  }
  return result;
}

void sub_198E2B168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9D8190[a19])(v19 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v18 = *((void *)a2 + 3);
    if (v18)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
        uint64_t v17 = *(void *)a2;
        unint64_t v16 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
    goto LABEL_30;
  }
  int v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v16 = v6;
    uint64_t v17 = 0;
LABEL_30:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17, v16);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_31;
  }
  if (*v8 >= 2u)
  {
LABEL_31:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v20 = *((void *)a2 + 3);
    if (v20 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v5);
    }
LABEL_36:
    v33[0] = 0;
    char v35 = 0;
    goto LABEL_37;
  }
  if (*v8)
  {
    if (v6 <= (unint64_t)&v8[-v5 + 1])
    {
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v23 = *((void *)a2 + 3);
      if (v23)
      {
        (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
        unint64_t v21 = 0;
        uint64_t v30 = *(void *)a2;
        uint64_t v31 = *((void *)a2 + 1);
        uint64_t v32 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v22 = 0;
        if (v32)
        {
          if (v31)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v30);
            uint64_t v22 = *(void *)a2;
            unint64_t v21 = *((void *)a2 + 1);
          }
        }
      }
    }
    else
    {
      *((void *)a2 + 2) = v8 + 2;
      unsigned int v9 = v8[1];
      if (v9 < 2)
      {
        v33[0] = v9 != 0;
        int v34 = 0;
        char v35 = 1;
        goto LABEL_25;
      }
      unint64_t v21 = v6;
      uint64_t v22 = v5;
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v24 = *((void *)a2 + 3);
    if (v24 && v21) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 16))(v24, v22, v21);
    }
    goto LABEL_36;
  }
  IPC::Decoder::decode<WebCore::ResourceError>(a2, (uint64_t)v40);
  if (v41)
  {
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v36, v40);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v33, (uint64_t *)&v36);
    int v34 = 1;
    char v35 = 1;
    CFTypeRef v11 = cf;
    CFTypeRef cf = 0;
    if (v11) {
      CFRelease(v11);
    }
    CFTypeRef v12 = v38;
    int v38 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    char v13 = v37;
    v37 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v10);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v36;
    char v36 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v10);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    v33[0] = 0;
    char v35 = 0;
  }
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40, v10);
  if (v35)
  {
LABEL_25:
    uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, (uint64_t)v33);
    a1[88] = 1;
    if (!v35) {
      return result;
    }
    if (v34 == -1) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1EE9D8190[v34])(v40, v33);
    if (a1[88]) {
      return result;
    }
    goto LABEL_39;
  }
LABEL_37:
  uint64_t v25 = *(void *)a2;
  uint64_t v26 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v27 = *((void *)a2 + 3);
  if (v27)
  {
    if (v26)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25);
      if (v35) {
        goto LABEL_25;
      }
    }
  }
  *a1 = 0;
  a1[88] = 0;
LABEL_39:
  uint64_t v28 = *(void *)a2;
  uint64_t v29 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result)
  {
    if (v29) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v28);
    }
  }
  return result;
}

void sub_198E2B5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,char a22,WTF::StringImpl *a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,CFTypeRef cf)
{
  if (*(unsigned char *)(v31 + 88))
  {
    uint64_t v33 = *(unsigned int *)(v31 + 80);
    if (v33 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9D8190[v33])(&a10, v31);
    }
    *(_DWORD *)(v31 + 80) = -1;
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setAnimationIsPlaying(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D81D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setAnimationIsPlaying(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D81D8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setAnimationIsPlaying(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

unint64_t IPC::ArgumentCoder<std::tuple<WebKit::ModelIdentifier const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebKit::ModelIdentifier const&,BOOL>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)a2;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  uint64_t v8 = v4[1];
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v8);
  char v5 = *(unsigned char *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v7)
  {
    *(unsigned char *)unint64_t result = v5;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetAnimationIsPlaying,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8200;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetAnimationIsPlaying,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8200;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetAnimationIsPlaying,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) <= 0xFFu)
      {
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v6 = a2[3];
        if (v6)
        {
          if (v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isLoopingAnimation(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8228;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isLoopingAnimation(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8228;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isLoopingAnimation(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v4, a2);
  if (v5)
  {
    __int16 v6 = 0;
  }
  else
  {
    LOBYTE(v6) = v4[0];
    HIBYTE(v6) = 1;
  }
  uint64_t result = WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>::operator()(v2);
  if (v5 != -1) {
    return ((uint64_t (*)(__int16 *, unsigned char *))off_1EE9D8190[v5])(&v6, v4);
  }
  return result;
}

void sub_198E2BB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9D8190[a19])(v19 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsLoopingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8250;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsLoopingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8250;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsLoopingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>>(v5, a2);
    if (v7)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v8, (uint64_t)v5);
      uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(v2, (uint64_t)v8);
      if (v9 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9D8190[v9])(&v10, v8);
      }
      if (v7)
      {
        if (v6 != -1) {
          return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9D8190[v6])(v8, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsLoopingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(v2);
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsLoopingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(v4);
  }
  return result;
}

void sub_198E2BD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  if (a35 != -1) {
    ((void (*)(uint64_t, __int16 *))off_1EE9D8190[a35])(v35 - 17, &a23);
  }
  if (a21)
  {
    if (a19 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9D8190[a19])(v35 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsLoopingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(uint64_t *a1)
{
  v2[0] = 0;
  int v3 = 0;
  uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v2);
  if (v3 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9D8190[v3])(&v4, v2);
  }
  return result;
}

void sub_198E2BDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9D8190[a19])(v19 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setIsLoopingAnimation(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8278;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setIsLoopingAnimation(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8278;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setIsLoopingAnimation(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetIsLoopingAnimation,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D82A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetIsLoopingAnimation,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D82A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetIsLoopingAnimation,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) <= 0xFFu)
      {
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v6 = a2[3];
        if (v6)
        {
          if (v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::animationDuration(WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D82C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::animationDuration(WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D82C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::animationDuration(WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, a2);
  if (v7)
  {
    LOBYTE(v4) = 0;
    char v5 = 0;
  }
  else
  {
    uint64_t v4 = v6[0];
    char v5 = 1;
  }
  uint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)>::operator()((uint64_t *)(a1 + 8));
  if (v7 != -1) {
    return ((uint64_t (*)(uint64_t *, void *))off_1EE9D82E0[v7])(&v4, v6);
  }
  return result;
}

void sub_198E2C250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  if (a26 != -1) {
    ((void (*)(char *, char *))off_1EE9D82E0[a26])(&a15, &a16);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementAnimationDuration,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8300;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementAnimationDuration,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8300;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementAnimationDuration,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>>(a2, (uint64_t)v6);
    if (v8)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v9, (uint64_t)v6);
      uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(v2, (uint64_t)v9);
      if (v10 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9D82E0[v10])(&v5, v9);
      }
      if (v8)
      {
        if (v7 != -1) {
          return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9D82E0[v7])(v9, v6);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementAnimationDuration,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(v2);
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementAnimationDuration,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(v4);
  }
  return result;
}

void sub_198E2C498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v32 = *(unsigned int *)(v30 + 80);
  if (v32 != -1) {
    ((void (*)(char *, __int16 *))off_1EE9D82E0[v32])(&a13, &a28);
  }
  if (a26)
  {
    if (a24 != -1) {
      ((void (*)(char *, char *))off_1EE9D82E0[a24])(&a13, &a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementAnimationDuration,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(uint64_t *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  int v4 = 0;
  uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v3);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9D82E0[v4])(&v2, v3);
  }
  return result;
}

void sub_198E2C588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1) {
    ((void (*)(char *, char *))off_1EE9D82E0[a24])(&a13, &a14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::animationCurrentTime(WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8328;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::animationCurrentTime(WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8328;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::animationCurrentTime(WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, a2);
  if (v7)
  {
    LOBYTE(v4) = 0;
    char v5 = 0;
  }
  else
  {
    uint64_t v4 = v6[0];
    char v5 = 1;
  }
  uint64_t result = WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)>::operator()((uint64_t *)(a1 + 8));
  if (v7 != -1) {
    return ((uint64_t (*)(uint64_t *, void *))off_1EE9D82E0[v7])(&v4, v6);
  }
  return result;
}

void sub_198E2C758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  if (a26 != -1) {
    ((void (*)(char *, char *))off_1EE9D82E0[a26])(&a15, &a16);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementAnimationCurrentTime,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8350;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementAnimationCurrentTime,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8350;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementAnimationCurrentTime,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>>(a2, (uint64_t)v6);
    if (v8)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v9, (uint64_t)v6);
      uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(v2, (uint64_t)v9);
      if (v10 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9D82E0[v10])(&v5, v9);
      }
      if (v8)
      {
        if (v7 != -1) {
          return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9D82E0[v7])(v9, v6);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementAnimationCurrentTime,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(v2);
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementAnimationCurrentTime,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(v4);
  }
  return result;
}

void sub_198E2C9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v32 = *(unsigned int *)(v30 + 80);
  if (v32 != -1) {
    ((void (*)(char *, __int16 *))off_1EE9D82E0[v32])(&a13, &a28);
  }
  if (a26)
  {
    if (a24 != -1) {
      ((void (*)(char *, char *))off_1EE9D82E0[a24])(&a13, &a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementAnimationCurrentTime,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(uint64_t *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  int v4 = 0;
  uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v3);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9D82E0[v4])(&v2, v3);
  }
  return result;
}

void sub_198E2CA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1) {
    ((void (*)(char *, char *))off_1EE9D82E0[a24])(&a13, &a14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setAnimationCurrentTime(WTF::Seconds,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8378;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setAnimationCurrentTime(WTF::Seconds,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8378;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setAnimationCurrentTime(WTF::Seconds,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetAnimationCurrentTime,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D83A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetAnimationCurrentTime,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D83A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetAnimationCurrentTime,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) <= 0xFFu)
      {
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v6 = a2[3];
        if (v6)
        {
          if (v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::hasAudio(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D83C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::hasAudio(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D83C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::hasAudio(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v4, a2);
  if (v5)
  {
    __int16 v6 = 0;
  }
  else
  {
    LOBYTE(v6) = v4[0];
    HIBYTE(v6) = 1;
  }
  uint64_t result = WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>::operator()(v2);
  if (v5 != -1) {
    return ((uint64_t (*)(__int16 *, unsigned char *))off_1EE9D8190[v5])(&v6, v4);
  }
  return result;
}

void sub_198E2CEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9D8190[a19])(v19 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementHasAudio,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D83F0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementHasAudio,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D83F0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementHasAudio,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>>(v5, a2);
    if (v7)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v8, (uint64_t)v5);
      uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(v2, (uint64_t)v8);
      if (v9 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9D8190[v9])(&v10, v8);
      }
      if (v7)
      {
        if (v6 != -1) {
          return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9D8190[v6])(v8, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementHasAudio,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(v2);
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementHasAudio,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(v4);
  }
  return result;
}

void sub_198E2D0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  if (a35 != -1) {
    ((void (*)(uint64_t, __int16 *))off_1EE9D8190[a35])(v35 - 17, &a23);
  }
  if (a21)
  {
    if (a19 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9D8190[a19])(v35 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementHasAudio,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(uint64_t *a1)
{
  v2[0] = 0;
  int v3 = 0;
  uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v2);
  if (v3 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9D8190[v3])(&v4, v2);
  }
  return result;
}

void sub_198E2D170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9D8190[a19])(v19 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isMuted(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8418;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isMuted(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8418;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isMuted(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v4, a2);
  if (v5)
  {
    __int16 v6 = 0;
  }
  else
  {
    LOBYTE(v6) = v4[0];
    HIBYTE(v6) = 1;
  }
  uint64_t result = WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>::operator()(v2);
  if (v5 != -1) {
    return ((uint64_t (*)(__int16 *, unsigned char *))off_1EE9D8190[v5])(&v6, v4);
  }
  return result;
}

void sub_198E2D314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9D8190[a19])(v19 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsMuted,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8440;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsMuted,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8440;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsMuted,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>>(v5, a2);
    if (v7)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v8, (uint64_t)v5);
      uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(v2, (uint64_t)v8);
      if (v9 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9D8190[v9])(&v10, v8);
      }
      if (v7)
      {
        if (v6 != -1) {
          return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9D8190[v6])(v8, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsMuted,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(v2);
    }
  }
  else
  {
    char v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsMuted,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(v4);
  }
  return result;
}

void sub_198E2D508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  if (a35 != -1) {
    ((void (*)(uint64_t, __int16 *))off_1EE9D8190[a35])(v35 - 17, &a23);
  }
  if (a21)
  {
    if (a19 != -1) {
      ((void (*)(uint64_t, uint64_t *))off_1EE9D8190[a19])(v35 - 17, &a9);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsMuted,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(uint64_t *a1)
{
  v2[0] = 0;
  int v3 = 0;
  uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v2);
  if (v3 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9D8190[v3])(&v4, v2);
  }
  return result;
}

void sub_198E2D5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9D8190[a19])(v19 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setIsMuted(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8468;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setIsMuted(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8468;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setIsMuted(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetIsMuted,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8490;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetIsMuted,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8490;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetIsMuted,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) <= 0xFFu)
      {
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v6 = a2[3];
        if (v6)
        {
          if (v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

void *WebKit::WebBackForwardCacheEntry::WebBackForwardCacheEntry(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  *a1 = a2;
  a1[1] = a5;
  a1[2] = a3;
  a1[3] = a4;
  uint64_t v7 = *a6;
  *a6 = 0;
  a1[4] = v7;
  char v8 = (WTF::RunLoop::TimerBase *)(a1 + 5);
  int v9 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  char v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v10 = &unk_1EE9D8550;
  v10[1] = WebKit::WebBackForwardCacheEntry::expirationTimerFired;
  uint64_t v10[2] = 0;
  v10[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase(v8, v9);
  a1[5] = &unk_1EE9B3390;
  a1[8] = v10;
  WTF::RunLoop::TimerBase::start();
  return a1;
}

WebKit::WebBackForwardCacheEntry *WebKit::WebBackForwardCacheEntry::expirationTimerFired(WebKit::WebBackForwardCacheEntry *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357C90;
  uint64_t v3 = (WTF::StringImpl *)os_log_type_enabled((os_log_t)qword_1EB357C90, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    WTF::makeString<unsigned long long,char,unsigned long long>(*((void *)this + 3), 45, *((void *)this + 2), &v11);
    WTF::String::utf8();
    if (v12) {
      uint64_t v4 = (char *)v12 + 16;
    }
    else {
      uint64_t v4 = 0;
    }
    BOOL v5 = *((void *)this + 4) != 0;
    *(_DWORD *)buf = 134218498;
    uint64_t v14 = this;
    __int16 v15 = 2080;
    unint64_t v16 = v4;
    __int16 v17 = 1024;
    BOOL v18 = v5;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebBackForwardCacheEntry::expirationTimerFired backForwardItemID=%s, hasSuspendedPage=%d", buf, 0x1Cu);
    uint64_t v7 = v12;
    CFTypeRef v12 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1) {
        WTF::fastFree(v7, v6);
      }
      else {
        --*(_DWORD *)v7;
      }
    }
    uint64_t v3 = v11;
    uint64_t v11 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        uint64_t v3 = (WTF::StringImpl *)WTF::StringImpl::destroy(v3, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  char v8 = WebKit::WebBackForwardListItem::allItems(v3);
  int v9 = (WebKit::WebBackForwardListItem *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v8, (void *)this + 2);
  return WebKit::WebBackForwardCache::removeEntry(*(WebKit::WebBackForwardCache **)this, v9);
}

void WebKit::WebBackForwardCacheEntry::~WebBackForwardCacheEntry(WebKit::WebBackForwardCacheEntry *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 16);
  if (*((void *)this + 2) && !*((void *)this + 4))
  {
    v16[0] = *((void *)this + 1);
    {
      WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
    }
    uint64_t v3 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v16);
    if (v3)
    {
      uint64_t v4 = v3;
      BOOL v5 = (unsigned int *)(v3 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 2618;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      BOOL v18 = v6;
      IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v6, v2);
      uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v7 = &unk_1EE9D8578;
      uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v16[0] = v7;
      v16[1] = v8;
      char v17 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v18, 0, (uint64_t)v16, 1);
      if (v17)
      {
        uint64_t v10 = v16[0];
        v16[0] = 0;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
      uint64_t v11 = v18;
      BOOL v18 = 0;
      if (v11)
      {
        IPC::Encoder::~Encoder(v11, v9);
        WTF::fastFree(v14, v15);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
    }
  }
  *((void *)this + 5) = &unk_1EE9B3390;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebBackForwardCacheEntry *)((char *)this + 40));
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
}

void WebKit::WebBackForwardList::~WebBackForwardList(WebKit::WebBackForwardList *this, void *a2)
{
  *(void *)this = &unk_1EE9D84B8;
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
}

{
  uint64_t vars8;

  WebKit::WebBackForwardList::~WebBackForwardList(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::WebBackForwardList::itemForID(WebKit::WebBackForwardListItem *a1, void *a2)
{
  uint64_t v2 = *((void *)a1 + 2);
  if (!v2 || !*(void *)(v2 + 8)) {
    return 0;
  }
  uint64_t v4 = WebKit::WebBackForwardListItem::allItems(a1);

  return WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v4, a2);
}

void WebKit::WebBackForwardList::pageClosed(WebKit::WebBackForwardList *this, void *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    if (*(void *)(v3 + 8) && (uint64_t v4 = *((unsigned int *)this + 9), v4))
    {
      for (unint64_t i = 0; i != v4; ++i)
      {
        if (i >= *((unsigned int *)this + 9))
        {
          __break(0xC471u);
          return;
        }
        WebKit::WebBackForwardList::didRemoveItem(this, *(WebKit::WebBackForwardListItem **)(*((void *)this + 3) + 8 * i));
      }
      uint64_t v3 = *((void *)this + 2);
      *((void *)this + 2) = 0;
      if (v3) {
        goto LABEL_10;
      }
    }
    else
    {
      *((void *)this + 2) = 0;
LABEL_10:
      if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
  WTF::Vector<WTF::Ref<WebKit::WebBackForwardListItem,WTF::RawPtrTraits<WebKit::WebBackForwardListItem>,WTF::DefaultRefDerefTraits<WebKit::WebBackForwardListItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 24, 0);
  if (*((unsigned char *)this + 48)) {
    *((unsigned char *)this + 48) = 0;
  }
}

WebKit::ViewSnapshot *WebKit::WebBackForwardList::didRemoveItem(WebKit::WebBackForwardList *this, WebKit::WebBackForwardListItem *a2)
{
  uint64_t v4 = (WebKit::WebBackForwardCache **)*((void *)a2 + 52);
  if (v4) {
    WebKit::WebBackForwardCache::removeEntry(*v4, a2);
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v6 - 8));
    uint64_t v8 = (uint64_t *)((char *)a2 + 32);
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidRemoveBackForwardItem>(*(void *)(v6 + 240), &v8, *(void *)(*(void *)(v6 + 16) + 1928), 0);
    CFRelease(*(CFTypeRef *)(v6 - 8));
  }
  else
  {
    uint64_t v8 = (uint64_t *)((char *)a2 + 32);
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidRemoveBackForwardItem>(MEMORY[0x100], &v8, *(void *)(MEMORY[0x20] + 1928), 0);
  }
  uint64_t result = (WebKit::ViewSnapshot *)*((void *)a2 + 42);
  *((void *)a2 + 42) = 0;
  if (result)
  {
    return WTF::RefCounted<WebKit::ViewSnapshot>::deref(result);
  }
  return result;
}

void WebKit::WebBackForwardList::addItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      if (*(unsigned char *)(a1 + 48))
      {
        WebKit::WebPageProxy::recordAutomaticNavigationSnapshot((WebKit::WebPageProxy *)(v3 - 16));
        if (!*(unsigned char *)(a1 + 48)) {
          goto LABEL_60;
        }
        unint64_t v6 = *(unsigned int *)(a1 + 36);
        unint64_t v7 = (*(_DWORD *)(a1 + 40) + 1);
        unint64_t v8 = v6 - v7;
        if (v6 != v7)
        {
          if (v8 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198E2E420);
          }
          LODWORD(v57) = v6 - v7;
          uint64_t v56 = WTF::fastMalloc((WTF *)(8 * v8));
          unint64_t v6 = *(unsigned int *)(a1 + 36);
        }
        int v9 = (uint64_t **)(a1 + 24);
        while (v7 < v6)
        {
          if (!v6) {
            goto LABEL_61;
          }
          WebKit::WebBackForwardList::didRemoveItem((WebKit::WebBackForwardList *)a1, *(WebKit::WebBackForwardListItem **)(*(void *)(a1 + 24) + 8 * v6 - 8));
          uint64_t v10 = *(unsigned int *)(a1 + 36);
          if (!v10)
          {
            __break(0xC471u);
            JUMPOUT(0x198E2E3E8);
          }
          uint64_t v11 = v10 - 1;
          uint64_t v12 = &(*v9)[v10 - 1];
          uint64_t v13 = HIDWORD(v57);
          if (HIDWORD(v57) == v57)
          {
            uint64_t v14 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, HIDWORD(v57) + 1, (unint64_t)v12);
            uint64_t v15 = HIDWORD(v57);
            uint64_t v16 = v56;
            uint64_t v17 = *v14;
            *uint64_t v14 = 0;
            *(void *)(v16 + 8 * v15) = v17;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            HIDWORD(v57) = v15 + 1;
            if (!v18)
            {
              __break(0xC471u);
              JUMPOUT(0x198E2E400);
            }
            uint64_t v11 = v18 - 1;
          }
          else
          {
            uint64_t v19 = v56;
            uint64_t v20 = *v12;
            *uint64_t v12 = 0;
            *(void *)(v19 + 8 * v13) = v20;
            HIDWORD(v57) = v13 + 1;
          }
          WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1 + 24, v11);
          unint64_t v6 = *(unsigned int *)(a1 + 36);
        }
        int v21 = *(unsigned __int8 *)(a1 + 48);
        if (v6 >= 0x64)
        {
          if (!*(unsigned char *)(a1 + 48)) {
            goto LABEL_60;
          }
          unint64_t v22 = *(void *)(a1 + 40);
          if (!v22) {
            goto LABEL_39;
          }
          WebKit::WebBackForwardList::didRemoveItem((WebKit::WebBackForwardList *)a1, **(WebKit::WebBackForwardListItem ***)(a1 + 24));
          if (!*(_DWORD *)(a1 + 36))
          {
            __break(0xC471u);
            goto LABEL_71;
          }
          uint64_t v23 = *v9;
          int v24 = HIDWORD(v57);
          if (HIDWORD(v57) == v57)
          {
            uint64_t v23 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, HIDWORD(v57) + 1, (unint64_t)v23);
            int v24 = HIDWORD(v57);
          }
          uint64_t v25 = (void *)(v56 + 8 * HIDWORD(v57));
          uint64_t v34 = *v23;
          uint64_t *v23 = 0;
          *uint64_t v25 = v34;
          HIDWORD(v57) = v24 + 1;
          uint64_t v35 = *v9;
          uint64_t v36 = *v35;
          *uint64_t v35 = 0;
          if (v36) {
            CFRelease(*(CFTypeRef *)(v36 + 8));
          }
          memmove(v35, v35 + 1, *(void *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 36) - (void)(v35 + 1));
          LODWORD(v6) = *(_DWORD *)(a1 + 36) - 1;
          *(_DWORD *)(a1 + 36) = v6;
          if (v6)
          {
            if (*(unsigned char *)(a1 + 48))
            {
              unint64_t v22 = *(void *)(a1 + 40) - 1;
              *(void *)(a1 + 40) = v22;
LABEL_39:
              if (v22 >= v6)
              {
                __break(0xC471u);
                JUMPOUT(0x198E2E408);
              }
              if (WebKit::WebPageProxy::shouldKeepCurrentBackForwardListItemInList(v3 - 16, *(void *)(*(void *)(a1 + 24) + 8 * v22)))
              {
                if (*(unsigned char *)(a1 + 48))
                {
                  unint64_t v37 = *(void *)(a1 + 40) + 1;
                  *(void *)(a1 + 40) = v37;
                  uint64_t v38 = *a2;
                  unint64_t v6 = *(unsigned int *)(a1 + 36);
                  if (v37 > v6)
                  {
LABEL_58:
                    WebKit::WebPageProxy::didChangeBackForwardList(v3 - 16, v38, (uint64_t)&v56);
                    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v54);
                    CFRelease(*(CFTypeRef *)(v3 - 8));
                    return;
                  }
LABEL_50:
                  if (v6 == *(_DWORD *)(a1 + 32))
                  {
                    a2 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v6 + 1, (unint64_t)a2);
                    LODWORD(v6) = *(_DWORD *)(a1 + 36);
                  }
                  uint64_t v47 = *(void *)(a1 + 24);
                  v48 = (uint64_t *)(v47 + 8 * v37);
                  memmove(v48 + 1, v48, v47 + 8 * v6 - (void)v48);
                  uint64_t v49 = *a2;
                  *a2 = 0;
                  uint64_t *v48 = v49;
                  ++*(_DWORD *)(a1 + 36);
                  goto LABEL_58;
                }
              }
              else if (*(unsigned char *)(a1 + 48))
              {
                unint64_t v39 = *(void *)(a1 + 40);
                if (v39 >= *(unsigned int *)(a1 + 36))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E2E410);
                }
                uint64_t v38 = *a2;
                uint64_t v40 = *(void *)(*(void *)(a1 + 24) + 8 * v39);
                CFRetain(*(CFTypeRef *)(v40 + 8));
                uint64_t v55 = v40;
                int v41 = HIDWORD(v57);
                if (HIDWORD(v57) == v57)
                {
                  int v42 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, HIDWORD(v57) + 1, (unint64_t)&v55);
                  uint64_t v43 = HIDWORD(v57);
                  uint64_t v44 = v56;
                  uint64_t v45 = *v42;
                  *int v42 = 0;
                  *(void *)(v44 + 8 * v43) = v45;
                  uint64_t v46 = v55;
                  HIDWORD(v57) = v43 + 1;
                  uint64_t v55 = 0;
                  if (v46) {
                    CFRelease(*(CFTypeRef *)(v46 + 8));
                  }
                }
                else
                {
                  *(void *)(v56 + 8 * HIDWORD(v57)) = v40;
                  HIDWORD(v57) = v41 + 1;
                }
                if (*(unsigned char *)(a1 + 48))
                {
                  unint64_t v50 = *(void *)(a1 + 40);
                  if (v50 >= *(unsigned int *)(a1 + 36))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198E2E418);
                  }
                  uint64_t v51 = *(void *)(a1 + 24);
                  uint64_t v52 = *a2;
                  *a2 = 0;
                  uint64_t v53 = *(void *)(v51 + 8 * v50);
                  *(void *)(v51 + 8 * v50) = v52;
                  if (v53) {
                    CFRelease(*(CFTypeRef *)(v53 + 8));
                  }
                  goto LABEL_58;
                }
              }
            }
LABEL_60:
            __break(1u);
LABEL_61:
            __break(0xC471u);
LABEL_71:
            JUMPOUT(0x198E2E3E0);
          }
LABEL_49:
          unint64_t v37 = 0;
          *(unsigned char *)(a1 + 48) = 1;
          *(void *)(a1 + 40) = 0;
          uint64_t v38 = *a2;
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v26 = *(unsigned int *)(a1 + 36);
        if (v26)
        {
          uint64_t v27 = 0;
          unint64_t v28 = 0;
          uint64_t v29 = 8 * v26;
          do
          {
            if (v28 >= *(unsigned int *)(a1 + 36))
            {
              __break(0xC471u);
              JUMPOUT(0x198E2E3F0);
            }
            WebKit::WebBackForwardList::didRemoveItem((WebKit::WebBackForwardList *)a1, *(WebKit::WebBackForwardListItem **)(*(void *)(a1 + 24) + v27));
            if (v28 >= *(unsigned int *)(a1 + 36))
            {
              __break(0xC471u);
              JUMPOUT(0x198E2E3F8);
            }
            uint64_t v30 = (uint64_t *)(*(void *)(a1 + 24) + v27);
            int v31 = HIDWORD(v57);
            if (HIDWORD(v57) == v57)
            {
              uint64_t v30 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, HIDWORD(v57) + 1, (unint64_t)v30);
              int v31 = HIDWORD(v57);
            }
            uint64_t v32 = (void *)(v56 + 8 * HIDWORD(v57));
            uint64_t v33 = *v30;
            uint64_t *v30 = 0;
            *uint64_t v32 = v33;
            HIDWORD(v57) = v31 + 1;
            ++v28;
            v27 += 8;
          }
          while (v29 != v27);
        }
        WTF::Vector<WTF::Ref<WebKit::WebBackForwardListItem,WTF::RawPtrTraits<WebKit::WebBackForwardListItem>,WTF::DefaultRefDerefTraits<WebKit::WebBackForwardListItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 24, 0);
        int v21 = *(unsigned __int8 *)(a1 + 48);
      }
      if (v21)
      {
        unint64_t v22 = *(void *)(a1 + 40);
        LODWORD(v6) = *(_DWORD *)(a1 + 36);
        goto LABEL_39;
      }
      LODWORD(v6) = *(_DWORD *)(a1 + 36);
      goto LABEL_49;
    }
  }
}

uint64_t *WebKit::WebBackForwardList::addRootChildFrameItem(uint64_t *this, WebKit::WebBackForwardListItem **a2)
{
  uint64_t v2 = this[2];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 312);
      if (v4)
      {
        uint64_t v6 = (uint64_t)this;
        unsigned int v7 = 0;
        uint64_t v8 = *(void *)(v4 + 272);
        uint64_t v9 = *(void *)(v4 + 280);
        while (1)
        {
          this = (uint64_t *)WebKit::WebBackForwardList::itemAtIndex(v6, v7);
          if (!this) {
            break;
          }
          uint64_t v10 = (uint64_t)this;
          --v7;
          if (this[50] == v8 && this[51] == v9)
          {
            WebKit::WebBackForwardListItem::setMainFrameItem(*a2, (WebKit::WebBackForwardListItem *)this);
            return WebKit::WebBackForwardListItem::addRootChildFrameItem(v10, (unint64_t)a2);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebBackForwardList::itemAtIndex(uint64_t this, unsigned int a2)
{
  if (!*(unsigned char *)(this + 48)) {
    return 0;
  }
  uint64_t v2 = *(void *)(this + 16);
  if (!v2 || !*(void *)(v2 + 8)) {
    return 0;
  }
  uint64_t v3 = *(void *)(this + 40);
  if ((a2 & 0x80000000) != 0)
  {
    if (v3 < -a2) {
      return 0;
    }
  }
  else if (a2 && *(_DWORD *)(this + 36) + ~v3 < a2)
  {
    return 0;
  }
  unint64_t v4 = v3 + (int)a2;
  if (v4 < *(unsigned int *)(this + 36)) {
    return *(void *)(*(void *)(this + 24) + 8 * v4);
  }
  __break(0xC471u);
  return this;
}

unsigned int *WebKit::WebBackForwardListItem::setMainFrameItem(WebKit::WebBackForwardListItem *this, WebKit::WebBackForwardListItem *a2)
{
  if (a2)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2);
    unint64_t v4 = (atomic_uint *)*((void *)a2 + 2);
    if (v4) {
      atomic_fetch_add(v4, 1u);
    }
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t result = (unsigned int *)*((void *)this + 53);
  *((void *)this + 53) = v4;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t *WebKit::WebBackForwardListItem::addRootChildFrameItem(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t *)a2;
  uint64_t result = (uint64_t *)(a1 + 432);
  uint64_t v5 = *(unsigned int *)(a1 + 444);
  if (v5 == *(_DWORD *)(a1 + 440))
  {
    uint64_t result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, a2);
    uint64_t v2 = result;
    uint64_t v5 = *(unsigned int *)(a1 + 444);
    uint64_t v6 = (void *)(*(void *)(a1 + 432) + 8 * v5);
  }
  else
  {
    uint64_t v6 = (void *)(*result + 8 * v5);
  }
  uint64_t v7 = *v2;
  *uint64_t v2 = 0;
  void *v6 = v7;
  *(_DWORD *)(a1 + 444) = v5 + 1;
  return result;
}

void WebKit::WebBackForwardList::goToItem(WebKit::WebBackForwardList *this, WebKit::WebBackForwardListItem *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      unint64_t v6 = *((unsigned int *)this + 9);
      if (!v6 || !*((unsigned char *)this + 48)) {
        goto LABEL_45;
      }
      uint64_t v7 = *((void *)a2 + 53);
      if (v7)
      {
        uint64_t v8 = *(WebKit::WebBackForwardListItem **)(v7 + 8);
        if (v8) {
          a2 = v8;
        }
      }
      unint64_t v9 = 0;
      while (*(WebKit::WebBackForwardListItem **)(*((void *)this + 3) + 8 * v9) != a2)
      {
        if (v6 == ++v9) {
          goto LABEL_45;
        }
      }
      unint64_t v10 = *((void *)this + 5);
      if (v9 < v10)
      {
        uint64_t v11 = (v6 - 1);
        if ((v11 - v9) < 0xB)
        {
          uint64_t v12 = (WebCore::DiagnosticLoggingKeys *)WTF::String::number((WTF::String *)(v11 - v9));
        }
        else
        {
          uint64_t v12 = (WebCore::DiagnosticLoggingKeys *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          uint64_t v32 = v30;
        }
        WebCore::DiagnosticLoggingKeys::backNavigationDeltaKey((uint64_t *)&v30, v12);
        WebKit::WebPageProxy::logDiagnosticMessage((WebKit::WebPageProxy *)(v3 - 16), (uint64_t)&v30, (uint64_t)&v32, 0);
        uint64_t v14 = v30;
        uint64_t v30 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v13);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
        uint64_t v15 = v32;
        uint64_t v32 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v13);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        if (!*((unsigned char *)this + 48)) {
          goto LABEL_49;
        }
        unint64_t v10 = *((void *)this + 5);
        unint64_t v6 = *((unsigned int *)this + 9);
      }
      if (v10 >= v6)
      {
        __break(0xC471u);
        goto LABEL_50;
      }
      uint64_t v16 = *((void *)this + 3);
      if (*(WebKit::WebBackForwardListItem **)(v16 + 8 * v10) == a2)
      {
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        goto LABEL_44;
      }
      WebKit::WebPageProxy::recordAutomaticNavigationSnapshot((WebKit::WebPageProxy *)(v3 - 16));
      if (*((unsigned char *)this + 48))
      {
        unint64_t v17 = *((void *)this + 5);
        if (v17 < *((unsigned int *)this + 9))
        {
          char shouldKeepCurrentBackForwardListItemInList = WebKit::WebPageProxy::shouldKeepCurrentBackForwardListItemInList(v3 - 16, *(void *)(*((void *)this + 3) + 8 * v17));
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          if ((shouldKeepCurrentBackForwardListItemInList & 1) == 0)
          {
            uint64_t v19 = *(CFTypeRef **)(v16 + 8 * v10);
            CFRetain(v19[1]);
            uint64_t v32 = (WTF::StringImpl *)v19;
            int v20 = HIDWORD(v31);
            if (HIDWORD(v31) == v31)
            {
              int v21 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v30, HIDWORD(v31) + 1, (unint64_t)&v32);
              uint64_t v22 = HIDWORD(v31);
              uint64_t v23 = v30;
              uint64_t v24 = *v21;
              *int v21 = 0;
              *((void *)v23 + v22) = v24;
              uint64_t v25 = v32;
              HIDWORD(v31) = v22 + 1;
              uint64_t v32 = 0;
              if (v25) {
                CFRelease(*((CFTypeRef *)v25 + 1));
              }
            }
            else
            {
              *((void *)v30 + HIDWORD(v31)) = v19;
              HIDWORD(v31) = v20 + 1;
            }
            if (*((unsigned char *)this + 48))
            {
              uint64_t v26 = (uint64_t *)(*((void *)this + 3) + 8 * *((void *)this + 5));
              uint64_t v27 = *v26;
              *uint64_t v26 = 0;
              if (v27) {
                CFRelease(*(CFTypeRef *)(v27 + 8));
              }
              memmove(v26, v26 + 1, *((void *)this + 3) + 8 * *((unsigned int *)this + 9) - (void)(v26 + 1));
              uint64_t v28 = (*((_DWORD *)this + 9) - 1);
              *((_DWORD *)this + 9) = v28;
              if (v28)
              {
                unint64_t v9 = 0;
                while (*(WebKit::WebBackForwardListItem **)(*((void *)this + 3) + 8 * v9) != a2)
                {
                  if (v28 == ++v9) {
                    goto LABEL_43;
                  }
                }
              }
              else
              {
LABEL_43:
                unint64_t v9 = -1;
              }
              goto LABEL_44;
            }
            goto LABEL_49;
          }
LABEL_44:
          *((void *)this + 5) = v9;
          *((unsigned char *)this + 48) = 1;
          WebKit::WebPageProxy::didChangeBackForwardList(v3 - 16, 0, (uint64_t)&v30);
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v29);
LABEL_45:
          CFRelease(*(CFTypeRef *)(v3 - 8));
          return;
        }
        __break(0xC471u);
      }
LABEL_49:
      __break(1u);
LABEL_50:
      JUMPOUT(0x198E2E914);
    }
  }
}

void *WebKit::WebBackForwardList::protectedCurrentItem@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = this[2];
  if (!v3 || !*(void *)(v3 + 8) || !*((unsigned char *)this + 48))
  {
    uint64_t v5 = 0;
LABEL_8:
    *a2 = v5;
    return this;
  }
  unint64_t v4 = this[5];
  if (v4 < *((unsigned int *)this + 9))
  {
    uint64_t v5 = *(void *)(this[3] + 8 * v4);
    if (v5) {
      this = CFRetain(*(CFTypeRef *)(v5 + 8));
    }
    goto LABEL_8;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebKit::WebBackForwardList::backItem(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if (!v1) {
    return 0;
  }
  if (!*(void *)(v1 + 8)) {
    return 0;
  }
  if (!*(unsigned char *)(this + 48)) {
    return 0;
  }
  uint64_t v2 = *(void *)(this + 40);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v2 - 1;
  if (v3 < *(unsigned int *)(this + 36)) {
    return *(void *)(*(void *)(this + 24) + 8 * v3);
  }
  __break(0xC471u);
  return this;
}

uint64_t WebKit::WebBackForwardList::forwardItem(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if (!v1) {
    return 0;
  }
  if (!*(void *)(v1 + 8)) {
    return 0;
  }
  if (!*(unsigned char *)(this + 48)) {
    return 0;
  }
  unint64_t v2 = *(unsigned int *)(this + 36);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(this + 40);
  if (v3 >= v2 - 1) {
    return 0;
  }
  unint64_t v4 = v3 + 1;
  if (v4 < v2) {
    return *(void *)(*(void *)(this + 24) + 8 * v4);
  }
  __break(0xC471u);
  return this;
}

uint64_t WebKit::WebBackForwardList::backList@<X0>(WebKit::WebBackForwardList *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2 && *(void *)(v2 + 8) && *((unsigned char *)this + 48)) {
    unsigned int v3 = *((_DWORD *)this + 10);
  }
  else {
    unsigned int v3 = 0;
  }
  return WebKit::WebBackForwardList::backListAsAPIArrayWithLimit(this, v3, a2);
}

uint64_t WebKit::WebBackForwardList::backListAsAPIArrayWithLimit@<X0>(WebKit::WebBackForwardList *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 2);
  if (v4
    && *(void *)(v4 + 8)
    && *((unsigned char *)this + 48)
    && ((v6 = *((_DWORD *)this + 10), v6 >= a2) ? (uint64_t v7 = a2) : (uint64_t v7 = v6), v7))
  {
    if (v7 >> 29)
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x198E2EB3CLL);
    }
    unint64_t v8 = v6 - v7;
    unint64_t v9 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v15) = v7;
    uint64_t v14 = v9;
    uint64_t v10 = v7;
    do
    {
      if (v8 >= *((unsigned int *)this + 9)) {
        goto LABEL_15;
      }
      uint64_t v11 = *(void *)(*((void *)this + 3) + 8 * v8);
      CFRetain(*(CFTypeRef *)(v11 + 8));
      *v9++ = v11;
      ++v8;
      --v10;
    }
    while (v10);
    HIDWORD(v15) = v7;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  API::Array::create((uint64_t *)&v14, a3);
  return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v12);
}

uint64_t WebKit::WebBackForwardList::forwardList@<X0>(WebKit::WebBackForwardList *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2 && *(void *)(v2 + 8) && *((unsigned char *)this + 48)) {
    unsigned int v3 = *((_DWORD *)this + 9) + ~*((_DWORD *)this + 10);
  }
  else {
    unsigned int v3 = 0;
  }
  return WebKit::WebBackForwardList::forwardListAsAPIArrayWithLimit(this, v3, a2);
}

uint64_t WebKit::WebBackForwardList::forwardListAsAPIArrayWithLimit@<X0>(WebKit::WebBackForwardList *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 2);
  if (v4
    && *(void *)(v4 + 8)
    && *((unsigned char *)this + 48)
    && ((v6 = *((_DWORD *)this + 9) + ~*((_DWORD *)this + 10), v6 >= a2) ? (uint64_t v7 = a2) : (uint64_t v7 = v6), v7))
  {
    if (v7 >> 29)
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x198E2EC64);
    }
    unint64_t v8 = *((void *)this + 5) + 1;
    unint64_t v9 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v15) = v7;
    uint64_t v14 = v9;
    uint64_t v10 = v7;
    do
    {
      if (v8 >= *((unsigned int *)this + 9)) {
        goto LABEL_15;
      }
      uint64_t v11 = *(void *)(*((void *)this + 3) + 8 * v8);
      CFRetain(*(CFTypeRef *)(v11 + 8));
      *v9++ = v11;
      ++v8;
      --v10;
    }
    while (v10);
    HIDWORD(v15) = v7;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  API::Array::create((uint64_t *)&v14, a3);
  return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v12);
}

void WebKit::WebBackForwardList::removeAllItems(WebKit::WebBackForwardList *this)
{
  uint64_t v2 = *((unsigned int *)this + 9);
  if (v2)
  {
    unsigned int v3 = (WebKit::WebBackForwardListItem **)*((void *)this + 3);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      WebKit::WebBackForwardList::didRemoveItem(this, v5);
      v4 -= 8;
    }
    while (v4);
  }
  if (*((unsigned char *)this + 48)) {
    *((unsigned char *)this + 48) = 0;
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0)
  {
    uint64_t v8 = v7 - 16;
    CFRetain(*(CFTypeRef *)(v7 - 8));
  }
  else
  {
    uint64_t v8 = 0;
  }
  v12[0] = *((void *)this + 3);
  v12[1] = *((void *)this + 4);
  v11[0] = 0;
  *((void *)this + 3) = 0;
  v11[1] = 0;
  *((void *)this + 4) = 0;
  WebKit::WebPageProxy::didChangeBackForwardList(v8, 0, (uint64_t)v12);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v9);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v10);
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
}

void WebKit::WebBackForwardList::clear(WebKit::WebBackForwardList *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      unint64_t v4 = *((unsigned int *)this + 9);
      if (v4 >= 2)
      {
        uint64_t v5 = (WebKit::WebBackForwardListItem ***)((char *)this + 24);
        uint64_t v6 = *((void *)this + 2);
        if (!v6 || !*(void *)(v6 + 8) || !*((unsigned char *)this + 48)) {
          goto LABEL_29;
        }
        unint64_t v7 = *((void *)this + 5);
        if (v7 >= v4)
        {
          __break(0xC471u);
          JUMPOUT(0x198E2EFFCLL);
        }
        uint64_t v8 = (CFTypeRef *)(*v5)[v7];
        if (v8)
        {
          CFRetain(v8[1]);
          for (unint64_t i = 0; i != v4; ++i)
          {
            if (i >= *((unsigned int *)this + 9)) {
              goto LABEL_42;
            }
            uint64_t v10 = (*v5)[i];
            if (v8 != (CFTypeRef *)v10) {
              WebKit::WebBackForwardList::didRemoveItem(this, v10);
            }
          }
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          if (v4 >= 0x20000001)
          {
LABEL_42:
            __break(0xC471u);
            JUMPOUT(0x198E2EFECLL);
          }
          LODWORD(v30) = v4 - 1;
          uint64_t v29 = WTF::fastMalloc((WTF *)(8 * (v4 - 1)));
          unsigned int v11 = 0;
          for (unint64_t j = 0; j != v4; ++j)
          {
            if (*((unsigned char *)this + 48) && j != *((void *)this + 5))
            {
              if (j >= *((unsigned int *)this + 9))
              {
                __break(0xC471u);
                JUMPOUT(0x198E2EFF4);
              }
              uint64_t v13 = &(*v5)[j];
              if (v11 == v30)
              {
                uint64_t v13 = (WebKit::WebBackForwardListItem **)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v29, v11 + 1, (unint64_t)v13);
                unsigned int v11 = HIDWORD(v30);
                uint64_t v14 = (WebKit::WebBackForwardListItem **)(v29 + 8 * HIDWORD(v30));
              }
              else
              {
                uint64_t v14 = (WebKit::WebBackForwardListItem **)(v29 + 8 * v11);
              }
              ++v11;
              uint64_t v15 = *v13;
              *uint64_t v13 = 0;
              *uint64_t v14 = v15;
              HIDWORD(v30) = v11;
            }
          }
          if (!*((unsigned char *)this + 48)) {
            *((unsigned char *)this + 48) = 1;
          }
          *((void *)this + 5) = 0;
          WTF::Vector<WTF::Ref<WebKit::WebBackForwardListItem,WTF::RawPtrTraits<WebKit::WebBackForwardListItem>,WTF::DefaultRefDerefTraits<WebKit::WebBackForwardListItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 24, 0);
          v28[0] = v8;
          uint64_t v16 = *((unsigned int *)this + 9);
          if (v16 == *((_DWORD *)this + 8))
          {
            unint64_t v17 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v16 + 1, (unint64_t)v28);
            uint64_t v18 = *((unsigned int *)this + 9);
            uint64_t v19 = *((void *)this + 3);
            uint64_t v20 = *v17;
            *unint64_t v17 = 0;
            *(void *)(v19 + 8 * v18) = v20;
            uint64_t v21 = v28[0];
            *((_DWORD *)this + 9) = v18 + 1;
            v28[0] = 0;
            if (v21) {
              CFRelease(*(CFTypeRef *)(v21 + 8));
            }
          }
          else
          {
            *(void *)(*((void *)this + 3) + 8 * v16) = v8;
            *((_DWORD *)this + 9) = v16 + 1;
          }
          WebKit::WebPageProxy::didChangeBackForwardList(v2 - 16, 0, (uint64_t)&v29);
          uint64_t v27 = &v29;
        }
        else
        {
LABEL_29:
          uint64_t v22 = *v5;
          uint64_t v23 = 8 * v4;
          do
          {
            uint64_t v24 = *v22++;
            WebKit::WebBackForwardList::didRemoveItem(this, v24);
            v23 -= 8;
          }
          while (v23);
          if (*((unsigned char *)this + 48)) {
            *((unsigned char *)this + 48) = 0;
          }
          uint64_t v29 = *((void *)this + 3);
          uint64_t v30 = *((void *)this + 4);
          v28[0] = 0;
          *((void *)this + 3) = 0;
          v28[1] = 0;
          *((void *)this + 4) = 0;
          WebKit::WebPageProxy::didChangeBackForwardList(v2 - 16, 0, (uint64_t)&v29);
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v25);
          uint64_t v27 = v28;
        }
        WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v26);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

uint64_t WebKit::WebBackForwardList::backForwardListState@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  *(unsigned char *)(a3 + 20) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  int v6 = *(unsigned __int8 *)(result + 48);
  if (*(unsigned char *)(result + 48))
  {
    uint64_t v7 = *(void *)(result + 40);
    int v6 = 1;
    *(unsigned char *)(a3 + 20) = 1;
    *(_DWORD *)(a3 + 16) = v7;
  }
  if (!*(_DWORD *)(result + 36)) {
    goto LABEL_33;
  }
  unint64_t v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(v4 + 24);
    if (*a2
      && (uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a2 + 16))(*a2, *(void *)(v9 + 8 * v8)),
          (result & 1) == 0))
    {
      if (*(unsigned char *)(a3 + 20))
      {
        unint64_t v29 = *(unsigned int *)(a3 + 16);
        if (v29)
        {
          if (v8 <= v29) {
            *(_DWORD *)(a3 + 16) = v29 - 1;
          }
        }
      }
    }
    else
    {
      uint64_t v10 = *(void *)(v9 + 8 * v8);
      unsigned int v11 = (_OWORD *)(v10 + 32);
      uint64_t v12 = *(unsigned int *)(a3 + 12);
      if (v12 == *(_DWORD *)(a3 + 8))
      {
        unint64_t v13 = WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v12 + 1, (unint64_t)v11);
        unsigned int v14 = *(_DWORD *)(a3 + 12);
        uint64_t v15 = *(void *)a3;
        uint64_t v16 = *(void *)a3 + 312 * v14;
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v13;
        unint64_t v17 = *(_DWORD **)(v13 + 16);
        if (v17) {
          *v17 += 2;
        }
        *(void *)(v16 + 16) = v17;
        uint64_t v18 = v15 + 312 * v14;
        uint64_t result = (uint64_t)WebKit::FrameState::FrameState((WebKit::FrameState *)(v18 + 24), (const WebKit::FrameState *)(v13 + 24));
        *(unsigned char *)(v18 + 272) = *(unsigned char *)(v13 + 272);
        uint64_t v19 = *(atomic_uint **)(v13 + 280);
        if (v19) {
          atomic_fetch_add(v19, 1u);
        }
        uint64_t v20 = v15 + 312 * v14;
        *(void *)(v20 + 280) = v19;
        *(unsigned char *)(v20 + 288) = *(unsigned char *)(v13 + 288);
        *(unsigned char *)(v20 + 296) = *(unsigned char *)(v13 + 296);
        uint64_t v21 = *(_DWORD **)(v13 + 304);
        if (v21) {
          ++*v21;
        }
        uint64_t v22 = v15 + 312 * v14;
      }
      else
      {
        uint64_t v23 = *(void *)a3;
        uint64_t v24 = *(void *)a3 + 312 * v12;
        *(_OWORD *)uint64_t v24 = *v11;
        uint64_t v25 = *(_DWORD **)(v10 + 48);
        if (v25) {
          *v25 += 2;
        }
        *(void *)(v24 + 16) = v25;
        uint64_t v26 = v23 + 312 * v12;
        uint64_t result = (uint64_t)WebKit::FrameState::FrameState((WebKit::FrameState *)(v26 + 24), (const WebKit::FrameState *)(v10 + 56));
        *(unsigned char *)(v26 + 272) = *(unsigned char *)(v10 + 304);
        uint64_t v27 = *(atomic_uint **)(v10 + 312);
        if (v27) {
          atomic_fetch_add(v27, 1u);
        }
        uint64_t v28 = v23 + 312 * v12;
        *(void *)(v28 + 280) = v27;
        *(unsigned char *)(v28 + 288) = *(unsigned char *)(v10 + 320);
        *(unsigned char *)(v28 + 296) = *(unsigned char *)(v10 + 328);
        uint64_t v21 = *(_DWORD **)(v10 + 336);
        if (v21) {
          ++*v21;
        }
        uint64_t v22 = v23 + 312 * v12;
      }
      *(void *)(v22 + 304) = v21;
      ++*(_DWORD *)(a3 + 12);
    }
    ++v8;
  }
  while (v8 < *(unsigned int *)(v4 + 36));
  unsigned int v30 = *(_DWORD *)(a3 + 12);
  int v6 = *(unsigned __int8 *)(a3 + 20);
  if (v30)
  {
    if (*(unsigned char *)(a3 + 20))
    {
      if (v30 <= *(_DWORD *)(a3 + 16)) {
        *(_DWORD *)(a3 + 16) = v30 - 1;
      }
    }
    else
    {
      uint64_t v31 = (WebKit::WebBackForwardList *)std::__throw_bad_optional_access[abi:sn180100]();
      return WebKit::WebBackForwardList::restoreFromState(v31, v32);
    }
  }
  else
  {
LABEL_33:
    if (v6) {
      *(unsigned char *)(a3 + 20) = 0;
    }
  }
  return result;
}

uint64_t WebKit::WebBackForwardList::restoreFromState(uint64_t this, BackForwardListState *a2)
{
  uint64_t v2 = *(void *)(this + 16);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v4 = this;
    uint64_t m_size = a2->items.m_size;
    if (m_size)
    {
      if (m_size >> 29)
      {
        __break(0xC471u);
        return this;
      }
      uint64_t v6 = WTF::fastMalloc((WTF *)(8 * m_size));
      unsigned int v7 = a2->items.m_size;
      if (v7)
      {
        uint64_t v8 = 0;
        m_buffer = a2->items.m_buffer;
        uint64_t v10 = (BackForwardListItemState *)((char *)a2->items.m_buffer + 312 * v7);
        do
        {
          uint64_t v11 = v8;
          IdentifierInternal = (WebCore::Process *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
          uint64_t v13 = WebCore::Process::identifier(IdentifierInternal);
          *(void *)m_buffer = IdentifierInternal;
          *((void *)m_buffer + 1) = v13;
          uint64_t v14 = *(void *)(*(void *)(v4 + 16) + 8);
          if (v14) {
            uint64_t v15 = v14 - 16;
          }
          else {
            uint64_t v15 = 0;
          }
          WebKit::WebBackForwardListItem::create((WTF::RunLoop *)m_buffer, *(void *)(*(void *)(v15 + 32) + 760), v23);
          uint64_t v8 = v11 + 1;
          *(void *)(v6 + 8 * v11) = v23[0];
          m_buffer = (BackForwardListItemState *)((char *)m_buffer + 312);
        }
        while (m_buffer != v10);
      }
      else
      {
        LODWORD(v8) = 0;
      }
    }
    else
    {
      LODWORD(v8) = 0;
      uint64_t v6 = 0;
    }
    uint64_t v16 = *(unsigned int *)(v4 + 36);
    if (v16)
    {
      unint64_t v17 = *(uint64_t **)(v4 + 24);
      uint64_t v18 = 8 * v16;
      do
      {
        uint64_t v19 = *v17;
        *unint64_t v17 = 0;
        if (v19) {
          CFRelease(*(CFTypeRef *)(v19 + 8));
        }
        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
    uint64_t v20 = *(WTF **)(v4 + 24);
    if (v20)
    {
      *(void *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 32) = 0;
      WTF::fastFree(v20, a2);
    }
    v23[0] = 0;
    v23[1] = 0;
    *(void *)(v4 + 24) = v6;
    *(_DWORD *)(v4 + 32) = m_size;
    *(_DWORD *)(v4 + 36) = v8;
    this = WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, a2);
    BOOL engaged = a2->currentIndex.__engaged_;
    if (engaged)
    {
      uint64_t val = a2->currentIndex.var0.__val_;
      BOOL engaged = 1;
    }
    else
    {
      uint64_t val = 0;
    }
    *(void *)(v4 + 40) = val;
    *(unsigned char *)(v4 + 48) = engaged;
  }
  return this;
}

uint64_t WebKit::itemSkippingBackForwardItemsAddedByJSWithoutUserGesture(uint64_t a1, int a2)
{
  if (a2) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = -1;
  }
  uint64_t v5 = WebKit::WebBackForwardList::itemAtIndex(a1, v4);
  if (!v5) {
    return v5;
  }
  uint64_t result = WTF::linkedOnOrAfterSDKWithBehavior();
  if (!result) {
    return v5;
  }
  if (a2) {
    goto LABEL_9;
  }
  unint64_t v7 = *(void *)(a1 + 40);
  if (v7 < *(unsigned int *)(a1 + 36))
  {
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 24) + 8 * v7) + 320))
    {
LABEL_9:
      if (*(unsigned char *)(v5 + 320))
      {
        int v8 = 0;
        while (1)
        {
          uint64_t v9 = WebKit::WebBackForwardList::itemAtIndex(a1, 2 * v4 + v8);
          if (!v9) {
            break;
          }
          uint64_t v10 = v9;
          uint64_t v11 = qword_1EB358050;
          if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "UI Navigation is skipping a WebBackForwardListItem because it was added by JavaScript without user interaction", buf, 2u);
          }
          v8 += v4;
          if (!*(unsigned char *)(v10 + 320))
          {
            v4 += v8;
            if (a2) {
              goto LABEL_21;
            }
            goto LABEL_16;
          }
        }
      }
      else
      {
        uint64_t v10 = v5;
        if (a2)
        {
LABEL_21:
          uint64_t v15 = WebKit::WebBackForwardList::itemAtIndex(a1, v4 + 1);
          if (v15)
          {
            uint64_t v16 = v15;
            uint64_t v5 = v10;
            if (*(unsigned char *)(v15 + 320))
            {
              uint64_t v17 = WebKit::WebBackForwardList::itemAtIndex(a1, v4 + 1);
              if (v17)
              {
                unsigned int v18 = v4 + 2;
                do
                {
                  uint64_t v5 = v16;
                  if (!*(unsigned char *)(v17 + 320)) {
                    break;
                  }
                  uint64_t v16 = v17;
                  uint64_t v17 = WebKit::WebBackForwardList::itemAtIndex(a1, v18++);
                  uint64_t v5 = v16;
                }
                while (v17);
              }
              else
              {
                return v16;
              }
            }
          }
          else
          {
            return v10;
          }
        }
        else
        {
LABEL_16:
          uint64_t v12 = WebKit::WebBackForwardList::itemAtIndex(a1, v4 - 1);
          if (v12)
          {
            uint64_t v13 = v12;
            uint64_t v14 = qword_1EB358050;
            if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v19 = 0;
              _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "UI Navigation is skipping a WebBackForwardListItem that has user interaction because we started on an item that didn't have interaction", v19, 2u);
            }
            return v13;
          }
        }
      }
    }
    return v5;
  }
  __break(0xC471u);
  return result;
}

void *WebKit::WebContextClient::networkProcessDidCrash(void *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))result[8];
  if (v4)
  {
    if (a2) {
      uint64_t v5 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    if (a4 > 0xC) {
      uint64_t v6 = 3;
    }
    else {
      uint64_t v6 = dword_1994F7008[(char)a4];
    }
    return (void *)v4(v5, a3, v6, result[1]);
  }
  else
  {
    unint64_t v7 = (uint64_t (*)(uint64_t, void))result[3];
    if (v7)
    {
      if (a2) {
        uint64_t v8 = *(void *)(a2 + 8);
      }
      else {
        uint64_t v8 = 0;
      }
      return (void *)v7(v8, result[1]);
    }
  }
  return result;
}

void *WebKit::WebContextClient::serviceWorkerProcessDidCrash(void *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))result[9];
  if (v4)
  {
    if (a2) {
      uint64_t v5 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    if (a4 > 0xC) {
      uint64_t v6 = 3;
    }
    else {
      uint64_t v6 = dword_1994F7008[(char)a4];
    }
    return (void *)v4(v5, a3, v6, result[1]);
  }
  else
  {
    unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void))result[6];
    if (v7)
    {
      if (a2) {
        uint64_t v8 = *(void *)(a2 + 8);
      }
      else {
        uint64_t v8 = 0;
      }
      return (void *)v7(v8, a3, result[1]);
    }
  }
  return result;
}

void *WebKit::WebContextClient::gpuProcessDidCrash(void *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))result[10];
  if (v4)
  {
    if (a2) {
      uint64_t v5 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    if (a4 > 0xC) {
      uint64_t v6 = 3;
    }
    else {
      uint64_t v6 = dword_1994F7008[(char)a4];
    }
    return (void *)v4(v5, a3, v6, result[1]);
  }
  else
  {
    unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void))result[7];
    if (v7)
    {
      if (a2) {
        uint64_t v8 = *(void *)(a2 + 8);
      }
      else {
        uint64_t v8 = 0;
      }
      return (void *)v7(v8, a3, result[1]);
    }
  }
  return result;
}

_OWORD *WebKit::WebContextInjectedBundleClient::WebContextInjectedBundleClient(uint64_t a1, long long *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t result = (_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = &unk_1EE9D84E0;
  if (!a2) {
    return (_OWORD *)a1;
  }
  uint64_t v4 = *(unsigned int *)a2;
  if (v4 == 2)
  {
    long long v5 = *a2;
    long long v6 = a2[2];
    result[1] = a2[1];
    result[2] = v6;
    *uint64_t result = v5;
    return (_OWORD *)a1;
  }
  if ((int)v4 > 1) {
    return (_OWORD *)a1;
  }
  if (v4 < 3)
  {
    memcpy(result, a2, constinit[v4]);
    return (_OWORD *)a1;
  }
  __break(1u);
  return result;
}

void WebKit::WebContextInjectedBundleClient::didReceiveMessageFromInjectedBundle(WebKit::WebContextInjectedBundleClient *this, WebKit::WebProcessPool *a2, WTF::StringImpl **a3, API::Object *a4)
{
  uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t, void))*((void *)this + 3);
  if (v4)
  {
    uint64_t v7 = *((void *)a2 + 1);
    uint64_t v8 = *a3;
    if (*a3) {
      *(_DWORD *)v8 += 2;
    }
    uint64_t v14 = v8;
    API::String::create(&v14, &v15);
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v11)
        {
LABEL_8:
          uint64_t v12 = *((void *)v11 + 1);
          if (a4)
          {
LABEL_9:
            uint64_t v13 = *((void *)a4 + 1);
            goto LABEL_10;
          }
LABEL_15:
          uint64_t v13 = 0;
LABEL_10:
          v4(v7, v12, v13, *((void *)this + 2));
          if (v11) {
            CFRelease(*((CFTypeRef *)v11 + 1));
          }
          return;
        }
LABEL_14:
        uint64_t v12 = 0;
        if (a4) {
          goto LABEL_9;
        }
        goto LABEL_15;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v11) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
}

void WebKit::WebContextInjectedBundleClient::didReceiveSynchronousMessageFromInjectedBundle(void *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t, id *, void))a1[4];
  if (v8)
  {
    id v29 = 0;
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *a3;
    if (*a3) {
      *(_DWORD *)v10 += 2;
    }
    uint64_t v31 = v10;
    API::String::create(&v31, &v32);
    uint64_t v12 = v31;
    uint64_t v13 = v32;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v11);
        if (v13)
        {
LABEL_8:
          uint64_t v14 = *((void *)v13 + 1);
          if (a4)
          {
LABEL_9:
            uint64_t v15 = *(void *)(a4 + 8);
            goto LABEL_10;
          }
LABEL_31:
          uint64_t v15 = 0;
LABEL_10:
          v8(v9, v14, v15, &v29, a1[2]);
          if (v13) {
            CFRelease(*((CFTypeRef *)v13 + 1));
          }
          uint64_t v16 = (uint64_t)v29;
          if (v29) {
            uint64_t v16 = [v29 _apiObject];
          }
          uint64_t v28 = v16;
          WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()(a5, &v28);
          uint64_t v17 = v28;
          uint64_t v28 = 0;
          if (v17) {
            goto LABEL_15;
          }
          return;
        }
LABEL_30:
        uint64_t v14 = 0;
        if (a4) {
          goto LABEL_9;
        }
        goto LABEL_31;
      }
      *(_DWORD *)v12 -= 2;
    }
    if (v13) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
  uint64_t v19 = (void (*)(uint64_t, uint64_t, uint64_t, void, void))a1[6];
  if (v19)
  {
    uint64_t v20 = *(void *)(a2 + 8);
    uint64_t v21 = *a3;
    if (*a3) {
      *(_DWORD *)v21 += 2;
    }
    uint64_t v31 = v21;
    API::String::create(&v31, &v32);
    uint64_t v23 = v31;
    uint64_t v24 = v32;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::destroy(v23, v22);
        if (v24)
        {
LABEL_23:
          uint64_t v25 = *((void *)v24 + 1);
          if (!a4)
          {
LABEL_25:
            uint64_t v26 = API::Object::newObject(0x18uLL, 75);
            *(void *)uint64_t v26 = &unk_1EE9D1E28;
            WebKit::InitializeWebKit2((WebKit *)v26);
            *(void *)uint64_t v26 = &unk_1EE9D85C8;
            uint64_t v27 = *a5;
            *a5 = 0;
            *(void *)(v26 + 16) = v27;
            v19(v20, v25, a4, *(void *)(v26 + 8), a1[2]);
            CFRelease(*(CFTypeRef *)(v26 + 8));
            if (!v24) {
              return;
            }
            unsigned int v18 = (const void *)*((void *)v24 + 1);
            goto LABEL_27;
          }
LABEL_24:
          a4 = *(void *)(a4 + 8);
          goto LABEL_25;
        }
LABEL_35:
        uint64_t v25 = 0;
        if (!a4) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
      *(_DWORD *)v23 -= 2;
    }
    if (v24) {
      goto LABEL_23;
    }
    goto LABEL_35;
  }
  uint64_t v30 = 0;
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()(a5, &v30);
  uint64_t v17 = v30;
  uint64_t v30 = 0;
  if (v17)
  {
LABEL_15:
    unsigned int v18 = *(const void **)(v17 + 8);
LABEL_27:
    CFRelease(v18);
  }
}

uint64_t WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  WTF::Function<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()(&v7, &v6);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WebKit::WebContextInjectedBundleClient::getInjectedBundleInitializationUserData@<X0>(WebKit::WebContextInjectedBundleClient *this@<X0>, WebKit::WebProcessPool *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (uint64_t (*)(void, void))*((void *)this + 5);
  if (v4)
  {
    uint64_t result = (void *)v4(*((void *)a2 + 1), *((void *)this + 2));
    if (result) {
      uint64_t result = (void *)[result _apiObject];
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

WebKit::WebDataListSuggestionsDropdown *WebKit::WebDataListSuggestionsDropdown::WebDataListSuggestionsDropdown(WebKit::WebDataListSuggestionsDropdown *this, WebKit::WebPageProxy *a2)
{
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE9D8518;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + 3) = v4;
  return this;
}

void WebKit::WebDataListSuggestionsDropdown::~WebDataListSuggestionsDropdown(WebKit::WebDataListSuggestionsDropdown *this, void *a2)
{
  *(void *)this = &unk_1EE9D8518;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

_DWORD *WebKit::WebDataListSuggestionsDropdown::close(_DWORD *this, void *a2)
{
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      this = WebKit::WebPageProxy::didCloseSuggestions((WebKit::WebPageProxy *)(v3 - 16));
    }
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2);
      return (_DWORD *)WTF::fastFree((WTF *)v2, a2);
    }
  }
  return this;
}

uint64_t API::ObjectImpl<(API::Object::Type)43>::type()
{
  return 43;
}

void API::MessageListener::~MessageListener(API::MessageListener *this)
{
  *(void *)this = &unk_1EE9D85C8;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE9D85C8;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)75>::type()
{
  return 75;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebBackForwardCacheEntry::*&)(void),WebKit::WebBackForwardCacheEntry*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void WTF::Vector<WTF::Ref<WebKit::WebBackForwardListItem,WTF::RawPtrTraits<WebKit::WebBackForwardListItem>,WTF::DefaultRefDerefTraits<WebKit::WebBackForwardListItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) > a2)
  {
    if (*(unsigned int *)(a1 + 12) > a2) {
      WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, a2);
    }
    uint64_t v4 = *(WTF **)a1;
    if (a2)
    {
      if (*(_DWORD *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 8) = a2;
        *(void *)a1 = WTF::fastRealloc(v4, (void *)(8 * a2));
        return;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v5 = *(unsigned int *)(a1 + 12);
      uint64_t v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(void *)a1 = v6;
      if (v6 != v4) {
        memcpy(v6, v4, 8 * v5);
      }
    }
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, (void *)a2);
    }
  }
}

uint64_t std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v4 = (WTF *)*(unsigned int *)(a2 + 12);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = v4;
    if (v4)
    {
      uint64_t v5 = (void *)WTF::fastMalloc(v4);
      *(_DWORD *)(a1 + 8) = v4;
      *(void *)a1 = v5;
      memcpy(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebBackForwardList::itemStates(void)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call()
{
  return 1;
}

void WTF::Function<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v5 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v5);
  uint64_t v4 = v5;
  uint64_t v5 = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

void WebKit::PDFPluginBase::pluginInfo(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 26) = 0u;
  uint64_t v3 = (WebCore *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(WTF::StringImpl **)a1 = v28[0];
  WebCore::pdfDocumentTypeDescription((uint64_t *)v28, v3);
  *(WTF::StringImpl **)(a1 + 16) = v28[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(WTF::StringImpl **)(a1 + 8) = v28[0];
  *(_WORD *)(a1 + 40) = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(WTF::StringImpl **)(a1 + 48) = v28[0];
  *(_OWORD *)uint64_t v28 = 0u;
  long long v29 = 0u;
  WTF::AtomStringImpl::add();
  uint64_t v5 = v28[0];
  v28[0] = v26[0];
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      uint64_t v5 = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  WebCore::pdfDocumentTypeDescription((uint64_t *)v26, v5);
  uint64_t v7 = v26[0];
  v26[0] = 0;
  uint64_t v8 = v28[1];
  v28[1] = v7;
  if (v8)
  {
    int v9 = *(_DWORD *)v8 - 2;
    if (*(_DWORD *)v8 != 2)
    {
LABEL_6:
      *(_DWORD *)uint64_t v8 = v9;
      goto LABEL_7;
    }
    WTF::StringImpl::destroy(v8, v6);
    uint64_t v8 = v26[0];
    v26[0] = 0;
    if (v8)
    {
      int v9 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 != 2) {
        goto LABEL_6;
      }
      WTF::StringImpl::destroy(v8, v21);
    }
  }
LABEL_7:
  v26[0] = (WTF::StringImpl *)"pdf";
  v26[1] = (WTF::StringImpl *)4;
  uint64_t v10 = HIDWORD(v29);
  if (HIDWORD(v29) == DWORD2(v29))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)&v29, (uint64_t *)v26);
  }
  else
  {
    uint64_t v23 = v29;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(WTF::StringImpl **)(v23 + 8 * v10) = v25[0];
    ++HIDWORD(v29);
  }
  WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MimeClassInfo&>(a1 + 24, (unint64_t)v28);
  *(_OWORD *)uint64_t v26 = 0u;
  long long v27 = 0u;
  WTF::AtomStringImpl::add();
  uint64_t v12 = v26[0];
  v26[0] = v25[0];
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      uint64_t v12 = (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  WebCore::pdfDocumentTypeDescription((uint64_t *)v25, v12);
  uint64_t v14 = v25[0];
  v25[0] = 0;
  uint64_t v15 = v26[1];
  v26[1] = v14;
  if (v15)
  {
    int v16 = *(_DWORD *)v15 - 2;
    if (*(_DWORD *)v15 != 2)
    {
LABEL_14:
      *(_DWORD *)uint64_t v15 = v16;
      goto LABEL_15;
    }
    WTF::StringImpl::destroy(v15, v13);
    uint64_t v15 = v25[0];
    v25[0] = 0;
    if (v15)
    {
      int v16 = *(_DWORD *)v15 - 2;
      if (*(_DWORD *)v15 != 2) {
        goto LABEL_14;
      }
      WTF::StringImpl::destroy(v15, v22);
    }
  }
LABEL_15:
  v25[0] = (WTF::StringImpl *)"pdf";
  v25[1] = (WTF::StringImpl *)4;
  uint64_t v17 = HIDWORD(v27);
  if (HIDWORD(v27) == DWORD2(v27))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)&v27, (uint64_t *)v25);
  }
  else
  {
    uint64_t v24 = v27;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(void *)(v24 + 8 * v17) = v30;
    ++HIDWORD(v27);
  }
  uint64_t v18 = *(unsigned int *)(a1 + 36);
  if (v18 == *(_DWORD *)(a1 + 32))
  {
    WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MimeClassInfo&>(a1 + 24, (unint64_t)v26);
  }
  else
  {
    WebCore::MimeClassInfo::MimeClassInfo((void *)(*(void *)(a1 + 24) + 32 * v18), (uint64_t)v26);
    *(_DWORD *)(a1 + 36) = v18 + 1;
  }
  WebCore::MimeClassInfo::~MimeClassInfo((WebCore::MimeClassInfo *)v26, v19);
  WebCore::MimeClassInfo::~MimeClassInfo((WebCore::MimeClassInfo *)v28, v20);
}

void sub_198E302D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  WebCore::MimeClassInfo::~MimeClassInfo((WebCore::MimeClassInfo *)va, a2);
  WebCore::MimeClassInfo::~MimeClassInfo((WebCore::MimeClassInfo *)va1, v6);
  WebCore::PluginInfo::~PluginInfo(v4, v7);
  _Unwind_Resume(a1);
}

void sub_198E30318()
{
}

void WebCore::MimeClassInfo::~MimeClassInfo(WebCore::MimeClassInfo *this, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

void WebCore::PluginInfo::~PluginInfo(WebCore::PluginInfo *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v4);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

uint64_t WebKit::PDFPluginBase::PDFPluginBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1994F5F10;
  *(void *)(v4 + 24) = a1;
  *(void *)(a1 + 72) = v4;
  *(_DWORD *)(a1 + 80) = 0;
  WebCore::ScrollableArea::ScrollableArea((WebCore::ScrollableArea *)a1);
  *(void *)(a1 + 88) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 96) = 0;
  *(void *)a1 = &unk_1EE9D85F0;
  WebKit::WebFrame::fromCoreFrame(*(void *)(*(void *)(*(void *)(*(void *)(a2 + 48) + 8) + 544) + 8), &v10);
  uint64_t v5 = v10;
  uint64_t v6 = (atomic_uint **)(v10 + 16);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v10 + 16), v10);
  uint64_t v7 = *v6;
  if (*v6)
  {
    atomic_fetch_add(v7, 1u);
    uint64_t v5 = v10;
    *(void *)(a1 + 104) = v7;
    if (!v5) {
      goto LABEL_4;
    }
  }
  else
  {
    *(void *)(a1 + 104) = 0;
  }
  CFRelease(*(CFTypeRef *)(v5 + 8));
LABEL_4:
  WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unsigned int *)(a2 + 16), a2);
  uint64_t v8 = (atomic_uint *)(*(void *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  *(void *)(a1 + 112) = v8;
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = a1 + 160;
  *(void *)(a1 + 152) = 8;
  *(unsigned char *)(a1 + 288) = 1;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = constinit_0;
  *(_OWORD *)(a1 + 344) = unk_1994F7058;
  *(_OWORD *)(a1 + 360) = xmmword_1994F7068;
  *(unsigned char *)(a1 + 528) = 0;
  *(void *)(a1 + 568) = 0;
  *(unsigned char *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = 0;
  *(unsigned char *)(a1 + 384) = 0;
  *(void *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  return a1;
}

void sub_198E305D0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = (unsigned int *)*((void *)v2 + 13);
  *((void *)v2 + 13) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = (WTF *)*((void *)v2 + 12);
  *((void *)v2 + 12) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1) {
      WTF::fastFree(v5, a2);
    }
    else {
      --*(_DWORD *)v5;
    }
  }
  WebCore::ScrollableArea::~ScrollableArea(v2);
  _Unwind_Resume(a1);
}

void WebKit::PDFPluginBase::~PDFPluginBase(WebKit::PDFPluginBase *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D85F0;
  uint64_t v3 = (_DWORD *)*((void *)this + 73);
  *((void *)this + 73) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 16))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 71);
  *((void *)this + 71) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 28) == 2)
    {
      if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
    }
    else
    {
      *(_DWORD *)(v4 + 28) -= 2;
    }
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 69);
  *((void *)this + 69) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 68);
  *((void *)this + 68) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
  std::__optional_destruct_base<WebKit::WebMouseEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 384, a2);
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  int v9 = (WTF::StringImpl *)*((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (const void *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (WTF *)*((void *)this + 18);
  if ((WebKit::PDFPluginBase *)((char *)this + 160) != v11 && v11)
  {
    *((void *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v11, v7);
  }
  uint64_t v12 = (const void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = (unsigned int *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v13) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v13, v7);
  }
  uint64_t v14 = (unsigned int *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v7);
  }
  uint64_t v15 = (WTF *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1) {
      WTF::fastFree(v15, v7);
    }
    else {
      --*(_DWORD *)v15;
    }
  }

  WebCore::ScrollableArea::~ScrollableArea(this);
}

uint64_t WebKit::PDFPluginBase::teardown(WebKit::PDFPluginBase *this)
{
  char v2 = 0;
  uint64_t v3 = (char *)this + 120;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 120, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0]((char *)this + 120);
  }
  uint64_t v4 = (const void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v4) {
    CFRelease(v4);
  }
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  (*(void (**)(WebKit::PDFPluginBase *, void))(*(void *)this + 1408))(this, 0);
  (*(void (**)(WebKit::PDFPluginBase *, uint64_t))(*(void *)this + 1408))(this, 1);
  uint64_t result = [*((id *)this + 37) isLocked];
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(WebKit::PDFPluginBase *))(*(void *)this + 1440);
    return v7(this);
  }
  return result;
}

uint64_t WebKit::PDFPluginBase::page(WebKit::PDFPluginBase *this)
{
  uint64_t v1 = *((void *)this + 13);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4 || *(unsigned char *)(v4 + 144)) {
    return 0;
  }
  uint64_t v6 = (unsigned int *)(v4 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
  uint64_t v7 = *(void *)(v4 + 24);
  if (v7) {
    uint64_t v5 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  return v5;
}

WTF *WebKit::PDFPluginBase::setView(WebKit::PDFPluginBase *this, WebKit::PluginView *a2)
{
  WTF::WeakPtrFactory<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded((WebKit::PluginView *)((char *)a2 + 16), (uint64_t)a2);
  uint64_t v5 = (_DWORD *)*((void *)a2 + 2);
  if (v5) {
    ++*v5;
  }
  uint64_t result = (WTF *)*((void *)this + 12);
  *((void *)this + 12) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      return (WTF *)WTF::fastFree(result, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF *WebKit::PDFPluginBase::destroy(WebKit::PDFPluginBase *this)
{
  char v2 = *((unsigned char *)this + 561);
  *((unsigned char *)this + 561) = 1;
  atomic_store(1u, (unsigned __int8 *)this + 562);
  *((unsigned char *)this + 560) = 1;
  (*(void (**)(WebKit::PDFPluginBase *))(*(void *)this + 1352))(this);
  uint64_t result = (WTF *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      uint64_t result = (WTF *)WTF::fastFree(result, v3);
    }
    else {
      --*(_DWORD *)result;
    }
  }
  *((unsigned char *)this + 561) = v2;
  return result;
}

void sub_198E30B28(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 561) = v2;
  _Unwind_Resume(a1);
}

void WebKit::PDFPluginBase::createPDFDocument(WebKit::PDFPluginBase *this)
{
  id v2 = objc_alloc((Class)WebKit::getPDFDocumentClass(this));
  uint64_t v3 = [v2 initWithData:WebKit::PDFPluginBase::originalData((atomic_uchar *)this)];
  uint64_t v4 = (const void *)*((void *)this + 37);
  *((void *)this + 37) = v3;
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t WebKit::PDFPluginBase::originalData(atomic_uchar *this)
{
  char v2 = 0;
  uint64_t v3 = this + 120;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(this + 120, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 120);
  }
  uint64_t v5 = *((void *)this + 16);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5;
}

BOOL WebKit::PDFPluginBase::isFullFramePlugin(WebKit::PDFPluginBase *this)
{
  uint64_t v1 = *((void *)this + 13);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return 0;
  }
  if (*(unsigned char *)(v4 + 144)) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 296);
  if (!v5 || (*(_WORD *)(v5 + 3406) & 8) == 0) {
    return 0;
  }
  *(_DWORD *)(v5 + 28) += 2;
  uint64_t v11 = (WebCore::Node *)v5;
  uint64_t v8 = WebCore::PluginDocument::pluginWidget((WebCore::PluginDocument *)v5);
  uint64_t v9 = *((void *)this + 12);
  if (v9) {
    uint64_t v9 = *(void *)(v9 + 8);
  }
  BOOL result = v9 == v8;
  if (*((_DWORD *)v11 + 7) == 2)
  {
    BOOL v10 = result;
    if ((*((_WORD *)v11 + 17) & 0x400) == 0) {
      WebCore::Node::removedLastRef(v11);
    }
    return v10;
  }
  else
  {
    *((_DWORD *)v11 + 7) -= 2;
  }
  return result;
}

void sub_198E30CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (*((_DWORD *)a10 + 7) == 2)
  {
    if ((*((_WORD *)a10 + 17) & 0x400) == 0) {
      WebCore::Node::removedLastRef(a10);
    }
  }
  else
  {
    *((_DWORD *)a10 + 7) -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::PDFPluginBase::handlesPageScaleFactor(WebKit::PDFPluginBase *this)
{
  uint64_t v1 = *((void *)this + 13);
  return v1
      && (uint64_t v2 = *(void *)(v1 + 8)) != 0
      && (uint64_t v3 = *(void *)(v2 + 24)) != 0
      && (uint64_t v4 = *(void *)(v3 + 8)) != 0
      && *(void *)(*(void *)(v4 + 128) + 8) == v4
      && WebKit::PDFPluginBase::isFullFramePlugin(this);
}

void WebKit::PDFPluginBase::notifySelectionChanged(WebKit::PDFPluginBase *this)
{
  uint64_t v1 = *((void *)this + 13);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          uint64_t v5 = *(void *)(v4 + 24);
          if (v5)
          {
            uint64_t v6 = *(void *)(v5 + 8);
            if (v6)
            {
              uint64_t v8 = *(void **)(*(void *)(v6 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v8 + 1368))(v8) & 1) == 0)
              {
                if (*(void *)(v8[2] + 8))
                {
                  uint64_t v9 = *((void *)this + 13);
                  if (v9) {
                    uint64_t v10 = *(void *)(v9 + 8);
                  }
                  else {
                    uint64_t v10 = 0;
                  }
                  WebKit::WebFrame::protectedPage(v10, &v14);
                  uint64_t v11 = v14;
                  uint64_t v12 = *(atomic_uint **)(*(void *)(*(void *)(*((void *)this + 13) + 8) + 24) + 8);
                  uint64_t v13 = (unsigned int *)(v12 + 2);
                  atomic_fetch_add(v12 + 2, 1u);
                  WebKit::WebPage::didChangeSelection(v11, v12);
                  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v13);
                  if (v14) {
                    CFRelease(*((CFTypeRef *)v14 + 1));
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void WebKit::PDFPluginBase::ensureDataBufferLength(WebKit::PDFPluginBase *this, unint64_t a2)
{
  CFDataRef Mutable = (const __CFData *)*((void *)this + 16);
  if (!Mutable)
  {
    CFDataRef Mutable = CFDataCreateMutable(0, 0);
    uint64_t v5 = (const void *)*((void *)this + 16);
    *((void *)this + 16) = Mutable;
    if (v5)
    {
      CFRelease(v5);
      CFDataRef Mutable = (const __CFData *)*((void *)this + 16);
    }
  }
  unint64_t Length = CFDataGetLength(Mutable);
  CFIndex v7 = a2 - Length;
  if (a2 > Length)
  {
    uint64_t v8 = (__CFData *)*((void *)this + 16);
    CFDataIncreaseLength(v8, v7);
  }
}

void WTF::RangeSet<WTF::Range<unsigned long long>>::add(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = a2[1];
  if (*a2 == v2) {
    return;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a1 + 16 * v5;
    unint64_t v8 = *(void *)(v6 - 16);
    unint64_t v7 = *(void *)(v6 - 8);
    BOOL v9 = v8 <= *a2 && v7 >= v2;
    uint64_t v10 = *(unsigned int *)(a1 + 12);
    if (v9) {
      return;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(unsigned char *)(a1 + 144) = 0;
  unint64_t v11 = v10 + 1;
  unint64_t v12 = *(unsigned int *)(a1 + 8);
  if (v10 + 1 >= v12)
  {
    if (v5 == v12) {
      *(_OWORD *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<WTF::Range<unsigned long long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v11, (unint64_t)a2);
    }
    else {
      *(_OWORD *)(*(void *)a1 + 16 * v10) = *(_OWORD *)a2;
    }
    ++*(_DWORD *)(a1 + 12);
    WTF::RangeSet<WTF::Range<unsigned long long>>::compact(a1);
  }
  else
  {
    if (v5 == v12) {
      *(_OWORD *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<WTF::Range<unsigned long long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v11, (unint64_t)a2);
    }
    else {
      *(_OWORD *)(*(void *)a1 + 16 * v10) = *(_OWORD *)a2;
    }
    ++*(_DWORD *)(a1 + 12);
  }
}

uint64_t WebKit::PDFPluginBase::streamDidReceiveResponse(WebKit::PDFPluginBase *this, const WebCore::ResourceResponse *a2)
{
  WebCore::ResourceResponseBase::suggestedFilename((uint64_t *)v23, a2);
  uint64_t v4 = v23[0];
  v23[0] = 0;
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 38);
  *((void *)this + 38) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      unint64_t v7 = v23[0];
      v23[0] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v6);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
    uint64_t v4 = (WTF::StringImpl *)*((void *)this + 38);
  }
  if (v4 && *((_DWORD *)v4 + 1)) {
    goto LABEL_23;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v21 = v23[0];
  uint64_t v8 = suggestedFilenameWithMIMEType(0, (const WTF::String *)&v21);
  MEMORY[0x19972EAD0](&v22, v8);
  uint64_t v10 = v22;
  uint64_t v22 = 0;
  unint64_t v11 = (WTF::StringImpl *)*((void *)this + 38);
  *((void *)this + 38) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v9);
      unint64_t v12 = v22;
      uint64_t v22 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v9);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v11 -= 2;
      uint64_t v22 = 0;
    }
  }
  uint64_t v13 = v21;
  uint64_t v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v9);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  if (*((void *)this + 38))
  {
LABEL_23:
    uint64_t result = WTF::StringImpl::endsWithIgnoringASCIICase();
    if (result) {
      return result;
    }
    uint64_t v15 = (WTF::StringImpl *)*((void *)this + 38);
    if (v15) {
      *(_DWORD *)v15 += 2;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v20 = v15;
  v23[0] = (WTF::StringImpl *)".pdf";
  v23[1] = (WTF::StringImpl *)5;
  uint64_t result = WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v20, (uint64_t *)v23, &v22);
  uint64_t v17 = v22;
  if (v22)
  {
    uint64_t v22 = 0;
    uint64_t v18 = (WTF::StringImpl *)*((void *)this + 38);
    *((void *)this + 38) = v17;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v16);
        uint64_t v19 = v22;
        uint64_t v22 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v16);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v18 -= 2;
        uint64_t v22 = 0;
      }
    }
    uint64_t result = (uint64_t)v20;
    uint64_t v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_198E311EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFPluginBase::streamDidReceiveData(WebKit::PDFPluginBase *this, const WebCore::SharedBuffer *a2)
{
  char v4 = 0;
  uint64_t v5 = (char *)this + 120;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 120, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0]((char *)this + 120);
  }
  if (!*((void *)this + 16))
  {
    CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
    unint64_t v7 = (const void *)*((void *)this + 16);
    *((void *)this + 16) = Mutable;
    if (v7) {
      CFRelease(v7);
    }
  }
  WebKit::PDFPluginBase::ensureDataBufferLength(this, *((void *)a2 + 6) + *((void *)this + 17));
  uint64_t v8 = (const void *)WebCore::SharedBuffer::data(a2);
  size_t v9 = *((void *)a2 + 6);
  MutableBytePtr = CFDataGetMutableBytePtr(*((CFMutableDataRef *)this + 16));
  memcpy(&MutableBytePtr[*((void *)this + 17)], v8, v9);
  uint64_t v11 = *((void *)this + 17) + *((void *)a2 + 6);
  *((void *)this + 17) = v11;
  unint64_t v14 = 0;
  uint64_t v15 = v11 - 1;
  if (v11 == 1)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  WTF::RangeSet<WTF::Range<unsigned long long>>::add((uint64_t)this + 144, &v14);
  int v12 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return (*(uint64_t (**)(WebKit::PDFPluginBase *))(*(void *)this + 1416))(this);
}

void sub_198E31370(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::PDFPluginBase::streamDidFinishLoading(unsigned __int8 *this)
{
  unsigned __int8 v1 = atomic_load(this + 562);
  if ((v1 & 1) == 0)
  {
    unint64_t v2 = this;
    WebKit::PDFPluginBase::addArchiveResource((WebKit::PDFPluginBase *)this);
    v2[560] = 1;
    WebKit::PDFPluginBase::createPDFDocument((WebKit::PDFPluginBase *)v2);
    (*(void (**)(unsigned __int8 *))(*(void *)v2 + 1360))(v2);
    (*(void (**)(unsigned __int8 *))(*(void *)v2 + 1432))(v2);
    return (unsigned __int8 *)WebKit::PDFPluginBase::tryRunScriptsInPDFDocument((WebKit::PDFPluginBase *)v2);
  }
  return this;
}

void WebKit::PDFPluginBase::addArchiveResource(WebKit::PDFPluginBase *this)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  v26[0] = @"Content-Disposition";
  if (*((void *)this + 38)) {
    unint64_t v2 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    unint64_t v2 = &stru_1EEA10550;
  }
  v26[1] = @"Content-Type";
  v27[0] = v2;
  v27[1] = @"application/pdf";
  uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:v26 count:2];
  id v4 = objc_alloc(MEMORY[0x1E4F18D40]);
  uint64_t v5 = (NSURLResponse *)[v4 initWithURL:WTF::URL::operator NSURL *() statusCode:200 HTTPVersion:*MEMORY[0x1E4F18F90] headerFields:v3];
  WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)v23, v5);
  uint64_t v6 = (WebCore::FragmentedSharedBuffer *)WebKit::PDFPluginBase::originalData((atomic_uchar *)this);
  uint64_t v8 = v6;
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v19 = v8;
  WebCore::SharedBuffer::create<NSData *>(&v19, v7, (uint64_t *)&v20);
  uint64_t v9 = (uint64_t)v20;
  uint64_t v20 = 0;
  uint64_t v21 = (unsigned int *)v9;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v18 = v25;
  uint64_t v25 = 0;
  WebCore::ArchiveResource::create();
  uint64_t v11 = v25;
  uint64_t v25 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v10);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  int v12 = v21;
  uint64_t v21 = 0;
  if (v12) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, v10);
  }
  uint64_t v13 = v20;
  uint64_t v20 = 0;
  if (v13) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v10);
  }
  WebCore::Document::loader(*(WebCore::Document **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 12) + 8) + 64)
                                                                                                  + 48)
                                                                                      + 8)
                                                                          + 544)
                                                              + 8)
                                                  + 296));
  uint64_t v25 = v22;
  uint64_t v22 = 0;
  WebCore::DocumentLoader::addArchiveResource();
  uint64_t v15 = v25;
  uint64_t v25 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 2) == 1) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v15 + 8))(v15);
    }
    else {
      --*((_DWORD *)v15 + 2);
    }
  }
  int v16 = v22;
  uint64_t v22 = 0;
  if (!v16)
  {
LABEL_24:
    if (!v8) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (*((_DWORD *)v16 + 2) != 1)
  {
    --*((_DWORD *)v16 + 2);
    goto LABEL_24;
  }
  (*(void (**)(WTF::StringImpl *))(*(void *)v16 + 8))(v16);
  if (v8) {
LABEL_25:
  }
    CFRelease(v8);
LABEL_26:
  CFTypeRef v17 = cf;
  CFTypeRef cf = 0;
  if (v17) {
    CFRelease(v17);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v23, v14);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_198E317B4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,CFTypeRef cf)
{
  uint64_t v51 = *(_DWORD **)(v49 - 96);
  *(void *)(v49 - 96) = 0;
  if (v51)
  {
    if (v51[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v51 + 8))(v51);
    }
    else {
      --v51[2];
    }
  }
  if (a16)
  {
    if (a16[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a16 + 8))(a16);
    }
    else {
      --a16[2];
    }
  }
  if (v48) {
    CFRelease(v48);
  }
  CFTypeRef v52 = cf;
  CFTypeRef cf = 0;
  if (v52) {
    CFRelease(v52);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a17, a2);
  if (v47) {
    CFRelease(v47);
  }
  _Unwind_Resume(a1);
}

void *WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(WebKit::PDFPluginBase *this)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t result = (void *)*((void *)this + 37);
  if (result && *((unsigned char *)this + 560) && !*((unsigned char *)this + 563))
  {
    uint64_t v3 = (void *)[result documentRef];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 9);
    id v4 = operator new(0x18uLL);
    *id v4 = &unk_1EE9D8BA8;
    v4[1] = this;
    v4[2] = this;
    v5[3] = v4;
    WebKit::PDFScriptEvaluation::runScripts(v3, (uint64_t)v5);
    uint64_t result = std::__function::__value_func<void ()(void)>::~__value_func[abi:sn180100](v5);
    *((unsigned char *)this + 563) = 1;
  }
  return result;
}

void sub_198E31A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PDFPluginBase::streamDidFail(atomic_uchar *this)
{
  char v2 = 0;
  uint64_t v3 = this + 120;
  atomic_compare_exchange_strong_explicit(this + 120, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 120);
  }
  id v4 = (const void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v4) {
    CFRelease(v4);
  }
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  uint64_t v6 = *(uint64_t (**)(atomic_uchar *))(*(void *)this + 1424);

  return v6(this);
}

void WebKit::PDFScriptEvaluation::runScripts(void *a1, uint64_t a2)
{
  if (!a1) {
    return;
  }
  CFRetain(a1);
  Catalog = CGPDFDocumentGetCatalog((CGPDFDocumentRef)a1);
  if (!Catalog
    || (CGPDFDictionaryRef value = 0, !CGPDFDictionaryGetDictionary(Catalog, "Names", &value))
    || (CGPDFDictionaryRef v33 = 0, !CGPDFDictionaryGetDictionary(value, "JavaScript", &v33)))
  {
    CFRelease(a1);
    return;
  }
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  CGPDFDictionaryRef v5 = v33;
  CGPDFDictionaryRef v30 = v33;
  if (v33) {
    CFRetain(v33);
  }
  WebKit::PDFScriptEvaluation::appendValuesInPDFNameSubtreeToVector(&v30, (uint64_t)&v31);
  if (v5) {
    CFRelease(v5);
  }
  unint64_t v7 = v31;
  if (HIDWORD(v32))
  {
    uint64_t v8 = 8 * HIDWORD(v32);
    CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v9 = v31;
    while (1)
    {
      uint64_t v10 = *(CGPDFObject **)v9;
      CGPDFDictionaryRef dict = 0;
      if (CGPDFObjectGetValue(v10, kCGPDFObjectTypeDictionary, &dict))
      {
        __s1 = 0;
        if (CGPDFDictionaryGetName(dict, "S", (const char **)&__s1) && !strcmp(__s1, "JavaScript"))
        {
          CGPDFStreamRef stream = 0;
          if (CGPDFDictionaryGetStream(dict, "JS", &stream))
          {
            CGPDFDataFormat format = CGPDFDataFormatRaw;
            CFDataRef v11 = CGPDFStreamCopyData(stream, &format);
            CFDataRef v12 = v11;
            if (v11)
            {
              BytePtr = CFDataGetBytePtr(v11);
              uint64_t Length = CFDataGetLength(v12);
              CFStringEncoding v15 = 134217984;
              if (Length >= 2 && *BytePtr == 254)
              {
                if (BytePtr[1] == 255) {
                  CFStringEncoding v15 = 256;
                }
                else {
                  CFStringEncoding v15 = 134217984;
                }
              }
              CFStringRef v16 = CFStringCreateWithBytes(alloc, BytePtr, Length, v15, 1u);
              CFRelease(v12);
              if (v16) {
                goto LABEL_29;
              }
            }
          }
          CGPDFStreamRef stream = 0;
          if (CGPDFDictionaryGetString(dict, "JS", &stream))
          {
            CFTypeRef v17 = CGPDFStringGetBytePtr(stream);
            int64_t v18 = CGPDFStringGetLength(stream);
            CFStringEncoding v19 = 134217984;
            if (v18 >= 2 && *v17 == 254)
            {
              if (v17[1] == 255) {
                CFStringEncoding v19 = 256;
              }
              else {
                CFStringEncoding v19 = 134217984;
              }
            }
            CFStringRef v16 = CFStringCreateWithBytes(alloc, v17, v18, v19, 1u);
            if (v16)
            {
LABEL_29:
              MEMORY[0x19972EAD0](&stream, v16);
              if ((_MergedGlobals_93 & 1) == 0)
              {
                JSC::Yarr::RegularExpression::RegularExpression();
                _MergedGlobals_93 = 1;
              }
              int v21 = JSC::Yarr::RegularExpression::match();
              uint64_t v22 = stream;
              CGPDFStreamRef stream = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2) {
                  WTF::StringImpl::destroy(v22, v20);
                }
                else {
                  *(_DWORD *)v22 -= 2;
                }
              }
              CFRelease(v16);
              if (v21 != -1) {
                break;
              }
            }
          }
        }
      }
      uint64_t v9 = (WTF *)((char *)v9 + 8);
      v8 -= 8;
      if (!v8) {
        goto LABEL_40;
      }
    }
    char v23 = 1;
    if (!v7) {
      goto LABEL_42;
    }
  }
  else
  {
LABEL_40:
    char v23 = 0;
    if (!v7) {
      goto LABEL_42;
    }
  }
  WTF::fastFree(v7, v6);
LABEL_42:
  CFRelease(a1);
  if (v23)
  {
    uint64_t v24 = *(void *)(a2 + 24);
    if (!v24)
    {
      uint64_t v26 = std::__throw_bad_function_call[abi:sn180100]();
      if (v31) {
        WTF::fastFree(v31, v25);
      }
      CFRelease(a1);
      _Unwind_Resume((_Unwind_Exception *)v26);
    }
    (*(void (**)(uint64_t))(*(void *)v24 + 48))(v24);
  }
}

BOOL WebKit::PDFPluginBase::geometryDidChange(WebKit::PDFPluginBase *this, const WebCore::IntSize *a2, const WebCore::AffineTransform *a3)
{
  int v4 = *((_DWORD *)this + 81);
  int v5 = *((_DWORD *)this + 80);
  uint64_t v6 = (_OWORD *)((char *)this + 328);
  long long v7 = *(_OWORD *)((char *)this + 344);
  v17[0] = *(_OWORD *)((char *)this + 328);
  v17[1] = v7;
  v17[2] = *(_OWORD *)((char *)this + 360);
  *((void *)this + 40) = *(void *)a2;
  WebCore::AffineTransform::inverse(v15, a3);
  if (v16) {
    uint64_t v8 = v15;
  }
  else {
    uint64_t v8 = (uint64_t *)&constinit_0;
  }
  long long v9 = *((_OWORD *)v8 + 1);
  _OWORD *v6 = *(_OWORD *)v8;
  v6[1] = v9;
  v6[2] = *((_OWORD *)v8 + 2);
  if (*((_DWORD *)this + 80) != v5 || *((_DWORD *)this + 81) != v4) {
    return 1;
  }
  uint64_t v10 = 0;
  do
  {
    double v11 = *(double *)((char *)v6 + v10);
    double v12 = *(double *)((char *)v17 + v10);
    if (v11 != v12) {
      break;
    }
    BOOL v13 = v10 == 40;
    v10 += 8;
  }
  while (!v13);
  return v11 != v12;
}

float WebKit::PDFPluginBase::pdfDocumentSizeForPrinting(id *this)
{
  objc_msgSend((id)objc_msgSend(this[37], "pageAtIndex:", 0), "boundsForBox:", 1);
  v4.width = v1;
  v4.height = v2;
  WebCore::FloatSize::FloatSize((WebCore::FloatSize *)&v5, &v4);
  return v5;
}

uint64_t *WebKit::PDFPluginBase::convertFromPluginToRootView(WebKit::PDFPluginBase *this, const WebCore::IntRect *a2)
{
  uint64_t result = WebCore::AffineTransform::inverse(v4, (WebKit::PDFPluginBase *)((char *)this + 328));
  if (v5) {
    return (uint64_t *)WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v4, a2);
  }
  __break(1u);
  return result;
}

uint64_t WebKit::PDFPluginBase::updateControlTints(WebKit::PDFPluginBase *this, WebCore::GraphicsContext *a2)
{
  uint64_t v3 = (WebCore::Widget *)*((void *)this + 68);
  if (v3)
  {
    ++*((_DWORD *)v3 + 2);
    WebCore::Widget::invalidate(v3);
    if (*((_DWORD *)v3 + 2) == 1) {
      (*(void (**)(WebCore::Widget *))(*(void *)v3 + 8))(v3);
    }
    else {
      --*((_DWORD *)v3 + 2);
    }
  }
  CGSize v4 = (WebCore::Widget *)*((void *)this + 69);
  if (v4)
  {
    ++*((_DWORD *)v4 + 2);
    WebCore::Widget::invalidate(v4);
    if (*((_DWORD *)v4 + 2) == 1) {
      (*(void (**)(WebCore::Widget *))(*(void *)v4 + 8))(v4);
    }
    else {
      --*((_DWORD *)v4 + 2);
    }
  }
  v7[0] = WebKit::PDFPluginBase::scrollCornerRect(this);
  v7[1] = v5;
  return (*(uint64_t (**)(WebKit::PDFPluginBase *, void *))(*(void *)this + 344))(this, v7);
}

void sub_198E321B4(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Widget::invalidate(WebCore::Widget *this)
{
  WebCore::Widget::frameRect(this);
  unsigned int v3 = v2;
  WebCore::Widget::frameRect(this);
  v6[0] = 0;
  v6[1] = v4 & 0xFFFFFFFF00000000 | v3;
  return (*(uint64_t (**)(WebCore::Widget *, void *))(*(void *)this + 32))(this, v6);
}

unint64_t WebKit::PDFPluginBase::scrollCornerRect(WebKit::PDFPluginBase *this)
{
  uint64_t v2 = *((void *)this + 68);
  if (!v2) {
    goto LABEL_4;
  }
  uint64_t v3 = *((void *)this + 69);
  if (!v3)
  {
LABEL_5:
    unint64_t v4 = 0;
    return v4 | v3;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 272))(v2))
  {
LABEL_4:
    uint64_t v3 = 0;
    goto LABEL_5;
  }
  uint64_t v6 = *((void *)this + 12);
  if (v6) {
    long long v7 = *(WebCore::Widget **)(v6 + 8);
  }
  else {
    long long v7 = 0;
  }
  WebCore::Widget::frameRect(v7);
  int v9 = v8;
  WebCore::Widget::frameRect(*((WebCore::Widget **)this + 69));
  unsigned int v11 = v9 - v10;
  uint64_t v12 = *((void *)this + 12);
  if (v12) {
    BOOL v13 = *(WebCore::Widget **)(v12 + 8);
  }
  else {
    BOOL v13 = 0;
  }
  WebCore::Widget::frameRect(v13);
  uint64_t v15 = v14;
  WebCore::Widget::frameRect(*((WebCore::Widget **)this + 68));
  unint64_t v17 = v16 & 0xFFFFFFFF00000000;
  WebCore::Widget::frameRect(*((WebCore::Widget **)this + 69));
  WebCore::Widget::frameRect(*((WebCore::Widget **)this + 68));
  unint64_t v4 = (v15 - v17) & 0xFFFFFFFF00000000;
  uint64_t v3 = v11;
  return v4 | v3;
}

uint64_t WebKit::PDFPluginBase::enclosingScrollableArea(WebKit::PDFPluginBase *this)
{
  uint64_t v1 = *((void *)this + 14);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (WebCore::RenderObject *)(*(void *)(v2 + 72) & 0xFFFFFFFFFFFFLL);
  if (!v3) {
    return 0;
  }
  if ((*(unsigned char *)((*(void *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0) {
    goto LABEL_21;
  }
  if (*(unsigned char *)((*(void *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0x2E) != 7) {
    return 0;
  }
  ++*(_DWORD *)((*(void *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0xE0);
  uint64_t v4 = WebCore::RenderObject::enclosingLayer(v3);
  uint64_t v5 = v4;
  if (v4)
  {
    ++*(_DWORD *)(v4 + 8);
    uint64_t v6 = (WebCore::RenderLayer *)WebCore::RenderLayer::enclosingScrollableLayer();
    long long v7 = v6;
    if (!v6)
    {
      uint64_t v10 = 0;
      goto LABEL_10;
    }
    ++*((_DWORD *)v6 + 2);
    uint64_t v8 = WebCore::RenderLayer::scrollableArea(v6);
    int v9 = *((_DWORD *)v7 + 2);
    if (v9)
    {
      uint64_t v10 = v8;
      *((_DWORD *)v7 + 2) = v9 - 1;
LABEL_10:
      int v11 = *(_DWORD *)(v5 + 8);
      if (!v11)
      {
        __break(0xC471u);
        JUMPOUT(0x198E324C4);
      }
      *(_DWORD *)(v5 + 8) = v11 - 1;
      goto LABEL_12;
    }
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x198E32494);
  }
  uint64_t v10 = 0;
LABEL_12:
  if (*((_DWORD *)v3 + 56) == 1) {
    (*(void (**)(WebCore::RenderObject *))(*(void *)v3 + 8))(v3);
  }
  else {
    --*((_DWORD *)v3 + 56);
  }
  return v10;
}

void sub_198E324E8(_Unwind_Exception *exception_object)
{
  int v4 = *(_DWORD *)(v3 + 8);
  if (v4)
  {
    *(_DWORD *)(v3 + 8) = v4 - 1;
    int v6 = *(_DWORD *)(v2 + 8);
    if (v6)
    {
      *(_DWORD *)(v2 + 8) = v6 - 1;
      if (v1[56] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
      }
      else {
        --v1[56];
      }
      _Unwind_Resume(exception_object);
    }
    __break(0xC471u);
    JUMPOUT(0x198E32554);
  }
  __break(0xC471u);
  JUMPOUT(0x198E3251CLL);
}

uint64_t WebKit::PDFPluginBase::scrollableAreaBoundingBox(WebKit::PDFPluginBase *this, BOOL *a2)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    return WebCore::Widget::frameRect(*(WebCore::Widget **)(v2 + 8));
  }
  else {
    return WebCore::Widget::frameRect(0);
  }
}

uint64_t WebKit::PDFPluginBase::setScrollOffset(IntPoint *this, const IntPoint *a2)
{
  this[47] = *a2;
  return (*(uint64_t (**)(void))(*(void *)this + 1384))();
}

uint64_t WebKit::PDFPluginBase::isActive(WebKit::PDFPluginBase *this)
{
  uint64_t v1 = WebKit::PDFPluginBase::page(this);
  if (!v1) {
    return 0;
  }
  ++*(_DWORD *)v1;
  uint64_t v2 = *(_WORD *)(*(void *)(v1 + 72) + 26) & 1;
  WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v1);
  return v2;
}

uint64_t WebKit::PDFPluginBase::forceUpdateScrollbarsOnMainThreadForPerformanceTesting(WebKit::PDFPluginBase *this)
{
  uint64_t v1 = WebKit::PDFPluginBase::page(this);
  if (!v1) {
    return 0;
  }
  ++*(_DWORD *)v1;
  uint64_t v2 = (*(void *)(*(void *)(v1 + 112) + 696) >> 19) & 1;
  WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v1);
  return v2;
}

uint64_t WebKit::PDFPluginBase::scrollPosition(WebKit::PDFPluginBase *this)
{
  return *((void *)this + 47);
}

uint64_t WebKit::PDFPluginBase::minimumScrollPosition(WebKit::PDFPluginBase *this)
{
  return 0;
}

unint64_t WebKit::PDFPluginBase::maximumScrollPosition(WebKit::PDFPluginBase *this)
{
  unint64_t v2 = WebCore::ScrollableArea::scrollbarIntrusion(this);
  int v3 = v2;
  unint64_t v4 = HIDWORD(v2);
  uint64_t v5 = (*(uint64_t (**)(WebKit::PDFPluginBase *))(*(void *)this + 496))(this);
  return (v3 - *((_DWORD *)this + 80) + v5) & ~((v3 - *((_DWORD *)this + 80) + (int)v5) >> 31) | ((unint64_t)((v4 - *((_DWORD *)this + 81) + HIDWORD(v5)) & ~(((int)v4 - *((_DWORD *)this + 81) + HIDWORD(v5)) >> 31)) << 32);
}

unint64_t WebKit::PDFPluginBase::overhangAmount(WebKit::PDFPluginBase *this)
{
  WebKit::PDFPluginBase::maximumScrollPosition(this);
  unint64_t v2 = WebCore::ScrollableArea::scrollOffsetFromPosition();
  int v3 = v2;
  unint64_t v4 = HIDWORD(v2);
  uint64_t v5 = WebCore::ScrollableArea::scrollOffset(this);
  unint64_t v6 = HIDWORD(v5);
  int v7 = HIDWORD(v5) - v4;
  if (SHIDWORD(v5) <= (int)v4) {
    int v7 = 0;
  }
  if (v5 >= 0) {
    LODWORD(v6) = v7;
  }
  int v8 = v5 - v3;
  if ((int)v5 <= v3) {
    int v8 = 0;
  }
  if ((int)v5 >= 0) {
    LODWORD(v5) = v8;
  }
  return v5 | ((unint64_t)v6 << 32);
}

float WebKit::PDFPluginBase::deviceScaleFactor(WebKit::PDFPluginBase *this)
{
  uint64_t v1 = (float *)WebKit::PDFPluginBase::page(this);
  if (!v1) {
    return 1.0;
  }
  ++*(_DWORD *)v1;
  float v2 = v1[91];
  WTF::RefCounted<WebCore::Page>::deref(v1);
  return v2;
}

uint64_t WebKit::PDFPluginBase::scrollbarStyleChanged(uint64_t this, uint64_t a2, int a3)
{
  if (a3)
  {
    int v3 = (void *)this;
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(this + 562));
    if ((v4 & 1) == 0)
    {
      int v5 = *(_DWORD *)(this + 376);
      int v6 = *(_DWORD *)(this + 380);
      unint64_t v7 = WebKit::PDFPluginBase::maximumScrollPosition((WebKit::PDFPluginBase *)this);
      if (v5 >= (int)v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = v5;
      }
      if (v6 >= SHIDWORD(v7)) {
        uint64_t v9 = HIDWORD(v7);
      }
      else {
        uint64_t v9 = v6;
      }
      v3[47] = v8 | (v9 << 32);
      (*(void (**)(void *))(*v3 + 1384))(v3);
      WebCore::ScrollableArea::scrollbarStyleChanged();
      uint64_t v10 = *(uint64_t (**)(void *))(*v3 + 1392);
      return v10(v3);
    }
  }
  return this;
}

uint64_t WebKit::PDFPluginBase::convertFromScrollbarToContainingView(WebKit::PDFPluginBase *this, const WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  long long v15 = *(_OWORD *)a3;
  unint64_t v4 = WebCore::Widget::frameRect(a2);
  int v5 = v4;
  unint64_t v6 = HIDWORD(v4);
  uint64_t v7 = *((void *)this + 12);
  if (v7) {
    uint64_t v8 = *(WebCore::Widget **)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = WebCore::Widget::frameRect(v8);
  LODWORD(v15) = v15 + v5 - v9;
  DWORD1(v15) += v6 - HIDWORD(v9);
  uint64_t v10 = *(void *)(*(void *)(*((void *)this + 12) + 8) + 64);
  int v11 = *(WebCore::FrameView **)(*(void *)(*(void *)(*(void *)(*(void *)(v10 + 48) + 8) + 544) + 8) + 288);
  if (v11) {
    ++*((_DWORD *)v11 + 2);
  }
  uint64_t v12 = *(void *)(v10 + 72);
  if ((v12 & 0xFFFFFFFFFFFFLL) != 0 && (*(unsigned char *)((v12 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    uint64_t result = 105;
    __break(0xC471u);
  }
  else
  {
    uint64_t v13 = WebCore::FrameView::convertFromRendererToContainingView(v11, (const WebCore::RenderElement *)(v12 & 0xFFFFFFFFFFFFLL), (const WebCore::IntRect *)&v15);
    if (v11)
    {
      if (*((_DWORD *)v11 + 2) == 1) {
        (*(void (**)(WebCore::FrameView *))(*(void *)v11 + 8))(v11);
      }
      else {
        --*((_DWORD *)v11 + 2);
      }
    }
    return v13;
  }
  return result;
}

void sub_198E32A1C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (v1[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
    }
    else {
      --v1[2];
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebKit::PDFPluginBase::convertFromContainingViewToScrollbar(WebKit::PDFPluginBase *this, const WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  uint64_t v5 = *(void *)(*(void *)(*((void *)this + 12) + 8) + 64);
  unint64_t v6 = *(WebCore::FrameView **)(*(void *)(*(void *)(*(void *)(*(void *)(v5 + 48) + 8) + 544) + 8) + 288);
  if (v6) {
    ++*((_DWORD *)v6 + 2);
  }
  uint64_t v7 = *(void *)(v5 + 72);
  if ((v7 & 0xFFFFFFFFFFFFLL) != 0 && (*(unsigned char *)((v7 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    unint64_t result = 105;
    __break(0xC471u);
  }
  else
  {
    uint64_t v8 = WebCore::FrameView::convertFromContainingViewToRenderer(v6, (const WebCore::RenderElement *)(v7 & 0xFFFFFFFFFFFFLL), a3);
    if (v6)
    {
      if (*((_DWORD *)v6 + 2) == 1) {
        (*(void (**)(WebCore::FrameView *))(*(void *)v6 + 8))(v6);
      }
      else {
        --*((_DWORD *)v6 + 2);
      }
    }
    uint64_t v9 = *((void *)this + 12);
    if (v9) {
      uint64_t v10 = *(WebCore::Widget **)(v9 + 8);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = WebCore::Widget::frameRect(v10);
    uint64_t v12 = WebCore::Widget::frameRect(a2);
    return (((v11 - (v12 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000) + v8) & 0xFFFFFFFF00000000 | (v11 + v8 - v12);
  }
  return result;
}

void sub_198E32B98(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (v1[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
    }
    else {
      --v1[2];
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFPluginBase::convertFromScrollbarToContainingView(WebKit::PDFPluginBase *this, const WebCore::Scrollbar *a2, const WebCore::IntPoint *a3)
{
  int v5 = *(_DWORD *)a3;
  int v4 = *((_DWORD *)a3 + 1);
  unint64_t v6 = WebCore::Widget::frameRect(a2);
  int v7 = v6;
  unint64_t v8 = HIDWORD(v6);
  uint64_t v9 = *((void *)this + 12);
  if (v9) {
    uint64_t v10 = *(WebCore::Widget **)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = WebCore::Widget::frameRect(v10);
  v17[0] = v7 - v11 + v5;
  v17[1] = v8 + v4 - HIDWORD(v11);
  uint64_t v12 = *(void *)(*(void *)(*((void *)this + 12) + 8) + 64);
  uint64_t v13 = *(WebCore::FrameView **)(*(void *)(*(void *)(*(void *)(*(void *)(v12 + 48) + 8) + 544) + 8) + 288);
  if (v13) {
    ++*((_DWORD *)v13 + 2);
  }
  uint64_t v14 = *(void *)(v12 + 72);
  if ((v14 & 0xFFFFFFFFFFFFLL) != 0 && (*(unsigned char *)((v14 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    uint64_t result = 105;
    __break(0xC471u);
  }
  else
  {
    uint64_t v15 = WebCore::FrameView::convertFromRendererToContainingView(v13, (const WebCore::RenderElement *)(v14 & 0xFFFFFFFFFFFFLL), (const WebCore::IntPoint *)v17);
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1) {
        (*(void (**)(WebCore::FrameView *))(*(void *)v13 + 8))(v13);
      }
      else {
        --*((_DWORD *)v13 + 2);
      }
    }
    return v15;
  }
  return result;
}

void sub_198E32D18(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (v1[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
    }
    else {
      --v1[2];
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebKit::PDFPluginBase::convertFromContainingViewToScrollbar(WebKit::PDFPluginBase *this, const WebCore::Scrollbar *a2, const WebCore::IntPoint *a3)
{
  uint64_t v5 = *(void *)(*(void *)(*((void *)this + 12) + 8) + 64);
  unint64_t v6 = *(WebCore::FrameView **)(*(void *)(*(void *)(*(void *)(*(void *)(v5 + 48) + 8) + 544) + 8) + 288);
  if (v6) {
    ++*((_DWORD *)v6 + 2);
  }
  uint64_t v7 = *(void *)(v5 + 72);
  if ((v7 & 0xFFFFFFFFFFFFLL) != 0 && (*(unsigned char *)((v7 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    unint64_t result = 105;
    __break(0xC471u);
  }
  else
  {
    uint64_t v8 = WebCore::FrameView::convertFromContainingViewToRenderer(v6, (const WebCore::RenderElement *)(v7 & 0xFFFFFFFFFFFFLL), a3);
    if (v6)
    {
      if (*((_DWORD *)v6 + 2) == 1) {
        (*(void (**)(WebCore::FrameView *))(*(void *)v6 + 8))(v6);
      }
      else {
        --*((_DWORD *)v6 + 2);
      }
    }
    uint64_t v9 = *((void *)this + 12);
    if (v9) {
      uint64_t v10 = *(WebCore::Widget **)(v9 + 8);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = WebCore::Widget::frameRect(v10);
    uint64_t v12 = WebCore::Widget::frameRect(a2);
    return (((v11 - (v12 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000) + v8) & 0xFFFFFFFF00000000 | (v11 + v8 - v12);
  }
  return result;
}

void sub_198E32E84(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (v1[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
    }
    else {
      --v1[2];
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *WebKit::PDFPluginBase::debugDescription@<X0>(void *a1@<X8>)
{
  *(void *)&__n[1] = *MEMORY[0x1E4F143B8];
  unint64_t result = (unsigned char *)WTF::Internal::appendHex();
  __n[0] = v4;
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v5 = (v4 + 16);
    if (!__OFADD__(v4, 16))
    {
      unint64_t result = (unsigned char *)WTF::tryFastCompactMalloc((WTF *)(v5 + 20));
      if (v7)
      {
        *(_DWORD *)uint64_t v7 = 2;
        *(_DWORD *)(v7 + 4) = v5;
        *(void *)(v7 + 8) = v7 + 20;
        *(_DWORD *)(v7 + 16) = 4;
        *(_OWORD *)(v7 + 20) = *(_OWORD *)"PDFPluginBase 0x";
        if (__n[0] >= 0x11u)
        {
          __break(1u);
        }
        else
        {
          if (!__n[0])
          {
LABEL_8:
            *a1 = v7;
            return result;
          }
          unint64_t result = (unsigned char *)(v7 + 36);
          unint64_t v6 = (char *)__n - __n[0];
          if (__n[0] != 1)
          {
            unint64_t result = memcpy(result, v6, __n[0]);
            goto LABEL_8;
          }
        }
        *unint64_t result = *v6;
        goto LABEL_8;
      }
    }
  }
  *a1 = 0;
  __break(0xC471u);
  return result;
}

WebCore::ScrollableArea *WebKit::PDFPluginBase::willDetachRenderer(WebCore::ScrollableArea *this)
{
  uint64_t v1 = *((void *)this + 13);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          if (!*(unsigned char *)(v4 + 144))
          {
            uint64_t v5 = *(WebCore::LocalFrameView **)(v4 + 288);
            if (v5)
            {
              ++*((_DWORD *)v5 + 2);
              this = (WebCore::ScrollableArea *)WebCore::LocalFrameView::removeScrollableArea(v5, this);
              if (*((_DWORD *)v5 + 2) == 1)
              {
                unint64_t v6 = *(uint64_t (**)(WebCore::LocalFrameView *))(*(void *)v5 + 8);
                return (WebCore::ScrollableArea *)v6(v5);
              }
              else
              {
                --*((_DWORD *)v5 + 2);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void sub_198E33094(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFPluginBase::viewRelativeVerticalScrollbarRect(WebKit::PDFPluginBase *this)
{
  uint64_t v2 = (WebCore::Widget *)*((void *)this + 69);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 40);
    WebCore::Widget::frameRect(v2);
    unsigned int v5 = v3 - v4;
    unint64_t v6 = (WebCore::Widget *)*((void *)this + 68);
    if (v6) {
      WebCore::Widget::frameRect(v6);
    }
  }
  else
  {
    return 0;
  }
  return v5;
}

uint64_t WebKit::PDFPluginBase::viewRelativeHorizontalScrollbarRect(WebKit::PDFPluginBase *this)
{
  uint64_t v2 = (WebCore::Widget *)*((void *)this + 68);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 40);
    WebCore::Widget::frameRect(v2);
    uint64_t v5 = (HIDWORD(v3) - v4);
    unint64_t v6 = (WebCore::Widget *)*((void *)this + 69);
    if (v6) {
      WebCore::Widget::frameRect(v6);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  return v5 << 32;
}

unint64_t WebKit::PDFPluginBase::viewRelativeScrollCornerRect(WebKit::PDFPluginBase *this)
{
  uint64_t v2 = WebCore::ScrollableArea::scrollbarIntrusion(this);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  if (SHIDWORD(v2) >= 1) {
    return (*((void *)this + 40) - (v2 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (*((void *)this + 40)
  }
                                                                                          - v2);
  return v3;
}

unint64_t WebKit::PDFPluginBase::updateScrollbars(unint64_t this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(this + 562));
  if (v1) {
    return this;
  }
  uint64_t v2 = (unint64_t *)this;
  if (*(void *)(this + 544)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(void *)(this + 552) != 0;
  }
  this = (*(uint64_t (**)(unint64_t))(*(void *)this + 496))(this);
  unint64_t v4 = HIDWORD(this);
  int v5 = *((_DWORD *)v2 + 80);
  if (v2[68])
  {
    if (v5 >= (int)this) {
      this = (*(uint64_t (**)(unint64_t *, void))(*v2 + 1408))(v2, 0);
    }
  }
  else if (v5 < (int)this)
  {
    (*(void (**)(unint64_t *__return_ptr, unint64_t *, void))(*v2 + 1400))(&v33, v2, 0);
    unint64_t v6 = v33;
    unint64_t v33 = 0;
    this = v2[68];
    v2[68] = v6;
    if (this)
    {
      int v7 = *(_DWORD *)(this + 8) - 1;
      if (*(_DWORD *)(this + 8) != 1) {
        goto LABEL_11;
      }
      (*(void (**)(unint64_t))(*(void *)this + 8))(this);
      this = v33;
      unint64_t v33 = 0;
      if (!this) {
        goto LABEL_12;
      }
      int v7 = *(_DWORD *)(this + 8) - 1;
      if (*(_DWORD *)(this + 8) != 1)
      {
LABEL_11:
        *(_DWORD *)(this + 8) = v7;
        goto LABEL_12;
      }
      this = (*(uint64_t (**)(unint64_t))(*(void *)this + 8))(this);
    }
  }
LABEL_12:
  int v8 = *((_DWORD *)v2 + 81);
  if (v2[69])
  {
    if (v8 >= (int)v4) {
      this = (*(uint64_t (**)(unint64_t *, uint64_t))(*v2 + 1408))(v2, 1);
    }
  }
  else if (v8 < (int)v4)
  {
    (*(void (**)(unint64_t *__return_ptr, unint64_t *, uint64_t))(*v2 + 1400))(&v33, v2, 1);
    unint64_t v9 = v33;
    unint64_t v33 = 0;
    this = v2[69];
    v2[69] = v9;
    if (this)
    {
      int v10 = *(_DWORD *)(this + 8) - 1;
      if (*(_DWORD *)(this + 8) != 1) {
        goto LABEL_18;
      }
      (*(void (**)(unint64_t))(*(void *)this + 8))(this);
      this = v33;
      unint64_t v33 = 0;
      if (!this) {
        goto LABEL_19;
      }
      int v10 = *(_DWORD *)(this + 8) - 1;
      if (*(_DWORD *)(this + 8) != 1)
      {
LABEL_18:
        *(_DWORD *)(this + 8) = v10;
        goto LABEL_19;
      }
      this = (*(uint64_t (**)(unint64_t))(*(void *)this + 8))(this);
    }
  }
LABEL_19:
  if (v2[68])
  {
    unint64_t v11 = WebKit::PDFPluginBase::viewRelativeHorizontalScrollbarRect((WebKit::PDFPluginBase *)v2);
    int v12 = v11;
    *(void *)uint64_t v34 = v13;
    unint64_t v14 = v2[12];
    unint64_t v15 = HIDWORD(v11);
    if (v14) {
      uint64_t v16 = *(WebCore::Widget **)(v14 + 8);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = WebCore::Widget::frameRect(v16);
    LODWORD(v33) = v17 + v12;
    HIDWORD(v33) = HIDWORD(v17) + v15;
    WebCore::Scrollbar::setFrameRect((WebCore::Scrollbar *)v2[68], (const WebCore::IntRect *)&v33);
    int64_t v18 = (WebCore::Scrollbar *)v2[68];
    (*(void (**)(unint64_t *))(*v2 + 1368))(v2);
    WebCore::Scrollbar::setSteps(v18);
    this = WebCore::Scrollbar::setProportion((WebCore::Scrollbar *)v2[68]);
  }
  if (v2[69])
  {
    unint64_t v19 = WebKit::PDFPluginBase::viewRelativeVerticalScrollbarRect((WebKit::PDFPluginBase *)v2);
    int v20 = v19;
    *(void *)uint64_t v34 = v21;
    unint64_t v22 = v2[12];
    unint64_t v23 = HIDWORD(v19);
    if (v22) {
      uint64_t v24 = *(WebCore::Widget **)(v22 + 8);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = WebCore::Widget::frameRect(v24);
    LODWORD(v33) = v25 + v20;
    HIDWORD(v33) = HIDWORD(v25) + v23;
    WebCore::Scrollbar::setFrameRect((WebCore::Scrollbar *)v2[69], (const WebCore::IntRect *)&v33);
    uint64_t v26 = (WebCore::Scrollbar *)v2[69];
    (*(void (**)(unint64_t *))(*v2 + 1368))(v2);
    WebCore::Scrollbar::setSteps(v26);
    this = WebCore::Scrollbar::setProportion((WebCore::Scrollbar *)v2[69]);
  }
  unint64_t v27 = v2[13];
  if (v27)
  {
    uint64_t v28 = *(void *)(v27 + 8);
    if (v28)
    {
      uint64_t v29 = *(void *)(*(void *)(v28 + 24) + 8);
      if (*(unsigned char *)(v29 + 144)) {
        uint64_t v29 = 0;
      }
      CGPDFDictionaryRef v30 = *(WebCore::LocalFrameView **)(v29 + 288);
      if (v30)
      {
        int v31 = *((_DWORD *)v30 + 2);
        *((_DWORD *)v30 + 2) = v31 + 1;
        if (v2[68])
        {
          if (v3)
          {
LABEL_41:
            if (!v31) {
              return (*(uint64_t (**)(WebCore::LocalFrameView *))(*(void *)v30 + 8))(v30);
            }
            *((_DWORD *)v30 + 2) = v31;
            return this;
          }
        }
        else
        {
          unint64_t v32 = v2[69];
          if (v3 == (v32 != 0)) {
            goto LABEL_41;
          }
          if (!v32)
          {
            WebCore::LocalFrameView::removeScrollableArea(v30, (WebCore::ScrollableArea *)v2);
            goto LABEL_40;
          }
        }
        WebCore::LocalFrameView::addScrollableArea(v30, (WebCore::ScrollableArea *)v2);
LABEL_40:
        this = WebCore::LocalFrameView::setNeedsLayoutAfterViewConfigurationChange(v30);
        int v31 = *((_DWORD *)v30 + 2) - 1;
        goto LABEL_41;
      }
    }
  }
  return this;
}

void sub_198E33714(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

WebCore::Page *WebKit::PDFPluginBase::createScrollbar@<X0>(WebKit::PDFPluginBase *a1@<X0>, uint64_t a2@<X1>, WebCore::Widget **a3@<X8>)
{
  WebCore::Scrollbar::createNativeScrollbar();
  (*(void (**)(WebKit::PDFPluginBase *, WebCore::Widget *, uint64_t))(*(void *)a1 + 240))(a1, *a3, a2);
  unint64_t result = (WebCore::Page *)WebKit::PDFPluginBase::page(a1);
  if (result)
  {
    int v7 = result;
    ++*(_DWORD *)result;
    if (WebCore::Page::isMonitoringWheelEvents(result))
    {
      uint64_t v8 = WebCore::ScrollableArea::scrollAnimator(a1);
      WebCore::Page::wheelEventTestMonitor((uint64_t *)&v20, v7);
      int v10 = v20;
      if (v20)
      {
        char v11 = 0;
        atomic_uchar *volatile v12 = *v20;
        int v13 = 1;
        atomic_compare_exchange_strong_explicit(*v20, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
        if (v11) {
          MEMORY[0x19972E8D0](v12);
        }
        ++*((void *)v12 + 1);
        atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
        if (v13 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v12);
        }
      }
      unint64_t v14 = *(atomic_uchar ***)(v8 + 16);
      *(void *)(v8 + 16) = v10;
      if (v14) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v14, v9);
      }
      unint64_t v15 = (atomic_uchar **)v20;
      int v20 = 0;
      if (v15) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v15, v9);
      }
    }
    unint64_t result = (WebCore::Page *)WTF::RefCounted<WebCore::Page>::deref(v7);
  }
  uint64_t v16 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)a1 + 12) + 8) + 64) + 48) + 8)
                  + 544);
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 8);
    if (v17)
    {
      int64_t v18 = (unsigned int *)(v17 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v17 + 8), 1u);
      unint64_t v19 = *(WebCore::LocalFrameView **)(v17 + 288);
      if (v19)
      {
        ++*((_DWORD *)v19 + 2);
        WebCore::LocalFrameView::addChild(v19, *a3);
        if (*((_DWORD *)v19 + 2) == 1) {
          (*(void (**)(WebCore::LocalFrameView *))(*(void *)v19 + 8))(v19);
        }
        else {
          --*((_DWORD *)v19 + 2);
        }
      }
      return (WebCore::Page *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v18);
    }
  }
  return result;
}

void sub_198E3392C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, atomic_uchar **a10)
{
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*a10, a2);
  }
  WTF::RefCounted<WebCore::Page>::deref(v11);
  int v13 = *v10;
  atomic_uchar *volatile *v10 = 0;
  if (v13)
  {
    if (v13[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
    }
    else {
      --v13[2];
    }
  }
  _Unwind_Resume(a1);
}

_DWORD *WebKit::PDFPluginBase::destroyScrollbar(_DWORD *result, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = 138;
  }
  else {
    uint64_t v3 = 136;
  }
  uint64_t v4 = *(void *)&result[v3];
  if (v4)
  {
    int v5 = result;
    (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)result + 248))(result, v4, a2);
    WebCore::Widget::removeFromParent(*(WebCore::Widget **)&v5[v3]);
    unint64_t result = *(_DWORD **)&v5[v3];
    *(void *)&v5[v3] = 0;
    if (result)
    {
      if (result[2] == 1)
      {
        unint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
        return (_DWORD *)v6();
      }
      else
      {
        --result[2];
      }
    }
  }
  return result;
}

void *WebKit::PDFPluginBase::wantsWheelEventsChanged(void *this)
{
  uint64_t v1 = this[14];
  if (v1)
  {
    if (*(void *)(v1 + 8))
    {
      uint64_t v2 = this;
      uint64_t v3 = this[13];
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          uint64_t v5 = *(void *)(v4 + 24);
          if (v5)
          {
            uint64_t v6 = *(void *)(v5 + 8);
            if (v6)
            {
              if (!*(unsigned char *)(v6 + 144))
              {
                uint64_t v7 = *(void *)(v6 + 296);
                if (v7)
                {
                  *(_DWORD *)(v7 + 28) += 2;
                  if ((*(unsigned int (**)(void *))(*this + 1048))(this)) {
                    this = (void *)WebCore::Document::didAddWheelEventHandler((WebCore::Document *)v7, *(WebCore::Node **)(v2[14] + 8));
                  }
                  else {
                    this = (void *)WebCore::Document::didRemoveWheelEventHandler();
                  }
                  if (*(_DWORD *)(v7 + 28) == 2)
                  {
                    if ((*(_WORD *)(v7 + 34) & 0x400) == 0)
                    {
                      return (void *)WebCore::Node::removedLastRef((WebCore::Node *)v7);
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v7 + 28) -= 2;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void sub_198E33BB0(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 28) == 2)
  {
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  else
  {
    *(_DWORD *)(v1 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PDFPluginBase::notifyCursorChanged(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          uint64_t v5 = *(void *)(v4 + 24);
          if (v5)
          {
            uint64_t v6 = *(void *)(v5 + 8);
            if (v6)
            {
              uint64_t v8 = *(void **)(*(void *)(v6 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v8 + 1368))(v8) & 1) == 0)
              {
                if (*(void *)(v8[2] + 8))
                {
                  uint64_t v9 = *(void *)(a1 + 104);
                  if (v9) {
                    uint64_t v10 = *(void *)(v9 + 8);
                  }
                  else {
                    uint64_t v10 = 0;
                  }
                  WebKit::WebFrame::protectedPage(v10, &v13);
                  uint64_t v11 = v13;
                  uint64_t v12 = WebCore::Cursor::fromType();
                  IPC::MessageSender::send<Messages::WebPageProxy::SetCursor>(v11 + 32, &v12);
                  if (v11) {
                    CFRelease(*(CFTypeRef *)(v11 + 8));
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_198E33CD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::SetCursor>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2066;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<WebCore::Cursor,void>::encode(v5, *a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

void sub_198E33DE0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFPluginBase::lastKnownMousePositionInView(WebKit::PDFPluginBase *this)
{
  if (*((unsigned char *)this + 528)) {
    return WebCore::AffineTransform::mapPoint((WebKit::PDFPluginBase *)((char *)this + 328), (WebKit::PDFPluginBase *)((char *)this + 420));
  }
  else {
    return 0;
  }
}

uint64_t WebKit::PDFPluginBase::navigateToURL(WebKit::PDFPluginBase *this, const WTF::URL *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t result = WTF::URL::protocolIsJavaScript(a2);
  if ((result & 1) == 0)
  {
    uint64_t v5 = *((void *)this + 13);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 24);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            if (!*(unsigned char *)(v8 + 144))
            {
              atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
              if (*((unsigned char *)this + 528))
              {
                uint64_t v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                if (!v9 || (uint64_t result = *(void *)(v9 + 96)) == 0) {
                  uint64_t result = WebCore::threadGlobalDataSlow((WebCore *)result);
                }
                if (!*(void *)(result + 40)) {
                  WebCore::ThreadGlobalData::initializeEventNames((WebCore::ThreadGlobalData *)result);
                }
                uint64_t v10 = *(WebCore::WindowProxy **)(v8 + 112);
                ++*(_DWORD *)v10;
                int v20 = v10;
                if (!*((unsigned char *)this + 528))
                {
                  __break(1u);
                  goto LABEL_29;
                }
                WebKit::platform(v22, (const WebMouseEvent *)((char *)this + 384));
                v19[0] = 0;
                v19[1] = 0;
                v18[0] = 0;
                v18[1] = 0;
                WebCore::MouseEvent::create();
                this = v21;
                uint64_t v21 = 0;
                WTF::Vector<WTF::Ref<WebCore::MouseEvent,WTF::RawPtrTraits<WebCore::MouseEvent>,WTF::DefaultRefDerefTraits<WebCore::MouseEvent>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v11);
                WTF::Vector<WTF::Ref<WebCore::MouseEvent,WTF::RawPtrTraits<WebCore::MouseEvent>,WTF::DefaultRefDerefTraits<WebCore::MouseEvent>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v12);
                WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v13);
                WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v14);
                uint64_t v16 = v23;
                unint64_t v23 = 0;
                if (v16)
                {
                  if (*(_DWORD *)v16 == 2) {
                    WTF::StringImpl::destroy(v16, v15);
                  }
                  else {
                    *(_DWORD *)v16 -= 2;
                  }
                }
                uint64_t v17 = v20;
                int v20 = 0;
                if (v17) {
                  WTF::RefCounted<WebCore::WindowProxy>::deref(v17);
                }
              }
              else
              {
                this = 0;
              }
              LOBYTE(v19[0]) = 1;
              LOBYTE(v22[0]) = 0;
              char v26 = 0;
              WebCore::FrameLoader::changeLocation();
              if (!v26)
              {
                if (this) {
                  goto LABEL_23;
                }
                return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
              }
LABEL_29:
              WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v22, v4);
              if (this)
              {
LABEL_23:
                if (*((_DWORD *)this + 4) == 1) {
                  (*(void (**)(WebKit::PDFPluginBase *))(*(void *)this + 8))(this);
                }
                else {
                  --*((_DWORD *)this + 4);
                }
              }
              return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_198E34074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v58);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::PDFPluginBase::registerPDFTest(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 296)) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  *a2 = 0;
  uint64_t result = *(_DWORD **)(a1 + 584);
  *(void *)(a1 + 584) = v2;
  if (result)
  {
    if (result[4] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 16))();
    }
    else {
      --result[4];
    }
  }
  return result;
}

uint64_t WebKit::PDFPluginBase::rootFrameID(WebKit::PDFPluginBase *this)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 12) + 8) + 64)
                                                                                           + 48)
                                                                               + 8)
                                                                   + 544)
                                                       + 8)
                                           + 616)
                               + 8)
                   + 32);
}

uint64_t WebKit::PDFPluginBase::annotationStyle@<X0>(WebKit::PDFPluginBase *this@<X0>, void *a2@<X8>)
{
  WebKit::PDFPluginBase::isFullFramePlugin(this);
  uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a2 = v4;
  return result;
}

uint64_t WebKit::PDFPluginBase::ptrCount(WebKit::PDFPluginBase *this)
{
  return atomic_load((unsigned int *)this + 20);
}

uint64_t WebKit::PDFPluginBase::ptrCountWithoutThreadCheck(WebKit::PDFPluginBase *this)
{
  return atomic_load((unsigned int *)this + 20);
}

uint64_t WebKit::PDFPluginBase::incrementPtrCount(uint64_t this)
{
  return this;
}

uint64_t WebKit::PDFPluginBase::decrementPtrCount(uint64_t this)
{
  if (atomic_load((unsigned int *)(this + 80)))
  {
    atomic_fetch_add((atomic_uint *volatile)(this + 80), 0xFFFFFFFF);
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::ScrollableArea::isScrollView(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isRenderLayer(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isListBox(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::requestScrollToPosition()
{
  return 0;
}

uint64_t WebCore::ScrollableArea::requestStartKeyboardScrollAnimation(WebCore::ScrollableArea *this, const KeyboardScroll *a2)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::requestStopKeyboardScrollAnimation(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::hasSteppedScrolling(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::horizontalScrollbarMode(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::verticalScrollbarMode(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::horizontalNativeScrollbarVisibility(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::verticalNativeScrollbarVisibility(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::horizontalOverscrollBehavior(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::verticalOverscrollBehavior(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::scrollbarWidthStyle(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::scrollingNodeID(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::isScrollCornerVisible(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::horizontalScrollbar(WebKit::PDFPluginBase *this)
{
  return *((void *)this + 68);
}

uint64_t WebKit::PDFPluginBase::verticalScrollbar(WebKit::PDFPluginBase *this)
{
  return *((void *)this + 69);
}

uint64_t WebCore::ScrollableArea::isVisibleToHitTesting(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::visibleSize(WebKit::PDFPluginBase *this)
{
  return *((void *)this + 40);
}

uint64_t WebCore::ScrollableArea::isHandlingWheelEvent(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::headerHeight(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::footerHeight(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::useDarkAppearance(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::shouldSuspendScrollAnimations(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::isScrollableOrRubberbandable(WebKit::PDFPluginBase *this)
{
  return 1;
}

uint64_t WebKit::PDFPluginBase::hasScrollableOrRubberbandableAncestor(WebKit::PDFPluginBase *this)
{
  return 1;
}

uint64_t WebCore::ScrollableArea::isUserScrollInProgress(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isRubberBandInProgress(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isScrollSnapInProgress(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::scrollAnimatorEnabled(WebKit::PDFPluginBase *this)
{
  return 1;
}

uint64_t WebCore::ScrollableArea::isInStableState(WebCore::ScrollableArea *this)
{
  return 1;
}

uint64_t WebCore::ScrollableArea::usesCompositedScrolling(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::usesAsyncScrolling(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::layerForHorizontalScrollbar(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::layerForVerticalScrollbar(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::mockScrollbarsControllerEnabled(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::shouldPlaceVerticalScrollbarOnLeft(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isHorizontalWritingMode(WebCore::ScrollableArea *this)
{
  return 0;
}

float WebCore::ScrollableArea::pageScaleFactor(WebCore::ScrollableArea *this)
{
  return 1.0;
}

uint64_t WebCore::ScrollableArea::needsAnimatedScroll(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::totalScrollbarSpace(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::insetForLeftScrollbarSpace(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::layerForScrollCorner(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::isUnifiedPDFPlugin(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::isLegacyPDFPlugin(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::platformLayer(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::graphicsLayer(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::isComposited(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::shouldCreateTransientPaintingSnapshot(WebKit::PDFPluginBase *this)
{
  return 0;
}

void WebKit::PDFPluginBase::snapshot(void *a1@<X8>)
{
  *a1 = 0;
}

double WebKit::PDFPluginBase::minScaleFactor(WebKit::PDFPluginBase *this)
{
  return 0.25;
}

double WebKit::PDFPluginBase::maxScaleFactor(WebKit::PDFPluginBase *this)
{
  return 5.0;
}

void WebKit::PDFPluginBase::rectsForTextMatchesInRect(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebKit::PDFPluginBase::textIndicatorForCurrentSelection(void *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::PDFPluginBase::annotationRectsForTesting(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebCore::MimeClassInfo **)a1;
    uint64_t v5 = 32 * v3;
    do
    {
      WebCore::MimeClassInfo::~MimeClassInfo(v4, a2);
      uint64_t v4 = (WebCore::MimeClassInfo *)(v6 + 32);
      v5 -= 32;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WTF::RangeSet<WTF::Range<unsigned long long>>::compact(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 144))
  {
    unint64_t v2 = *(unsigned int *)(a1 + 12);
    if (v2)
    {
      std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*,false>(*(void *)a1, (unint64_t *)(*(void *)a1 + 16 * v2), 126 - 2 * __clz(v2), 1);
      unint64_t v3 = *(unsigned int *)(a1 + 12);
      if (!v3)
      {
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x198E34628);
      }
      unint64_t v4 = v3 - 1;
      if (v3 == 1)
      {
        LODWORD(v5) = 1;
      }
      else
      {
        unint64_t v6 = *(void *)a1;
        uint64_t v7 = *(void *)a1 + 16;
        unint64_t v5 = 1;
        uint64_t v8 = *(uint64_t **)a1;
        do
        {
          long long v9 = *(_OWORD *)v7;
          unint64_t v10 = v8[1];
          unint64_t v11 = *(void *)(v7 + 8);
          if (v11 > v10)
          {
            if ((unint64_t)v9 <= v10)
            {
              uint64_t v12 = *v8;
              if (*v8 == v11)
              {
                uint64_t v12 = 0;
                unint64_t v11 = 0;
              }
              *uint64_t v8 = v12;
              v8[1] = v11;
            }
            else
            {
              if (v3 <= v5) {
                goto LABEL_18;
              }
              uint64_t v8 = (uint64_t *)(v6 + 16 * v5++);
              *(_OWORD *)uint64_t v8 = v9;
            }
          }
          v7 += 16;
          --v4;
        }
        while (v4);
      }
      *(_DWORD *)(a1 + 12) = v5;
    }
    *(unsigned char *)(a1 + 144) = 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unint64_t v38 = *(a2 - 2);
                unint64_t v37 = (long long *)(a2 - 2);
                if (v38 < *(void *)v10)
                {
                  long long v90 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v90;
                }
                break;
              case 3uLL:
                std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((long long *)v10, (unint64_t *)(v10 + 16), a2 - 2);
                break;
              case 4uLL:
                std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((long long *)v10, (unint64_t *)(v10 + 16), (unint64_t *)(v10 + 32), (_OWORD *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((long long *)v10, (unint64_t *)(v10 + 16), (unint64_t *)(v10 + 32), (__n128 *)(v10 + 48), (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            unint64_t v39 = (unint64_t *)(v10 + 16);
            BOOL v41 = (unint64_t *)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                uint64_t v43 = (unint64_t *)v10;
                do
                {
                  uint64_t v44 = v39;
                  unint64_t v45 = *v39;
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(void *)(v10 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        uint64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_88;
                      }
                    }
                    uint64_t v49 = (void *)v10;
LABEL_88:
                    *uint64_t v49 = v45;
                    v49[1] = v46;
                  }
                  unint64_t v39 = v44 + 2;
                  v42 += 16;
                  uint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              uint64_t v78 = -2;
              uint64_t v79 = 1;
              v80 = (unint64_t *)v10;
              do
              {
                unint64_t v81 = *v39;
                if (*v39 < *v80)
                {
                  unint64_t v82 = v80[3];
                  uint64_t v83 = v78;
                  v84 = v39;
                  do
                  {
                    *(_OWORD *)v84 = *((_OWORD *)v84 - 1);
                    BOOL v4 = __CFADD__(v83++, 1);
                    if (v4) {
                      goto LABEL_141;
                    }
                    v85 = v84 - 2;
                    unint64_t v86 = *(v84 - 4);
                    v84 -= 2;
                  }
                  while (v81 < v86);
                  unint64_t *v85 = v81;
                  v85[1] = v82;
                }
                v80 = (unint64_t *)(v10 + 16 * v79++);
                v39 += 2;
                --v78;
              }
              while (v39 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((unint64_t *)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  v54 = (unint64_t *)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 > v56) {
                      unint64_t v56 = *v54;
                    }
                    if (!v55)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  uint64_t v57 = (unint64_t *)(v10 + 16 * v52);
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      v60 = v57;
                      uint64_t v57 = v54;
                      *(_OWORD *)v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      v54 = (unint64_t *)(v10 + 16 * v61);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unint64_t v64 = *v54;
                        unint64_t v62 = v54[2];
                        BOOL v63 = *v54 >= v62;
                        if (*v54 <= v62) {
                          unint64_t v64 = v54[2];
                        }
                        if (*v54 < v62) {
                          v54 += 2;
                        }
                        if (v63) {
                          uint64_t v53 = v61;
                        }
                      }
                      else
                      {
                        unint64_t v64 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v64 >= v58);
                    *uint64_t v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v65 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v66 = 0;
                long long v91 = *(_OWORD *)v10;
                v67 = (_OWORD *)v10;
                do
                {
                  v68 = (unint64_t *)&v67[v66 + 1];
                  uint64_t v69 = (2 * v66) | 1;
                  uint64_t v70 = 2 * v66 + 2;
                  if (v70 < v65 && *v68 < v68[2])
                  {
                    v68 += 2;
                    uint64_t v69 = v70;
                  }
                  _OWORD *v67 = *(_OWORD *)v68;
                  v67 = v68;
                  uint64_t v66 = v69;
                }
                while (v69 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
                a2 -= 2;
                if (v68 == a2)
                {
                  *(_OWORD *)v68 = v91;
                }
                else
                {
                  *(_OWORD *)v68 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v91;
                  uint64_t v71 = (uint64_t)v68 - v10 + 16;
                  if (v71 >= 17)
                  {
                    unint64_t v72 = (((unint64_t)v71 >> 4) - 2) >> 1;
                    v73 = (unint64_t *)(v10 + 16 * v72);
                    unint64_t v74 = *v68;
                    if (*v73 < *v68)
                    {
                      unint64_t v75 = v68[1];
                      do
                      {
                        v76 = v68;
                        v68 = v73;
                        *(_OWORD *)v76 = *(_OWORD *)v73;
                        if (!v72) {
                          break;
                        }
                        unint64_t v72 = (v72 - 1) >> 1;
                        v73 = (unint64_t *)(v10 + 16 * v72);
                      }
                      while (*v73 < v74);
                      unint64_t *v68 = v74;
                      v68[1] = v75;
                    }
                  }
                }
              }
              while (v65-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = (unint64_t *)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((long long *)a1, (unint64_t *)(a1 + 16 * (v12 >> 1)), a2 - 2);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((long long *)(a1 + 16), v14 - 2, a2 - 4);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v13), a2 - 6);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((long long *)v14 - 1, v14, (unint64_t *)(a1 + 16 + 16 * v13));
            long long v87 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)unint64_t v14 = v87;
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((long long *)(a1 + 16 * (v12 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          unint64_t v15 = *(void *)a1;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < v15) {
            break;
          }
          uint64_t v28 = *(void *)(a1 + 8);
          if (v15 >= *(a2 - 2))
          {
            unint64_t v31 = a1 + 16;
            do
            {
              unint64_t v10 = v31;
              if (v31 >= (unint64_t)a2) {
                break;
              }
              v31 += 16;
            }
            while (v15 >= *(void *)v10);
          }
          else
          {
            uint64_t v29 = (unint64_t *)(a1 + 16);
            do
            {
              if (v29 == a2) {
                goto LABEL_141;
              }
              unint64_t v30 = *v29;
              v29 += 2;
            }
            while (v15 >= v30);
            unint64_t v10 = (unint64_t)(v29 - 2);
          }
          unint64_t v32 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v32 = a2;
            while (v32 != (_OWORD *)a1)
            {
              unint64_t v33 = *((void *)v32-- - 2);
              if (v15 >= v33) {
                goto LABEL_55;
              }
            }
LABEL_141:
            __break(1u);
            JUMPOUT(0x198E34D6CLL);
          }
LABEL_55:
          if (v10 < (unint64_t)v32)
          {
            long long v89 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v32;
            *unint64_t v32 = v89;
            uint64_t v34 = (unint64_t *)(v10 + 16);
            do
            {
              if (v34 == a2) {
                goto LABEL_141;
              }
              unint64_t v35 = *v34;
              v34 += 2;
            }
            while (v15 >= v35);
            unint64_t v10 = (unint64_t)(v34 - 2);
            while (v32 != (_OWORD *)a1)
            {
              unint64_t v36 = *((void *)v32-- - 2);
              if (v15 >= v36) {
                goto LABEL_55;
              }
            }
            goto LABEL_141;
          }
          BOOL v4 = v10 - 16 >= a1;
          BOOL v5 = v10 - 16 == a1;
          if (v10 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v28;
        }
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 8);
        do
        {
          int64_t v18 = (unint64_t *)(a1 + v16 + 16);
          if (v18 == a2) {
            goto LABEL_141;
          }
          v16 += 16;
        }
        while (*v18 < v15);
        unint64_t v19 = a1 + v16;
        int v20 = a2;
        if (v16 != 16)
        {
          while (v20 != (unint64_t *)a1)
          {
            unint64_t v21 = *(v20 - 2);
            v20 -= 2;
            if (v21 < v15) {
              goto LABEL_21;
            }
          }
          goto LABEL_141;
        }
        int v20 = a2;
        do
        {
          if (v19 >= (unint64_t)v20) {
            break;
          }
          unint64_t v22 = *(v20 - 2);
          v20 -= 2;
        }
        while (v22 >= v15);
LABEL_21:
        unint64_t v10 = a1 + v16;
        if (v19 < (unint64_t)v20)
        {
          unint64_t v23 = (long long *)v20;
          do
          {
            long long v88 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v23;
            long long *v23 = v88;
            uint64_t v24 = (unint64_t *)(v10 + 16);
            do
            {
              if (v24 == a2) {
                goto LABEL_141;
              }
              unint64_t v25 = *v24;
              v24 += 2;
            }
            while (v25 < v15);
            unint64_t v10 = (unint64_t)(v24 - 2);
            do
            {
              if (v23 == (long long *)a1) {
                goto LABEL_141;
              }
              unint64_t v26 = *((void *)v23-- - 2);
            }
            while (v26 >= v15);
          }
          while (v10 < (unint64_t)v23);
        }
        if (v10 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v17;
        if (v19 >= (unint64_t)v20) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v27 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(a1, (unint64_t *)(v10 - 16));
      if (std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(v10, a2))
      {
        break;
      }
      if (!v27) {
        goto LABEL_35;
      }
    }
    a2 = (unint64_t *)(v10 - 16);
    if (!v27) {
      continue;
    }
    break;
  }
}

long long *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(long long *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 >= *(void *)result)
  {
    if (v4 < v3)
    {
      long long v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *(void *)result)
      {
        long long v7 = *result;
        *uint64_t result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v8 = *result;
      *uint64_t result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      long long v5 = *result;
      *uint64_t result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      long long v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      long long v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          uint64_t v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v16 = (unint64_t *)a1;
LABEL_12:
      *uint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    long long v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(long long *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(a1, a2, a3);
  if (*(void *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(void *)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(long long *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(void *)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  unint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 832))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

void WebKit::PDFScriptEvaluation::appendValuesInPDFNameSubtreeToVector(CGPDFDictionaryRef *a1, uint64_t a2)
{
  CGPDFArrayRef value = 0;
  if (CGPDFDictionaryGetArray(*a1, "Names", &value))
  {
    size_t Count = CGPDFArrayGetCount(value);
    if (Count >= 2)
    {
      size_t v5 = Count >> 1;
      size_t v6 = 1;
      do
      {
        CGPDFObjectRef array = 0;
        CGPDFArrayGetObject(value, v6, &array);
        uint64_t v7 = *(unsigned int *)(a2 + 12);
        if (v7 == *(_DWORD *)(a2 + 8))
        {
          BOOL v8 = (void *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v7 + 1, (unint64_t)&array);
          uint64_t v7 = *(unsigned int *)(a2 + 12);
          *(void *)(*(void *)a2 + 8 * v7) = *v8;
        }
        else
        {
          *(void *)(*(void *)a2 + 8 * v7) = array;
        }
        *(_DWORD *)(a2 + 12) = v7 + 1;
        v6 += 2;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    CGPDFObjectRef array = 0;
    if (CGPDFDictionaryGetArray(*a1, "Kids", &array))
    {
      size_t v9 = CGPDFArrayGetCount(array);
      if (v9)
      {
        size_t v10 = v9;
        for (size_t i = 0; i != v10; ++i)
        {
          CGPDFDictionaryRef v14 = 0;
          if (CGPDFArrayGetDictionary(array, i, &v14))
          {
            CGPDFDictionaryRef v12 = v14;
            CGPDFDictionaryRef v13 = v14;
            if (v14) {
              CFRetain(v14);
            }
            WebKit::PDFScriptEvaluation::appendValuesInPDFNameSubtreeToVector(&v13, a2);
            CGPDFDictionaryRef v13 = 0;
            if (v12) {
              CFRelease(v12);
            }
          }
        }
      }
    }
  }
}

void sub_198E35378(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  unint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v11 = *((void *)v2 + 2);
    uint64_t v7 = (WTF *)*((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v11 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7)
  {
    uint64_t v9 = *((void *)v7 + 4);
    if (v9) {
      WTF::fastFree((WTF *)(v9 - 16), a2);
    }
    uint64_t v10 = *((void *)v7 + 1);
    *((void *)v7 + 1) = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    this = (atomic_uchar *)WTF::fastFree(v7, a2);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

void *WebCore::MimeClassInfo::MimeClassInfo(void *a1, uint64_t a2)
{
  char v3 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v3 += 2;
  }
  *a1 = v3;
  uint64_t v4 = *(_DWORD **)(a2 + 8);
  if (v4) {
    *v4 += 2;
  }
  a1[1] = v4;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 2), a2 + 16);
  return a1;
}

void sub_198E35500(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = v2[1];
  v2[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = *v2;
  *unint64_t v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MimeClassInfo&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  __n128 result = WebCore::MimeClassInfo::MimeClassInfo((void *)(*(void *)a1 + 32 * *(unsigned int *)(a1 + 12)), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    unint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  return v3;
}

uint64_t *WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x198E356ECLL);
    }
    unint64_t v3 = result;
    uint64_t v4 = (uint64_t *)*result;
    uint64_t v5 = (uint64_t *)(*result + 32 * *((unsigned int *)result + 3));
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *unint64_t v3 = v6;
    __n128 result = WTF::VectorMover<false,WebCore::MimeClassInfo>::move(v4, v5, v6);
    if (v4)
    {
      if ((uint64_t *)*v3 == v4)
      {
        *unint64_t v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (uint64_t *)WTF::fastFree((WTF *)v4, v7);
    }
  }
  return result;
}

uint64_t *WTF::VectorMover<false,WebCore::MimeClassInfo>::move(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  for (; result != a2; a3 += 32)
  {
    uint64_t v5 = *result;
    *__n128 result = 0;
    *(void *)a3 = v5;
    uint64_t v6 = result[1];
    result[1] = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = v6;
    uint64_t v7 = result[2];
    result[2] = 0;
    *(void *)(a3 + 16) = v7;
    LODWORD(v7) = *((_DWORD *)result + 6);
    *((_DWORD *)result + 6) = 0;
    *(_DWORD *)(a3 + 24) = v7;
    LODWORD(v7) = *((_DWORD *)result + 7);
    *((_DWORD *)result + 7) = 0;
    *(_DWORD *)(a3 + 28) = v7;
    WebCore::MimeClassInfo::~MimeClassInfo((WebCore::MimeClassInfo *)result, a2);
    __n128 result = (uint64_t *)(v8 + 32);
  }
  return result;
}

WTF *WTF::WeakPtrFactory<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded(WTF *result, uint64_t a2)
{
  if (!*(void *)result)
  {
    unint64_t v3 = (WTF **)result;
    uint64_t v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v5 = 1;
    *(void *)(v5 + 8) = a2;
    __n128 result = *v3;
    *unint64_t v3 = (WTF *)v5;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        return (WTF *)WTF::fastFree(result, v4);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WTF::Range<unsigned long long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::Range<unsigned long long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Range<unsigned long long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Range<unsigned long long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return result;
  }
  int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(WTF **)result;
  uint64_t v5 = *(unsigned int *)(result + 12);
  if (a2 < 9)
  {
    result += 16;
    *(void *)uint64_t v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 8;
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    if (a2 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    __n128 result = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = result;
    if (!v5) {
      goto LABEL_9;
    }
  }
  uint64_t v6 = 16 * v5;
  unint64_t v7 = v4;
  do
  {
    long long v8 = *(_OWORD *)v7;
    unint64_t v7 = (WTF *)((char *)v7 + 16);
    *(_OWORD *)__n128 result = v8;
    result += 16;
    v6 -= 16;
  }
  while (v6);
LABEL_9:
  if ((WTF *)(v3 + 16) != v4 && v4)
  {
    if (*(WTF **)v3 == v4)
    {
      *(void *)uint64_t v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
    }
    return WTF::fastFree(v4, (void *)a2);
  }
  return result;
}

void *std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::~__func(void *a1, void *a2)
{
  *a1 = &unk_1EE9D8BA8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 72), a2);
  }
  return a1;
}

void std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::~__func(void *a1, void *a2)
{
  *a1 = &unk_1EE9D8BA8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 72), a2);
  }

  JUMPOUT(0x199740C10);
}

void *std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *uint64_t v2 = &unk_1EE9D8BA8;
  v2[1] = v3;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v4 + 72));
  v2[2] = v4;
  return v2;
}

void sub_198E35A98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

atomic_uchar *volatile *std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *a2 = &unk_1EE9D8BA8;
  a2[1] = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  __n128 result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v4 + 72));
  a2[2] = v4;
  return result;
}

atomic_uchar *std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::destroy(atomic_uchar *result, void *a2)
{
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + 2) = 0;
  if (v2) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 72), a2);
  }
  return result;
}

void std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::destroy_deallocate(void *__p, void *a2)
{
  uint64_t v3 = __p[2];
  __p[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 72), a2);
  }

  operator delete(__p);
}

_DWORD *std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(WebKit::PDFPluginBase **)(a1 + 8);
  __n128 result = (_DWORD *)WebKit::PDFPluginBase::page(v1);
  if (result)
  {
    uint64_t v3 = result;
    ++*result;
    uint64_t v4 = (WebCore::Chrome *)*((void *)result + 6);
    if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(*((void *)v1 + 13) + 8) + 24) + 8) + 144)) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = *(WebCore::LocalFrame **)(*(void *)(*(void *)(*((void *)v1 + 13) + 8) + 24) + 8);
    }
    WebCore::Chrome::print(v4, v5);
    return WTF::RefCounted<WebCore::Page>::deref(v3);
  }
  return result;
}

void sub_198E35BDC(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:sn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

WebCore::WindowProxy *WTF::RefCounted<WebCore::WindowProxy>::deref(WebCore::WindowProxy *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::WindowProxy::~WindowProxy(result);
    return (WebCore::WindowProxy *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::MouseEvent,WTF::RawPtrTraits<WebCore::MouseEvent>,WTF::DefaultRefDerefTraits<WebCore::MouseEvent>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::Ref<WebCore::MouseEvent,WTF::RawPtrTraits<WebCore::MouseEvent>,WTF::DefaultRefDerefTraits<WebCore::MouseEvent>>>::destruct(*(_DWORD **)a1, (_DWORD **)(*(void *)a1 + 8 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_DWORD *WTF::VectorDestructor<true,WTF::Ref<WebCore::MouseEvent,WTF::RawPtrTraits<WebCore::MouseEvent>,WTF::DefaultRefDerefTraits<WebCore::MouseEvent>>>::destruct(_DWORD *result, _DWORD **a2)
{
  if (result != (_DWORD *)a2)
  {
    uint64_t v3 = (_DWORD **)result;
    do
    {
      __n128 result = *v3;
      *uint64_t v3 = 0;
      if (result)
      {
        if (result[4] == 1) {
          __n128 result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
        }
        else {
          --result[4];
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

WebKit::WebEditCommandProxy *std::__throw_bad_function_call[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return WebKit::WebEditCommandProxy::WebEditCommandProxy(v0, v1, v2, v3);
}

WebKit::WebEditCommandProxy *WebKit::WebEditCommandProxy::WebEditCommandProxy(WebKit::WebEditCommandProxy *this, uint64_t a2, const WTF::String *a3, WebKit::WebPageProxy *a4)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *(void *)this = &unk_1EE9D8BF0;
  long long v8 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v8 += 2;
  }
  *((void *)this + 4) = v8;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a4 + 6, (uint64_t)a4 + 16);
  uint64_t v9 = *((void *)a4 + 3);
  if (v9)
  {
    atomic_fetch_add((atomic_uint *volatile)v9, 1u);
    uint64_t v10 = *(void *)(v9 + 8);
    if (v10) {
      uint64_t v11 = v10 - 16;
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  *((void *)this + 5) = v9;
  WTF::WeakHashSet<WebKit::WebEditCommandProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebEditCommandProxy>(v11 + 504, this, (uint64_t)v13);
  return this;
}

void WebKit::WebEditCommandProxy::~WebEditCommandProxy(WebKit::WebEditCommandProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9D8BF0;
  uint64_t v3 = *((void *)this + 5);
  if (!v3)
  {
    *((void *)this + 5) = 0;
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4)
  {
    WebKit::WebPageProxy::removeEditCommand((WebKit::WebPageProxy *)(v4 - 16), this);
    uint64_t v3 = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!v3) {
      goto LABEL_9;
    }
  }
  else
  {
    *((void *)this + 5) = 0;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
LABEL_9:
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    *(void *)(v6 + 8) = 0;
    unint64_t v7 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v7)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::WebEditCommandProxy::~WebEditCommandProxy(this, a2);

  JUMPOUT(0x199740C10);
}

void WebKit::WebEditCommandProxy::unapply(WebKit::WebEditCommandProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (!*(unsigned char *)(v2 + 785) && *(unsigned char *)(v2 + 784))
      {
        uint64_t v4 = *(void *)(v2 + 240);
        uint64_t v9 = (WebKit::WebEditCommandProxy *)*((void *)this + 3);
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UnapplyEditCommand>(v4, (uint64_t *)&v9, *(void *)(*(void *)(v2 + 16) + 1928), 1);
        uint64_t v5 = *((void *)this + 5);
        if (v5)
        {
          uint64_t v6 = *(void *)(v5 + 8);
          if (v6) {
            uint64_t v7 = v6 - 16;
          }
          else {
            uint64_t v7 = 0;
          }
        }
        else
        {
          uint64_t v7 = 0;
        }
        CFRetain(*((CFTypeRef *)this + 1));
        uint64_t v9 = this;
        WebKit::WebPageProxy::registerEditCommand(v7, (uint64_t)&v9, 1);
        uint64_t v8 = (uint64_t)v9;
        uint64_t v9 = 0;
        if (v8) {
          CFRelease(*(CFTypeRef *)(v8 + 8));
        }
      }
    }
  }
}

void WebKit::WebEditCommandProxy::reapply(WebKit::WebEditCommandProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (!*(unsigned char *)(v2 + 785) && *(unsigned char *)(v2 + 784))
      {
        uint64_t v4 = *(void *)(v2 + 240);
        uint64_t v9 = (WebKit::WebEditCommandProxy *)*((void *)this + 3);
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReapplyEditCommand>(v4, (uint64_t *)&v9, *(void *)(*(void *)(v2 + 16) + 1928), 1);
        uint64_t v5 = *((void *)this + 5);
        if (v5)
        {
          uint64_t v6 = *(void *)(v5 + 8);
          if (v6) {
            uint64_t v7 = v6 - 16;
          }
          else {
            uint64_t v7 = 0;
          }
        }
        else
        {
          uint64_t v7 = 0;
        }
        CFRetain(*((CFTypeRef *)this + 1));
        uint64_t v9 = this;
        WebKit::WebPageProxy::registerEditCommand(v7, (uint64_t)&v9, 0);
        uint64_t v8 = (uint64_t)v9;
        uint64_t v9 = 0;
        if (v8) {
          CFRelease(*(CFTypeRef *)(v8 + 8));
        }
      }
    }
  }
}

uint64_t WebKit::WebFormClient::willSubmitForm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v29 = 0;
    if (*(_DWORD *)(a5 + 12))
    {
      unint64_t v14 = 0;
      uint64_t v15 = 8;
      do
      {
        uint64_t v16 = (WTF::StringImpl **)(*(void *)a5 + v15 - 8);
        API::String::create(&v28);
        WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::String,WTF::RawPtrTraits<API::String>,WTF::DefaultRefDerefTraits<API::String>>>(&v29, v16, (uint64_t *)&v28, (uint64_t)v27);
        uint64_t v17 = v28;
        uint64_t v28 = 0;
        if (v17) {
          CFRelease(*((CFTypeRef *)v17 + 1));
        }
        ++v14;
        v15 += 16;
      }
      while (v14 < *(unsigned int *)(a5 + 12));
    }
    uint64_t v18 = API::Object::newObject(0x18uLL, 9);
    *(void *)uint64_t v18 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v18);
    *(void *)uint64_t v18 = &unk_1EE9D1E00;
    uint64_t v19 = v29;
    uint64_t v29 = 0;
    *(void *)(v18 + 16) = v19;
    uint64_t v20 = API::Object::newObject(0x18uLL, 58);
    *(void *)uint64_t v20 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v20);
    *(void *)uint64_t v20 = &unk_1EE9D8DE0;
    uint64_t v21 = *a7;
    *a7 = 0;
    *(void *)(v20 + 16) = v21;
    if (a6) {
      uint64_t v22 = *(void *)(a6 + 8);
    }
    else {
      uint64_t v22 = 0;
    }
    (*(void (**)(void, void, void, void, uint64_t, void, void))(a1 + 24))(*(void *)(a2 + 8), *(void *)(a3 + 8), *(void *)(a4 + 8), *(void *)(v18 + 8), v22, *(void *)(v20 + 8), *(void *)(a1 + 16));
    CFRelease(*(CFTypeRef *)(v20 + 8));
    CFRelease(*(CFTypeRef *)(v18 + 8));
    uint64_t result = v29;
    if (v29) {
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v23);
    }
  }
  else
  {
    uint64_t v25 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
    unint64_t v26 = *(uint64_t (**)(uint64_t))(*(void *)v25 + 8);
    return v26(v25);
  }
  return result;
}

uint64_t WebKit::WebFormSubmissionListenerProxy::continueSubmission(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  *(void *)(this + 16) = 0;
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v2(v1);
  }
  return this;
}

uint64_t WebKit::WebFramePolicyListenerProxy::WebFramePolicyListenerProxy(uint64_t a1, uint64_t *a2, char a3, char a4, char a5)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9D8C40;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 58) = 0;
  *(unsigned char *)(a1 + 60) = 0;
  uint64_t v10 = *a2;
  *a2 = 0;
  *(void *)(a1 + 64) = v10;
  if ((a3 & 1) == 0)
  {
    unint64_t v14 = 0;
    WebKit::WebFramePolicyListenerProxy::didReceiveSafeBrowsingResults(a1, (WTF::StringImpl *)&v14);
    CGPDFDictionaryRef v12 = v14;
    unint64_t v14 = 0;
    if (v12) {
      WTF::RefCounted<WebKit::BrowsingWarning>::deref(v12, v11);
    }
  }
  if ((a4 & 1) == 0) {
    WebKit::WebFramePolicyListenerProxy::didReceiveAppBoundDomainResult(a1, 0);
  }
  if ((a5 & 1) == 0) {
    WebKit::WebFramePolicyListenerProxy::didReceiveInitialLinkDecorationFilteringData(a1);
  }
  return a1;
}

uint64_t WebKit::WebFramePolicyListenerProxy::didReceiveSafeBrowsingResults(uint64_t result, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(result + 32) && *(unsigned char *)(result + 58) && *(unsigned char *)(result + 60))
  {
    uint64_t v2 = *(void *)(result + 64);
    if (v2)
    {
      uint64_t v3 = *(void *)(result + 16);
      uint64_t v4 = *(unsigned __int8 *)(result + 24);
      uint64_t v5 = *(unsigned __int16 *)(result + 56);
      *(void *)(result + 64) = 0;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t, WTF::StringImpl *, uint64_t, void))(*(void *)v2 + 16))(v2, 0, v3, v4, a2, v5, 0);
      uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
      return v6(v2);
    }
  }
  else
  {
    uint64_t v7 = result + 40;
    return std::optional<WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<WebKit::BrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::BrowsingWarning>>>::operator=[abi:sn180100]<WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<WebKit::BrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::BrowsingWarning>>,void>(v7, a2);
  }
  return result;
}

uint64_t WebKit::WebFramePolicyListenerProxy::didReceiveAppBoundDomainResult(uint64_t result, unsigned __int16 a2)
{
  if (*(unsigned char *)(result + 32) && *(unsigned char *)(result + 48) && *(unsigned char *)(result + 60))
  {
    uint64_t v2 = *(void *)(result + 64);
    if (v2)
    {
      uint64_t v3 = *(void *)(result + 16);
      uint64_t v4 = *(unsigned __int8 *)(result + 24);
      *(void *)(result + 64) = 0;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v2 + 16))(v2, 0, v3, v4, result + 40, a2, 0);
      uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
      return v5(v2);
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 58)) {
      *(unsigned char *)(result + 58) = 1;
    }
    *(_WORD *)(result + 56) = a2;
  }
  return result;
}

uint64_t WebKit::WebFramePolicyListenerProxy::didReceiveInitialLinkDecorationFilteringData(uint64_t this)
{
  if (*(unsigned char *)(this + 32) && *(unsigned char *)(this + 58) && *(unsigned char *)(this + 48))
  {
    uint64_t v1 = *(void *)(this + 64);
    if (v1)
    {
      uint64_t v2 = *(void *)(this + 16);
      uint64_t v3 = *(unsigned __int8 *)(this + 24);
      uint64_t v4 = *(unsigned __int16 *)(this + 56);
      *(void *)(this + 64) = 0;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v1 + 16))(v1, 0, v2, v3, this + 40, v4, 0);
      uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
      return v5(v1);
    }
  }
  else
  {
    *(unsigned char *)(this + 60) = 1;
  }
  return this;
}

void WebKit::WebFramePolicyListenerProxy::~WebFramePolicyListenerProxy(WebKit::WebFramePolicyListenerProxy *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D8C40;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((unsigned char *)this + 48))
  {
    uint64_t v4 = (_DWORD *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v4) {
      WTF::RefCounted<WebKit::BrowsingWarning>::deref(v4, a2);
    }
  }
  if (*((unsigned char *)this + 32))
  {
    uint64_t v5 = *((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v5) {
      CFRelease(*(CFTypeRef *)(v5 + 8));
    }
  }
}

{
  uint64_t vars8;

  WebKit::WebFramePolicyListenerProxy::~WebFramePolicyListenerProxy(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t std::optional<WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<WebKit::BrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::BrowsingWarning>>>::operator=[abi:sn180100]<WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<WebKit::BrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::BrowsingWarning>>,void>(uint64_t a1, WTF::StringImpl *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v4 = *(void *)a2;
  *(void *)a2 = 0;
  if (v3)
  {
    uint64_t v5 = *(_DWORD **)a1;
    *(void *)a1 = v4;
    if (v5) {
      WTF::RefCounted<WebKit::BrowsingWarning>::deref(v5, a2);
    }
  }
  else
  {
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return a1;
}

void WebKit::WebFramePolicyListenerProxy::use(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a3;
  if (*(unsigned char *)(a1 + 48) && *(unsigned char *)(a1 + 58) && *(unsigned char *)(a1 + 60))
  {
    uint64_t v5 = *(void *)(a1 + 64);
    if (v5)
    {
      uint64_t v6 = *(unsigned __int16 *)(a1 + 56);
      *(void *)(a1 + 64) = 0;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v5 + 16))(v5, 0, a2, a3, a1 + 40, v6, 0);
      uint64_t v7 = *(void (**)(uint64_t))(*(void *)v5 + 8);
      v7(v5);
    }
  }
  else if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v8 = (uint64_t *)(a1 + 16);
    if (a2) {
      CFRetain(*(CFTypeRef *)(a2 + 8));
    }
    uint64_t v10 = a2;
    char v11 = v3;
    char v12 = 1;
    std::__optional_storage_base<std::pair<WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>>,WebKit::ProcessSwapRequestedByClient>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::pair<WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>>,WebKit::ProcessSwapRequestedByClient>,false>>(v8, &v10);
    if (v12)
    {
      uint64_t v9 = v10;
      uint64_t v10 = 0;
      if (v9) {
        CFRelease(*(CFTypeRef *)(v9 + 8));
      }
    }
  }
}

WTF *WebKit::WebFramePolicyListenerProxy::download(WTF *this)
{
  uint64_t v1 = *((void *)this + 8);
  if (v1)
  {
    char v3 = 0;
    *((void *)this + 8) = 0;
    (*(void (**)(uint64_t, uint64_t, void, void, WTF **, void, void))(*(void *)v1 + 16))(v1, 1, 0, 0, &v3, 0, 0);
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    this = v3;
    char v3 = 0;
    if (this) {
      return (WTF *)WTF::RefCounted<WebKit::BrowsingWarning>::deref(this, v2);
    }
  }
  return this;
}

WTF *WebKit::WebFramePolicyListenerProxy::ignore(WTF *result, uint64_t a2)
{
  uint64_t v2 = *((void *)result + 8);
  if (v2)
  {
    uint64_t v4 = 0;
    *((void *)result + 8) = 0;
    (*(void (**)(uint64_t, uint64_t, void, void, WTF **, void, uint64_t))(*(void *)v2 + 16))(v2, 2, 0, 0, &v4, 0, a2);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t result = v4;
    uint64_t v4 = 0;
    if (result) {
      return (WTF *)WTF::RefCounted<WebKit::BrowsingWarning>::deref(result, v3);
    }
  }
  return result;
}

void WebKit::WebFrameProxy::~WebFrameProxy(WebKit::WebFrameProxy *this)
{
  *(void *)this = &unk_1EE9D8C68;
  --dword_1EB35A740;
  uint64_t v2 = *((void *)this + 53);
  if (v2)
  {
    *((void *)this + 53) = 0;
    LOBYTE(v40) = 0;
    char v43 = 0;
    (*(void (**)(uint64_t, void, void, unsigned int *))(*(void *)v2 + 16))(v2, 0, 0, &v40);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  {
    WebKit::allFrames(void)::map = 0;
    goto LABEL_33;
  }
  uint64_t v3 = WebKit::allFrames(void)::map;
  if (!WebKit::allFrames(void)::map) {
    goto LABEL_33;
  }
  unsigned int v4 = *(_DWORD *)(WebKit::allFrames(void)::map - 8);
  unsigned int v40 = -1640531527;
  __int16 v41 = 0;
  char v42 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v40, (void *)this + 34);
  int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v40);
  uint64_t v7 = *((void *)this + 34);
  uint64_t v8 = *((void *)this + 35);
  unsigned int v9 = v5 & v4;
  uint64_t v10 = (uint64_t *)(v3 + 24 * (v5 & v4));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (*v10 == v7 && v12 == v8)
  {
LABEL_16:
    uint64_t v16 = WebKit::allFrames(void)::map;
    if (!WebKit::allFrames(void)::map)
    {
LABEL_21:
      if ((uint64_t *)v16 != v10)
      {
        uint64_t *v10 = -1;
        v10[1] = -1;
        uint64_t v17 = (unsigned int *)v10[2];
        uint64_t v10[2] = 0;
        if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, v6);
        }
        ++*(_DWORD *)(WebKit::allFrames(void)::map - 16);
        if (WebKit::allFrames(void)::map) {
          int v18 = *(_DWORD *)(WebKit::allFrames(void)::map - 12) - 1;
        }
        else {
          int v18 = -1;
        }
        *(_DWORD *)(WebKit::allFrames(void)::map - 12) = v18;
        if (WebKit::allFrames(void)::map)
        {
          unsigned int v19 = *(_DWORD *)(WebKit::allFrames(void)::map - 4);
          if (6 * *(_DWORD *)(WebKit::allFrames(void)::map - 12) < v19 && v19 >= 9) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(v19 >> 1);
          }
        }
      }
      goto LABEL_33;
    }
LABEL_20:
    v16 += 24 * *(unsigned int *)(v16 - 4);
    if ((uint64_t *)v16 == v10) {
      goto LABEL_33;
    }
    goto LABEL_21;
  }
  int v14 = 1;
  while (v11 | v12)
  {
    unsigned int v9 = (v9 + v14) & v4;
    uint64_t v10 = (uint64_t *)(v3 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    ++v14;
    if (*v10 == v7 && v12 == v8) {
      goto LABEL_16;
    }
  }
  uint64_t v16 = WebKit::allFrames(void)::map;
  if (WebKit::allFrames(void)::map)
  {
    uint64_t v10 = (uint64_t *)(WebKit::allFrames(void)::map + 24 * *(unsigned int *)(WebKit::allFrames(void)::map - 4));
    goto LABEL_20;
  }
LABEL_33:
  uint64_t v21 = *((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = (const void *)*((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v22) {
    CFRelease(v22);
  }
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::~__value_func[abi:sn180100]((void *)this + 47);
  uint64_t v24 = (WTF::StringImpl *)*((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t v25 = (WTF::StringImpl *)*((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v23);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100]((WebKit::ProvisionalFrameProxy **)this + 40, 0);
  BOOL v27 = (unsigned int *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v27 && atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v27);
    WTF::fastFree((WTF *)v27, v26);
  }
  WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::deleteAllNodes((uint64_t)this + 288, v26);
  uint64_t v29 = *((void *)this + 36);
  if (v29) {
    WTF::fastFree((WTF *)(v29 - 16), v28);
  }
  uint64_t v30 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v30) {
    CFRelease(*(CFTypeRef *)(v30 + 8));
  }
  unint64_t v31 = (const void *)*((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v31) {
    CFRelease(v31);
  }
  unint64_t v32 = (WTF::StringImpl *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v28);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  unint64_t v33 = (WTF::StringImpl *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v28);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  uint64_t v34 = (WTF::StringImpl *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v28);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  WebKit::FrameLoadState::~FrameLoadState((WebKit::WebFrameProxy *)((char *)this + 40), v28);
  unint64_t v36 = (WebKit::FrameProcess *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v36) {
    WTF::RefCounted<WebKit::FrameProcess>::deref(v36, v35);
  }
  unint64_t v37 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v37 && atomic_fetch_add((atomic_uint *volatile)v37, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v37);
    WTF::fastFree((WTF *)v37, v35);
  }
  uint64_t v38 = *((void *)this + 2);
  if (v38)
  {
    *(void *)(v38 + 8) = 0;
    unint64_t v39 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v39)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v39, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v39);
        WTF::fastFree((WTF *)v39, v35);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::WebFrameProxy::~WebFrameProxy(this);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::WebFrameProxy::provisionalLoadProcess(WebKit::WebFrameProxy *this)
{
  uint64_t v1 = *((void *)this + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    return *(void *)(v2 + 16);
  }
  if (!*((unsigned char *)this + 441)) {
    goto LABEL_12;
  }
  uint64_t v4 = *((void *)this + 3);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(v5 + 1176);
  if (!v6) {
    goto LABEL_12;
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), *(void *)(v5 + 1176));
  uint64_t v8 = *(void *)(v6 + 8);
  if (!v8) {
    goto LABEL_12;
  }
  atomic_fetch_add((atomic_uint *volatile)v8, 1u);
  uint64_t v9 = *(void *)(v8 + 8);
  if (v9) {
    uint64_t v6 = *(void *)(*(void *)(v9 + 40) + 16);
  }
  if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v8);
    uint64_t v11 = v9;
    WTF::fastFree((WTF *)v8, v7);
    if (v11) {
      return v6;
    }
    goto LABEL_12;
  }
  if (!v9)
  {
LABEL_12:
    uint64_t v2 = *((void *)this + 4);
    return *(void *)(v2 + 16);
  }
  return v6;
}

void WebKit::WebFrameProxy::webProcessWillShutDown(WebKit::WebFrameProxy *this, void *a2)
{
  uint64_t v14 = *((void *)this + 36);
  long long v11 = *(_OWORD *)((char *)this + 296);
  long long v15 = v11;
  uint64_t v12 = 0;
  long long v13 = 0u;
  *((_OWORD *)this + 18) = 0u;
  long long v16 = 0u;
  *((void *)this + 38) = 0;
  uint64_t v17 = 0;
  WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::deleteAllNodes((uint64_t)&v16, a2);
  if ((void)v16) {
    WTF::fastFree((WTF *)(v16 - 16), v3);
  }
  WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::deleteAllNodes((uint64_t)&v12, v3);
  if (v12) {
    WTF::fastFree((WTF *)(v12 - 16), v4);
  }
  for (uint64_t i = v11; i; uint64_t i = *(void *)(i + 16))
    WebKit::WebFrameProxy::webProcessWillShutDown(*(WebKit::WebFrameProxy **)i);
  WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::deleteAllNodes((uint64_t)&v14, v4);
  if (v14) {
    WTF::fastFree((WTF *)(v14 - 16), v6);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  uint64_t v8 = (WTF *)*((void *)this + 33);
  if (v8)
  {
    WebKit::WebFramePolicyListenerProxy::ignore(v8, 0);
    uint64_t v9 = *((void *)this + 33);
    *((void *)this + 33) = 0;
    if (v9) {
      CFRelease(*(CFTypeRef *)(v9 + 8));
    }
  }
  uint64_t v10 = *((void *)this + 53);
  if (v10)
  {
    *((void *)this + 53) = 0;
    LOBYTE(v16) = 0;
    LOBYTE(v17) = 0;
    (*(void (**)(uint64_t, void, void, long long *))(*(void *)v10 + 16))(v10, 0, 0, &v16);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
}

void WebKit::WebFrameProxy::navigateServiceWorkerClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v6 - 8));
    uint64_t v10 = *(void *)(a1 + 272);
    uint64_t v11 = *(void *)(a1 + 280);
    v23[0] = a2;
    v23[1] = a3;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v12 = *(WTF::StringImpl **)a3;
    if (*(void *)a3) {
      *(_DWORD *)v12 += 2;
    }
    long long v13 = *(_OWORD *)(a3 + 24);
    long long v20 = *(_OWORD *)(a3 + 8);
    long long v21 = v13;
    uint64_t v14 = *a4;
    *a4 = 0;
    uint64_t v15 = WTF::fastMalloc((WTF *)0x48);
    *(void *)uint64_t v15 = &unk_1EE9D8E40;
    *(void *)(v15 + 8) = a1;
    *(void *)(v15 + 16) = a1;
    if (v12) {
      *(_DWORD *)v12 += 2;
    }
    *(void *)(v15 + 24) = v12;
    long long v16 = v21;
    *(_OWORD *)(v15 + 32) = v20;
    *(_OWORD *)(v15 + 48) = v16;
    *(void *)(v15 + 64) = v14;
    uint64_t v22 = v15;
    v26[0] = v10;
    v26[1] = v11;
    char v27 = 1;
    v24[0] = v23;
    v24[1] = &v22;
    char v25 = 0;
    WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::NavigateServiceWorkerClient &&,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::NavigateServiceWorkerClient&)#1}>(v6 - 16, (uint64_t)v26, (uint64_t)v24);
    uint64_t v18 = v22;
    uint64_t v22 = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v17);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v6 - 8));
  }
  else
  {
    uint64_t v19 = *a4;
    *a4 = 0;
    LOBYTE(v20) = 0;
    LOBYTE(v21) = 0;
    (*(void (**)(uint64_t, void, void, long long *))(*(void *)v19 + 16))(v19, 0, 0, &v20);
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
}

void WebKit::WebFrameProxy::loadURL(WebKit::WebFrameProxy *this, const WTF::URL *a2, const WTF::String *a3)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      CFRetain(*(CFTypeRef *)(v4 - 8));
      long long v11 = *((_OWORD *)this + 17);
      v8[0] = a2;
      v8[1] = a3;
      char v12 = 1;
      v8[2] = (char *)this + 272;
      uint64_t v9 = v8;
      char v10 = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::LoadURLInFrame>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::LoadURLInFrame &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::LoadURLInFrame&)#1}>(v4 - 16, (uint64_t)&v11, (uint64_t)&v9);
      CFRelease(*(CFTypeRef *)(v4 - 8));
    }
  }
}

void WebKit::WebFrameProxy::loadData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v13[0] = a2;
  v13[1] = a3;
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      CFRetain(*(CFTypeRef *)(v7 - 8));
      long long v16 = *(_OWORD *)(a1 + 272);
      v12[0] = v13;
      v12[1] = a4;
      void v12[2] = a5;
      v12[3] = a6;
      v12[4] = a1 + 272;
      char v17 = 1;
      uint64_t v14 = v12;
      char v15 = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::LoadDataInFrame>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::LoadDataInFrame &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::LoadDataInFrame&)#1}>(v7 - 16, (uint64_t)&v16, (uint64_t)&v14);
      CFRelease(*(CFTypeRef *)(v7 - 8));
    }
  }
}

uint64_t WebKit::WebFrameProxy::isDisplayingMarkupDocument(WebKit::WebFrameProxy *this)
{
  uint64_t v1 = (void *)((char *)this + 224);
  if ((MEMORY[0x19972E990](*((void *)this + 28), "text/html", 9) & 1) != 0
    || (MEMORY[0x19972E990](*v1, "image/svg+xml", 13) & 1) != 0
    || (MEMORY[0x19972E990](*v1, "application/x-webarchive", 24) & 1) != 0)
  {
    return 1;
  }

  return MEMORY[0x1F416E938](v1);
}

WTF::StringImpl *WebKit::WebFrameProxy::didFailProvisionalLoad(WebKit::WebFrameProxy *this)
{
  uint64_t result = WebKit::FrameLoadState::didFailProvisionalLoad((WebKit::WebFrameProxy *)((char *)this + 40));
  uint64_t v3 = *((void *)this + 53);
  if (v3)
  {
    *((void *)this + 53) = 0;
    v4[0] = 0;
    v4[16] = 0;
    (*(void (**)(uint64_t, void, void, unsigned char *))(*(void *)v3 + 16))(v3, 0, 0, v4);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return result;
}

void WebKit::WebFrameProxy::didCommitLoad(WebKit::WebFrameProxy *this, WTF::StringImpl **a2, const void **a3, char a4)
{
  WebKit::FrameLoadState::didCommitLoad((WebKit::WebFrameProxy *)((char *)this + 40));
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  WTF::String::operator=((uint64_t *)this + 28, a2);
  char v10 = *a3;
  if (v10) {
    CFRetain(v10);
  }
  long long v11 = (const void *)*((void *)this + 32);
  *((void *)this + 32) = v10;
  if (v11) {
    CFRelease(v11);
  }
  *((unsigned char *)this + 248) = a4;
}

uint64_t WebKit::WebFrameProxy::didFinishLoad(WebKit::WebFrameProxy *this)
{
  uint64_t result = WebKit::FrameLoadState::didFinishLoad((WebKit::WebFrameProxy *)((char *)this + 40));
  uint64_t v3 = *((void *)this + 53);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4 && (uint64_t v4 = *(void *)(v4 + 8)) != 0)
    {
      uint64_t v4 = *(void *)(*(void *)(v4 + 16) + 1928);
      unint64_t v5 = v4 & 0xFFFFFFFFFFFFFF00;
      uint64_t v4 = v4;
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
      unint64_t v5 = 0;
    }
    *((void *)this + 53) = 0;
    long long v7 = *((_OWORD *)this + 17);
    char v8 = 1;
    (*(void (**)(uint64_t, unint64_t, uint64_t, long long *))(*(void *)v3 + 16))(v3, v5 | v4, v6, &v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return result;
}

uint64_t WebKit::WebFrameProxy::didFailLoad(uint64_t this)
{
  *(_DWORD *)(this + 40) = 2;
  uint64_t v1 = *(void *)(this + 424);
  if (v1)
  {
    *(void *)(this + 424) = 0;
    v2[0] = 0;
    v2[16] = 0;
    (*(void (**)(uint64_t, void, void, unsigned char *))(*(void *)v1 + 16))(v1, 0, 0, v2);
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  return this;
}

uint64_t WebKit::WebFrameProxy::setUpPolicyListenerProxy(uint64_t a1, uint64_t *a2, char a3, char a4, char a5)
{
  char v10 = *(WTF **)(a1 + 264);
  if (v10) {
    WebKit::WebFramePolicyListenerProxy::ignore(v10, 0);
  }
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v11 = *a2;
  *a2 = 0;
  char v12 = (void *)WTF::fastMalloc((WTF *)0x20);
  *char v12 = &unk_1EE9D8E68;
  v12[1] = a1;
  void v12[2] = a1;
  v12[3] = v11;
  char v17 = v12;
  uint64_t v13 = API::Object::newObject(0x48uLL, 61);
  uint64_t v14 = WebKit::WebFramePolicyListenerProxy::WebFramePolicyListenerProxy(v13, (uint64_t *)&v17, a3, a4, a5);
  uint64_t v15 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = v14;
  if (v15) {
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  if (v17) {
    (*(void (**)(void *))(*v17 + 8))(v17);
  }
  return *(void *)(a1 + 264);
}

void WebKit::WebFrameProxy::getWebArchive(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    WebKit::WebPageProxy::getWebArchiveOfFrame(v4 - 16, a1, a2);
    uint64_t v6 = *(const void **)(v4 - 8);
    CFRelease(v6);
  }
  else
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
    char v8 = *(void (**)(uint64_t))(*(void *)v7 + 8);
    v8(v7);
  }
}

void WebKit::WebFrameProxy::getMainResourceData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    WebKit::WebPageProxy::getMainResourceDataOfFrame(v4 - 16, a1, a2);
    uint64_t v6 = *(const void **)(v4 - 8);
    CFRelease(v6);
  }
  else
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
    char v8 = *(void (**)(uint64_t))(*(void *)v7 + 8);
    v8(v7);
  }
}

void WebKit::WebFrameProxy::getResourceData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    WebKit::WebPageProxy::getResourceDataFromFrame(v5 - 16, a1, a2, a3);
    char v8 = *(const void **)(v5 - 8);
    CFRelease(v8);
  }
  else
  {
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
    char v10 = *(void (**)(uint64_t))(*(void *)v9 + 8);
    v10(v9);
  }
}

uint64_t WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebKit::WebFrameProxy *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (WTF::StringImpl **)((char *)this + 328);
  uint64_t canHandleRequest = WebCore::ContentFilterUnblockHandler::canHandleRequest((WebKit::WebFrameProxy *)((char *)this + 328), a2);
  if (canHandleRequest)
  {
    uint64_t v5 = *((void *)this + 3);
    if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
    {
      uint64_t v7 = v6 - 16;
      CFRetain(*(CFTypeRef *)(v6 - 8));
      CFRetain(*(CFTypeRef *)(v6 - 8));
      char v8 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      char v8 = 1;
    }
    uint64_t v9 = (WTF::StringImpl *)operator new(0x10uLL);
    *(void *)uint64_t v9 = &unk_1EE9D8E90;
    *((void *)v9 + 1) = v7;
    v19[3] = v9;
    WebCore::ContentFilterUnblockHandler::requestUnblockAsync();
    std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:sn180100](v19);
    if ((v8 & 1) == 0) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
  else
  {
    long long v24 = 0u;
    *(_OWORD *)CFTypeRef cf = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    *(_OWORD *)long long v20 = 0u;
    long long v21 = 0u;
    WTF::URL::invalidate((WTF::URL *)&v20[1]);
    *((void *)&v24 + 1) = 0;
    cf[0] = 0;
    LOBYTE(cf[1]) = 0;
    v20[0] = 0;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    WTF::URL::operator=((uint64_t)this + 336, (uint64_t)&v20[1]);
    std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::operator=[abi:sn180100]((void *)this + 47, (uint64_t)&v23);
    CFTypeRef v12 = cf[0];
    cf[0] = 0;
    uint64_t v13 = (const void *)*((void *)this + 51);
    *((void *)this + 51) = v12;
    if (v13)
    {
      CFRelease(v13);
      CFTypeRef v14 = cf[0];
      *((unsigned char *)this + 416) = cf[1];
      cf[0] = 0;
      if (v14) {
        CFRelease(v14);
      }
    }
    else
    {
      *((unsigned char *)this + 416) = cf[1];
      cf[0] = 0;
    }
    std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::~__value_func[abi:sn180100](&v23);
    long long v16 = v20[1];
    v20[1] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    char v17 = v20[0];
    v20[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  return canHandleRequest;
}

void WebKit::WebFrameProxy::disconnect(WebKit::WebFrameProxy *this)
{
  uint64_t v1 = *((void *)this + 39);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 + 8));
      uint64_t v4 = (void *)(v2 + 288);
      char v10 = (uint64_t *)this;
      uint64_t v5 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WebKit::WebFrameProxy const*>((uint64_t *)(v2 + 288), &v10);
      uint64_t v6 = *(uint64_t ***)(v2 + 288);
      if (v6) {
        v6 += *((unsigned int *)v6 - 1);
      }
      if (v6 != v5)
      {
        uint64_t v7 = *v5;
        if (*v5)
        {
          char v10 = *v5;
          char v8 = (void *)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>>,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>((uint64_t *)(v2 + 288), &v10);
          uint64_t v9 = (void *)*v4;
          if (*v4) {
            v9 += *((unsigned int *)v9 - 1);
          }
          if (v9 != v8) {
            WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::remove((uint64_t *)(v2 + 288), v8);
          }
          WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::unlinkAndDelete(v2 + 288, (WTF *)v7);
        }
      }
      CFRelease(*(CFTypeRef *)(v2 + 8));
    }
  }
}

void WebKit::WebFrameProxy::didCreateSubframe(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (WebKit::WebFrameProxy::webFrame(a2, a3)) {
    return;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8 || (uint64_t v9 = *(void *)(v8 + 8)) == 0)
  {
    long long v22 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebFrameProxy::didCreateSubframe(WebCore::FrameIdentifier, const String &)";
      _os_log_fault_impl(&dword_1985F2000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebFrameProxy.cpp 413: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 32) + 16) + 144);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x198E38064);
    }
    *(unsigned char *)(v23 + 98) = 1;
    return;
  }
  CFRetain(*(CFTypeRef *)(v9 - 8));
  *(void *)&long long buf = a2;
  *((void *)&buf + 1) = a3;
  if (a3 == -1 || !(a3 | a2)) {
    goto LABEL_19;
  }
  {
    WebKit::allFrames(void)::map = 0;
    goto LABEL_30;
  }
  uint64_t v10 = WebKit::allFrames(void)::map;
  if (!WebKit::allFrames(void)::map) {
    goto LABEL_30;
  }
  int v11 = *(_DWORD *)(WebKit::allFrames(void)::map - 8);
  unsigned int v52 = -1640531527;
  __int16 v53 = 0;
  char v54 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v52, &buf);
  unsigned int v12 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v52) & v11;
  uint64_t v13 = (uint64_t *)(v10 + 24 * v12);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (*v13 == (void)buf && v15 == *((void *)&buf + 1))
  {
LABEL_19:
    long long v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebFrameProxy::didCreateSubframe(WebCore::FrameIdentifier, const String &)";
      _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebFrameProxy.cpp 414: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 32) + 16) + 144);
    if (!v21)
    {
      __break(0xC471u);
      JUMPOUT(0x198E380C4);
    }
LABEL_22:
    *(unsigned char *)(v21 + 98) = 1;
    goto LABEL_61;
  }
  int v17 = 1;
  while (v14 | v15)
  {
    unsigned int v12 = (v12 + v17) & v11;
    uint64_t v18 = (uint64_t *)(v10 + 24 * v12);
    uint64_t v14 = *v18;
    uint64_t v15 = v18[1];
    ++v17;
    if (v14 == (void)buf && v15 == *((void *)&buf + 1)) {
      goto LABEL_19;
    }
  }
LABEL_30:
  uint64_t v24 = *(void *)(a1 + 32);
  uint64_t v25 = *(void *)(v24 + 16);
  if (a3 != *(void *)(v25 + 176))
  {
    int64_t v51 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebFrameProxy::didCreateSubframe(WebCore::FrameIdentifier, const String &)";
      _os_log_fault_impl(&dword_1985F2000, v51, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebFrameProxy.cpp 415: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
      uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 16);
    }
    uint64_t v21 = *(void *)(v25 + 144);
    if (!v21)
    {
      __break(0xC471u);
      JUMPOUT(0x198E3834CLL);
    }
    goto LABEL_22;
  }
  uint64_t v26 = API::Object::newObject(0x1C8uLL, 59);
  WebKit::WebFrameProxy::WebFrameProxy(v26, v9 - 16, (_DWORD *)v24, a2, a3, 0);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1);
  uint64_t v28 = *(atomic_uint **)(a1 + 16);
  if (v28) {
    atomic_fetch_add(v28, 1u);
  }
  uint64_t v29 = *(unsigned int **)(v26 + 312);
  *(void *)(v26 + 312) = v28;
  if (v29 && atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v29);
    WTF::fastFree((WTF *)v29, v27);
  }
  WTF::String::operator=((uint64_t *)(v26 + 240), a4);
  WebKit::WebPageProxy::createRemoteSubframesInOtherProcesses((WebKit::WebPageProxy *)(v9 - 16), (WebKit::WebFrameProxy *)v26, (const WTF::String *)a4);
  uint64_t v30 = (uint64_t *)(a1 + 288);
  uint64_t v31 = *(void *)(a1 + 288);
  if (v31
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::expand((uint64_t *)(a1 + 288), 0), (uint64_t v31 = *v30) != 0))
  {
    int v32 = *(_DWORD *)(v31 - 8);
  }
  else
  {
    int v32 = 0;
  }
  unint64_t v33 = 0;
  unint64_t v34 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
  unint64_t v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
  unint64_t v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
  unsigned int v37 = (v36 >> 31) ^ v36;
  for (int i = 1; ; ++i)
  {
    unsigned int v39 = v37 & v32;
    unsigned int v40 = (void **)(v31 + 8 * v39);
    __int16 v41 = *v40;
    if (*v40 == (void *)-1)
    {
      unint64_t v33 = (void *)(v31 + 8 * v39);
      goto LABEL_45;
    }
    if (!v41) {
      break;
    }
    if (*v41 == v26)
    {
      CFRelease(*(CFTypeRef *)(v26 + 8));
      goto LABEL_61;
    }
LABEL_45:
    unsigned int v37 = i + v39;
  }
  if (v33)
  {
    *unint64_t v33 = 0;
    --*(_DWORD *)(*v30 - 16);
    unsigned int v40 = (void **)v33;
  }
  char v42 = (void *)WTF::fastMalloc((WTF *)0x18);
  v42[1] = 0;
  v42[2] = 0;
  *char v42 = v26;
  *unsigned int v40 = v42;
  uint64_t v43 = *v30;
  if (*v30) {
    int v44 = *(_DWORD *)(v43 - 12) + 1;
  }
  else {
    int v44 = 1;
  }
  *(_DWORD *)(v43 - 12) = v44;
  uint64_t v45 = *v30;
  if (*v30) {
    int v46 = *(_DWORD *)(v45 - 12);
  }
  else {
    int v46 = 0;
  }
  uint64_t v47 = (*(_DWORD *)(v45 - 16) + v46);
  unint64_t v48 = *(unsigned int *)(v45 - 4);
  if (v48 > 0x400)
  {
    if (v48 <= 2 * v47) {
LABEL_56:
    }
      char v42 = (void *)*WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::expand((uint64_t *)(a1 + 288), v40);
  }
  else if (3 * v48 <= 4 * v47)
  {
    goto LABEL_56;
  }
  uint64_t v49 = *(void *)(a1 + 304);
  v42[1] = v49;
  v42[2] = 0;
  if (v49) {
    int64_t v50 = (void *)(v49 + 16);
  }
  else {
    int64_t v50 = (void *)(a1 + 296);
  }
  *int64_t v50 = v42;
  *(void *)(a1 + 304) = v42;
LABEL_61:
  CFRelease(*(CFTypeRef *)(v9 - 8));
}

WTF::StringImpl *WebKit::WebFrameProxy::prepareForProvisionalLoadInProcess(uint64_t a1, atomic_uint *a2, uint64_t a3, WebKit::BrowsingContextGroup *a4, uint64_t *a5)
{
  if (*(unsigned char *)(a1 + 441))
  {
    uint64_t v6 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return (WTF::StringImpl *)v7(v6);
  }
  unsigned int v12 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a3 + 232));
  WebKit::Site::Site((WebKit::Site *)&v26, v12);
  uint64_t v13 = *(void *)(a1 + 24);
  if (v13 && (uint64_t v14 = *(void *)(v13 + 8)) != 0)
  {
    uint64_t v15 = v14 - 16;
    CFRetain(*(CFTypeRef *)(v14 - 8));
    char v16 = 0;
  }
  else
  {
    uint64_t v15 = 0;
    char v16 = 1;
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v25, (const WTF::URL *)(*(void *)(v15 + 328) + 48));
  std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100]((WebKit::ProvisionalFrameProxy **)(a1 + 320), 0);
  WebKit::BrowsingContextGroup::ensureProcessForSite(a4, (const WebKit::Site *)&v26, a2, *(const WebKit::WebPreferences **)(v15 + 272), &v24);
  int v17 = (atomic_uint **)WTF::fastMalloc((WTF *)0x18);
  WebKit::ProvisionalFrameProxy::ProvisionalFrameProxy(v17, a1, &v24);
  std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100]((WebKit::ProvisionalFrameProxy **)(a1 + 320), (WTF::StringImpl *)v17);
  if (v24) {
    WTF::RefCounted<WebKit::FrameProcess>::deref((WebKit::FrameProcess *)v24, v18);
  }
  uint64_t v19 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(v15 + 312));
  long long v20 = (unsigned int *)(v19 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v19 + 16), 1u);
  WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(v19, (uint64_t)a2, &v25, 0, a5);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v20);
  long long v22 = v25;
  uint64_t v25 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v21);
      if (v16) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    *(_DWORD *)v22 -= 2;
  }
  if ((v16 & 1) == 0) {
LABEL_15:
  }
    CFRelease(*(CFTypeRef *)(v15 + 8));
LABEL_16:
  uint64_t v23 = v27;
  char v27 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v21);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebFrameProxy::commitProvisionalFrame(WebKit::WebFrameProxy *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, uint64_t a11, __int16 a12, char a13, char a14, char a15, uint64_t a16)
{
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  if (*((void *)this + 40))
  {
    uint64_t v22 = *(void *)(*((void *)this + 4) + 16);
    atomic_fetch_add((atomic_uint *volatile)(v22 + 16), 1u);
    uint64_t v41 = *((void *)this + 54);
    char v42 = 1;
    uint64_t v43 = &v45;
    int v44 = (char *)&v41;
    unint64_t v23 = WebKit::WebFrameProxy::webPageIDInCurrentProcess(this);
    if (!v24) {
      goto LABEL_20;
    }
    uint64_t v25 = (WebKit::ProvisionalFrameProxy **)((char *)this + 320);
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadDidCommitInAnotherProcess>(v22, (uint64_t)&v43, v23, 0);
    if (v22) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v22 + 16));
    }
    uint64_t v26 = *v25;
    *uint64_t v25 = 0;
    std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100]((WebKit::ProvisionalFrameProxy **)this + 40, 0);
    uint64_t v27 = *((void *)v26 + 1);
    *((void *)v26 + 1) = 0;
    WebKit::ProvisionalFrameProxy::~ProvisionalFrameProxy(v26, v28);
    WTF::fastFree(v29, v30);
    if (!v27) {
      goto LABEL_13;
    }
    int v32 = (WebKit::FrameProcess *)*((void *)this + 4);
    *((void *)this + 4) = v27;
    if (v32) {
      WTF::RefCounted<WebKit::FrameProcess>::deref(v32, v31);
    }
    if (!*((unsigned char *)this + 452)) {
      goto LABEL_13;
    }
    uint64_t v33 = *(void *)(*((void *)this + 4) + 16);
    atomic_fetch_add((atomic_uint *volatile)(v33 + 16), 1u);
    if (!*((unsigned char *)this + 452)
      || (v43 = &v45, v44 = (char *)this + 444, unint64_t v34 = WebKit::WebFrameProxy::webPageIDInCurrentProcess(this), !v35))
    {
LABEL_20:
      __break(1u);
      return;
    }
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateFrameSize>(v33, (uint64_t)&v43, v34, 0);
    if (v33) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v33 + 16));
    }
  }
LABEL_13:
  char v36 = a13;
  uint64_t v37 = *((void *)this + 3);
  if (v37 && (uint64_t v38 = *(void *)(v37 + 8)) != 0)
  {
    uint64_t v39 = v38 - 16;
    CFRetain(*(CFTypeRef *)(v38 - 8));
    char v36 = a13;
  }
  else
  {
    uint64_t v39 = 0;
  }
  BYTE4(v40) = a15;
  BYTE3(v40) = a14;
  BYTE2(v40) = v36;
  LOWORD(v40) = a12;
  WebKit::WebPageProxy::didCommitLoadForFrame(v39, a2, v45, v46, a5, a6, a7, a8, a9, a10, a11, v40, a16);
  if (v39) {
    CFRelease(*(CFTypeRef *)(v39 + 8));
  }
}

unint64_t WebKit::WebFrameProxy::webPageIDInCurrentProcess(WebKit::WebFrameProxy *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2)
  {
    uint64_t v1 = 0;
LABEL_7:
    unint64_t v5 = 0;
    return v5 | v1;
  }
  uint64_t v3 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(v2 + 1400), (const WebKit::WebPageProxy *)(v2 - 16), *(const WebKit::WebProcessProxy **)(*((void *)this + 4) + 16));
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 16);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(v2 + 16) + 1928);
  }
  uint64_t v1 = *v4;
  unint64_t v5 = v1 & 0xFFFFFFFFFFFFFF00;
  uint64_t v1 = v1;
  return v5 | v1;
}

void *WebKit::WebFrameProxy::getFrameInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[36];
  if (v3) {
    unint64_t v4 = *(unsigned int *)(v3 - 12);
  }
  else {
    unint64_t v4 = 0;
  }
  uint64_t v5 = WTF::fastMalloc((WTF *)0x148);
  *(_DWORD *)uint64_t v5 = 1;
  uint64_t v6 = *a2;
  *a2 = 0;
  *(void *)(v5 + 8) = v6;
  *(_WORD *)(v5 + 16) = 0;
  uint64_t result = WebCore::ResourceRequest::ResourceRequest((StringImpl *)(v5 + 24));
  *(void *)(v5 + 224) = 0;
  *(void *)(v5 + 232) = 0;
  *(_DWORD *)(v5 + 248) = 0;
  *(void *)(v5 + 240) = 0;
  *(unsigned char *)(v5 + 296) = 0;
  *(_WORD *)(v5 + 308) = 0;
  *(void *)(v5 + 264) = 0;
  *(void *)(v5 + 272) = 0;
  *(void *)(v5 + 256) = 0;
  *(unsigned char *)(v5 + 280) = 0;
  LOBYTE(v46) = 0;
  char v53 = 0;
  *(void *)(v5 + 312) = 0;
  *(void *)(v5 + 320) = 0;
  *(_DWORD *)(v5 + 324) = v4;
  if (v4)
  {
    if (v4 >= 0xCCCCCD)
    {
      __break(0xC471u);
      goto LABEL_34;
    }
    uint64_t v9 = WTF::fastMalloc((WTF *)(320 * v4));
    *(_DWORD *)(v5 + 320) = 320 * (int)v4 / 0x140u;
    *(void *)(v5 + 312) = v9;
    uint64_t v10 = *(unsigned int *)(v5 + 324);
    if (v10)
    {
      uint64_t v11 = v9;
      uint64_t v12 = 0;
      uint64_t v13 = 320 * v10;
      do
      {
        uint64_t v14 = v11 + v12;
        *(unsigned char *)uint64_t v14 = 0;
        *(unsigned char *)(v14 + 312) = 0;
        if (v53)
        {
          *(_WORD *)uint64_t v14 = (_WORD)v46;
          WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v14 + 8), (const String *)v47);
          *(unsigned char *)(v14 + 208) = 0;
          *(_DWORD *)(v14 + 232) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v14 + 208, (uint64_t)&v48);
          uint64_t v15 = v49;
          if (v49) {
            *v49 += 2;
          }
          uint64_t v16 = v11 + v12;
          *(void *)(v16 + 240) = v15;
          uint64_t v17 = v11 + v12 + 248;
          long long v18 = v50;
          long long v19 = v51[0];
          *(_OWORD *)(v17 + 30) = *(_OWORD *)((char *)v51 + 14);
          *(_OWORD *)(v17 + 16) = v19;
          *(_OWORD *)(v16 + 248) = v18;
          WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v11 + v12 + 296, &v52);
          *(unsigned char *)(v14 + 312) = 1;
        }
        v12 += 320;
      }
      while (v13 != v12);
    }
  }
  std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46, v8);
  uint64_t v44 = v5;
  uint64_t v20 = *(void *)(a1[4] + 16);
  atomic_fetch_add((atomic_uint *volatile)(v20 + 16), 1u);
  ++*(_DWORD *)v5;
  uint64_t result = (void *)WebKit::WebFrameProxy::webPageIDInCurrentProcess((WebKit::WebFrameProxy *)a1);
  if (!v21)
  {
LABEL_34:
    __break(1u);
    return result;
  }
  uint64_t v22 = result;
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2261;
  *((void *)v23 + 1) = v22;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  uint64_t v45 = v23;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v23, a1 + 34);
  uint64_t v43 = 0;
  char v24 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v24 = &unk_1EE9D8ED8;
  v24[1] = v5;
  uint64_t v46 = 0;
  WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(&v46);
  uint64_t v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v46 = v24;
  *(void *)uint64_t v47 = v25;
  v47[8] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v20, &v45, 0, (uint64_t)&v46, 1);
  if (v47[8])
  {
    uint64_t v27 = v46;
    uint64_t v46 = 0;
    if (v27) {
      (*(void (**)(void *))(*v27 + 8))(v27);
    }
  }
  uint64_t v28 = v45;
  uint64_t v45 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v26);
    WTF::fastFree(v40, v41);
  }
  WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(&v43);
  if (v20) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v20 + 16));
  }
  uint64_t v30 = a1[3];
  if (v30 && (uint64_t v31 = *(void *)(v30 + 8)) != 0)
  {
    uint64_t v32 = *(void *)(v31 + 256);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    char BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v32 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v29);
  }
  else
  {
    char BoolValueForKey = 0;
  }
  unint64_t v34 = (void *)a1[37];
  if (v34)
  {
    uint64_t v35 = 0;
    do
    {
      uint64_t v36 = *v34;
      CFRetain(*(CFTypeRef *)(*v34 + 8));
      ++*(_DWORD *)v5;
      uint64_t v46 = (void *)v5;
      *(void *)uint64_t v47 = v35;
      *(_OWORD *)&v47[8] = *((_OWORD *)a1 + 17);
      v47[24] = BoolValueForKey;
      uint64_t v37 = WTF::fastMalloc((WTF *)0x30);
      *(void *)uint64_t v37 = &unk_1EE9D8F00;
      uint64_t v38 = v46;
      uint64_t v45 = (IPC::Encoder *)v37;
      uint64_t v46 = 0;
      *(void *)(v37 + 8) = v38;
      long long v39 = *(_OWORD *)&v47[9];
      *(_OWORD *)(v37 + 16) = *(_OWORD *)v47;
      *(_OWORD *)(v37 + 25) = v39;
      WebKit::WebFrameProxy::getFrameInfo(v36, &v45);
      if (v45) {
        (*(void (**)(IPC::Encoder *))(*(void *)v45 + 8))(v45);
      }
      WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(&v46);
      CFRelease(*(CFTypeRef *)(v36 + 8));
      unint64_t v34 = (void *)v34[2];
      ++v35;
    }
    while (v34);
  }
  return WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(&v44);
}

void *WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(void *result)
{
  uint64_t v1 = result;
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *result;
  *uint64_t result = 0;
  if (!v2) {
    return v1;
  }
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return v1;
  }
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  unsigned int v3 = *(_DWORD *)(v2 + 324);
  if (!v3) {
    goto LABEL_20;
  }
  if (v3 < 0xD20D21)
  {
    LODWORD(v67) = 312 * v3 / 0x138;
    uint64_t v66 = WTF::fastMalloc((WTF *)(312 * v3));
    uint64_t v5 = *(unsigned int *)(v2 + 324);
    if (v5)
    {
      uint64_t v65 = v1;
      unsigned int v6 = 0;
      uint64_t v7 = *(void *)(v2 + 312);
      uint64_t v8 = 320 * v5;
      do
      {
        LOBYTE(v97) = 0;
        char v125 = 0;
        if (*(unsigned char *)(v7 + 312))
        {
          std::construct_at[abi:sn180100]<WebKit::FrameTreeNodeData,WebKit::FrameTreeNodeData,WebKit::FrameTreeNodeData*>(&v97, v7);
          char v125 = 1;
          __int16 v69 = v97;
          uint64_t v9 = v98;
          uint64_t v98 = 0;
          uint64_t v70 = v9;
          long long v71 = v99;
          long long v72 = v100;
          LODWORD(v99) = v99 & 0xFFFFFFFE;
          uint64_t v10 = v101;
          uint64_t v101 = 0;
          uint64_t v73 = v10;
          long long v74 = v102;
          long long v75 = v103;
          LODWORD(v102) = v102 & 0xFFFFFFFE;
          uint64_t v76 = v104;
          long long v11 = v105;
          long long v105 = 0u;
          long long v77 = v11;
          *(void *)&long long v11 = v106;
          uint64_t v106 = 0;
          uint64_t v78 = v11;
          uint64_t v12 = v107;
          uint64_t v107 = 0;
          uint64_t v79 = v12;
          *(void *)&long long v11 = v108;
          uint64_t v108 = 0;
          uint64_t v80 = v11;
          uint64_t v13 = v109;
          uint64_t v109 = 0;
          uint64_t v81 = v13;
          *(void *)&long long v11 = v110;
          uint64_t v110 = 0;
          uint64_t v82 = v11;
          char v84 = v112;
          int v83 = v111;
          long long v14 = v113;
          long long v113 = 0u;
          long long v85 = v14;
          char v88 = v116;
          uint64_t v87 = v115;
          uint64_t v15 = v114;
          CFTypeRef v16 = v117;
          uint64_t v114 = 0;
          CFTypeRef v117 = 0;
          uint64_t v86 = v15;
          CFTypeRef cf = v16;
          v90[0] = 0;
          int v91 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v90, (uint64_t)v118);
          long long v93 = v121;
          v94[0] = v122[0];
          *(_OWORD *)((char *)v94 + 14) = *(_OWORD *)((char *)v122 + 14);
          uint64_t v17 = v120;
          uint64_t v18 = v123;
          v120 = 0;
          uint64_t v123 = 0;
          v92 = v17;
          uint64_t v95 = v18;
          uint64_t v19 = v124;
          uint64_t v124 = 0;
          uint64_t v96 = v19;
          uint64_t v20 = v66 + 312 * HIDWORD(v67);
          *(_WORD *)uint64_t v20 = v69;
          WTF::URL::URL(v20 + 8, &v70);
          WTF::URL::URL(v20 + 48, &v73);
          *(void *)(v20 + 88) = v76;
          uint64_t v21 = v77;
          *(void *)&long long v77 = 0;
          *(void *)(v20 + 96) = v21;
          *(_OWORD *)(v20 + 104) = 0u;
          uint64_t v22 = *((void *)&v77 + 1);
          *((void *)&v77 + 1) = 0;
          *(void *)(v20 + 104) = v22;
          LODWORD(v22) = v78;
          LODWORD(v78) = 0;
          *(_DWORD *)(v20 + 112) = v22;
          LODWORD(v22) = HIDWORD(v78);
          HIDWORD(v78) = 0;
          *(_DWORD *)(v20 + 116) = v22;
          *(_OWORD *)(v20 + 120) = 0u;
          uint64_t v23 = v79;
          uint64_t v79 = 0;
          *(void *)(v20 + 120) = v23;
          LODWORD(v23) = v80;
          LODWORD(v80) = 0;
          *(_DWORD *)(v20 + 128) = v23;
          LODWORD(v23) = HIDWORD(v80);
          HIDWORD(v80) = 0;
          *(_DWORD *)(v20 + 132) = v23;
          *(_OWORD *)(v20 + 136) = 0u;
          uint64_t v24 = v81;
          uint64_t v81 = 0;
          *(void *)(v20 + 136) = v24;
          LODWORD(v24) = v82;
          LODWORD(v82) = 0;
          *(_DWORD *)(v20 + 144) = v24;
          LODWORD(v24) = HIDWORD(v82);
          HIDWORD(v82) = 0;
          *(_DWORD *)(v20 + 148) = v24;
          LOBYTE(v24) = v84;
          *(_DWORD *)(v20 + 152) = v83;
          *(unsigned char *)(v20 + 156) = v24;
          uint64_t v25 = v85;
          *(void *)&long long v85 = 0;
          *(void *)(v20 + 160) = v25;
          uint64_t v26 = *((void *)&v85 + 1);
          *((void *)&v85 + 1) = 0;
          *(void *)(v20 + 168) = v26;
          uint64_t v27 = v86;
          uint64_t v86 = 0;
          *(void *)(v20 + 176) = v27;
          LOBYTE(v27) = v88;
          *(void *)(v20 + 184) = v87;
          *(unsigned char *)(v20 + 192) = v27;
          CFTypeRef v28 = cf;
          CFTypeRef cf = 0;
          *(unsigned char *)(v20 + 208) = 0;
          v20 += 208;
          *(void *)(v20 - 8) = v28;
          *(_DWORD *)(v20 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v20, (uint64_t)v90);
          uint64_t v29 = v92;
          v92 = 0;
          *(void *)(v20 + 32) = v29;
          long long v30 = v93;
          long long v31 = v94[0];
          *(_OWORD *)(v20 + 70) = *(_OWORD *)((char *)v94 + 14);
          *(_OWORD *)(v20 + 56) = v31;
          *(_OWORD *)(v20 + 40) = v30;
          *(_OWORD *)(v20 + 88) = 0u;
          uint64_t v32 = v95;
          uint64_t v95 = 0;
          *(void *)(v20 + 88) = v32;
          LODWORD(v32) = v96;
          LODWORD(v96) = 0;
          *(_DWORD *)(v20 + 96) = v32;
          LODWORD(v32) = HIDWORD(v96);
          HIDWORD(v96) = 0;
          *(_DWORD *)(v20 + 100) = v32;
          unsigned int v6 = ++HIDWORD(v67);
          WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v33);
          uint64_t v35 = v92;
          v92 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2) {
              WTF::StringImpl::destroy(v35, v34);
            }
            else {
              *(_DWORD *)v35 -= 2;
            }
          }
          if (v91 != -1) {
            ((void (*)(char *, unsigned char *))off_1EE9D8DF8[v91])(&v68, v90);
          }
          int v91 = -1;
          CFTypeRef v36 = cf;
          CFTypeRef cf = 0;
          if (v36) {
            CFRelease(v36);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v70);
        }
        std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v97, v4);
        v7 += 320;
        v8 -= 320;
      }
      while (v8);
      unint64_t v37 = v6;
      uint64_t v1 = v65;
      goto LABEL_21;
    }
LABEL_20:
    unint64_t v37 = 0;
LABEL_21:
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v66, v37);
    __int16 v97 = *(_WORD *)(v2 + 16);
    WTF::URL::URL((uint64_t)&v98, (uint64_t *)(v2 + 24));
    WTF::URL::URL((uint64_t)&v101, (uint64_t *)(v2 + 64));
    uint64_t v104 = *(void *)(v2 + 104);
    long long v38 = *(_OWORD *)(v2 + 112);
    *(_OWORD *)(v2 + 112) = 0u;
    long long v105 = v38;
    *(void *)&long long v38 = *(void *)(v2 + 128);
    *(void *)(v2 + 128) = 0;
    uint64_t v106 = v38;
    uint64_t v39 = *(void *)(v2 + 136);
    *(void *)(v2 + 136) = 0;
    uint64_t v107 = v39;
    *(void *)&long long v38 = *(void *)(v2 + 144);
    *(void *)(v2 + 144) = 0;
    uint64_t v108 = v38;
    uint64_t v40 = *(void *)(v2 + 152);
    *(void *)(v2 + 152) = 0;
    uint64_t v109 = v40;
    *(void *)&long long v38 = *(void *)(v2 + 160);
    *(void *)(v2 + 160) = 0;
    uint64_t v110 = v38;
    char v112 = *(unsigned char *)(v2 + 172);
    int v111 = *(_DWORD *)(v2 + 168);
    long long v41 = *(_OWORD *)(v2 + 176);
    *(_OWORD *)(v2 + 176) = 0u;
    long long v113 = v41;
    uint64_t v42 = *(void *)(v2 + 192);
    uint64_t v43 = *(void *)(v2 + 200);
    *(void *)(v2 + 192) = 0;
    uint64_t v114 = v42;
    uint64_t v115 = v43;
    char v116 = *(unsigned char *)(v2 + 208);
    uint64_t v44 = *(const void **)(v2 + 216);
    *(void *)(v2 + 216) = 0;
    CFTypeRef v117 = v44;
    v118[0] = 0;
    int v119 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v118, v2 + 224);
    uint64_t v45 = *(WTF::StringImpl **)(v2 + 256);
    *(void *)(v2 + 256) = 0;
    long long v46 = *(_OWORD *)(v2 + 280);
    long long v47 = *(_OWORD *)(v2 + 264);
    *(_OWORD *)((char *)v122 + 14) = *(_OWORD *)(v2 + 294);
    v122[0] = v46;
    long long v121 = v47;
    uint64_t v48 = v66;
    uint64_t v66 = 0;
    v120 = v45;
    uint64_t v123 = v48;
    *(void *)&long long v46 = v67;
    uint64_t v67 = 0;
    uint64_t v124 = v46;
    uint64_t v49 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    (*(void (**)(uint64_t, __int16 *))(*(void *)v49 + 16))(v49, &v97);
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v123, v50);
    uint64_t v52 = v120;
    v120 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2) {
        WTF::StringImpl::destroy(v52, v51);
      }
      else {
        *(_DWORD *)v52 -= 2;
      }
    }
    if (v119 != -1) {
      ((void (*)(__int16 *, unsigned char *))off_1EE9D8DF8[v119])(&v69, v118);
    }
    int v119 = -1;
    CFTypeRef v53 = v117;
    CFTypeRef v117 = 0;
    if (v53) {
      CFRelease(v53);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v98);
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v54);
    uint64_t v56 = *(unsigned int *)(v2 + 324);
    if (v56)
    {
      uint64_t v57 = *(void *)(v2 + 312);
      uint64_t v58 = 320 * v56;
      do
      {
        uint64_t v57 = std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100](v57, v55)+ 320;
        v58 -= 320;
      }
      while (v58);
    }
    unint64_t v59 = *(WTF **)(v2 + 312);
    if (v59)
    {
      *(void *)(v2 + 312) = 0;
      *(_DWORD *)(v2 + 320) = 0;
      WTF::fastFree(v59, v55);
    }
    v60 = *(WTF::StringImpl **)(v2 + 256);
    *(void *)(v2 + 256) = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2) {
        WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v55);
      }
      else {
        *(_DWORD *)v60 -= 2;
      }
    }
    uint64_t v61 = *(unsigned int *)(v2 + 248);
    if (v61 != -1) {
      ((void (*)(__int16 *, uint64_t))off_1EE9D8DF8[v61])(&v97, v2 + 224);
    }
    *(_DWORD *)(v2 + 248) = -1;
    unint64_t v62 = *(const void **)(v2 + 216);
    *(void *)(v2 + 216) = 0;
    if (v62) {
      CFRelease(v62);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v2 + 24));
    uint64_t v64 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v64) {
      (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
    }
    WTF::fastFree((WTF *)v2, v63);
    return v1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebFrameProxy::frameTreeCreationParameters@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = this;
  *(_OWORD *)a2 = *(_OWORD *)(this + 272);
  unint64_t v4 = *(_DWORD **)(this + 240);
  if (v4) {
    *v4 += 2;
  }
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = v4;
  uint64_t v5 = *(void *)(this + 288);
  if (v5 && (uint64_t v6 = *(unsigned int *)(v5 - 12), v6))
  {
    if (v6 >= 0x6666667)
    {
      __break(0xC471u);
      return this;
    }
    int v7 = 40 * v6;
    this = WTF::fastMalloc((WTF *)(40 * v6));
    uint64_t v8 = this;
    *(_DWORD *)(a2 + 32) = (v7 & 0xFFFFFFF8) / 0x28;
    *(void *)(a2 + 24) = this;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(v2 + 296);
  if (v9)
  {
    int v10 = 1;
    do
    {
      WebKit::WebFrameProxy::frameTreeCreationParameters((uint64_t *)&v16, *(WebKit::WebFrameProxy **)v9);
      uint64_t v11 = v8 + 40 * (v10 - 1);
      *(_OWORD *)uint64_t v11 = v16;
      uint64_t v12 = v17;
      uint64_t v17 = 0;
      *(void *)(v11 + 16) = v12;
      *(void *)(v11 + 32) = 0;
      uint64_t v13 = v18;
      uint64_t v18 = 0;
      *(void *)(v11 + 24) = v13;
      LODWORD(v13) = v19;
      int v19 = 0;
      *(_DWORD *)(v11 + 32) = v13;
      LODWORD(v13) = v20;
      int v20 = 0;
      *(_DWORD *)(v11 + 36) = v13;
      *(_DWORD *)(a2 + 36) = v10;
      WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v14);
      this = (uint64_t)v17;
      uint64_t v17 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2) {
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v15);
        }
        else {
          *(_DWORD *)this -= 2;
        }
      }
      uint64_t v9 = *(void *)(v9 + 16);
      ++v10;
    }
    while (v9);
  }
  return this;
}

uint64_t WebKit::WebFrameProxy::removeChildFrames(WebKit::WebFrameProxy *this, void *a2)
{
  unsigned int v3 = (void *)((char *)this + 288);
  uint64_t result = WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::deleteAllNodes((uint64_t)this + 288, a2);
  uint64_t v6 = *((void *)this + 36);
  if (v6)
  {
    *unsigned int v3 = 0;
    uint64_t result = WTF::fastFree((WTF *)(v6 - 16), v5);
  }
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  return result;
}

void WebKit::WebFrameProxy::remoteProcessDidTerminate(WebKit::WebFrameProxy *this, WebKit::WebProcessProxy *a2)
{
  for (int i = (CFTypeRef **)*((void *)this + 37); i; int i = (CFTypeRef **)i[2])
  {
    uint64_t v5 = *i;
    CFRetain((*i)[1]);
    WebKit::WebFrameProxy::remoteProcessDidTerminate((WebKit::WebFrameProxy *)v5, a2);
    CFRelease(v5[1]);
  }
  uint64_t v6 = *(void *)(*((void *)this + 4) + 16);
  if (*((void *)a2 + 22) == *(void *)(v6 + 176) && *((_DWORD *)this + 10) != 2)
  {
    int v7 = (unsigned int *)(v6 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
    WebKit::WebFrameProxy::notifyParentOfLoadCompletion(this, (WebKit::WebProcessProxy *)v6);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  }
}

void WebKit::WebFrameProxy::notifyParentOfLoadCompletion(WebKit::WebFrameProxy *this, WebKit::WebProcessProxy *a2)
{
  uint64_t v2 = *((void *)this + 39);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 + 8));
      unint64_t v6 = WebKit::WebFrameProxy::webPageIDInCurrentProcess((WebKit::WebFrameProxy *)v3);
      if (v7)
      {
        uint64_t v8 = v6;
        uint64_t v9 = *(void *)(*(void *)(v3 + 32) + 16);
        int v10 = (unsigned int *)(v9 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
        if (*(void *)(v9 + 176) != *((void *)a2 + 22))
        {
          long long v11 = *((_OWORD *)this + 17);
          uint64_t v12 = &v11;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidFinishLoadInAnotherProcess>(v9, (uint64_t **)&v12, v8, 0);
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
      }
      CFRelease(*(CFTypeRef *)(v3 + 8));
    }
  }
}

void WebKit::WebFrameProxy::traverseNext(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (WebKit::WebFrameProxy *)this;
  unint64_t v4 = this[36];
  if (v4)
  {
    if (*((_DWORD *)v4 - 3))
    {
      uint64_t v5 = *this[37];
      if (v5)
      {
LABEL_6:
        CFRetain(*(CFTypeRef *)(v5 + 8));
        *(void *)a2 = v5;
LABEL_7:
        *(unsigned char *)(a2 + 8) = 0;
        return;
      }
    }
  }
  uint64_t Sibling = WebKit::WebFrameProxy::nextSibling((WebKit::WebFrameProxy *)this);
  if (Sibling)
  {
    uint64_t v5 = Sibling;
    goto LABEL_6;
  }
  CFRetain(*((CFTypeRef *)v2 + 1));
  do
  {
    uint64_t v7 = *((void *)v2 + 39);
    if (!v7 || (uint64_t v8 = *(CFTypeRef **)(v7 + 8)) == 0)
    {
      CFRelease(*((CFTypeRef *)v2 + 1));
      *(void *)a2 = 0;
      goto LABEL_7;
    }
    CFRetain(v8[1]);
    CFRelease(*((CFTypeRef *)v2 + 1));
    uint64_t v9 = WebKit::WebFrameProxy::nextSibling((WebKit::WebFrameProxy *)v8);
    uint64_t v2 = (WebKit::WebFrameProxy *)v8;
  }
  while (!v9);
  uint64_t v10 = v9;
  CFRetain(*(CFTypeRef *)(v9 + 8));
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  CFTypeRef v11 = v8[1];

  CFRelease(v11);
}

uint64_t WebKit::WebFrameProxy::nextSibling(WebKit::WebFrameProxy *this)
{
  uint64_t v1 = *((void *)this + 39);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2 || **(WebKit::WebFrameProxy ***)(v2 + 304) == this) {
    return 0;
  }
  unint64_t v6 = this;
  uint64_t v3 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WebKit::WebFrameProxy const*>((uint64_t *)(v2 + 288), &v6);
  uint64_t v4 = *(void *)(v2 + 288);
  if (v4) {
    v4 += 8 * *(unsigned int *)(v4 - 4);
  }
  if (v4 != v3 && *(void *)v3) {
    return **(void **)(*(void *)v3 + 16);
  }
  else {
    return 0;
  }
}

void WebKit::WebFrameProxy::traverseNext(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  WebKit::WebFrameProxy::traverseNext((uint64_t **)a1, (uint64_t)&v9);
  uint64_t v6 = v9;
  if (v9) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = a2 == 0;
  }
  if (v7)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 24);
    if (v8 && (uint64_t v8 = *(void *)(v8 + 8)) != 0)
    {
      uint64_t v6 = *(void *)(v8 + 312);
      if (v6) {
        CFRetain(*(CFTypeRef *)(v6 + 8));
      }
      LOBYTE(v8) = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 8) = v8;
}

void WebKit::WebFrameProxy::traversePrevious(WebKit::WebFrameProxy *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = WebKit::WebFrameProxy::previousSibling(a1);
  if (v6)
  {
    uint64_t v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    Child = WebKit::WebFrameProxy::deepLastChild((CFTypeRef *)v7);
    uint64_t v9 = Child;
    if (Child) {
      CFRetain(Child[1]);
    }
    *(void *)a3 = v9;
    *(unsigned char *)(a3 + 8) = 0;
    uint64_t v10 = *(const void **)(v7 + 8);
    CFRelease(v10);
    return;
  }
  uint64_t v11 = *((void *)a1 + 39);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12)
    {
      CFRetain(*(CFTypeRef *)(v12 + 8));
      *(void *)a3 = v12;
LABEL_15:
      *(unsigned char *)(a3 + 8) = 0;
      return;
    }
  }
  if (!a2)
  {
    *(void *)a3 = 0;
    goto LABEL_15;
  }
  uint64_t v13 = WebKit::WebFrameProxy::deepLastChild((CFTypeRef *)a1);
  long long v14 = v13;
  if (v13) {
    CFRetain(v13[1]);
  }
  *(void *)a3 = v14;
  *(unsigned char *)(a3 + 8) = 1;
}

uint64_t WebKit::WebFrameProxy::previousSibling(WebKit::WebFrameProxy *this)
{
  uint64_t v1 = *((void *)this + 39);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2 || **(WebKit::WebFrameProxy ***)(v2 + 296) == this) {
    return 0;
  }
  uint64_t v6 = this;
  uint64_t v3 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WebKit::WebFrameProxy const*>((uint64_t *)(v2 + 288), &v6);
  uint64_t v4 = *(void *)(v2 + 288);
  if (v4) {
    v4 += 8 * *(unsigned int *)(v4 - 4);
  }
  if (v4 != v3 && *(void *)v3) {
    return **(void **)(*(void *)v3 + 8);
  }
  else {
    return 0;
  }
}

CFTypeRef *WebKit::WebFrameProxy::deepLastChild(CFTypeRef *this)
{
  uint64_t v1 = this;
  if (this) {
    CFRetain(this[1]);
  }
  uint64_t v2 = v1[36];
  if (v2)
  {
    if (*(v2 - 3))
    {
      uint64_t v3 = *(CFTypeRef **)v1[38];
      if (v3)
      {
        uint64_t v4 = v3 + 1;
        CFRetain(v3[1]);
        CFRetain(v3[1]);
        CFRelease(v1[1]);
        uint64_t v5 = v3[36];
        if (v5)
        {
          while (*(v5 - 3))
          {
            uint64_t v1 = *(CFTypeRef **)v3[38];
            if (!v1) {
              break;
            }
            CFRetain(v1[1]);
            CFRelease(*v4);
            CFRetain(v1[1]);
            CFRelease(v3[1]);
            uint64_t v5 = v1[36];
            uint64_t v4 = v1 + 1;
            uint64_t v3 = v1;
            if (!v5) {
              goto LABEL_12;
            }
          }
        }
        uint64_t v1 = v3;
LABEL_12:
        CFRelease(v1[1]);
      }
    }
  }
  CFRelease(v1[1]);
  return v1;
}

CFTypeRef *WebKit::WebFrameProxy::rootFrame(CFTypeRef *this)
{
  CFRetain(this[1]);
  CFTypeRef v2 = this[39];
  if (v2)
  {
    uint64_t v3 = this;
    while (1)
    {
      uint64_t v4 = (CFTypeRef *)*((void *)v2 + 1);
      if (!v4 || *(void *)(*((void *)v4[4] + 2) + 176) != *(void *)(*((void *)this[4] + 2) + 176)) {
        break;
      }
      CFRetain(v4[1]);
      CFRelease(v3[1]);
      CFTypeRef v2 = v4[39];
      uint64_t v3 = v4;
      if (!v2) {
        goto LABEL_9;
      }
    }
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = this;
  }
LABEL_9:
  CFRelease(v4[1]);
  return v4;
}

void WebKit::WebFullScreenManagerProxy::~WebFullScreenManagerProxy(WebKit::WebFullScreenManagerProxy *this)
{
  *(void *)this = &unk_1EE9D8C90;
  IPC::MessageReceiverMap::removeMessageReceiver(*(void *)(*((void *)this + 3) + 256) + 152, 0xABu, *(void *)(*(void *)(*((void *)this + 3) + 32) + 1928));
  (*(void (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
  WebKit::WebFullScreenManagerProxy::callCloseCompletionHandlers(this, v2);
  uint64_t v4 = (unsigned int *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, v3);
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebFullScreenManagerProxy::~WebFullScreenManagerProxy(this);
  if (*((_DWORD *)v1 + 4))
  {
    *((_OWORD *)v1 + 3) = 0u;
    *((_OWORD *)v1 + 4) = 0u;
    *((_OWORD *)v1 + 1) = 0u;
    *((_OWORD *)v1 + 2) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
  }
  else
  {
    WTF::fastFree(v1, v2);
  }
}

uint64_t WebKit::WebFullScreenManagerProxy::callCloseCompletionHandlers(WebKit::WebFullScreenManagerProxy *this, void *a2)
{
  CFTypeRef v2 = (void *)*((void *)this + 6);
  uint64_t v8 = v2;
  int v4 = *((_DWORD *)this + 14);
  uint64_t v3 = *((unsigned int *)this + 15);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  int v9 = v4;
  int v10 = v3;
  if (v3)
  {
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v2;
      *v2++ = 0;
      (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, a2);
}

uint64_t WebKit::WebFullScreenManagerProxy::willEnterFullScreen(WebKit::WebFullScreenManagerProxy *this, int a2)
{
  int v9 = a2;
  uint64_t v3 = *((void *)this + 8);
  int v4 = (int *)*((void *)this + 9);
  v8[0] = (int *)"WebFullScreenManagerProxy";
  v8[1] = (int *)26;
  v8[2] = (int *)"willEnterFullScreen";
  void v8[3] = v4;
  if (*(unsigned char *)(v3 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  }
  *((unsigned char *)this + 40) = 1;
  (*(void (**)(void))(**(void **)(*((void *)this + 3) + 416) + 24))(*(void *)(*((void *)this + 3) + 416));
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *(void *)(v5 + 256);
  v8[0] = &v9;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::WillEnterFullScreen>(v6, v8, *(void *)(*(void *)(v5 + 32) + 1928), 0);
}

void *WebKit::WebFullScreenManagerProxy::didEnterFullScreen(WebKit::WebFullScreenManagerProxy *this)
{
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = *((void *)this + 9);
  v9[0] = "WebFullScreenManagerProxy";
  v9[1] = 26;
  v9[2] = "didEnterFullScreen";
  v9[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
  }
  *((unsigned char *)this + 40) = 2;
  (*(void (**)(void))(**(void **)(*((void *)this + 3) + 416) + 32))(*(void *)(*((void *)this + 3) + 416));
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *(void *)(v4 + 256);
  LOBYTE(v9[0]) = 0;
  uint64_t result = (void *)WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::DidEnterFullScreen>(v5, (uint64_t)v9, *(void *)(*(void *)(v4 + 32) + 1928), 0);
  uint64_t v7 = *((void *)this + 3);
  if (*(unsigned char *)(v7 + 898))
  {
    uint64_t result = (void *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(v7 + 48) + 24));
    uint64_t v8 = result[40];
    if (v8)
    {
      uint64_t result = *(void **)(v8 + 216);
      if (result) {
        return (void *)(*(uint64_t (**)(void *, void))(*result + 16))(result, 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebFullScreenManagerProxy::willExitFullScreen(WebKit::WebFullScreenManagerProxy *this)
{
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = *((void *)this + 9);
  v7[0] = "WebFullScreenManagerProxy";
  v7[1] = 26;
  void v7[2] = "willExitFullScreen";
  v7[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v7);
  }
  *((unsigned char *)this + 40) = 3;
  (*(void (**)(void))(**(void **)(*((void *)this + 3) + 416) + 40))(*(void *)(*((void *)this + 3) + 416));
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *(void *)(v4 + 256);
  LOBYTE(v7[0]) = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::WillExitFullScreen>(v5, (uint64_t)v7, *(void *)(*(void *)(v4 + 32) + 1928), 0);
}

uint64_t WebKit::WebFullScreenManagerProxy::closeWithCallback(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t *)a2;
  uint64_t v4 = (void *)(a1 + 48);
  uint64_t v5 = *(unsigned int *)(a1 + 60);
  if (v5 == *(_DWORD *)(a1 + 56))
  {
    uint64_t v2 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v5 + 1, a2);
    uint64_t v5 = *(unsigned int *)(a1 + 60);
    uint64_t v6 = (void *)(*(void *)(a1 + 48) + 8 * v5);
  }
  else
  {
    uint64_t v6 = (void *)(*v4 + 8 * v5);
  }
  uint64_t v7 = *v2;
  *uint64_t v2 = 0;
  void *v6 = v7;
  *(_DWORD *)(a1 + 60) = v5 + 1;
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 32) + 16);

  return v8();
}

uint64_t WebKit::WebFullScreenManagerProxy::didExitFullScreen(WebKit::WebFullScreenManagerProxy *this)
{
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = *((void *)this + 9);
  v11[0] = "WebFullScreenManagerProxy";
  v11[1] = 26;
  void v11[2] = "didExitFullScreen";
  v11[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  }
  *((unsigned char *)this + 40) = 0;
  (*(void (**)(void))(**(void **)(*((void *)this + 3) + 416) + 48))(*(void *)(*((void *)this + 3) + 416));
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *(void *)(v4 + 256);
  LOBYTE(v11[0]) = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::DidExitFullScreen>(v5, (uint64_t)v11, *(void *)(*(void *)(v4 + 32) + 1928), 0);
  uint64_t v7 = *((void *)this + 3);
  if (*(unsigned char *)(v7 + 898))
  {
    uint64_t v8 = *(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(v7 + 48) + 24))
                   + 320);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 216);
      if (v9) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, 1);
      }
    }
  }
  return WebKit::WebFullScreenManagerProxy::callCloseCompletionHandlers(this, v6);
}

uint64_t WebKit::WebFullScreenManagerProxy::requestRestoreFullScreen(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  v9[0] = "WebFullScreenManagerProxy";
  v9[1] = 26;
  v9[2] = "requestRestoreFullScreen";
  v9[3] = v5;
  if (*(unsigned char *)(v4 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
  }
  uint64_t v6 = a1[3];
  uint64_t v7 = *(void *)(v6 + 256);
  LOBYTE(v9[0]) = 0;
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebFullScreenManager::RequestRestoreFullScreen,WTF::CompletionHandler<void ()(BOOL)>>(v7, (uint64_t)v9, a2, *(void *)(*(void *)(v6 + 32) + 1928), 0, 1);
}

uint64_t WebKit::WebFullScreenManagerProxy::requestExitFullScreen(WebKit::WebFullScreenManagerProxy *this)
{
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = *((void *)this + 9);
  v7[0] = "WebFullScreenManagerProxy";
  v7[1] = 26;
  void v7[2] = "requestExitFullScreen";
  v7[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v7);
  }
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *(void *)(v4 + 256);
  LOBYTE(v7[0]) = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::RequestExitFullScreen>(v5, (uint64_t)v7, *(void *)(*(void *)(v4 + 32) + 1928), 0);
}

uint64_t WebKit::WebFullScreenManagerProxy::supportsFullScreen(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, a2 ^ 1u);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::WebFullScreenManagerProxy::enterFullScreen(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 41) = a2;
  return (*(uint64_t (**)(float, float))(**(void **)(a1 + 32) + 32))(*(float *)(a3 + 4), *(float *)(a3 + 8));
}

uint64_t WebKit::WebFullScreenManagerProxy::beganEnterFullScreen(WebKit::WebFullScreenManagerProxy *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  uint64_t v6 = *((void *)this + 3);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v7 = (atomic_uint *)*((void *)this + 1);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  long long v11 = *(_OWORD *)a2;
  long long v12 = *(_OWORD *)a3;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v8 = &unk_1EE9D8F50;
  *(void *)(v8 + 8) = v7;
  *(_OWORD *)(v8 + 16) = v11;
  *(_OWORD *)(v8 + 32) = v12;
  uint64_t v13 = v8;
  WebKit::WebPageProxy::callAfterNextPresentationUpdate(v6, &v13);
  uint64_t result = v13;
  if (v13)
  {
    int v10 = *(uint64_t (**)(void))(*(void *)v13 + 8);
    return v10();
  }
  return result;
}

void WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D8CC8;
  uint64_t v3 = (WebKit::WebGeolocationManagerProxy *)((char *)this + 16);
  *((void *)this + 2) = &unk_1EE9D8D28;
  *((void *)this + 4) = &unk_1EE9D8D60;
  *((void *)this + 6) = &unk_1EE9D8D98;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 7);
  if (v5) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v5, a2);
  }
  *((void *)this + 4) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, a2);
  WebKit::WebContextSupplement::~WebContextSupplement(v3, v6);
}

{
  uint64_t vars8;

  WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy(this, a2);

  JUMPOUT(0x199740C10);
}

void WebKit::WebContextSupplement::~WebContextSupplement(WebKit::WebContextSupplement *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D8F78;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

void non-virtual thunk to'WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl *a2)
{
}

{
  WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy((WebKit::WebGeolocationManagerProxy *)((char *)this - 32), a2);
}

{
  WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy((WebKit::WebGeolocationManagerProxy *)((char *)this - 48), a2);
}

{
  uint64_t vars8;

  WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy((WebKit::WebGeolocationManagerProxy *)((char *)this - 16), a2);

  JUMPOUT(0x199740C10);
}

{
  uint64_t vars8;

  WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy((WebKit::WebGeolocationManagerProxy *)((char *)this - 32), a2);

  JUMPOUT(0x199740C10);
}

{
  uint64_t vars8;

  WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy((WebKit::WebGeolocationManagerProxy *)((char *)this - 48), a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::WebGeolocationManagerProxy::processPoolDestroyed(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl *a2)
{
  uint64_t result = *((void *)this + 7);
  if (result)
  {
    if (*(_DWORD *)(result - 12))
    {
      *((void *)this + 7) = 0;
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(result, a2);
      uint64_t result = *((void *)this + 8);
      if (result)
      {
        uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 24);
        return v4();
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::WebGeolocationManagerProxy::processPoolDestroyed(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl *a2)
{
  return WebKit::WebGeolocationManagerProxy::processPoolDestroyed((WebKit::WebGeolocationManagerProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::WebGeolocationManagerProxy::webProcessIsGoingAway(WebKit::WebGeolocationManagerProxy *this, WebKit::WebProcessProxy *a2, const WTF::StringImpl *a3)
{
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)this + 7, (uint64_t)a2, a3);
  uint64_t v7 = (void *)v5;
  v18[0] = v5;
  v18[1] = v6;
  uint64_t v8 = *((void *)this + 7);
  if (v8) {
    uint64_t v9 = v8 + 16 * *(unsigned int *)(v8 - 4);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != v5)
  {
    do
    {
      if (WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessProxy>(v7[1], (uint64_t)a2))
      {
        uint64_t v12 = HIDWORD(v20);
        if (HIDWORD(v20) == v20)
        {
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v19, (unint64_t)v7);
        }
        else
        {
          uint64_t v13 = v19;
          long long v14 = (_DWORD *)*v7;
          if (*v7) {
            *v14 += 2;
          }
          *((void *)v13 + v12) = v14;
          HIDWORD(v20) = v12 + 1;
        }
      }
      v18[0] += 16;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v18, v10, v11);
      uint64_t v7 = (void *)v18[0];
    }
    while (v18[0] != v9);
    if (HIDWORD(v20))
    {
      uint64_t v15 = (WTF::ASCIICaseInsensitiveHash **)v19;
      uint64_t v16 = 8 * HIDWORD(v20);
      do
      {
        WebKit::WebGeolocationManagerProxy::stopUpdatingWithProxy(this, a2, v15++);
        v16 -= 8;
      }
      while (v16);
    }
  }
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v6);
}

void WebKit::WebGeolocationManagerProxy::stopUpdatingWithProxy(WebKit::WebGeolocationManagerProxy *this, WebKit::WebProcessProxy *a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5 = (uint64_t *)((char *)this + 56);
  uint64_t v6 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 7, a3);
  uint64_t v8 = (WTF::StringImpl *)v6;
  uint64_t v9 = *((void *)this + 7);
  if (v9) {
    v9 += 16 * *(unsigned int *)(v9 - 4);
  }
  if (v9 != v6)
  {
    uint64_t v10 = *(void ***)(v6 + 8);
    BOOL isUpdating = WebKit::WebGeolocationManagerProxy::isUpdating((uint64_t)this, v10, v7);
    BOOL isHighAccuracyEnabled = WebKit::WebGeolocationManagerProxy::isHighAccuracyEnabled((uint64_t)this, (uint64_t)v10, v12);
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)v10, a2);
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)(v10 + 2), a2);
    if (isUpdating && !WebKit::WebGeolocationManagerProxy::isUpdating((uint64_t)this, v10, v14))
    {
      WebKit::WebGeolocationManagerProxy::providerStopUpdating((uint64_t)this, (uint64_t)v10);
    }
    else if (isHighAccuracyEnabled != WebKit::WebGeolocationManagerProxy::isHighAccuracyEnabled((uint64_t)this, (uint64_t)v10, v14))
    {
      WebKit::WebGeolocationManagerProxy::providerSetEnabledHighAccuracy((uint64_t)this, (uint64_t)v10);
    }
    if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v10)
      && WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v10 + 2))
    {
      if (*v5)
      {
        uint64_t v15 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
        if ((WTF::StringImpl *)v15 == v8) {
          return;
        }
      }
      else
      {
        if (!v8) {
          return;
        }
        uint64_t v15 = 0;
      }
      if ((WTF::StringImpl *)v15 != v8)
      {
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(v5, v8);
      }
    }
  }
}

CFTypeRef WebKit::WebGeolocationManagerProxy::refWebContextSupplement(CFTypeRef *this)
{
  return CFRetain(this[1]);
}

CFTypeRef non-virtual thunk to'WebKit::WebGeolocationManagerProxy::refWebContextSupplement(CFTypeRef *this)
{
  return CFRetain(*(this - 1));
}

void WebKit::WebGeolocationManagerProxy::derefWebContextSupplement(CFTypeRef *this)
{
}

void non-virtual thunk to'WebKit::WebGeolocationManagerProxy::derefWebContextSupplement(CFTypeRef *this)
{
}

uint64_t WebKit::WebGeolocationManagerProxy::providerDidChangePosition(WebKit::WebGeolocationManagerProxy *this, WebKit::WebGeolocationPosition *a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)this + 7, (uint64_t)a2, a3);
  uint64_t v6 = result;
  v38[0] = result;
  v38[1] = v7;
  uint64_t v8 = *((void *)this + 7);
  if (v8) {
    uint64_t v9 = v8 + 16 * *(unsigned int *)(v8 - 4);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != result)
  {
    uint64_t v10 = (_OWORD *)((char *)a2 + 16);
    while (2)
    {
      uint64_t v11 = *(void *)(v6 + 8);
      int v12 = *(unsigned __int8 *)(v11 + 144);
      long long v14 = v10[1];
      long long v13 = v10[2];
      *(_OWORD *)(v11 + 32) = *v10;
      *(_OWORD *)(v11 + 48) = v14;
      *(_OWORD *)(v11 + 64) = v13;
      long long v15 = v10[6];
      long long v17 = v10[3];
      long long v16 = v10[4];
      *(_OWORD *)(v11 + 112) = v10[5];
      *(_OWORD *)(v11 + 128) = v15;
      *(_OWORD *)(v11 + 80) = v17;
      *(_OWORD *)(v11 + 96) = v16;
      if (!v12) {
        *(unsigned char *)(v11 + 144) = 1;
      }
      uint64_t v18 = *(void ***)(v6 + 8);
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v18, &v36);
      int v19 = *v18;
      if (*v18)
      {
        uint64_t v20 = *((unsigned int *)v19 - 1);
        uint64_t v21 = &v19[v20];
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v20 = 0;
      }
      long long v31 = v18;
      uint64_t v32 = v21;
      uint64_t v33 = v21;
      unint64_t v34 = v21;
      uint64_t v35 = &v19[v20];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v31);
      while (v37 != v32)
      {
        uint64_t v24 = *(void *)(v6 + 8);
        if (!*(unsigned char *)(v24 + 144))
        {
          uint64_t v26 = std::__throw_bad_optional_access[abi:sn180100]();
          return WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidChangePosition>(v26, v27, v28, v29);
        }
        uint64_t v25 = *(void *)(*v37 + 8);
        v30[0] = v6;
        v30[1] = v24 + 32;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidChangePosition>(v25, (uint64_t)v30, 0, 0);
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v36);
      }
      v38[0] += 16;
      uint64_t result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v38, v22, v23);
      uint64_t v6 = v38[0];
      if (v38[0] != v9) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidChangePosition>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1756;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::GeolocationPositionData,void>::encode(v8, *(double **)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  int v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t *WebKit::WebGeolocationManagerProxy::providerDidFailToDeterminePosition(WebKit::WebGeolocationManagerProxy *this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  uint64_t result = (uint64_t *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)this + 7, (uint64_t)a2, a3);
  uint64_t v6 = result;
  v25[0] = result;
  v25[1] = v7;
  uint64_t v8 = *((void *)this + 7);
  if (v8) {
    uint64_t v9 = (uint64_t *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != result)
  {
    do
    {
      uint64_t v10 = (void **)v6[1];
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v10, &v23);
      uint64_t v11 = *v10;
      if (*v10)
      {
        uint64_t v12 = *((unsigned int *)v11 - 1);
        long long v13 = &v11[v12];
      }
      else
      {
        long long v13 = 0;
        uint64_t v12 = 0;
      }
      uint64_t v18 = v10;
      int v19 = v13;
      uint64_t v20 = v13;
      uint64_t v21 = v13;
      uint64_t v22 = &v11[v12];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v18);
      while (v24 != v19)
      {
        uint64_t v16 = *(void *)(*v24 + 8);
        v17[0] = v6;
        v17[1] = (uint64_t *)a2;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidFailToDeterminePosition>(v16, v17, 0, 0);
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v23);
      }
      v25[0] += 16;
      uint64_t result = (uint64_t *)WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v25, v14, v15);
      uint64_t v6 = (uint64_t *)v25[0];
    }
    while ((uint64_t *)v25[0] != v9);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidFailToDeterminePosition>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1757;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t *WebKit::WebGeolocationManagerProxy::resetPermissions(WebKit::WebGeolocationManagerProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result = (uint64_t *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)this + 7, a2, a3);
  uint64_t v5 = result;
  v24[0] = result;
  v24[1] = v6;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    uint64_t v8 = (uint64_t *)(v7 + 16 * *(unsigned int *)(v7 - 4));
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != result)
  {
    do
    {
      uint64_t v9 = (void **)v5[1];
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v9, &v22);
      uint64_t v10 = *v9;
      if (*v9)
      {
        uint64_t v11 = *((unsigned int *)v10 - 1);
        uint64_t v12 = &v10[v11];
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v11 = 0;
      }
      char v17 = v9;
      uint64_t v18 = v12;
      int v19 = v12;
      uint64_t v20 = v12;
      uint64_t v21 = &v10[v11];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v17);
      while (v23 != v18)
      {
        uint64_t v15 = *(void *)(*v23 + 8);
        uint64_t v16 = v5;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::ResetPermissions>(v15, &v16, 0, 0);
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v22);
      }
      v24[0] += 16;
      uint64_t result = (uint64_t *)WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v24, v13, v14);
      uint64_t v5 = (uint64_t *)v24[0];
    }
    while ((uint64_t *)v24[0] != v8);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::ResetPermissions>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1758;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned int *WebKit::WebGeolocationManagerProxy::startUpdating(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3, uint64_t a4, const WTF::StringImpl **a5, int a6)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = (unsigned int *)(v10 - 16);
  atomic_fetch_add((atomic_uint *volatile)(v10 - 16), 1u);
  WebKit::WebProcessProxy::webPage(a4, &v50);
  uint64_t v13 = v50;
  if (v50)
  {
    if (WebKit::GeolocationPermissionRequestManagerProxy::isValidAuthorizationToken((WebKit::GeolocationPermissionRequestManagerProxy *)(*(void *)(v50 + 32) + 728), a5, v12))
    {
      int v47 = a6;
      uint64_t v15 = (unsigned int *)(v10 - 32);
      uint64_t v16 = (uint64_t *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v48 = v13;
      uint64_t v49 = v11;
      if (v17
        || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(a1 + 56), 0), (uint64_t v17 = *v16) != 0))
      {
        int v18 = *(_DWORD *)(v17 - 8);
      }
      else
      {
        int v18 = 0;
      }
      unsigned int v19 = WTF::ASCIICaseInsensitiveHash::hash(*a3, v14) & v18;
      uint64_t v20 = v17 + 16 * v19;
      if ((WTF::equal(*(WTF **)v20, 0, v21) & 1) == 0)
      {
        uint64_t v23 = 0;
        int v24 = 1;
        do
        {
          if (*(void *)v20 == -1)
          {
            uint64_t v23 = (void *)v20;
          }
          else if (WTF::equalIgnoringASCIICase(*(WTF **)v20, *a3, v22))
          {
            goto LABEL_26;
          }
          unsigned int v19 = (v19 + v24) & v18;
          uint64_t v20 = v17 + 16 * v19;
          ++v24;
        }
        while (!WTF::equal(*(WTF **)v20, 0, v22));
        if (v23)
        {
          void *v23 = 0;
          v23[1] = 0;
          --*(_DWORD *)(*v16 - 16);
          uint64_t v20 = (uint64_t)v23;
        }
      }
      WTF::String::operator=((uint64_t *)v20, a3);
      uint64_t v25 = (_OWORD *)WTF::fastMalloc((WTF *)0xA0);
      *uint64_t v25 = 0u;
      v25[1] = 0u;
      void v25[2] = 0u;
      v25[3] = 0u;
      v25[4] = 0u;
      v25[5] = 0u;
      v25[6] = 0u;
      v25[7] = 0u;
      v25[8] = 0u;
      v25[9] = 0u;
      uint64_t v26 = *(void *)(v20 + 8);
      *(void *)(v20 + 8) = v25;
      if (v26) {
        std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100](v20 + 8, v26);
      }
      uint64_t v27 = *v16;
      if (*v16) {
        int v28 = *(_DWORD *)(v27 - 12) + 1;
      }
      else {
        int v28 = 1;
      }
      *(_DWORD *)(v27 - 12) = v28;
      uint64_t v29 = *v16;
      if (*v16) {
        int v30 = *(_DWORD *)(v29 - 12);
      }
      else {
        int v30 = 0;
      }
      uint64_t v31 = (*(_DWORD *)(v29 - 16) + v30);
      unint64_t v32 = *(unsigned int *)(v29 - 4);
      if (v32 > 0x400)
      {
        if (v32 > 2 * v31) {
          goto LABEL_26;
        }
      }
      else if (3 * v32 > 4 * v31)
      {
LABEL_26:
        uint64_t v33 = *(void *)(v20 + 8);
        BOOL isUpdating = WebKit::WebGeolocationManagerProxy::isUpdating(a1, (void **)v33, v22);
        BOOL isHighAccuracyEnabled = WebKit::WebGeolocationManagerProxy::isHighAccuracyEnabled(a1, v33, v35);
        WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v33, v15, (uint64_t)&buf);
        if (v47) {
          WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v33 + 16, v15, (uint64_t)&buf);
        }
        if (isUpdating)
        {
          if (((isHighAccuracyEnabled | v47 ^ 1) & 1) == 0) {
            WebKit::WebGeolocationManagerProxy::providerSetEnabledHighAccuracy(a1, v33);
          }
          uint64_t v13 = v48;
          uint64_t v11 = v49;
          if (*(unsigned char *)(v33 + 144))
          {
            *(void *)&long long buf = a3;
            *((void *)&buf + 1) = v33 + 32;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidChangePosition>((uint64_t)v15, (uint64_t)&buf, 0, 0);
          }
        }
        else
        {
          uint64_t v38 = *(void *)(a1 + 64);
          if (v38)
          {
            BOOL v39 = WebKit::WebGeolocationManagerProxy::isHighAccuracyEnabled(a1, v33, v37);
            (*(void (**)(uint64_t, uint64_t, BOOL))(*(void *)v38 + 32))(v38, a1, v39);
            (*(void (**)(void, uint64_t))(**(void **)(a1 + 64) + 16))(*(void *)(a1 + 64), a1);
          }
          else
          {
            uint64_t v40 = (WebCore::CoreLocationGeolocationProvider *)WTF::fastMalloc((WTF *)8);
            WebCore::CoreLocationGeolocationProvider::CoreLocationGeolocationProvider();
            std::unique_ptr<WebCore::CoreLocationGeolocationProvider>::reset[abi:sn180100]((WebCore::CoreLocationGeolocationProvider **)(v33 + 152), v40);
            long long v41 = *(WebCore::CoreLocationGeolocationProvider **)(v33 + 152);
            WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(v33 + 16));
            WebCore::CoreLocationGeolocationProvider::setEnableHighAccuracy(v41);
          }
          uint64_t v13 = v48;
          uint64_t v11 = v49;
        }
        goto LABEL_37;
      }
      uint64_t v20 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(a1 + 56), (WTF::ASCIICaseInsensitiveHash **)v20);
      goto LABEL_26;
    }
    uint64_t v45 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebGeolocationManagerProxy::startUpdatingWithProxy(WebProcessProxy &,"
                                      " const WebCore::RegistrableDomain &, WebPageProxyIdentifier, const String &, BOOL)";
      _os_log_fault_impl(&dword_1985F2000, v45, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebGeolocationManagerProxy.cpp 144: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v46 = *(void *)(v10 + 112);
    if (v46)
    {
      *(unsigned char *)(v46 + 98) = 1;
LABEL_37:
      CFRelease(*(CFTypeRef *)(v13 + 8));
      goto LABEL_38;
    }
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x198E3B614);
  }
  uint64_t v43 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = "void WebKit::WebGeolocationManagerProxy::startUpdatingWithProxy(WebProcessProxy &, c"
                                    "onst WebCore::RegistrableDomain &, WebPageProxyIdentifier, const String &, BOOL)";
    _os_log_fault_impl(&dword_1985F2000, v43, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebGeolocationManagerProxy.cpp 141: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v44 = *(void *)(v10 + 112);
  if (!v44) {
    goto LABEL_52;
  }
  *(unsigned char *)(v44 + 98) = 1;
LABEL_38:

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
}

BOOL WebKit::WebGeolocationManagerProxy::isUpdating(uint64_t a1, void **a2, const WTF::StringImpl *a3)
{
  if (!*(void *)(a1 + 64)) {
    return !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(a2);
  }
  uint64_t v4 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a1 + 56), (uint64_t)a2, a3);
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6) {
    uint64_t v7 = v6 + 16 * *(unsigned int *)(v6 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  v12[0] = v4;
  v12[1] = v5;
  if (v7 == v4) {
    return 0;
  }
  do
  {
    BOOL isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(*(void ***)(v4 + 8));
    if (!isEmptyIgnoringNullReferences) {
      break;
    }
    v12[0] += 16;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v12, v9, v10);
    uint64_t v4 = v12[0];
  }
  while (v12[0] != v7);
  return !isEmptyIgnoringNullReferences;
}

BOOL WebKit::WebGeolocationManagerProxy::isHighAccuracyEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (!*(void *)(a1 + 64)) {
    return !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(a2 + 16));
  }
  uint64_t v4 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a1 + 56), a2, a3);
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6) {
    uint64_t v7 = v6 + 16 * *(unsigned int *)(v6 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  v12[0] = v4;
  v12[1] = v5;
  if (v7 == v4) {
    return 0;
  }
  do
  {
    BOOL isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(*(void *)(v4 + 8) + 16));
    if (!isEmptyIgnoringNullReferences) {
      break;
    }
    v12[0] += 16;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v12, v9, v10);
    uint64_t v4 = v12[0];
  }
  while (v12[0] != v7);
  return !isEmptyIgnoringNullReferences;
}

uint64_t WebKit::WebGeolocationManagerProxy::providerSetEnabledHighAccuracy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 32))(v3, a1);
  }
  else {
    return WebCore::CoreLocationGeolocationProvider::setEnableHighAccuracy(*(WebCore::CoreLocationGeolocationProvider **)(a2 + 152));
  }
}

unsigned int *WebKit::WebGeolocationManagerProxy::stopUpdating(WebKit::WebGeolocationManagerProxy *this, IPC::Connection *a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v3 = *((void *)a2 + 1);
  uint64_t v4 = (unsigned int *)(v3 - 16);
  atomic_fetch_add((atomic_uint *volatile)(v3 - 16), 1u);
  WebKit::WebGeolocationManagerProxy::stopUpdatingWithProxy(this, (WebKit::WebProcessProxy *)(v3 - 32), a3);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

WebCore::CoreLocationGeolocationProvider *WebKit::WebGeolocationManagerProxy::providerStopUpdating(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3) {
    return (WebCore::CoreLocationGeolocationProvider *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 24))(v3, a1);
  }
  else {
    return std::unique_ptr<WebCore::CoreLocationGeolocationProvider>::reset[abi:sn180100]((WebCore::CoreLocationGeolocationProvider **)(a2 + 152), 0);
  }
}

unsigned int *WebKit::WebGeolocationManagerProxy::setEnableHighAccuracy(WebKit::WebGeolocationManagerProxy *this, IPC::Connection *a2, WTF::ASCIICaseInsensitiveHash **a3, int a4)
{
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = (unsigned int *)(v6 - 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 - 16), 1u);
  uint64_t v8 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 7, a3);
  uint64_t v10 = *((void *)this + 7);
  if (v10) {
    v10 += 16 * *(unsigned int *)(v10 - 4);
  }
  if (v10 != v8)
  {
    uint64_t v11 = (unsigned int *)(v6 - 32);
    uint64_t v12 = *(void ***)(v8 + 8);
    int isHighAccuracyEnabled = WebKit::WebGeolocationManagerProxy::isHighAccuracyEnabled((uint64_t)this, (uint64_t)v12, v9);
    uint64_t v14 = (uint64_t)(v12 + 2);
    if (a4) {
      WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v14, v11, (uint64_t)v18);
    }
    else {
      WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v14, v11);
    }
    if (WebKit::WebGeolocationManagerProxy::isUpdating((uint64_t)this, v12, v15) && isHighAccuracyEnabled != a4) {
      WebKit::WebGeolocationManagerProxy::providerSetEnabledHighAccuracy((uint64_t)this, (uint64_t)v12);
    }
  }

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

uint64_t API::ObjectImpl<(API::Object::Type)145>::type()
{
  return 145;
}

uint64_t API::ObjectImpl<(API::Object::Type)61>::type()
{
  return 61;
}

uint64_t API::ObjectImpl<(API::Object::Type)59>::type()
{
  return 59;
}

uint64_t API::ObjectImpl<(API::Object::Type)64>::type()
{
  return 64;
}

void WebKit::WebFormSubmissionListenerProxy::~WebFormSubmissionListenerProxy(WebKit::WebFormSubmissionListenerProxy *this)
{
  *(void *)this = &unk_1EE9D8DE0;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE9D8DE0;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)58>::type()
{
  return 58;
}

void std::__optional_storage_base<std::pair<WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>>,WebKit::ProcessSwapRequestedByClient>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::pair<WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>>,WebKit::ProcessSwapRequestedByClient>,false>>(uint64_t *a1, uint64_t *a2)
{
  if (*((unsigned __int8 *)a1 + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v4 = *a2;
      *a2 = 0;
      uint64_t v5 = *a1;
      *a1 = v4;
      if (v5) {
        CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
    }
  }
  else if (*((unsigned char *)a1 + 16))
  {
    uint64_t v6 = *a1;
    *a1 = 0;
    if (v6) {
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
    *((unsigned char *)a1 + 16) = 0;
  }
  else
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    *a1 = v7;
    *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
    *((unsigned char *)a1 + 16) = 1;
  }
}

WebKit::ProvisionalFrameProxy *std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100](WebKit::ProvisionalFrameProxy **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::ProvisionalFrameProxy::~ProvisionalFrameProxy(result, a2);
    return (WebKit::ProvisionalFrameProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

void API::ObjectImpl<(API::Object::Type)64>::~ObjectImpl()
{
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl **)(a1 + 8);
    do
    {
      uint64_t v5 = *(v4 - 1);
      if (v5 != (WTF::StringImpl *)-1)
      {
        a2 = *v4;
        *uint64_t v4 = 0;
        if (a2)
        {
          std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100]((uint64_t)v4, (uint64_t)a2);
          uint64_t v5 = *(v4 - 1);
        }
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::unique_ptr<WebCore::CoreLocationGeolocationProvider>::reset[abi:sn180100]((WebCore::CoreLocationGeolocationProvider **)(a2 + 152), 0);
    uint64_t v4 = *(unsigned int ***)(a2 + 16);
    if (v4) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, v3);
    }
    if (*(void *)a2) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*(unsigned int ***)a2, v3);
    }
    WTF::fastFree((WTF *)a2, v3);
  }
}

WebCore::CoreLocationGeolocationProvider *std::unique_ptr<WebCore::CoreLocationGeolocationProvider>::reset[abi:sn180100](WebCore::CoreLocationGeolocationProvider **a1, WebCore::CoreLocationGeolocationProvider *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::CoreLocationGeolocationProvider::~CoreLocationGeolocationProvider(result);
    return (WebCore::CoreLocationGeolocationProvider *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UnapplyEditCommand>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2522;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReapplyEditCommand>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2347;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::String,WTF::RawPtrTraits<API::String>,WTF::DefaultRefDerefTraits<API::String>>>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & v9;
    uint64_t v15 = (uint64_t *)(v8 + 16 * v14);
    uint64_t v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    uint64_t v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *uint64_t v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v15 = v12;
    }
    WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>> &&)::{lambda(void)#1}>(v15, a2, &v29);
    uint64_t v17 = *a1;
    if (*a1) {
      int v18 = *(_DWORD *)(v17 - 12) + 1;
    }
    else {
      int v18 = 1;
    }
    *(_DWORD *)(v17 - 12) = v18;
    uint64_t v19 = *a1;
    if (*a1) {
      int v20 = *(_DWORD *)(v19 - 12);
    }
    else {
      int v20 = 0;
    }
    uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
    unint64_t v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 <= 2 * v21)
      {
LABEL_22:
        uint64_t v15 = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (uint64_t)v15);
        uint64_t v19 = *a1;
        if (*a1) {
          unint64_t v22 = *(unsigned int *)(v19 - 4);
        }
        else {
          unint64_t v22 = 0;
        }
      }
    }
    else if (3 * v22 <= 4 * v21)
    {
      goto LABEL_22;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v19 + 16 * v22;
    *(unsigned char *)(a4 + 16) = 1;
    return;
  }
  if (!WTF::equal(v16, *a2, (const WTF::StringImpl *)a3)) {
    goto LABEL_13;
  }
  uint64_t v23 = *a1;
  if (*a1) {
    uint64_t v24 = *(unsigned int *)(v23 - 4);
  }
  else {
    uint64_t v24 = 0;
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v23 + 16 * v24;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v25 = v8 + 16 * v14;
  uint64_t v26 = *a3;
  *a3 = 0;
  uint64_t v27 = *(void *)(v25 + 8);
  *(void *)(v25 + 8) = v26;
  if (v27)
  {
    int v28 = *(const void **)(v27 + 8);
    CFRelease(v28);
  }
}

uint64_t WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::deleteAllNodes(uint64_t result, void *a2)
{
  uint64_t v2 = *(WTF **)(result + 8);
  if (v2)
  {
    do
    {
      uint64_t v3 = (WTF *)*((void *)v2 + 2);
      uint64_t v4 = *(void *)v2;
      *(void *)uint64_t v2 = 0;
      if (v4) {
        CFRelease(*(CFTypeRef *)(v4 + 8));
      }
      uint64_t result = WTF::fastFree(v2, a2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::navigateServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)> &&)::$_0,void,WebCore::ScheduleLocationChangeResult>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D8E40;
  uint64_t v3 = a1[8];
  a1[8] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::navigateServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)> &&)::$_0,void,WebCore::ScheduleLocationChangeResult>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D8E40;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::navigateServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)> &&)::$_0,void,WebCore::ScheduleLocationChangeResult>::call(uint64_t result, int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 8);
  if (a2 != 2)
  {
    if (a2 != 1)
    {
      if (a2) {
        return result;
      }
      uint64_t v4 = *(void *)(result + 64);
      *(void *)(result + 64) = 0;
      LOBYTE(v11) = 0;
      char v12 = 0;
      (*(void (**)(uint64_t, void, void, long long *))(*(void *)v4 + 16))(v4, 0, 0, &v11);
      return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    goto LABEL_10;
  }
  if (!*(void *)(v3 + 264))
  {
LABEL_10:
    uint64_t v7 = *(void *)(v3 + 24);
    if (v7 && (uint64_t v7 = *(void *)(v7 + 8)) != 0)
    {
      uint64_t v7 = *(void *)(*(void *)(v7 + 16) + 1928);
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFF00;
      uint64_t v7 = v7;
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      unint64_t v8 = 0;
    }
    uint64_t v4 = *(void *)(result + 64);
    long long v10 = *(_OWORD *)(v3 + 272);
    *(void *)(result + 64) = 0;
    long long v11 = v10;
    char v12 = 1;
    (*(void (**)(uint64_t, unint64_t, uint64_t, long long *))(*(void *)v4 + 16))(v4, v8 | v7, v9, &v11);
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(v3 + 424);
  if (v5)
  {
    *(void *)(v3 + 424) = 0;
    LOBYTE(v11) = 0;
    char v12 = 0;
    (*(void (**)(uint64_t, void, void, long long *))(*(void *)v5 + 16))(v5, 0, 0, &v11);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(v2 + 64);
  *(void *)(v2 + 64) = 0;
  uint64_t v4 = *(void *)(v3 + 424);
  *(void *)(v3 + 424) = v6;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::setUpPolicyListenerProxy(WTF::CompletionHandler<void ()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<WebKit::BrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::BrowsingWarning>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)> &&,WebKit::ShouldExpectSafeBrowsingResult,WebKit::ShouldExpectAppBoundDomainResult,WebKit::ShouldWaitForInitialLinkDecorationFilteringData)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<WebKit::BrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::BrowsingWarning>> &,WebKit::NavigatingToAppBoundDomain,std::optional<WebKit::NavigatingToAppBoundDomain>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D8E68;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::setUpPolicyListenerProxy(WTF::CompletionHandler<void ()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<WebKit::BrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::BrowsingWarning>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)> &&,WebKit::ShouldExpectSafeBrowsingResult,WebKit::ShouldExpectAppBoundDomainResult,WebKit::ShouldWaitForInitialLinkDecorationFilteringData)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<WebKit::BrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::BrowsingWarning>> &,WebKit::NavigatingToAppBoundDomain,std::optional<WebKit::NavigatingToAppBoundDomain>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D8E68;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::setUpPolicyListenerProxy(WTF::CompletionHandler<void ()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<WebKit::BrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::BrowsingWarning>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)> &&,WebKit::ShouldExpectSafeBrowsingResult,WebKit::ShouldExpectAppBoundDomainResult,WebKit::ShouldWaitForInitialLinkDecorationFilteringData)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<WebKit::BrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::BrowsingWarning>> &,WebKit::NavigatingToAppBoundDomain,std::optional<WebKit::NavigatingToAppBoundDomain>>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 a6, uint64_t a7)
{
  uint64_t v13 = a6;
  uint64_t v14 = *(void *)(a1 + 8);
  if (a2)
  {
    uint64_t v15 = *(void *)(v14 + 424);
    if (v15)
    {
      uint64_t v16 = *(void *)(v14 + 24);
      if (v16 && (uint64_t v16 = *(void *)(v16 + 8)) != 0)
      {
        uint64_t v16 = *(void *)(*(void *)(v16 + 16) + 1928);
        unint64_t v17 = v16 & 0xFFFFFFFFFFFFFF00;
        uint64_t v16 = v16;
        uint64_t v18 = 1;
      }
      else
      {
        uint64_t v18 = 0;
        unint64_t v17 = 0;
      }
      *(void *)(v14 + 424) = 0;
      long long v21 = *(_OWORD *)(v14 + 272);
      char v22 = 1;
      (*(void (**)(uint64_t, unint64_t, uint64_t, long long *))(*(void *)v15 + 16))(v15, v17 | v16, v18, &v21);
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  uint64_t v19 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 16))(v19, a2, a3, a4, a5, v13, a7);
  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  uint64_t v20 = *(void *)(v14 + 264);
  *(void *)(v14 + 264) = 0;
  if (v20) {
    CFRelease(*(CFTypeRef *)(v20 + 8));
  }
}

void *std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::~__func(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8E90;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

void std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::~__func(void *a1)
{
  uint64_t v1 = a1[1];
  *a1 = &unk_1EE9D8E90;
  a1[1] = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }

  JUMPOUT(0x199740C10);
}

void *std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &unk_1EE9D8E90;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    CFRetain(*(CFTypeRef *)(v3 + 8));
  }
  v2[1] = v3;
  return v2;
}

void *std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::__clone(void *result, void *a2)
{
  *a2 = &unk_1EE9D8E90;
  uint64_t v3 = result[1];
  if (v3) {
    uint64_t result = CFRetain(*(CFTypeRef *)(v3 + 8));
  }
  a2[1] = v3;
  return result;
}

void std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = __p[1];
  __p[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }

  operator delete(__p);
}

void std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::operator()(uint64_t a1, unsigned char *a2)
{
  if (*a2)
  {
    WebKit::WebPageProxy::reload(*(void *)(a1 + 8), 0, &v3);
    uint64_t v2 = v3;
    uint64_t v3 = 0;
    if (v2) {
      CFRelease(*(CFTypeRef *)(v2 + 8));
    }
  }
}

uint64_t WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::unlinkAndDelete(uint64_t a1, WTF *this)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 2);
  if (v3)
  {
    *(void *)(v3 + 16) = v4;
    uint64_t v4 = *((void *)this + 2);
  }
  else
  {
    *(void *)(a1 + 8) = v4;
  }
  if (v4) {
    uint64_t v5 = (void *)(v4 + 8);
  }
  else {
    uint64_t v5 = (void *)(a1 + 16);
  }
  *uint64_t v5 = v3;
  uint64_t v6 = *(void *)this;
  *(void *)this = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  return WTF::fastFree(this, this);
}

uint64_t *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

void *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::rehash(uint64_t *a1, unsigned int a2, void **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    char v12 = 0;
    do
    {
      uint64_t v13 = (void **)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        uint64_t v15 = *a1;
        if (*a1) {
          int v16 = *(_DWORD *)(v15 - 8);
        }
        else {
          int v16 = 0;
        }
        unint64_t v17 = ~(*v14 << 32) + *v14;
        unint64_t v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
        unint64_t v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
        unsigned int v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~(v19 << 27)));
        int v21 = 1;
        do
        {
          unsigned int v22 = v20;
          uint64_t v23 = *(void *)(v15 + 8 * v20);
          unsigned int v20 = (v20 + v21++) & v16;
        }
        while (v23);
        uint64_t v24 = (void *)(v15 + 8 * v22);
        *uint64_t v24 = v14;
        if (v13 == a3) {
          char v12 = v24;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    char v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>>,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  uint64_t v4 = **a2;
  unint64_t v5 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  unsigned int v8 = v3 & ((v7 >> 31) ^ v7);
  for (int i = 1; ; ++i)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void **)(v2 + 8 * v8);
    if (v11 != (void *)-1)
    {
      if (!v11) {
        return v2 + 8 * *(unsigned int *)(v2 - 4);
      }
      if (*v11 == v4) {
        break;
      }
    }
    unsigned int v8 = (v10 + i) & v3;
  }
  return v2 + 8 * v10;
}

void *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::expand(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::rehash(a1, v5, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateFrameSize>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v8 = 2529;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v8, *(int **)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

_WORD *std::construct_at[abi:sn180100]<WebKit::FrameTreeNodeData,WebKit::FrameTreeNodeData,WebKit::FrameTreeNodeData*>(_WORD *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    *uint64_t result = *(_WORD *)a2;
    WTF::URL::URL((uint64_t)(result + 4), (uint64_t *)(a2 + 8));
    WTF::URL::URL((uint64_t)(v3 + 24), (uint64_t *)(a2 + 48));
    *((void *)v3 + 11) = *(void *)(a2 + 88);
    uint64_t v4 = *(void *)(a2 + 96);
    *(void *)(a2 + 96) = 0;
    *((void *)v3 + 13) = 0;
    *((void *)v3 + 14) = 0;
    *((void *)v3 + 12) = v4;
    uint64_t v5 = *(void *)(a2 + 104);
    *(void *)(a2 + 104) = 0;
    *((void *)v3 + 13) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a2 + 112) = 0;
    *((_DWORD *)v3 + 28) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(a2 + 116) = 0;
    *((_DWORD *)v3 + 29) = v5;
    *((void *)v3 + 15) = 0;
    *((void *)v3 + 16) = 0;
    uint64_t v6 = *(void *)(a2 + 120);
    *(void *)(a2 + 120) = 0;
    *((void *)v3 + 15) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a2 + 128) = 0;
    *((_DWORD *)v3 + 32) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a2 + 132) = 0;
    *((_DWORD *)v3 + 33) = v6;
    *((void *)v3 + 17) = 0;
    *((void *)v3 + 18) = 0;
    uint64_t v7 = *(void *)(a2 + 136);
    *(void *)(a2 + 136) = 0;
    *((void *)v3 + 17) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 144);
    *(_DWORD *)(a2 + 144) = 0;
    *((_DWORD *)v3 + 36) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 148);
    *(_DWORD *)(a2 + 148) = 0;
    *((_DWORD *)v3 + 37) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 152);
    *((unsigned char *)v3 + 156) = *(unsigned char *)(a2 + 156);
    *((_DWORD *)v3 + 38) = v7;
    uint64_t v8 = *(void *)(a2 + 160);
    *(void *)(a2 + 160) = 0;
    *((void *)v3 + 20) = v8;
    uint64_t v9 = *(void *)(a2 + 168);
    *(void *)(a2 + 168) = 0;
    *((void *)v3 + 21) = v9;
    uint64_t v10 = *(void *)(a2 + 176);
    *(void *)(a2 + 176) = 0;
    *((void *)v3 + 22) = v10;
    uint64_t v11 = *(void *)(a2 + 184);
    *((unsigned char *)v3 + 192) = *(unsigned char *)(a2 + 192);
    *((void *)v3 + 23) = v11;
    uint64_t v12 = *(void *)(a2 + 200);
    *(void *)(a2 + 200) = 0;
    *((void *)v3 + 25) = v12;
    *((unsigned char *)v3 + 208) = 0;
    *((_DWORD *)v3 + 58) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v3 + 104), a2 + 208);
    uint64_t v13 = *(void *)(a2 + 240);
    *(void *)(a2 + 240) = 0;
    *((void *)v3 + 30) = v13;
    long long v14 = *(_OWORD *)(a2 + 248);
    long long v15 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(v3 + 139) = *(_OWORD *)(a2 + 278);
    *(_OWORD *)(v3 + 132) = v15;
    *(_OWORD *)(v3 + 124) = v14;
    *((void *)v3 + 37) = 0;
    *((void *)v3 + 38) = 0;
    uint64_t v16 = *(void *)(a2 + 296);
    *(void *)(a2 + 296) = 0;
    *((void *)v3 + 37) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 304);
    *(_DWORD *)(a2 + 304) = 0;
    *((_DWORD *)v3 + 76) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 308);
    *(_DWORD *)(a2 + 308) = 0;
    *((_DWORD *)v3 + 77) = v16;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetFrameInfo,WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0>(WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0)#1},void,WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D8ED8;
  WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetFrameInfo,WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0>(WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0)#1},void,WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9D8ED8;
  WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref((void *)a1 + 1);

  return WTF::fastFree(a1, v2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetFrameInfo,WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0>(WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0)#1},void,WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2) {
    goto LABEL_13;
  }
  IPC::Decoder::decode<std::optional<WebKit::FrameInfoData>>(a2, v13);
  if (!v15)
  {
    LOBYTE(v10[0]) = 0;
    char v12 = 0;
LABEL_12:
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = a2[3];
    if (v9)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
        if (v12) {
          goto LABEL_9;
        }
      }
    }
LABEL_13:
    v13[0] = 0;
    char v14 = 0;
    WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0::operator()(v2, (uint64_t)v13);
    uint64_t v6 = v13;
    goto LABEL_14;
  }
  LOBYTE(v10[0]) = 0;
  char v11 = 0;
  if (v14)
  {
    std::construct_at[abi:sn180100]<WebKit::FrameInfoData,WebKit::FrameInfoData,WebKit::FrameInfoData*>(v10, (uint64_t)v13);
    char v11 = 1;
    char v12 = 1;
    if (!v15) {
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = 1;
  }
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v4);
  if (!v12) {
    goto LABEL_12;
  }
LABEL_9:
  WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0::operator()(v2, (uint64_t)v10);
  if (!v12) {
    return;
  }
  uint64_t v6 = v10;
LABEL_14:
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v5);
}

__n128 WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 296))
  {
    uint64_t v3 = *a1;
    *(_WORD *)(v3 + 16) = *(_WORD *)a2;
    WebCore::ResourceRequestBase::RequestData::operator=(v3 + 24, a2 + 8);
    WTF::String::operator=((uint64_t *)(v3 + 176), (uint64_t *)(a2 + 160));
    WTF::String::operator=((uint64_t *)(v3 + 184), (uint64_t *)(a2 + 168));
    uint64_t v4 = *(void *)(a2 + 176);
    *(void *)(a2 + 176) = 0;
    uint64_t v5 = *(WTF::RefCountedBase **)(v3 + 192);
    *(void *)(v3 + 192) = v4;
    if (v5) {
      WTF::RefCounted<WebCore::FormData>::deref(v5);
    }
    uint64_t v6 = *(void *)(a2 + 184);
    *(unsigned char *)(v3 + 208) = *(unsigned char *)(a2 + 192);
    *(void *)(v3 + 200) = v6;
    uint64_t v7 = *(void *)(a2 + 200);
    *(void *)(a2 + 200) = 0;
    uint64_t v8 = *(const void **)(v3 + 216);
    *(void *)(v3 + 216) = v7;
    if (v8) {
      CFRelease(v8);
    }
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v3 + 224, a2 + 208);
    WTF::String::operator=((uint64_t *)(v3 + 256), (uint64_t *)(a2 + 240));
    __n128 result = *(__n128 *)(a2 + 278);
    long long v10 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(v3 + 264) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(v3 + 280) = v10;
    *(__n128 *)(v3 + 294) = result;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_1,void,WebKit::FrameTreeNodeData &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D8F00;
  WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_1,void,WebKit::FrameTreeNodeData &>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9D8F00;
  WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref((void *)a1 + 1);

  return WTF::fastFree(a1, v2);
}

_WORD *WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_1,void,WebKit::FrameTreeNodeData &>::call(_WORD *result, uint64_t a2)
{
  uint64_t v2 = (_OWORD *)(a2 + 248);
  if (*(void *)(a2 + 248))
  {
    if (*(unsigned char *)(a2 + 280)
      && (*(void *)(a2 + 264) == *((void *)result + 3)
        ? (BOOL v4 = *(void *)(a2 + 272) == *((void *)result + 4))
        : (BOOL v4 = 0),
          v4)
      || *((unsigned char *)result + 40))
    {
      uint64_t v6 = *((void *)result + 1);
      unint64_t v5 = *((void *)result + 2);
      if (v5 >= *(unsigned int *)(v6 + 324))
      {
        __break(0xC471u);
      }
      else
      {
        uint64_t v7 = *(void *)(v6 + 312) + 320 * v5;
        if (*(unsigned char *)(v7 + 312))
        {
          *(_WORD *)uint64_t v7 = *(_WORD *)a2;
          WebCore::ResourceRequestBase::RequestData::operator=(v7 + 8, a2 + 8);
          WTF::String::operator=((uint64_t *)(v7 + 160), (uint64_t *)(a2 + 160));
          WTF::String::operator=((uint64_t *)(v7 + 168), (uint64_t *)(a2 + 168));
          uint64_t v8 = *(void *)(a2 + 176);
          *(void *)(a2 + 176) = 0;
          uint64_t v9 = *(WTF::RefCountedBase **)(v7 + 176);
          *(void *)(v7 + 176) = v8;
          if (v9) {
            WTF::RefCounted<WebCore::FormData>::deref(v9);
          }
          uint64_t v10 = *(void *)(a2 + 184);
          *(unsigned char *)(v7 + 192) = *(unsigned char *)(a2 + 192);
          *(void *)(v7 + 184) = v10;
          uint64_t v11 = *(void *)(a2 + 200);
          *(void *)(a2 + 200) = 0;
          char v12 = *(const void **)(v7 + 200);
          *(void *)(v7 + 200) = v11;
          if (v12) {
            CFRelease(v12);
          }
          std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v7 + 208, a2 + 208);
          WTF::String::operator=((uint64_t *)(v7 + 240), (uint64_t *)(a2 + 240));
          long long v14 = *(_OWORD *)((char *)v2 + 30);
          long long v15 = v2[1];
          *(_OWORD *)(v7 + 248) = *v2;
          *(_OWORD *)(v7 + 264) = v15;
          *(_OWORD *)(v7 + 278) = v14;
          unsigned int v16 = *(_DWORD *)(v7 + 308);
          if (v16) {
            WTF::VectorDestructor<true,WebKit::FrameTreeNodeData>::destruct(*(void **)(v7 + 296), (void *)(*(void *)(v7 + 296) + 312 * v16));
          }
          __n128 result = *(_WORD **)(v7 + 296);
          if (result)
          {
            *(void *)(v7 + 296) = 0;
            *(_DWORD *)(v7 + 304) = 0;
            __n128 result = (_WORD *)WTF::fastFree((WTF *)result, v13);
          }
          uint64_t v17 = *(void *)(a2 + 296);
          *(void *)(a2 + 296) = 0;
          *(void *)(v7 + 296) = v17;
          LODWORD(v17) = *(_DWORD *)(a2 + 304);
          *(_DWORD *)(a2 + 304) = 0;
          *(_DWORD *)(v7 + 304) = v17;
          LODWORD(v17) = *(_DWORD *)(a2 + 308);
          *(_DWORD *)(a2 + 308) = 0;
          *(_DWORD *)(v7 + 308) = v17;
        }
        else
        {
          __n128 result = std::construct_at[abi:sn180100]<WebKit::FrameTreeNodeData,WebKit::FrameTreeNodeData,WebKit::FrameTreeNodeData*>((_WORD *)v7, a2);
          *(unsigned char *)(v7 + 312) = 1;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidFinishLoadInAnotherProcess>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2208;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WebKit::WebFrameProxy const*>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  for (int i = 1; ; ++i)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void **)(v2 + 8 * v7);
    if (v10 != (void *)-1)
    {
      if (!v10) {
        return v2 + 8 * *(unsigned int *)(v2 - 4);
      }
      if (*v10 == *a2) {
        break;
      }
    }
    unsigned int v7 = (v9 + i) & v3;
  }
  return v2 + 8 * v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::WillEnterFullScreen>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1751;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::Encoder::operator<<<int>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::DidEnterFullScreen>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v7 = 1742;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::WillExitFullScreen>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v7 = 1752;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::DidExitFullScreen>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v7 = 1743;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::SetAnimatingFullScreen>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1748;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebFullScreenManager::RequestRestoreFullScreen,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 1745;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9D8F28;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  unint64_t v18 = v24;
  uint64_t v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebFullScreenManager::RequestRestoreFullScreen,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D8F28;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebFullScreenManager::RequestRestoreFullScreen,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D8F28;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebFullScreenManager::RequestRestoreFullScreen,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::RequestExitFullScreen>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1744;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::SaveScrollPosition>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1747;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::RestoreScrollPosition>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1746;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::SetFullscreenInsets>(uint64_t a1, float **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1750;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::SetFullscreenAutoHideDuration>(uint64_t a1, double **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1749;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v8, **a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WebKit::WebFullScreenManagerProxy::beganEnterFullScreen(WebCore::IntRect const&,WebCore::IntRect const&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D8F50;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFullScreenManagerProxy::beganEnterFullScreen(WebCore::IntRect const&,WebCore::IntRect const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D8F50;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFullScreenManagerProxy::beganEnterFullScreen(WebCore::IntRect const&,WebCore::IntRect const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 32) + 48))(*(void *)(v2 + 32), result + 16, result + 32);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (WTF::ASCIICaseInsensitiveHash **)(v5 + 16 * v11);
      if (*v13 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v13, 0, v10))
        {
          uint64_t v15 = v5 + 16 * v11;
          char v17 = *(WTF::StringImpl **)(v15 + 8);
          uint64_t v16 = (void *)(v15 + 8);
          uint64_t v9 = v17;
          *uint64_t v16 = 0;
          if (v17) {
            std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100]((uint64_t)v16, (uint64_t)v9);
          }
          unint64_t v18 = *v13;
          *uint64_t v13 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v9);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
        }
        else
        {
          uint64_t v19 = *a1;
          if (*a1) {
            unsigned int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            unsigned int v20 = 0;
          }
          int v21 = WTF::ASCIICaseInsensitiveHash::hash(*v13, v14);
          int v22 = 0;
          do
          {
            uint64_t v23 = v21 & v20;
            int v24 = WTF::equal(*(WTF **)(v19 + 16 * v23), 0, v10);
            int v21 = ++v22 + v23;
          }
          while (!v24);
          uint64_t v25 = v19 + 16 * v23;
          uint64_t v27 = (void *)(v25 + 8);
          uint64_t v26 = *(WTF::StringImpl **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (v26) {
            std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100]((uint64_t)v27, (uint64_t)v26);
          }
          int v28 = *(WTF::StringImpl **)v25;
          *(void *)uint64_t v25 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v26);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          uint64_t v29 = *v13;
          *uint64_t v13 = 0;
          *(void *)uint64_t v25 = v29;
          uint64_t v30 = v5 + 16 * v11;
          uint64_t v32 = *(void *)(v30 + 8);
          uint64_t v31 = (WTF::StringImpl **)(v30 + 8);
          *uint64_t v31 = 0;
          *uint64_t v27 = v32;
          uint64_t v9 = *v31;
          *uint64_t v31 = 0;
          if (v9) {
            std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100]((uint64_t)v31, (uint64_t)v9);
          }
          uint64_t v33 = *v13;
          *uint64_t v13 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, v9);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v25;
          }
        }
      }
      ++v11;
    }
    while (v11 != v6);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v12;
}

void WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v3 = *a1;
  if (*a1) {
    int v4 = *(_DWORD *)(v3 - 12) - 1;
  }
  else {
    int v4 = -1;
  }
  *(_DWORD *)(v3 - 12) = v4;
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = 6 * *(_DWORD *)(v5 - 12);
    unsigned int v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 9)
    {
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v7 >> 1, 0);
    }
  }
}

void WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>((WTF::StringImpl **)a1, a2);
  uint64_t v5 = *(void *)(a1 + 8);
  int v4 = (void *)(a1 + 8);
  uint64_t v3 = v5;
  *int v4 = 0;
  if (v5)
  {
    std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100]((uint64_t)v4, v3);
  }
}

void WebKit::AsyncPDFRenderer::~AsyncPDFRenderer(unsigned int **this)
{
  WebKit::AsyncPDFRenderer::teardown((WebKit::AsyncPDFRenderer *)this);
  uint64_t v3 = (uint64_t)this[17];
  if (v3) {
    WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::deallocateTable(v3, v2);
  }
  int v4 = this[16];
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 4), v2);
  }
  uint64_t v5 = (uint64_t)this[15];
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v5, v2);
  }
  uint64_t v6 = (uint64_t)this[14];
  if (v6) {
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(v6, v2);
  }
  uint64_t v7 = (uint64_t)this[13];
  if (v7) {
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(v7, v2);
  }
  uint64_t v8 = (WTF *)this[11];
  if (v8)
  {
    do
    {
      uint64_t v9 = (WTF *)*((void *)v8 + 3);
      WTF::fastFree(v8, v2);
      uint64_t v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = this[10];
  if (v10) {
    WTF::fastFree((WTF *)(v10 - 4), v2);
  }
  uint64_t v11 = (uint64_t)this[8];
  if (v11) {
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(v11, v2);
  }
  uint64_t v12 = this[7];
  this[7] = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = this[6];
  if (v13) {
    WTF::fastFree((WTF *)(v13 - 4), v2);
  }
  uint64_t v14 = (uint64_t)this[5];
  if (v14) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v14, v2);
  }
  uint64_t v15 = (atomic_uchar *)this[3];
  this[3] = 0;
  if (v15) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v15, v2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::AsyncPDFRenderer::~AsyncPDFRenderer(this);

  WTF::fastFree(v1, v2);
}

void sub_198E3E7D0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = *(void *)(v2 + 136);
  if (v4) {
    WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *(void *)(v2 + 128);
  if (v5) {
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  uint64_t v6 = *(void *)(v2 + 120);
  if (v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v6, a2);
  }
  uint64_t v7 = *(void *)(v2 + 112);
  if (v7) {
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(v7, a2);
  }
  uint64_t v8 = *(void *)(v2 + 104);
  if (v8) {
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(v8, a2);
  }
  uint64_t v9 = *(WTF **)(v2 + 88);
  if (v9)
  {
    do
    {
      uint64_t v10 = (WTF *)*((void *)v9 + 3);
      WTF::fastFree(v9, a2);
      uint64_t v9 = v10;
    }
    while (v10);
  }
  uint64_t v11 = *(void *)(v2 + 80);
  if (v11) {
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  uint64_t v12 = *(void *)(v2 + 64);
  if (v12) {
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(v12, a2);
  }
  uint64_t v13 = *(unsigned int **)(v2 + 56);
  *(void *)(v2 + 56) = 0;
  if (v13 && atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v13 + 2);
    (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(v2 + 48);
  if (v14) {
    WTF::fastFree((WTF *)(v14 - 16), a2);
  }
  uint64_t v15 = *(void *)(v2 + 40);
  if (v15) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v15, a2);
  }
  uint64_t v16 = *(atomic_uchar **)(v2 + 24);
  *(void *)(v2 + 24) = 0;
  if (v16) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v16, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AsyncPDFRenderer::teardown(WebKit::AsyncPDFRenderer *this)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(v2);
  uint64_t v5 = result;
  uint64_t v6 = v4;
  if (v2) {
    uint64_t v7 = v2 + 24 * *(unsigned int *)(v2 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != result)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v5 + 16) + 832))(*(void *)(v5 + 16));
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 24))(result, 0);
      }
      while (1)
      {
        v5 += 24;
        if ((void *)v5 == v6) {
          break;
        }
        if (*(_OWORD *)v5 != 0 && *(void *)(v5 + 8) != -1) {
          goto LABEL_14;
        }
      }
      uint64_t v5 = (uint64_t)v6;
LABEL_14:
      ;
    }
    while (v5 != v7);
    uint64_t v2 = *((void *)this + 5);
  }
  if (v2)
  {
    *((void *)this + 5) = 0;
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v2, v4);
  }
  return result;
}

atomic_uchar *WebKit::AsyncPDFRenderer::releaseMemory(atomic_uchar *this)
{
  uint64_t v1 = (atomic_uchar *)*((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = (uint64_t)this;
    this = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v17, v1, *((void *)this + 4));
    uint64_t v3 = v17;
    if (v17)
    {
      uint64_t v4 = *(void *)(v2 + 40);
      uint64_t v5 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(v4);
      uint64_t v7 = v5;
      uint64_t v8 = v6;
      if (v4) {
        v4 += 24 * *(unsigned int *)(v4 - 4);
      }
      if (v4 != v5)
      {
        do
        {
          uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(v7 + 16) + 832))(*(void *)(v7 + 16));
          if (v9)
          {
            v16[0] = (*(float (**)(uint64_t))(*(void *)v9 + 80))(v9);
            v16[1] = v10;
            void v16[2] = v11;
            v16[3] = v12;
            (*((void (**)(void *__return_ptr, atomic_uchar **, void, void))*v3 + 20))(v15, v3, *(void *)v7, *(void *)(v7 + 8));
            WebKit::AsyncPDFRenderer::removePagePreviewsOutsideCoverageRect((atomic_uchar *)v2, (uint64_t)v16, (uint64_t)v15);
            std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v13);
          }
          while (1)
          {
            v7 += 24;
            if ((void *)v7 == v8) {
              break;
            }
            if (*(_OWORD *)v7 != 0 && *(void *)(v7 + 8) != -1) {
              goto LABEL_15;
            }
          }
          uint64_t v7 = (uint64_t)v8;
LABEL_15:
          ;
        }
        while (v7 != v4);
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(v3[1], v6);
    }
  }
  return this;
}

void sub_198E3EB80(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 8), v11);
  _Unwind_Resume(a1);
}

atomic_uchar *WebKit::AsyncPDFRenderer::removePagePreviewsOutsideCoverageRect(atomic_uchar *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (atomic_uchar *)*((void *)result + 3);
  if (!v4) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v86, v4, *((void *)result + 4));
  uint64_t v7 = v86;
  if (!v86) {
    return result;
  }
  std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](v82, a3);
  (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t, unsigned char *))(*(void *)v7 + 48))(&v83, v7, a2, v82);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v82, v8);
  uint64_t v81 = 0;
  int v11 = (uint64_t *)(v6 + 136);
  uint64_t v10 = *((void *)v6 + 17);
  if (!v10)
  {
    uint64_t v14 = 0;
    uint64_t v12 = 0;
LABEL_12:
    uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
    goto LABEL_13;
  }
  uint64_t v12 = *(unsigned int *)(v10 - 4);
  uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
  if (!*(_DWORD *)(v10 - 12))
  {
    uint64_t v14 = (uint64_t *)(v10 + 16 * v12);
    goto LABEL_12;
  }
  uint64_t v14 = (uint64_t *)*((void *)v6 + 17);
  if (v12)
  {
    uint64_t v15 = 16 * v12;
    uint64_t v14 = (uint64_t *)*((void *)v6 + 17);
    while ((unint64_t)*v14 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v14 += 2;
      v15 -= 16;
      if (!v15)
      {
        uint64_t v14 = v13;
        break;
      }
    }
  }
LABEL_13:
  if (v10) {
    uint64_t v16 = (uint64_t *)(v10 + 16 * *(unsigned int *)(v10 - 4));
  }
  else {
    uint64_t v16 = 0;
  }
  if (v16 != v14)
  {
    while (1)
    {
      uint64_t v17 = *v14;
      uint64_t v18 = (uint64_t)v81;
      if (v81
        || (WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand((uint64_t *)&v81),
            (uint64_t v18 = (uint64_t)v81) != 0))
      {
        int v19 = *(_DWORD *)(v18 - 8);
      }
      else
      {
        int v19 = 0;
      }
      unint64_t v20 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
      unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
      uint64_t v9 = (uint64_t *)(v18 + 8 * v23);
      uint64_t v24 = *v9;
      if (*v9 != -1)
      {
        uint64_t v25 = 0;
        int v26 = 1;
        while (v24 != v17)
        {
          if (v24 == -2) {
            uint64_t v25 = v9;
          }
          unsigned int v23 = (v23 + v26) & v19;
          uint64_t v9 = (uint64_t *)(v18 + 8 * v23);
          uint64_t v24 = *v9;
          ++v26;
          if (*v9 == -1)
          {
            if (v25)
            {
              *uint64_t v25 = -1;
              --*((_DWORD *)v81 - 4);
              uint64_t v9 = v25;
            }
            goto LABEL_28;
          }
        }
        goto LABEL_34;
      }
LABEL_28:
      *uint64_t v9 = v17;
      uint64_t v27 = (uint64_t)v81;
      int v28 = v81 ? *((_DWORD *)v81 - 3) + 1 : 1;
      *((_DWORD *)v81 - 3) = v28;
      uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
      unint64_t v30 = *(unsigned int *)(v27 - 4);
      if (v30 > 0x400) {
        break;
      }
      if (3 * v30 <= 4 * v29) {
        goto LABEL_33;
      }
LABEL_34:
      uint64_t v31 = v14 + 2;
      uint64_t v14 = v13;
      if (v31 != v13)
      {
        uint64_t v14 = v31;
        while ((unint64_t)*v14 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v14 += 2;
          if (v14 == v13)
          {
            uint64_t v14 = v13;
            break;
          }
        }
      }
      if (v14 == v16) {
        goto LABEL_44;
      }
    }
    if (v30 > 2 * v29) {
      goto LABEL_34;
    }
LABEL_33:
    WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand((uint64_t *)&v81);
    goto LABEL_34;
  }
LABEL_44:
  if (v85)
  {
    uint64_t v32 = v83;
    uint64_t v33 = (WTF *)((char *)v83 + 40 * v85);
    do
    {
      uint64_t v34 = (uint64_t)v81;
      if (v81)
      {
        unsigned int v35 = *((_DWORD *)v81 - 2);
        unint64_t v36 = *(void *)v32 + ~(*(void *)v32 << 32);
        unint64_t v37 = (v36 ^ (v36 >> 22)) + ~((v36 ^ (v36 >> 22)) << 13);
        unint64_t v38 = (9 * (v37 ^ (v37 >> 8))) ^ ((9 * (v37 ^ (v37 >> 8))) >> 15);
        uint64_t v39 = v35 & (((v38 + ~(v38 << 27)) >> 31) ^ (v38 + ~(v38 << 27)));
        uint64_t v40 = v81[v39];
        if (v40 != *(void *)v32)
        {
          int v41 = 1;
          while (v40 != -1)
          {
            uint64_t v39 = (v39 + v41) & v35;
            uint64_t v40 = v81[v39];
            ++v41;
            if (v40 == *(void *)v32) {
              goto LABEL_53;
            }
          }
          uint64_t v39 = *((unsigned int *)v81 - 1);
        }
LABEL_53:
        uint64_t v42 = *((unsigned int *)v81 - 1);
        if (v39 != v42)
        {
          v81[v39] = -2;
          int v43 = *(_DWORD *)(v34 - 12) - 1;
          ++*(_DWORD *)(v34 - 16);
          *(_DWORD *)(v34 - 12) = v43;
          if (6 * v43 < v42 && v42 >= 9) {
            WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash((uint64_t *)&v81, v42 >> 1);
          }
        }
      }
      uint64_t v32 = (WTF *)((char *)v32 + 40);
    }
    while (v32 != v33);
  }
  uint64_t v45 = (uint64_t)v81;
  if (v81)
  {
    uint64_t v46 = *((unsigned int *)v81 - 1);
    int v47 = &v81[v46];
    if (*((_DWORD *)v81 - 3))
    {
      uint64_t v48 = v81;
      if (v46)
      {
        uint64_t v49 = 8 * v46;
        uint64_t v48 = v81;
        while ((unint64_t)*v48 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v48;
          v49 -= 8;
          if (!v49)
          {
            uint64_t v48 = v47;
            goto LABEL_71;
          }
        }
      }
      goto LABEL_71;
    }
    uint64_t v48 = &v81[v46];
  }
  else
  {
    uint64_t v48 = 0;
    uint64_t v46 = 0;
  }
  int v47 = &v81[v46];
LABEL_71:
  if (v81) {
    uint64_t v50 = &v81[*((unsigned int *)v81 - 1)];
  }
  else {
    uint64_t v50 = 0;
  }
  if (v50 != v48)
  {
    int64_t v51 = (uint64_t *)(v6 + 128);
    while (1)
    {
      uint64_t v52 = *v48;
      uint64_t v53 = *v51;
      uint64_t v54 = WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned long>>,unsigned long>(*v51, *v48);
      uint64_t v9 = v54;
      if (v53)
      {
        BOOL v55 = (uint64_t *)(v53 + 40 * *(unsigned int *)(v53 - 4));
        if (v55 != v54) {
          goto LABEL_81;
        }
      }
      else if (v54)
      {
        BOOL v55 = 0;
LABEL_81:
        if (v55 != v54) {
          WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::remove(v51, v54);
        }
      }
      uint64_t v56 = *v11;
      if (!*v11) {
        goto LABEL_112;
      }
      unsigned int v57 = *(_DWORD *)(v56 - 8);
      unint64_t v58 = (v52 + ~(v52 << 32)) ^ ((unint64_t)(v52 + ~(v52 << 32)) >> 22);
      unint64_t v59 = 9 * ((v58 + ~(v58 << 13)) ^ ((v58 + ~(v58 << 13)) >> 8));
      unint64_t v60 = (v59 ^ (v59 >> 15)) + ~((v59 ^ (v59 >> 15)) << 27);
      uint64_t v61 = v57 & ((v60 >> 31) ^ v60);
      uint64_t v62 = *(void *)(v56 + 16 * v61);
      if (v62 != v52)
      {
        int v63 = 1;
        while (v62 != -1)
        {
          uint64_t v61 = (v61 + v63) & v57;
          uint64_t v62 = *(void *)(v56 + 16 * v61);
          ++v63;
          if (v62 == v52) {
            goto LABEL_90;
          }
        }
        uint64_t v61 = *(unsigned int *)(v56 - 4);
      }
LABEL_90:
      if (v61 == *(_DWORD *)(v56 - 4)) {
        goto LABEL_112;
      }
      uint64_t v64 = (void *)(v56 + 16 * v61);
      uint64_t v65 = v64[1];
      *uint64_t v64 = -2;
      v64[1] = 0;
      if (v65)
      {
        char v66 = 0;
        uint64_t v67 = *(void *)(v65 + 8);
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v67, (unsigned __int8 *)&v66, 1u, memory_order_acquire, memory_order_acquire);
        if (v66) {
          MEMORY[0x19972E8D0](v67, v9);
        }
        uint64_t v68 = *(void *)(v67 + 8);
        uint64_t v69 = v68 - 1;
        *(void *)(v67 + 8) = v68 - 1;
        if (v68 == 1)
        {
          uint64_t v80 = *(void *)(v67 + 16);
          uint64_t v70 = *(void *)(v67 + 24);
          *(void *)(v67 + 24) = 0;
          BOOL v71 = v80 != 0;
        }
        else
        {
          uint64_t v70 = 0;
          BOOL v71 = 1;
        }
        int v72 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v67, (unsigned __int8 *)&v72, 0, memory_order_release, memory_order_relaxed);
        if (v72 == 1)
        {
          if (!v69) {
            goto LABEL_98;
          }
        }
        else
        {
          WTF::Lock::unlockSlow((WTF::Lock *)v67);
          if (!v69)
          {
LABEL_98:
            if (v70) {
              (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
            }
            if (!v71) {
              WTF::fastFree((WTF *)v67, v9);
            }
          }
        }
      }
      ++*(_DWORD *)(*v11 - 16);
      uint64_t v73 = *v11;
      if (*v11) {
        int v74 = *(_DWORD *)(v73 - 12) - 1;
      }
      else {
        int v74 = -1;
      }
      *(_DWORD *)(v73 - 12) = v74;
      uint64_t v75 = *v11;
      if (*v11)
      {
        unsigned int v76 = 6 * *(_DWORD *)(v75 - 12);
        unsigned int v77 = *(_DWORD *)(v75 - 4);
        if (v76 < v77 && v77 >= 9) {
          WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(v11, v77 >> 1);
        }
      }
LABEL_112:
      uint64_t v79 = v48 + 1;
      uint64_t v48 = v47;
      if (v79 != v47)
      {
        uint64_t v48 = v79;
        while ((unint64_t)*v48 >= 0xFFFFFFFFFFFFFFFELL)
        {
          if (++v48 == v47)
          {
            uint64_t v48 = v47;
            break;
          }
        }
      }
      if (v48 == v50)
      {
        uint64_t v45 = (uint64_t)v81;
        break;
      }
    }
  }
  if (v45) {
    WTF::fastFree((WTF *)(v45 - 16), v9);
  }
  uint64_t result = (atomic_uchar *)v83;
  if (v83)
  {
    int v83 = 0;
    int v84 = 0;
    uint64_t result = (atomic_uchar *)WTF::fastFree((WTF *)result, v9);
  }
  if (v86) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(v86 + 8), v9);
  }
  return result;
}

void sub_198E3F208(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18)
{
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a11, a2);
  if (a18) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(a18 + 8), v19);
  }
  _Unwind_Resume(a1);
}

_DWORD *WebKit::AsyncPDFRenderer::startTrackingLayer(WebKit::AsyncPDFRenderer *this, WebCore::GraphicsLayer *a2)
{
  ++*((_DWORD *)a2 + 2);
  uint64_t v4 = (*(uint64_t (**)(WebCore::GraphicsLayer *))(*(void *)a2 + 832))(a2);
  uint64_t v5 = v4;
  if (v4)
  {
    (*(void (**)(uint64_t, WebKit::AsyncPDFRenderer *))(*(void *)v4 + 24))(v4, this);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
    uint64_t result = (*(void *(**)(long long *__return_ptr, WebCore::GraphicsLayer *))(*(void *)a2 + 32))(&v41, a2);
    if (!v42)
    {
LABEL_60:
      __break(1u);
      return result;
    }
    uint64_t v8 = (uint64_t *)((char *)this + 48);
    uint64_t v9 = *((void *)this + 6);
    if (v9
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)this + 6),
          (uint64_t v9 = *v8) != 0))
    {
      int v10 = *(_DWORD *)(v9 - 8);
    }
    else
    {
      int v10 = 0;
    }
    unint64_t v11 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
    unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    unsigned int v14 = v10 & ((v13 >> 31) ^ v13);
    uint64_t v15 = (uint64_t *)(v9 + 24 * v14);
    uint64_t v16 = *v15;
    if (*v15)
    {
      uint64_t v17 = 0;
      int v18 = 1;
      do
      {
        if (v16 == v6)
        {
          *(_OWORD *)(v15 + 1) = v41;
          goto LABEL_24;
        }
        if (v16 == -1) {
          uint64_t v17 = v15;
        }
        unsigned int v14 = (v14 + v18) & v10;
        uint64_t v15 = (uint64_t *)(v9 + 24 * v14);
        uint64_t v16 = *v15;
        ++v18;
      }
      while (*v15);
      if (v17)
      {
        *uint64_t v17 = 0;
        v17[1] = 0;
        _DWORD v17[2] = 0;
        --*(_DWORD *)(*v8 - 16);
        uint64_t v15 = v17;
      }
    }
    *uint64_t v15 = v6;
    *(_OWORD *)(v15 + 1) = v41;
    uint64_t v19 = *v8;
    if (*v8) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 12) = v20;
    uint64_t v21 = *v8;
    if (*v8) {
      int v22 = *(_DWORD *)(v21 - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
    unint64_t v24 = *(unsigned int *)(v21 - 4);
    if (v24 <= 0x400)
    {
      if (3 * v24 > 4 * v23) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
    if (v24 <= 2 * v23) {
LABEL_23:
    }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)this + 6);
  }
LABEL_24:
  uint64_t result = (*(void *(**)(long long *__return_ptr, WebCore::GraphicsLayer *))(*(void *)a2 + 32))(&v41, a2);
  if (!v42) {
    goto LABEL_60;
  }
  uint64_t v27 = *((void *)this + 5);
  uint64_t v25 = (uint64_t *)((char *)this + 40);
  uint64_t v26 = v27;
  if (v27
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(v25),
        (uint64_t v26 = *v25) != 0))
  {
    int v28 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    int v28 = 0;
  }
  unsigned int v43 = -1640531527;
  __int16 v44 = 0;
  char v45 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v43, &v41);
  unsigned int v29 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v43) & v28;
  unint64_t v30 = (unint64_t *)(v26 + 24 * v29);
  unint64_t v32 = *v30;
  unint64_t v31 = v30[1];
  if (*(_OWORD *)v30 == 0)
  {
LABEL_36:
    *(_OWORD *)unint64_t v30 = v41;
    uint64_t result = (_DWORD *)v30[2];
    void v30[2] = (unint64_t)a2;
    if (result)
    {
      if (result[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 16))(result);
      }
      else {
        --result[2];
      }
    }
    uint64_t v35 = *v25;
    if (*v25) {
      int v36 = *(_DWORD *)(v35 - 12) + 1;
    }
    else {
      int v36 = 1;
    }
    *(_DWORD *)(v35 - 12) = v36;
    uint64_t v37 = *v25;
    if (*v25) {
      int v38 = *(_DWORD *)(v37 - 12);
    }
    else {
      int v38 = 0;
    }
    uint64_t v39 = (*(_DWORD *)(v37 - 16) + v38);
    unint64_t v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 > 2 * v39) {
        return result;
      }
    }
    else if (3 * v40 > 4 * v39)
    {
      return result;
    }
    return (_DWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(v25);
  }
  uint64_t v33 = 0;
  int v34 = 1;
  while (__PAIR128__(v31, v32) != v41)
  {
    if (v31 == -1) {
      uint64_t v33 = v30;
    }
    unsigned int v29 = (v29 + v34) & v28;
    unint64_t v30 = (unint64_t *)(v26 + 24 * v29);
    unint64_t v32 = *v30;
    unint64_t v31 = v30[1];
    ++v34;
    if (*(_OWORD *)v30 == 0)
    {
      if (v33)
      {
        *uint64_t v33 = 0;
        v33[1] = 0;
        v33[2] = 0;
        --*(_DWORD *)(*v25 - 16);
        unint64_t v30 = v33;
      }
      goto LABEL_36;
    }
  }
  uint64_t result = (_DWORD *)v30[2];
  void v30[2] = (unint64_t)a2;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 16))(result);
    }
    else {
      --result[2];
    }
  }
  return result;
}

void sub_198E3F6B8(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 16))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

void WebKit::AsyncPDFRenderer::generatePreviewImageForPage(WebKit::AsyncPDFRenderer *this, unint64_t a2, float a3)
{
  uint64_t v4 = (atomic_uchar *)*((void *)this + 3);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v44, v4, *((void *)this + 4));
    uint64_t v8 = v44;
    if (v44)
    {
      uint64_t v9 = *(void *)(v44 + 16);
      int v10 = *(const void **)(v9 + 296);
      if (!v10)
      {
LABEL_35:
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 8), v7);
        return;
      }
      CFRetain(*(CFTypeRef *)(v9 + 296));
      unint64_t v12 = (uint64_t *)((char *)this + 128);
      uint64_t v11 = *((void *)this + 16);
      if (v11)
      {
        int v13 = *(_DWORD *)(v11 - 8);
        unint64_t v14 = (~(a2 << 32) + a2) ^ ((~(a2 << 32) + a2) >> 22);
        unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
        unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
        uint64_t v18 = *(void *)(v11 + 40 * v17);
        if (v18 == a2)
        {
LABEL_9:
          CFRelease(v10);
          goto LABEL_34;
        }
        int v19 = 1;
        while (v18 != -1)
        {
          unsigned int v17 = (v17 + v19) & v13;
          uint64_t v18 = *(void *)(v11 + 40 * v17);
          ++v19;
          if (v18 == a2) {
            goto LABEL_9;
          }
        }
      }
      WebKit::UnifiedPDFPlugin::layoutBoundsForPageAtIndex(*(WebKit::UnifiedPDFPlugin **)(v8 + 16), a2);
      int v21 = v20;
      int v23 = v22;
      uint64_t v24 = *v12;
      if (*v12
        || (WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand((uint64_t *)this + 16),
            (uint64_t v24 = *v12) != 0))
      {
        int v25 = *(_DWORD *)(v24 - 8);
      }
      else
      {
        int v25 = 0;
      }
      unint64_t v26 = (~(a2 << 32) + a2) ^ ((~(a2 << 32) + a2) >> 22);
      unint64_t v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
      unint64_t v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
      unsigned int v29 = v25 & ((v28 >> 31) ^ v28);
      unint64_t v30 = (unint64_t *)(v24 + 40 * v29);
      unint64_t v31 = *v30;
      if (*v30 != -1)
      {
        unint64_t v32 = 0;
        int v33 = 1;
        do
        {
          if (v31 == a2)
          {
            v30[1] = a2;
            void v30[2] = 0;
            *((_DWORD *)v30 + 6) = v21;
            *((_DWORD *)v30 + 7) = v23;
            *((float *)v30 + 8) = a3;
            goto LABEL_31;
          }
          if (v31 == -2) {
            unint64_t v32 = v30;
          }
          unsigned int v29 = (v29 + v33) & v25;
          unint64_t v30 = (unint64_t *)(v24 + 40 * v29);
          unint64_t v31 = *v30;
          ++v33;
        }
        while (*v30 != -1);
        if (v32)
        {
          *unint64_t v32 = -1;
          *(_OWORD *)(v32 + 1) = 0u;
          *(_OWORD *)(v32 + 3) = 0u;
          --*(_DWORD *)(*v12 - 16);
          unint64_t v30 = v32;
        }
      }
      unint64_t *v30 = a2;
      v30[1] = a2;
      void v30[2] = 0;
      *((_DWORD *)v30 + 6) = v21;
      *((_DWORD *)v30 + 7) = v23;
      *((float *)v30 + 8) = a3;
      uint64_t v34 = *v12;
      if (*v12) {
        int v35 = *(_DWORD *)(v34 - 12) + 1;
      }
      else {
        int v35 = 1;
      }
      *(_DWORD *)(v34 - 12) = v35;
      uint64_t v36 = *v12;
      if (*v12) {
        int v37 = *(_DWORD *)(v36 - 12);
      }
      else {
        int v37 = 0;
      }
      uint64_t v38 = (*(_DWORD *)(v36 - 16) + v37);
      unint64_t v39 = *(unsigned int *)(v36 - 4);
      if (v39 > 0x400)
      {
        if (v39 > 2 * v38) {
          goto LABEL_31;
        }
      }
      else if (3 * v39 > 4 * v38)
      {
LABEL_31:
        uint64_t v40 = *((void *)this + 7);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 2);
        uint64_t v41 = WTF::fastMalloc((WTF *)0x38);
        *(void *)uint64_t v41 = &unk_1EE9D9630;
        *(void *)(v41 + 8) = this;
        *(void *)(v41 + 16) = v10;
        *(void *)(v41 + 24) = a2;
        *(void *)(v41 + 32) = 0;
        *(_DWORD *)(v41 + 40) = v21;
        *(_DWORD *)(v41 + 44) = v23;
        *(float *)(v41 + 48) = a3;
        uint64_t v43 = v41;
        MEMORY[0x19972E4D0](v40, &v43);
        uint64_t v42 = v43;
        uint64_t v43 = 0;
        if (v42) {
          (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
        }
        uint64_t v8 = v44;
LABEL_34:
        if (!v8) {
          return;
        }
        goto LABEL_35;
      }
      WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand((uint64_t *)this + 16);
      goto LABEL_31;
    }
  }
}

void sub_198E3FA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  CFRelease(v10);
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(a10 + 8), v12);
  }
  _Unwind_Resume(a1);
}

BOOL WebKit::AsyncPDFRenderer::renderInfoIsValidForTile(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v20[0] = (*(float (**)(uint64_t, void))(*(void *)a2 + 216))(a2, a3[1]);
  v20[1] = v8;
  v20[2] = v9;
  v20[3] = v10;
  LOBYTE(v15) = 0;
  char v16 = 0;
  WebKit::AsyncPDFRenderer::renderInfoForTile(v17, a1, a2, a3, (const WebCore::FloatRect *)v20, &v15);
  BOOL v12 = WebKit::AsyncPDFRenderer::TileRenderInfo::equivalentForPainting(a4, (uint64_t)v17);
  int v13 = v18;
  if (v18)
  {
    uint64_t v18 = 0;
    int v19 = 0;
    WTF::fastFree(v13, v11);
  }
  return v12;
}

atomic_uchar *WebKit::AsyncPDFRenderer::renderInfoForTile(atomic_uchar *result, void *a2, uint64_t a3, void *a4, const WebCore::FloatRect *a5, long long *a6)
{
  uint64_t v7 = result;
  int v8 = (atomic_uchar *)a2[3];
  if (v8
    && (result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v47, v8, a2[4]), (unint64_t v14 = (atomic_uchar **)v47) != 0))
  {
    uint64_t v15 = *(void *)(v47 + 16);
    char v16 = *(const void **)(v15 + 296);
    if (v16)
    {
      CFRetain(*(CFTypeRef *)(v15 + 296));
      float v17 = (*(float (**)(uint64_t))(*(void *)a3 + 328))(a3);
      __dst[0] = (float)(1.0 / v17);
      __dst[1] = 0.0;
      __dst[2] = 0.0;
      __dst[3] = __dst[0];
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)__dst, a5);
      v46[0] = v18;
      v46[1] = v19;
      v46[2] = v20;
      v46[3] = v21;
      LOBYTE(__dst[0]) = 0;
      LOBYTE(v49) = 0;
      uint64_t v22 = a2[6];
      if (v22)
      {
        int v23 = *(_DWORD *)(v22 - 8);
        unint64_t v24 = *a4 + ~(*a4 << 32);
        unint64_t v25 = (v24 ^ (v24 >> 22)) + ~((v24 ^ (v24 >> 22)) << 13);
        unint64_t v26 = (9 * (v25 ^ (v25 >> 8))) ^ ((9 * (v25 ^ (v25 >> 8))) >> 15);
        unsigned int v27 = v23 & (((v26 + ~(v26 << 27)) >> 31) ^ (v26 + ~(v26 << 27)));
        uint64_t v28 = *(void *)(v22 + 24 * v27);
        if (v28 == *a4)
        {
LABEL_9:
          (*((void (**)(WTF **__return_ptr, atomic_uchar **, void, void))*v14 + 20))(&v42, v14, *(void *)(v22 + 24 * v27 + 8), *(void *)(v22 + 24 * v27 + 16));
          std::__optional_storage_base<WebKit::PDFLayoutRow,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::PDFLayoutRow,false>>(__dst, &v42);
          std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v42, v30);
        }
        else
        {
          int v29 = 1;
          while (v28)
          {
            unsigned int v27 = (v27 + v29) & v23;
            uint64_t v28 = *(void *)(v22 + 24 * v27);
            ++v29;
            if (v28 == *a4) {
              goto LABEL_9;
            }
          }
        }
      }
      std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](v41, (uint64_t)__dst);
      (*((void (**)(WTF **__return_ptr, atomic_uchar **, _DWORD *, unsigned char *, float))*v14 + 7))(&v42, v14, v46, v41, v17);
      std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v41, v31);
      long long v32 = *a6;
      *(_OWORD *)uint64_t v7 = *(_OWORD *)a5;
      *((_OWORD *)v7 + 1) = v32;
      v7[32] = *((unsigned char *)a6 + 16);
      WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v7 + 40), (long long **)&v42);
      *(_OWORD *)(v7 + 56) = v44;
      *((_DWORD *)v7 + 18) = v45;
      uint64_t v34 = v42;
      if (v42)
      {
        uint64_t v42 = 0;
        int v43 = 0;
        WTF::fastFree(v34, v33);
      }
      std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)__dst, v33);
      CFRelease(v16);
    }
    else
    {
      v7[32] = 0;
      *(void *)uint64_t v7 = 0;
      *((void *)v7 + 1) = 0;
      v7[16] = 0;
      *((void *)v7 + 6) = 0;
      *((void *)v7 + 7) = 0;
      *((void *)v7 + 5) = 0;
      __asm { FMOV            V0.2S, #1.0 }
      *((void *)v7 + 8) = _D0;
      *((_DWORD *)v7 + 18) = 1065353216;
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(v14[1], v13);
  }
  else
  {
    v7[32] = 0;
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    v7[16] = 0;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 5) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((void *)v7 + 8) = _D0;
    *((_DWORD *)v7 + 18) = 1065353216;
  }
  return result;
}

void sub_198E3FE2C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15, a2);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a23, v26);
  CFRelease(v24);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(v23 + 8), v27);
  _Unwind_Resume(a1);
}

void sub_198E3FE98()
{
}

BOOL WebKit::AsyncPDFRenderer::TileRenderInfo::equivalentForPainting(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 != *(float *)a2 || *(float *)(a1 + 4) != *(float *)(a2 + 4)) {
    return 0;
  }
  if (*(float *)(a1 + 8) != *(float *)(a2 + 8) || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
    return 0;
  }
  unint64_t v4 = *(unsigned int *)(a1 + 52);
  if (v4 != *(_DWORD *)(a2 + 52)) {
    return 0;
  }
  if (!v4)
  {
LABEL_34:
    BOOL v21 = *(float *)(a1 + 56) == *(float *)(a2 + 56) && *(float *)(a1 + 60) == *(float *)(a2 + 60);
    if (v21 && *(float *)(a1 + 64) == *(float *)(a2 + 64) && *(float *)(a1 + 68) == *(float *)(a2 + 68)) {
      return *(float *)(a1 + 72) == *(float *)(a2 + 72);
    }
    return 0;
  }
  uint64_t v5 = *(float32x2_t **)(a1 + 40);
  uint64_t v6 = *(float32x2_t **)(a2 + 40);
  if (*v5 != *v6) {
    return 0;
  }
  if (v5[1].f32[0] != v6[1].f32[0] || v5[1].f32[1] != v6[1].f32[1]) {
    return 0;
  }
  if (v5[2].f32[0] != v6[2].f32[0] || v5[2].f32[1] != v6[2].f32[1]) {
    return 0;
  }
  uint64_t v9 = 0;
  if (v5[3].f32[0] == v6[3].f32[0] && v5[3].f32[1] == v6[3].f32[1])
  {
    BOOL v10 = 0;
    uint64_t v11 = v6 + 8;
    BOOL v12 = v5 + 8;
    unint64_t v13 = 1;
    do
    {
      int32x2_t v14 = vceq_f32(v12[-4], v11[-4]);
      if ((v14.i32[0] & v14.i32[1] & 1) == 0) {
        break;
      }
      BOOL v10 = v13 >= v4;
      if (v4 == v13) {
        break;
      }
      if (*(void *)&v12[-3] != *(void *)&v11[-3]) {
        break;
      }
      int32x2_t v15 = vceq_f32(v12[-2], v11[-2]);
      if ((v15.i32[0] & v15.i32[1] & 1) == 0) {
        break;
      }
      int32x2_t v16 = vceq_f32(v12[-1], v11[-1]);
      if ((v16.i32[0] & v16.i32[1] & 1) == 0) {
        break;
      }
      float32x2_t v17 = *v12;
      v12 += 5;
      float32x2_t v18 = v17;
      float32x2_t v19 = *v11;
      v11 += 5;
      int32x2_t v20 = vceq_f32(v18, v19);
      ++v13;
    }
    while ((v20.i32[0] & v20.i32[1] & 1) != 0);
    if (!v10) {
      return 0;
    }
    goto LABEL_34;
  }
  return v9;
}

unint64_t WebKit::AsyncPDFRenderer::enqueueTilePaintForTileGridRepaint(void *a1, const FloatRect *a2, uint64_t a3, uint64_t a4, float *a5)
{
  v35[0] = a3;
  v35[1] = a4;
  int v8 = *(unsigned __int8 *)(WebKit::AsyncPDFRenderer::revalidationStateForGrid((uint64_t)a1, a3) + 1);
  uint64_t v9 = a1 + 13;
  BOOL v10 = (float *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(a1 + 13, (WebKit::TileForGrid *)v35);
  uint64_t v11 = (float *)a1[13];
  if (v11) {
    v11 += 26 * *((unsigned int *)v11 - 1);
  }
  if (v11 != v10 && v10[6] == *a5 && v10[7] == a5[1])
  {
    BOOL v13 = v10[8] == a5[2] && v10[9] == a5[3];
    if (v13 && WebKit::AsyncPDFRenderer::renderInfoIsValidForTile(a1, (uint64_t)a2, v35, (uint64_t)(v10 + 6))) {
      return 0;
    }
  }
  int32x2_t v15 = a1 + 13;
  if (!v8)
  {
    unsigned int v27 = (void *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(v15, (WebKit::TileForGrid *)v35);
    if (*v9)
    {
      uint64_t v28 = *v9 + 104 * *(unsigned int *)(*v9 - 4);
      if ((void *)v28 == v27) {
        goto LABEL_37;
      }
    }
    else
    {
      if (!v27) {
        goto LABEL_37;
      }
      uint64_t v28 = 0;
    }
    if ((void *)v28 != v27) {
      WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::remove(a1 + 13, v27);
    }
    goto LABEL_37;
  }
  uint64_t v16 = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(v15, (WebKit::TileForGrid *)v35);
  WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::take((WTF *)v31, a1 + 13, v16);
  WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::add<WebKit::AsyncPDFRenderer::RenderedTile>((uint64_t)&v30, a1 + 14, (WebKit::TileForGrid *)v35, v31);
  float32x2_t v18 = v33;
  if (v33)
  {
    int v33 = 0;
    int v34 = 0;
    WTF::fastFree(v18, v17);
  }
  uint64_t v19 = v31[0];
  v31[0] = 0;
  if (!v19) {
    goto LABEL_37;
  }
  char v20 = 0;
  uint64_t v21 = *(void *)(v19 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
  if (v20) {
    MEMORY[0x19972E8D0](v21);
  }
  uint64_t v22 = *(void *)(v21 + 8);
  int v23 = 1;
  uint64_t v24 = v22 - 1;
  *(void *)(v21 + 8) = v22 - 1;
  if (v22 == 1)
  {
    uint64_t v29 = *(void *)(v21 + 16);
    uint64_t v25 = *(void *)(v21 + 24);
    *(void *)(v21 + 24) = 0;
    BOOL v26 = v29 != 0;
  }
  else
  {
    uint64_t v25 = 0;
    BOOL v26 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
  if (v23 == 1)
  {
    if (!v24)
    {
LABEL_26:
      if (v25) {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
      if (!v26) {
        WTF::fastFree((WTF *)v21, v17);
      }
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
    if (!v24) {
      goto LABEL_26;
    }
  }
LABEL_37:
  LOBYTE(v31[0]) = 0;
  char v32 = 0;
  return WebKit::AsyncPDFRenderer::enqueueTilePaintIfNecessary(a1, a2, (uint64_t)v35, (const WebCore::FloatRect *)a5, (WebCore *)v31);
}

void sub_198E40278(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19)
{
  if (a18) {
    WTF::fastFree(a18, a2);
  }
  if (a12)
  {
    char v20 = 0;
    uint64_t v21 = *(void *)(a12 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
    if (v20) {
      MEMORY[0x19972E8D0](v21);
    }
    uint64_t v22 = *(void *)(v21 + 8);
    int v23 = 1;
    uint64_t v24 = v22 - 1;
    *(void *)(v21 + 8) = v22 - 1;
    if (v22 == 1)
    {
      uint64_t v27 = *(void *)(v21 + 16);
      uint64_t v25 = *(void *)(v21 + 24);
      *(void *)(v21 + 24) = 0;
      BOOL v26 = v27 != 0;
    }
    else
    {
      uint64_t v25 = 0;
      BOOL v26 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
    if (v23 == 1)
    {
      if (v24) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v21);
      if (v24) {
        goto LABEL_14;
      }
    }
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    if (!v26) {
      WTF::fastFree((WTF *)v21, a2);
    }
  }
LABEL_14:
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AsyncPDFRenderer::revalidationStateForGrid(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 120);
  uint64_t v3 = *(void *)(a1 + 120);
  if (v3
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(a1 + 120), 0), (uint64_t v3 = *v4) != 0))
  {
    int v5 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    int v5 = 0;
  }
  unint64_t v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
  uint64_t v10 = v3 + 16 * v9;
  uint64_t v11 = *(void *)v10;
  if (!*(void *)v10)
  {
LABEL_12:
    *(void *)uint64_t v10 = a2;
    int32x2_t v14 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(void *)int32x2_t v14 = 0;
    *((void *)v14 + 1) = 0;
    uint64_t v22 = 0;
    std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>::reset[abi:sn180100]((WTF **)(v10 + 8), v14);
    std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>::reset[abi:sn180100](&v22, 0);
    uint64_t v15 = *v4;
    if (*v4) {
      int v16 = *(_DWORD *)(v15 - 12) + 1;
    }
    else {
      int v16 = 1;
    }
    *(_DWORD *)(v15 - 12) = v16;
    uint64_t v17 = *v4;
    if (*v4) {
      int v18 = *(_DWORD *)(v17 - 12);
    }
    else {
      int v18 = 0;
    }
    uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
    unint64_t v20 = *(unsigned int *)(v17 - 4);
    if (v20 > 0x400)
    {
      if (v20 > 2 * v19) {
        return *(void *)(v10 + 8);
      }
    }
    else if (3 * v20 > 4 * v19)
    {
      return *(void *)(v10 + 8);
    }
    uint64_t v10 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v4, (uint64_t *)v10);
    return *(void *)(v10 + 8);
  }
  BOOL v12 = 0;
  int v13 = 1;
  while (v11 != a2)
  {
    if (v11 == -1) {
      BOOL v12 = (void *)v10;
    }
    unsigned int v9 = (v9 + v13) & v5;
    uint64_t v10 = v3 + 16 * v9;
    uint64_t v11 = *(void *)v10;
    ++v13;
    if (!*(void *)v10)
    {
      if (v12)
      {
        *BOOL v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        uint64_t v10 = (uint64_t)v12;
      }
      goto LABEL_12;
    }
  }
  return *(void *)(v10 + 8);
}

uint64_t WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::add<WebKit::AsyncPDFRenderer::RenderedTile>(uint64_t a1, uint64_t *a2, WebKit::TileForGrid *this, uint64_t *a4)
{
  uint64_t v30 = a4;
  uint64_t v7 = *a2;
  if (*a2
    || (WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand(a2, 0), (uint64_t v7 = *a2) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  uint64_t result = WebKit::TileForGrid::computeHash(this);
  uint64_t v10 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = result & v8;
    uint64_t v13 = v7 + 104 * (result & v8);
    uint64_t v14 = *(void *)v13;
    if (!*(void *)v13 && !*(void *)(v13 + 8))
    {
      if (v10)
      {
        *(void *)(v10 + 96) = 0;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)uint64_t v10 = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        __asm { FMOV            V0.2S, #1.0 }
        *(void *)(v10 + 88) = _D0;
        *(_DWORD *)(v10 + 96) = 1065353216;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v13 = v10;
      }
      uint64_t result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>::translate<WebKit::TileForGrid const&,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>,WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>> WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::inlineAdd<WebKit::TileForGrid const&,WebKit::AsyncPDFRenderer::RenderedTile>(WebKit::TileForGrid const&,WebKit::AsyncPDFRenderer::RenderedTile &&)::{lambda(void)#1}>(v13, this, &v30);
      uint64_t v22 = *a2;
      if (*a2) {
        int v23 = *(_DWORD *)(v22 - 12) + 1;
      }
      else {
        int v23 = 1;
      }
      *(_DWORD *)(v22 - 12) = v23;
      uint64_t v26 = *a2;
      if (*a2) {
        int v27 = *(_DWORD *)(v26 - 12);
      }
      else {
        int v27 = 0;
      }
      uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
      unint64_t v29 = *(unsigned int *)(v26 - 4);
      if (v29 > 0x400)
      {
        if (v29 <= 2 * v28)
        {
LABEL_29:
          uint64_t result = (uint64_t)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand(a2, (_OWORD *)v13);
          uint64_t v13 = result;
          uint64_t v26 = *a2;
          if (*a2) {
            LODWORD(v29) = *(_DWORD *)(v26 - 4);
          }
          else {
            LODWORD(v29) = 0;
          }
        }
      }
      else if (3 * v29 <= 4 * v28)
      {
        goto LABEL_29;
      }
      uint64_t v25 = v26 + 104 * v29;
      char v24 = 1;
      goto LABEL_34;
    }
    if (v14 == *(void *)this
      && *(_DWORD *)(v13 + 8) == *((_DWORD *)this + 2)
      && *(_DWORD *)(v13 + 12) == *((_DWORD *)this + 3))
    {
      break;
    }
    if (v14 == -1) {
      uint64_t v10 = v7 + 104 * v12;
    }
    uint64_t result = i + v12;
  }
  uint64_t v16 = *a2;
  if (*a2) {
    unsigned int v17 = *(_DWORD *)(v16 - 4);
  }
  else {
    unsigned int v17 = 0;
  }
  char v24 = 0;
  uint64_t v25 = v16 + 104 * v17;
LABEL_34:
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v24;
  return result;
}

unint64_t WebKit::AsyncPDFRenderer::enqueueTilePaintIfNecessary(void *a1, const FloatRect *a2, uint64_t a3, const WebCore::FloatRect *a4, WebCore *this)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 16))
  {
    *(void *)&long long v99 = WebCore::enclosingIntRect(this, a2);
    *((void *)&v99 + 1) = v9;
    LOBYTE(v100) = 1;
    LOBYTE(v88) = 0;
    BYTE8(v89) = 0;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v88, (const WebCore::IntRect *)&v99);
    BYTE8(v89) = 1;
  }
  else
  {
    LOBYTE(v99) = 0;
    LOBYTE(v100) = 0;
    LOBYTE(v88) = 0;
    BYTE8(v89) = 0;
  }
  WebKit::AsyncPDFRenderer::renderInfoForTile((atomic_uchar *)&v80, a1, (uint64_t)a2, (void *)a3, a4, (long long *)&v88);
  if (!v85) {
    goto LABEL_13;
  }
  uint64_t v11 = a1 + 8;
  uint64_t v12 = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(a1 + 8, (WebKit::TileForGrid *)a3);
  uint64_t v13 = a1[8];
  if (v13) {
    v13 += 104 * *(unsigned int *)(v13 - 4);
  }
  if (v13 != v12)
  {
    if (*(unsigned __int8 *)(v12 + 56) | v82)
    {
      if (v82)
      {
        if (*(unsigned char *)(v12 + 56))
        {
          WebCore::FloatRect::unite((WebCore::FloatRect *)&v81, (const WebCore::FloatRect *)(v12 + 40));
        }
        else
        {
          LOBYTE(v81) = 0;
          unsigned __int8 v82 = 0;
        }
      }
      goto LABEL_15;
    }
    if (!WebKit::AsyncPDFRenderer::TileRenderInfo::equivalentForPainting(v12 + 24, (uint64_t)&v80)) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    goto LABEL_95;
  }
LABEL_15:
  uint64_t v10 = (atomic_uchar *)a1[3];
  if (!v10
    || (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v96, v10, a1[4]), (uint64_t v16 = v96) == 0))
  {
    unint64_t v30 = 0;
    LOBYTE(IdentifierInternal) = 0;
    goto LABEL_94;
  }
  uint64_t v17 = *(void *)(v96 + 16);
  int v18 = *(const void **)(v17 + 296);
  if (!v18)
  {
LABEL_35:
    unint64_t v30 = 0;
    LOBYTE(IdentifierInternal) = 0;
    goto LABEL_93;
  }
  CFRetain(*(CFTypeRef *)(v17 + 296));
  if (!v85)
  {
    CFRelease(v18);
    goto LABEL_35;
  }
  unint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  unint64_t v88 = IdentifierInternal;
  long long v89 = v80;
  long long v90 = v81;
  unsigned __int8 v91 = v82;
  WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v92, (long long **)&v83);
  long long v94 = v86;
  int v95 = v87;
  uint64_t v20 = *v11;
  if (*v11
    || (WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand(a1 + 8),
        (uint64_t v20 = *v11) != 0))
  {
    int v21 = *(_DWORD *)(v20 - 8);
  }
  else
  {
    int v21 = 0;
  }
  unsigned int v22 = WebKit::TileForGrid::computeHash((WebKit::TileForGrid *)a3);
  char v24 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v26 = v22 & v21;
    int v27 = (uint64_t *)(v20 + 104 * (v22 & v21));
    uint64_t v28 = *v27;
    if (!*v27 && !v27[1])
    {
      if (v24)
      {
        v24[12] = 0;
        *((_OWORD *)v24 + 4) = 0u;
        *((_OWORD *)v24 + 5) = 0u;
        *((_OWORD *)v24 + 2) = 0u;
        *((_OWORD *)v24 + 3) = 0u;
        *(_OWORD *)char v24 = 0u;
        *((_OWORD *)v24 + 1) = 0u;
        __asm { FMOV            V0.2S, #1.0 }
        v24[11] = _D0;
        *((_DWORD *)v24 + 24) = 1065353216;
        --*(_DWORD *)(*v11 - 16);
        int v27 = v24;
      }
      *(_OWORD *)int v27 = *(_OWORD *)a3;
      unsigned __int8 v101 = v91;
      long long v99 = v89;
      long long v44 = v89;
      long long v100 = v90;
      int v45 = v92;
      uint64_t v46 = v93;
      v92 = 0;
      uint64_t v93 = 0;
      int v98 = v95;
      long long v97 = v94;
      v27[2] = v88;
      long long v47 = v100;
      unsigned __int8 v48 = v101;
      *(_OWORD *)(v27 + 3) = v44;
      *((unsigned char *)v27 + 56) = v48;
      *(_OWORD *)(v27 + 5) = v47;
      uint64_t v49 = (WTF *)v27[8];
      if (v49)
      {
        v27[8] = 0;
        *((_DWORD *)v27 + 18) = 0;
        WTF::fastFree(v49, v23);
      }
      v27[8] = (uint64_t)v45;
      v27[9] = v46;
      *((_OWORD *)v27 + 5) = v97;
      *((_DWORD *)v27 + 24) = v98;
      uint64_t v50 = *v11;
      if (*v11) {
        int v51 = *(_DWORD *)(v50 - 12) + 1;
      }
      else {
        int v51 = 1;
      }
      *(_DWORD *)(v50 - 12) = v51;
      uint64_t v52 = *v11;
      if (*v11) {
        int v53 = *(_DWORD *)(v52 - 12);
      }
      else {
        int v53 = 0;
      }
      uint64_t v54 = (*(_DWORD *)(v52 - 16) + v53);
      unint64_t v55 = *(unsigned int *)(v52 - 4);
      if (v55 > 0x400)
      {
        if (v55 > 2 * v54) {
          goto LABEL_52;
        }
      }
      else if (3 * v55 > 4 * v54)
      {
        goto LABEL_52;
      }
      WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand(a1 + 8);
      goto LABEL_52;
    }
    if (v28 == *(void *)a3
      && *((_DWORD *)v27 + 2) == *(_DWORD *)(a3 + 8)
      && *((_DWORD *)v27 + 3) == *(_DWORD *)(a3 + 12))
    {
      break;
    }
    if (v28 == -1) {
      char v24 = (uint64_t *)(v20 + 104 * v26);
    }
    unsigned int v22 = i + v26;
  }
  uint64_t v31 = v20 + 104 * v26;
  int v34 = *(WTF **)(v31 + 64);
  uint64_t v33 = v31 + 64;
  char v32 = v34;
  *(void *)(v33 - 48) = v88;
  long long v35 = v89;
  long long v36 = v90;
  *(unsigned char *)(v33 - 8) = v91;
  *(_OWORD *)(v33 - 24) = v36;
  *(_OWORD *)(v33 - 40) = v35;
  if (v34)
  {
    *(void *)uint64_t v33 = 0;
    *(_DWORD *)(v33 + 8) = 0;
    WTF::fastFree(v32, v23);
  }
  int v37 = v92;
  v92 = 0;
  *(void *)uint64_t v33 = v37;
  *(_DWORD *)(v33 + 8) = v93;
  LODWORD(v37) = HIDWORD(v93);
  HIDWORD(v93) = 0;
  *(_DWORD *)(v33 + 12) = v37;
  uint64_t v38 = v20 + 104 * v26;
  long long v39 = v94;
  *(_DWORD *)(v38 + 96) = v95;
  *(_OWORD *)(v38 + 80) = v39;
LABEL_52:
  uint64_t v56 = v92;
  if (v92)
  {
    v92 = 0;
    LODWORD(v93) = 0;
    WTF::fastFree(v56, v23);
  }
  unsigned int v57 = a1 + 10;
  uint64_t v58 = a1[10];
  if (v58
    || (WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::expand(a1 + 10, 0), (uint64_t v58 = *v57) != 0))
  {
    int v59 = *(_DWORD *)(v58 - 8);
  }
  else
  {
    int v59 = 0;
  }
  unsigned int v60 = WebKit::TileForGrid::computeHash((WebKit::TileForGrid *)a3);
  uint64_t v61 = 0;
  for (int j = 1; ; ++j)
  {
    unsigned int v63 = v60 & v59;
    uint64_t v64 = (WebKit::TileForGrid **)(v58 + 8 * (v60 & v59));
    uint64_t v65 = *v64;
    if (*v64 == (WebKit::TileForGrid *)-1)
    {
      uint64_t v61 = (WebKit::TileForGrid **)(v58 + 8 * v63);
      goto LABEL_68;
    }
    if (!v65)
    {
      if (v61)
      {
        *uint64_t v61 = 0;
        --*(_DWORD *)(*v57 - 16);
        uint64_t v64 = v61;
      }
      uint64_t v65 = (WebKit::TileForGrid *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)uint64_t v65 = *(_OWORD *)a3;
      *((void *)v65 + 2) = 0;
      *((void *)v65 + 3) = 0;
      *uint64_t v64 = v65;
      uint64_t v67 = *v57;
      if (*v57) {
        int v68 = *(_DWORD *)(v67 - 12) + 1;
      }
      else {
        int v68 = 1;
      }
      *(_DWORD *)(v67 - 12) = v68;
      uint64_t v71 = *v57;
      if (*v57) {
        int v72 = *(_DWORD *)(v71 - 12);
      }
      else {
        int v72 = 0;
      }
      uint64_t v73 = (*(_DWORD *)(v71 - 16) + v72);
      unint64_t v74 = *(unsigned int *)(v71 - 4);
      if (v74 > 0x400)
      {
        if (v74 > 2 * v73) {
          goto LABEL_89;
        }
      }
      else if (3 * v74 > 4 * v73)
      {
        goto LABEL_89;
      }
      uint64_t v65 = *(WebKit::TileForGrid **)WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::expand(a1 + 10, v64);
      goto LABEL_89;
    }
    if (*(void *)v65 == *(void *)a3
      && *((_DWORD *)v65 + 2) == *(_DWORD *)(a3 + 8)
      && *((_DWORD *)v65 + 3) == *(_DWORD *)(a3 + 12))
    {
      break;
    }
LABEL_68:
    unsigned int v60 = j + v63;
  }
  uint64_t v69 = *((void *)v65 + 2);
  uint64_t v70 = *((void *)v65 + 3);
  if (v69)
  {
    *(void *)(v69 + 24) = v70;
    uint64_t v70 = *((void *)v65 + 3);
  }
  else
  {
    a1[11] = v70;
  }
  if (v70) {
    uint64_t v75 = (void *)(v70 + 16);
  }
  else {
    uint64_t v75 = a1 + 12;
  }
  *uint64_t v75 = v69;
LABEL_89:
  uint64_t v76 = a1[12];
  *((void *)v65 + 2) = v76;
  *((void *)v65 + 3) = 0;
  if (v76) {
    unsigned int v77 = (WebKit::TileForGrid **)(v76 + 24);
  }
  else {
    unsigned int v77 = (WebKit::TileForGrid **)(a1 + 11);
  }
  *unsigned int v77 = v65;
  a1[12] = v65;
  WebKit::AsyncPDFRenderer::serviceRequestQueue((atomic_uchar *)a1);
  unint64_t v30 = IdentifierInternal >> 8;
  uint64_t v16 = v96;
  CFRelease(v18);
  if (v16) {
LABEL_93:
  }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(v16 + 8), v10);
LABEL_94:
  unint64_t v15 = v30 << 8;
  uint64_t v14 = IdentifierInternal;
LABEL_95:
  uint64_t v78 = v83;
  if (v83)
  {
    int v83 = 0;
    int v84 = 0;
    WTF::fastFree(v78, v10);
  }
  return v15 | v14;
}

void sub_198E40CD4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (v31) {
    WTF::fastFree(v31, a2);
  }
  if (a25) {
    WTF::fastFree(a25, a2);
  }
  CFRelease(v30);
  if (a30) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(a30 + 8), v33);
  }
  if (a14) {
    WTF::fastFree(a14, v33);
  }
  _Unwind_Resume(a1);
}

WTF *WebKit::AsyncPDFRenderer::willRemoveTile(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v38[0] = a3;
  v38[1] = a4;
  int v5 = *(unsigned __int8 *)WebKit::AsyncPDFRenderer::revalidationStateForGrid((uint64_t)a1, a3);
  unint64_t v6 = a1 + 10;
  uint64_t v7 = (WebKit::TileForGrid **)WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(a1 + 10, (WebKit::TileForGrid *)v38);
  int v8 = (WebKit::TileForGrid **)a1[10];
  if (v8) {
    v8 += *((unsigned int *)v8 - 1);
  }
  if (v8 != v7)
  {
    uint64_t v9 = *v7;
    if (*v7)
    {
      v35[0] = *v7;
      uint64_t v10 = (void *)WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>>,WTF::ListHashSetNode<WebKit::TileForGrid> *>(a1 + 10, v35);
      uint64_t v11 = v10;
      uint64_t v12 = (void *)*v6;
      if (*v6) {
        v12 += *((unsigned int *)v12 - 1);
      }
      if (v12 != v10) {
        WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::remove(a1 + 10, v10);
      }
      uint64_t v13 = *((void *)v9 + 2);
      uint64_t v14 = *((void *)v9 + 3);
      if (v13)
      {
        *(void *)(v13 + 24) = v14;
        uint64_t v14 = *((void *)v9 + 3);
      }
      else
      {
        a1[11] = v14;
      }
      if (v14) {
        unint64_t v15 = (void *)(v14 + 16);
      }
      else {
        unint64_t v15 = a1 + 12;
      }
      *unint64_t v15 = v13;
      WTF::fastFree(v9, v11);
    }
  }
  uint64_t v16 = (void *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(a1 + 8, (WebKit::TileForGrid *)v38);
  uint64_t v17 = a1[8];
  if (v17)
  {
    int v18 = (void *)(v17 + 104 * *(unsigned int *)(v17 - 4));
    if (v18 == v16) {
      goto LABEL_23;
    }
  }
  else
  {
    if (!v16) {
      goto LABEL_23;
    }
    int v18 = 0;
  }
  if (v18 != v16) {
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::remove(a1 + 8, v16);
  }
LABEL_23:
  uint64_t v19 = a1 + 13;
  if (v5)
  {
    uint64_t v20 = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(v19, (WebKit::TileForGrid *)v38);
    WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::take((WTF *)v35, a1 + 13, v20);
    WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::add<WebKit::AsyncPDFRenderer::RenderedTile>((uint64_t)&v34, a1 + 14, (WebKit::TileForGrid *)v38, (uint64_t *)v35);
    uint64_t result = v36;
    if (v36)
    {
      long long v36 = 0;
      int v37 = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, v21);
    }
    int v23 = v35[0];
    v35[0] = 0;
    if (v23)
    {
      char v24 = 0;
      uint64_t v25 = *((void *)v23 + 1);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v24, 1u, memory_order_acquire, memory_order_acquire);
      if (v24) {
        uint64_t result = (WTF *)MEMORY[0x19972E8D0](v25);
      }
      uint64_t v26 = *(void *)(v25 + 8);
      int v27 = 1;
      uint64_t v28 = v26 - 1;
      *(void *)(v25 + 8) = v26 - 1;
      if (v26 == 1)
      {
        uint64_t v33 = *(void *)(v25 + 16);
        uint64_t v29 = *(void *)(v25 + 24);
        *(void *)(v25 + 24) = 0;
        BOOL v30 = v33 != 0;
      }
      else
      {
        uint64_t v29 = 0;
        BOOL v30 = 1;
      }
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
      if (v27 == 1)
      {
        if (v28) {
          return result;
        }
      }
      else
      {
        uint64_t result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v25);
        if (v28) {
          return result;
        }
      }
      if (v29) {
        uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
      if (!v30) {
        return (WTF *)WTF::fastFree((WTF *)v25, v21);
      }
    }
  }
  else
  {
    uint64_t result = (WTF *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(v19, (WebKit::TileForGrid *)v38);
    uint64_t v31 = a1[13];
    if (v31)
    {
      char v32 = (WTF *)(v31 + 104 * *(unsigned int *)(v31 - 4));
      if (v32 == result) {
        return result;
      }
    }
    else
    {
      if (!result) {
        return result;
      }
      char v32 = 0;
    }
    if (v32 != result)
    {
      return WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::remove(a1 + 13, result);
    }
  }
  return result;
}

void sub_198E40FF8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19)
{
  if (a18) {
    WTF::fastFree(a18, a2);
  }
  if (a12)
  {
    char v20 = 0;
    uint64_t v21 = *(void *)(a12 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
    if (v20) {
      MEMORY[0x19972E8D0](v21);
    }
    uint64_t v22 = *(void *)(v21 + 8);
    int v23 = 1;
    uint64_t v24 = v22 - 1;
    *(void *)(v21 + 8) = v22 - 1;
    if (v22 == 1)
    {
      uint64_t v27 = *(void *)(v21 + 16);
      uint64_t v25 = *(void *)(v21 + 24);
      *(void *)(v21 + 24) = 0;
      BOOL v26 = v27 != 0;
    }
    else
    {
      uint64_t v25 = 0;
      BOOL v26 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
    if (v23 == 1)
    {
      if (v24) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v21);
      if (v24) {
        goto LABEL_14;
      }
    }
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    if (!v26) {
      WTF::fastFree((WTF *)v21, a2);
    }
  }
LABEL_14:
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AsyncPDFRenderer::willRepaintAllTiles(void *a1, void *a2)
{
  unint64_t v4 = a1 + 11;
  uint64_t v3 = (WTF *)a1[11];
  if (v3)
  {
    do
    {
      int v5 = (WTF *)*((void *)v3 + 3);
      WTF::fastFree(v3, a2);
      uint64_t v3 = v5;
    }
    while (v5);
  }
  uint64_t v6 = a1[10];
  if (v6)
  {
    a1[10] = 0;
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  *unint64_t v4 = 0;
  v4[1] = 0;
  uint64_t result = a1[8];
  if (result)
  {
    a1[8] = 0;
    return WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(result, a2);
  }
  return result;
}

atomic_uchar *WebKit::AsyncPDFRenderer::coverageRectDidChange(atomic_uchar *result, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (atomic_uchar *)*((void *)result + 3);
  if (!v4) {
    return result;
  }
  uint64_t v6 = (uint64_t *)result;
  uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v44, v4, *((void *)result + 4));
  uint64_t v7 = v44;
  if (!v44) {
    return result;
  }
  __dst[0] = 0;
  __dst[32] = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v9 = v6[6];
  if (v9)
  {
    int v10 = *(_DWORD *)(v9 - 8);
    unint64_t v11 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
    unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    unsigned int v14 = v10 & ((v13 >> 31) ^ v13);
    uint64_t v15 = *(void *)(v9 + 24 * v14);
    if (v15 == v8)
    {
LABEL_8:
      long long v41 = *(_OWORD *)(v9 + 24 * v14 + 8);
      char v42 = 1;
      (*(void (**)(WTF **__return_ptr, uint64_t, void, void))(*(void *)v7 + 160))(&v38, v7, v41, *((void *)&v41 + 1));
      std::__optional_storage_base<WebKit::PDFLayoutRow,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::PDFLayoutRow,false>>(__dst, &v38);
      uint64_t result = (atomic_uchar *)std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v38, v17);
      if (!v42)
      {
        __break(1u);
        return result;
      }
      uint64_t v18 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v6[5], &v41);
      goto LABEL_11;
    }
    int v16 = 1;
    while (v15)
    {
      unsigned int v14 = (v14 + v16) & v10;
      uint64_t v15 = *(void *)(v9 + 24 * v14);
      ++v16;
      if (v15 == v8) {
        goto LABEL_8;
      }
    }
  }
  uint64_t v18 = 0;
  LOBYTE(v41) = 0;
  char v42 = 0;
LABEL_11:
  std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](v37, (uint64_t)__dst);
  (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t, unsigned char *))(*(void *)v7 + 48))(&v38, v7, a3, v37);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v37, v19);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 112))(v20, v18);
  if ((v21 & 0xFF00000000) != 0) {
    float v22 = *(float *)&v21;
  }
  else {
    float v22 = 1.0;
  }
  if (v40)
  {
    int v23 = v38;
    uint64_t v24 = (WTF *)((char *)v38 + 40 * v40);
    while (1)
    {
      uint64_t v25 = v6[17];
      unint64_t v26 = *(void *)v23;
      if (!v25) {
        goto LABEL_22;
      }
      int v27 = *(_DWORD *)(v25 - 8);
      unint64_t v28 = (v26 + ~(v26 << 32)) ^ ((v26 + ~(v26 << 32)) >> 22);
      unint64_t v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
      unint64_t v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
      unsigned int v31 = v27 & ((v30 >> 31) ^ v30);
      uint64_t v32 = *(void *)(v25 + 16 * v31);
      if (v32 != v26) {
        break;
      }
LABEL_23:
      int v23 = (WTF *)((char *)v23 + 40);
      if (v23 == v24) {
        goto LABEL_24;
      }
    }
    int v33 = 1;
    while (v32 != -1)
    {
      unsigned int v31 = (v31 + v33) & v27;
      uint64_t v32 = *(void *)(v25 + 16 * v31);
      ++v33;
      if (v32 == v26) {
        goto LABEL_23;
      }
    }
LABEL_22:
    WebKit::AsyncPDFRenderer::generatePreviewImageForPage((WebKit::AsyncPDFRenderer *)v6, v26, v22);
    goto LABEL_23;
  }
LABEL_24:
  if (!WebKit::PDFPluginBase::isFullFramePlugin(*(WebKit::PDFPluginBase **)(v7 + 16))) {
    WebKit::AsyncPDFRenderer::removePagePreviewsOutsideCoverageRect((atomic_uchar *)v6, a3, (uint64_t)__dst);
  }
  long long v35 = v38;
  if (v38)
  {
    uint64_t v38 = 0;
    int v39 = 0;
    WTF::fastFree(v35, v34);
  }
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)__dst, v34);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 8), v36);
}

void sub_198E41488(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a23, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(v23 + 8), v25);
  _Unwind_Resume(a1);
}

unsigned char *WebKit::AsyncPDFRenderer::willRevalidateTiles(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (unsigned char *)WebKit::AsyncPDFRenderer::revalidationStateForGrid(a1, a3);
  *uint64_t result = 1;
  return result;
}

unsigned char *WebKit::AsyncPDFRenderer::didRevalidateTiles(void *a1, const FloatRect *a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v9 = *(unsigned __int8 *)WebKit::AsyncPDFRenderer::revalidationStateForGrid((uint64_t)a1, a3);
  uint64_t v51 = 0;
  int v10 = (void *)*a5;
  if (*a5)
  {
    uint64_t v11 = *((unsigned int *)v10 - 1);
    unint64_t v12 = &v10[v11];
    if (*((_DWORD *)v10 - 3))
    {
      unint64_t v13 = (void *)*a5;
      if (v11)
      {
        uint64_t v14 = 8 * v11;
        unint64_t v13 = (void *)*a5;
        while (1)
        {
          BOOL v15 = !*(_DWORD *)v13 && *((_DWORD *)v13 + 1) == 0x80000000;
          BOOL v16 = v15;
          if (*(_DWORD *)v13 != 0x80000000 && !v16) {
            break;
          }
          ++v13;
          v14 -= 8;
          if (!v14)
          {
            unint64_t v13 = v12;
            break;
          }
        }
      }
      if (v10) {
        goto LABEL_18;
      }
      goto LABEL_22;
    }
    unint64_t v13 = &v10[v11];
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v11 = 0;
  }
  unint64_t v12 = &v10[v11];
  if (v10)
  {
LABEL_18:
    uint64_t v18 = &v10[*((unsigned int *)v10 - 1)];
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v18 = 0;
LABEL_23:
  if (v18 != v13)
  {
    while (1)
    {
      uint64_t v19 = *v13;
      v50[0] = (*(float (**)(const FloatRect *, void))(*(void *)&a2->m_location + 216))(a2, *v13);
      v50[1] = v20;
      v50[2] = v21;
      v50[3] = v22;
      unint64_t v23 = WebKit::AsyncPDFRenderer::enqueueTilePaintForTileGridRepaint(a1, a2, a3, v19, v50);
      if (!v9 || !v24) {
        goto LABEL_43;
      }
      unint64_t v25 = v23;
      uint64_t v26 = v51;
      if (v51
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(&v51),
            (uint64_t v26 = v51) != 0))
      {
        int v27 = *(_DWORD *)(v26 - 8);
      }
      else
      {
        int v27 = 0;
      }
      unint64_t v28 = (v25 + ~(v25 << 32)) ^ ((v25 + ~(v25 << 32)) >> 22);
      unint64_t v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
      unint64_t v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
      unsigned int v31 = v27 & ((v30 >> 31) ^ v30);
      uint64_t v32 = (unint64_t *)(v26 + 8 * v31);
      unint64_t v33 = *v32;
      if (*v32)
      {
        uint64_t v34 = 0;
        int v35 = 1;
        while (v33 != v25)
        {
          if (v33 == -1) {
            uint64_t v34 = v32;
          }
          unsigned int v31 = (v31 + v35) & v27;
          uint64_t v32 = (unint64_t *)(v26 + 8 * v31);
          unint64_t v33 = *v32;
          ++v35;
          if (!*v32)
          {
            if (v34)
            {
              *uint64_t v34 = 0;
              --*(_DWORD *)(v51 - 16);
              uint64_t v32 = v34;
            }
            goto LABEL_37;
          }
        }
        goto LABEL_43;
      }
LABEL_37:
      *uint64_t v32 = v25;
      uint64_t v36 = v51;
      int v37 = v51 ? *(_DWORD *)(v51 - 12) + 1 : 1;
      *(_DWORD *)(v51 - 12) = v37;
      uint64_t v38 = (*(_DWORD *)(v36 - 16) + v37);
      unint64_t v39 = *(unsigned int *)(v36 - 4);
      if (v39 > 0x400) {
        break;
      }
      if (3 * v39 <= 4 * v38) {
        goto LABEL_42;
      }
LABEL_43:
      unsigned int v40 = v13 + 1;
      unint64_t v13 = v12;
      if (v40 != v12)
      {
        unint64_t v13 = v40;
        while (1)
        {
          BOOL v41 = !*(_DWORD *)v13 && *((_DWORD *)v13 + 1) == 0x80000000;
          BOOL v42 = v41;
          if (*(_DWORD *)v13 != 0x80000000 && !v42) {
            break;
          }
          if (++v13 == v12)
          {
            unint64_t v13 = v12;
            break;
          }
        }
      }
      if (v13 == v18) {
        goto LABEL_62;
      }
    }
    if (v39 > 2 * v38) {
      goto LABEL_43;
    }
LABEL_42:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(&v51);
    goto LABEL_43;
  }
LABEL_62:
  if (v9)
  {
    uint64_t v44 = WebKit::AsyncPDFRenderer::revalidationStateForGrid((uint64_t)a1, a3);
    uint64_t v46 = v51;
    uint64_t v51 = 0;
    uint64_t v47 = *(void *)(v44 + 8);
    *(void *)(v44 + 8) = v46;
    if (v47) {
      WTF::fastFree((WTF *)(v47 - 16), v45);
    }
  }
  uint64_t result = (unsigned char *)WebKit::AsyncPDFRenderer::revalidationStateForGrid((uint64_t)a1, a3);
  *uint64_t result = 0;
  if (v51) {
    return (unsigned char *)WTF::fastFree((WTF *)(v51 - 16), v49);
  }
  return result;
}

void sub_198E4180C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AsyncPDFRenderer::trackRenderCompletionForStaleTileMaintenance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = WebKit::AsyncPDFRenderer::revalidationStateForGrid(a1, a2);
  uint64_t v8 = (uint64_t *)(result + 8);
  uint64_t v7 = *(void *)(result + 8);
  if (v7)
  {
    unsigned int v9 = *(_DWORD *)(v7 - 8);
    unint64_t v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    uint64_t v13 = v9 & ((v12 >> 31) ^ v12);
    uint64_t v14 = *(void *)(v7 + 8 * v13);
    if (v14 != a3)
    {
      int v15 = 1;
      while (v14)
      {
        uint64_t v13 = (v13 + v15) & v9;
        uint64_t v14 = *(void *)(v7 + 8 * v13);
        ++v15;
        if (v14 == a3) {
          goto LABEL_8;
        }
      }
      uint64_t v13 = *(unsigned int *)(v7 - 4);
    }
LABEL_8:
    if (v13 != *(_DWORD *)(v7 - 4))
    {
      *(void *)(v7 + 8 * v13) = -1;
      ++*(_DWORD *)(*v8 - 16);
      uint64_t v16 = *v8;
      int v17 = *v8 ? *(_DWORD *)(v16 - 12) - 1 : -1;
      *(_DWORD *)(v16 - 12) = v17;
      uint64_t v18 = *v8;
      if (!*v8
        || ((unsigned int v19 = *(_DWORD *)(v18 - 4), 6 * *(_DWORD *)(v18 - 12) < v19) ? (v20 = v19 >= 9) : (v20 = 0),
            v20
         && (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash((uint64_t *)(result + 8), v19 >> 1), (v18 = *v8) == 0)|| !*(_DWORD *)(v18 - 12)))
      {
        uint64_t result = *(void *)(a1 + 112);
        if (result)
        {
          *(void *)(a1 + 112) = 0;
          return WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(result, v6);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::AsyncPDFRenderer::willRepaintTilesAfterScaleFactorChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = WebKit::AsyncPDFRenderer::revalidationStateForGrid(a1, a3);
  *(unsigned char *)(result + 1) = 1;
  return result;
}

uint64_t WebKit::AsyncPDFRenderer::didRepaintTilesAfterScaleFactorChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = WebKit::AsyncPDFRenderer::revalidationStateForGrid(a1, a3);
  *(unsigned char *)(result + 1) = 0;
  return result;
}

uint64_t WebKit::AsyncPDFRenderer::didAddGrid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  uint64_t v6 = result;
  uint64_t v8 = v7;
  uint64_t v11 = *(void *)(a1 + 48);
  unint64_t v10 = (uint64_t *)(a1 + 48);
  uint64_t v9 = v11;
  if (v11
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v10),
        (uint64_t v9 = *v10) != 0))
  {
    int v12 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    int v12 = 0;
  }
  unint64_t v13 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
  int v17 = (void *)(v9 + 24 * v16);
  uint64_t v18 = *v17;
  if (*v17)
  {
    unsigned int v19 = 0;
    int v20 = 1;
    do
    {
      if (v18 == a3)
      {
        v17[1] = v6;
        _DWORD v17[2] = v8;
        return result;
      }
      if (v18 == -1) {
        unsigned int v19 = v17;
      }
      unsigned int v16 = (v16 + v20) & v12;
      int v17 = (void *)(v9 + 24 * v16);
      uint64_t v18 = *v17;
      ++v20;
    }
    while (*v17);
    if (v19)
    {
      void *v19 = 0;
      v19[1] = 0;
      void v19[2] = 0;
      --*(_DWORD *)(*v10 - 16);
      int v17 = v19;
    }
  }
  *int v17 = a3;
  v17[1] = v6;
  _DWORD v17[2] = v8;
  uint64_t v21 = *v10;
  if (*v10) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v23 = *v10;
  if (*v10) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25) {
      return result;
    }
  }
  else if (3 * v26 > 4 * v25)
  {
    return result;
  }

  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v10);
}

uint64_t *WebKit::AsyncPDFRenderer::willRemoveGrid(uint64_t *result, void *a2, uint64_t a3)
{
  unint64_t v4 = result;
  int v5 = result + 13;
  uint64_t v6 = result[13];
  if (!v6) {
    goto LABEL_38;
  }
  int v7 = *(_DWORD *)(v6 - 4);
  if (!v7) {
    goto LABEL_38;
  }
  int v8 = 0;
  unsigned int v9 = v7 - 1;
  do
  {
    uint64_t v10 = v9;
    uint64_t result = (uint64_t *)(v6 + 104 * v9);
    uint64_t v11 = *result;
    if (*result == -1) {
      goto LABEL_12;
    }
    if (v11)
    {
      if (v11 == a3) {
        goto LABEL_11;
      }
    }
    else
    {
      if (result[1]) {
        BOOL v12 = a3 == 0;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
LABEL_11:
        uint64_t result = (uint64_t *)WTF::KeyValuePairHashTraits<WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>>::customDeleteBucket((uint64_t)result, a2);
        ++v8;
      }
    }
LABEL_12:
    --v9;
  }
  while (v10);
  uint64_t v13 = *v5;
  if (v8)
  {
    *(_DWORD *)(v13 - 16) += v8;
    uint64_t v14 = *v5;
    if (*v5) {
      int v15 = *(_DWORD *)(v14 - 12);
    }
    else {
      int v15 = 0;
    }
    *(_DWORD *)(v14 - 12) = v15 - v8;
    uint64_t v13 = *v5;
  }
  if (v13)
  {
    unsigned int v16 = *(_DWORD *)(v13 - 4);
    uint64_t v17 = *(unsigned int *)(v13 - 12);
    if (v16 >= 9 && 6 * (int)v17 < v16)
    {
      unsigned int v19 = (v17 - 1) | ((v17 - 1) >> 1) | (((v17 - 1) | ((v17 - 1) >> 1)) >> 2);
      unsigned int v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
      unint64_t v21 = (v20 | HIWORD(v20)) + 1;
      if (v21 > 0x400)
      {
        if (v21 <= 2 * v17)
        {
LABEL_28:
          LODWORD(v21) = 2 * v21;
          if (v21 <= 0x400) {
            goto LABEL_29;
          }
        }
        double v22 = (double)v17;
        double v23 = (double)v21;
        double v24 = 0.416666667;
      }
      else
      {
        if (3 * v21 <= 4 * v17) {
          goto LABEL_28;
        }
LABEL_29:
        double v22 = (double)v17;
        double v23 = (double)v21;
        double v24 = 0.604166667;
      }
      if (v23 * v24 <= v22) {
        LODWORD(v21) = 2 * v21;
      }
      if (v21 <= 8) {
        unsigned int v25 = 8;
      }
      else {
        unsigned int v25 = v21;
      }
      uint64_t result = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(v5, v25, 0);
    }
  }
LABEL_38:
  unint64_t v26 = v4 + 8;
  uint64_t v27 = v4[8];
  if (!v27) {
    goto LABEL_75;
  }
  int v28 = *(_DWORD *)(v27 - 4);
  if (!v28) {
    goto LABEL_75;
  }
  int v29 = 0;
  unsigned int v30 = v28 - 1;
  while (2)
  {
    uint64_t v31 = v30;
    uint64_t v32 = (uint64_t *)(v27 + 104 * v30);
    uint64_t v33 = *v32;
    if (*v32 != -1)
    {
      if (v33)
      {
        if (v33 != a3) {
          goto LABEL_52;
        }
      }
      else
      {
        if (v32[1]) {
          BOOL v34 = a3 == 0;
        }
        else {
          BOOL v34 = 0;
        }
        if (!v34) {
          goto LABEL_52;
        }
      }
      *uint64_t v32 = -1;
      uint64_t v35 = v27 + 104 * v30;
      int v37 = *(uint64_t **)(v35 + 64);
      uint64_t v36 = (void *)(v35 + 64);
      uint64_t result = v37;
      if (v37)
      {
        *uint64_t v36 = 0;
        *(_DWORD *)(v27 + 104 * v30 + 72) = 0;
        uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
      }
      ++v29;
    }
LABEL_52:
    --v30;
    if (v31) {
      continue;
    }
    break;
  }
  uint64_t v38 = *v26;
  if (v29)
  {
    *(_DWORD *)(v38 - 16) += v29;
    uint64_t v39 = *v26;
    if (*v26) {
      int v40 = *(_DWORD *)(v39 - 12);
    }
    else {
      int v40 = 0;
    }
    *(_DWORD *)(v39 - 12) = v40 - v29;
    uint64_t v38 = *v26;
  }
  if (v38)
  {
    unsigned int v41 = *(_DWORD *)(v38 - 4);
    uint64_t v42 = *(unsigned int *)(v38 - 12);
    if (v41 >= 9 && 6 * (int)v42 < v41)
    {
      unsigned int v44 = (v42 - 1) | ((v42 - 1) >> 1) | (((v42 - 1) | ((v42 - 1) >> 1)) >> 2);
      unsigned int v45 = v44 | (v44 >> 4) | ((v44 | (v44 >> 4)) >> 8);
      unint64_t v46 = (v45 | HIWORD(v45)) + 1;
      if (v46 > 0x400)
      {
        if (v46 <= 2 * v42)
        {
LABEL_65:
          LODWORD(v46) = 2 * v46;
          if (v46 <= 0x400) {
            goto LABEL_66;
          }
        }
        double v47 = (double)v42;
        double v48 = (double)v46;
        double v49 = 0.416666667;
      }
      else
      {
        if (3 * v46 <= 4 * v42) {
          goto LABEL_65;
        }
LABEL_66:
        double v47 = (double)v42;
        double v48 = (double)v46;
        double v49 = 0.604166667;
      }
      if (v48 * v49 <= v47) {
        LODWORD(v46) = 2 * v46;
      }
      if (v46 <= 8) {
        unsigned int v50 = 8;
      }
      else {
        unsigned int v50 = v46;
      }
      uint64_t result = (uint64_t *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(v4 + 8, v50);
    }
  }
LABEL_75:
  unsigned __int8 v82 = 0;
  uint64_t v83 = 0;
  unint64_t v51 = v4[11];
  if (v51)
  {
    uint64_t v52 = 0;
    unsigned int v53 = 0;
    uint64_t v54 = (uint64_t **)(v4 + 10);
    do
    {
      if (*(void *)v51 == a3)
      {
        if (v53 == v83)
        {
          uint64_t result = (uint64_t *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v82, v53 + 1, v51);
          unsigned int v53 = HIDWORD(v83);
          uint64_t v52 = v82;
          *((_OWORD *)v82 + HIDWORD(v83)) = *(_OWORD *)result;
        }
        else
        {
          *((_OWORD *)v52 + v53) = *(_OWORD *)v51;
        }
        HIDWORD(v83) = ++v53;
      }
      unint64_t v51 = *(void *)(v51 + 24);
    }
    while (v51);
    if (v53)
    {
      uint64_t v55 = 0;
      uint64_t v56 = 16 * v53;
      do
      {
        uint64_t result = (uint64_t *)WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(v4 + 10, (WTF *)((char *)v52 + v55));
        unsigned int v57 = *v54;
        if (*v54) {
          v57 += *((unsigned int *)v57 - 1);
        }
        if (v57 != result)
        {
          uint64_t v58 = (WTF *)*result;
          if (*result)
          {
            int v84 = (WebKit::TileForGrid *)*result;
            int v59 = (uint64_t *)WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>>,WTF::ListHashSetNode<WebKit::TileForGrid> *>(v4 + 10, &v84);
            unsigned int v60 = v59;
            uint64_t v61 = *v54;
            if (*v54) {
              v61 += *((unsigned int *)v61 - 1);
            }
            if (v61 != v59) {
              WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::remove(v4 + 10, v59);
            }
            uint64_t v62 = *((void *)v58 + 2);
            uint64_t v63 = *((void *)v58 + 3);
            if (v62)
            {
              *(void *)(v62 + 24) = v63;
              uint64_t v63 = *((void *)v58 + 3);
            }
            else
            {
              v4[11] = v63;
            }
            if (v63) {
              uint64_t v64 = (void *)(v63 + 16);
            }
            else {
              uint64_t v64 = v4 + 12;
            }
            *uint64_t v64 = v62;
            uint64_t result = (uint64_t *)WTF::fastFree(v58, v60);
          }
        }
        v55 += 16;
      }
      while (v56 != v55);
    }
  }
  else
  {
    uint64_t v52 = 0;
  }
  uint64_t v67 = v4[6];
  char v66 = v4 + 6;
  uint64_t v65 = v67;
  if (v67)
  {
    int v68 = *(_DWORD *)(v65 - 8);
    unint64_t v69 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    unint64_t v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
    unint64_t v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
    unsigned int v72 = v68 & ((v71 >> 31) ^ v71);
    uint64_t v73 = (uint64_t *)(v65 + 24 * v72);
    uint64_t v74 = *v73;
    if (*v73 != a3)
    {
      int v75 = 1;
      while (v74)
      {
        unsigned int v72 = (v72 + v75) & v68;
        uint64_t v73 = (uint64_t *)(v65 + 24 * v72);
        uint64_t v74 = *v73;
        ++v75;
        if (*v73 == a3) {
          goto LABEL_110;
        }
      }
      uint64_t v73 = (uint64_t *)(v65 + 24 * *(unsigned int *)(v65 - 4));
    }
LABEL_110:
    if ((uint64_t *)(v65 + 24 * *(unsigned int *)(v65 - 4)) != v73)
    {
      uint64_t *v73 = -1;
      ++*(_DWORD *)(*v66 - 16);
      uint64_t v76 = *v66;
      int v77 = *v66 ? *(_DWORD *)(v76 - 12) - 1 : -1;
      *(_DWORD *)(v76 - 12) = v77;
      uint64_t v78 = *v66;
      if (*v66)
      {
        unsigned int v79 = 6 * *(_DWORD *)(v78 - 12);
        unsigned int v80 = *(_DWORD *)(v78 - 4);
        if (v79 < v80 && v80 >= 9) {
          uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v66, v80 >> 1);
        }
      }
    }
  }
  if (v52)
  {
    return (uint64_t *)WTF::fastFree(v52, a2);
  }
  return result;
}

void sub_198E420EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (v10) {
    WTF::fastFree(v10, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::AsyncPDFRenderer::serviceRequestQueue(atomic_uchar *this)
{
  uint64_t v1 = (atomic_uchar *)*((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = (uint64_t)this;
    this = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v52, v1, *((void *)this + 4));
    uint64_t v31 = v52;
    if (v52)
    {
      if (*(_DWORD *)(v2 + 76) < *(_DWORD *)(v2 + 72))
      {
        unint64_t v4 = (uint64_t ***)(v2 + 80);
        uint64_t v5 = v2 + 88;
        uint64_t v6 = (uint64_t *)(v2 + 64);
        do
        {
          if (!*v4 || !*((_DWORD *)*v4 - 3)) {
            break;
          }
          int v7 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>>,WTF::ListHashSetNode<WebKit::TileForGrid> *>((uint64_t *)(v2 + 80), (WebKit::TileForGrid **)(v2 + 88));
          int v8 = v7;
          unsigned int v9 = *v4;
          if (*v4) {
            v9 += *((unsigned int *)v9 - 1);
          }
          uint64_t v10 = **v7;
          uint64_t v11 = (*v7)[1];
          if (v9 != v7) {
            WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::remove((uint64_t *)(v2 + 80), v7);
          }
          BOOL v12 = *(WTF **)v5;
          uint64_t v13 = *(void *)(*(void *)v5 + 16);
          uint64_t v14 = *(void *)(*(void *)v5 + 24);
          if (v13)
          {
            *(void *)(v13 + 24) = v14;
            uint64_t v14 = *((void *)v12 + 3);
          }
          else
          {
            *(void *)uint64_t v5 = v14;
          }
          int v15 = (void *)(v14 + 16);
          BOOL v16 = v14 == 0;
          uint64_t v17 = (void *)(v2 + 96);
          if (!v16) {
            uint64_t v17 = v15;
          }
          *uint64_t v17 = v13;
          WTF::fastFree(v12, v8);
          *(void *)&long long v51 = v10;
          *((void *)&v51 + 1) = v11;
          uint64_t v18 = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>((uint64_t *)(v2 + 64), (WebKit::TileForGrid *)&v51);
          uint64_t v19 = v18;
          uint64_t v20 = *v6;
          if (*v6) {
            v20 += 104 * *(unsigned int *)(v20 - 4);
          }
          if (v20 != v18)
          {
            uint64_t v43 = *(void *)(v18 + 16);
            long long v21 = *(_OWORD *)(v18 + 24);
            long long v22 = *(_OWORD *)(v18 + 40);
            char v46 = *(unsigned char *)(v18 + 56);
            long long v44 = v21;
            long long v45 = v22;
            WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v47, (long long **)(v18 + 64));
            long long v49 = *(_OWORD *)(v19 + 80);
            int v50 = *(_DWORD *)(v19 + 96);
            ++*(_DWORD *)(v2 + 76);
            uint64_t v23 = *(void *)(v2 + 56);
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v2 + 16));
            double v24 = *(const void **)(*(void *)(v31 + 16) + 296);
            CFTypeRef cf = v24;
            if (v24) {
              CFRetain(v24);
            }
            long long v33 = v51;
            uint64_t v34 = v43;
            long long v35 = v44;
            long long v36 = v45;
            char v37 = v46;
            WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v38, (long long **)&v47);
            long long v40 = v49;
            int v41 = v50;
            uint64_t v25 = WTF::fastMalloc((WTF *)0x80);
            *(void *)uint64_t v25 = &unk_1EE9D9680;
            *(void *)(v25 + 8) = v2;
            *(void *)(v25 + 16) = cf;
            *(_OWORD *)(v25 + 24) = v33;
            *(void *)(v25 + 40) = v34;
            *(_OWORD *)(v25 + 48) = v35;
            *(_OWORD *)(v25 + 64) = v36;
            *(unsigned char *)(v25 + 80) = v37;
            *(void *)(v25 + 88) = v38;
            uint64_t v26 = v39;
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            *(void *)(v25 + 96) = v26;
            long long v27 = v40;
            *(_DWORD *)(v25 + 120) = v41;
            *(_OWORD *)(v25 + 104) = v27;
            uint64_t v42 = v25;
            MEMORY[0x19972E4D0](v23, &v42);
            uint64_t v28 = v42;
            uint64_t v42 = 0;
            if (v28) {
              (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
            }
            int v29 = v38;
            if (v38)
            {
              uint64_t v38 = 0;
              LODWORD(v39) = 0;
              WTF::fastFree(v29, v3);
            }
            unsigned int v30 = v47;
            if (v47)
            {
              double v47 = 0;
              int v48 = 0;
              WTF::fastFree(v30, v3);
            }
          }
        }
        while (*(_DWORD *)(v2 + 76) < *(_DWORD *)(v2 + 72));
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(v31 + 8), v3);
    }
  }
  return this;
}

void sub_198E42448(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,WTF *a38,int a39)
{
  if (a15) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(atomic_uchar **)(a15 + 16), a2);
  }
  if (a38) {
    WTF::fastFree(a38, a2);
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(a12 + 8), a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AsyncPDFRenderer::transferBufferToMainThread(uint64_t a1, uint64_t *a2, long long *a3, long long *a4, uint64_t a5)
{
  uint64_t v10 = *(atomic_uchar **)(a1 + 16);
  if (v10) {
    uint64_t v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
  }
  uint64_t v11 = *a2;
  *a2 = 0;
  long long v20 = *a3;
  long long v21 = *a4;
  uint64_t v18 = (WTF::ThreadSafeWeakPtrControlBlock *)v10;
  uint64_t v19 = v11;
  long long v22 = a4[1];
  char v23 = *((unsigned char *)a4 + 32);
  WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v24, (long long **)a4 + 5);
  long long v26 = *(long long *)((char *)a4 + 56);
  int v27 = *((_DWORD *)a4 + 18);
  uint64_t v28 = a5;
  uint64_t v12 = WTF::fastMalloc((WTF *)0x88);
  *(void *)uint64_t v12 = &unk_1EE9D96A8;
  *(void *)(v12 + 8) = v18;
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = v19;
  *(_OWORD *)(v12 + 32) = v20;
  *(unsigned char *)(v12 + 80) = v23;
  *(_OWORD *)(v12 + 48) = v21;
  *(_OWORD *)(v12 + 64) = v22;
  WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v12 + 88, (long long **)&v24);
  long long v13 = v26;
  *(_DWORD *)(v12 + 120) = v27;
  *(_OWORD *)(v12 + 104) = v13;
  *(void *)(v12 + 128) = v28;
  uint64_t v29 = v12;
  WTF::callOnMainRunLoop();
  uint64_t v15 = v29;
  uint64_t v29 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  BOOL v16 = v24;
  if (v24)
  {
    double v24 = 0;
    int v25 = 0;
    WTF::fastFree(v16, v14);
  }
  return 0;
}

void sub_198E42760(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::ThreadSafeWeakPtrControlBlock *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20)
{
  uint64_t v22 = *(void *)(v20 - 56);
  *(void *)(v20 - 56) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  if (a19) {
    WTF::fastFree(a19, a2);
  }
  if (a11)
  {
    char v23 = 0;
    uint64_t v24 = *(void *)(a11 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
    if (v23) {
      MEMORY[0x19972E8D0](v24);
    }
    uint64_t v25 = *(void *)(v24 + 8);
    int v26 = 1;
    uint64_t v27 = v25 - 1;
    *(void *)(v24 + 8) = v25 - 1;
    if (v25 == 1)
    {
      uint64_t v30 = *(void *)(v24 + 16);
      uint64_t v28 = *(void *)(v24 + 24);
      *(void *)(v24 + 24) = 0;
      BOOL v29 = v30 != 0;
    }
    else
    {
      uint64_t v28 = 0;
      BOOL v29 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
    if (v26 == 1)
    {
      if (v27) {
        goto LABEL_16;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
      if (v27) {
        goto LABEL_16;
      }
    }
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    if (!v29) {
      WTF::fastFree((WTF *)v24, a2);
    }
  }
LABEL_16:
  if (a9) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AsyncPDFRenderer::paintTilesForPage(WebKit::AsyncPDFRenderer *this, const WebCore::GraphicsLayer *a2, WebCore::GraphicsContext *a3, float a4, const WebCore::FloatRect *a5, const WebCore::FloatRect *a6, FloatRect *a7, uint64_t a8)
{
  uint64_t v14 = (*(uint64_t (**)(const WebCore::GraphicsLayer *, float))(*(void *)a2 + 832))(a2, a4);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v52 = a5;
    float v16 = (*(float (**)(uint64_t))(*(void *)v14 + 328))(v14);
    uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
    uint64_t v17 = (void *)*((void *)this + 14);
    uint64_t v18 = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::begin(v17);
    uint64_t v19 = v18;
    long long v21 = v20;
    if (v17) {
      uint64_t v22 = &v17[13 * *((unsigned int *)v17 - 1)];
    }
    else {
      uint64_t v22 = 0;
    }
    if (v22 != v18)
    {
      unsigned int v53 = v22;
      do
      {
        if (*v19 == v54)
        {
          uint64_t v24 = *((unsigned int *)v19 + 19);
          if (v24)
          {
            uint64_t v25 = 40 * v24;
            int v26 = (const FloatRect *)(v19[8] + 24);
            do
            {
              if (*(void *)&v26[-2].m_size == a8)
              {
                FloatRect v56 = *v26;
                WebCore::FloatRect::intersect((WebCore::FloatRect *)&v56, (const WebCore::FloatRect *)&v26[-1]);
                WebCore::FloatRect::intersect((WebCore::FloatRect *)&v56, a6);
                FloatRect v66 = v56;
                if (v56.m_size.m_width > 0.0 && v56.m_size.m_height > 0.0)
                {
                  v56.uint64_t m_size = (FloatSize)v19[4];
                  v56.m_location = 0;
                  WebCore::mapRect((WebCore *)&v66, v26, &v56, v27);
                  unint64_t v63 = __PAIR64__(v29, v28);
                  int v64 = v30;
                  int v65 = v31;
                  WebCore::mapRect((WebCore *)&v66, v26 - 1, a7, v32);
                  v62[0] = v33;
                  v62[1] = v34;
                  v62[2] = v35;
                  v62[3] = v36;
                  unint64_t v8 = v8 & 0xFFFFFFFFFF000000 | 0x1221;
                  (*(void (**)(WebCore::GraphicsContext *, void, _DWORD *, unint64_t *, unint64_t))(*(void *)a3 + 384))(a3, v19[2], v62, &v63, v8);
                  unsigned __int8 v37 = atomic_load((unsigned __int8 *)this + 144);
                  if (v37)
                  {
                    uint64_t v61 = 0x110400000000FF40;
                    (*(void (**)(WebCore::GraphicsContext *, _DWORD *, uint64_t *))(*(void *)a3 + 224))(a3, v62, &v61);
                    if ((v61 & 0x8000000000000) != 0)
                    {
                      uint64_t v39 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFLL);
                      if (atomic_fetch_add((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                      {
                        atomic_store(1u, v39);
                        WTF::fastFree((WTF *)v39, v38);
                      }
                    }
                  }
                }
              }
              int v26 = (const FloatRect *)((char *)v26 + 40);
              v25 -= 40;
            }
            while (v25);
          }
        }
        v19 += 13;
        if (v19 == v21)
        {
          uint64_t v19 = v21;
          long long v40 = v53;
        }
        else
        {
          long long v40 = v53;
          while (*v19 == -1 || !*v19 && !v19[1])
          {
            v19 += 13;
            if (v19 == v21)
            {
              uint64_t v19 = v21;
              break;
            }
          }
        }
      }
      while (v19 != v40);
    }
    *(double *)&v56.m_location = (float)(1.0 / v16);
    v56.uint64_t m_size = 0;
    uint64_t v57 = 0;
    double v58 = *(double *)&v56.m_location;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 96))(a3, 1);
    (*(void (**)(WebCore::GraphicsContext *, FloatRect *))(*(void *)a3 + 648))(a3, &v56);
    unint64_t v41 = *((void *)this + 13);
    uint64_t v42 = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::begin((void *)v41);
    uint64_t v43 = v42;
    long long v45 = v44;
    if (v41) {
      char v46 = (void *)(v41 + 104 * *(unsigned int *)(v41 - 4));
    }
    else {
      char v46 = 0;
    }
    if (v46 == v42)
    {
      char v23 = 0;
    }
    else
    {
      char v23 = 0;
      do
      {
        if (*v43 == v54)
        {
          WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v56, (const WebCore::FloatRect *)(v43 + 3));
          v66.m_location = (FloatPoint)__PAIR64__(v48, v47);
          v66.m_size.m_width = v49;
          v66.m_size.m_height = v50;
          if (WebCore::FloatRect::intersects((WebCore::FloatRect *)a7, (const WebCore::FloatRect *)&v66))
          {
            if (WebCore::FloatRect::intersects((WebCore::FloatRect *)&v66, v52))
            {
              unint64_t v63 = v43[3];
              unint64_t v41 = v41 & 0xFFFFFFFFFF000000 | 0x1221;
              WebCore::GraphicsContext::drawImageBuffer();
              char v23 = 1;
            }
          }
        }
        while (1)
        {
          v43 += 13;
          if (v43 == v45) {
            break;
          }
          if (*v43 != -1 && (*v43 || v43[1])) {
            goto LABEL_44;
          }
        }
        uint64_t v43 = v45;
LABEL_44:
        ;
      }
      while (v43 != v46);
    }
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 104))(a3, 1);
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

void sub_198E42E2C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 104))(v1, 1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AsyncPDFRenderer::paintPagePreview(uint64_t this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3, const WebCore::FloatRect *a4)
{
  if (this)
  {
    unsigned int v6 = *(_DWORD *)(this - 8);
    unint64_t v7 = ((unint64_t)a4 + ~((void)a4 << 32)) ^ (((unint64_t)a4 + ~((void)a4 << 32)) >> 22);
    unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    uint64_t v10 = v6 & ((v9 >> 31) ^ v9);
    uint64_t v11 = *(const WebCore::FloatRect **)(this + 16 * v10);
    if (v11 == a4)
    {
LABEL_6:
      uint64_t v13 = *(void *)(this + 16 * v10 + 8);
      if (!v13) {
        return this;
      }
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v13 + 8));
      this = (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t, const WebCore::FloatRect *, const WebCore::FloatRect *, uint64_t))(*(void *)a2 + 384))(a2, v13, a3, a3, 4641);
      char v15 = 0;
      uint64_t v16 = *(void *)(v13 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
      if (v15) {
        this = MEMORY[0x19972E8D0](v16);
      }
      uint64_t v17 = *(void *)(v16 + 8);
      int v18 = 1;
      uint64_t v19 = v17 - 1;
      *(void *)(v16 + 8) = v17 - 1;
      if (v17 == 1)
      {
        uint64_t v22 = *(void *)(v16 + 16);
        uint64_t v20 = *(void *)(v16 + 24);
        *(void *)(v16 + 24) = 0;
        BOOL v21 = v22 != 0;
      }
      else
      {
        uint64_t v20 = 0;
        BOOL v21 = 1;
      }
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
      if (v18 == 1)
      {
        if (v19) {
          return this;
        }
      }
      else
      {
        this = WTF::Lock::unlockSlow((WTF::Lock *)v16);
        if (v19) {
          return this;
        }
      }
      if (v20) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
      if (!v21)
      {
        return WTF::fastFree((WTF *)v16, v14);
      }
    }
    else
    {
      int v12 = 1;
      while (v11 != (const WebCore::FloatRect *)-1)
      {
        uint64_t v10 = (v10 + v12) & v6;
        uint64_t v11 = *(const WebCore::FloatRect **)(this + 16 * v10);
        ++v12;
        if (v11 == a4) {
          goto LABEL_6;
        }
      }
    }
  }
  return this;
}

void sub_198E43068(_Unwind_Exception *exception_object, void *a2)
{
  char v4 = 0;
  atomic_uchar *volatile v5 = *v2;
  atomic_compare_exchange_strong_explicit(*v2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](v5);
  }
  uint64_t v6 = *((void *)v5 + 1);
  int v7 = 1;
  uint64_t v8 = v6 - 1;
  *((void *)v5 + 1) = v6 - 1;
  if (v6 == 1)
  {
    uint64_t v11 = *((void *)v5 + 2);
    uint64_t v9 = *((void *)v5 + 3);
    *((void *)v5 + 3) = 0;
    BOOL v10 = v11 != 0;
  }
  else
  {
    uint64_t v9 = 0;
    BOOL v10 = 1;
  }
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v8) {
      goto LABEL_11;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8) {
      goto LABEL_11;
    }
  }
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (!v10) {
    WTF::fastFree((WTF *)v5, a2);
  }
LABEL_11:
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::AsyncPDFRenderer::pdfContentChangedInRect(atomic_uchar *result, uint64_t a2, const WebCore::FloatRect *a3, uint64_t a4)
{
  atomic_uchar *volatile v5 = (atomic_uchar *)*((void *)result + 3);
  if (v5)
  {
    uint64_t v8 = (WebKit::AsyncPDFRenderer *)result;
    uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v40, v5, *((void *)result + 4));
    uint64_t v9 = v40;
    if (v40)
    {
      uint64_t v11 = (const FloatRect *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 832))(a2);
      if (v11)
      {
        std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](v36, a4);
        (*((void (**)(WTF **__return_ptr, atomic_uchar **, const WebCore::FloatRect *, unsigned char *))*v9 + 6))(&v37, v9, a3, v36);
        std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v12);
        if (v39)
        {
          uint64_t v13 = v9[2];
          uint64_t v14 = (const void *)*((void *)v13 + 37);
          if (v14)
          {
            CFRetain(*((CFTypeRef *)v13 + 37));
            v35[0] = (*(float (**)(const FloatRect *))(*(void *)&v11->m_location + 328))(v11);
            v35[1] = 0.0;
            void v35[2] = 0.0;
            v35[3] = v35[0];
            v35[4] = 0.0;
            v35[5] = 0.0;
            WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v35, a3);
            v34[0] = v15;
            v34[1] = v16;
            int v34[2] = v17;
            v34[3] = v18;
            uint64_t v19 = (void *)*((void *)v8 + 13);
            uint64_t v20 = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::begin(v19);
            uint64_t v21 = (uint64_t)v20;
            uint64_t v23 = v22;
            if (v19) {
              v19 += 13 * *((unsigned int *)v19 - 1);
            }
            if (v19 != v20)
            {
              do
              {
                if (WebCore::FloatRect::intersects((WebCore::FloatRect *)v34, (const WebCore::FloatRect *)(v21 + 24)))
                {
                  long long v41 = *(_OWORD *)(v21 + 24);
                  WebCore::FloatRect::intersect((WebCore::FloatRect *)&v41, (const WebCore::FloatRect *)v34);
                  long long v32 = v41;
                  char v33 = 1;
                  if (*(float *)&v41 == *(float *)(v21 + 24)
                    && *((float *)&v41 + 1) == *(float *)(v21 + 28)
                    && *((float *)&v41 + 2) == *(float *)(v21 + 32)
                    && *((float *)&v41 + 3) == *(float *)(v21 + 36))
                  {
                    LOBYTE(v32) = 0;
                    char v33 = 0;
                  }
                  WebKit::AsyncPDFRenderer::enqueueTilePaintIfNecessary(v8, v11, v21, (const WebCore::FloatRect *)(v21 + 24), (WebCore *)&v32);
                }
                while (1)
                {
                  v21 += 104;
                  if (v21 == v23) {
                    break;
                  }
                  if (*(void *)v21 != -1 && (*(void *)v21 || *(void *)(v21 + 8))) {
                    goto LABEL_28;
                  }
                }
                uint64_t v21 = v23;
LABEL_28:
                ;
              }
              while ((void *)v21 != v19);
              uint64_t v9 = v40;
            }
            uint64_t v26 = (*((uint64_t (**)(atomic_uchar **))*v9 + 2))(v9);
            uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v26 + 112))(v26, a2);
            if ((v27 & 0xFF00000000) != 0) {
              float v28 = *(float *)&v27;
            }
            else {
              float v28 = 1.0;
            }
            if (v39)
            {
              unsigned int v29 = (unint64_t *)v37;
              uint64_t v30 = 40 * v39;
              do
              {
                WebKit::AsyncPDFRenderer::generatePreviewImageForPage(v8, *v29, v28);
                v29 += 5;
                v30 -= 40;
              }
              while (v30);
            }
            CFRelease(v14);
          }
        }
        int v31 = v37;
        if (v37)
        {
          unsigned __int8 v37 = 0;
          int v38 = 0;
          WTF::fastFree(v31, v10);
        }
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(v9[1], v10);
    }
  }
  return result;
}

void sub_198E4342C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27)
{
  CFRelease(v27);
  if (a26) {
    WTF::fastFree(a26, v30);
  }
  if (*(void *)v28) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(*(void *)v28 + 8), v30);
  }
  _Unwind_Resume(a1);
}

WebKit::PDFDiscretePresentationController *WebKit::PDFDiscretePresentationController::PDFDiscretePresentationController(WebKit::PDFDiscretePresentationController *this, atomic_uchar *volatile *a2)
{
  uint64_t v3 = WebKit::PDFPresentationController::PDFPresentationController(this, a2);
  *(void *)uint64_t v3 = &unk_1EE9D9020;
  *((void *)v3 + 4) = &unk_1EE9D9140;
  *(_OWORD *)((char *)v3 + 40) = 0u;
  *((_DWORD *)v3 + 19) = 0;
  *(_OWORD *)((char *)v3 + 56) = 0u;
  *((_WORD *)v3 + 36) = 0;
  WebCore::Timer::Timer<WebKit::PDFDiscretePresentationController,WebKit::PDFDiscretePresentationController>((WebKit::PDFPresentationController *)((char *)v3 + 80), (uint64_t)this, (uint64_t)WebKit::PDFDiscretePresentationController::gestureEndTimerFired, 0);
  WebCore::Timer::Timer<WebKit::PDFDiscretePresentationController,WebKit::PDFDiscretePresentationController>((WebKit::PDFDiscretePresentationController *)((char *)this + 136), (uint64_t)this, (uint64_t)WebKit::PDFDiscretePresentationController::animationTimerFired, 0);
  WebCore::Timer::Timer<WebKit::PDFDiscretePresentationController,WebKit::PDFDiscretePresentationController>((WebKit::PDFDiscretePresentationController *)((char *)this + 192), (uint64_t)this, (uint64_t)WebKit::PDFDiscretePresentationController::transitionEndTimerFired, 0);
  *((unsigned char *)this + 280) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 31) = 0;
  *((unsigned char *)this + 272) = 0;
  *((_DWORD *)this + 71) = 0;
  *(_DWORD *)((char *)this + 287) = 0;
  return this;
}

void sub_198E435C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::TimerBase *a10)
{
  uint64_t v14 = v11;
  uint64_t v22 = v14;
  *((void *)v10 + 17) = &unk_1EE9BA5F0;
  uint64_t v16 = *((void *)v10 + 23);
  *((void *)v10 + 23) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  WebCore::TimerBase::~TimerBase(v22);
  *((void *)v10 + 10) = &unk_1EE9BA5F0;
  uint64_t v17 = *((void *)v10 + 16);
  *((void *)v10 + 16) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  WebCore::TimerBase::~TimerBase(v12);
  uint64_t v19 = *((void *)v10 + 8);
  if (v19) {
    WTF::fastFree((WTF *)(v19 - 16), v18);
  }
  WTF::Vector<WebKit::PDFDiscretePresentationController::RowData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10 + 48, v18);
  uint64_t v21 = *v13;
  *uint64_t v13 = 0;
  if (v21)
  {
    if (v21[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v21 + 16))(v21);
    }
    else {
      --v21[2];
    }
  }
  WebKit::PDFPresentationController::~PDFPresentationController(v10, v20);
  _Unwind_Resume(a1);
}

WebKit::PDFPresentationController *WebKit::PDFPresentationController::PDFPresentationController(WebKit::PDFPresentationController *this, atomic_uchar *volatile *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1994F5F10;
  *(void *)(v4 + 24) = this;
  *(void *)this = &unk_1EE9D9240;
  *((void *)this + 1) = v4;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a2 + 9);
  *((void *)this + 2) = a2;
  *((void *)this + 3) = 0;
  return this;
}

void WebKit::PDFDiscretePresentationController::animationTimerFired(WebKit::PDFDiscretePresentationController *this)
{
  if (*((unsigned char *)this + 288) == 3)
  {
    WTF::MonotonicTime::now(this);
    if (*((unsigned char *)this + 290))
    {
      uint64_t v2 = (char *)this + 264;
      switch(*((unsigned char *)this + 289))
      {
        case 0:
        case 2:
          goto LABEL_5;
        case 1:
        case 3:
          goto LABEL_4;
        default:
          break;
      }
    }
    else
    {
LABEL_4:
      uint64_t v2 = (char *)this + 268;
LABEL_5:
      *(_DWORD *)uint64_t v2 = 0;
    }
    WebKit::PDFDiscretePresentationController::updateLayersForTransitionState(this);
    WebKit::PDFDiscretePresentationController::updateState(this, 0);
  }
}

void WebKit::PDFDiscretePresentationController::transitionEndTimerFired(WebKit::PDFDiscretePresentationController *this)
{
  if (!*((unsigned char *)this + 290)) {
    return;
  }
  unsigned int v2 = *((unsigned __int8 *)this + 289);
  if (v2 - 2 < 2)
  {
    uint64_t v5 = *((unsigned int *)this + 15);
    if (v5)
    {
      unint64_t v6 = *((unsigned int *)this + 19);
      if (v5 - 1 > v6)
      {
        int v4 = v6 + 1;
        goto LABEL_10;
      }
    }
  }
  else if (v2 <= 1)
  {
    int v3 = *((_DWORD *)this + 19);
    if (v3)
    {
      int v4 = v3 - 1;
LABEL_10:
      WebKit::PDFDiscretePresentationController::setVisibleRow((uint64_t)this, v4);
    }
  }

  WebKit::PDFDiscretePresentationController::updateState(this, 0);
}

void WebKit::PDFPresentationController::~PDFPresentationController(WebKit::PDFPresentationController *this, void *a2)
{
  *(void *)this = &unk_1EE9D9240;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 72), a2);
  }
}

WTF *WebKit::PDFDiscretePresentationController::teardown(atomic_uchar *this)
{
  WebKit::PDFPresentationController::clearAsyncRenderer(this);
  WebCore::GraphicsLayer::unparentAndClear();

  return WTF::Vector<WebKit::PDFDiscretePresentationController::RowData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(this + 48), v2);
}

BOOL WebKit::PDFDiscretePresentationController::supportsDisplayMode(uint64_t a1, char a2)
{
  return (a2 & 0xFD) == 0;
}

uint64_t WebKit::PDFDiscretePresentationController::willChangeDisplayMode(uint64_t result)
{
  *(_DWORD *)(result + 76) = 0;
  return result;
}

uint64_t WebKit::PDFDiscretePresentationController::handleKeyboardEvent()
{
  return 0;
}

BOOL WebKit::PDFDiscretePresentationController::handleWheelEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 288) == 6) {
    return 1;
  }
  WebKit::WebKit2PlatformWheelEvent::WebKit2PlatformWheelEvent((uint64_t)v15, a2);
  int v4 = v18;
  if (v18 == 1)
  {
    if (WebKit::PDFDiscretePresentationController::eventCanStartPageTransition(a1))
    {
      uint64_t v2 = 1;
      WebKit::PDFDiscretePresentationController::updateState((WebKit::PDFDiscretePresentationController *)a1, 1u);
      WebKit::PDFDiscretePresentationController::applyWheelEventDelta(a1, -v16, -v17);
      return v2;
    }
    return 0;
  }
  if (v18)
  {
    if (!*(unsigned char *)(a1 + 288)) {
      return 0;
    }
    if (v18 == 8 && !v19)
    {
      WebCore::TimerBase::start();
      return 1;
    }
  }
  else
  {
    int v5 = v19;
    if (!v19)
    {
      if (WebKit::PDFDiscretePresentationController::eventCanStartPageTransition(a1))
      {
        if ((v17 > 0.0 || v16 > 0.0) && (int v6 = *(_DWORD *)(a1 + 76)) != 0)
        {
          int v7 = v6 - 1;
        }
        else
        {
          if (v17 >= 0.0 && v16 >= 0.0) {
            return 0;
          }
          uint64_t v8 = *(unsigned int *)(a1 + 60);
          if (!v8) {
            return 0;
          }
          unint64_t v9 = *(unsigned int *)(a1 + 76);
          if (v8 - 1 <= v9) {
            return 0;
          }
          int v7 = v9 + 1;
        }
        WebKit::PDFDiscretePresentationController::setVisibleRow(a1, v7);
        return 1;
      }
      return 0;
    }
    if (!*(unsigned char *)(a1 + 288)) {
      return 0;
    }
    if (v19 != 1) {
      goto LABEL_20;
    }
    if ((*(void *)(a1 + 112) & 0xFFFFFFFFFFFFLL) == 0) {
      return 0;
    }
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 80));
    int v4 = v18;
  }
  if (v4 == 16)
  {
    WebKit::PDFDiscretePresentationController::updateState((WebKit::PDFDiscretePresentationController *)a1, 0);
    return 1;
  }
  if (v4 != 4)
  {
    if (v4)
    {
      int v5 = v19;
      goto LABEL_35;
    }
    int v5 = v19;
LABEL_20:
    if (v5 == 8)
    {
      WebKit::PDFDiscretePresentationController::startPageTransitionOrSettle((WebKit::PDFDiscretePresentationController *)a1);
      return 1;
    }
LABEL_35:
    if (v5 == 4) {
      goto LABEL_36;
    }
    return 0;
  }
LABEL_36:
  int v10 = *(unsigned __int8 *)(a1 + 288);
  if ((v10 - 1) <= 1)
  {
    WebKit::PDFDiscretePresentationController::applyWheelEventDelta(a1, -v16, -v17);
    if (*(unsigned char *)(a1 + 290))
    {
      switch(*(unsigned char *)(a1 + 289))
      {
        case 0:
        case 2:
          float v11 = *(float *)(a1 + 264);
          break;
        case 1:
        case 3:
          goto LABEL_42;
        default:
          float v11 = 0.0;
          break;
      }
    }
    else
    {
LABEL_42:
      float v11 = *(float *)(a1 + 268);
    }
    if (fabsf(v11) >= 200.0 && v19 == 4)
    {
      WebKit::UnifiedPDFPlugin::wheelEventCopyWithVelocity(*(WebKit::UnifiedPDFPlugin **)(a1 + 16), (uint64_t)v15, (uint64_t)v20);
      uint64_t v14 = v21;
      if (!WebCore::FloatSize::isZero((WebCore::FloatSize *)&v14))
      {
        uint64_t v13 = v14;
        if (!*(unsigned char *)(a1 + 280)) {
          *(unsigned char *)(a1 + 280) = 1;
        }
        *(void *)(a1 + 272) = v13;
      }
      WebKit::PDFDiscretePresentationController::updateState((WebKit::PDFDiscretePresentationController *)a1, 5u);
    }
    else
    {
      WebKit::PDFDiscretePresentationController::updateLayersForTransitionState((WebKit::PDFDiscretePresentationController *)a1);
    }
  }
  return v10 != 0;
}

uint64_t WebKit::PDFDiscretePresentationController::eventCanStartPageTransition(uint64_t a1)
{
  unsigned __int16 v2 = WebCore::ScrollableArea::targetSideForScrollDelta();
  if (v2 < 0x100u) {
    goto LABEL_2;
  }
  int v5 = v2;
  uint64_t result = WebCore::ScrollableArea::isPinnedOnSide();
  if (!result) {
    return result;
  }
  if ((v5 - 1) < 2)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 60);
    if (v7 && v7 - 1 > (unint64_t)*(unsigned int *)(a1 + 76)) {
      goto LABEL_2;
    }
    return 0;
  }
  if (v5 != 3 && v5 || !*(_DWORD *)(a1 + 76)) {
    return 0;
  }
LABEL_2:
  unsigned __int16 v3 = WebCore::ScrollableArea::targetSideForScrollDelta();
  if (v3 < 0x100u) {
    return 1;
  }
  int v6 = v3;
  uint64_t result = WebCore::ScrollableArea::isPinnedOnSide();
  if (result)
  {
    if ((v6 - 1) < 2)
    {
      uint64_t v8 = *(unsigned int *)(a1 + 60);
      if (v8 && v8 - 1 > (unint64_t)*(unsigned int *)(a1 + 76)) {
        return 1;
      }
    }
    else if ((v6 == 3 || !v6) && *(_DWORD *)(a1 + 76))
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void WebKit::PDFDiscretePresentationController::updateState(WebKit::PDFDiscretePresentationController *this, unsigned int a2)
{
  if (*((unsigned __int8 *)this + 288) == a2) {
    return;
  }
  *((unsigned char *)this + 288) = a2;
  switch(a2)
  {
    case 0u:
    case 1u:
      *(_WORD *)((char *)this + 289) = 0;
      *((unsigned char *)this + 280) = 0;
      *((void *)this + 32) = 0;
      *((void *)this + 33) = 0;
      *((unsigned char *)this + 272) = 0;
      if (a2 > 6) {
        goto LABEL_30;
      }
      if (a2 != 3) {
        goto LABEL_28;
      }
LABEL_6:
      WTF::MonotonicTime::now(this);
      *((void *)this + 31) = v3;
      if (*((unsigned char *)this + 290))
      {
        switch(*((unsigned char *)this + 289))
        {
          case 0:
          case 2:
            int v4 = *((_DWORD *)this + 66);
            break;
          case 1:
          case 3:
            goto LABEL_17;
          default:
            int v4 = 0;
            break;
        }
      }
      else
      {
LABEL_17:
        int v4 = *((_DWORD *)this + 67);
      }
      *((_DWORD *)this + 71) = v4;
      if ((*((void *)this + 21) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*((void *)this + 21) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        WebCore::TimerBase::start();
      }
      goto LABEL_30;
    case 2u:
    case 6u:
      goto LABEL_28;
    case 3u:
      goto LABEL_6;
    case 4u:
    case 5u:
      char v43 = a2;
      if (!*((unsigned char *)this + 290)) {
        goto LABEL_27;
      }
      double v42 = 0.5;
      char v41 = 0;
      long long v40 = &v41;
      char v39 = 0;
      v38[0] = &v43;
      v38[1] = this;
      void v38[2] = &v40;
      v38[3] = &v39;
      v37[0] = (uint64_t)this;
      v37[1] = (uint64_t)&v42;
      v37[2] = (uint64_t)v38;
      unsigned int v5 = *((unsigned __int8 *)this + 289);
      if (v5 - 2 < 2)
      {
        unint64_t v21 = WebKit::PDFDiscretePresentationController::additionalVisibleRowIndexForDirection((uint64_t)this);
        if (HIDWORD(v21))
        {
          unsigned int v22 = *((_DWORD *)this + 19);
          unint64_t v23 = *((unsigned int *)this + 15);
          if (v23 <= v22)
          {
LABEL_49:
            __break(0xC471u);
            JUMPOUT(0x198E440CCLL);
          }
          unsigned int v24 = v21;
          if (v21 >= v23)
          {
            __break(0xC471u);
            JUMPOUT(0x198E440D4);
          }
          uint64_t v25 = *((void *)this + 6);
          uint64_t v26 = v25 + 80 * v22;
          float v27 = WebKit::PDFDiscretePresentationController::rowContainerSize(*((void *)this + 2), v26);
          if (*((unsigned char *)this + 290))
          {
            float v29 = v27;
            float v30 = *(float *)&v28;
            uint64_t v31 = v25 + 80 * v24;
            unsigned int v32 = *((unsigned __int8 *)this + 289);
            double v33 = WebKit::PDFDiscretePresentationController::layerOffsetForStretch(v32, v27, v28, v27);
            float v18 = *(float *)&v33;
            float v19 = *(float *)&v12;
            float v17 = *((float *)this + 66);
            LODWORD(v12) = *((_DWORD *)this + 67);
            uint64_t v20 = v26;
            uint64_t v15 = v31;
            unsigned int v16 = v32;
            float v13 = v29;
            float v14 = v30;
            goto LABEL_25;
          }
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
      }
      else
      {
        if (v5 > 1)
        {
LABEL_26:
          WebCore::TimerBase::start();
          goto LABEL_27;
        }
        unint64_t v6 = WebKit::PDFDiscretePresentationController::additionalVisibleRowIndexForDirection((uint64_t)this);
        if (HIDWORD(v6))
        {
          unint64_t v7 = *((unsigned int *)this + 15);
          if (v6 >= v7)
          {
            __break(0xC471u);
            JUMPOUT(0x198E440BCLL);
          }
          unsigned int v8 = *((_DWORD *)this + 19);
          if (v7 <= v8)
          {
            __break(0xC471u);
          }
          else
          {
            uint64_t v9 = *((void *)this + 6);
            uint64_t v10 = v9 + 80 * v6;
            float v11 = WebKit::PDFDiscretePresentationController::rowContainerSize(*((void *)this + 2), v10);
            if (*((unsigned char *)this + 290))
            {
              float v13 = v11;
              float v14 = *(float *)&v12;
              uint64_t v15 = v9 + 80 * v8;
              unsigned int v16 = *((unsigned __int8 *)this + 289);
              float v17 = *((float *)this + 66);
              LODWORD(v12) = *((_DWORD *)this + 67);
              float v18 = 0.0;
              float v19 = 0.0;
              uint64_t v20 = v10;
LABEL_25:
              double v42 = WebKit::PDFDiscretePresentationController::startTransitionAnimation(WebKit::PageTransitionState)::$_4::operator()(v37, v20, v15, v16, v17, v12, v18, v19, v13, v14);
              goto LABEL_26;
            }
          }
          goto LABEL_48;
        }
      }
LABEL_27:
      *((unsigned char *)this + 288) = 6;
LABEL_28:
      if ((*((void *)this + 21) & 0xFFFFFFFFFFFFLL) != 0) {
        WebCore::TimerBase::stopSlowCase((WebKit::PDFDiscretePresentationController *)((char *)this + 136));
      }
LABEL_30:
      WebKit::PDFDiscretePresentationController::updateLayersForTransitionState(this);
      int v34 = *((unsigned __int8 *)this + 288);
      if ((v34 - 4) < 2 || v34 == 2)
      {
        if (*((unsigned char *)this + 290)) {
          uint64_t v36 = WebKit::PDFDiscretePresentationController::additionalVisibleRowIndexForDirection((uint64_t)this);
        }
        else {
          uint64_t v36 = 0;
        }
      }
      else
      {
        if (*((unsigned char *)this + 288)) {
          return;
        }
        uint64_t v36 = *((unsigned int *)this + 19) | 0x100000000;
      }
      WebKit::PDFDiscretePresentationController::updateLayersAfterChangeInVisibleRow((uint64_t)this, v36);
      return;
    default:
      goto LABEL_30;
  }
}

void WebKit::PDFDiscretePresentationController::applyWheelEventDelta(uint64_t a1, float a2, float a3)
{
  if (!*(unsigned char *)(a1 + 290))
  {
    float v5 = a2 + *(float *)(a1 + 256);
    *(float *)(a1 + 256) = v5;
    float v6 = a3 + *(float *)(a1 + 260);
    *(float *)(a1 + 260) = v6;
    float v7 = fabsf(v5);
    float v8 = fabsf(v6);
    if (v7 >= v8) {
      float v9 = v7;
    }
    else {
      float v9 = v8;
    }
    if (v9 < 3.0) {
      return;
    }
    if (v7 > v8 && (v6 == 0.0 || (float)(v7 / v8) >= 1.5))
    {
      if (v5 < 0.0)
      {
        int v10 = 0;
LABEL_25:
        if (!*(_DWORD *)(a1 + 76))
        {
LABEL_34:
          unsigned int v12 = 0;
LABEL_35:
          WebKit::PDFDiscretePresentationController::updateState((WebKit::PDFDiscretePresentationController *)a1, v12);
          return;
        }
LABEL_31:
        *(_WORD *)(a1 + 289) = v10 | 0x100;
        *(void *)(a1 + 256) = 0;
        switch(v10)
        {
          case 0:
            float v6 = 0.0;
            if (v5 > 0.0) {
              float v5 = 0.0;
            }
            break;
          case 1:
            float v5 = 0.0;
            if (v6 > 0.0) {
              goto LABEL_39;
            }
            break;
          case 2:
            goto LABEL_39;
          case 3:
            float v5 = 0.0;
            if (v6 < 0.0) {
LABEL_39:
            }
              float v6 = 0.0;
            break;
          default:
            break;
        }
        *(float *)(a1 + 264) = v5;
        *(float *)(a1 + 268) = v6;
        unsigned int v12 = 2;
        goto LABEL_35;
      }
      int v10 = 2;
    }
    else
    {
      if (v7 >= v8 || v5 != 0.0 && (float)(v8 / v7) < 1.5) {
        return;
      }
      if (v6 < 0.0)
      {
        int v10 = 1;
        goto LABEL_25;
      }
      int v10 = 3;
    }
    uint64_t v11 = *(unsigned int *)(a1 + 60);
    if (!v11 || v11 - 1 <= (unint64_t)*(unsigned int *)(a1 + 76)) {
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  float v3 = a2 + *(float *)(a1 + 264);
  float v4 = a3 + *(float *)(a1 + 268);
  switch(*(unsigned char *)(a1 + 289))
  {
    case 0:
      float v4 = 0.0;
      if (v3 > 0.0) {
        float v3 = 0.0;
      }
      break;
    case 1:
      float v3 = 0.0;
      if (v4 > 0.0) {
        goto LABEL_20;
      }
      break;
    case 2:
      goto LABEL_20;
    case 3:
      float v3 = 0.0;
      if (v4 < 0.0) {
LABEL_20:
      }
        float v4 = 0.0;
      break;
    default:
      break;
  }
  *(float *)(a1 + 264) = v3;
  *(float *)(a1 + 268) = v4;
}

void WebKit::PDFDiscretePresentationController::updateLayersForTransitionState(WebKit::PDFDiscretePresentationController *this)
{
  if (*((unsigned __int8 *)this + 288) - 2 >= 4)
  {
    if (!*((unsigned char *)this + 288))
    {
      unsigned int v22 = *((_DWORD *)this + 15);
      if (v22)
      {
        uint64_t v23 = *((void *)this + 6);
        uint64_t v24 = v23 + 80 * v22;
        do
        {
          v35[0] = WebKit::PDFDiscretePresentationController::positionForRowContainerLayer(*((void *)this + 2), v23);
          v35[1] = v25;
          (*(void (**)(void, _DWORD *))(**(void **)(v23 + 40) + 128))(*(void *)(v23 + 40), v35);
          (*(void (**)(float))(**(void **)(v23 + 40) + 280))(1.0);
          uint64_t v26 = *(void *)(v23 + 40);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          int v34 = v36;
          (*(void (**)(uint64_t, WTF::StringImpl **, void))(*(void *)v26 + 440))(v26, &v34, 0);
          double v28 = v34;
          int v34 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v27);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          uint64_t v29 = *(void *)(v23 + 40);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          int v34 = v36;
          (*(void (**)(uint64_t, WTF::StringImpl **, void))(*(void *)v29 + 440))(v29, &v34, 0);
          uint64_t v31 = v34;
          int v34 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2) {
              WTF::StringImpl::destroy(v31, v30);
            }
            else {
              *(_DWORD *)v31 -= 2;
            }
          }
          v23 += 80;
        }
        while (v23 != v24);
      }
    }
    return;
  }
  if (!*((unsigned char *)this + 290)) {
    return;
  }
  unint64_t v2 = WebKit::PDFDiscretePresentationController::additionalVisibleRowIndexForDirection((uint64_t)this);
  unint64_t v3 = HIDWORD(v2);
  if (HIDWORD(v2)) {
    unsigned int v4 = v2;
  }
  else {
    unsigned int v4 = *((_DWORD *)this + 19);
  }
  if (v4 >= *((_DWORD *)this + 19)) {
    unsigned int v5 = *((_DWORD *)this + 19);
  }
  else {
    unsigned int v5 = v4;
  }
  if (*((_DWORD *)this + 15) <= v5)
  {
    __break(0xC471u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v6 = *((void *)this + 6);
  float v7 = WebKit::PDFDiscretePresentationController::rowContainerSize(*((void *)this + 2), v6 + 80 * v5);
  if (!*((unsigned char *)this + 290)) {
    goto LABEL_35;
  }
  float v9 = v7;
  float v10 = *(float *)&v8;
  LODWORD(v8) = *((_DWORD *)this + 67);
  double v11 = WebKit::PDFDiscretePresentationController::layerOffsetForStretch(*((unsigned __int8 *)this + 289), *((float *)this + 66), v8, v7);
  float v12 = *(float *)&v11;
  float v14 = v13;
  *(float *)&uint64_t v36 = *(float *)&v11
                 + WebKit::PDFDiscretePresentationController::positionForRowContainerLayer(*((void *)this + 2), v6 + 80 * v5);
  *((float *)&v36 + 1) = v14 + v15;
  if (!*((unsigned char *)this + 290)) {
    goto LABEL_35;
  }
  unsigned int v16 = *((unsigned __int8 *)this + 289);
  float v17 = WebKit::PDFDiscretePresentationController::layerOpacitiesForStretchOffset(v16, v12, v14, v9, v10);
  float v19 = v18;
  if (v16 - 2 < 2)
  {
    uint64_t v32 = v6 + 80 * v5;
    (*(void (**)(void, WTF::StringImpl **))(**(void **)(v32 + 40) + 128))(*(void *)(v32 + 40), &v36);
    (*(void (**)(float))(**(void **)(v32 + 40) + 280))(v17);
    if (!v3) {
      return;
    }
    unsigned int v21 = v5 + 1;
    if (*((_DWORD *)this + 15) > v5 + 1) {
      goto LABEL_32;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x198E44488);
  }
  if (v16 <= 1)
  {
    uint64_t v20 = v6 + 80 * v5;
    (*(void (**)(void, WTF::StringImpl **))(**(void **)(v20 + 40) + 128))(*(void *)(v20 + 40), &v36);
    (*(void (**)(float))(**(void **)(v20 + 40) + 280))(v17);
    if (v3)
    {
      unsigned int v21 = v5 + 1;
      if (*((_DWORD *)this + 15) <= v5 + 1) {
        goto LABEL_36;
      }
LABEL_32:
      uint64_t v33 = *(void *)(*((void *)this + 6) + 80 * v21 + 40);
      (*(void (**)(uint64_t, float))(*(void *)v33 + 280))(v33, v19);
    }
  }
}

void sub_198E44740(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PDFDiscretePresentationController::startPageTransitionOrSettle(WebKit::PDFDiscretePresentationController *this)
{
  int v1 = *((unsigned __int8 *)this + 288);
  if (v1 == 1)
  {
    unsigned int v3 = 0;
    goto LABEL_8;
  }
  if (v1 != 2) {
    return;
  }
  if (*((unsigned char *)this + 290))
  {
    unint64_t v2 = (float *)((char *)this + 264);
    switch(*((unsigned char *)this + 289))
    {
      case 0:
      case 2:
        goto LABEL_6;
      case 1:
      case 3:
        break;
      default:
        goto LABEL_7;
    }
  }
  unint64_t v2 = (float *)((char *)this + 268);
LABEL_6:
  if (fabsf(*v2) < 200.0)
  {
LABEL_7:
    unsigned int v3 = 3;
LABEL_8:
    WebKit::PDFDiscretePresentationController::updateState(this, v3);
    return;
  }
  unsigned int v3 = 4;
  if (*v2 != 0.0) {
    goto LABEL_8;
  }
}

uint64_t WebKit::PDFDiscretePresentationController::additionalVisibleRowIndexForDirection(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 290)) {
    goto LABEL_12;
  }
  unsigned int v1 = *(unsigned __int8 *)(a1 + 289);
  if (v1 <= 1)
  {
    int v2 = *(_DWORD *)(a1 + 76);
    if (v2)
    {
      LODWORD(v3) = v2 - 1;
      int v4 = v3 & 0xFFFFFF00;
      uint64_t v5 = 0x100000000;
      return v5 | v4 | v3;
    }
  }
  if ((v1 & 0xFE) != 2)
  {
LABEL_12:
    uint64_t v5 = 0;
    LOBYTE(v3) = 0;
    int v4 = 0;
    return v5 | v4 | v3;
  }
  unint64_t v3 = *(unsigned int *)(a1 + 76);
  BOOL v6 = (unint64_t)*(unsigned int *)(a1 + 60) - 1 > v3;
  int v4 = (v3 + 1) & 0xFFFFFF00;
  uint64_t v5 = 0x100000000;
  if ((unint64_t)*(unsigned int *)(a1 + 60) - 1 > v3)
  {
    LOBYTE(v3) = v3 + 1;
  }
  else
  {
    uint64_t v5 = 0;
    LOBYTE(v3) = 0;
  }
  if (!v6) {
    int v4 = 0;
  }
  return v5 | v4 | v3;
}

float WebKit::PDFDiscretePresentationController::rowContainerSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 608;
  WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v19, a2);
  WebKit::PDFDocumentLayout::layoutBoundsForRow(v3, (unint64_t *)v19, v21);
  int v6 = v5;
  int v8 = v7;
  float v10 = v9;
  int v12 = v11;
  float v13 = v19;
  if (&v22 != (uint64_t *)v19 && v19 != 0)
  {
    float v19 = 0;
    int v20 = 0;
    WTF::fastFree(v13, v4);
  }
  v16[0] = v6;
  v16[1] = v8;
  float v17 = v10;
  int v18 = v12;
  WebCore::FloatRect::scale((WebCore::FloatRect *)v16, *(float *)(a1 + 648), *(float *)(a1 + 648));
  return v17;
}

void sub_198E44944(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if ((WTF *)(v12 + 16) != a11 && a11 != 0) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

double WebKit::PDFDiscretePresentationController::startTransitionAnimation(WebKit::PageTransitionState)::$_4::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, float a5, double a6, float a7, float a8, float a9, float a10)
{
  uint64_t v18 = *a1;
  double v19 = WebKit::PDFDiscretePresentationController::layerOffsetForStretch(a4, a5, a6, a9);
  float v20 = *(float *)&v19;
  float v22 = v21;
  float v23 = WebKit::PDFDiscretePresentationController::layerOpacitiesForStretchOffset(a4, *(float *)&v19, v21, a9, a10);
  float v25 = v24;
  float v27 = v26;
  uint64_t v28 = a1[2];
  float v58 = v29;
  if (**(unsigned char **)v28 != 5)
  {
    WebCore::CubicBezierTimingFunction::create();
    uint64_t v31 = v64[0];
    WebCore::CubicBezierTimingFunction::create();
    uint64_t v32 = v64[0];
    goto LABEL_6;
  }
  uint64_t v30 = *(void *)(v28 + 8);
  WebCore::LinearTimingFunction::create((WebCore::LinearTimingFunction *)v64);
  uint64_t v31 = v64[0];
  WebCore::LinearTimingFunction::create((WebCore::LinearTimingFunction *)v64);
  uint64_t v32 = v64[0];
  if (!*(unsigned char *)(v30 + 280))
  {
LABEL_6:
    double v36 = 0.5;
    goto LABEL_17;
  }
  float v33 = 0.0;
  float v34 = 0.0;
  switch(a4)
  {
    case 0u:
    case 2u:
      int v35 = (float *)(v30 + 272);
      goto LABEL_8;
    case 1u:
    case 3u:
      int v35 = (float *)(v30 + 276);
LABEL_8:
      float v34 = *v35;
      break;
    default:
      break;
  }
  switch(a4)
  {
    case 0u:
    case 2u:
      float v33 = a7 - v20;
      break;
    case 1u:
    case 3u:
      float v33 = a8 - v22;
      break;
    default:
      break;
  }
  double v37 = fabsf(v33 / v34);
  if (v37 < 0.2) {
    double v37 = 0.2;
  }
  if (v37 <= 0.75) {
    double v36 = v37;
  }
  else {
    double v36 = 0.75;
  }
LABEL_17:
  v64[0] = 0;
  v64[1] = 0;
  char v65 = 1;
  WebKit::PDFDiscretePresentationController::startTransitionAnimation(WebKit::PageTransitionState)::$_1::operator()(v63, 0.0, v20, v22);
  WebKit::PDFDiscretePresentationController::startTransitionAnimation(WebKit::PageTransitionState)::$_1::operator()(v60, 1.0, a7, a8);
  uint64_t v67 = (WTF::StringImpl *)v63[0];
  WebCore::KeyframeValueList::insert();
  int v38 = v67;
  uint64_t v67 = 0;
  if (v38) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v38 + 8))(v38);
  }
  uint64_t v39 = v60[0];
  v60[0] = 0;
  uint64_t v66 = v39;
  WebCore::KeyframeValueList::insert();
  uint64_t v40 = v66;
  uint64_t v66 = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  WebCore::Animation::create((WebCore::Animation *)&v66);
  uint64_t v41 = v66;
  *(double *)(v66 + 64) = v36;
  *(_DWORD *)(v41 + 112) |= 0x800u;
  double v42 = *(_DWORD **)(v41 + 96);
  *(void *)(v41 + 96) = v31;
  if (v42)
  {
    if (v42[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v42 + 16))(v42);
    }
    else {
      --v42[2];
    }
  }
  *(_DWORD *)(v41 + 112) |= 0x40000u;
  uint64_t v43 = *(void *)(a2 + 40);
  v60[0] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v67 = (WTF::StringImpl *)v63[0];
  (*(void (**)(uint64_t, void *, uint64_t *, uint64_t, WTF::StringImpl **, double))(*(void *)v43 + 424))(v43, v64, v60, v41, &v67, 0.0);
  long long v45 = v67;
  uint64_t v67 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v44);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  WebKit::PDFDiscretePresentationController::startTransitionAnimation(WebKit::PageTransitionState)::$_3::operator()((uint64_t)v63, v23, v25);
  WebCore::Animation::create((WebCore::Animation *)&v62);
  uint64_t v46 = v62;
  *(double *)(v62 + 64) = v36;
  *(_DWORD *)(v46 + 112) |= 0x800u;
  unsigned int v47 = *(_DWORD **)(v46 + 96);
  *(void *)(v46 + 96) = v32;
  if (v47)
  {
    if (v47[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v47 + 16))(v47);
    }
    else {
      --v47[2];
    }
  }
  *(_DWORD *)(v46 + 112) |= 0x40000u;
  uint64_t v48 = *(void *)(a2 + 40);
  uint64_t v67 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v61 = (WTF::StringImpl *)v60[0];
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **, uint64_t, WTF::StringImpl **, double))(*(void *)v48 + 424))(v48, v63, &v67, v46, &v61, 0.0);
  float v50 = v61;
  uint64_t v61 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2) {
      WTF::StringImpl::destroy(v50, v49);
    }
    else {
      *(_DWORD *)v50 -= 2;
    }
  }
  WebKit::PDFDiscretePresentationController::startTransitionAnimation(WebKit::PageTransitionState)::$_3::operator()((uint64_t)v60, v27, v58);
  uint64_t v51 = *(void *)(a3 + 40);
  uint64_t v61 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v59 = v67;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **, uint64_t, WTF::StringImpl **, double))(*(void *)v51 + 424))(v51, v60, &v61, v46, &v59, 0.0);
  unsigned int v53 = v59;
  uint64_t v59 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2) {
      WTF::StringImpl::destroy(v53, v52);
    }
    else {
      *(_DWORD *)v53 -= 2;
    }
  }
  WTF::Vector<std::unique_ptr<WebCore::AnimationValue const>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v60, v52);
  WTF::RefCounted<WebCore::Animation>::deref((_DWORD *)v46);
  WTF::Vector<std::unique_ptr<WebCore::AnimationValue const>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v63, v54);
  WTF::RefCounted<WebCore::Animation>::deref((_DWORD *)v41);
  WTF::Vector<std::unique_ptr<WebCore::AnimationValue const>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v64, v55);
  *(double *)a1[1] = v36;
  LODWORD(v64[0]) = WebKit::PDFDiscretePresentationController::positionForRowContainerLayer(*(void *)(v18 + 16), a2);
  HIDWORD(v64[0]) = v56;
  (*(void (**)(void, void *))(**(void **)(a2 + 40) + 128))(*(void *)(a2 + 40), v64);
  (*(void (**)(float))(**(void **)(a2 + 40) + 280))(1.0);
  (*(void (**)(float))(**(void **)(a3 + 40) + 280))(1.0);
  return *(double *)a1[1];
}

void sub_198E44FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24)
{
  if (v24)
  {
    if (v24[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v24 + 16))(v24);
    }
    else {
      --v24[2];
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198E4511C()
{
}

double WebKit::PDFDiscretePresentationController::layerOffsetForStretch(unsigned int a1, float a2, double a3, float a4)
{
  if (a1 - 2 < 2)
  {
    *(float *)&double result = -a2;
    if (a1 == 3) {
      *(float *)&double result = 0.0;
    }
  }
  else if (a1 > 1)
  {
    return 0.0;
  }
  else
  {
    float v4 = a4 * 0.5;
    if (a1 == 1) {
      float v4 = 0.0;
    }
    *(float *)&double result = (float)-v4 - a2;
  }
  return result;
}

uint64_t WebKit::PDFDiscretePresentationController::updateLayersAfterChangeInVisibleRow(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(result + 60);
  if (v2 <= *(_DWORD *)(result + 76)) {
    return result;
  }
  int v3 = a2;
  uint64_t v4 = result;
  uint64_t v5 = a2 & 0xFF00000000;
  unint64_t v6 = a2;
  BOOL v7 = a2 < v2 || (a2 & 0xFF00000000) == 0;
  WebCore::GraphicsLayer::removeAllChildren(*(WebCore::GraphicsLayer **)(result + 40));
  unsigned int v8 = *(_DWORD *)(v4 + 76);
  if (*(_DWORD *)(v4 + 60) <= v8)
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  uint64_t v9 = *(void *)(v4 + 48);
  WebKit::UnifiedPDFPlugin::isInWindow(*(WebKit::UnifiedPDFPlugin **)(v4 + 16));
  uint64_t v10 = v9 + 80 * v8;
  WebCore::GraphicsLayer::setIsInWindow(*(WebCore::GraphicsLayer **)(v10 + 64));
  WebCore::GraphicsLayer::setIsInWindow(*(WebCore::GraphicsLayer **)(v10 + 72));
  uint64_t v11 = *(void *)(v10 + 40);
  if (v11) {
    ++*(_DWORD *)(v11 + 8);
  }
  uint64_t v12 = *(void *)(v4 + 40);
  uint64_t v19 = v11;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 64))(v12, &v19);
  double result = v19;
  uint64_t v19 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1) {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    }
    else {
      --*(_DWORD *)(result + 8);
    }
  }
  if (v5 && v6 < v2)
  {
    int v13 = v3;
    unsigned int v14 = v3 & 0xFFFFFF00;
    if (!v7) {
      int v13 = 0;
    }
    unsigned int v15 = v13 | v14;
    if (*(_DWORD *)(v4 + 60) > (v13 | v14))
    {
      uint64_t v16 = *(void *)(v4 + 48) + 80 * v15;
      WebCore::GraphicsLayer::setIsInWindow(*(WebCore::GraphicsLayer **)(v16 + 64));
      WebCore::GraphicsLayer::setIsInWindow(*(WebCore::GraphicsLayer **)(v16 + 72));
      uint64_t v17 = *(void *)(v16 + 40);
      if (v17) {
        ++*(_DWORD *)(v17 + 8);
      }
      uint64_t v18 = *(void *)(v4 + 40);
      if (v15 >= *(_DWORD *)(v4 + 76))
      {
        uint64_t v19 = v17;
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v18 + 72))(v18, &v19, 0);
      }
      else
      {
        uint64_t v19 = v17;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 64))(v18, &v19);
      }
      double result = v19;
      uint64_t v19 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 8) == 1) {
          return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
        }
        else {
          --*(_DWORD *)(result + 8);
        }
      }
      return result;
    }
    __break(0xC471u);
LABEL_29:
    JUMPOUT(0x198E454A0);
  }
  return result;
}

void sub_198E454AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a10 + 16))(a10);
    }
    else {
      --a10[2];
    }
  }
  _Unwind_Resume(exception_object);
}

float WebKit::PDFDiscretePresentationController::layerOpacitiesForStretchOffset(int a1, float a2, float a3, float a4, float a5)
{
  switch(a1)
  {
    case 0:
    case 2:
      break;
    case 1:
    case 3:
      a4 = a5;
      break;
    default:
      a4 = 0.0;
      break;
  }
  float v5 = a4 * 0.5;
  switch(a1)
  {
    case 0:
      a3 = a2;
      goto LABEL_6;
    case 1:
LABEL_6:
      float v6 = fabsf(a3);
      if (v5 >= v6) {
        float v7 = v6;
      }
      else {
        float v7 = v5;
      }
      return 1.0 - (float)(v7 / v5);
    case 2:
      goto LABEL_12;
    case 3:
      a2 = a3;
LABEL_12:
      float v9 = fabsf(a2);
      if (v5 >= v9) {
        float v10 = v9;
      }
      else {
        float v10 = v5;
      }
      float result = 1.0 - (float)(v10 / v5);
      break;
    default:
      float result = 1.0;
      break;
  }
  return result;
}

float WebKit::PDFDiscretePresentationController::positionForRowContainerLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 608;
  WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v17, a2);
  WebKit::PDFDocumentLayout::layoutBoundsForRow(v3, (unint64_t *)v17, v19);
  int v6 = v5;
  int v8 = v7;
  int v10 = v9;
  int v12 = v11;
  int v13 = v17;
  if (&v20 != (uint64_t *)v17 && v17 != 0)
  {
    uint64_t v17 = 0;
    int v18 = 0;
    WTF::fastFree(v13, v4);
  }
  v16[0] = v6;
  v16[1] = v8;
  _DWORD v16[2] = v10;
  v16[3] = v12;
  WebCore::FloatRect::scale((WebCore::FloatRect *)v16, *(float *)(a1 + 648), *(float *)(a1 + 648));
  return *(float *)v16;
}

void sub_198E456CC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if ((WTF *)(v12 + 16) != a11 && a11 != 0) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFDiscretePresentationController::setVisibleRow(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 76) != a2)
  {
    uint64_t v2 = this;
    *(_DWORD *)(this + 76) = a2;
    WebKit::PDFDiscretePresentationController::updateLayersAfterChangeInVisibleRow(this, 0);
    uint64_t v3 = *(WebKit::UnifiedPDFPlugin **)(v2 + 16);
    return WebKit::UnifiedPDFPlugin::didChangeVisibleRow(v3);
  }
  return this;
}

uint64_t WebKit::PDFDiscretePresentationController::pageCoverageForContentsRect@<X0>(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = WebKit::UnifiedPDFPlugin::visibleOrDocumentSizeIsEmpty(*(WebKit::UnifiedPDFPlugin **)(a1 + 16));
  if (result || !*(unsigned char *)(a3 + 32))
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    return result;
  }
  if (!*(_DWORD *)(a3 + 12))
  {
    __break(0xC471u);
    goto LABEL_17;
  }
  double v9 = WebKit::PDFDiscretePresentationController::convertFromPaintingToContents(a1, a2, **(void **)a3, 1);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)float v26 = __PAIR64__(v11, LODWORD(v9));
  *(_DWORD *)&v26[8] = v12;
  *(_DWORD *)&v26[12] = v13;
  uint64_t result = WebCore::FloatRect::scale((WebCore::FloatRect *)v26, 1.0 / *(float *)(v10 + 648), 1.0 / *(float *)(v10 + 648));
  long long v25 = *(_OWORD *)v26;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  if (!*(unsigned char *)(a3 + 32))
  {
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v14 = *(unsigned int *)(a3 + 12);
  if (v14)
  {
    unsigned int v15 = *(unint64_t **)a3;
    uint64_t v16 = 8 * v14;
    do
    {
      unint64_t v17 = *v15;
      LODWORD(v27) = WebKit::UnifiedPDFPlugin::layoutBoundsForPageAtIndex(*(WebKit::UnifiedPDFPlugin **)(a1 + 16), *v15);
      *(void *)((char *)&v27 + 4) = __PAIR64__(v19, v18);
      HIDWORD(v27) = v20;
      uint64_t result = WebCore::FloatRect::intersects((WebCore::FloatRect *)&v27, (const WebCore::FloatRect *)&v25);
      if (result)
      {
        *(void *)float v26 = v17;
        *(_OWORD *)&v26[8] = v27;
        *(_OWORD *)&v26[24] = v25;
        uint64_t v21 = *(unsigned int *)(a4 + 12);
        if (v21 == *(_DWORD *)(a4 + 8))
        {
          uint64_t result = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v21 + 1, (unint64_t)v26);
          LODWORD(v21) = *(_DWORD *)(a4 + 12);
          uint64_t v22 = *(void *)a4 + 40 * v21;
          long long v23 = *(_OWORD *)result;
          long long v24 = *(_OWORD *)(result + 16);
          *(void *)(v22 + 32) = *(void *)(result + 32);
        }
        else
        {
          uint64_t v22 = *(void *)a4 + 40 * v21;
          long long v23 = *(_OWORD *)v26;
          long long v24 = *(_OWORD *)&v26[16];
          *(void *)(v22 + 32) = *(void *)&v26[32];
        }
        *(_OWORD *)uint64_t v22 = v23;
        *(_OWORD *)(v22 + 16) = v24;
        *(_DWORD *)(a4 + 12) = v21 + 1;
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

void sub_198E458E0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::UnifiedPDFPlugin::visibleOrDocumentSizeIsEmpty(WebKit::UnifiedPDFPlugin *this)
{
  if (*((int *)this + 80) < 1 || *((int *)this + 81) < 1) {
    return 1;
  }
  unint64_t v1 = WebKit::UnifiedPDFPlugin::documentSize(this);
  return (int)v1 < 1 || SHIDWORD(v1) < 1;
}

double WebKit::PDFDiscretePresentationController::convertFromPaintingToContents(uint64_t a1, float *a2, unint64_t a3, char a4)
{
  if (!a4) {
    return 0.0;
  }
  unint64_t v4 = (a3 >> (*(unsigned __int8 *)(*(void *)(a1 + 16) + 652) > 1u));
  double result = 0.0;
  if (v4 < *(unsigned int *)(a1 + 60)) {
    LODWORD(result) = *(_DWORD *)(*(void *)(a1 + 48) + 80 * v4 + 32);
  }
  *(float *)&double result = *(float *)&result + *a2;
  return result;
}

void WebKit::PDFDiscretePresentationController::pageCoverageAndScalesForContentsRect(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  if (WebKit::UnifiedPDFPlugin::visibleOrDocumentSizeIsEmpty(*(WebKit::UnifiedPDFPlugin **)(a1 + 16))
    || !*(unsigned char *)(a3 + 32))
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)(a4 + 24) = _D0;
    *(_DWORD *)(a4 + 32) = 1065353216;
    return;
  }
  std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](v22, a3);
  WebKit::PDFDiscretePresentationController::pageCoverageForContentsRect(a1, a2, (uint64_t)v22, a4);
  *(void *)(a4 + 16) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a4 + 24) = _D0;
  *(_DWORD *)(a4 + 32) = 1065353216;
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v15);
  float v16 = WebKit::PDFPluginBase::deviceScaleFactor(*(WebKit::PDFPluginBase **)(a1 + 16));
  uint64_t v17 = *(void *)(a1 + 16);
  int v18 = *(_DWORD *)(v17 + 648);
  *(float *)(a4 + 24) = v16;
  *(_DWORD *)(a4 + 28) = v18;
  *(float *)(a4 + 32) = a5;
  if (!*(unsigned char *)(a3 + 32))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!*(_DWORD *)(a3 + 12))
  {
LABEL_10:
    __break(0xC471u);
    return;
  }
  unint64_t v19 = (**(void **)a3 >> (*(unsigned __int8 *)(v17 + 652) > 1u));
  uint64_t v20 = 0;
  if (v19 < *(unsigned int *)(a1 + 60)) {
    uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 80 * v19 + 32);
  }
  *(void *)(a4 + 16) = v20;
}

void sub_198E45AE4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  int v12 = *(WTF **)v10;
  if (*(void *)v10)
  {
    *(void *)uint64_t v10 = 0;
    *(_DWORD *)(v10 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  _Unwind_Resume(exception_object);
}

double WebKit::PDFDiscretePresentationController::convertFromContentsToPainting(uint64_t a1, float *a2, unint64_t a3, char a4)
{
  if (!a4) {
    return 0.0;
  }
  unint64_t v4 = (a3 >> (*(unsigned __int8 *)(*(void *)(a1 + 16) + 652) > 1u));
  double result = 0.0;
  if (v4 < *(unsigned int *)(a1 + 60)) {
    LODWORD(result) = *(_DWORD *)(*(void *)(a1 + 48) + 80 * v4 + 32);
  }
  *(float *)&double result = *a2 - *(float *)&result;
  return result;
}

uint64_t WebKit::PDFDiscretePresentationController::deviceOrPageScaleFactorChanged(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 60);
  if (v1)
  {
    uint64_t v2 = 80 * v1;
    uint64_t v3 = *(void *)(this + 48) + 40;
    do
    {
      this = *(void *)v3;
      if (!*(void *)(*(void *)v3 + 200)) {
        this = WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants((WebCore::GraphicsLayer *)this);
      }
      v3 += 80;
      v2 -= 80;
    }
    while (v2);
  }
  return this;
}

uint64_t WebKit::PDFDiscretePresentationController::setupLayers(WebKit::PDFDiscretePresentationController *this, WebCore::GraphicsLayer *a2)
{
  uint64_t v2 = this;
  if (!*((void *)this + 5))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::PDFPresentationController::createGraphicsLayer(&v116, (WebKit::UnifiedPDFPlugin **)v2, (uint64_t)v115);
    int v5 = (_DWORD *)*((void *)v2 + 5);
    *((void *)v2 + 5) = v116;
    if (v5)
    {
      if (v5[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v5 + 16))(v5);
      }
      else {
        --v5[2];
      }
    }
    int v6 = v115[0];
    v115[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = *((void *)v2 + 5);
    int v117 = 0;
    char v116 = 0;
    (*(void (**)(uint64_t, WebKit::AsyncPDFRenderer **))(*(void *)v7 + 152))(v7, &v116);
    int v8 = (WebKit::AsyncPDFRenderer *)*((void *)v2 + 5);
    ++*((_DWORD *)v8 + 2);
    char v116 = v8;
    (*(void (**)(WebCore::GraphicsLayer *, WebKit::AsyncPDFRenderer **))(*(void *)a2 + 64))(a2, &v116);
    double v9 = v116;
    char v116 = 0;
    if (v9)
    {
      if (*((_DWORD *)v9 + 2) == 1) {
        (*(void (**)(WebKit::AsyncPDFRenderer *))(*(void *)v9 + 16))(v9);
      }
      else {
        --*((_DWORD *)v9 + 2);
      }
    }
  }
  uint64_t v10 = *((void *)v2 + 2);
  int v11 = *(unsigned __int8 *)(v10 + 652);
  if (!*((unsigned char *)v2 + 73))
  {
    *((_WORD *)v2 + 36) = v11 | 0x100;
    goto LABEL_15;
  }
  int v12 = *((unsigned __int8 *)v2 + 72);
  *((_WORD *)v2 + 36) = v11 | 0x100;
  if (v12 != v11)
  {
LABEL_15:
    WebKit::PDFPresentationController::clearAsyncRenderer((atomic_uchar *)v2);
    WTF::Vector<WebKit::PDFDiscretePresentationController::RowData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebKit::PDFDiscretePresentationController *)((char *)v2 + 48), v13);
    uint64_t v10 = *((void *)v2 + 2);
  }
  WebKit::PDFDocumentLayout::rows((WebKit::PDFDocumentLayout *)&v112, v10 + 608);
  unsigned int v15 = v113;
  uint64_t v16 = *((unsigned int *)v2 + 15);
  int v111 = (WebKit::UnifiedPDFPlugin **)v2;
  if (v16 < v113)
  {
    unint64_t v17 = *((unsigned int *)v2 + 14);
    int v18 = (WTF *)*((void *)v2 + 6);
    if (v17 < v113)
    {
      unint64_t v19 = v17 + (v17 >> 2);
      if (v19 >= 0x10) {
        unint64_t v20 = v19 + 1;
      }
      else {
        unint64_t v20 = 16;
      }
      if (v20 <= v113) {
        unint64_t v20 = v113;
      }
      if (v20 >= 0x3333334)
      {
LABEL_171:
        __break(0xC471u);
        JUMPOUT(0x198E46A6CLL);
      }
      unsigned int v21 = 80 * v20;
      uint64_t v22 = WTF::fastMalloc((WTF *)(80 * v20));
      *((_DWORD *)v2 + 14) = v21 / 0x50;
      *((void *)v2 + 6) = v22;
      if (v16)
      {
        uint64_t v23 = 0;
        uint64_t v24 = 80 * v16;
        do
        {
          long long v25 = (char *)v18 + v23;
          uint64_t v26 = v22 + v23;
          long long v27 = (void *)(v22 + v23 + 16);
          *(void *)uint64_t v26 = v27;
          *(void *)(v26 + 8) = 2;
          uint64_t v29 = (uint64_t)v18 + v23 + 16;
          uint64_t v28 = *(void **)((char *)v18 + v23);
          if ((void *)v29 == v28)
          {
            memcpy(v27, v28, 8 * *((unsigned int *)v25 + 3));
          }
          else
          {
            *(void *)long long v25 = v29;
            *(void *)uint64_t v26 = v28;
            int v30 = *((_DWORD *)v25 + 2);
            *((_DWORD *)v25 + 2) = 2;
            *(_DWORD *)(v26 + 8) = v30;
          }
          uint64_t v31 = (char *)v18 + v23;
          int v32 = *(_DWORD *)((char *)v18 + v23 + 12);
          *((_DWORD *)v31 + 3) = 0;
          *(_DWORD *)(v26 + 12) = v32;
          float v33 = (void *)(v22 + v23);
          v33[4] = *(void *)((char *)v18 + v23 + 32);
          uint64_t v34 = *(void *)((char *)v18 + v23 + 40);
          *((void *)v31 + 5) = 0;
          v33[5] = v34;
          uint64_t v35 = *(void *)((char *)v18 + v23 + 48);
          *((void *)v31 + 6) = 0;
          v33[6] = v35;
          uint64_t v36 = *(void *)((char *)v18 + v23 + 56);
          *((void *)v31 + 7) = 0;
          v33[7] = v36;
          uint64_t v37 = *(void *)((char *)v18 + v23 + 64);
          *((void *)v31 + 8) = 0;
          v33[8] = v37;
          uint64_t v38 = *(void *)((char *)v18 + v23 + 72);
          *((void *)v31 + 9) = 0;
          v33[9] = v38;
          WebKit::PDFDiscretePresentationController::RowData::~RowData((WTF *)((char *)v18 + v23), v28);
          v23 += 80;
        }
        while (v24 != v23);
        uint64_t v22 = *((void *)v2 + 6);
      }
      if (!v18)
      {
        int v18 = (WTF *)v22;
        if (!v22) {
          goto LABEL_43;
        }
        goto LABEL_36;
      }
      if ((WTF *)v22 == v18)
      {
        *((void *)v2 + 6) = 0;
        *((_DWORD *)v2 + 14) = 0;
      }
      WTF::fastFree(v18, v14);
      int v18 = (WTF *)*((void *)v2 + 6);
    }
    if (!v18) {
      goto LABEL_43;
    }
LABEL_36:
    uint64_t v39 = *((unsigned int *)v2 + 15);
    if (v39 != v15)
    {
      uint64_t v40 = 5 * v39;
      uint64_t v41 = 80 * v15 - 80 * v39;
      uint64_t v42 = (uint64_t)v18 + 16 * v40 + 16;
      do
      {
        *(void *)uint64_t v42 = 0;
        *(void *)(v42 + 8) = 0;
        *(void *)(v42 - 16) = v42;
        *(void *)(v42 - 8) = 2;
        *(_OWORD *)(v42 + 16) = 0uLL;
        *(_OWORD *)(v42 + 32) = 0uLL;
        *(_OWORD *)(v42 + 48) = 0uLL;
        v42 += 80;
        v41 -= 80;
      }
      while (v41);
    }
    goto LABEL_43;
  }
  if (v16 != v113)
  {
    uint64_t v43 = (WebKit::PDFDiscretePresentationController::RowData *)(*((void *)v2 + 6) + 80 * v113);
    uint64_t v44 = 80 * v16 - 80 * v113;
    do
    {
      WebKit::PDFDiscretePresentationController::RowData::~RowData(v43, v14);
      uint64_t v43 = (WebKit::PDFDiscretePresentationController::RowData *)(v45 + 80);
      v44 -= 80;
    }
    while (v44);
  }
LABEL_43:
  *((_DWORD *)v2 + 15) = v15;
  if (v113)
  {
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    uint64_t v110 = (uint64_t *)((char *)v2 + 64);
    for (uint64_t i = 72; ; i += 80)
    {
      if (v47 >= *((unsigned int *)v2 + 15)) {
        goto LABEL_171;
      }
      uint64_t v49 = v112;
      float v50 = (unint64_t **)(v112 + v46);
      uint64_t v51 = *((void *)v2 + 6);
      uint64_t v52 = v51 + i;
      unsigned int v53 = (void **)(v51 + i - 72);
      if ((void **)(v112 + v46) != v53) {
        break;
      }
LABEL_78:
      unint64_t v114 = v47;
      if (!*(void *)(v52 - 32))
      {
        WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)v115, "Row container ", 15, v47);
        if (!v115[0])
        {
          __break(0xC471u);
          JUMPOUT(0x198E46A8CLL);
        }
        WebKit::PDFPresentationController::createGraphicsLayer(&v116, v111, (uint64_t)v115);
        unint64_t v70 = *(_DWORD **)(v52 - 32);
        *(void *)(v52 - 32) = v116;
        if (v70)
        {
          if (v70[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v70 + 16))(v70);
          }
          else {
            --v70[2];
          }
        }
        unint64_t v71 = v115[0];
        v115[0] = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2) {
            WTF::StringImpl::destroy(v71, v69);
          }
          else {
            *(_DWORD *)v71 -= 2;
          }
        }
        uint64_t v72 = *(void *)(v52 - 32);
        int v117 = 0;
        char v116 = 0;
        (*(void (**)(uint64_t, WebKit::AsyncPDFRenderer **))(*(void *)v72 + 152))(v72, &v116);
        unint64_t v119 = v47;
        uint64_t v73 = v49 + v46;
        if (!*(_DWORD *)(v49 + v46 + 12))
        {
          __break(0xC471u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(0xC471u);
          JUMPOUT(0x198E46A7CLL);
        }
        WebKit::PDFPresentationController::makePageContainerLayer((WebKit::PDFPresentationController *)&v116, v111, **v50);
        uint64_t v74 = v51 + i;
        int v75 = v116;
        uint64_t v76 = *(_DWORD **)(v51 + i - 24);
        *(void *)(v51 + i - 24) = v116;
        if (v76)
        {
          if (v76[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(void *)v76 + 16))(v76);
            int v75 = *(WebKit::AsyncPDFRenderer **)(v74 - 24);
          }
          else
          {
            --v76[2];
          }
        }
        if (*((_DWORD *)v75 + 49))
        {
          int v77 = (_DWORD *)**((void **)v75 + 23);
          ++v77[2];
        }
        else
        {
          int v77 = 0;
        }
        (*(void (**)(WebKit::AsyncPDFRenderer **__return_ptr, _DWORD *))(*(void *)v77 + 32))(&v116, v77);
        if (!v118) {
          goto LABEL_165;
        }
        WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>((uint64_t)v115, v110, &v116, &v119);
        if (*(_DWORD *)(v51 + i - 60) != 1)
        {
          if (*(_DWORD *)(v73 + 12) <= 1u)
          {
            __break(0xC471u);
            JUMPOUT(0x198E46A94);
          }
          WebKit::PDFPresentationController::makePageContainerLayer((WebKit::PDFPresentationController *)&v116, v111, (*v50)[1]);
          uint64_t v78 = v116;
          unsigned int v79 = *(_DWORD **)(v51 + i - 16);
          *(void *)(v51 + i - 16) = v116;
          if (v79)
          {
            if (v79[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(void *)v79 + 16))(v79);
              uint64_t v78 = *(WebKit::AsyncPDFRenderer **)(v51 + i - 16);
            }
            else
            {
              --v79[2];
            }
          }
          if (*((_DWORD *)v78 + 49))
          {
            unsigned int v80 = (_DWORD *)**((void **)v78 + 23);
            ++v80[2];
          }
          else
          {
            unsigned int v80 = 0;
          }
          (*(void (**)(WebKit::AsyncPDFRenderer **__return_ptr, _DWORD *))(*(void *)v80 + 32))(&v116, v80);
          if (!v118) {
            goto LABEL_165;
          }
          WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>((uint64_t)v115, v110, &v116, &v119);
          if (v80[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v80 + 16))(v80);
          }
          else {
            --v80[2];
          }
        }
        if (v77[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v77 + 16))(v77);
        }
        else {
          --v77[2];
        }
        WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)v115, "Row contents ", 14, v47);
        if (!v115[0]) {
          goto LABEL_166;
        }
        WebKit::PDFPresentationController::createGraphicsLayer(&v116, v111, (uint64_t)v115);
        uint64_t v82 = v51 + i;
        uint64_t v83 = *(_DWORD **)(v51 + i - 8);
        *(void *)(v51 + i - 8) = v116;
        if (v83)
        {
          if (v83[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v83 + 16))(v83);
          }
          else {
            --v83[2];
          }
        }
        int v84 = v115[0];
        v115[0] = 0;
        if (v84)
        {
          if (*(_DWORD *)v84 == 2) {
            WTF::StringImpl::destroy(v84, v81);
          }
          else {
            *(_DWORD *)v84 -= 2;
          }
        }
        uint64_t v85 = *(void *)(v82 - 8);
        int v117 = 0;
        char v116 = 0;
        (*(void (**)(uint64_t, WebKit::AsyncPDFRenderer **))(*(void *)v85 + 152))(v85, &v116);
        (*(void (**)(void, uint64_t))(**(void **)(v82 - 8) + 216))(*(void *)(v82 - 8), 1);
        uint64_t v86 = *(void *)(v82 - 8);
        uint64_t canPaintSelectionIntoOwnedLayer = WebKit::UnifiedPDFPlugin::canPaintSelectionIntoOwnedLayer(v111[2]);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v86 + 240))(v86, canPaintSelectionIntoOwnedLayer);
        WebKit::PDFPresentationController::asyncRenderer((WebKit::PDFPresentationController *)&v116, (uint64_t)v111);
        unint64_t v88 = v116;
        WebKit::AsyncPDFRenderer::startTrackingLayer(v116, *(WebCore::GraphicsLayer **)(v82 - 8));
        if (v88) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*((atomic_uchar **)v88 + 2), v89);
        }
        (*(void (**)(WebKit::AsyncPDFRenderer **__return_ptr))(**(void **)(v82 - 8) + 32))(&v116);
        if (!v118) {
          goto LABEL_165;
        }
        WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,unsigned long &>((uint64_t)v115, v110, &v116, &v114);
        WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)v115, "Row selection ", 15, v47);
        if (!v115[0])
        {
          __break(0xC471u);
          JUMPOUT(0x198E46A84);
        }
        WebKit::PDFPresentationController::createGraphicsLayer(&v116, v111, (uint64_t)v115);
        unsigned __int8 v91 = *(_DWORD **)(v51 + i);
        *(void *)(v51 + i) = v116;
        if (v91)
        {
          if (v91[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v91 + 16))(v91);
          }
          else {
            --v91[2];
          }
        }
        v92 = v115[0];
        v115[0] = 0;
        if (v92)
        {
          if (*(_DWORD *)v92 == 2) {
            WTF::StringImpl::destroy(v92, v90);
          }
          else {
            *(_DWORD *)v92 -= 2;
          }
        }
        uint64_t v93 = *(void *)(v51 + i);
        int v117 = 0;
        char v116 = 0;
        (*(void (**)(uint64_t, WebKit::AsyncPDFRenderer **))(*(void *)v93 + 152))(v93, &v116);
        (*(void (**)(void, uint64_t))(**(void **)(v51 + i) + 216))(*(void *)(v51 + i), 1);
        (*(void (**)(void, uint64_t))(**(void **)(v51 + i) + 240))(*(void *)(v51 + i), 1);
        (*(void (**)(void, uint64_t))(**(void **)(v51 + i) + 312))(*(void *)(v51 + i), 2);
        (*(void (**)(WebKit::AsyncPDFRenderer **__return_ptr))(**(void **)(v51 + i) + 32))(&v116);
        if (!v118) {
          goto LABEL_165;
        }
        WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,unsigned long &>((uint64_t)v115, v110, &v116, &v114);
        uint64_t v94 = *(void *)(v52 - 32);
        int v95 = *(WebKit::AsyncPDFRenderer **)(v74 - 24);
        ++*((_DWORD *)v95 + 2);
        char v116 = v95;
        (*(void (**)(uint64_t, WebKit::AsyncPDFRenderer **))(*(void *)v94 + 64))(v94, &v116);
        uint64_t v96 = v116;
        char v116 = 0;
        uint64_t v2 = (WebKit::PDFDiscretePresentationController *)v111;
        if (v96)
        {
          if (*((_DWORD *)v96 + 2) == 1) {
            (*(void (**)(WebKit::AsyncPDFRenderer *))(*(void *)v96 + 16))(v96);
          }
          else {
            --*((_DWORD *)v96 + 2);
          }
        }
        long long v97 = *(WebKit::AsyncPDFRenderer **)(v51 + i - 16);
        if (v97)
        {
          uint64_t v98 = *(void *)(v52 - 32);
          ++*((_DWORD *)v97 + 2);
          char v116 = v97;
          (*(void (**)(uint64_t, WebKit::AsyncPDFRenderer **))(*(void *)v98 + 64))(v98, &v116);
          long long v99 = v116;
          char v116 = 0;
          if (v99)
          {
            if (*((_DWORD *)v99 + 2) == 1) {
              (*(void (**)(WebKit::AsyncPDFRenderer *))(*(void *)v99 + 16))(v99);
            }
            else {
              --*((_DWORD *)v99 + 2);
            }
          }
        }
        uint64_t v100 = *(void *)(v52 - 32);
        unsigned __int8 v101 = *(WebKit::AsyncPDFRenderer **)(v82 - 8);
        ++*((_DWORD *)v101 + 2);
        char v116 = v101;
        (*(void (**)(uint64_t, WebKit::AsyncPDFRenderer **))(*(void *)v100 + 64))(v100, &v116);
        uint64_t v102 = v116;
        char v116 = 0;
        if (v102)
        {
          if (*((_DWORD *)v102 + 2) == 1) {
            (*(void (**)(WebKit::AsyncPDFRenderer *))(*(void *)v102 + 16))(v102);
          }
          else {
            --*((_DWORD *)v102 + 2);
          }
        }
        uint64_t v103 = *(void *)(v52 - 32);
        uint64_t v104 = *(WebKit::AsyncPDFRenderer **)(v51 + i);
        ++*((_DWORD *)v104 + 2);
        char v116 = v104;
        (*(void (**)(uint64_t, WebKit::AsyncPDFRenderer **))(*(void *)v103 + 64))(v103, &v116);
        long long v105 = v116;
        char v116 = 0;
        if (v105)
        {
          if (*((_DWORD *)v105 + 2) == 1) {
            (*(void (**)(WebKit::AsyncPDFRenderer *))(*(void *)v105 + 16))(v105);
          }
          else {
            --*((_DWORD *)v105 + 2);
          }
        }
      }
      ++v47;
      v46 += 32;
      if (v47 >= v113) {
        return WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v14);
      }
    }
    uint64_t v54 = v112 + v46;
    unint64_t v55 = *(unsigned int *)(v112 + v46 + 12);
    if (*(unsigned int *)(v52 - 60) > v55)
    {
      *(_DWORD *)(v52 - 60) = v55;
LABEL_75:
      int v68 = (char *)*v53;
      if (v55)
      {
        memmove(v68, *v50, 8 * v55);
        unint64_t v55 = *(unsigned int *)(v52 - 60);
        int v68 = (char *)*v53;
      }
      memcpy(&v68[8 * v55], &(*v50)[v55], (char *)&(*v50)[*(unsigned int *)(v54 + 12)] - (char *)&(*v50)[v55]);
      *(_DWORD *)(v52 - 60) = *(_DWORD *)(v54 + 12);
      goto LABEL_78;
    }
    uint64_t v56 = v51 + i;
    if (v55 <= *(unsigned int *)(v51 + i - 64))
    {
      unint64_t v55 = *(unsigned int *)(v52 - 60);
      goto LABEL_75;
    }
    if (*(_DWORD *)(v51 + i - 64))
    {
      if (*(_DWORD *)(v52 - 60)) {
        *(_DWORD *)(v52 - 60) = 0;
      }
      uint64_t v57 = (WTF *)*v53;
      uint64_t v58 = v51 + i - 56;
      if ((void *)v58 == *v53 || v57 == 0)
      {
        if (!v57)
        {
LABEL_63:
          *unsigned int v53 = (void *)v58;
          unsigned int v60 = 2;
          *(_DWORD *)(v56 - 64) = 2;
          goto LABEL_64;
        }
      }
      else
      {
        *unsigned int v53 = 0;
        *(_DWORD *)(v56 - 64) = 0;
        WTF::fastFree(v57, v14);
        uint64_t v56 = v51 + i;
        if (!*v53) {
          goto LABEL_63;
        }
      }
      unsigned int v60 = *(_DWORD *)(v56 - 64);
    }
    else
    {
      unsigned int v60 = 0;
    }
LABEL_64:
    uint64_t v61 = *(unsigned int *)(v54 + 12);
    if (v60 < v61)
    {
      uint64_t v62 = (WTF *)*v53;
      uint64_t v63 = *(unsigned int *)(v52 - 60);
      uint64_t v109 = v56;
      if (v61 < 3)
      {
        int v64 = (void *)(v51 + i - 56);
        *unsigned int v53 = v64;
        *(_DWORD *)(v56 - 64) = 2;
      }
      else
      {
        uint64_t v107 = *(unsigned int *)(v52 - 60);
        uint64_t v108 = (WTF *)*v53;
        if (v61 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x198E46A9CLL);
        }
        int v64 = (void *)WTF::fastMalloc((WTF *)(8 * v61));
        uint64_t v62 = v108;
        *(_DWORD *)(v109 - 64) = v61;
        *unsigned int v53 = v64;
        uint64_t v63 = v107;
      }
      char v65 = v62;
      memcpy(v64, v62, 8 * v63);
      if ((WTF *)(v51 + i - 56) != v65 && v65 != 0)
      {
        if (*v53 == v65)
        {
          *unsigned int v53 = 0;
          *(_DWORD *)(v109 - 64) = 0;
        }
        WTF::fastFree(v65, v66);
      }
    }
    unint64_t v55 = *(unsigned int *)(v52 - 60);
    uint64_t v2 = (WebKit::PDFDiscretePresentationController *)v111;
    goto LABEL_75;
  }
  return WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v14);
}

void sub_198E46AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,_DWORD *a21)
{
  if (a21)
  {
    if (a21[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a21 + 16))(a21);
    }
    else {
      --a21[2];
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFPresentationController::createGraphicsLayer(void *a1, WebKit::UnifiedPDFPlugin **a2, uint64_t a3)
{
  WebKit::UnifiedPDFPlugin::graphicsLayerFactory(a2[2]);
  (*((void (**)(WebKit::UnifiedPDFPlugin **))*a2 + 2))(a2);
  WebCore::GraphicsLayer::create();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, a3);
  *a1 = v7;
  return result;
}

void sub_198E46D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a10 + 16))(a10);
    }
    else {
      --a10[2];
    }
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::PDFPresentationController::clearAsyncRenderer(atomic_uchar *this)
{
  uint64_t v1 = (WebKit::AsyncPDFRenderer *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v1)
  {
    WebKit::AsyncPDFRenderer::teardown(v1);
    uint64_t v3 = (atomic_uchar *)*((void *)v1 + 2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(v3, v2);
  }
  return this;
}

void sub_198E46DC4(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 16), a2);
  _Unwind_Resume(a1);
}

unint64_t WebKit::PDFDocumentLayout::rows(WebKit::PDFDocumentLayout *this, uint64_t a2)
{
  _DWORD v35[2] = *MEMORY[0x1E4F143B8];
  unint64_t result = *(void *)a2;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (result)
  {
    char v5 = *(unsigned char *)(a2 + 44);
    unint64_t result = [(id)result pageCount];
    if ((v5 & 0xFE) == 2) {
      unint64_t v6 = (unint64_t)(double)(result >> 1);
    }
    else {
      unint64_t v6 = result;
    }
    if (v6)
    {
      if (v6 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v7 = WTF::fastMalloc((WTF *)(32 * v6));
      *((_DWORD *)this + 2) = v6;
      *(void *)this = v7;
    }
    unint64_t result = *(void *)a2;
    if (*(void *)a2)
    {
      unint64_t result = [(id)result pageCount];
      unint64_t v8 = result;
      if (*(unsigned __int8 *)(a2 + 44) > 1u)
      {
        if (result >= 2)
        {
          unsigned int v17 = 0;
          unint64_t v18 = result >> 1;
          unsigned int v19 = 1;
          do
          {
            v35[0] = v17;
            v35[1] = v17 | 1;
            WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&__src, v35, 2uLL);
            uint64_t v21 = *((unsigned int *)this + 3);
            if (v21 == *((_DWORD *)this + 2))
            {
              WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::PDFLayoutRow>((unsigned int *)this, (unint64_t)&__src);
            }
            else
            {
              uint64_t v22 = *(void *)this + 32 * v21;
              *(void *)uint64_t v22 = v22 + 16;
              *(void *)(v22 + 8) = 2;
              uint64_t v23 = __src;
              if (__src == v34)
              {
                memcpy((void *)(v22 + 16), v34, 8 * v33);
              }
              else
              {
                __src = v34;
                *(void *)uint64_t v22 = v23;
                *(_DWORD *)(v22 + 8) = v32;
              }
              unsigned int v24 = v33;
              unsigned int v33 = 0;
              *(_DWORD *)(v22 + 12) = v24;
              *((_DWORD *)this + 3) = v21 + 1;
            }
            unint64_t result = (unint64_t)__src;
            if (v34 != __src && __src != 0)
            {
              __src = 0;
              int v32 = 0;
              unint64_t result = WTF::fastFree((WTF *)result, v20);
            }
            BOOL v26 = v18 > v19++;
            v17 += 2;
          }
          while (v26);
        }
        if (v8)
        {
          if (*(void *)a2 && [*(id *)a2 pageCount]) {
            uint64_t v16 = *(void *)a2 ? [*(id *)a2 pageCount] - 1 : -1;
          }
          else {
            uint64_t v16 = 0;
          }
          v35[0] = v16;
          WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&__src, v35, 1uLL);
          uint64_t v27 = *((unsigned int *)this + 3);
          if (v27 == *((_DWORD *)this + 2))
          {
            WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::PDFLayoutRow>((unsigned int *)this, (unint64_t)&__src);
          }
          else
          {
            uint64_t v29 = *(void *)this + 32 * v27;
            *(void *)uint64_t v29 = v29 + 16;
            *(void *)(v29 + 8) = 2;
            uint64_t v28 = __src;
            if (__src == v34)
            {
              memcpy((void *)(v29 + 16), __src, 8 * v33);
            }
            else
            {
              __src = v34;
              *(void *)uint64_t v29 = v28;
              *(_DWORD *)(v29 + 8) = v32;
            }
            unsigned int v30 = v33;
            unsigned int v33 = 0;
            *(_DWORD *)(v29 + 12) = v30;
            *((_DWORD *)this + 3) = v27 + 1;
          }
          unint64_t result = (unint64_t)__src;
          if (v34 != __src)
          {
            if (__src)
            {
              __src = 0;
              int v32 = 0;
              return WTF::fastFree((WTF *)result, v28);
            }
          }
        }
      }
      else if (result)
      {
        uint64_t v9 = 0;
        do
        {
          v35[0] = v9;
          WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&__src, v35, 1uLL);
          uint64_t v11 = *((unsigned int *)this + 3);
          if (v11 == *((_DWORD *)this + 2))
          {
            WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::PDFLayoutRow>((unsigned int *)this, (unint64_t)&__src);
          }
          else
          {
            uint64_t v12 = *(void *)this + 32 * v11;
            *(void *)uint64_t v12 = v12 + 16;
            *(void *)(v12 + 8) = 2;
            int v13 = __src;
            if (__src == v34)
            {
              memcpy((void *)(v12 + 16), v34, 8 * v33);
            }
            else
            {
              __src = v34;
              *(void *)uint64_t v12 = v13;
              *(_DWORD *)(v12 + 8) = v32;
            }
            unsigned int v14 = v33;
            unsigned int v33 = 0;
            *(_DWORD *)(v12 + 12) = v14;
            *((_DWORD *)this + 3) = v11 + 1;
          }
          unint64_t result = (unint64_t)__src;
          if (v34 != __src && __src != 0)
          {
            __src = 0;
            int v32 = 0;
            unint64_t result = WTF::fastFree((WTF *)result, v10);
          }
          ++v9;
        }
        while (v8 != v9);
      }
    }
  }
  return result;
}

void sub_198E47170(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  if ((WTF *)(v12 + 16) != a10)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PDFDocumentLayout::layoutBoundsForRow(uint64_t result, unint64_t *a2, int a3)
{
  if (a3)
  {
    unint64_t v3 = *(unsigned int *)(result + 20);
    int v4 = 0;
    int v5 = 0;
    int v6 = 0;
    int v7 = 0;
    if (*a2 < v3)
    {
      unint64_t v8 = (_DWORD *)(*(void *)(result + 8) + 36 * *a2);
      int v4 = v8[4];
      int v5 = v8[5];
      int v6 = v8[6];
      int v7 = v8[7];
    }
    v12[0] = v4;
    v12[1] = v5;
    void v12[2] = v6;
    v12[3] = v7;
    if (a3 == 2)
    {
      unint64_t v9 = a2[1];
      long long v10 = 0uLL;
      if (v9 < v3) {
        long long v10 = *(_OWORD *)(*(void *)(result + 8) + 36 * v9 + 16);
      }
      long long v11 = v10;
      return WebCore::FloatRect::unite((WebCore::FloatRect *)v12, (const WebCore::FloatRect *)&v11);
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFDiscretePresentationController::updateLayersOnLayoutChange(uint64_t a1, double a2, double a3, float a4, float a5, double a6)
{
  uint64_t v10 = *(void *)(a1 + 16);
  v41[5] = unk_1994F70E8;
  v41[6] = xmmword_1994F70F8;
  v41[7] = unk_1994F7108;
  v41[0] = xmmword_1994F7098;
  v41[1] = unk_1994F70A8;
  v41[2] = xmmword_1994F70B8;
  memset(&v41[3], 0, 32);
  WebCore::TransformationMatrix::scale((WebCore::TransformationMatrix *)v41, *(float *)(v10 + 648));
  v40[0] = a1;
  v40[1] = v10 + 608;
  v40[2] = v41;
  v39[5] = unk_1994F70E8;
  v39[6] = xmmword_1994F70F8;
  v39[7] = unk_1994F7108;
  v39[0] = xmmword_1994F7098;
  v39[1] = unk_1994F70A8;
  v39[2] = xmmword_1994F70B8;
  memset(&v39[3], 0, 32);
  WebCore::TransformationMatrix::scale((WebCore::TransformationMatrix *)v39, a6);
  WebCore::TransformationMatrix::translate((WebCore::TransformationMatrix *)v39, a4, a5);
  (*(void (**)(void, _OWORD *))(**(void **)(a1 + 40) + 184))(*(void *)(a1 + 40), v39);
  uint64_t v11 = *(unsigned int *)(a1 + 60);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = 80 * v11;
    while (1)
    {
      WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v34, v12);
      WebKit::PDFDocumentLayout::layoutBoundsForRow(v10 + 608, (unint64_t *)v34, v36);
      *(void *)&long long v38 = __PAIR64__(v16, v15);
      *((void *)&v38 + 1) = __PAIR64__(v18, v17);
      unsigned int v19 = v34;
      if (&v37 != (uint64_t *)v34 && v34 != 0)
      {
        uint64_t v34 = 0;
        int v35 = 0;
        WTF::fastFree(v19, v14);
      }
      long long v33 = v38;
      WebCore::FloatRect::scale((WebCore::FloatRect *)&v33, *(float *)(v10 + 648), *(float *)(v10 + 648));
      uint64_t v21 = *(void *)(v12 + 40);
      uint64_t v32 = v33;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v21 + 128))(v21, &v32);
      uint64_t v22 = *(void *)(v12 + 40);
      uint64_t v32 = *((void *)&v33 + 1);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v22 + 160))(v22, &v32);
      if (!*(_DWORD *)(v12 + 12))
      {
LABEL_26:
        __break(0xC471u);
        JUMPOUT(0x198E47694);
      }
      WebKit::PDFDiscretePresentationController::updateLayersOnLayoutChange(WebCore::FloatSize,WebCore::FloatSize,double)::$_0::operator()(v40, *(void *)(v12 + 48), **(void **)v12, (float *)&v38);
      int v23 = *(_DWORD *)(v12 + 12);
      if (v23 != 1)
      {
        if (!v23) {
          goto LABEL_26;
        }
        WebKit::PDFDiscretePresentationController::updateLayersOnLayoutChange(WebCore::FloatSize,WebCore::FloatSize,double)::$_0::operator()(v40, *(void *)(v12 + 56), *(void *)(*(void *)v12 + 8), (float *)&v38);
      }
      uint64_t v24 = *(void *)(v12 + 64);
      uint64_t v32 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v24 + 128))(v24, &v32);
      int v25 = DWORD1(v33);
      BOOL v26 = *(float *)(v12 + 32) != *(float *)&v33;
      if (*(float *)(v12 + 36) != *((float *)&v33 + 1)) {
        BOOL v26 = 1;
      }
      if (v26)
      {
        *(_DWORD *)(v12 + 32) = v33;
        *(_DWORD *)(v12 + 36) = v25;
      }
      uint64_t v27 = *(float **)(v12 + 64);
      if (v27[22] != *((float *)&v33 + 2) || v27[23] != *((float *)&v33 + 3)) {
        break;
      }
      if (v26) {
        goto LABEL_21;
      }
      int v28 = 0;
LABEL_22:
      uint64_t v29 = *(void *)(v12 + 72);
      uint64_t v32 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v29 + 128))(v29, &v32);
      uint64_t v30 = *(void *)(v12 + 72);
      uint64_t v32 = *((void *)&v33 + 1);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v30 + 160))(v30, &v32);
      if (v28) {
        (*(void (**)(void))(**(void **)(v12 + 72) + 320))(*(void *)(v12 + 72));
      }
      v12 += 80;
      v13 -= 80;
      if (!v13) {
        return WebKit::PDFDiscretePresentationController::updateLayersAfterChangeInVisibleRow(a1, 0);
      }
    }
    uint64_t v32 = *((void *)&v33 + 1);
    (*(void (**)(float *, uint64_t *))(*(void *)v27 + 160))(v27, &v32);
    uint64_t v27 = *(float **)(v12 + 64);
LABEL_21:
    (*(void (**)(float *))(*(void *)v27 + 320))(v27);
    int v28 = 1;
    goto LABEL_22;
  }
  return WebKit::PDFDiscretePresentationController::updateLayersAfterChangeInVisibleRow(a1, 0);
}

void sub_198E476A0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF *a29,int a30)
{
  if (v30 != a29 && a29 != 0) {
    WTF::fastFree(a29, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFDiscretePresentationController::updateIsInWindow(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 60);
  if (v1)
  {
    uint64_t v2 = 80 * v1;
    unint64_t v3 = (WebCore::GraphicsLayer **)(*(void *)(this + 48) + 72);
    do
    {
      WebCore::GraphicsLayer::setIsInWindow(*(v3 - 1));
      int v4 = *v3;
      v3 += 10;
      this = WebCore::GraphicsLayer::setIsInWindow(v4);
      v2 -= 80;
    }
    while (v2);
  }
  return this;
}

atomic_uchar *WebKit::PDFDiscretePresentationController::updateDebugBorders(atomic_uchar *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)this;
  uint64_t v5 = *((unsigned int *)this + 15);
  if (v5)
  {
    uint64_t v7 = 80 * v5;
    unint64_t v8 = (uint64_t *)(*((void *)this + 6) + 72);
    do
    {
      uint64_t v9 = *(v8 - 4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 616))(v9, a2);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 624))(v9, a3);
      uint64_t v10 = *(v8 - 3);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 616))(v10, a2);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 624))(v10, a3);
      uint64_t v11 = *(v8 - 3);
      if (*(_DWORD *)(v11 + 196))
      {
        uint64_t v12 = **(_DWORD ***)(v11 + 184);
        ++v12[2];
      }
      else
      {
        uint64_t v12 = 0;
      }
      (*(void (**)(_DWORD *, uint64_t))(*(void *)v12 + 616))(v12, a2);
      (*(void (**)(_DWORD *, uint64_t))(*(void *)v12 + 624))(v12, a3);
      if (v12[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v12 + 16))(v12);
      }
      else {
        --v12[2];
      }
      uint64_t v13 = *(v8 - 2);
      if (v13)
      {
        (*(void (**)(void, uint64_t))(*(void *)v13 + 616))(*(v8 - 2), a2);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 624))(v13, a3);
        uint64_t v14 = *(v8 - 2);
        if (v14 && *(_DWORD *)(v14 + 196))
        {
          unsigned int v15 = **(_DWORD ***)(v14 + 184);
          ++v15[2];
        }
        else
        {
          unsigned int v15 = 0;
        }
        (*(void (**)(_DWORD *, uint64_t))(*(void *)v15 + 616))(v15, a2);
        (*(void (**)(_DWORD *, uint64_t))(*(void *)v15 + 624))(v15, a3);
        if (v15[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v15 + 16))(v15);
        }
        else {
          --v15[2];
        }
      }
      uint64_t v16 = *(v8 - 1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 616))(v16, a2);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 624))(v16, a3);
      uint64_t v17 = *v8;
      v8 += 10;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 616))(v17, a2);
      this = (atomic_uchar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 624))(v17, a3);
      v7 -= 80;
    }
    while (v7);
  }
  uint64_t v18 = *(void *)(v4 + 24);
  if (v18)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v18 + 16));
    atomic_store(a2, (unsigned __int8 *)(v18 + 144));
    unint64_t v20 = *(atomic_uchar **)(v18 + 16);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(v20, v19);
  }
  return this;
}

void sub_198E47BD4(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 16))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFDiscretePresentationController::updateForCurrentScrollability(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 76);
  if (*(_DWORD *)(result + 60) > v1)
  {
    uint64_t v2 = *(void *)(*(void *)(result + 48) + 80 * v1 + 64);
    unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 832))(v2);
    if (result)
    {
      unint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 128);
      return v3();
    }
  }
  return result;
}

uint64_t WebKit::PDFDiscretePresentationController::repaintForIncrementalLoad(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 60);
  if (v1)
  {
    uint64_t v2 = 80 * v1;
    unint64_t v3 = (void **)(*(void *)(this + 48) + 48);
    do
    {
      if (*((_DWORD *)*v3 + 49))
      {
        uint64_t v4 = *(_DWORD **)(*v3)[23];
        ++v4[2];
        (*(void (**)(_DWORD *))(*(void *)v4 + 320))(v4);
        if (v4[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v4 + 16))(v4);
        }
        else {
          --v4[2];
        }
      }
      if (*((_DWORD *)*v3 + 49))
      {
        uint64_t v5 = *(_DWORD **)(*v3)[23];
        ++v5[2];
        (*(void (**)(_DWORD *))(*(void *)v5 + 320))(v5);
        if (v5[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v5 + 16))(v5);
        }
        else {
          --v5[2];
        }
      }
      (*(void (**)(void *))(*v3[2] + 320))(v3[2]);
      this = (*(uint64_t (**)(void))(*v3[3] + 320))();
      v3 += 10;
      v2 -= 80;
    }
    while (v2);
  }
  return this;
}

void sub_198E47E9C(_Unwind_Exception *exception_object)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2;
  int v5 = v2[2] - 1;
  if (v5) {
    v4[2] = v5;
  }
  else {
    (*(void (**)(_DWORD *))(*(void *)v4 + 16))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFDiscretePresentationController::setNeedsRepaintInDocumentRect(uint64_t result, unsigned __int8 a2, long long *a3, uint64_t a4)
{
  if (!*(unsigned char *)(a4 + 32)) {
    return result;
  }
  if (!*(_DWORD *)(a4 + 12))
  {
    __break(0xC471u);
    goto LABEL_24;
  }
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(result + 16);
  unint64_t v7 = (**(void **)a4 >> (*(unsigned __int8 *)(v6 + 652) > 1u));
  if (v7 >= *(unsigned int *)(result + 60)) {
    return result;
  }
  uint64_t v9 = *(void *)(result + 48);
  uint64_t v10 = v9 + 80 * v7;
  long long v23 = *a3;
  WebCore::FloatRect::scale((WebCore::FloatRect *)&v23, *(float *)(v6 + 648), *(float *)(v6 + 648));
  long long v22 = v23;
  if (!*(_DWORD *)(v10 + 12))
  {
    __break(0xC471u);
LABEL_24:
    JUMPOUT(0x198E4815CLL);
  }
  double v11 = WebKit::PDFDiscretePresentationController::convertFromContentsToPainting(v5, (float *)&v22, **(void **)v10, 1);
  *(void *)&long long v22 = __PAIR64__(v12, LODWORD(v11));
  *((void *)&v22 + 1) = __PAIR64__(v14, v13);
  if (a2)
  {
    uint64_t v15 = *(void *)(v5 + 24);
    if (v15)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v15 + 16));
      uint64_t v16 = *(void *)(v9 + 80 * v7 + 64);
      std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](v21, a4);
      WebKit::AsyncPDFRenderer::pdfContentChangedInRect((atomic_uchar *)v15, v16, (const WebCore::FloatRect *)&v22, (uint64_t)v21);
      std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21, v17);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(atomic_uchar **)(v15 + 16), v18);
    }
  }
  if ((a2 & 2) == 0
    || !WebKit::UnifiedPDFPlugin::canPaintSelectionIntoOwnedLayer(*(WebKit::UnifiedPDFPlugin **)(v5 + 16)))
  {
    goto LABEL_16;
  }
  unsigned int v19 = *(_DWORD **)(v9 + 80 * v7 + 72);
  if (v19) {
    ++v19[2];
  }
  unint64_t result = (*(uint64_t (**)(_DWORD *, long long *, uint64_t))(*(void *)v19 + 328))(v19, &v22, 1);
  if (v19[2] == 1) {
    unint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v19 + 16))(v19);
  }
  else {
    --v19[2];
  }
  if ((a2 & (a2 - 1)) != 0)
  {
LABEL_16:
    unint64_t v20 = *(_DWORD **)(v9 + 80 * v7 + 64);
    if (v20) {
      ++v20[2];
    }
    unint64_t result = (*(uint64_t (**)(_DWORD *, long long *, uint64_t))(*(void *)v20 + 328))(v20, &v22, 1);
    if (v20[2] == 1) {
      return (*(uint64_t (**)(_DWORD *))(*(void *)v20 + 16))(v20);
    }
    else {
      --v20[2];
    }
  }
  return result;
}

void sub_198E48168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v10 + 16))(v10);
  }
  else {
    --v10[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFDiscretePresentationController::didGeneratePreviewForPage(uint64_t this, unint64_t a2)
{
  unint64_t v2 = (a2 >> (*(unsigned __int8 *)(*(void *)(this + 16) + 652) > 1u));
  if (v2 < *(unsigned int *)(this + 60))
  {
    uint64_t v3 = *(void *)(this + 48);
    uint64_t v4 = v3 + 80 * v2;
    int v5 = *(_DWORD *)(v4 + 12);
    if (!v5)
    {
      __break(0xC471u);
      return this;
    }
    uint64_t v6 = *(void **)v4;
    if (*v6 == a2)
    {
      uint64_t v7 = *(void *)(v3 + 80 * v2 + 48);
    }
    else
    {
      if (v5 != 2) {
        return this;
      }
      if (v6[1] != a2) {
        return this;
      }
      uint64_t v7 = *(void *)(v3 + 80 * v2 + 56);
      if (!v7) {
        return this;
      }
    }
    if (*(_DWORD *)(v7 + 196))
    {
      unint64_t v8 = **(_DWORD ***)(v7 + 184);
      ++v8[2];
      this = (*(uint64_t (**)(_DWORD *))(*(void *)v8 + 320))(v8);
      if (v8[2] == 1)
      {
        uint64_t v9 = *(uint64_t (**)(_DWORD *))(*(void *)v8 + 16);
        return v9(v8);
      }
      else
      {
        --v8[2];
      }
    }
  }
  return this;
}

void sub_198E48310(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 16))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PDFDiscretePresentationController::pdfPositionForCurrentView@<X0>(void *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if ((a2 & 1) == 0 || (uint64_t v4 = this, v5 = this[2], !*(_DWORD *)(v5 + 628)))
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return this;
  }
  unsigned int v6 = *((_DWORD *)this + 19);
  if (*((_DWORD *)this + 15) <= v6)
  {
    char v16 = 0;
    LOBYTE(v19) = 0;
    char v21 = 0;
    *(unsigned char *)a3 = 0;
LABEL_10:
    *(unsigned char *)(a3 + 16) = v16;
    return (void *)std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, a2);
  }
  this = WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v19, this[6] + 80 * v6);
  char v21 = 1;
  if (v20)
  {
    unint64_t v7 = *v19;
    float v8 = 0.0;
    float v9 = 0.0;
    if (*v19 < *(unsigned int *)(v5 + 628))
    {
      uint64_t v10 = *(void *)(v5 + 616) + 36 * v7;
      float v8 = *(float *)(v10 + 16);
      float v9 = *(float *)(v10 + 24) * 0.5;
    }
    uint64_t v11 = v4[2];
    int v12 = *(_DWORD *)(v11 + 380);
    double v13 = *(double *)(v11 + 728);
    WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)v11);
    float v14 = 1.0 / v13;
    WebKit::PDFDocumentLayout::documentToPDFPage(v5 + 608, v7, v8 + v9, (float)((float)((float)v12 * v14) - v15) * (float)(1.0 / *(float *)(v11 + 648)));
    *(void *)a3 = v7;
    char v16 = 1;
    *(_DWORD *)(a3 + 8) = v17;
    *(_DWORD *)(a3 + 12) = v18;
    goto LABEL_10;
  }
  __break(0xC471u);
  return this;
}

void sub_198E484AC(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::PDFDiscretePresentationController::visibleRow@<X0>(_DWORD *this@<X0>, unsigned char *a2@<X8>)
{
  unsigned int v3 = this[19];
  if (this[15] <= v3)
  {
    char v4 = 0;
    *a2 = 0;
  }
  else
  {
    this = WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a2, *((void *)this + 6) + 80 * v3);
    char v4 = 1;
  }
  a2[32] = v4;
  return this;
}

void WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>(WebKit::UnifiedPDFPlugin *this, int a2, int a3, unint64_t a4, char a5, float a6, float a7)
{
  switch(a2)
  {
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_6;
    case 3:
      goto LABEL_4;
    case 4:
      if (a3 == 4) {
        return;
      }
      a6 = a6 + (float)*((int *)this + 94);
      a7 = a7 + (float)*((int *)this + 95);
LABEL_4:
      if (a3 != 3)
      {
        float v11 = 1.0 / *((double *)this + 91);
        float v12 = a7 * v11;
        a6 = (float)(a6 * v11) - WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)this);
        a7 = v12 - v13;
LABEL_6:
        if (a3 != 2)
        {
          float v14 = 1.0 / *((float *)this + 162);
          a6 = a6 * v14;
          a7 = a7 * v14;
LABEL_8:
          if (a3 != 1)
          {
            if (!a5)
            {
              __break(1u);
              JUMPOUT(0x198E48610);
            }
            WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)this + 608, a4, a6, a7);
          }
        }
      }
      return;
    default:
      return;
  }
}

uint64_t WebKit::PDFDocumentLayout::documentToPDFPage(uint64_t result, unint64_t a2, float a3, float a4)
{
  if (*(unsigned int *)(result + 20) > a2)
  {
    char v4 = (float32x2_t *)(*(void *)(result + 8) + 36 * a2);
    float v5 = v4[2].f32[1];
    v7[0] = a3 - v4[2].f32[0];
    v7[1] = v4[3].f32[1] - (float)(a4 - v5);
    WebKit::PDFDocumentLayout::toPageTransform(v4, (uint64_t)v6);
    return WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)v6, (const WebCore::FloatPoint *)v7);
  }
  return result;
}

uint64_t WebKit::PDFDiscretePresentationController::restorePDFPosition(uint64_t a1, void *a2)
{
  return WebKit::PDFDiscretePresentationController::setVisibleRow(a1, *a2 >> (*(unsigned __int8 *)(*(void *)(a1 + 16) + 652) > 1u));
}

uint64_t WebKit::PDFDiscretePresentationController::ensurePageIsVisible(WebKit::PDFDiscretePresentationController *this, unint64_t a2)
{
  return WebKit::PDFDiscretePresentationController::setVisibleRow((uint64_t)this, a2 >> (*(unsigned __int8 *)(*((void *)this + 2) + 652) > 1u));
}

_DWORD *WebKit::PDFDiscretePresentationController::notifyFlushRequired(WebKit::PDFPluginBase **this, const WebCore::GraphicsLayer *a2)
{
  return WebKit::UnifiedPDFPlugin::scheduleRenderingUpdate(this[2]);
}

_DWORD *non-virtual thunk to'WebKit::PDFDiscretePresentationController::notifyFlushRequired(WebKit::PDFPluginBase **this, const WebCore::GraphicsLayer *a2)
{
  return WebKit::UnifiedPDFPlugin::scheduleRenderingUpdate(*(this - 2));
}

float WebKit::PDFDiscretePresentationController::pageScaleFactor(WebKit::PDFDiscretePresentationController *this)
{
  return *(double *)(*((void *)this + 2) + 728);
}

float non-virtual thunk to'WebKit::PDFDiscretePresentationController::pageScaleFactor(WebKit::PDFDiscretePresentationController *this)
{
  return *(double *)(*((void *)this - 2) + 728);
}

float WebKit::PDFDiscretePresentationController::deviceScaleFactor(WebKit::PDFPluginBase **this)
{
  return WebKit::PDFPluginBase::deviceScaleFactor(this[2]);
}

float non-virtual thunk to'WebKit::PDFDiscretePresentationController::deviceScaleFactor(WebKit::PDFPluginBase **this)
{
  return WebKit::PDFPluginBase::deviceScaleFactor(*(this - 2));
}

void *WebKit::PDFDiscretePresentationController::customContentsScale(WebKit::PDFDiscretePresentationController *this, const WebCore::GraphicsLayer *a2)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, const WebCore::GraphicsLayer *))(*(void *)a2 + 32))(v9, a2);
  if (v10)
  {
    float v5 = (WebKit::PDFDiscretePresentationController::RowData *)WebKit::PDFDiscretePresentationController::rowDataForLayerID((uint64_t)this, v9[0], v9[1]);
    if (v5 && WebKit::PDFDiscretePresentationController::RowData::isPageBackgroundLayer(v5, a2))
    {
      unsigned int v6 = (float *)*((void *)this + 2);
      uint64_t v7 = COERCE_UNSIGNED_INT((float)(WebKit::PDFPluginBase::deviceScaleFactor((WebKit::PDFPluginBase *)v6) * v6[162]) * 0.5);
      uint64_t v8 = 0x100000000;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    return (void *)(v7 | v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebKit::PDFDiscretePresentationController::rowDataForLayerID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    int v5 = *(_DWORD *)(v3 - 8);
    unsigned int v18 = -1640531527;
    __int16 v19 = 0;
    char v20 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v18, &v16);
    unsigned int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v18) & v5;
    uint64_t v7 = (uint64_t *)(v3 + 24 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (*v7 == v16 && v9 == v17)
    {
LABEL_13:
      unsigned int v14 = *(_DWORD *)(v3 + 24 * v6 + 16);
      if (*(_DWORD *)(a1 + 60) > v14) {
        return *(void *)(a1 + 48) + 80 * v14;
      }
    }
    else
    {
      int v11 = 1;
      while (v8 | v9)
      {
        unsigned int v6 = (v6 + v11) & v5;
        float v12 = (uint64_t *)(v3 + 24 * v6);
        uint64_t v8 = *v12;
        uint64_t v9 = v12[1];
        ++v11;
        if (v8 == v16 && v9 == v17) {
          goto LABEL_13;
        }
      }
    }
  }
  return 0;
}

uint64_t WebKit::PDFDiscretePresentationController::RowData::isPageBackgroundLayer(WebKit::PDFDiscretePresentationController::RowData *this, const WebCore::GraphicsLayer *a2)
{
  unint64_t v2 = a2;
  if (a2)
  {
    uint64_t v4 = *((void *)this + 6);
    if (!*(_DWORD *)(v4 + 196)) {
      goto LABEL_7;
    }
    int v5 = **(const WebCore::GraphicsLayer ***)(v4 + 184);
    int v6 = *((_DWORD *)v5 + 2);
    *((_DWORD *)v5 + 2) = v6 + 1;
    if (v6) {
      *((_DWORD *)v5 + 2) = v6;
    }
    else {
      (*(void (**)(const WebCore::GraphicsLayer *))(*(void *)v5 + 16))(v5);
    }
    if (v5 == v2)
    {
      return 1;
    }
    else
    {
LABEL_7:
      uint64_t v7 = *((void *)this + 7);
      if (v7 && *(_DWORD *)(v7 + 196))
      {
        uint64_t v8 = **(const WebCore::GraphicsLayer ***)(v7 + 184);
        int v9 = *((_DWORD *)v8 + 2);
        *((_DWORD *)v8 + 2) = v9 + 1;
        unint64_t v2 = (const WebCore::GraphicsLayer *)(v8 == v2);
        if (v9) {
          *((_DWORD *)v8 + 2) = v9;
        }
        else {
          (*(void (**)(const WebCore::GraphicsLayer *))(*(void *)v8 + 16))(v8);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return (uint64_t)v2;
}

void *non-virtual thunk to'WebKit::PDFDiscretePresentationController::customContentsScale(WebKit::PDFDiscretePresentationController *this, const WebCore::GraphicsLayer *a2)
{
  return WebKit::PDFDiscretePresentationController::customContentsScale((WebKit::PDFDiscretePresentationController *)((char *)this - 32), a2);
}

void *WebKit::PDFDiscretePresentationController::layerNeedsPlatformContext(WebKit::UnifiedPDFPlugin **this, const WebCore::GraphicsLayer *a2)
{
  if (WebKit::UnifiedPDFPlugin::canPaintSelectionIntoOwnedLayer(this[2])) {
    return 0;
  }
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, const WebCore::GraphicsLayer *))(*(void *)a2 + 32))(v5, a2);
  if (v6)
  {
    unint64_t result = (void *)WebKit::PDFDiscretePresentationController::rowDataForLayerID((uint64_t)this, v5[0], v5[1]);
    if (result) {
      return (void *)(result[8] == (void)a2);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *non-virtual thunk to'WebKit::PDFDiscretePresentationController::layerNeedsPlatformContext(WebKit::UnifiedPDFPlugin **this, const WebCore::GraphicsLayer *a2)
{
  return WebKit::PDFDiscretePresentationController::layerNeedsPlatformContext(this - 4, a2);
}

uint64_t WebKit::PDFDiscretePresentationController::tiledBackingUsageChanged(uint64_t this, const WebCore::GraphicsLayer *a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = this;
    uint64_t v4 = (*(uint64_t (**)(const WebCore::GraphicsLayer *))(*(void *)a2 + 832))(a2);
    uint64_t v5 = WebKit::UnifiedPDFPlugin::isInWindow(*(WebKit::UnifiedPDFPlugin **)(v3 + 16));
    char v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 144);
    return v6(v4, v5);
  }
  return this;
}

uint64_t non-virtual thunk to'WebKit::PDFDiscretePresentationController::tiledBackingUsageChanged(WebKit::PDFDiscretePresentationController *this, const WebCore::GraphicsLayer *a2, int a3)
{
  return WebKit::PDFDiscretePresentationController::tiledBackingUsageChanged((uint64_t)this - 32, a2, a3);
}

uint64_t WebKit::PDFDiscretePresentationController::rowForLayerID@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = WebKit::PDFDiscretePresentationController::rowDataForLayerID(a1, a2, a3);
  if (result)
  {
    uint64_t result = (uint64_t)WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a4, result);
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *a4 = 0;
  }
  a4[32] = v6;
  return result;
}

void WebKit::PDFDiscretePresentationController::paintContents(uint64_t a1, id *a2, WebCore::GraphicsContext *a3, const void *a4)
{
  (*((void (**)(uint64_t *__return_ptr, id *))*a2 + 4))(&v47, a2);
  if (!v49)
  {
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    return;
  }
  int v9 = *(_DWORD *)(v8 - 8);
  unsigned int v44 = -1640531527;
  __int16 v45 = 0;
  char v46 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v44, &v47);
  unsigned int v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v44) & v9;
  int v11 = (uint64_t *)(v8 + 24 * v10);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (*v11 != v47 || v13 != v48)
  {
    int v15 = 1;
    while (v12 | v13)
    {
      unsigned int v10 = (v10 + v15) & v9;
      uint64_t v16 = (uint64_t *)(v8 + 24 * v10);
      uint64_t v12 = *v16;
      uint64_t v13 = v16[1];
      ++v15;
      if (v12 == v47 && v13 == v48) {
        goto LABEL_14;
      }
    }
    return;
  }
LABEL_14:
  unsigned int v18 = *(_DWORD *)(v8 + 24 * v10 + 16);
  if (*(_DWORD *)(a1 + 60) <= v18) {
    return;
  }
  uint64_t v19 = *(void *)(a1 + 48);
  char v20 = (WebKit::PDFDiscretePresentationController::RowData *)(v19 + 80 * v18);
  if (WebKit::PDFDiscretePresentationController::RowData::isPageBackgroundLayer(v20, (const WebCore::GraphicsLayer *)a2))
  {
    if (*(_DWORD *)(a1 + 60) <= v18) {
      return;
    }
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = v21 + 80 * v18;
    uint64_t v23 = *(void *)(v22 + 48);
    if (*(_DWORD *)(v23 + 196))
    {
      uint64_t v24 = **(id ***)(v23 + 184);
      int v25 = *((_DWORD *)v24 + 2);
      *((_DWORD *)v24 + 2) = v25 + 1;
      if (v25) {
        *((_DWORD *)v24 + 2) = v25;
      }
      else {
        (*((void (**)(id *))*v24 + 2))(v24);
      }
      if (v24 == a2)
      {
        if (*(_DWORD *)(v22 + 12))
        {
          uint64_t v37 = **(const WebCore::FloatRect ***)v22;
          WebKit::UnifiedPDFPlugin::layoutBoundsForPageAtIndex(*(WebKit::UnifiedPDFPlugin **)(a1 + 16), (unint64_t)v37);
          unint64_t v48 = __PAIR64__(v39, v38);
          uint64_t v47 = 0;
          uint64_t v40 = *(void *)(a1 + 24);
          if (!v40) {
            return;
          }
LABEL_47:
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v40 + 16));
          WebKit::AsyncPDFRenderer::paintPagePreview(*(void *)(v40 + 136), a3, (const WebCore::FloatRect *)&v47, v37);
          long long v33 = *(atomic_uchar **)(v40 + 16);
          goto LABEL_48;
        }
LABEL_51:
        __break(0xC471u);
        JUMPOUT(0x198E48F10);
      }
    }
    uint64_t v34 = *(void *)(v21 + 80 * v18 + 56);
    if (v34 && *(_DWORD *)(v34 + 196))
    {
      int v35 = **(id ***)(v34 + 184);
      ++*((_DWORD *)v35 + 2);
    }
    else
    {
      int v35 = 0;
    }
    if (v35 != a2)
    {
      if (v35)
      {
        if (*((_DWORD *)v35 + 2) == 1) {
          (*((void (**)(id *))*v35 + 2))(v35);
        }
        else {
          --*((_DWORD *)v35 + 2);
        }
      }
      return;
    }
    int v36 = *(_DWORD *)(v22 + 12);
    if (*((_DWORD *)a2 + 2) == 1) {
      (*((void (**)(id *))*a2 + 2))(a2);
    }
    else {
      --*((_DWORD *)a2 + 2);
    }
    if (v36 == 2)
    {
      if (*(_DWORD *)(v22 + 12) > 1u)
      {
        uint64_t v37 = *(const WebCore::FloatRect **)(*(void *)v22 + 8);
        WebKit::UnifiedPDFPlugin::layoutBoundsForPageAtIndex(*(WebKit::UnifiedPDFPlugin **)(a1 + 16), (unint64_t)v37);
        unint64_t v48 = __PAIR64__(v42, v41);
        uint64_t v47 = 0;
        uint64_t v40 = *(void *)(a1 + 24);
        if (!v40) {
          return;
        }
        goto LABEL_47;
      }
      goto LABEL_51;
    }
  }
  else
  {
    if (*(id **)(v19 + 80 * v18 + 64) != a2)
    {
      if (*(id **)(v19 + 80 * v18 + 72) == a2)
      {
        WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v43, v19 + 80 * v18);
        v43[32] = 1;
        uint64_t v26 = *(void *)(a1 + 16);
        std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](&v47, (uint64_t)v43);
        WebKit::UnifiedPDFPlugin::paintPDFSelection(v26, a2, (uint64_t)a3, a4, (WTF *)&v47);
        std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v27);
        std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v43, v28);
      }
      return;
    }
    uint64_t v29 = *(atomic_uchar *volatile **)(a1 + 24);
    if (v29) {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v29 + 2);
    }
    uint64_t v30 = *(void *)(a1 + 16);
    WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v47, (uint64_t)v20);
    char v50 = 1;
    WebKit::UnifiedPDFPlugin::paintPDFContent(v30, (const WebCore::GraphicsLayer *)a2, a3, (const WebCore::FloatRect *)a4, &v47, 0, (WebKit::AsyncPDFRenderer *)v29);
    std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v31);
    if (v29)
    {
      long long v33 = (atomic_uchar *)*((void *)v29 + 2);
LABEL_48:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(v33, v32);
    }
  }
}

void sub_198E48F1C(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'WebKit::PDFDiscretePresentationController::paintContents(uint64_t a1, id *a2, WebCore::GraphicsContext *a3, const void *a4)
{
}

void WebKit::PDFDocumentLayout::~PDFDocumentLayout(WebKit::PDFDocumentLayout *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(const void **)this;
  *(void *)this = 0;
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(uint64_t a1, uint64_t a2, float a3, float a4)
{
  unint64_t v69 = __PAIR64__(LODWORD(a4), LODWORD(a3));
  id v7 = *(id *)a1;
  if (v7) {
    unint64_t v8 = [v7 pageCount];
  }
  else {
    unint64_t v8 = 0;
  }
  switch(*(unsigned char *)(a1 + 44))
  {
    case 0:
    case 2:
      unint64_t v68 = v69;
      if (!*(unsigned char *)(a2 + 32)) {
        goto LABEL_120;
      }
      WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v61, a2);
      if (v63 == 2)
      {
        unsigned int v10 = v61;
        unint64_t v11 = *(unsigned int *)(a1 + 20);
        if (*(void *)v61 >= v11)
        {
          uint64_t v14 = 0;
          __int32 v13 = 0;
          float v15 = 0.0;
        }
        else
        {
          uint64_t v12 = *(void *)(a1 + 8) + 36 * *(void *)v61;
          __int32 v13 = *(_DWORD *)(v12 + 16);
          uint64_t v14 = *(void *)(v12 + 20);
          float v15 = *(float *)(v12 + 28);
        }
        unint64_t v38 = *((void *)v61 + 1);
        int8x16_t v39 = 0uLL;
        if (v38 < v11) {
          int8x16_t v39 = *(int8x16_t *)(*(void *)(a1 + 8) + 36 * v38 + 16);
        }
        v65.i32[0] = v13;
        *(uint64_t *)((char *)v65.i64 + 4) = v14;
        v65.f32[3] = v15;
        int v40 = 1;
        int8x16_t v66 = v39;
      }
      else
      {
        if (!v63)
        {
LABEL_122:
          __break(0xC471u);
          JUMPOUT(0x198E49624);
        }
        unsigned int v10 = v61;
        if (*(void *)v61 >= (unint64_t)*(unsigned int *)(a1 + 20))
        {
          uint64_t v14 = 0;
          __int32 v37 = 0;
          float v15 = 0.0;
        }
        else
        {
          uint64_t v36 = *(void *)(a1 + 8) + 36 * *(void *)v61;
          __int32 v37 = *(_DWORD *)(v36 + 16);
          uint64_t v14 = *(void *)(v36 + 20);
          float v15 = *(float *)(v36 + 28);
        }
        int v40 = 0;
        v65.i32[0] = v37;
        *(uint64_t *)((char *)v65.i64 + 4) = v14;
        v65.f32[3] = v15;
        v66.i8[0] = 0;
      }
      unsigned __int8 v67 = v40;
      if (&v64 != (uint64_t *)v10)
      {
        uint64_t v61 = 0;
        int v62 = 0;
        WTF::fastFree(v10, v9);
        LODWORD(v14) = v65.i32[1];
        float v15 = v65.f32[3];
        int v40 = v67;
      }
      if (*((float *)&v69 + 1) >= (float)(v15 + *(float *)&v14))
      {
        if (!v40 || *((float *)&v69 + 1) >= (float)(*(float *)&v66.i32[1] + *(float *)&v66.i32[3])) {
          goto LABEL_108;
        }
      }
      else if (!v40)
      {
LABEL_77:
        if (*(unsigned char *)(a2 + 32))
        {
          if (!*(_DWORD *)(a2 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x198E49394);
          }
LABEL_116:
          uint64_t v58 = *(void *)a2;
          return *(void *)v58;
        }
        goto LABEL_120;
      }
      if (WebCore::FloatRect::contains()) {
        goto LABEL_77;
      }
      if (!v67) {
        goto LABEL_120;
      }
      if (WebCore::FloatRect::contains())
      {
        if (*(unsigned char *)(a2 + 32))
        {
          if (*(_DWORD *)(a2 + 12) <= 1u)
          {
            __break(0xC471u);
            JUMPOUT(0x198E493D4);
          }
          goto LABEL_114;
        }
        goto LABEL_120;
      }
      WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow> const&)const::$_1::operator()((float *)&v68, (uint64_t)&v65);
      if (!v67)
      {
LABEL_121:
        std::__throw_bad_optional_access[abi:sn180100]();
        goto LABEL_122;
      }
      float v48 = v47;
      WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow> const&)const::$_1::operator()((float *)&v68, (uint64_t)&v66);
      if (v48 < v49)
      {
        if (*(unsigned char *)(a2 + 32))
        {
          if (!*(_DWORD *)(a2 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x198E494CCLL);
          }
          goto LABEL_116;
        }
        goto LABEL_120;
      }
      if (!*(unsigned char *)(a2 + 32)) {
        goto LABEL_120;
      }
      if (*(_DWORD *)(a2 + 12) == 2)
      {
LABEL_114:
        uint64_t v58 = *(void *)a2 + 8;
        return *(void *)v58;
      }
LABEL_108:
      WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow> const&)const::$_1::operator()((float *)&v68, (uint64_t)&v65);
      float v55 = v54;
      int8x16_t v60 = vandq_s8(v66, (int8x16_t)vcgezq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v67 == 0)), 0x1FuLL)));
      WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow> const&)const::$_1::operator()((float *)&v68, (uint64_t)&v60);
      if (v55 < v56)
      {
        if (*(unsigned char *)(a2 + 32))
        {
          if (!*(_DWORD *)(a2 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x198E495A4);
          }
          goto LABEL_116;
        }
        goto LABEL_120;
      }
      if (!*(unsigned char *)(a2 + 32))
      {
LABEL_120:
        __break(1u);
        goto LABEL_121;
      }
      int v57 = *(_DWORD *)(a2 + 12);
      if (v57 != 2)
      {
        if (!v57)
        {
          __break(0xC471u);
          JUMPOUT(0x198E4962CLL);
        }
        goto LABEL_116;
      }
      goto LABEL_114;
    case 1:
      if (!v8) {
        goto LABEL_15;
      }
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        float v18 = 0.0;
        if (v17 < *(unsigned int *)(a1 + 20)) {
          float v18 = *(float *)(*(void *)(a1 + 8) + v16 + 20) + *(float *)(*(void *)(a1 + 8) + v16 + 28);
        }
        if (a4 <= v18) {
          break;
        }
        ++v17;
        v16 += 36;
        if (v8 == v17)
        {
LABEL_15:
          if (!*(void *)a1 || ![*(id *)a1 pageCount]) {
            return 0;
          }
          if (*(void *)a1) {
            return [*(id *)a1 pageCount] - 1;
          }
          return -1;
        }
      }
      return v17;
    case 3:
      unint64_t v68 = v69;
      if (!v8)
      {
        unint64_t v17 = -1;
LABEL_89:
        unint64_t v41 = *(unsigned int *)(a1 + 20);
        int8x16_t v42 = 0uLL;
        float32x4_t v43 = 0uLL;
        if (v8 - 2 < v41) {
          float32x4_t v43 = *(float32x4_t *)(*(void *)(a1 + 8) + 36 * (v8 - 2) + 16);
        }
        if (v17 < v41) {
          int8x16_t v42 = *(int8x16_t *)(*(void *)(a1 + 8) + 36 * v17 + 16);
        }
        float32x4_t v65 = v43;
        int8x16_t v66 = v42;
        unsigned __int8 v67 = 1;
        WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow> const&)const::$_3::operator()((float *)&v68, (uint64_t)&v65);
        float v45 = v44;
        int8x16_t v60 = vandq_s8(v66, (int8x16_t)vcgezq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v67 == 0)), 0x1FuLL)));
        WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow> const&)const::$_3::operator()((float *)&v68, (uint64_t)&v60);
        if (v45 < v46) {
          return v8 - 2;
        }
        return v17;
      }
      unint64_t v17 = 0;
      unsigned int v19 = 3;
      break;
    default:
      return v8 - 1;
  }
  while (*(unsigned char *)(a2 + 32))
  {
    uint64_t v20 = *(unsigned int *)(a2 + 12);
    if (v20)
    {
      uint64_t v21 = *(uint64_t **)a2;
      do
      {
        uint64_t v22 = *v21++;
        if (v22 == v17) {
          goto LABEL_27;
        }
      }
      while (--v20);
    }
LABEL_53:
    if (v19 < 2) {
      uint64_t v35 = 1;
    }
    else {
      uint64_t v35 = 2;
    }
    v17 += v35;
    if (v17 >= v8)
    {
      unint64_t v17 = v8 - 1;
      if (((v8 - 1) & 1) == 0) {
        return v17;
      }
      goto LABEL_89;
    }
  }
LABEL_27:
  if (v17)
  {
    unint64_t v24 = *(unsigned int *)(a1 + 20);
    float32x4_t v25 = 0uLL;
    if (v17 - 1 < v24) {
      float32x4_t v25 = *(float32x4_t *)(*(void *)(a1 + 8) + 36 * (v17 - 1) + 16);
    }
    if (v17 < v24)
    {
      unint64_t v26 = v17;
LABEL_45:
      uint64_t v29 = *(void *)(a1 + 8) + 36 * v26;
      __int32 v30 = *(_DWORD *)(v29 + 16);
      uint64_t v31 = *(void *)(v29 + 20);
      float v32 = *(float *)(v29 + 28);
      goto LABEL_47;
    }
  }
  else
  {
    if (*(void *)a1 && [*(id *)a1 pageCount])
    {
      if (*(void *)a1) {
        uint64_t v23 = [*(id *)a1 pageCount] - 1;
      }
      else {
        uint64_t v23 = -1;
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    unint64_t v27 = *(unsigned int *)(a1 + 20);
    if (v23 == v17)
    {
      float v28 = 0.0;
      if (v17 < v27) {
        float v28 = *(float *)(*(void *)(a1 + 8) + 36 * v17 + 20) + *(float *)(*(void *)(a1 + 8) + 36 * v17 + 28);
      }
      if (v28 > *((float *)&v69 + 1)) {
        return v17;
      }
      goto LABEL_52;
    }
    float32x4_t v25 = 0uLL;
    if (v17 < v27) {
      float32x4_t v25 = *(float32x4_t *)(*(void *)(a1 + 8) + 36 * v17 + 16);
    }
    unint64_t v26 = v17 + 1;
    if (v17 + 1 < v27) {
      goto LABEL_45;
    }
  }
  uint64_t v31 = 0;
  __int32 v30 = 0;
  float v32 = 0.0;
LABEL_47:
  float32x4_t v65 = v25;
  v66.i32[0] = v30;
  *(uint64_t *)((char *)v66.i64 + 4) = v31;
  *(float *)&v66.i32[3] = v32;
  unsigned __int8 v67 = 1;
  float v33 = *(float *)&v31 + v32;
  if (COERCE_FLOAT(vaddq_f32(v25, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&v25, 3)).i32[1]) <= *((float *)&v69 + 1)
    && v33 <= *((float *)&v69 + 1))
  {
LABEL_52:
    unsigned int v19 = *(unsigned __int8 *)(a1 + 44);
    goto LABEL_53;
  }
  char v50 = WebCore::FloatRect::contains();
  if (v50) {
    return v17;
  }
  if (WebCore::FloatRect::contains()) {
    goto LABEL_105;
  }
  WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow> const&)const::$_3::operator()((float *)&v68, (uint64_t)&v65);
  if (!v67) {
    goto LABEL_121;
  }
  float v52 = v51;
  WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow> const&)const::$_3::operator()((float *)&v68, (uint64_t)&v66);
  if (v52 >= v53) {
LABEL_105:
  }
    ++v17;
  return v17;
}

uint64_t WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow> const&)const::$_1::operator()(float *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebCore::FloatRect::contains();
  if (result) {
    return result;
  }
  float v5 = *(float *)(a2 + 4);
  float v6 = *(float *)(a2 + 12);
  LODWORD(v39) = *(_DWORD *)a2;
  *((float *)&v39 + 1) = v5;
  float v7 = *(float *)(a2 + 8);
  int v40 = v39;
  float v41 = v5 + v6;
  float v42 = *(float *)&v39 + v7;
  float v43 = v5;
  float v44 = *(float *)&v39 + v7;
  float v45 = v5 + v6;
  uint64_t result = (uint64_t)WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v36, &v39, 4uLL);
  float v8 = *(float *)(a2 + 4);
  float v10 = *a1;
  float v9 = a1[1];
  float v11 = *(float *)a2 + *(float *)(a2 + 8);
  BOOL v12 = *a1 < *(float *)a2;
  if (*a1 > v11) {
    BOOL v12 = 1;
  }
  if (v9 >= v8 || v12)
  {
    float v14 = v8 + *(float *)(a2 + 12);
    BOOL v15 = v9 < v8;
    if (v9 > v14) {
      BOOL v15 = 1;
    }
    if (v10 <= v11 || v15)
    {
      if (v9 <= v14) {
        BOOL v12 = 1;
      }
      if (v12)
      {
        int v16 = v10 >= *(float *)a2 || v15;
        if (v16 == 1)
        {
          unsigned int v17 = v38;
          goto LABEL_28;
        }
        LODWORD(v39) = *(_DWORD *)a2;
        *((float *)&v39 + 1) = v9;
        uint64_t v13 = v38;
        if (v38 == v37) {
          goto LABEL_25;
        }
      }
      else
      {
        *(float *)&uint64_t v39 = *a1;
        *((float *)&v39 + 1) = v14;
        uint64_t v13 = v38;
        if (v38 == v37) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      LODWORD(v39) = *(_DWORD *)a2;
      *((float *)&v39 + 1) = v9;
      uint64_t v13 = v38;
      if (v38 == v37) {
        goto LABEL_25;
      }
    }
LABEL_26:
    float v18 = v36;
    uint64_t v19 = v39;
    goto LABEL_27;
  }
  *(float *)&uint64_t v39 = *a1;
  *((float *)&v39 + 1) = v8;
  uint64_t v13 = v38;
  if (v38 != v37) {
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, v38 + 1, (unint64_t)&v39);
  uint64_t v13 = v38;
  float v18 = v36;
  uint64_t v19 = *(void *)result;
LABEL_27:
  *((void *)v18 + v13) = v19;
  unsigned int v17 = ++v38;
LABEL_28:
  uint64_t v35 = *(void *)a1;
  if (v17 >> 30)
  {
    __break(0xC471u);
  }
  else
  {
    uint64_t v22 = (WTF *)WTF::fastMalloc((WTF *)(4 * v17));
    if (v38)
    {
      uint64_t v23 = 0;
      unint64_t v24 = v36;
      uint64_t v25 = 8 * v38;
      uint64_t v26 = 4;
      do
      {
        uint64_t v39 = *((void *)v24 + v23);
        WebCore::euclidianDistance((WebCore *)&v39, (const WebCore::FloatPoint *)&v35, v21);
        int v27 = v23 + 1;
        *((_DWORD *)v22 + v23) = v28;
        v26 -= 4;
        ++v23;
        v25 -= 8;
      }
      while (v25);
      if ((v27 & 0xFFFFFFFE) != 0)
      {
        uint64_t v29 = -v26;
        float v30 = *(float *)v22;
        uint64_t v31 = (float *)((char *)v22 + 4);
        do
        {
          float v32 = *v31++;
          float v33 = v32;
          if (v32 < v30) {
            float v30 = v33;
          }
          v29 -= 4;
        }
        while (v29);
      }
    }
    WTF::fastFree(v22, v20);
    uint64_t result = (uint64_t)v36;
    if (v36)
    {
      uint64_t v36 = 0;
      int v37 = 0;
      return WTF::fastFree((WTF *)result, v34);
    }
  }
  return result;
}

void sub_198E49908(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  if (a10) {
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow> const&)const::$_3::operator()(float *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebCore::FloatRect::contains();
  if (result) {
    return result;
  }
  float v5 = *(float *)(a2 + 4);
  float v6 = *(float *)(a2 + 12);
  LODWORD(v39) = *(_DWORD *)a2;
  *((float *)&v39 + 1) = v5;
  float v7 = *(float *)(a2 + 8);
  int v40 = v39;
  float v41 = v5 + v6;
  float v42 = *(float *)&v39 + v7;
  float v43 = v5;
  float v44 = *(float *)&v39 + v7;
  float v45 = v5 + v6;
  uint64_t result = (uint64_t)WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v36, &v39, 4uLL);
  float v8 = *(float *)(a2 + 4);
  float v10 = *a1;
  float v9 = a1[1];
  float v11 = *(float *)a2 + *(float *)(a2 + 8);
  BOOL v12 = *a1 < *(float *)a2;
  if (*a1 > v11) {
    BOOL v12 = 1;
  }
  if (v9 >= v8 || v12)
  {
    float v14 = v8 + *(float *)(a2 + 12);
    BOOL v15 = v9 < v8;
    if (v9 > v14) {
      BOOL v15 = 1;
    }
    if (v10 <= v11 || v15)
    {
      if (v9 <= v14) {
        BOOL v12 = 1;
      }
      if (v12)
      {
        int v16 = v10 >= *(float *)a2 || v15;
        if (v16 == 1)
        {
          unsigned int v17 = v38;
          goto LABEL_28;
        }
        LODWORD(v39) = *(_DWORD *)a2;
        *((float *)&v39 + 1) = v9;
        uint64_t v13 = v38;
        if (v38 == v37) {
          goto LABEL_25;
        }
      }
      else
      {
        *(float *)&uint64_t v39 = *a1;
        *((float *)&v39 + 1) = v14;
        uint64_t v13 = v38;
        if (v38 == v37) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      LODWORD(v39) = *(_DWORD *)a2;
      *((float *)&v39 + 1) = v9;
      uint64_t v13 = v38;
      if (v38 == v37) {
        goto LABEL_25;
      }
    }
LABEL_26:
    float v18 = v36;
    uint64_t v19 = v39;
    goto LABEL_27;
  }
  *(float *)&uint64_t v39 = *a1;
  *((float *)&v39 + 1) = v8;
  uint64_t v13 = v38;
  if (v38 != v37) {
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, v38 + 1, (unint64_t)&v39);
  uint64_t v13 = v38;
  float v18 = v36;
  uint64_t v19 = *(void *)result;
LABEL_27:
  *((void *)v18 + v13) = v19;
  unsigned int v17 = ++v38;
LABEL_28:
  uint64_t v35 = *(void *)a1;
  if (v17 >> 30)
  {
    __break(0xC471u);
  }
  else
  {
    uint64_t v22 = (WTF *)WTF::fastMalloc((WTF *)(4 * v17));
    if (v38)
    {
      uint64_t v23 = 0;
      unint64_t v24 = v36;
      uint64_t v25 = 8 * v38;
      uint64_t v26 = 4;
      do
      {
        uint64_t v39 = *((void *)v24 + v23);
        WebCore::euclidianDistance((WebCore *)&v39, (const WebCore::FloatPoint *)&v35, v21);
        int v27 = v23 + 1;
        *((_DWORD *)v22 + v23) = v28;
        v26 -= 4;
        ++v23;
        v25 -= 8;
      }
      while (v25);
      if ((v27 & 0xFFFFFFFE) != 0)
      {
        uint64_t v29 = -v26;
        float v30 = *(float *)v22;
        uint64_t v31 = (float *)((char *)v22 + 4);
        do
        {
          float v32 = *v31++;
          float v33 = v32;
          if (v32 < v30) {
            float v30 = v33;
          }
          v29 -= 4;
        }
        while (v29);
      }
    }
    WTF::fastFree(v22, v20);
    uint64_t result = (uint64_t)v36;
    if (v36)
    {
      uint64_t v36 = 0;
      int v37 = 0;
      return WTF::fastFree((WTF *)result, v34);
    }
  }
  return result;
}

void sub_198E49C18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  if (a10) {
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFDocumentLayout::updateLayout(uint64_t a1, void *a2, int a3)
{
  int v4 = (int)a2;
  id v6 = *(id *)a1;
  if (v6) {
    uint64_t v7 = [v6 pageCount];
  }
  else {
    uint64_t v7 = 0;
  }
  float v8 = (void *)(a1 + 8);
  float v9 = *(float **)(a1 + 8);
  unint64_t v10 = *(unsigned int *)(a1 + 20);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  float v11 = *(float *)(a1 + 24);
  float v12 = *(float *)(a1 + 28);
  float v13 = *(float *)(a1 + 32);
  float v14 = *(float *)(a1 + 36);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (v7)
  {
    unint64_t v74 = v10;
    int v75 = v4;
    uint64_t v76 = v9;
    uint64_t v15 = 0;
    int v16 = *(unsigned char *)(a1 + 44) & 0xFE;
    double v77 = 0.0;
    double v17 = 0.0;
    do
    {
      float v18 = objc_msgSend(*(id *)a1, "pageAtIndex:", v15, v74);
      uint64_t v19 = v18;
      if (v18)
      {
        CFRetain(v18);
        [v19 boundsForBox:1];
        v79.origin.CGFloat x = v20;
        v79.origin.y = v21;
        v79.size.width = v22;
        v79.size.height = v23;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v78, &v79);
        int v24 = [v19 rotation];
        if (v24 < 0) {
          v24 += 360 * (-v24 / 0x168u) + 360;
        }
        int v25 = (int)(round((double)v24 / 90.0) * 90.0) % 360;
        CGFloat v26 = *((double *)&v78 + 1);
        if (v25 == 270 || v25 == 90) {
          CGFloat v26 = COERCE_DOUBLE(vrev64_s32(*(int32x2_t *)((char *)&v78 + 8)));
        }
        double v27 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v77, *(float32x2_t *)&v26), *(int8x8_t *)&v77, *(int8x8_t *)&v26));
        if (v7 - 1 == v15) {
          double v28 = v27;
        }
        else {
          double v28 = v77;
        }
        float32x2_t v29 = vadd_f32(*(float32x2_t *)&v17, (float32x2_t)COERCE_UNSIGNED_INT(*(float *)&v26 + 14.0));
        v30.i32[1] = HIDWORD(v26);
        v30.i32[0] = 0;
        float32x2_t v31 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v29, v30), (int8x8_t)v29, (int8x8_t)v30);
        double v32 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v77, v31), *(int8x8_t *)&v77, (int8x8_t)v31));
        if (v15) {
          double v28 = v32;
        }
        else {
          *(double *)&float32x2_t v31 = v26;
        }
        if (v16 == 2) {
          double v27 = v28;
        }
        double v77 = v27;
        if (v16 == 2) {
          double v17 = *(double *)&v31;
        }
        v79.CGPoint origin = (CGPoint)v78;
        *(void *)&v79.size.width = v78;
        v79.size.height = v26;
        int v80 = v25;
        uint64_t v33 = *(unsigned int *)(a1 + 20);
        if (v33 == *(_DWORD *)(a1 + 16))
        {
          unint64_t v34 = WTF::Vector<WebKit::PDFDocumentLayout::PageGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 8, v33 + 1, (unint64_t)&v79);
          uint64_t v35 = *(void *)(a1 + 8) + 36 * *(unsigned int *)(a1 + 20);
          CGPoint origin = *(CGPoint *)v34;
          CGSize size = *(CGSize *)(v34 + 16);
          int v38 = *(_DWORD *)(v34 + 32);
        }
        else
        {
          uint64_t v35 = *v8 + 36 * v33;
          CGPoint origin = v79.origin;
          CGSize size = v79.size;
          int v38 = v80;
        }
        *(_DWORD *)(v35 + 32) = v38;
        *(CGPoint *)uint64_t v35 = origin;
        *(CGSize *)(v35 + 16) = size;
        ++*(_DWORD *)(a1 + 20);
        CFRelease(v19);
      }
      else
      {
        int v80 = 0;
        long long v39 = 0uLL;
        memset(&v79, 0, sizeof(v79));
        uint64_t v40 = *(unsigned int *)(a1 + 20);
        if (v40 == *(_DWORD *)(a1 + 16))
        {
          unint64_t v41 = WTF::Vector<WebKit::PDFDocumentLayout::PageGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 8, v40 + 1, (unint64_t)&v79);
          uint64_t v42 = *(void *)(a1 + 8) + 36 * *(unsigned int *)(a1 + 20);
          long long v39 = *(_OWORD *)v41;
          long long v43 = *(_OWORD *)(v41 + 16);
          *(_DWORD *)(v42 + 32) = *(_DWORD *)(v41 + 32);
          *(_OWORD *)(v42 + 16) = v43;
        }
        else
        {
          uint64_t v42 = *v8 + 36 * v40;
          *(_DWORD *)(v42 + 32) = 0;
          *(_OWORD *)(v42 + 16) = 0uLL;
        }
        *(_OWORD *)uint64_t v42 = v39;
        ++*(_DWORD *)(a1 + 20);
      }
      ++v15;
    }
    while (v7 != v15);
    float v44 = *(float **)(a1 + 8);
    int v45 = *(_DWORD *)(a1 + 20);
    float v46 = *((float *)&v77 + 1);
    int v4 = v75;
    float v9 = v76;
    unint64_t v10 = v74;
  }
  else
  {
    int v45 = 0;
    float v44 = 0;
    LODWORD(v77) = 0;
    float v46 = 0.0;
  }
  if (v10 != v45) {
    goto LABEL_44;
  }
  if (v10)
  {
    BOOL v47 = *v9 == *v44 && v9[1] == v44[1];
    if (!v47
      || (v9[2] == v44[2] ? (BOOL v48 = v9[3] == v44[3]) : (BOOL v48 = 0),
          !v48 || (v9[4] == v44[4] ? (BOOL v60 = v9[5] == v44[5]) : (BOOL v60 = 0), !v60)))
    {
LABEL_44:
      BOOL v49 = 0;
      goto LABEL_46;
    }
    unint64_t v61 = 0;
    BOOL v49 = 0;
    unint64_t v62 = 1;
    do
    {
      int32x2_t v63 = vceq_f32(*(float32x2_t *)&v9[v61 / 4 + 6], *(float32x2_t *)&v44[v61 / 4 + 6]);
      if ((v63.i32[0] & v63.i32[1] & 1) == 0) {
        break;
      }
      if (LODWORD(v9[v61 / 4 + 8]) != LODWORD(v44[v61 / 4 + 8])) {
        break;
      }
      BOOL v49 = v62 >= v10;
      if (36 * v10 - 36 == v61) {
        break;
      }
      uint64_t v64 = &v9[v61 / 4];
      float32x4_t v65 = &v44[v61 / 4];
      if (v9[v61 / 4 + 9] != v44[v61 / 4 + 9] || v9[v61 / 4 + 10] != v44[v61 / 4 + 10]) {
        break;
      }
      if (v64[11] != v65[11] || v64[12] != v65[12]) {
        break;
      }
      int32x2_t v68 = vceq_f32(*(float32x2_t *)&v9[v61 / 4 + 13], *(float32x2_t *)&v44[v61 / 4 + 13]);
      v61 += 36;
      ++v62;
    }
    while ((v68.i32[0] & v68.i32[1] & 1) != 0);
  }
  else
  {
    BOOL v49 = 1;
  }
LABEL_46:
  switch(*(unsigned char *)(a1 + 44))
  {
    case 0:
    case 2:
      WebKit::PDFDocumentLayout::rows((WebKit::PDFDocumentLayout *)&v79, a1);
      if (HIDWORD(v79.origin.y))
      {
        CGFloat x = v79.origin.x;
        uint64_t v52 = *(void *)&v79.origin.x + 32 * HIDWORD(v79.origin.y);
        do
        {
          WebKit::PDFDocumentLayout::layoutRow(a1, **(unint64_t ***)&x, *(_DWORD *)(*(void *)&x + 12), 1, *(float *)&v77, v46, 18.0);
          *(void *)&x += 32;
        }
        while (*(void *)&x != v52);
      }
      WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v50);
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = COERCE_UNSIGNED_INT(*(float *)&v77 + 32.0) | ((unint64_t)COERCE_UNSIGNED_INT(v46 + 36.0) << 32);
      break;
    case 1:
    case 3:
      WebKit::PDFDocumentLayout::rows((WebKit::PDFDocumentLayout *)&v79, a1);
      if (HIDWORD(v79.origin.y))
      {
        CGFloat v54 = v79.origin.x;
        uint64_t v55 = *(void *)&v79.origin.x + 32 * HIDWORD(v79.origin.y);
        float v56 = 18.0;
        do
        {
          WebKit::PDFDocumentLayout::layoutRow(a1, **(unint64_t ***)&v54, *(_DWORD *)(*(void *)&v54 + 12), 0, *(float *)&v77, v46, v56);
          float v56 = v57 + v58;
          *(void *)&v54 += 32;
        }
        while (*(void *)&v54 != v55);
        float v59 = (float)(v56 + -16.0) + 18.0;
      }
      else
      {
        float v59 = 20.0;
      }
      WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v53);
      *(void *)(a1 + 24) = 0;
      *(float *)(a1 + 32) = *(float *)&v77 + 32.0;
      *(float *)(a1 + 36) = v59;
      break;
    default:
      break;
  }
  if (a3)
  {
    float v69 = (float)v4 / (float)(*(float *)&v77 + 32.0);
    if (v69 < 0.1) {
      float v69 = 0.1;
    }
    *(float *)(a1 + 40) = v69;
  }
  uint64_t v70 = !v49;
  BOOL v71 = v11 == *(float *)(a1 + 24) && v12 == *(float *)(a1 + 28);
  if (!v71 || (v13 == *(float *)(a1 + 32) ? (BOOL v72 = v14 == *(float *)(a1 + 36)) : (BOOL v72 = 0), !v72)) {
    uint64_t v70 = v70 | 2;
  }
  if (v9) {
    WTF::fastFree((WTF *)v9, a2);
  }
  return v70;
}

void sub_198E4A210(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v17) {
    WTF::fastFree(v17, a2);
  }
  _Unwind_Resume(exception_object);
}

float WebKit::PDFDocumentLayout::layoutRow(uint64_t a1, unint64_t *a2, int a3, int a4, float a5, float a6, float a7)
{
  if (a3 == 2)
  {
    unint64_t v11 = *(unsigned int *)(a1 + 20);
    if (*a2 >= v11)
    {
      __break(0xC471u);
      JUMPOUT(0x198E4A404);
    }
    unint64_t v12 = a2[1];
    if (v12 < v11)
    {
      uint64_t v13 = *(void *)(a1 + 8);
      float v14 = (float *)(v13 + 36 * *a2);
      uint64_t v15 = v14 + 4;
      float v16 = v14[6];
      float v17 = v14[7];
      uint64_t v18 = v13 + 36 * v12;
      long long v24 = *(_OWORD *)(v18 + 16);
      float v19 = floorf((float)((float)((float)((float)(a5 - v16) - *((float *)&v24 + 2)) + -14.0) * 0.5) + 16.0);
      if (v17 >= *((float *)&v24 + 3)) {
        float v20 = v17;
      }
      else {
        float v20 = *((float *)&v24 + 3);
      }
      float v21 = v20 - *((float *)&v24 + 3);
      float v22 = floorf((float)(v20 - v17) * 0.5) + a7;
      *(float *)&long long v24 = (float)(v16 + v19) + 14.0;
      *((float *)&v24 + 1) = floorf(v21 * 0.5) + a7;
      *uint64_t v15 = v19;
      v15[1] = v22;
      *(_OWORD *)(v18 + 16) = v24;
      *(float *)int v25 = v19;
      *(float *)&v25[1] = v22;
      *(float *)&void v25[2] = v16;
      *(float *)&v25[3] = v17;
      WebCore::FloatRect::unite((WebCore::FloatRect *)v25, (const WebCore::FloatRect *)&v24);
      return *(float *)v25;
    }
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x198E4A3FCLL);
  }
  float v7 = 0.0;
  if (a3 != 1) {
    return v7;
  }
  if (*a2 >= *(unsigned int *)(a1 + 20)) {
    goto LABEL_18;
  }
  float v8 = (float *)(*(void *)(a1 + 8) + 36 * *a2);
  float v9 = floorf((float)(a5 - v8[6]) * 0.5);
  float v7 = 16.0;
  if (v9 >= 0.0) {
    float v7 = v9 + 16.0;
  }
  float v10 = floorf((float)(a6 - v8[7]) * 0.5);
  if (!a4) {
    float v10 = -0.0;
  }
  v8[4] = v7;
  v8[5] = v10 + a7;
  return v7;
}

uint64_t *WebKit::PDFDocumentLayout::rowForPageIndex@<X0>(uint64_t **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = *this;
  if (!result)
  {
    *a3 = (uint64_t)(a3 + 2);
    a3[1] = 2;
    return result;
  }
  if ((*((unsigned char *)this + 44) & 0xFE) != 2) {
    goto LABEL_13;
  }
  if ((a2 & 1) == 0)
  {
    if ([result pageCount])
    {
      unint64_t v7 = *this ? [*this pageCount] - 1 : -1;
      if (v7 > a2)
      {
        unint64_t v10 = a2;
        unint64_t v11 = a2 + 1;
        goto LABEL_12;
      }
    }
LABEL_13:
    unint64_t v10 = a2;
    float v8 = a3;
    unint64_t v9 = 1;
    return WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v8, (uint64_t *)&v10, v9);
  }
  unint64_t v10 = a2 - 1;
  unint64_t v11 = a2;
LABEL_12:
  float v8 = a3;
  unint64_t v9 = 2;
  return WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v8, (uint64_t *)&v10, v9);
}

void WebKit::PDFDocumentLayout::geometryForPage(uint64_t a1@<X0>, CFTypeRef *a2@<X1>, uint64_t a3@<X8>)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  unint64_t v6 = [*(id *)a1 indexForPage:v5];
  if (v5) {
    CFRelease(v5);
  }
  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
  {
    char v7 = 0;
    *(unsigned char *)a3 = 0;
LABEL_9:
    *(unsigned char *)(a3 + 36) = v7;
    return;
  }
  if (v6 < *(unsigned int *)(a1 + 20))
  {
    uint64_t v8 = *(void *)(a1 + 8) + 36 * v6;
    long long v9 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v8;
    *(_OWORD *)(a3 + 16) = v9;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(v8 + 32);
    char v7 = 1;
    goto LABEL_9;
  }
  __break(0xC471u);
}

void sub_198E4A5B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

float64x2_t WebKit::PDFDocumentLayout::toPageTransform@<Q0>(float32x2_t *a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = constinit_115;
  *(_OWORD *)(a2 + 16) = unk_1994F7128;
  *(_OWORD *)(a2 + 32) = xmmword_1994F7138;
  __int32 v4 = a1[4].i32[0];
  switch(v4)
  {
    case 90:
      WebCore::AffineTransform::makeRotation((uint64_t)&v12, 90.0, 0.0, 0.0);
      long long v8 = v13;
      *(_OWORD *)a2 = v12;
      *(_OWORD *)(a2 + 16) = v8;
      *(_OWORD *)(a2 + 32) = v14;
      double v6 = a1->f32[1];
      float v9 = (float)-a1[1].f32[0] - a1->f32[0];
LABEL_7:
      double v7 = v9;
      goto LABEL_8;
    case 180:
      WebCore::AffineTransform::makeRotation((uint64_t)&v12, 180.0, 0.0, 0.0);
      long long v10 = v13;
      *(_OWORD *)a2 = v12;
      *(_OWORD *)(a2 + 16) = v10;
      *(_OWORD *)(a2 + 32) = v14;
      double v6 = (float)((float)-a1[1].f32[0] - a1->f32[0]);
      float v9 = (float)-a1[1].f32[1] - a1->f32[1];
      goto LABEL_7;
    case 270:
      WebCore::AffineTransform::makeRotation((uint64_t)&v12, 270.0, 0.0, 0.0);
      long long v5 = v13;
      *(_OWORD *)a2 = v12;
      *(_OWORD *)(a2 + 16) = v5;
      *(_OWORD *)(a2 + 32) = v14;
      double v6 = (float)((float)-a1[1].f32[1] - a1->f32[1]);
      double v7 = a1->f32[0];
LABEL_8:
      WebCore::AffineTransform::translate((WebCore::AffineTransform *)a2, v6, v7);
      return result;
  }
  *(void *)a2 = 0x3FF0000000000000;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0x3FF0000000000000;
  float64x2_t result = vcvtq_f64_f32(*a1);
  *(float64x2_t *)(a2 + 32) = result;
  return result;
}

uint64_t WebCore::AffineTransform::makeRotation@<X0>(uint64_t a1@<X8>, double a2@<D0>, float a3@<S1>, float a4@<S2>)
{
  *(void *)a1 = 0x3FF0000000000000;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x3FF0000000000000;
  *(double *)(a1 + 32) = a3;
  *(double *)(a1 + 40) = a4;
  WebCore::AffineTransform::rotate((WebCore::AffineTransform *)a1, a2);
  v8[0] = -a3;
  v8[1] = -a4;
  return WebCore::AffineTransform::translate((WebCore::AffineTransform *)a1, (const WebCore::FloatSize *)v8);
}

float WebKit::PDFDocumentLayout::pdfPageToDocument(uint64_t a1, unint64_t a2, float result, float a4)
{
  *(float *)long long v12 = result;
  *(float *)&v12[1] = a4;
  if (*(unsigned int *)(a1 + 20) > a2)
  {
    __int32 v4 = (float32x2_t *)(*(void *)(a1 + 8) + 36 * a2);
    WebKit::PDFDocumentLayout::toPageTransform(v4, (uint64_t)v11);
    WebCore::AffineTransform::inverse(v8, (WebCore::AffineTransform *)v11);
    if (v9) {
      long long v5 = v8;
    }
    else {
      long long v5 = (uint64_t *)&constinit_115;
    }
    long long v6 = *((_OWORD *)v5 + 1);
    v10[0] = *(_OWORD *)v5;
    v10[1] = v6;
    uint64_t v10[2] = *((_OWORD *)v5 + 2);
    WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)v10, (const WebCore::FloatPoint *)v12);
    return v7 + v4[2].f32[0];
  }
  return result;
}

float WebKit::PDFDocumentLayout::pdfPageToDocument(uint64_t a1, unint64_t a2, float result, float a4, float a5, float a6)
{
  *(float *)long long v14 = result;
  *(float *)&v14[1] = a4;
  *(float *)&v14[2] = a5;
  *(float *)&v14[3] = a6;
  if (*(unsigned int *)(a1 + 20) > a2)
  {
    long long v6 = (float32x2_t *)(*(void *)(a1 + 8) + 36 * a2);
    WebKit::PDFDocumentLayout::toPageTransform(v6, (uint64_t)v13);
    WebCore::AffineTransform::inverse(v10, (WebCore::AffineTransform *)v13);
    if (v11) {
      float v7 = v10;
    }
    else {
      float v7 = (uint64_t *)&constinit_115;
    }
    long long v8 = *((_OWORD *)v7 + 1);
    v12[0] = *(_OWORD *)v7;
    v12[1] = v8;
    _DWORD v12[2] = *((_OWORD *)v7 + 2);
    WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v12, (const WebCore::FloatRect *)v14);
    return v9 + v6[2].f32[0];
  }
  return result;
}

WebKit::PDFPresentationController *WebKit::PDFPresentationController::createForMode@<X0>(WebKit::PDFPresentationController *result@<X0>, atomic_uchar *volatile *a2@<X1>, uint64_t *a3@<X8>)
{
  if ((result & 0xFFFFFFFD) != 0)
  {
    if ((result & 0xFFFFFFFD) == 1)
    {
      uint64_t v5 = WTF::fastMalloc((WTF *)0x48);
      float64x2_t result = WebKit::PDFPresentationController::PDFPresentationController((WebKit::PDFPresentationController *)v5, a2);
      *(void *)uint64_t v5 = &unk_1EE9D9328;
      *(void *)(v5 + 32) = &unk_1EE9D9448;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)0x128);
    float64x2_t result = WebKit::PDFDiscretePresentationController::PDFDiscretePresentationController((WebKit::PDFDiscretePresentationController *)v5, a2);
  }
  *a3 = v5;
  return result;
}

void sub_198E4A98C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

atomic_uchar *volatile *WebKit::PDFPresentationController::asyncRenderer(WebKit::PDFPresentationController *this, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (!v3)
  {
    uint64_t v3 = WTF::fastMalloc((WTF *)0x98);
    *(void *)(v3 + 8) = 0;
    *(void *)uint64_t v3 = &unk_1EE9D9548;
    uint64_t v5 = WTF::fastMalloc((WTF *)0x20);
    *(unsigned char *)uint64_t v5 = 0;
    *(_OWORD *)(v5 + 8) = xmmword_1994F5F10;
    *(void *)(v5 + 24) = v3;
    *(void *)(v3 + 16) = v5;
    *(void *)uint64_t v3 = &unk_1EE9D8FB0;
    long long v6 = *(atomic_uchar **)(a2 + 8);
    if (v6) {
      long long v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v6);
    }
    *(void *)(v3 + 40) = 0;
    *(void *)(v3 + 24) = v6;
    *(void *)(v3 + 32) = a2;
    *(void *)(v3 + 48) = 0;
    float v7 = (WTF *)WTF::ConcurrentWorkQueue::create();
    *(void *)(v3 + 64) = 0;
    int v8 = WTF::numberOfProcessorCores(v7);
    if (v8 >= 18) {
      int v10 = 18;
    }
    else {
      int v10 = v8;
    }
    int v11 = v10 - 2;
    if (v8 < 6) {
      int v11 = 4;
    }
    *(_DWORD *)(v3 + 72) = v11;
    *(_OWORD *)(v3 + 76) = 0u;
    *(_OWORD *)(v3 + 92) = 0u;
    *(_OWORD *)(v3 + 108) = 0u;
    *(_OWORD *)(v3 + 124) = 0u;
    *(void *)(v3 + 137) = 0;
    uint64_t v12 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = v3;
    if (v12)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(atomic_uchar **)(v12 + 16), v9);
      uint64_t v3 = *(void *)(a2 + 24);
    }
  }
  float64x2_t result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v3 + 16));
  *(void *)this = v3;
  return result;
}

void sub_198E4AAF0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v7 = *((void *)v2 + 8);
  if (v7) {
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(v7, a2);
  }
  int v8 = *v4;
  *__int32 v4 = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8 + 2);
    (*(void (**)(unsigned int *))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)v2 + 6);
  if (v9) {
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  if (*v5) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(*v5, a2);
  }
  int v10 = (atomic_uchar *)*((void *)v2 + 3);
  *((void *)v2 + 3) = 0;
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v10, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  WTF::fastFree(v2, v11);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::PDFPresentationController::makePageContainerLayer(WebKit::PDFPresentationController *this, WebKit::UnifiedPDFPlugin **a2, unint64_t a3)
{
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v22, "Page container ", 16, a3);
  if (!v22) {
    goto LABEL_27;
  }
  WebKit::PDFPresentationController::createGraphicsLayer(this, a2, (uint64_t)&v22);
  uint64_t v7 = v22;
  float v22 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v22, "Page background ", 17, a3);
  if (!v22)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x198E4AF70);
  }
  WebKit::PDFPresentationController::createGraphicsLayer(&v24, a2, (uint64_t)&v22);
  uint64_t v9 = v22;
  float v22 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = *(void *)this;
  int v23 = 0;
  float v22 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v10 + 152))(v10, &v22);
  float v22 = (WTF::StringImpl *)0x110400000000002ELL;
  WebKit::PDFPresentationController::makePageContainerLayer(unsigned long)::$_0::operator()(v10, 0x100000000, (const Color *)&v22, (WebCore::IntPoint *)2);
  if (((unint64_t)v22 & 0x8000000000000) != 0)
  {
    float v19 = (unsigned int *)((unint64_t)v22 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v11);
    }
  }
  uint64_t v12 = v24;
  int v23 = 0;
  float v22 = 0;
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(void *)v24 + 152))(v24, &v22);
  float v22 = (WTF::StringImpl *)0x11040000FFFFFFFFLL;
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(void *)v12 + 256))(v12, &v22);
  if (((unint64_t)v22 & 0x8000000000000) != 0)
  {
    float v20 = (unsigned int *)((unint64_t)v22 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v13);
    }
  }
  uint64_t v14 = (uint64_t)v24;
  (*(void (**)(_DWORD *, uint64_t))(*(void *)v24 + 216))(v24, 1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 240))(v14, 1);
  (*(void (**)(uint64_t, void))(*(void *)v14 + 736))(v14, 0);
  (*(void (**)(uint64_t))(*(void *)v14 + 320))(v14);
  float v22 = (WTF::StringImpl *)0x1104000000000026;
  WebKit::PDFPresentationController::makePageContainerLayer(unsigned long)::$_0::operator()(v14, 0x200000000, (const Color *)&v22, (WebCore::IntPoint *)6);
  if (((unint64_t)v22 & 0x8000000000000) != 0)
  {
    float v21 = (unsigned int *)((unint64_t)v22 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v15);
    }
  }
  uint64_t v16 = *(void *)this;
  float v17 = (WTF::StringImpl *)v24;
  ++v24[2];
  float v22 = v17;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v16 + 64))(v16, &v22);
  float64x2_t result = v22;
  float v22 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1) {
      float64x2_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 16))(result);
    }
    else {
      --*((_DWORD *)result + 2);
    }
  }
  if (*((_DWORD *)v17 + 2) == 1) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)v17 + 16))(v17);
  }
  --*((_DWORD *)v17 + 2);
  return result;
}

void sub_198E4AF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, _DWORD *a12)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 2) == 1) {
      (*(void (**)(WTF::StringImpl *))(*(void *)a10 + 16))(a10);
    }
    else {
      --*((_DWORD *)a10 + 2);
    }
  }
  if (a12)
  {
    if (a12[2] == 1) {
      (*(void (**)(void))(*(void *)a12 + 16))();
    }
    else {
      --a12[2];
    }
  }
  uint64_t v14 = *v12;
  *uint64_t v12 = 0;
  if (v14)
  {
    if (v14[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v14 + 16))(v14);
    }
    else {
      --v14[2];
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFPresentationController::makePageContainerLayer(unsigned long)::$_0::operator()(uint64_t a1, uint64_t a2, const Color *a3, WebCore::IntPoint *a4)
{
  uint64_t v18 = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  WebCore::DropShadowFilterOperation::create((WebCore::DropShadowFilterOperation *)&v18, a4, a3, v15);
  int v5 = HIDWORD(v17);
  if (HIDWORD(v17) == v17)
  {
    unint64_t v6 = HIDWORD(v17) + ((unint64_t)HIDWORD(v17) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 <= (unint64_t)HIDWORD(v17) + 1) {
      unint64_t v8 = HIDWORD(v17) + 1;
    }
    else {
      unint64_t v8 = v7;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v16, v8);
    int v5 = HIDWORD(v17);
    uint64_t v9 = v15[0];
    v15[0] = 0;
    *(void *)(v16 + 8 * HIDWORD(v17)) = v9;
  }
  else
  {
    uint64_t v10 = v15[0];
    v15[0] = 0;
    *(void *)(v16 + 8 * HIDWORD(v17)) = v10;
  }
  HIDWORD(v17) = v5 + 1;
  int v11 = (unsigned int *)v15[0];
  v15[0] = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11 + 2);
    (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
  }
  WebCore::FilterOperations::FilterOperations();
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 288))(a1, v15);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v12);
  return WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v13);
}

void sub_198E4B230(_Unwind_Exception *a1, void *a2, uint64_t a3, unsigned int *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a4)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a4 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, a4 + 2);
      (*(void (**)(unsigned int *))(*(void *)a4 + 8))(a4);
    }
  }
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

atomic_uchar *WebKit::PDFPresentationController::releaseMemory(atomic_uchar *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v1 + 16));
    WebKit::AsyncPDFRenderer::releaseMemory((atomic_uchar *)v1);
    uint64_t v3 = *(atomic_uchar **)(v1 + 16);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(v3, v2);
  }
  return this;
}

void sub_198E4B300(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PDFPresentationController::nearestPageIndexForDocumentPoint(WebKit::PDFPresentationController *this, const WebCore::FloatPoint *a2)
{
  if ([*(id *)(*((void *)this + 2) + 296) isLocked]) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 2) + 608;
  float v6 = *(float *)a2;
  float v7 = *((float *)a2 + 1);
  (*(void (**)(void *__return_ptr, WebKit::PDFPresentationController *))(*(void *)this + 152))(v10, this);
  uint64_t v4 = WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(v5, (uint64_t)v10, v6, v7);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v8);
  return v4;
}

void sub_198E4B3C4(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unint64_t WebKit::PDFPresentationController::pageIndexForDocumentPoint(WebKit::PDFPresentationController *this, const WebCore::FloatPoint *a2)
{
  uint64_t v2 = *((void *)this + 2);
  (*(void (**)(_OWORD *__return_ptr))(*(void *)this + 152))(v12);
  if (v13)
  {
    if (HIDWORD(v12[0]))
    {
      uint64_t v4 = *(unint64_t **)&v12[0];
      uint64_t v5 = 8 * HIDWORD(v12[0]);
      while (1)
      {
        unint64_t v6 = *v4;
        if (WebCore::FloatRect::contains()) {
          break;
        }
        ++v4;
        v5 -= 8;
        if (!v5) {
          goto LABEL_6;
        }
      }
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
LABEL_6:
      LOBYTE(v6) = 0;
      unint64_t v7 = 0;
    }
    std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v3);
  }
  else
  {
    std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v3);
    unint64_t v6 = 0;
    for (uint64_t i = 16; ; i += 36)
    {
      uint64_t v9 = *(void **)(v2 + 608);
      if (v9) {
        uint64_t v9 = (void *)[v9 pageCount];
      }
      if (v6 >= (unint64_t)v9)
      {
        LOBYTE(v6) = 0;
        unint64_t v7 = 0;
        return v7 & 0xFFFFFFFFFFFFFF00 | v6;
      }
      long long v10 = 0uLL;
      if (v6 < *(unsigned int *)(v2 + 628)) {
        long long v10 = *(_OWORD *)(*(void *)(v2 + 616) + i);
      }
      v12[0] = v10;
      if (WebCore::FloatRect::contains()) {
        break;
      }
      ++v6;
    }
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFF00;
  }
  return v7 & 0xFFFFFFFFFFFFFF00 | v6;
}

void sub_198E4B544(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PDFScrollingPresentationController::teardown(atomic_uchar *this)
{
  WebKit::PDFPresentationController::clearAsyncRenderer(this);
  WebCore::GraphicsLayer::unparentAndClear();
  WebCore::GraphicsLayer::unparentAndClear();

  return WebCore::GraphicsLayer::unparentAndClear();
}

BOOL WebKit::PDFScrollingPresentationController::supportsDisplayMode(uint64_t a1, int a2)
{
  return (a2 & 0xFFFFFFFD) == 1;
}

uint64_t WebKit::PDFScrollingPresentationController::handleKeyboardEvent()
{
  return 0;
}

unint64_t WebKit::PDFScrollingPresentationController::pageCoverageForContentsRect@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = WebKit::UnifiedPDFPlugin::visibleOrDocumentSizeIsEmpty(*(WebKit::UnifiedPDFPlugin **)(a1 + 16));
  if (result)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    *(_OWORD *)float v20 = *a2;
    WebCore::FloatRect::scale((WebCore::FloatRect *)v20, 1.0 / *(float *)(v7 + 648), 1.0 / *(float *)(v7 + 648));
    unint64_t v8 = 0;
    long long v22 = *(_OWORD *)v20;
    uint64_t v9 = *(void *)(a1 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    while (1)
    {
      unint64_t result = *(void *)(v9 + 608);
      if (result) {
        unint64_t result = [(id)result pageCount];
      }
      if (v8 >= result) {
        break;
      }
      long long v10 = (const void *)[*(id *)(v9 + 608) pageAtIndex:v8];
      int v11 = v10;
      if (v10)
      {
        CFRetain(v10);
        LODWORD(v21) = WebKit::UnifiedPDFPlugin::layoutBoundsForPageAtIndex(*(WebKit::UnifiedPDFPlugin **)(a1 + 16), v8);
        *(void *)((char *)&v21 + 4) = __PAIR64__(v13, v12);
        HIDWORD(v21) = v14;
        if (WebCore::FloatRect::intersects((WebCore::FloatRect *)&v21, (const WebCore::FloatRect *)&v22))
        {
          *(void *)float v20 = v8;
          *(_OWORD *)&v20[8] = v21;
          *(_OWORD *)&v20[24] = v22;
          uint64_t v15 = *(unsigned int *)(a3 + 12);
          if (v15 == *(_DWORD *)(a3 + 8))
          {
            unint64_t v16 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v15 + 1, (unint64_t)v20);
            LODWORD(v15) = *(_DWORD *)(a3 + 12);
            uint64_t v17 = *(void *)a3 + 40 * v15;
            long long v18 = *(_OWORD *)v16;
            long long v19 = *(_OWORD *)(v16 + 16);
            *(void *)(v17 + 32) = *(void *)(v16 + 32);
          }
          else
          {
            uint64_t v17 = *(void *)a3 + 40 * v15;
            long long v18 = *(_OWORD *)v20;
            long long v19 = *(_OWORD *)&v20[16];
            *(void *)(v17 + 32) = *(void *)&v20[32];
          }
          *(_OWORD *)uint64_t v17 = v18;
          *(_OWORD *)(v17 + 16) = v19;
          *(_DWORD *)(a3 + 12) = v15 + 1;
        }
        CFRelease(v11);
      }
      ++v8;
    }
  }
  return result;
}

void sub_198E4B72C(_Unwind_Exception *a1)
{
  CFRelease(v2);
  uint64_t v5 = *(WTF **)v1;
  if (*(void *)v1)
  {
    *(void *)uint64_t v1 = 0;
    *(_DWORD *)(v1 + 8) = 0;
    WTF::fastFree(v5, v4);
  }
  _Unwind_Resume(a1);
}

void WebKit::PDFScrollingPresentationController::pageCoverageAndScalesForContentsRect(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  if (WebKit::UnifiedPDFPlugin::visibleOrDocumentSizeIsEmpty(*(WebKit::UnifiedPDFPlugin **)(a1 + 16)))
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)(a4 + 24) = _D0;
    *(_DWORD *)(a4 + 32) = 1065353216;
  }
  else
  {
    std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](v19, a3);
    WebKit::PDFScrollingPresentationController::pageCoverageForContentsRect(a1, a2, a4);
    *(void *)(a4 + 16) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)(a4 + 24) = _D0;
    *(_DWORD *)(a4 + 32) = 1065353216;
    std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v16);
    float v17 = WebKit::PDFPluginBase::deviceScaleFactor(*(WebKit::PDFPluginBase **)(a1 + 16));
    int v18 = *(_DWORD *)(*(void *)(a1 + 16) + 648);
    *(float *)(a4 + 24) = v17;
    *(_DWORD *)(a4 + 28) = v18;
    *(float *)(a4 + 32) = a5;
  }
}

void sub_198E4B824(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  unsigned int v12 = *(WTF **)v10;
  if (*(void *)v10)
  {
    *(void *)uint64_t v10 = 0;
    *(_DWORD *)(v10 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebKit::PDFScrollingPresentationController::setupLayers(_DWORD *this, WebCore::GraphicsLayer *a2)
{
  uint64_t v3 = (uint64_t)this;
  if (!*((void *)this + 5))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    CGFloat v26 = v24;
    WebKit::PDFPresentationController::createGraphicsLayer(&v27, (WebKit::UnifiedPDFPlugin **)v3, (uint64_t)&v26);
    uint64_t v5 = *(_DWORD **)(v3 + 40);
    *(void *)(v3 + 40) = v27;
    if (v5)
    {
      if (v5[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v5 + 16))(v5);
      }
      else {
        --v5[2];
      }
    }
    unint64_t v6 = v26;
    CGFloat v26 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = *(void *)(v3 + 40);
    int v25 = 0;
    long long v24 = 0;
    (*(void (**)(uint64_t, WebKit::AsyncPDFRenderer **))(*(void *)v7 + 152))(v7, &v24);
    unint64_t v8 = *(WebKit::AsyncPDFRenderer **)(v3 + 40);
    ++*((_DWORD *)v8 + 2);
    long long v24 = v8;
    (*(void (**)(WebCore::GraphicsLayer *, WebKit::AsyncPDFRenderer **))(*(void *)a2 + 64))(a2, &v24);
    this = v24;
    long long v24 = 0;
    if (this)
    {
      if (this[2] == 1) {
        this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)this + 16))(this);
      }
      else {
        --this[2];
      }
    }
  }
  if (!*(void *)(v3 + 48))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    CGFloat v26 = v24;
    WebKit::UnifiedPDFPlugin::isFullMainFramePlugin(*(WebKit::UnifiedPDFPlugin **)(v3 + 16));
    WebKit::PDFPresentationController::createGraphicsLayer(&v27, (WebKit::UnifiedPDFPlugin **)v3, (uint64_t)&v26);
    uint64_t v10 = *(_DWORD **)(v3 + 48);
    *(void *)(v3 + 48) = v27;
    if (v10)
    {
      if (v10[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v10 + 16))(v10);
      }
      else {
        --v10[2];
      }
    }
    int v11 = v26;
    CGFloat v26 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = *(void *)(v3 + 48);
    int v25 = 0;
    long long v24 = 0;
    (*(void (**)(uint64_t, WebKit::AsyncPDFRenderer **))(*(void *)v12 + 152))(v12, &v24);
    (*(void (**)(void, uint64_t))(**(void **)(v3 + 48) + 216))(*(void *)(v3 + 48), 1);
    uint64_t v13 = *(void *)(v3 + 48);
    uint64_t canPaintSelectionIntoOwnedLayer = WebKit::UnifiedPDFPlugin::canPaintSelectionIntoOwnedLayer(*(WebKit::UnifiedPDFPlugin **)(v3 + 16));
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 240))(v13, canPaintSelectionIntoOwnedLayer);
    uint64_t v15 = *(WebKit::AsyncPDFRenderer **)(v3 + 48);
    ++*((_DWORD *)v15 + 2);
    long long v24 = v15;
    (*(void (**)(WebCore::GraphicsLayer *, WebKit::AsyncPDFRenderer **))(*(void *)a2 + 64))(a2, &v24);
    unint64_t v16 = v24;
    long long v24 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 2) == 1) {
        (*(void (**)(WebKit::AsyncPDFRenderer *))(*(void *)v16 + 16))(v16);
      }
      else {
        --*((_DWORD *)v16 + 2);
      }
    }
    WebKit::PDFPresentationController::asyncRenderer((WebKit::PDFPresentationController *)&v24, v3);
    float v17 = v24;
    this = WebKit::AsyncPDFRenderer::startTrackingLayer(v24, *(WebCore::GraphicsLayer **)(v3 + 48));
    if (v17) {
      this = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*((atomic_uchar **)v17 + 2), v18);
    }
  }
  if (!*(void *)(v3 + 56))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::PDFPresentationController::createGraphicsLayer(&v24, (WebKit::UnifiedPDFPlugin **)v3, (uint64_t)&v27);
    float v20 = *(_DWORD **)(v3 + 56);
    *(void *)(v3 + 56) = v24;
    if (v20)
    {
      if (v20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v20 + 16))(v20);
      }
      else {
        --v20[2];
      }
    }
    long long v21 = v27;
    double v27 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v19);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v22 = *(void *)(v3 + 56);
    int v25 = 0;
    long long v24 = 0;
    (*(void (**)(uint64_t, WebKit::AsyncPDFRenderer **))(*(void *)v22 + 152))(v22, &v24);
    (*(void (**)(void, uint64_t))(**(void **)(v3 + 56) + 216))(*(void *)(v3 + 56), 1);
    (*(void (**)(void, uint64_t))(**(void **)(v3 + 56) + 240))(*(void *)(v3 + 56), 1);
    (*(void (**)(void))(**(void **)(v3 + 56) + 312))();
    int v23 = *(WebKit::AsyncPDFRenderer **)(v3 + 56);
    ++*((_DWORD *)v23 + 2);
    long long v24 = v23;
    (*(void (**)(WebCore::GraphicsLayer *, WebKit::AsyncPDFRenderer **))(*(void *)a2 + 64))(a2, &v24);
    this = v24;
    long long v24 = 0;
    if (this)
    {
      if (this[2] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)this + 16))(this);
      }
      else {
        --this[2];
      }
    }
  }
  return this;
}

void sub_198E4BDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12)
{
  if (a9)
  {
    if (a9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a9 + 16))(a9);
    }
    else {
      --a9[2];
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFScrollingPresentationController::updateLayersOnLayoutChange(uint64_t a1, float a2, float a3, float a4, float a5, double a6)
{
  *(float *)BOOL v49 = a2;
  *(float *)&v49[1] = a3;
  (*(void (**)(void, _DWORD *))(**(void **)(a1 + 48) + 160))(*(void *)(a1 + 48), v49);
  (*(void (**)(void))(**(void **)(a1 + 48) + 320))();
  (*(void (**)(void, _DWORD *))(**(void **)(a1 + 56) + 160))(*(void *)(a1 + 56), v49);
  (*(void (**)(void))(**(void **)(a1 + 56) + 320))();
  v48[5] = unk_1994F70E8;
  v48[6] = xmmword_1994F70F8;
  v48[7] = unk_1994F7108;
  v48[0] = xmmword_1994F7098;
  v48[1] = unk_1994F70A8;
  v48[2] = xmmword_1994F70B8;
  memset(&v48[3], 0, 32);
  WebCore::TransformationMatrix::scale((WebCore::TransformationMatrix *)v48, a6);
  WebCore::TransformationMatrix::translate((WebCore::TransformationMatrix *)v48, a4, a5);
  (*(void (**)(void, _OWORD *))(**(void **)(a1 + 48) + 184))(*(void *)(a1 + 48), v48);
  (*(void (**)(void, _OWORD *))(**(void **)(a1 + 56) + 184))(*(void *)(a1 + 56), v48);
  (*(void (**)(void, _OWORD *))(**(void **)(a1 + 40) + 184))(*(void *)(a1 + 40), v48);
  uint64_t v10 = *(void *)(a1 + 16);
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v53, *(void *)(a1 + 40) + 184);
  unint64_t v11 = 0;
  uint64_t v12 = (uint64_t *)(a1 + 64);
  while (1)
  {
    uint64_t v13 = *(void **)(v10 + 608);
    if (v13) {
      uint64_t v13 = (void *)[v13 pageCount];
    }
    if (v11 >= (unint64_t)v13) {
      break;
    }
    float v14 = WebKit::UnifiedPDFPlugin::layoutBoundsForPageAtIndex(*(WebKit::UnifiedPDFPlugin **)(a1 + 16), v11);
    unsigned int v16 = v15;
    unsigned int v18 = v17;
    unint64_t v51 = __PAIR64__(v19, LODWORD(v14));
    unint64_t v52 = __PAIR64__(v17, v15);
    WebCore::FloatRect::scale((WebCore::FloatRect *)&v51, *(float *)(v10 + 648), *(float *)(v10 + 648));
    if (v11 < v55)
    {
      float v20 = *(_DWORD **)(v53 + 8 * v11);
      ++v20[2];
      goto LABEL_41;
    }
    WebKit::PDFPresentationController::makePageContainerLayer((WebKit::PDFPresentationController *)v50, (WebKit::UnifiedPDFPlugin **)a1, v11);
    long long v21 = *(_DWORD **)&v50[0];
    if (*(_DWORD *)(*(void *)&v50[0] + 196))
    {
      uint64_t v22 = **(_DWORD ***)(*(void *)&v50[0] + 184);
      ++v22[2];
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *v12;
    if (*v12
      || (WTF::HashTable<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashMap<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::expand((uint64_t *)(a1 + 64)),
          (uint64_t v23 = *v12) != 0))
    {
      int v24 = *(_DWORD *)(v23 - 8);
    }
    else
    {
      int v24 = 0;
    }
    unint64_t v25 = ((unint64_t)v22 + ~((void)v22 << 32)) ^ (((unint64_t)v22 + ~((void)v22 << 32)) >> 22);
    unint64_t v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
    unint64_t v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
    unsigned int v28 = v24 & ((v27 >> 31) ^ v27);
    float32x2_t v29 = (void *)(v23 + 16 * v28);
    float32x2_t v30 = (_DWORD *)*v29;
    if (*v29)
    {
      float32x2_t v31 = 0;
      int v32 = 1;
      while (v30 != v22)
      {
        if (v30 == (_DWORD *)-1) {
          float32x2_t v31 = v29;
        }
        unsigned int v28 = (v28 + v32) & v24;
        float32x2_t v29 = (void *)(v23 + 16 * v28);
        float32x2_t v30 = (_DWORD *)*v29;
        ++v32;
        if (!*v29)
        {
          if (v31)
          {
            *float32x2_t v31 = 0;
            v31[1] = 0;
            --*(_DWORD *)(*v12 - 16);
            float32x2_t v29 = v31;
          }
          goto LABEL_21;
        }
      }
      goto LABEL_32;
    }
LABEL_21:
    if (v22) {
      ++v22[2];
    }
    void *v29 = v22;
    v29[1] = v11;
    uint64_t v33 = *v12;
    if (*v12) {
      int v34 = *(_DWORD *)(v33 - 12) + 1;
    }
    else {
      int v34 = 1;
    }
    *(_DWORD *)(v33 - 12) = v34;
    uint64_t v35 = *v12;
    if (*v12) {
      int v36 = *(_DWORD *)(v35 - 12);
    }
    else {
      int v36 = 0;
    }
    uint64_t v37 = (*(_DWORD *)(v35 - 16) + v36);
    unint64_t v38 = *(unsigned int *)(v35 - 4);
    if (v38 > 0x400)
    {
      if (v38 > 2 * v37) {
        goto LABEL_32;
      }
LABEL_31:
      WTF::HashTable<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashMap<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::expand((uint64_t *)(a1 + 64));
      goto LABEL_32;
    }
    if (3 * v38 <= 4 * v37) {
      goto LABEL_31;
    }
LABEL_32:
    float v56 = v21;
    LODWORD(v39) = v55;
    if (v55 == v54)
    {
      uint64_t v40 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v53, v55 + 1, (unint64_t)&v56);
      uint64_t v39 = v55;
      uint64_t v41 = v53;
      uint64_t v42 = *v40;
      *uint64_t v40 = 0;
      *(void *)(v41 + 8 * v39) = v42;
    }
    else
    {
      float v56 = 0;
      *(void *)(v53 + 8 * v55) = v21;
    }
    unint64_t v43 = (v39 + 1);
    unsigned int v55 = v43;
    if (v11 >= v43)
    {
LABEL_56:
      __break(0xC471u);
      JUMPOUT(0x198E4C534);
    }
    float v20 = *(_DWORD **)(v53 + 8 * v11);
    ++v20[2];
    float v44 = v56;
    float v56 = 0;
    if (v44)
    {
      if (v44[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v44 + 16))(v44);
      }
      else {
        --v44[2];
      }
    }
    if (v22)
    {
      if (v22[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v22 + 16))(v22);
      }
      else {
        --v22[2];
      }
    }
LABEL_41:
    *(void *)&v50[0] = v51;
    (*(void (**)(_DWORD *, _OWORD *))(*(void *)v20 + 128))(v20, v50);
    *(void *)&v50[0] = v52;
    (*(void (**)(_DWORD *, _OWORD *))(*(void *)v20 + 160))(v20, v50);
    if (!v20[49]) {
      goto LABEL_56;
    }
    int v45 = (_DWORD *)**((void **)v20 + 23);
    ++v45[2];
    *(void *)&v50[0] = __PAIR64__(v18, v16);
    (*(void (**)(_DWORD *, _OWORD *))(*(void *)v45 + 160))(v45, v50);
    v50[5] = unk_1994F70E8;
    v50[6] = xmmword_1994F70F8;
    v50[7] = unk_1994F7108;
    v50[0] = xmmword_1994F7098;
    v50[1] = unk_1994F70A8;
    v50[2] = xmmword_1994F70B8;
    memset(&v50[3], 0, 32);
    WebCore::TransformationMatrix::scale((WebCore::TransformationMatrix *)v50, *(float *)(v10 + 648));
    (*(void (**)(_DWORD *, _OWORD *))(*(void *)v45 + 184))(v45, v50);
    if (v45[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v45 + 16))(v45);
    }
    else {
      --v45[2];
    }
    if (v20[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v20 + 16))(v20);
    }
    else {
      --v20[2];
    }
    ++v11;
  }
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 40) + 56))(*(void *)(a1 + 40), &v53);
  return WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v46);
}

void sub_198E4C540(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 120, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PDFScrollingPresentationController::didGeneratePreviewForPage(uint64_t this, unint64_t a2)
{
  uint64_t v2 = *(void *)(this + 40);
  if (!v2) {
    return this;
  }
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v9, v2 + 184);
  if (v10 <= a2) {
    return WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
  }
  uint64_t v5 = *(void *)(v9 + 8 * a2);
  int v6 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)(v5 + 8) = v6 + 1;
  if (*(_DWORD *)(v5 + 196))
  {
    uint64_t v7 = **(_DWORD ***)(v5 + 184);
    if (v6)
    {
LABEL_5:
      *(_DWORD *)(v5 + 8) = v6;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (v6) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
LABEL_9:
  this = WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
  if (v7)
  {
    ++v7[2];
    this = (*(uint64_t (**)(_DWORD *))(*(void *)v7 + 320))(v7);
    if (v7[2] == 1)
    {
      unint64_t v8 = *(uint64_t (**)(_DWORD *))(*(void *)v7 + 16);
      return v8(v7);
    }
    else
    {
      --v7[2];
    }
  }
  return this;
}

void sub_198E4C7E0(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 16))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFScrollingPresentationController::repaintForIncrementalLoad(WebKit::PDFScrollingPresentationController *this)
{
  uint64_t v2 = *((void *)this + 2);
  *(void *)&long long v12 = 0;
  *((void *)&v12 + 1) = *(void *)(v2 + 640);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 6) + 832))(*((void *)this + 6));
  if (v3)
  {
    *(float *)&unsigned int v4 = (*(float (**)(uint64_t))(*(void *)v3 + 80))(v3);
    uint64_t v5 = *((void *)this + 2);
    *(void *)&long long v13 = __PAIR64__(v6, v4);
    *((void *)&v13 + 1) = __PAIR64__(v8, v7);
    WebCore::FloatRect::scale((WebCore::FloatRect *)&v13, 1.0 / *(float *)(v5 + 648), 1.0 / *(float *)(v5 + 648));
    long long v12 = v13;
  }
  v11[0] = 0;
  v11[32] = 0;
  WebKit::PDFScrollingPresentationController::setNeedsRepaintInDocumentRect((uint64_t)this, 1u, &v12, (uint64_t)v11);
  return std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v9);
}

void sub_198E4C908(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PDFScrollingPresentationController::setNeedsRepaintInDocumentRect(uint64_t result, unsigned __int8 a2, long long *a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 16);
    long long v16 = *a3;
    WebCore::FloatRect::scale((WebCore::FloatRect *)&v16, *(float *)(v7 + 648), *(float *)(v7 + 648));
    long long v15 = v16;
    if (a2)
    {
      uint64_t v8 = *(void *)(v6 + 24);
      if (v8)
      {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v8 + 16));
        uint64_t v9 = *(void *)(v6 + 48);
        std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](v14, a4);
        WebKit::AsyncPDFRenderer::pdfContentChangedInRect((atomic_uchar *)v8, v9, (const WebCore::FloatRect *)&v15, (uint64_t)v14);
        std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v10);
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 16), v11);
      }
    }
    if ((a2 & 2) == 0
      || !WebKit::UnifiedPDFPlugin::canPaintSelectionIntoOwnedLayer(*(WebKit::UnifiedPDFPlugin **)(v6 + 16)))
    {
      goto LABEL_13;
    }
    long long v12 = *(_DWORD **)(v6 + 56);
    if (v12) {
      ++v12[2];
    }
    unint64_t result = (*(uint64_t (**)(_DWORD *, long long *, uint64_t))(*(void *)v12 + 328))(v12, &v15, 1);
    if (v12[2] == 1) {
      unint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v12 + 16))(v12);
    }
    else {
      --v12[2];
    }
    if ((a2 & (a2 - 1)) != 0)
    {
LABEL_13:
      long long v13 = *(_DWORD **)(v6 + 48);
      if (v13) {
        ++v13[2];
      }
      unint64_t result = (*(uint64_t (**)(_DWORD *, long long *, uint64_t))(*(void *)v13 + 328))(v13, &v15, 1);
      if (v13[2] == 1) {
        return (*(uint64_t (**)(_DWORD *))(*(void *)v13 + 16))(v13);
      }
      else {
        --v13[2];
      }
    }
  }
  return result;
}

void sub_198E4CB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v10 + 16))(v10);
  }
  else {
    --v10[2];
  }
  _Unwind_Resume(exception_object);
}

WebCore::GraphicsLayer *WebKit::PDFScrollingPresentationController::updateIsInWindow(WebCore::GraphicsLayer **this)
{
  WebCore::GraphicsLayer::setIsInWindow(this[6]);
  unint64_t result = this[7];
  if (result) {
    unint64_t result = (WebCore::GraphicsLayer *)WebCore::GraphicsLayer::setIsInWindow(result);
  }
  uint64_t v3 = this[5];
  uint64_t v4 = *((unsigned int *)v3 + 49);
  if (v4)
  {
    uint64_t v5 = *((void *)v3 + 23);
    uint64_t v6 = 8 * v4;
    do
    {
      if (*(_DWORD *)(*(void *)v5 + 196))
      {
        uint64_t v7 = **(WebCore::GraphicsLayer ***)(*(void *)v5 + 184);
        ++*((_DWORD *)v7 + 2);
        unint64_t result = (WebCore::GraphicsLayer *)WebCore::GraphicsLayer::setIsInWindow(v7);
        if (*((_DWORD *)v7 + 2) == 1) {
          unint64_t result = (WebCore::GraphicsLayer *)(*(uint64_t (**)(WebCore::GraphicsLayer *))(*(void *)v7 + 16))(v7);
        }
        else {
          --*((_DWORD *)v7 + 2);
        }
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void sub_198E4CC70(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 16))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::PDFScrollingPresentationController::updateDebugBorders(WebKit::PDFScrollingPresentationController *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *((void *)this + 5);
  (*(void (**)(uint64_t))(*(void *)v6 + 616))(v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 624))(v6, a3);
  uint64_t v7 = *((void *)this + 6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 616))(v7, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 624))(v7, a3);
  uint64_t v8 = *((void *)this + 7);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 616))(v8, a2);
  unint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 624))(v8, a3);
  uint64_t v10 = *((void *)this + 5);
  uint64_t v11 = *(unsigned int *)(v10 + 196);
  if (v11)
  {
    long long v12 = *(void **)(v10 + 184);
    uint64_t v13 = 8 * v11;
    do
    {
      uint64_t v14 = *v12;
      (*(void (**)(void, uint64_t))(*(void *)*v12 + 616))(*v12, a2);
      unint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 624))(v14, a3);
      if (*(_DWORD *)(*v12 + 196))
      {
        uint64_t v15 = **(void **)(*v12 + 184);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 616))(v15, a2);
        unint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 624))(v15, a3);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  uint64_t v16 = *((void *)this + 3);
  if (v16)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v16 + 16));
    atomic_store(a2, (unsigned __int8 *)(v16 + 144));
    unsigned int v18 = *(atomic_uchar **)(v16 + 16);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(v18, v17);
  }
  return result;
}

uint64_t WebKit::PDFScrollingPresentationController::updateForCurrentScrollability(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 832))(*(void *)(a1 + 48));
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 128);
    return v2();
  }
  return result;
}

uint64_t WebKit::PDFScrollingPresentationController::pageIndexForPageBackgroundLayer(uint64_t this, const WebCore::GraphicsLayer *a2)
{
  if (this)
  {
    unsigned int v2 = *(_DWORD *)(this - 8);
    unint64_t v3 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    uint64_t v6 = v2 & ((v5 >> 31) ^ v5);
    uint64_t v7 = *(const WebCore::GraphicsLayer **)(this + 16 * v6);
    if (v7 != a2)
    {
      int v8 = 1;
      while (v7)
      {
        uint64_t v6 = (v6 + v8) & v2;
        uint64_t v7 = *(const WebCore::GraphicsLayer **)(this + 16 * v6);
        ++v8;
        if (v7 == a2) {
          goto LABEL_9;
        }
      }
      uint64_t v6 = *(unsigned int *)(this - 4);
    }
LABEL_9:
    if (v6 == *(_DWORD *)(this - 4)) {
      return 0;
    }
    else {
      return *(void *)(this + 16 * v6 + 8);
    }
  }
  return this;
}

WebCore::Widget ***WebKit::PDFScrollingPresentationController::pdfPositionForCurrentView@<X0>(WebCore::Widget ***this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if ((a2 & 1) == 0)
  {
    LOBYTE(v5) = 0;
    goto LABEL_33;
  }
  unint64_t v4 = this[2];
  unsigned int v5 = *((_DWORD *)v4 + 157);
  if (!v5)
  {
LABEL_33:
    *(unsigned char *)a3 = 0;
    goto LABEL_53;
  }
  float v6 = 1.0 / *((double *)v4 + 91);
  float v7 = (float)*((int *)v4 + 95) * v6;
  WebKit::UnifiedPDFPlugin::centeringOffset(this[2]);
  float v9 = v7 - v8;
  this = (WebCore::Widget ***)v4[76];
  float v10 = 1.0 / *((float *)v4 + 162);
  if (this) {
    this = (WebCore::Widget ***)[this pageCount];
  }
  float v11 = v10 * v9;
  unsigned int v12 = *((unsigned __int8 *)v4 + 652);
  BOOL v13 = v12 >= 2;
  unsigned int v14 = v12 - 2;
  if (!v13)
  {
    if (this)
    {
      uint64_t v30 = 0;
      unint64_t v15 = 0;
      float32x2_t v31 = (char *)this - 1;
      while (1)
      {
        if (v15 >= *((unsigned int *)v4 + 157))
        {
          if (v11 <= 0.0 || v31 == (char *)v15)
          {
            float v26 = 0.0;
            goto LABEL_51;
          }
        }
        else
        {
          int v32 = (float *)((char *)v4[77] + v30);
          if ((float)(v32[5] + v32[7]) >= v11 || v31 == (char *)v15)
          {
            float v28 = v32[4];
            float v29 = v32[6];
            goto LABEL_49;
          }
        }
        ++v15;
        v30 += 36;
        if (this == (WebCore::Widget ***)v15) {
          goto LABEL_48;
        }
      }
    }
    goto LABEL_48;
  }
  if (v14 > 1 || !this)
  {
LABEL_48:
    unsigned int v5 = 0;
    uint64_t v35 = 0;
    unint64_t v15 = (unint64_t)this - 1;
    goto LABEL_52;
  }
  unint64_t v15 = (unint64_t)this - 1;
  if (this == (WebCore::Widget ***)1)
  {
LABEL_30:
    float v26 = 0.0;
    if (v15 < *((unsigned int *)v4 + 157))
    {
      uint64_t v27 = (uint64_t)v4[77] + 36 * v15;
      float v28 = *(float *)(v27 + 16);
      float v29 = *(float *)(v27 + 24);
LABEL_49:
      float v26 = v28 + (float)(v29 * 0.5);
    }
LABEL_51:
    this = (WebCore::Widget ***)WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)(v4 + 76), v15, v26, v11);
    unsigned int v5 = v36;
    uint64_t v35 = v37;
    goto LABEL_52;
  }
  unint64_t v16 = 0;
  while (1)
  {
    if (v16)
    {
      ++v16;
      goto LABEL_29;
    }
    unint64_t v17 = *((unsigned int *)v4 + 157);
    if (v16 >= v17)
    {
      float v19 = -18.0;
      float v20 = 36.0;
    }
    else
    {
      uint64_t v18 = (uint64_t)v4[77] + 36 * v16;
      float v19 = *(float *)(v18 + 20) + -18.0;
      float v20 = (float)(*(float *)(v18 + 28) + 18.0) + 18.0;
    }
    float v21 = v19 + v20;
    if (v19 <= v11 && v21 > v11) {
      break;
    }
    unint64_t v38 = v16 + 1;
    unint64_t v16 = (unint64_t)this;
    if ((WebCore::Widget ***)v38 != this)
    {
      if (v38 >= v17)
      {
        float v24 = -18.0;
        float v25 = 36.0;
      }
      else
      {
        uint64_t v23 = (uint64_t)v4[77] + 36 * v38;
        float v24 = *(float *)(v23 + 20) + -18.0;
        float v25 = (float)(*(float *)(v23 + 28) + 18.0) + 18.0;
      }
      if (v24 > v11)
      {
        unint64_t v16 = v38;
      }
      else
      {
        unint64_t v16 = v38;
        if ((float)(v24 + v25) > v11) {
          goto LABEL_54;
        }
      }
    }
LABEL_29:
    if (v16 == v15) {
      goto LABEL_30;
    }
  }
  unint64_t v38 = v16;
LABEL_54:
  float v39 = 0.0;
  if (v38 < v17) {
    float v39 = *((float *)v4[77] + 9 * v38 + 4) + (float)(*((float *)v4[77] + 9 * v38 + 6) * 0.5);
  }
  this = (WebCore::Widget ***)WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)(v4 + 76), v38, v39, v11);
  unsigned int v5 = v40;
  uint64_t v35 = v41;
  unint64_t v15 = v38;
LABEL_52:
  *(void *)a3 = v15;
  *(void *)(a3 + 8) = v5 | (unint64_t)(v35 << 32);
  LOBYTE(v5) = 1;
LABEL_53:
  *(unsigned char *)(a3 + 16) = v5;
  return this;
}

uint64_t WebKit::PDFScrollingPresentationController::restorePDFPosition(uint64_t a1, uint64_t a2)
{
  return WebKit::UnifiedPDFPlugin::revealPointInPage(*(WebKit::UnifiedPDFPlugin **)(a1 + 16), *(void *)a2, *(float *)(a2 + 8), *(float *)(a2 + 12));
}

_DWORD *WebKit::PDFScrollingPresentationController::notifyFlushRequired(WebKit::PDFPluginBase **this, const WebCore::GraphicsLayer *a2)
{
  return WebKit::UnifiedPDFPlugin::scheduleRenderingUpdate(this[2]);
}

_DWORD *non-virtual thunk to'WebKit::PDFScrollingPresentationController::notifyFlushRequired(WebKit::PDFPluginBase **this, const WebCore::GraphicsLayer *a2)
{
  return WebKit::UnifiedPDFPlugin::scheduleRenderingUpdate(*(this - 2));
}

float WebKit::PDFScrollingPresentationController::pageScaleFactor(WebKit::PDFScrollingPresentationController *this)
{
  return *(double *)(*((void *)this + 2) + 728);
}

float non-virtual thunk to'WebKit::PDFScrollingPresentationController::pageScaleFactor(WebKit::PDFScrollingPresentationController *this)
{
  return *(double *)(*((void *)this - 2) + 728);
}

float WebKit::PDFScrollingPresentationController::deviceScaleFactor(WebKit::PDFPluginBase **this)
{
  return WebKit::PDFPluginBase::deviceScaleFactor(this[2]);
}

float non-virtual thunk to'WebKit::PDFScrollingPresentationController::deviceScaleFactor(WebKit::PDFPluginBase **this)
{
  return WebKit::PDFPluginBase::deviceScaleFactor(*(this - 2));
}

uint64_t WebKit::PDFScrollingPresentationController::customContentsScale(WebKit::PDFScrollingPresentationController *this, const WebCore::GraphicsLayer *a2)
{
  WebKit::PDFScrollingPresentationController::pageIndexForPageBackgroundLayer(*((void *)this + 8), a2);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = (float *)*((void *)this + 2);
  return COERCE_UNSIGNED_INT((float)(WebKit::PDFPluginBase::deviceScaleFactor((WebKit::PDFPluginBase *)v4) * v4[162]) * 0.5) | 0x100000000;
}

uint64_t non-virtual thunk to'WebKit::PDFScrollingPresentationController::customContentsScale(WebKit::PDFScrollingPresentationController *this, const WebCore::GraphicsLayer *a2)
{
  return WebKit::PDFScrollingPresentationController::customContentsScale((WebKit::PDFScrollingPresentationController *)((char *)this - 32), a2);
}

uint64_t WebKit::PDFScrollingPresentationController::layerNeedsPlatformContext(WebKit::UnifiedPDFPlugin **this, const WebCore::GraphicsLayer *a2)
{
  if (this[6] == a2) {
    return WebKit::UnifiedPDFPlugin::canPaintSelectionIntoOwnedLayer(this[2]) ^ 1;
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'WebKit::PDFScrollingPresentationController::layerNeedsPlatformContext(WebKit::UnifiedPDFPlugin **this, const WebCore::GraphicsLayer *a2)
{
  if (this[2] == a2) {
    return WebKit::UnifiedPDFPlugin::canPaintSelectionIntoOwnedLayer(*(this - 2)) ^ 1;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::PDFScrollingPresentationController::tiledBackingUsageChanged(uint64_t this, const WebCore::GraphicsLayer *a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = this;
    uint64_t v4 = (*(uint64_t (**)(const WebCore::GraphicsLayer *))(*(void *)a2 + 832))(a2);
    uint64_t v5 = WebKit::UnifiedPDFPlugin::isInWindow(*(WebKit::UnifiedPDFPlugin **)(v3 + 16));
    float v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 144);
    return v6(v4, v5);
  }
  return this;
}

uint64_t non-virtual thunk to'WebKit::PDFScrollingPresentationController::tiledBackingUsageChanged(WebKit::PDFScrollingPresentationController *this, const WebCore::GraphicsLayer *a2, int a3)
{
  return WebKit::PDFScrollingPresentationController::tiledBackingUsageChanged((uint64_t)this - 32, a2, a3);
}

void WebKit::PDFScrollingPresentationController::paintContents(uint64_t a1, WebCore::GraphicsLayer *a2, WebCore::GraphicsContext *a3, const WebCore::FloatRect *a4)
{
  if (*(WebCore::GraphicsLayer **)(a1 + 48) == a2)
  {
    unint64_t v16 = *(atomic_uchar *volatile **)(a1 + 24);
    if (v16) {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v16 + 2);
    }
    uint64_t v17 = *(void *)(a1 + 16);
    LOBYTE(v23) = 0;
    char v26 = 0;
    WebKit::UnifiedPDFPlugin::paintPDFContent(v17, a2, a3, a4, &v23, 0, (WebKit::AsyncPDFRenderer *)v16);
    std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v18);
    if (v16)
    {
      unint64_t v15 = (atomic_uchar *)*((void *)v16 + 2);
      goto LABEL_10;
    }
  }
  else if (*(WebCore::GraphicsLayer **)(a1 + 56) == a2)
  {
    v22[0] = 0;
    v22[32] = 0;
    uint64_t v19 = *(void *)(a1 + 16);
    std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](&v23, (uint64_t)v22);
    WebKit::UnifiedPDFPlugin::paintPDFSelection(v19, (id *)a2, (uint64_t)a3, a4, (WTF *)&v23);
    std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v20);
    std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v21);
  }
  else
  {
    unint64_t v8 = WebKit::PDFScrollingPresentationController::pageIndexForPageBackgroundLayer(*(void *)(a1 + 64), a2);
    if (v9)
    {
      float v10 = (const WebCore::FloatRect *)v8;
      WebKit::UnifiedPDFPlugin::layoutBoundsForPageAtIndex(*(WebKit::UnifiedPDFPlugin **)(a1 + 16), v8);
      int v24 = v11;
      int v25 = v12;
      uint64_t v23 = 0;
      uint64_t v13 = *(void *)(a1 + 24);
      if (v13)
      {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v13 + 16));
        WebKit::AsyncPDFRenderer::paintPagePreview(*(void *)(v13 + 136), a3, (const WebCore::FloatRect *)&v23, v10);
        unint64_t v15 = *(atomic_uchar **)(v13 + 16);
LABEL_10:
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(v15, v14);
      }
    }
  }
}

void sub_198E4D6CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14, a2);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, v15);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'WebKit::PDFScrollingPresentationController::paintContents(uint64_t a1, WebCore::GraphicsLayer *a2, WebCore::GraphicsContext *a3, const WebCore::FloatRect *a4)
{
}

void WebKit::PDFDiscretePresentationController::~PDFDiscretePresentationController(WebKit::PDFDiscretePresentationController *this)
{
  WebKit::PDFDiscretePresentationController::~PDFDiscretePresentationController(this);

  WTF::fastFree(v1, v2);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t vars8;

  unsigned int v2 = (WebKit::PDFDiscretePresentationController *)((char *)this + 192);
  *((void *)this + 24) = &unk_1EE9BA5F0;
  uint64_t v3 = *((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::TimerBase::~TimerBase(v2);
  *((void *)this + 17) = &unk_1EE9BA5F0;
  uint64_t v4 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WebCore::TimerBase::~TimerBase((WebKit::PDFDiscretePresentationController *)((char *)this + 136));
  *((void *)this + 10) = &unk_1EE9BA5F0;
  uint64_t v5 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  WebCore::TimerBase::~TimerBase((WebKit::PDFDiscretePresentationController *)((char *)this + 80));
  float v7 = *((void *)this + 8);
  if (v7) {
    WTF::fastFree((WTF *)(v7 - 16), v6);
  }
  WTF::Vector<WebKit::PDFDiscretePresentationController::RowData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, v6);
  char v9 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v9)
  {
    if (v9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v9 + 16))(v9);
    }
    else {
      --v9[2];
    }
  }

  WebKit::PDFPresentationController::~PDFPresentationController(this, v8);
}

uint64_t WebKit::PDFDiscretePresentationController::graphicsLayerClient(WebKit::PDFDiscretePresentationController *this)
{
  return (uint64_t)this + 32;
}

uint64_t WebKit::PDFDiscretePresentationController::wantsWheelEvents(WebKit::PDFDiscretePresentationController *this)
{
  return 1;
}

void non-virtual thunk to'WebKit::PDFDiscretePresentationController::~PDFDiscretePresentationController(WebKit::PDFDiscretePresentationController *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::PDFDiscretePresentationController::~PDFDiscretePresentationController((WebKit::PDFDiscretePresentationController *)((char *)this - 32));

  WTF::fastFree(v1, v2);
}

void WebKit::PDFPresentationController::visibleRow(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

void WebKit::PDFPresentationController::rowForLayerID(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

uint64_t WebKit::PDFPresentationController::wantsWheelEvents(WebKit::PDFPresentationController *this)
{
  return 0;
}

uint64_t WebKit::PDFPresentationController::handleWheelEvent()
{
  return 0;
}

void WebKit::PDFScrollingPresentationController::~PDFScrollingPresentationController(WebKit::PDFScrollingPresentationController *this, void *a2)
{
  uint64_t v3 = (_DWORD **)*((void *)this + 8);
  if (v3) {
    WTF::HashTable<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashMap<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 16))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 16))(v5);
    }
    else {
      --v5[2];
    }
  }
  float v6 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 16))(v6);
    }
    else {
      --v6[2];
    }
  }

  WebKit::PDFPresentationController::~PDFPresentationController(this, a2);
}

{
  _DWORD **v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  WTF *v7;
  void *v8;
  uint64_t vars8;

  uint64_t v3 = (_DWORD **)*((void *)this + 8);
  if (v3) {
    WTF::HashTable<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashMap<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 16))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 16))(v5);
    }
    else {
      --v5[2];
    }
  }
  float v6 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 16))(v6);
    }
    else {
      --v6[2];
    }
  }
  WebKit::PDFPresentationController::~PDFPresentationController(this, a2);

  WTF::fastFree(v7, v8);
}

uint64_t WebKit::PDFScrollingPresentationController::graphicsLayerClient(WebKit::PDFScrollingPresentationController *this)
{
  return (uint64_t)this + 32;
}

float WebKit::PDFScrollingPresentationController::convertFromContentsToPainting(uint64_t a1, uint64_t a2)
{
  return *(float *)a2;
}

float WebKit::PDFScrollingPresentationController::convertFromPaintingToContents(uint64_t a1, uint64_t a2)
{
  return *(float *)a2;
}

void non-virtual thunk to'WebKit::PDFScrollingPresentationController::~PDFScrollingPresentationController(WebKit::PDFScrollingPresentationController *this, void *a2)
{
  uint64_t v3 = (_DWORD **)*((void *)this + 4);
  if (v3) {
    WTF::HashTable<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashMap<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 16))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 16))(v5);
    }
    else {
      --v5[2];
    }
  }
  float v6 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 16))(v6);
    }
    else {
      --v6[2];
    }
  }

  WebKit::PDFPresentationController::~PDFPresentationController((WebKit::PDFScrollingPresentationController *)((char *)this - 32), a2);
}

{
  WebKit::PDFScrollingPresentationController::~PDFScrollingPresentationController((WebKit::PDFScrollingPresentationController *)((char *)this - 32), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WTF **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF *)-1) {
        std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>::reset[abi:sn180100](v4, 0);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF **std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  unsigned int v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *((void *)v2 + 1);
    if (v3) {
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 64;
    do
    {
      if (*(void *)(v4 - 64) == -1) {
        goto LABEL_17;
      }
      uint64_t v5 = *(WTF **)v4;
      if (*(void *)v4)
      {
        *(void *)uint64_t v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
        WTF::fastFree(v5, a2);
      }
      uint64_t v6 = *(void *)(v4 - 48);
      *(void *)(v4 - 48) = 0;
      if (!v6) {
        goto LABEL_17;
      }
      char v7 = 0;
      uint64_t v8 = *(void *)(v6 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
      if (v7) {
        MEMORY[0x19972E8D0](v8);
      }
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v10 = v9 - 1;
      *(void *)(v8 + 8) = v9 - 1;
      if (v9 == 1)
      {
        uint64_t v14 = *(void *)(v8 + 16);
        uint64_t v11 = *(void *)(v8 + 24);
        *(void *)(v8 + 24) = 0;
        BOOL v12 = v14 != 0;
      }
      else
      {
        uint64_t v11 = 0;
        BOOL v12 = 1;
      }
      int v13 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
      if (v13 == 1)
      {
        if (!v10) {
          goto LABEL_13;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v8);
        if (!v10)
        {
LABEL_13:
          if (v11) {
            (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
          }
          if (!v12) {
            WTF::fastFree((WTF *)v8, a2);
          }
        }
      }
LABEL_17:
      v4 += 104;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 64;
    do
    {
      if (*(void *)(v4 - 64) != -1)
      {
        uint64_t v5 = *(WTF **)v4;
        if (*(void *)v4)
        {
          *(void *)uint64_t v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
          WTF::fastFree(v5, a2);
        }
      }
      v4 += 104;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (_DWORD *)-1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5)
        {
          if (v5[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 16))(v5);
          }
          else {
            --v5[2];
          }
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -2)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5)
        {
          char v6 = 0;
          uint64_t v7 = *(void *)(v5 + 8);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
          if (v6) {
            MEMORY[0x19972E8D0](v7);
          }
          uint64_t v8 = *(void *)(v7 + 8);
          uint64_t v9 = v8 - 1;
          *(void *)(v7 + 8) = v8 - 1;
          if (v8 == 1)
          {
            uint64_t v13 = *(void *)(v7 + 16);
            uint64_t v10 = *(void *)(v7 + 24);
            *(void *)(v7 + 24) = 0;
            BOOL v11 = v13 != 0;
          }
          else
          {
            uint64_t v10 = 0;
            BOOL v11 = 1;
          }
          int v12 = 1;
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
          if (v12 == 1)
          {
            if (!v9) {
              goto LABEL_11;
            }
          }
          else
          {
            WTF::Lock::unlockSlow((WTF::Lock *)v7);
            if (!v9)
            {
LABEL_11:
              if (v10) {
                (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
              }
              if (!v11) {
                WTF::fastFree((WTF *)v7, a2);
              }
            }
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(WTF **)a1;
    if (a1 + 16 != *(void *)a1 && v3 != 0)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  return a1;
}

unsigned char *std::__optional_storage_base<WebKit::PDFLayoutRow,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::PDFLayoutRow,false>>(unsigned char *__dst, void *a2)
{
  uint64_t v3 = __dst;
  if (__dst[32] == *((unsigned char *)a2 + 32))
  {
    if (__dst[32])
    {
      uint64_t v4 = __dst + 16;
      __dst = *(unsigned char **)__dst;
      if (*(unsigned char **)v3 != v3 + 16)
      {
        if (__dst)
        {
          *(void *)uint64_t v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
          __dst = (unsigned char *)WTF::fastFree((WTF *)__dst, a2);
        }
        *(void *)uint64_t v3 = v4;
      }
      uint64_t v5 = a2 + 2;
      char v6 = (void *)*a2;
      if ((void *)*a2 == a2 + 2)
      {
        __dst = memcpy(v3 + 16, v5, 8 * *((unsigned int *)a2 + 3));
        int v7 = *((_DWORD *)a2 + 2);
      }
      else
      {
        *a2 = v5;
        *(void *)uint64_t v3 = v6;
        int v7 = *((_DWORD *)a2 + 2);
        *((_DWORD *)a2 + 2) = 2;
      }
      *((_DWORD *)v3 + 2) = v7;
      int v11 = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *((_DWORD *)v3 + 3) = v11;
    }
  }
  else if (__dst[32])
  {
    __dst = *(unsigned char **)__dst;
    if (v3 + 16 != *(unsigned char **)v3 && __dst != 0)
    {
      *(void *)uint64_t v3 = 0;
      *((_DWORD *)v3 + 2) = 0;
      __dst = (unsigned char *)WTF::fastFree((WTF *)__dst, a2);
    }
    v3[32] = 0;
  }
  else
  {
    __dst += 16;
    *(void *)uint64_t v3 = v3 + 16;
    *((void *)v3 + 1) = 2;
    uint64_t v9 = (void *)*a2;
    if ((void *)*a2 == a2 + 2)
    {
      __dst = memcpy(__dst, v9, 8 * *((unsigned int *)a2 + 3));
    }
    else
    {
      *a2 = a2 + 2;
      *(void *)uint64_t v3 = v9;
      int v10 = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 2;
      *((_DWORD *)v3 + 2) = v10;
    }
    int v12 = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *((_DWORD *)v3 + 3) = v12;
    v3[32] = 1;
  }
  return __dst;
}

unsigned char *std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1, a2);
    a1[32] = 1;
  }
  return a1;
}

void sub_198E4E148(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, long long **a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x6666667)
  {
    int v5 = 40 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    uint64_t v7 = *((unsigned int *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = 40 * v7;
      do
      {
        long long v10 = *v8;
        long long v11 = v8[1];
        *(void *)(v6 + 32) = *((void *)v8 + 4);
        *(_OWORD *)uint64_t v6 = v10;
        *(_OWORD *)(v6 + 16) = v11;
        v6 += 40;
        uint64_t v8 = (long long *)((char *)v8 + 40);
        v9 -= 40;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

WTF *WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::remove(uint64_t *a1, void *a2)
{
  *(void *)a2 = -1;
  uint64_t result = (WTF *)*((void *)a2 + 8);
  if (result)
  {
    *((void *)a2 + 8) = 0;
    *((_DWORD *)a2 + 18) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WTF *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(a1, v8 >> 1);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    int v4 = 0;
    int v5 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(104 * a2 + 16));
  if (a2)
  {
    uint64_t v8 = a2;
    uint64_t v9 = (void *)(result + 112);
    __asm { FMOV            V1.2S, #1.0 }
    do
    {
      *uint64_t v9 = 0;
      *((_OWORD *)v9 - 2) = 0uLL;
      *((_OWORD *)v9 - 1) = 0uLL;
      *((_OWORD *)v9 - 4) = 0uLL;
      *((_OWORD *)v9 - 3) = 0uLL;
      *((_OWORD *)v9 - 6) = 0uLL;
      *((_OWORD *)v9 - 5) = 0uLL;
      *(v9 - 1) = _D1;
      *(_DWORD *)uint64_t v9 = 1065353216;
      v9 += 13;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v16 = v3 + 104 * i;
      if (*(void *)v16 != -1)
      {
        if (*(void *)v16 || *(void *)(v16 + 8))
        {
          uint64_t v21 = *a1;
          if (*a1) {
            unsigned int v22 = *(_DWORD *)(v21 - 8);
          }
          else {
            unsigned int v22 = 0;
          }
          int v23 = WebKit::TileForGrid::computeHash((WebKit::TileForGrid *)(v3 + 104 * i));
          for (j = 0; ; int v23 = j + v25)
          {
            unsigned int v25 = v23 & v22;
            char v26 = (void *)(v21 + 104 * (v23 & v22));
            if (!*v26 && !v26[1]) {
              break;
            }
            ++j;
          }
          uint64_t v27 = v21 + 104 * v25;
          uint64_t v30 = *(WTF **)(v27 + 64);
          float v29 = (void *)(v27 + 64);
          float v28 = v30;
          if (v30)
          {
            void *v29 = 0;
            *(_DWORD *)(v21 + 104 * v25 + 72) = 0;
            WTF::fastFree(v28, v7);
          }
          *(_OWORD *)char v26 = *(_OWORD *)v16;
          uint64_t v31 = v21 + 104 * v25;
          uint64_t v32 = v3 + 104 * i;
          *(void *)(v31 + 16) = *(void *)(v32 + 16);
          long long v33 = *(_OWORD *)(v32 + 24);
          long long v34 = *(_OWORD *)(v32 + 40);
          *(unsigned char *)(v31 + 56) = *(unsigned char *)(v32 + 56);
          *(_OWORD *)(v31 + 40) = v34;
          *(_OWORD *)(v31 + 24) = v33;
          void *v29 = 0;
          v29[1] = 0;
          uint64_t v36 = *(void *)(v32 + 64);
          uint64_t v35 = v32 + 64;
          *(void *)uint64_t v35 = 0;
          void *v29 = v36;
          int v37 = *(_DWORD *)(v35 + 8);
          *(_DWORD *)(v35 + 8) = 0;
          *(_DWORD *)(v31 + 72) = v37;
          int v38 = *(_DWORD *)(v35 + 12);
          *(_DWORD *)(v35 + 12) = 0;
          *(_DWORD *)(v31 + 76) = v38;
          long long v39 = *(_OWORD *)(v35 + 16);
          *(_DWORD *)(v31 + 96) = *(_DWORD *)(v35 + 32);
          *(_OWORD *)(v31 + 80) = v39;
          unsigned int v40 = *(WTF **)v35;
          if (*(void *)v35)
          {
            *(void *)uint64_t v35 = 0;
            *(_DWORD *)(v35 + 8) = 0;
            WTF::fastFree(v40, v7);
          }
        }
        else
        {
          uint64_t v17 = v3 + 104 * i;
          float v20 = *(WTF **)(v17 + 64);
          uint64_t v19 = (void *)(v17 + 64);
          uint64_t v18 = v20;
          if (v20)
          {
            void *v19 = 0;
            *(_DWORD *)(v3 + 104 * i + 72) = 0;
            WTF::fastFree(v18, v7);
          }
        }
      }
    }
  }
  else if (!v3)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v3 - 16), v7);
}

uint64_t WebKit::TileForGrid::computeHash(WebKit::TileForGrid *this)
{
  unint64_t v1 = *(void *)this;
  unsigned int v2 = *((_DWORD *)this + 2);
  unsigned int v3 = *((_DWORD *)this + 3);
  __int16 v7 = 0;
  char v8 = 0;
  unsigned int v4 = (v1 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v1 - 1640531527) << 16) ^ ((unsigned __int16)v1
                                                                                          - 1640531527);
  LODWORD(v1) = (v1 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(v1) + (v4 >> 11)) << 16) ^ (v4 + WORD2(v1) + (v4 >> 11));
  LODWORD(v1) = (v2 >> 5) & 0x7FFF800 ^ ((v1 + (unsigned __int16)v2 + (v1 >> 11)) << 16) ^ (v1 + (unsigned __int16)v2 + (v1 >> 11));
  int v6 = ((v3 >> 5) & 0x7FFF800 ^ ((v1 + (unsigned __int16)v3 + (v1 >> 11)) << 16) ^ (v1 + (unsigned __int16)v3 + (v1 >> 11)))
     + (((v3 >> 5) & 0x7FFF800 ^ ((v1 + (unsigned __int16)v3 + (v1 >> 11)) << 16) ^ (v1 + (unsigned __int16)v3 + (v1 >> 11))) >> 11);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v6);
}

WTF *WebCore::LinearTimingFunction::create(WebCore::LinearTimingFunction *this)
{
  unsigned int v3 = 0;
  uint64_t v4 = 0;
  WebCore::LinearTimingFunction::create((uint64_t)&v3, (uint64_t *)this);
  uint64_t result = v3;
  if (v3)
  {
    unsigned int v3 = 0;
    LODWORD(v4) = 0;
    return (WTF *)WTF::fastFree(result, v1);
  }
  return result;
}

void sub_198E4E620(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Animation::create(WebCore::Animation *this)
{
  unsigned int v2 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
  uint64_t result = WebCore::Animation::Animation(v2);
  *(void *)this = v2;
  return result;
}

void sub_198E4E674(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PDFDiscretePresentationController::startTransitionAnimation(WebKit::PageTransitionState)::$_3::operator()(uint64_t a1, float a2, float a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 5;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x20);
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)uint64_t v5 = &unk_1EE9D9608;
  *(float *)(v5 + 24) = a2;
  uint64_t v9 = v5;
  WebCore::KeyframeValueList::insert();
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(void *)(v6 + 8) = 0x3FF0000000000000;
  *(void *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1EE9D9608;
  *(float *)(v6 + 24) = a3;
  uint64_t v8 = v6;
  WebCore::KeyframeValueList::insert();
  uint64_t result = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

void sub_198E4E7A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  WTF::Vector<std::unique_ptr<WebCore::AnimationValue const>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PDFDiscretePresentationController::startTransitionAnimation(WebKit::PageTransitionState)::$_1::operator()(uint64_t *a1, double a2, float a3, float a4)
{
  float v22 = a3;
  __int16 v23 = 4;
  char v24 = 1;
  float v19 = a4;
  __int16 v20 = 4;
  char v21 = 1;
  int v17 = 1;
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)8);
  int v13 = 0;
  __int16 v14 = 4;
  char v15 = 0;
  WebCore::TranslateTransformOperation::create();
  uint64_t v6 = v12[0];
  v12[0] = 0;
  *uint64_t v16 = v6;
  int v18 = 1;
  __int16 v7 = (_DWORD *)v12[0];
  v12[0] = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
  }
  if (v14 == 11) {
    WebCore::Length::deref((WebCore::Length *)&v13);
  }
  WebCore::TransformOperations::TransformOperations();
  uint64_t v8 = WTF::fastMalloc((WTF *)0x28);
  *(double *)(v8 + 8) = a2;
  *(void *)(v8 + 16) = 0;
  *(void *)uint64_t v8 = &unk_1EE9D95B8;
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v8 + 24, (uint64_t)v12);
  *a1 = v8;
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v9);
  uint64_t result = WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v10);
  if (v20 == 11) {
    uint64_t result = WebCore::Length::deref((WebCore::Length *)&v19);
  }
  if (v23 == 11) {
    return WebCore::Length::deref((WebCore::Length *)&v22);
  }
  return result;
}

void sub_198E4E9E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, char a12, __int16 a13, char a14, __int16 a15, char a16, uint64_t a17, char a18, __int16 a19, char a20,__int16 a21,char a22,__int16 a23,char a24)
{
  if (a10)
  {
    if (a10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
    }
    else {
      --a10[2];
    }
  }
  if (a14 == 11) {
    WebCore::Length::deref((WebCore::Length *)&a12);
  }
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  if (a20 == 11) {
    WebCore::Length::deref((WebCore::Length *)&a18);
  }
  if (a24 == 11) {
    WebCore::Length::deref((WebCore::Length *)&a22);
  }
  _Unwind_Resume(a1);
}

void WebCore::AnimationValue::~AnimationValue(WebCore::AnimationValue *this)
{
  *(void *)this = &unk_1EE9D95E0;
  unsigned int v2 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 16))(v2);
    }
    else {
      --v2[2];
    }
  }
}

void WebCore::TransformAnimationValue::~TransformAnimationValue(WebCore::TransformAnimationValue *this, void *a2)
{
  *(void *)this = &unk_1EE9D95B8;
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);

  WebCore::AnimationValue::~AnimationValue(this);
}

{
  WTF *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9D95B8;
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  WebCore::AnimationValue::~AnimationValue(this);

  WTF::fastFree(v3, v4);
}

uint64_t WebCore::TransformAnimationValue::clone@<X0>(WebCore::TransformAnimationValue *this@<X0>, WebCore::AnimationValue **a2@<X8>)
{
  uint64_t v4 = (WebCore::AnimationValue *)WTF::fastMalloc((WTF *)0x28);
  WebCore::AnimationValue::AnimationValue(v4, this);
  *(void *)uint64_t v4 = &unk_1EE9D95B8;
  uint64_t result = WebCore::TransformOperations::clone((WebCore::TransformAnimationValue *)((char *)this + 24));
  *a2 = v4;
  return result;
}

void sub_198E4EC54(_Unwind_Exception *a1)
{
  WebCore::AnimationValue::~AnimationValue(v1);
  WTF::fastFree(v1, v3);
  _Unwind_Resume(a1);
}

WebCore::AnimationValue *WebCore::AnimationValue::AnimationValue(WebCore::AnimationValue *this, const WebCore::AnimationValue *a2)
{
  void (***v3)(uint64_t *__return_ptr);
  uint64_t v4;
  uint64_t v6;

  *(void *)this = &unk_1EE9D95E0;
  *((void *)this + 1) = *((void *)a2 + 1);
  unsigned int v3 = (void (***)(uint64_t *__return_ptr))*((void *)a2 + 2);
  if (v3)
  {
    (**v3)(&v6);
    uint64_t v4 = v6;
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((void *)this + 2) = v4;
  return this;
}

void WebCore::FloatAnimationValue::~FloatAnimationValue(WebCore::FloatAnimationValue *this)
{
  WebCore::AnimationValue::~AnimationValue(this);

  WTF::fastFree(v1, v2);
}

float WebCore::FloatAnimationValue::clone@<S0>(WebCore::FloatAnimationValue *this@<X0>, float **a2@<X8>)
{
  uint64_t v4 = (float *)WTF::fastMalloc((WTF *)0x20);
  WebCore::AnimationValue::AnimationValue((WebCore::AnimationValue *)v4, this);
  *(void *)uint64_t v4 = &unk_1EE9D9608;
  float result = *((float *)this + 6);
  uint64_t v4[6] = result;
  *a2 = v4;
  return result;
}

void sub_198E4EDA4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::AnimationValue const>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  __int16 v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

_DWORD *WTF::RefCounted<WebCore::Animation>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    unint64_t v1 = (WTF *)MEMORY[0x19973B9C0]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v27 = -1640531527;
  __int16 v28 = 0;
  char v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v27, a3);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27);
  unsigned int v11 = result & v9;
  int v12 = (void *)(v8 + 24 * (result & v9));
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    char v15 = 0;
    int v16 = 1;
    do
    {
      if (v14 == *a3 && v13 == a3[1])
      {
        uint64_t v23 = *a2;
        if (*a2) {
          unsigned int v24 = *(_DWORD *)(v23 - 4);
        }
        else {
          unsigned int v24 = 0;
        }
        char v26 = 0;
        uint64_t v25 = v23 + 24 * v24;
        goto LABEL_30;
      }
      if (v13 == -1) {
        char v15 = v12;
      }
      unsigned int v11 = (v11 + v16) & v9;
      int v12 = (void *)(v8 + 24 * v11);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *char v15 = 0;
      v15[1] = 0;
      uint64_t v15[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      int v12 = v15;
    }
  }
  *(_OWORD *)int v12 = *(_OWORD *)a3;
  *((_DWORD *)v12 + 4) = *a4;
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 12) = v18;
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_21:
      uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, (long long *)v12);
      int v12 = (void *)result;
      uint64_t v19 = *a2;
      if (*a2) {
        LODWORD(v22) = *(_DWORD *)(v19 - 4);
      }
      else {
        LODWORD(v22) = 0;
      }
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_21;
  }
  uint64_t v25 = v19 + 24 * v22;
  char v26 = 1;
LABEL_30:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v26;
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,unsigned int,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,unsigned long &>(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v25 = -1640531527;
  __int16 v26 = 0;
  char v27 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v25, a3);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v25);
  unsigned int v11 = result & v9;
  int v12 = (void *)(v8 + 24 * (result & v9));
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    char v15 = 0;
    int v16 = 1;
    do
    {
      if (v14 == *a3 && v13 == a3[1])
      {
        uint64_t v23 = *a2;
        if (*a2) {
          unsigned int v24 = *(_DWORD *)(v23 - 4);
        }
        else {
          unsigned int v24 = 0;
        }
        *(void *)a1 = v12;
        *(void *)(a1 + 8) = v23 + 24 * v24;
        *(unsigned char *)(a1 + 16) = 0;
        *((_DWORD *)v12 + 4) = *a4;
        return result;
      }
      if (v13 == -1) {
        char v15 = v12;
      }
      unsigned int v11 = (v11 + v16) & v9;
      int v12 = (void *)(v8 + 24 * v11);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *char v15 = 0;
      v15[1] = 0;
      uint64_t v15[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      int v12 = v15;
    }
  }
  *(_OWORD *)int v12 = *(_OWORD *)a3;
  *((_DWORD *)v12 + 4) = *a4;
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 12) = v18;
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_21:
      uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, (long long *)v12);
      int v12 = (void *)result;
      uint64_t v19 = *a2;
      if (*a2) {
        LODWORD(v22) = *(_DWORD *)(v19 - 4);
      }
      else {
        LODWORD(v22) = 0;
      }
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_21;
  }
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v19 + 24 * v22;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void *WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  uint64_t result = (void *)(a1 + 16);
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4 < 3) {
    goto LABEL_4;
  }
  if (!(v4 >> 29))
  {
    uint64_t result = (void *)WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a1 + 8) = v4;
    *(void *)a1 = result;
LABEL_4:
    memcpy(result, *(const void **)a2, 8 * *(unsigned int *)(a2 + 12));
    return (void *)a1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::PDFDiscretePresentationController::updateLayersOnLayoutChange(WebCore::FloatSize,WebCore::FloatSize,double)::$_0::operator()(void *a1, uint64_t a2, unint64_t a3, float *a4)
{
  float v7 = WebKit::UnifiedPDFPlugin::layoutBoundsForPageAtIndex(*(WebKit::UnifiedPDFPlugin **)(*a1 + 16), a3);
  unsigned int v9 = v8;
  unsigned int v11 = v10;
  float v12 = a4[1];
  *(float *)&unint64_t v17 = v7 - *a4;
  *((float *)&v17 + 1) = v13 - v12;
  unint64_t v18 = __PAIR64__(v11, v8);
  WebCore::FloatRect::scale((WebCore::FloatRect *)&v17, *(float *)(a1[1] + 40), *(float *)(a1[1] + 40));
  unint64_t v16 = v17;
  (*(void (**)(uint64_t, unint64_t *))(*(void *)a2 + 128))(a2, &v16);
  unint64_t v16 = v18;
  (*(void (**)(uint64_t, unint64_t *))(*(void *)a2 + 160))(a2, &v16);
  if (*(_DWORD *)(a2 + 196))
  {
    uint64_t v14 = **(_DWORD ***)(a2 + 184);
    ++v14[2];
  }
  else
  {
    uint64_t v14 = 0;
  }
  unint64_t v16 = __PAIR64__(v11, v9);
  (*(void (**)(_DWORD *, unint64_t *))(*(void *)v14 + 160))(v14, &v16);
  uint64_t result = (*(uint64_t (**)(_DWORD *, void))(*(void *)v14 + 184))(v14, a1[2]);
  if (v14[2] == 1) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)v14 + 16))(v14);
  }
  --v14[2];
  return result;
}

void sub_198E4F450(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 16))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t v3 = result;
  *uint64_t result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  int v4 = a3;
  if (!(a3 >> 29))
  {
    uint64_t v6 = 8 * a3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *uint64_t v3 = v7;
    unsigned int v8 = *((_DWORD *)v3 + 3);
    do
    {
      uint64_t v9 = *a2++;
      *(void *)(*v3 + 8 * v8) = v9;
      unsigned int v8 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v8;
      v6 -= 8;
    }
    while (v6);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_198E4F520(_Unwind_Exception *exception_object, void *a2)
{
  int v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v11 = *((void *)v2 + 2);
    uint64_t v7 = (unsigned int **)*((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v11 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7)
  {
    WebKit::AsyncPDFRenderer::~AsyncPDFRenderer(v7);
    this = (atomic_uchar *)WTF::fastFree(v9, v10);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashMap<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v9 = (void *)(v2 + 16 * i);
      unsigned int v10 = (_DWORD *)*v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          uint64_t v11 = *a1;
          if (*a1) {
            int v12 = *(_DWORD *)(v11 - 8);
          }
          else {
            int v12 = 0;
          }
          unint64_t v13 = ((unint64_t)v10 + ~((void)v10 << 32)) ^ (((unint64_t)v10 + ~((void)v10 << 32)) >> 22);
          unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
          int v17 = 1;
          do
          {
            unsigned int v18 = v16;
            uint64_t v19 = *(void *)(v11 + 16 * v16);
            unsigned int v16 = (v16 + v17++) & v12;
          }
          while (v19);
          int v20 = (void *)(v11 + 16 * v18);
          uint64_t v21 = *(void *)(v2 + 16 * i + 8);
          *int v20 = 0;
          unint64_t v22 = (_DWORD *)*v9;
          *uint64_t v9 = 0;
          *int v20 = v22;
          v20[1] = v21;
          uint64_t v23 = (_DWORD *)*v9;
          *uint64_t v9 = 0;
          if (v23)
          {
            if (v23[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v23 + 16))(v23);
            }
            else {
              --v23[2];
            }
          }
        }
        else
        {
          *uint64_t v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashMap<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::deallocateTable(_DWORD **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    int v4 = a1;
    do
    {
      unsigned int v5 = *v4;
      if (*v4 != (_DWORD *)-1)
      {
        *int v4 = 0;
        if (v5)
        {
          if (v5[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 16))(v5);
          }
          else {
            --v5[2];
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v3;
    while (1)
    {
      uint64_t v10 = v2 + 24 * v8;
      if (*(void *)(v10 + 8) != -1)
      {
        if (*(_OWORD *)v10 == 0)
        {
          uint64_t v13 = v2 + 24 * v8;
          unint64_t v14 = *(_DWORD **)(v13 + 16);
          *(void *)(v13 + 16) = 0;
          if (v14)
          {
            if (v14[2] == 1) {
              goto LABEL_27;
            }
            --v14[2];
          }
        }
        else
        {
          uint64_t v11 = *a1;
          if (*a1) {
            unsigned int v12 = *(_DWORD *)(v11 - 8);
          }
          else {
            unsigned int v12 = 0;
          }
          unsigned int v25 = -1640531527;
          __int16 v26 = 0;
          char v27 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v25, (void *)(v2 + 24 * v8));
          int v15 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v25);
          int v16 = 0;
          do
          {
            unsigned int v17 = v15 & v12;
            unsigned int v18 = (_OWORD *)(v11 + 24 * (v15 & v12));
            int v15 = ++v16 + (v15 & v12);
          }
          while (*v18 != 0);
          uint64_t v19 = v11 + 24 * v17;
          unint64_t v22 = *(_DWORD **)(v19 + 16);
          uint64_t v21 = (void *)(v19 + 16);
          int v20 = v22;
          *uint64_t v21 = 0;
          if (v22)
          {
            if (v20[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v20 + 16))(v20);
            }
            else {
              --v20[2];
            }
          }
          *unsigned int v18 = *(_OWORD *)v10;
          uint64_t v23 = v2 + 24 * v8;
          uint64_t v24 = *(void *)(v23 + 16);
          *(void *)(v23 + 16) = 0;
          *uint64_t v21 = v24;
          unint64_t v14 = *(_DWORD **)(v23 + 16);
          *(void *)(v23 + 16) = 0;
          if (!v14) {
            goto LABEL_20;
          }
          if (v14[2] == 1)
          {
LABEL_27:
            (*(void (**)(_DWORD *))(*(void *)v14 + 16))(v14);
            goto LABEL_20;
          }
          --v14[2];
        }
      }
LABEL_20:
      if (++v8 == v9) {
        goto LABEL_29;
      }
    }
  }
  if (v2)
  {
LABEL_29:
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result - 8);
    unsigned int v15 = -1640531527;
    __int16 v16 = 0;
    char v17 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v15, a2);
    int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
    uint64_t v6 = a2[1];
    unsigned int v7 = v5 & v4;
    uint64_t v8 = (uint64_t *)(v3 + 24 * (v5 & v4));
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 == *a2 && v10 == v6)
    {
      return *(void *)(v3 + 24 * v7 + 16);
    }
    else
    {
      int v12 = 1;
      while (v9 | v10)
      {
        unsigned int v7 = (v7 + v12) & v4;
        uint64_t v13 = (uint64_t *)(v3 + 24 * v7);
        uint64_t v9 = *v13;
        uint64_t v10 = v13[1];
        ++v12;
        if (v9 == *a2 && v10 == v6) {
          return *(void *)(v3 + 24 * v7 + 16);
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = (_OWORD *)(result + 24);
    do
    {
      *((void *)v10 - 1) = -1;
      _OWORD *v10 = 0uLL;
      v10[1] = 0uLL;
      uint64_t v10 = (_OWORD *)((char *)v10 + 40);
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      int v12 = (long long *)(v4 + 40 * i);
      if (*(void *)v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v13 = *a1;
        if (*a1) {
          int v14 = *(_DWORD *)(v13 - 8);
        }
        else {
          int v14 = 0;
        }
        uint64_t v15 = (*(void *)v12 + ~(*(void *)v12 << 32)) ^ ((*(void *)v12 + ~(*(void *)v12 << 32)) >> 22);
        unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((unint64_t)(v15 + ~(v15 << 13)) >> 8));
        unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
        int v19 = 1;
        do
        {
          uint64_t v20 = v13 + 40 * v18;
          uint64_t v8 = *(void **)v20;
          unsigned int v18 = (v18 + v19++) & v14;
        }
        while (*(void *)v20 != -1);
        long long v21 = *v12;
        long long v22 = v12[1];
        *(void *)(v20 + 32) = *((void *)v12 + 4);
        *(_OWORD *)uint64_t v20 = v21;
        *(_OWORD *)(v20 + 16) = v22;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void *WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::generatePreviewImageForPage(unsigned long,float)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D9630;
  unsigned int v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::generatePreviewImageForPage(unsigned long,float)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D9630;
  unsigned int v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::generatePreviewImageForPage(unsigned long,float)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)char v50 = *(void *)(a1 + 40);
  WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
  uint64_t result = WebCore::ImageBuffer::create();
  if (!v54) {
    return result;
  }
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v53, v54);
  uint64_t v4 = (_OWORD *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 16))(v53);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 96))(v6, 1);
  unsigned int v7 = objc_msgSend(*(id *)(a1 + 16), "pageAtIndex:", v5, *(void *)v50);
  uint64_t v8 = v7;
  if (v7)
  {
    CFRetain(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 96))(v6, 1);
    *(_OWORD *)char v50 = *(_OWORD *)(a1 + 32);
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)(v2 + 144));
    if (v9)
    {
      unint64_t v55 = 0x11040000FF800020;
      (*(void (**)(uint64_t, unsigned char *, unint64_t *))(*(void *)v6 + 224))(v6, v50, &v55);
      if ((v55 & 0x8000000000000) != 0)
      {
        BOOL v49 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v49);
          WTF::fastFree((WTF *)v49, v10);
        }
      }
    }
    (*(void (**)(uint64_t, float, float))(*(void *)v6 + 640))(v6, *(float *)v50, *(float *)&v50[4] + *(float *)&v50[12]);
    unint64_t v55 = 0xBF8000003F800000;
    (*(void (**)(uint64_t, unint64_t *))(*(void *)v6 + 624))(v6, &v55);
    uint64_t v11 = (CGContext *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
    CGContextSetShouldSubpixelQuantizeFonts(v11, 0);
    int v12 = (CGContext *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
    CGContextSetAllowsFontSubpixelPositioning(v12, 1);
    [v8 drawWithBox:1 toContext:(*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6)];
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 104))(v6, 1);
    CFRelease(v8);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 104))(v6, 1);
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v53, v13);
  uint64_t v14 = v54;
  uint64_t v54 = 0;
  uint64_t v52 = v14;
  WebCore::ImageBuffer::sinkIntoBufferForDifferentThread();
  uint64_t v16 = v52;
  uint64_t v52 = 0;
  if (v16)
  {
    char v17 = 0;
    uint64_t v18 = *(void *)(v16 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v18, (unsigned __int8 *)&v17, 1u, memory_order_acquire, memory_order_acquire);
    if (v17) {
      MEMORY[0x19972E8D0](v18);
    }
    uint64_t v19 = *(void *)(v18 + 8);
    int v20 = 1;
    uint64_t v21 = v19 - 1;
    *(void *)(v18 + 8) = v19 - 1;
    if (v19 == 1)
    {
      uint64_t v47 = *(void *)(v18 + 16);
      uint64_t v22 = *(void *)(v18 + 24);
      *(void *)(v18 + 24) = 0;
      BOOL v23 = v47 != 0;
    }
    else
    {
      uint64_t v22 = 0;
      BOOL v23 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v18, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
    if (v20 == 1)
    {
      if (v21) {
        goto LABEL_17;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
      if (v21) {
        goto LABEL_17;
      }
    }
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    if (!v23) {
      WTF::fastFree((WTF *)v18, v15);
    }
  }
LABEL_17:
  uint64_t v24 = *(atomic_uchar **)(v2 + 16);
  if (v24) {
    unsigned int v25 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v24);
  }
  else {
    unsigned int v25 = 0;
  }
  unint64_t v26 = v55;
  unint64_t v55 = 0;
  *(_OWORD *)char v50 = *v4;
  *(_OWORD *)&v50[12] = *(_OWORD *)((char *)v4 + 12);
  uint64_t v27 = WTF::fastMalloc((WTF *)0x40);
  *(void *)uint64_t v27 = &unk_1EE9D9658;
  *(void *)(v27 + 8) = v25;
  *(void *)(v27 + 16) = v2;
  *(void *)(v27 + 24) = v26;
  long long v28 = *(_OWORD *)&v50[16];
  *(_OWORD *)(v27 + 32) = *(_OWORD *)v50;
  *(_OWORD *)(v27 + 48) = v28;
  uint64_t v51 = v27;
  WTF::callOnMainRunLoop();
  uint64_t result = v51;
  uint64_t v51 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  unint64_t v30 = v55;
  unint64_t v55 = 0;
  if (!v30) {
    goto LABEL_32;
  }
  char v31 = 0;
  uint64_t v32 = *(void *)(v30 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v32, (unsigned __int8 *)&v31, 1u, memory_order_acquire, memory_order_acquire);
  if (v31) {
    uint64_t result = MEMORY[0x19972E8D0](v32);
  }
  uint64_t v33 = *(void *)(v32 + 8);
  int v34 = 1;
  uint64_t v35 = v33 - 1;
  *(void *)(v32 + 8) = v33 - 1;
  if (v33 == 1)
  {
    uint64_t v48 = *(void *)(v32 + 16);
    uint64_t v36 = *(void *)(v32 + 24);
    *(void *)(v32 + 24) = 0;
    BOOL v37 = v48 != 0;
  }
  else
  {
    uint64_t v36 = 0;
    BOOL v37 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v32, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
  if (v34 == 1)
  {
    if (!v35)
    {
LABEL_28:
      if (v36) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 8))(v36);
      }
      if (!v37) {
        uint64_t result = WTF::fastFree((WTF *)v32, v29);
      }
    }
  }
  else
  {
    uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v32);
    if (!v35) {
      goto LABEL_28;
    }
  }
LABEL_32:
  uint64_t v38 = v54;
  uint64_t v54 = 0;
  if (!v38) {
    return result;
  }
  char v39 = 0;
  uint64_t v40 = *(void *)(v38 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v40, (unsigned __int8 *)&v39, 1u, memory_order_acquire, memory_order_acquire);
  if (v39) {
    uint64_t result = MEMORY[0x19972E8D0](v40);
  }
  uint64_t v41 = *(void *)(v40 + 8);
  int v42 = 1;
  uint64_t v43 = v41 - 1;
  *(void *)(v40 + 8) = v41 - 1;
  if (v41 == 1)
  {
    uint64_t v46 = *(void *)(v40 + 16);
    uint64_t v44 = *(void *)(v40 + 24);
    *(void *)(v40 + 24) = 0;
    BOOL v45 = v46 != 0;
  }
  else
  {
    uint64_t v44 = 0;
    BOOL v45 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v40, (unsigned __int8 *)&v42, 0, memory_order_release, memory_order_relaxed);
  if (v42 == 1)
  {
    if (v43) {
      return result;
    }
  }
  else
  {
    uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v40);
    if (v43) {
      return result;
    }
  }
  if (v44) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  if (!v45) {
    return WTF::fastFree((WTF *)v40, v29);
  }
  return result;
}

void sub_198E5073C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if ((a18 & 0x8000000000000) != 0)
  {
    uint64_t v21 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, a2);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 104))(v18, 1);
  CFRelease(v19);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 104))(v18, 1);
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&a16, v22);
  uint64_t v24 = a17;
  a17 = 0;
  if (v24)
  {
    char v25 = 0;
    uint64_t v26 = *(void *)(v24 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
    if (v25) {
      MEMORY[0x19972E8D0](v26);
    }
    uint64_t v27 = *(void *)(v26 + 8);
    int v28 = 1;
    uint64_t v29 = v27 - 1;
    *(void *)(v26 + 8) = v27 - 1;
    if (v27 == 1)
    {
      uint64_t v32 = *(void *)(v26 + 16);
      uint64_t v30 = *(void *)(v26 + 24);
      *(void *)(v26 + 24) = 0;
      BOOL v31 = v32 != 0;
    }
    else
    {
      uint64_t v30 = 0;
      BOOL v31 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v26, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
    if (v28 == 1)
    {
      if (v29) {
        goto LABEL_15;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v26);
      if (v29) {
        goto LABEL_15;
      }
    }
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
    if (!v31) {
      WTF::fastFree((WTF *)v26, v23);
    }
  }
LABEL_15:
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::remove(uint64_t *result, void *a2)
{
  *a2 = -2;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(result, v6 >> 1);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned long>>,unsigned long>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  unsigned int v7 = (uint64_t *)(a1 + 40 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 1;
    while (v8 != -1)
    {
      unsigned int v6 = (v6 + v9) & v2;
      unsigned int v7 = (uint64_t *)(a1 + 40 * v6);
      uint64_t v8 = *v7;
      ++v9;
      if (*v7 == a2) {
        return v7;
      }
    }
    return (uint64_t *)(a1 + 40 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    uint64_t v8 = a2;
    int v9 = (void *)(result + 24);
    do
    {
      *(v9 - 1) = -1;
      *int v9 = 0;
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v4;
    uint64_t v54 = v4;
    while (1)
    {
      int v12 = (uint64_t *)(v3 + 16 * v10);
      uint64_t v13 = *v12;
      if (*v12 != -2)
      {
        if (v13 != -1)
        {
          uint64_t v23 = *a1;
          if (*a1) {
            int v24 = *(_DWORD *)(v23 - 8);
          }
          else {
            int v24 = 0;
          }
          unint64_t v25 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
          unint64_t v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
          unsigned int v28 = v24 & ((v27 >> 31) ^ v27);
          int v29 = 1;
          do
          {
            unsigned int v30 = v28;
            uint64_t v31 = *(void *)(v23 + 16 * v28);
            unsigned int v28 = (v28 + v29++) & v24;
          }
          while (v31 != -1);
          uint64_t v32 = (uint64_t *)(v23 + 16 * v30);
          uint64_t v33 = v32[1];
          v32[1] = 0;
          if (v33)
          {
            char v34 = 0;
            uint64_t v35 = *(void *)(v33 + 8);
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v35, (unsigned __int8 *)&v34, 1u, memory_order_acquire, memory_order_acquire);
            if (v34) {
              MEMORY[0x19972E8D0](v35);
            }
            uint64_t v36 = *(void *)(v35 + 8);
            uint64_t v37 = v36 - 1;
            *(void *)(v35 + 8) = v36 - 1;
            if (v36 == 1)
            {
              uint64_t v52 = *(void *)(v35 + 16);
              uint64_t v38 = *(void *)(v35 + 24);
              *(void *)(v35 + 24) = 0;
              BOOL v39 = v52 != 0;
            }
            else
            {
              uint64_t v38 = 0;
              BOOL v39 = 1;
            }
            int v40 = 1;
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v35, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
            if (v40 == 1)
            {
              if (!v37) {
                goto LABEL_34;
              }
            }
            else
            {
              WTF::Lock::unlockSlow((WTF::Lock *)v35);
              if (!v37)
              {
LABEL_34:
                if (v38) {
                  (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
                }
                if (!v39) {
                  WTF::fastFree((WTF *)v35, v7);
                }
              }
            }
          }
          *uint64_t v32 = *v12;
          uint64_t v41 = v3 + 16 * v10;
          uint64_t v42 = *(void *)(v41 + 8);
          *(void *)(v41 + 8) = 0;
          v32[1] = v42;
          uint64_t v43 = *(void *)(v41 + 8);
          *(void *)(v41 + 8) = 0;
          if (v43)
          {
            char v44 = 0;
            uint64_t v45 = *(void *)(v43 + 8);
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v45, (unsigned __int8 *)&v44, 1u, memory_order_acquire, memory_order_acquire);
            if (v44) {
              MEMORY[0x19972E8D0](v45);
            }
            uint64_t v46 = *(void *)(v45 + 8);
            uint64_t v47 = v46 - 1;
            *(void *)(v45 + 8) = v46 - 1;
            if (v46 == 1)
            {
              uint64_t v53 = *(void *)(v45 + 16);
              uint64_t v48 = *(void *)(v45 + 24);
              *(void *)(v45 + 24) = 0;
              BOOL v49 = v53 != 0;
            }
            else
            {
              uint64_t v48 = 0;
              BOOL v49 = 1;
            }
            int v50 = 1;
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v45, (unsigned __int8 *)&v50, 0, memory_order_release, memory_order_relaxed);
            if (v50 == 1)
            {
              if (!v47) {
                goto LABEL_45;
              }
            }
            else
            {
              WTF::Lock::unlockSlow((WTF::Lock *)v45);
              if (!v47)
              {
LABEL_45:
                if (v48) {
                  (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
                }
                if (!v49) {
                  WTF::fastFree((WTF *)v45, v7);
                }
              }
            }
          }
          uint64_t v11 = v54;
          goto LABEL_50;
        }
        uint64_t v14 = v3 + 16 * v10;
        uint64_t v15 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = 0;
        if (v15)
        {
          char v16 = 0;
          uint64_t v17 = *(void *)(v15 + 8);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
          if (v16) {
            MEMORY[0x19972E8D0](v17);
          }
          uint64_t v18 = *(void *)(v17 + 8);
          uint64_t v19 = v18 - 1;
          *(void *)(v17 + 8) = v18 - 1;
          if (v18 == 1)
          {
            uint64_t v51 = *(void *)(v17 + 16);
            uint64_t v20 = *(void *)(v17 + 24);
            *(void *)(v17 + 24) = 0;
            BOOL v21 = v51 != 0;
          }
          else
          {
            uint64_t v20 = 0;
            BOOL v21 = 1;
          }
          int v22 = 1;
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
          if (v22 == 1)
          {
            if (!v19) {
              goto LABEL_18;
            }
          }
          else
          {
            WTF::Lock::unlockSlow((WTF::Lock *)v17);
            if (!v19)
            {
LABEL_18:
              if (v20) {
                (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
              }
              if (!v21) {
                WTF::fastFree((WTF *)v17, v7);
              }
            }
          }
        }
      }
LABEL_50:
      if (++v10 == v11) {
        goto LABEL_62;
      }
    }
  }
  if (v3)
  {
LABEL_62:
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::paintPagePreviewOnWorkQueue(WTF::RetainPtr<PDFDocument> &&,WebKit::AsyncPDFRenderer::PagePreviewRequest const&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D9658;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    char v4 = 0;
    uint64_t v5 = *(void *)(v3 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](v5);
    }
    uint64_t v6 = *(void *)(v5 + 8);
    int v7 = 1;
    uint64_t v8 = v6 - 1;
    *(void *)(v5 + 8) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v13 = *(void *)(v5 + 16);
      uint64_t v9 = *(void *)(v5 + 24);
      *(void *)(v5 + 24) = 0;
      BOOL v10 = v13 != 0;
    }
    else
    {
      uint64_t v9 = 0;
      BOOL v10 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 == 1)
    {
      if (v8) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v8) {
        goto LABEL_12;
      }
    }
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    if (!v10) {
      WTF::fastFree((WTF *)v5, a2);
    }
  }
LABEL_12:
  uint64_t v11 = (atomic_uchar *)a1[1];
  a1[1] = 0;
  if (v11) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::paintPagePreviewOnWorkQueue(WTF::RetainPtr<PDFDocument> &&,WebKit::AsyncPDFRenderer::PagePreviewRequest const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D9658;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    char v4 = 0;
    uint64_t v5 = *(void *)(v3 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](v5);
    }
    uint64_t v6 = *(void *)(v5 + 8);
    int v7 = 1;
    uint64_t v8 = v6 - 1;
    *(void *)(v5 + 8) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v13 = *(void *)(v5 + 16);
      uint64_t v9 = *(void *)(v5 + 24);
      *(void *)(v5 + 24) = 0;
      BOOL v10 = v13 != 0;
    }
    else
    {
      uint64_t v9 = 0;
      BOOL v10 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 == 1)
    {
      if (v8) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v8) {
        goto LABEL_12;
      }
    }
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    if (!v10) {
      WTF::fastFree((WTF *)v5, a2);
    }
  }
LABEL_12:
  uint64_t v11 = (atomic_uchar *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v11) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::paintPagePreviewOnWorkQueue(WTF::RetainPtr<PDFDocument> &&,WebKit::AsyncPDFRenderer::PagePreviewRequest const&)::$_0,void>::call(atomic_uchar *result)
{
  uint64_t v1 = (atomic_uchar *)*((void *)result + 1);
  if (!v1) {
    return result;
  }
  int v2 = result;
  uint64_t result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v52, v1, *((void *)result + 2));
  uint64_t v3 = (void *)v52;
  if (!v52) {
    return result;
  }
  char v4 = *(atomic_uchar **)(v52 + 24);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v53, v4, *(void *)(v52 + 32));
    if (v53)
    {
      uint64_t v5 = *((void *)v2 + 4);
      uint64_t v6 = v3[16];
      int v7 = WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned long>>,unsigned long>(v6, v5);
      uint64_t v8 = v7;
      if (v6)
      {
        uint64_t v9 = (uint64_t *)(v6 + 40 * *(unsigned int *)(v6 - 4));
        if (v9 == v7) {
          goto LABEL_12;
        }
      }
      else
      {
        if (!v7) {
          goto LABEL_12;
        }
        uint64_t v9 = 0;
      }
      if (v9 != v7) {
        WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::remove(v3 + 16, v7);
      }
LABEL_12:
      uint64_t v12 = v3[17];
      uint64_t v11 = v3 + 17;
      uint64_t v10 = v12;
      if (v12
        || (WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand(v11),
            (uint64_t v10 = *v11) != 0))
      {
        int v13 = *(_DWORD *)(v10 - 8);
      }
      else
      {
        int v13 = 0;
      }
      unint64_t v14 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
      unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
      uint64_t v18 = (uint64_t *)(v10 + 16 * v17);
      uint64_t v19 = *v18;
      if (*v18 != -1)
      {
        uint64_t v20 = 0;
        int v21 = 1;
        while (v19 != v5)
        {
          if (v19 == -2) {
            uint64_t v20 = v18;
          }
          unsigned int v17 = (v17 + v21) & v13;
          uint64_t v18 = (uint64_t *)(v10 + 16 * v17);
          uint64_t v19 = *v18;
          ++v21;
          if (*v18 == -1)
          {
            if (v20)
            {
              *uint64_t v20 = -1;
              v20[1] = 0;
              --*(_DWORD *)(*v11 - 16);
              uint64_t v18 = v20;
            }
            goto LABEL_23;
          }
        }
        uint64_t v33 = *((void *)v2 + 3);
        *((void *)v2 + 3) = 0;
        uint64_t v34 = v18[1];
        v18[1] = v33;
        if (!v34) {
          goto LABEL_54;
        }
        char v35 = 0;
        uint64_t v36 = *(void *)(v34 + 8);
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v36, (unsigned __int8 *)&v35, 1u, memory_order_acquire, memory_order_acquire);
        if (v35) {
          MEMORY[0x19972E8D0](v36, v8);
        }
        uint64_t v37 = *(void *)(v36 + 8);
        int v38 = 1;
        uint64_t v39 = v37 - 1;
        *(void *)(v36 + 8) = v37 - 1;
        if (v37 == 1)
        {
          uint64_t v50 = *(void *)(v36 + 16);
          uint64_t v40 = *(void *)(v36 + 24);
          *(void *)(v36 + 24) = 0;
          BOOL v41 = v50 != 0;
        }
        else
        {
          uint64_t v40 = 0;
          BOOL v41 = 1;
        }
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v36, (unsigned __int8 *)&v38, 0, memory_order_release, memory_order_relaxed);
        if (v38 == 1)
        {
          if (v39) {
            goto LABEL_54;
          }
        }
        else
        {
          WTF::Lock::unlockSlow((WTF::Lock *)v36);
          if (v39) {
            goto LABEL_54;
          }
        }
        if (v40) {
          (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
        }
        if (!v41) {
          WTF::fastFree((WTF *)v36, v8);
        }
LABEL_54:
        uint64_t v46 = v53;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v53 + 128))(v53, v5);
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(v46 + 8), v47);
        uint64_t v3 = (void *)v52;
        if (!v52) {
          return result;
        }
        goto LABEL_55;
      }
LABEL_23:
      *uint64_t v18 = v5;
      uint64_t v22 = *((void *)v2 + 3);
      *((void *)v2 + 3) = 0;
      uint64_t v23 = v18[1];
      v18[1] = v22;
      if (v23)
      {
        char v24 = 0;
        uint64_t v25 = *(void *)(v23 + 8);
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v24, 1u, memory_order_acquire, memory_order_acquire);
        if (v24) {
          MEMORY[0x19972E8D0](v25, v8);
        }
        uint64_t v26 = *(void *)(v25 + 8);
        int v27 = 1;
        uint64_t v28 = v26 - 1;
        *(void *)(v25 + 8) = v26 - 1;
        if (v26 == 1)
        {
          uint64_t v49 = *(void *)(v25 + 16);
          uint64_t v29 = *(void *)(v25 + 24);
          *(void *)(v25 + 24) = 0;
          BOOL v30 = v49 != 0;
        }
        else
        {
          uint64_t v29 = 0;
          BOOL v30 = 1;
        }
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
        if (v27 == 1)
        {
          if (v28) {
            goto LABEL_34;
          }
        }
        else
        {
          uint64_t v51 = v29;
          WTF::Lock::unlockSlow((WTF::Lock *)v25);
          uint64_t v29 = v51;
          if (v28) {
            goto LABEL_34;
          }
        }
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
        }
        if (!v30) {
          WTF::fastFree((WTF *)v25, v8);
        }
      }
LABEL_34:
      uint64_t v31 = *v11;
      if (*v11) {
        int v32 = *(_DWORD *)(v31 - 12) + 1;
      }
      else {
        int v32 = 1;
      }
      *(_DWORD *)(v31 - 12) = v32;
      uint64_t v42 = *v11;
      if (*v11) {
        int v43 = *(_DWORD *)(v42 - 12);
      }
      else {
        int v43 = 0;
      }
      uint64_t v44 = (*(_DWORD *)(v42 - 16) + v43);
      unint64_t v45 = *(unsigned int *)(v42 - 4);
      if (v45 > 0x400)
      {
        if (v45 > 2 * v44) {
          goto LABEL_54;
        }
      }
      else if (3 * v45 > 4 * v44)
      {
        goto LABEL_54;
      }
      WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand(v11);
      goto LABEL_54;
    }
  }
LABEL_55:
  uint64_t v48 = (atomic_uchar *)v3[2];

  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(v48, v4);
}

void sub_198E515E4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(a12 + 8), a2);
  }
  if (a11) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(atomic_uchar **)(a11 + 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(uint64_t *a1, WebKit::TileForGrid *this)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v6 = WebKit::TileForGrid::computeHash(this);
  for (i = 0; ; int v6 = i + v8)
  {
    int v8 = v6 & v5;
    uint64_t result = v2 + 104 * (v6 & v5);
    if (*(void *)result == *(void *)this
      && *(_DWORD *)(result + 8) == *((_DWORD *)this + 2)
      && *(_DWORD *)(result + 12) == *((_DWORD *)this + 3))
    {
      break;
    }
    if (!*(void *)result && !*(void *)(result + 8))
    {
      if (*a1) {
        return *a1 + 104 * *(unsigned int *)(*a1 - 4);
      }
      else {
        return 0;
      }
    }
    ++i;
  }
  return result;
}

WTF *WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::take(WTF *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (*a2) {
    v3 += 104 * *(unsigned int *)(v3 - 4);
  }
  if (v3 == a3)
  {
    *((void *)result + 6) = 0;
    *((void *)result + 7) = 0;
    *((void *)result + 8) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *(_OWORD *)((char *)result + 25) = 0u;
    __asm { FMOV            V0.2S, #1.0 }
    *((void *)result + 9) = _D0;
    *((_DWORD *)result + 20) = 1065353216;
    return result;
  }
  uint64_t v4 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  *(void *)uint64_t result = v4;
  *(_OWORD *)((char *)result + 8) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)((char *)result + 24) = *(_OWORD *)(a3 + 40);
  *((unsigned char *)result + 40) = *(unsigned char *)(a3 + 56);
  *((void *)result + 6) = *(void *)(a3 + 64);
  uint64_t v5 = *(void *)(a3 + 72);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *((void *)result + 7) = v5;
  long long v6 = *(_OWORD *)(a3 + 80);
  *((_DWORD *)result + 20) = *(_DWORD *)(a3 + 96);
  *((_OWORD *)result + 4) = v6;
  if (*a2)
  {
    uint64_t v7 = *a2 + 104 * *(unsigned int *)(*a2 - 4);
    if (v7 == a3) {
      return result;
    }
  }
  else
  {
    if (!a3) {
      return result;
    }
    uint64_t v7 = 0;
  }
  if (v7 != a3) {
    return WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::remove(a2, (void *)a3);
  }
  return result;
}

void sub_198E51824(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v5 = v3;
  if (v5)
  {
    *(void *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 56) = 0;
    WTF::fastFree(v5, a2);
  }
  *(void *)uint64_t v2 = 0;
  if (v4)
  {
    char v7 = 0;
    uint64_t v8 = *(void *)(v4 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      MEMORY[0x19972E8D0](v8);
    }
    uint64_t v9 = *(void *)(v8 + 8);
    int v10 = 1;
    uint64_t v11 = v9 - 1;
    *(void *)(v8 + 8) = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v14 = *(void *)(v8 + 16);
      uint64_t v12 = *(void *)(v8 + 24);
      *(void *)(v8 + 24) = 0;
      BOOL v13 = v14 != 0;
    }
    else
    {
      uint64_t v12 = 0;
      BOOL v13 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (v11) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (v11) {
        goto LABEL_14;
      }
    }
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    if (!v13) {
      WTF::fastFree((WTF *)v8, a2);
    }
  }
LABEL_14:
  _Unwind_Resume(exception_object);
}

WTF *WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WTF *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

WTF *WTF::KeyValuePairHashTraits<WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>>::customDeleteBucket(uint64_t a1, void *a2)
{
  *(void *)a1 = -1;
  uint64_t result = *(WTF **)(a1 + 64);
  if (result)
  {
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, a2);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4)
  {
    char v5 = 0;
    uint64_t v6 = *(void *)(v4 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      uint64_t result = (WTF *)MEMORY[0x19972E8D0](v6);
    }
    uint64_t v7 = *(void *)(v6 + 8);
    int v8 = 1;
    uint64_t v9 = v7 - 1;
    *(void *)(v6 + 8) = v7 - 1;
    if (v7 == 1)
    {
      uint64_t v12 = *(void *)(v6 + 16);
      uint64_t v10 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = 0;
      BOOL v11 = v12 != 0;
    }
    else
    {
      uint64_t v10 = 0;
      BOOL v11 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1)
    {
      if (v9) {
        return result;
      }
    }
    else
    {
      uint64_t result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
      if (v9) {
        return result;
      }
    }
    if (v10) {
      uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    if (!v11)
    {
      return (WTF *)WTF::fastFree((WTF *)v6, a2);
    }
  }
  return result;
}

void *WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(uint64_t *a1, unsigned int a2, _OWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v80 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(104 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = (void *)(v7 + 112);
    __asm { FMOV            V1.2S, #1.0 }
    do
    {
      void *v10 = 0;
      *((_OWORD *)v10 - 2) = 0uLL;
      *((_OWORD *)v10 - 1) = 0uLL;
      *((_OWORD *)v10 - 4) = 0uLL;
      *((_OWORD *)v10 - 3) = 0uLL;
      *((_OWORD *)v10 - 6) = 0uLL;
      *((_OWORD *)v10 - 5) = 0uLL;
      *(v10 - 1) = _D1;
      *(_DWORD *)uint64_t v10 = 1065353216;
      v10 += 13;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v16 = 0;
    unsigned int v17 = 0;
    uint64_t v18 = v5;
    uint64_t v19 = v80;
    uint64_t v77 = v5;
    while (1)
    {
      uint64_t v20 = (WebKit::TileForGrid *)(v19 + 104 * v16);
      if (*(void *)v20 != -1)
      {
        if (*(void *)v20 || *((void *)v20 + 1))
        {
          uint64_t v33 = *a1;
          if (*a1) {
            unsigned int v34 = *(_DWORD *)(v33 - 8);
          }
          else {
            unsigned int v34 = 0;
          }
          uint64_t v82 = (_OWORD *)(v19 + 104 * v16);
          int v35 = WebKit::TileForGrid::computeHash(v20);
          for (i = 0; ; int v35 = i + v37)
          {
            unsigned int v37 = v35 & v34;
            int v38 = (void *)(v33 + 104 * (v35 & v34));
            if (!*v38 && !v38[1]) {
              break;
            }
            ++i;
          }
          uint64_t v39 = v33 + 104 * v37;
          uint64_t v42 = *(WTF **)(v39 + 64);
          BOOL v41 = (void *)(v39 + 64);
          uint64_t v40 = v42;
          if (v42)
          {
            *BOOL v41 = 0;
            *(_DWORD *)(v33 + 104 * v37 + 72) = 0;
            WTF::fastFree(v40, v8);
          }
          long long v81 = v17;
          uint64_t v43 = *(v41 - 6);
          *(v41 - 6) = 0;
          if (v43)
          {
            char v44 = 0;
            uint64_t v45 = *(void *)(v43 + 8);
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v45, (unsigned __int8 *)&v44, 1u, memory_order_acquire, memory_order_acquire);
            if (v44) {
              MEMORY[0x19972E8D0](v45);
            }
            uint64_t v46 = *(void *)(v45 + 8);
            uint64_t v47 = v46 - 1;
            *(void *)(v45 + 8) = v46 - 1;
            if (v46 == 1)
            {
              uint64_t v72 = *(void *)(v45 + 16);
              uint64_t v48 = *(void *)(v45 + 24);
              *(void *)(v45 + 24) = 0;
              BOOL v49 = v72 != 0;
            }
            else
            {
              uint64_t v48 = 0;
              BOOL v49 = 1;
            }
            int v50 = 1;
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v45, (unsigned __int8 *)&v50, 0, memory_order_release, memory_order_relaxed);
            if (v50 == 1)
            {
              if (!v47) {
                goto LABEL_42;
              }
            }
            else
            {
              BOOL v76 = v49;
              WTF::Lock::unlockSlow((WTF::Lock *)v45);
              BOOL v49 = v76;
              if (!v47)
              {
LABEL_42:
                if (v48)
                {
                  BOOL v51 = v49;
                  (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
                  BOOL v49 = v51;
                }
                if (!v49) {
                  WTF::fastFree((WTF *)v45, v8);
                }
              }
            }
          }
          *(_OWORD *)int v38 = *v82;
          uint64_t v19 = v80;
          uint64_t v52 = v80 + 104 * v16;
          uint64_t v54 = *(void *)(v52 + 16);
          uint64_t v53 = (uint64_t *)(v52 + 16);
          *(void *)(v52 + 16) = 0;
          *(v41 - 6) = v54;
          uint64_t v55 = v33 + 104 * v37;
          long long v56 = *(_OWORD *)(v52 + 24);
          long long v57 = *(_OWORD *)(v52 + 40);
          *(unsigned char *)(v55 + 56) = *(unsigned char *)(v52 + 56);
          *(_OWORD *)(v55 + 40) = v57;
          *(_OWORD *)(v55 + 24) = v56;
          *BOOL v41 = 0;
          v41[1] = 0;
          uint64_t v59 = *(void *)(v52 + 64);
          uint64_t v58 = v52 + 64;
          *(void *)uint64_t v58 = 0;
          *BOOL v41 = v59;
          int v60 = *(_DWORD *)(v58 + 8);
          *(_DWORD *)(v58 + 8) = 0;
          *(_DWORD *)(v55 + 72) = v60;
          int v61 = *(_DWORD *)(v58 + 12);
          *(_DWORD *)(v58 + 12) = 0;
          *(_DWORD *)(v55 + 76) = v61;
          long long v62 = *(_OWORD *)(v58 + 16);
          *(_DWORD *)(v55 + 96) = *(_DWORD *)(v58 + 32);
          *(_OWORD *)(v55 + 80) = v62;
          int32x2_t v63 = *(WTF **)v58;
          if (*(void *)v58)
          {
            *(void *)uint64_t v58 = 0;
            *(_DWORD *)(v58 + 8) = 0;
            WTF::fastFree(v63, v8);
          }
          uint64_t v64 = *v53;
          *uint64_t v53 = 0;
          uint64_t v18 = v77;
          if (v64)
          {
            char v65 = 0;
            uint64_t v66 = *(void *)(v64 + 8);
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v65, 1u, memory_order_acquire, memory_order_acquire);
            if (v65) {
              MEMORY[0x19972E8D0](v66);
            }
            uint64_t v67 = *(void *)(v66 + 8);
            uint64_t v68 = v67 - 1;
            *(void *)(v66 + 8) = v67 - 1;
            if (v67 == 1)
            {
              uint64_t v73 = *(void *)(v66 + 16);
              uint64_t v69 = *(void *)(v66 + 24);
              *(void *)(v66 + 24) = 0;
              BOOL v70 = v73 != 0;
            }
            else
            {
              uint64_t v69 = 0;
              BOOL v70 = 1;
            }
            int v71 = 1;
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v71, 0, memory_order_release, memory_order_relaxed);
            if (v71 == 1)
            {
              if (!v68) {
                goto LABEL_55;
              }
            }
            else
            {
              WTF::Lock::unlockSlow((WTF::Lock *)v66);
              if (!v68)
              {
LABEL_55:
                if (v69) {
                  (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
                }
                if (!v70) {
                  WTF::fastFree((WTF *)v66, v8);
                }
              }
            }
          }
          unsigned int v17 = v81;
          if (v82 == a3) {
            unsigned int v17 = v38;
          }
          goto LABEL_61;
        }
        uint64_t v21 = v19 + 104 * v16;
        char v24 = *(WTF **)(v21 + 64);
        uint64_t v23 = (void *)(v21 + 64);
        uint64_t v22 = v24;
        if (v24)
        {
          void *v23 = 0;
          *(_DWORD *)(v19 + 104 * v16 + 72) = 0;
          WTF::fastFree(v22, v8);
        }
        uint64_t v25 = *(v23 - 6);
        *(v23 - 6) = 0;
        if (v25) {
          break;
        }
      }
LABEL_61:
      if (++v16 == v18) {
        goto LABEL_73;
      }
    }
    char v26 = 0;
    uint64_t v27 = *(void *)(v25 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v27, (unsigned __int8 *)&v26, 1u, memory_order_acquire, memory_order_acquire);
    if (v26) {
      MEMORY[0x19972E8D0](v27);
    }
    uint64_t v28 = *(void *)(v27 + 8);
    uint64_t v29 = v28 - 1;
    *(void *)(v27 + 8) = v28 - 1;
    if (v28 == 1)
    {
      uint64_t v74 = *(void *)(v27 + 16);
      uint64_t v30 = *(void *)(v27 + 24);
      *(void *)(v27 + 24) = 0;
      BOOL v31 = v74 != 0;
    }
    else
    {
      uint64_t v30 = 0;
      BOOL v31 = 1;
    }
    int v32 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v27, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
    if (v32 == 1)
    {
      if (!v29)
      {
LABEL_21:
        if (v30) {
          (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
        }
        if (!v31) {
          WTF::fastFree((WTF *)v27, v8);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
      if (!v29) {
        goto LABEL_21;
      }
    }
    uint64_t v19 = v80;
    goto LABEL_61;
  }
  unsigned int v17 = 0;
  uint64_t result = 0;
  uint64_t v19 = v80;
  if (v80)
  {
LABEL_73:
    WTF::fastFree((WTF *)(v19 - 16), v8);
    return v17;
  }
  return result;
}

void *WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(a1, v5, a2);
}

WTF *WTF::HashMapTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>::translate<WebKit::TileForGrid const&,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>,WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>> WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::inlineAdd<WebKit::TileForGrid const&,WebKit::AsyncPDFRenderer::RenderedTile>(WebKit::TileForGrid const&,WebKit::AsyncPDFRenderer::RenderedTile &&)::{lambda(void)#1}>(uint64_t a1, _OWORD *a2, uint64_t **a3)
{
  *(_OWORD *)a1 = *a2;
  int v4 = *a3;
  uint64_t v5 = **a3;
  *int v4 = 0;
  long long v20 = *(_OWORD *)(v4 + 1);
  long long v21 = *(_OWORD *)(v4 + 3);
  char v22 = *((unsigned char *)v4 + 40);
  uint64_t v6 = v4[6];
  uint64_t v7 = v4[7];
  uint64_t v4[6] = 0;
  v4[7] = 0;
  long long v18 = *((_OWORD *)v4 + 4);
  int v19 = *((_DWORD *)v4 + 20);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  if (v8)
  {
    char v9 = 0;
    uint64_t v10 = *(void *)(v8 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v10, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
    if (v9) {
      MEMORY[0x19972E8D0](v10);
    }
    uint64_t v11 = *(void *)(v10 + 8);
    int v12 = 1;
    uint64_t v13 = v11 - 1;
    *(void *)(v10 + 8) = v11 - 1;
    if (v11 == 1)
    {
      uint64_t v17 = *(void *)(v10 + 16);
      uint64_t v14 = *(void *)(v10 + 24);
      *(void *)(v10 + 24) = 0;
      BOOL v15 = v17 != 0;
    }
    else
    {
      uint64_t v14 = 0;
      BOOL v15 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v10, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 == 1)
    {
      if (v13) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13) {
        goto LABEL_12;
      }
    }
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    if (!v15) {
      WTF::fastFree((WTF *)v10, a2);
    }
  }
LABEL_12:
  *(_OWORD *)(a1 + 24) = v20;
  *(_OWORD *)(a1 + 40) = v21;
  *(unsigned char *)(a1 + 56) = v22;
  uint64_t result = *(WTF **)(a1 + 64);
  if (result)
  {
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, a2);
  }
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 80) = v18;
  *(_DWORD *)(a1 + 96) = v19;
  return result;
}

void sub_198E52150(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::rehash(uint64_t *a1, unsigned int a2, WebKit::TileForGrid **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (WebKit::TileForGrid **)(v6 + 8 * v11);
      if ((unint64_t)*v13 + 1 >= 2)
      {
        uint64_t v14 = *a1;
        if (*a1) {
          unsigned int v15 = *(_DWORD *)(v14 - 8);
        }
        else {
          unsigned int v15 = 0;
        }
        int v16 = WebKit::TileForGrid::computeHash(*v13);
        int v17 = 0;
        do
        {
          uint64_t v18 = v16 & v15;
          int v16 = ++v17 + v18;
        }
        while (*(void *)(v14 + 8 * v18));
        *(void *)(v14 + 8 * v18) = *v13;
        if (v13 == a3) {
          uint64_t v12 = v14 + 8 * v18;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>>,WTF::ListHashSetNode<WebKit::TileForGrid> *>(uint64_t *a1, WebKit::TileForGrid **a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v6 = WebKit::TileForGrid::computeHash(*a2);
  int v7 = 0;
  int v8 = *a2;
  while (1)
  {
    uint64_t v9 = v6 & v5;
    uint64_t v10 = *(void *)(v2 + 8 * v9);
    if (v10 == -1) {
      goto LABEL_10;
    }
    if (!v10) {
      break;
    }
    if (*(void *)v10 == *(void *)v8)
    {
      int v12 = *(_DWORD *)(v10 + 8);
      int v11 = *(_DWORD *)(v10 + 12);
      if (v12 == *((_DWORD *)v8 + 2) && v11 == *((_DWORD *)v8 + 3)) {
        return v2 + 8 * v9;
      }
    }
LABEL_10:
    int v6 = ++v7 + v9;
  }
  if (!*a1) {
    return 0;
  }
  return *a1 + 8 * *(unsigned int *)(*a1 - 4);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(uint64_t *a1, WebKit::TileForGrid *this)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v6 = WebKit::TileForGrid::computeHash(this);
  for (i = 0; ; int v6 = i + v8)
  {
    uint64_t v8 = v6 & v5;
    uint64_t v9 = *(void *)(v2 + 8 * v8);
    if (v9 == -1) {
      goto LABEL_10;
    }
    if (!v9) {
      break;
    }
    if (*(void *)v9 == *(void *)this)
    {
      int v11 = *(_DWORD *)(v9 + 8);
      int v10 = *(_DWORD *)(v9 + 12);
      if (v11 == *((_DWORD *)this + 2) && v10 == *((_DWORD *)this + 3)) {
        return v2 + 8 * v8;
      }
    }
LABEL_10:
    ++i;
  }
  if (!*a1) {
    return 0;
  }
  return *a1 + 8 * *(unsigned int *)(*a1 - 4);
}

uint64_t WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  uint64_t v9 = result;
  uint64_t v10 = result + 16;
  if (a2) {
    uint64_t result = (uint64_t)memset((void *)(result + 16), 255, 8 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      unint64_t v12 = *(void *)(v4 + 8 * i);
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v13 = *a1;
        if (*a1) {
          int v14 = *(_DWORD *)(v13 - 8);
        }
        else {
          int v14 = 0;
        }
        unint64_t v15 = (v12 + ~(v12 << 32)) ^ ((v12 + ~(v12 << 32)) >> 22);
        unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
        unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
        int v19 = 1;
        do
        {
          unsigned int v20 = v18;
          uint64_t v8 = *(void **)(v13 + 8 * v18);
          unsigned int v18 = (v18 + v19++) & v14;
        }
        while (v8 != (void *)-1);
        *(void *)(v13 + 8 * v20) = v12;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = *(void *)(v4 + 8 * i);
      if ((unint64_t)(v10 + 1) >= 2)
      {
        uint64_t v11 = *a1;
        if (*a1) {
          int v12 = *(_DWORD *)(v11 - 8);
        }
        else {
          int v12 = 0;
        }
        unint64_t v13 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
        unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
        int v17 = 1;
        do
        {
          unsigned int v18 = v16;
          uint64_t v8 = *(void **)(v11 + 8 * v16);
          unsigned int v16 = (v16 + v17++) & v12;
        }
        while (v8);
        *(void *)(v11 + 8 * v18) = v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::TileGridIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      int v12 = (uint64_t *)(v4 + 16 * v10);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          uint64_t v23 = v14 + 16 * v21;
          std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>::reset[abi:sn180100]((WTF **)(v23 + 8), 0);
          *(void *)uint64_t v23 = *v12;
          uint64_t v24 = v4 + 16 * v10;
          uint64_t v25 = *(void *)(v24 + 8);
          v24 += 8;
          *(void *)uint64_t v24 = 0;
          *(void *)(v23 + 8) = v25;
          std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>::reset[abi:sn180100]((WTF **)v24, 0);
          if (v12 == a2) {
            uint64_t v11 = v23;
          }
        }
        else
        {
          std::unique_ptr<WebKit::AsyncPDFRenderer::RevalidationStateForGrid>::reset[abi:sn180100]((WTF **)(v4 + 16 * v10 + 8), 0);
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(uint64_t *a1, WebKit::TileForGrid *this)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v6 = WebKit::TileForGrid::computeHash(this);
  for (i = 0; ; int v6 = i + v8)
  {
    int v8 = v6 & v5;
    uint64_t result = v2 + 104 * (v6 & v5);
    if (*(void *)result == *(void *)this
      && *(_DWORD *)(result + 8) == *((_DWORD *)this + 2)
      && *(_DWORD *)(result + 12) == *((_DWORD *)this + 3))
    {
      break;
    }
    if (!*(void *)result && !*(void *)(result + 8))
    {
      if (!*a1) {
        return 0;
      }
      return *a1 + 104 * *(unsigned int *)(*a1 - 4);
    }
    ++i;
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::expand(uint64_t *a1, WebKit::TileForGrid **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::rehash(a1, v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::serviceRequestQueue(void)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9D9680;
  uint64_t v3 = *(WTF **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v3, a2);
  }
  int v4 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::serviceRequestQueue(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D9680;
  uint64_t v3 = (WTF *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  int v4 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::serviceRequestQueue(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (long long *)(a1 + 24);
  int v4 = (long long *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = a1 + 64;
  if (!*(unsigned char *)(a1 + 80)) {
    uint64_t v6 = a1 + 48;
  }
  *(void *)&long long v55 = *(void *)(v6 + 8);
  WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
  WebCore::ImageBuffer::create();
  if (v52)
  {
    WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v51, v52);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 16))(v51);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 96))(v7, 1);
    uint64_t v8 = 64;
    if (!*(unsigned char *)(a1 + 80)) {
      uint64_t v8 = 48;
    }
    long long v55 = *(_OWORD *)(a1 + v8);
    (*(void (**)(uint64_t, float, float))(*(void *)v7 + 640))(v7, -*(float *)&v55, -*((float *)&v55 + 1));
    *(void *)&long long v54 = 0x11040000FFFFFFFFLL;
    (*(void (**)(uint64_t, long long *, long long *))(*(void *)v7 + 224))(v7, &v55, &v54);
    if ((v54 & 0x8000000000000) != 0)
    {
      uint64_t v46 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v46);
        WTF::fastFree((WTF *)v46, v9);
      }
    }
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)(v2 + 144));
    if (v10)
    {
      *(void *)&long long v54 = 0x1104000000FF0020;
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v7 + 224))(v7, &v55, &v54);
      if ((v54 & 0x8000000000000) != 0)
      {
        int v50 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v50);
          WTF::fastFree((WTF *)v50, v11);
        }
      }
    }
    LODWORD(v54) = *(_DWORD *)(a1 + 120);
    DWORD1(v54) = v54;
    (*(void (**)(uint64_t, long long *))(*(void *)v7 + 624))(v7, &v54);
    (*(void (**)(uint64_t, float, float))(*(void *)v7 + 640))(v7, -*(float *)(a1 + 104), -*(float *)(a1 + 108));
    LODWORD(v54) = *(_DWORD *)(a1 + 116);
    DWORD1(v54) = v54;
    (*(void (**)(uint64_t, long long *))(*(void *)v7 + 624))(v7, &v54);
    uint64_t v12 = *(unsigned int *)(a1 + 100);
    if (v12)
    {
      uint64_t v13 = 40 * v12;
      uint64_t v14 = (_OWORD *)(*(void *)(a1 + 88) + 8);
      do
      {
        int v15 = (void *)[*(id *)(a1 + 16) pageAtIndex:*((void *)v14 - 1)];
        unint64_t v16 = v15;
        if (v15)
        {
          CFRetain(v15);
          long long v54 = *v14;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 96))(v7, 1);
          (*(void (**)(uint64_t, long long *))(*(void *)v7 + 448))(v7, &v54);
          (*(void (**)(uint64_t, float, float))(*(void *)v7 + 640))(v7, *(float *)&v54, *((float *)&v54 + 1) + *((float *)&v54 + 3));
          unint64_t v53 = 0xBF8000003F800000;
          (*(void (**)(uint64_t, unint64_t *))(*(void *)v7 + 624))(v7, &v53);
          [v16 drawWithBox:1 toContext:(*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7)];
          (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 104))(v7, 1);
          CFRelease(v16);
        }
        uint64_t v14 = (_OWORD *)((char *)v14 + 40);
        v13 -= 40;
      }
      while (v13);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 104))(v7, 1);
    WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v51, v17);
    uint64_t v18 = v52;
    uint64_t v52 = 0;
    *(void *)&long long v54 = v18;
    WebCore::ImageBuffer::sinkIntoBufferForDifferentThread();
    uint64_t v20 = v54;
    *(void *)&long long v54 = 0;
    if (!v20) {
      goto LABEL_25;
    }
    char v21 = 0;
    uint64_t v22 = *(void *)(v20 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v22, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
    if (v21) {
      MEMORY[0x19972E8D0](v22);
    }
    uint64_t v23 = *(void *)(v22 + 8);
    int v24 = 1;
    uint64_t v25 = v23 - 1;
    *(void *)(v22 + 8) = v23 - 1;
    if (v23 == 1)
    {
      uint64_t v49 = *(void *)(v22 + 16);
      uint64_t v26 = *(void *)(v22 + 24);
      *(void *)(v22 + 24) = 0;
      BOOL v27 = v49 != 0;
    }
    else
    {
      uint64_t v26 = 0;
      BOOL v27 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v22, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
    if (v24 == 1)
    {
      if (!v25)
      {
LABEL_21:
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
        }
        if (!v27) {
          WTF::fastFree((WTF *)v22, v19);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
      if (!v25) {
        goto LABEL_21;
      }
    }
LABEL_25:
    uint64_t result = WebKit::AsyncPDFRenderer::transferBufferToMainThread(v2, (uint64_t *)&v55, v3, v4, v5);
    goto LABEL_27;
  }
  *(void *)&long long v55 = 0;
  uint64_t result = WebKit::AsyncPDFRenderer::transferBufferToMainThread(v2, (uint64_t *)&v55, v3, v4, v5);
LABEL_27:
  uint64_t v30 = v55;
  *(void *)&long long v55 = 0;
  if (!v30) {
    goto LABEL_38;
  }
  char v31 = 0;
  uint64_t v32 = *(void *)(v30 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v32, (unsigned __int8 *)&v31, 1u, memory_order_acquire, memory_order_acquire);
  if (v31) {
    uint64_t result = MEMORY[0x19972E8D0](v32);
  }
  uint64_t v33 = *(void *)(v32 + 8);
  int v34 = 1;
  uint64_t v35 = v33 - 1;
  *(void *)(v32 + 8) = v33 - 1;
  if (v33 == 1)
  {
    uint64_t v47 = *(void *)(v32 + 16);
    uint64_t v36 = *(void *)(v32 + 24);
    *(void *)(v32 + 24) = 0;
    BOOL v37 = v47 != 0;
  }
  else
  {
    uint64_t v36 = 0;
    BOOL v37 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v32, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
  if (v34 == 1)
  {
    if (v35) {
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v32);
    if (v35) {
      goto LABEL_38;
    }
  }
  if (v36) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  if (!v37) {
    uint64_t result = WTF::fastFree((WTF *)v32, v29);
  }
LABEL_38:
  uint64_t v38 = v52;
  uint64_t v52 = 0;
  if (!v38) {
    return result;
  }
  char v39 = 0;
  uint64_t v40 = *(void *)(v38 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v40, (unsigned __int8 *)&v39, 1u, memory_order_acquire, memory_order_acquire);
  if (v39) {
    uint64_t result = MEMORY[0x19972E8D0](v40);
  }
  uint64_t v41 = *(void *)(v40 + 8);
  int v42 = 1;
  uint64_t v43 = v41 - 1;
  *(void *)(v40 + 8) = v41 - 1;
  if (v41 == 1)
  {
    uint64_t v48 = *(void *)(v40 + 16);
    uint64_t v44 = *(void *)(v40 + 24);
    *(void *)(v40 + 24) = 0;
    BOOL v45 = v48 != 0;
  }
  else
  {
    uint64_t v44 = 0;
    BOOL v45 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v40, (unsigned __int8 *)&v42, 0, memory_order_release, memory_order_relaxed);
  if (v42 == 1)
  {
    if (v43) {
      return result;
    }
  }
  else
  {
    uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v40);
    if (v43) {
      return result;
    }
  }
  if (v44) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  if (!v45) {
    return WTF::fastFree((WTF *)v40, v29);
  }
  return result;
}

void sub_198E532B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if ((a13 & 0x8000000000000) != 0)
  {
    int v15 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 104))(v13, 1);
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&a10, v16);
  uint64_t v18 = a11;
  a11 = 0;
  if (v18)
  {
    char v19 = 0;
    uint64_t v20 = *(void *)(v18 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
    if (v19) {
      MEMORY[0x19972E8D0](v20);
    }
    uint64_t v21 = *(void *)(v20 + 8);
    int v22 = 1;
    uint64_t v23 = v21 - 1;
    *(void *)(v20 + 8) = v21 - 1;
    if (v21 == 1)
    {
      uint64_t v26 = *(void *)(v20 + 16);
      uint64_t v24 = *(void *)(v20 + 24);
      *(void *)(v20 + 24) = 0;
      BOOL v25 = v26 != 0;
    }
    else
    {
      uint64_t v24 = 0;
      BOOL v25 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
    if (v22 == 1)
    {
      if (v23) {
        goto LABEL_15;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v20);
      if (v23) {
        goto LABEL_15;
      }
    }
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
    if (!v25) {
      WTF::fastFree((WTF *)v20, v17);
    }
  }
LABEL_15:
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::transferBufferToMainThread(WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>> &&,WebKit::TileForGrid const&,WebKit::AsyncPDFRenderer::TileRenderInfo const&,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9D96A8;
  uint64_t v3 = *(WTF **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4)
  {
    char v5 = 0;
    uint64_t v6 = *(void *)(v4 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x19972E8D0](v6);
    }
    uint64_t v7 = *(void *)(v6 + 8);
    int v8 = 1;
    uint64_t v9 = v7 - 1;
    *(void *)(v6 + 8) = v7 - 1;
    if (v7 == 1)
    {
      uint64_t v14 = *(void *)(v6 + 16);
      uint64_t v10 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = 0;
      BOOL v11 = v14 != 0;
    }
    else
    {
      uint64_t v10 = 0;
      BOOL v11 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1)
    {
      if (v9) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      if (v9) {
        goto LABEL_14;
      }
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    if (!v11) {
      WTF::fastFree((WTF *)v6, a2);
    }
  }
LABEL_14:
  uint64_t v12 = *(atomic_uchar **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v12) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v12, a2);
  }
  return a1;
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = (WTF *)WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::transferBufferToMainThread(WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>> &&,WebKit::TileForGrid const&,WebKit::AsyncPDFRenderer::TileRenderInfo const&,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(a1, a2);

  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::transferBufferToMainThread(WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>> &&,WebKit::TileForGrid const&,WebKit::AsyncPDFRenderer::TileRenderInfo const&,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(atomic_uchar **)(result + 8);
  if (!v1) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v89, v1, *(void *)(result + 16));
  uint64_t v3 = v89;
  if (!v89) {
    return result;
  }
  char v5 = (uint64_t *)(v2 + 32);
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v89 + 48);
  if (!v7) {
    goto LABEL_10;
  }
  int v8 = *(_DWORD *)(v7 - 8);
  unint64_t v9 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
  uint64_t v13 = *(void *)(v7 + 24 * v12);
  if (v13 != v4)
  {
    int v14 = 1;
    while (v13)
    {
      unsigned int v12 = (v12 + v14) & v8;
      uint64_t v13 = *(void *)(v7 + 24 * v12);
      ++v14;
      if (v13 == v4) {
        goto LABEL_8;
      }
    }
LABEL_10:
    unint64_t v16 = 0;
    goto LABEL_11;
  }
LABEL_8:
  *(_OWORD *)long long v90 = *(_OWORD *)(v7 + 24 * v12 + 8);
  v90[16] = 1;
  uint64_t v15 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(*(void *)(v89 + 40), v90);
  unint64_t v16 = (_DWORD *)v15;
  if (v15)
  {
    char v17 = 0;
    ++*(_DWORD *)(v15 + 8);
    goto LABEL_12;
  }
LABEL_11:
  char v17 = 1;
LABEL_12:
  uint64_t v18 = *(void *)(v2 + 128);
  char v19 = (void *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>((uint64_t *)(v3 + 64), (WebKit::TileForGrid *)(v2 + 32));
  uint64_t v20 = *(void *)(v3 + 64);
  if (v20) {
    uint64_t v21 = (void *)(v20 + 104 * *(unsigned int *)(v20 - 4));
  }
  else {
    uint64_t v21 = 0;
  }
  if (v21 == v19 || v19[2] != v18)
  {
    --*(_DWORD *)(v3 + 76);
    WebKit::AsyncPDFRenderer::serviceRequestQueue((atomic_uchar *)v3);
    uint64_t result = WebKit::AsyncPDFRenderer::trackRenderCompletionForStaleTileMaintenance(v3, *v5, v18);
    goto LABEL_21;
  }
  if (v20)
  {
    int v22 = (void *)(v20 + 104 * *(unsigned int *)(v20 - 4));
    if (v22 == v19) {
      goto LABEL_35;
    }
  }
  else
  {
    if (!v19) {
      goto LABEL_35;
    }
    int v22 = 0;
  }
  if (v22 != v19) {
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::remove((uint64_t *)(v3 + 64), v19);
  }
LABEL_35:
  --*(_DWORD *)(v3 + 76);
  WebKit::AsyncPDFRenderer::serviceRequestQueue((atomic_uchar *)v3);
  uint64_t result = WebKit::AsyncPDFRenderer::trackRenderCompletionForStaleTileMaintenance(v3, *v5, v18);
  if (*(void *)(v2 + 24)) {
    char v28 = v17;
  }
  else {
    char v28 = 1;
  }
  if (v28) {
    goto LABEL_21;
  }
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v16 + 832))(v16);
  uint64_t v23 = (unsigned char *)result;
  if (!result) {
    goto LABEL_21;
  }
  uint64_t result = WebKit::AsyncPDFRenderer::renderInfoIsValidForTile((void *)v3, result, (void *)(v2 + 32), v2 + 48);
  if (!result) {
    goto LABEL_21;
  }
  if (*(unsigned char *)(v2 + 80))
  {
    uint64_t v29 = (uint64_t *)(v3 + 104);
    uint64_t result = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(v29, (WebKit::TileForGrid *)(v2 + 32));
    uint64_t v30 = *v29;
    if (*v29) {
      v30 += 104 * *(unsigned int *)(v30 - 4);
    }
    if (v30 == result) {
      goto LABEL_21;
    }
    char v31 = *(atomic_uchar *volatile **)(result + 16);
    if (v31) {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v31 + 1);
    }
    uint64_t v32 = (*((uint64_t (**)(atomic_uchar *volatile *))*v31 + 2))(v31);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 96))(v32, 1);
    if (*(unsigned char *)(v2 + 80))
    {
      *(_OWORD *)long long v90 = *(_OWORD *)(v2 + 64);
      *(float32x2_t *)long long v90 = vsub_f32(*(float32x2_t *)v90, *(float32x2_t *)(v2 + 48));
      WebCore::GraphicsContext::drawImageBuffer();
      LOBYTE(v18) = 1;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 104))(v32, 1);
      char v33 = 0;
      char v31 = (atomic_uchar *volatile *)*((void *)v31 + 1);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v31, (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
      if (!v33) {
        goto LABEL_49;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t result = MEMORY[0x19972E8D0](v31);
LABEL_49:
    uint64_t v34 = *((void *)v31 + 1);
    int v35 = 1;
    uint64_t v36 = v34 - 1;
    *((void *)v31 + 1) = v34 - 1;
    if (v34 != 1)
    {
      uint64_t v37 = 0;
      goto LABEL_97;
    }
    goto LABEL_106;
  }
  uint64_t v38 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = 0;
  *(void *)long long v90 = v38;
  long long v39 = *(_OWORD *)(v2 + 64);
  *(_OWORD *)&v90[8] = *(_OWORD *)(v2 + 48);
  long long v91 = v39;
  LOBYTE(v92) = *(unsigned char *)(v2 + 80);
  WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v93, (long long **)(v2 + 88));
  long long v96 = *(_OWORD *)(v2 + 104);
  int v97 = *(_DWORD *)(v2 + 120);
  uint64_t v42 = *(void *)(v3 + 104);
  uint64_t v40 = (uint64_t *)(v3 + 104);
  uint64_t v41 = v42;
  uint64_t v85 = v6;
  uint64_t v86 = (uint64_t *)v90;
  if (v42
    || (WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand(v40, 0), (uint64_t v41 = *v40) != 0))
  {
    int v43 = *(_DWORD *)(v41 - 8);
  }
  else
  {
    int v43 = 0;
  }
  unsigned int v44 = WebKit::TileForGrid::computeHash((WebKit::TileForGrid *)(v2 + 32));
  uint64_t v45 = 0;
  uint64_t v23 = &v90[8];
  for (int i = 1; ; ++i)
  {
    unsigned int v47 = v44 & v43;
    uint64_t v48 = v41 + 104 * (v44 & v43);
    uint64_t v49 = *(void *)v48;
    if (!*(void *)v48 && !*(void *)(v48 + 8))
    {
      if (v45)
      {
        *(void *)(v45 + 96) = 0;
        *(_OWORD *)(v45 + 64) = 0u;
        *(_OWORD *)(v45 + 80) = 0u;
        *(_OWORD *)(v45 + 32) = 0u;
        *(_OWORD *)(v45 + 48) = 0u;
        *(_OWORD *)uint64_t v45 = 0u;
        *(_OWORD *)(v45 + 16) = 0u;
        __asm { FMOV            V0.2S, #1.0 }
        *(void *)(v45 + 88) = _D0;
        *(_DWORD *)(v45 + 96) = 1065353216;
        --*(_DWORD *)(*v40 - 16);
        uint64_t v48 = v45;
      }
      WTF::HashMapTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>::translate<WebKit::TileForGrid const&,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>,WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>> WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::inlineAdd<WebKit::TileForGrid const&,WebKit::AsyncPDFRenderer::RenderedTile>(WebKit::TileForGrid const&,WebKit::AsyncPDFRenderer::RenderedTile &&)::{lambda(void)#1}>(v48, (_OWORD *)(v2 + 32), &v86);
      uint64_t v74 = *v40;
      if (*v40) {
        int v75 = *(_DWORD *)(v74 - 12) + 1;
      }
      else {
        int v75 = 1;
      }
      *(_DWORD *)(v74 - 12) = v75;
      uint64_t v76 = *v40;
      if (*v40) {
        int v77 = *(_DWORD *)(v76 - 12);
      }
      else {
        int v77 = 0;
      }
      uint64_t v78 = (*(_DWORD *)(v76 - 16) + v77);
      unint64_t v79 = *(unsigned int *)(v76 - 4);
      if (v79 > 0x400)
      {
        if (v79 > 2 * v78) {
          goto LABEL_90;
        }
      }
      else if (3 * v79 > 4 * v78)
      {
        goto LABEL_90;
      }
      WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand(v40, (_OWORD *)v48);
      goto LABEL_90;
    }
    if (v49 == *(void *)(v2 + 32)
      && *(_DWORD *)(v48 + 8) == *(_DWORD *)(v2 + 40)
      && *(_DWORD *)(v48 + 12) == *(_DWORD *)(v2 + 44))
    {
      break;
    }
    if (v49 == -1) {
      uint64_t v45 = v41 + 104 * v47;
    }
    unsigned int v44 = i + v47;
  }
  uint64_t v51 = v41 + 104 * v47;
  uint64_t v52 = *(void *)v90;
  *(void *)long long v90 = 0;
  uint64_t v53 = *(void *)(v51 + 16);
  *(void *)(v51 + 16) = v52;
  if (v53)
  {
    char v54 = 0;
    uint64_t v55 = *(void *)(v53 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v55, (unsigned __int8 *)&v54, 1u, memory_order_acquire, memory_order_acquire);
    if (v54)
    {
      MEMORY[0x19972E8D0](v55);
      uint64_t v23 = &v90[8];
    }
    uint64_t v56 = *(void *)(v55 + 8);
    int v57 = 1;
    uint64_t v58 = v56 - 1;
    *(void *)(v55 + 8) = v56 - 1;
    if (v56 == 1)
    {
      uint64_t v84 = *(void *)(v55 + 16);
      uint64_t v59 = *(void *)(v55 + 24);
      *(void *)(v55 + 24) = 0;
      BOOL v60 = v84 != 0;
    }
    else
    {
      uint64_t v59 = 0;
      BOOL v60 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v55, (unsigned __int8 *)&v57, 0, memory_order_release, memory_order_relaxed);
    if (v57 == 1)
    {
      if (!v58) {
        goto LABEL_72;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v55);
      uint64_t v23 = &v90[8];
      if (!v58)
      {
LABEL_72:
        if (v59)
        {
          (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
          uint64_t v23 = &v90[8];
        }
        if (!v60)
        {
          WTF::fastFree((WTF *)v55, &v90[8]);
          uint64_t v23 = &v90[8];
        }
      }
    }
  }
  uint64_t v61 = v41 + 104 * v47;
  long long v62 = *(_OWORD *)&v90[8];
  long long v63 = v91;
  uint64_t v66 = *(WTF **)(v61 + 64);
  uint64_t v65 = v61 + 64;
  uint64_t v64 = v66;
  *(unsigned char *)(v65 - 8) = v92;
  *(_OWORD *)(v65 - 24) = v63;
  *(_OWORD *)(v65 - 40) = v62;
  if (v66)
  {
    *(void *)uint64_t v65 = 0;
    *(_DWORD *)(v65 + 8) = 0;
    WTF::fastFree(v64, &v90[8]);
  }
  uint64_t v67 = v93;
  uint64_t v93 = 0;
  *(void *)uint64_t v65 = v67;
  LODWORD(v67) = v94;
  int v94 = 0;
  *(_DWORD *)(v65 + 8) = v67;
  LODWORD(v67) = v95;
  int v95 = 0;
  *(_DWORD *)(v65 + 12) = v67;
  uint64_t v68 = v41 + 104 * v47;
  long long v69 = v96;
  *(_DWORD *)(v68 + 96) = v97;
  *(_OWORD *)(v68 + 80) = v69;
LABEL_90:
  uint64_t v6 = v85;
  uint64_t result = (uint64_t)v93;
  if (v93)
  {
    uint64_t v93 = 0;
    int v94 = 0;
    uint64_t result = WTF::fastFree((WTF *)result, v23);
  }
  uint64_t v80 = *(void *)v90;
  *(void *)long long v90 = 0;
  if (!v80) {
    goto LABEL_21;
  }
  char v81 = 0;
  char v31 = *(atomic_uchar *volatile **)(v80 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v31, (unsigned __int8 *)&v81, 1u, memory_order_acquire, memory_order_acquire);
  if (v81) {
    uint64_t result = MEMORY[0x19972E8D0](v31);
  }
  uint64_t v82 = *((void *)v31 + 1);
  int v35 = 1;
  uint64_t v36 = v82 - 1;
  *((void *)v31 + 1) = v82 - 1;
  if (v82 != 1)
  {
    uint64_t v37 = 0;
    LOBYTE(v18) = 1;
    goto LABEL_97;
  }
LABEL_106:
  uint64_t v83 = *((void *)v31 + 2);
  uint64_t v37 = *((void *)v31 + 3);
  *((void *)v31 + 3) = 0;
  LOBYTE(v18) = v83 != 0;
LABEL_97:
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v31, (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
  if (v35 == 1)
  {
    if (!v36)
    {
LABEL_99:
      if (v37) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 8))(v37);
      }
      if ((v18 & 1) == 0) {
        uint64_t result = WTF::fastFree((WTF *)v31, v23);
      }
    }
  }
  else
  {
    uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v31);
    if (!v36) {
      goto LABEL_99;
    }
  }
LABEL_21:
  if (v6)
  {
    *(_OWORD *)long long v90 = COERCE_UNSIGNED_INT64((float)(1.0 / *(float *)(v2 + 120)));
    *(void *)&v90[16] = 0;
    long long v91 = *(_OWORD *)v90;
    uint64_t v92 = 0;
    uint64_t result = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v90, (const WebCore::FloatRect *)(v2 + 48));
    uint64_t v86 = (uint64_t *)__PAIR64__(v25, v24);
    int v87 = v26;
    int v88 = v27;
    if ((v17 & 1) == 0) {
      uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t **, uint64_t))(*(void *)v16 + 328))(v16, &v86, 1);
    }
  }
  if ((v17 & 1) == 0)
  {
    if (v16[2] == 1) {
      uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v16 + 16))(v16);
    }
    else {
      --v16[2];
    }
  }
  if (v89) {
    return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(atomic_uchar **)(v89 + 16), v23);
  }
  return result;
}

void sub_198E53EA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22)
{
  if (!a15) {
    goto LABEL_14;
  }
  char v24 = 0;
  uint64_t v25 = *(void *)(a15 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v24, 1u, memory_order_acquire, memory_order_acquire);
  if (v24) {
    MEMORY[0x19972E8D0](v25);
  }
  uint64_t v26 = *(void *)(v25 + 8);
  int v27 = 1;
  uint64_t v28 = v26 - 1;
  *(void *)(v25 + 8) = v26 - 1;
  if (v26 == 1)
  {
    uint64_t v31 = *(void *)(v25 + 16);
    uint64_t v29 = *(void *)(v25 + 24);
    *(void *)(v25 + 24) = 0;
    BOOL v30 = v31 != 0;
  }
  else
  {
    uint64_t v29 = 0;
    BOOL v30 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
  if (v27 == 1)
  {
    if (v28) {
      goto LABEL_14;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
    if (v28) {
      goto LABEL_14;
    }
  }
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  if (!v30) {
    WTF::fastFree((WTF *)v25, a2);
  }
LABEL_14:
  if (v22[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v22 + 16))(v22);
  }
  else {
    --v22[2];
  }
  if (a14) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(atomic_uchar **)(a14 + 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  unsigned int v1 = *((_DWORD *)result - 1);
  uint64_t v2 = &result[13 * v1];
  if (!*((_DWORD *)result - 3)) {
    return &result[13 * v1];
  }
  if (v1)
  {
    uint64_t v3 = 104 * v1;
    while (*result == -1 || !*result && !result[1])
    {
      result += 13;
      v3 -= 104;
      if (!v3) {
        return v2;
      }
    }
  }
  return result;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::PDFDiscretePresentationController,WebKit::PDFDiscretePresentationController>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)WebCore::TimerBase::TimerBase(a1) = &unk_1EE9BA5F0;
  int v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v8 = &unk_1EE9D96D0;
  v8[1] = a3;
  float v8[2] = a4;
  void v8[3] = a2;
  *((void *)a1 + 6) = v8;
  return a1;
}

void sub_198E54138(_Unwind_Exception *a1)
{
  WebCore::TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::PDFDiscretePresentationController::*&)(void),WebKit::PDFDiscretePresentationController*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::Vector<WebKit::PDFDiscretePresentationController::RowData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebKit::PDFDiscretePresentationController::RowData **)a1;
    uint64_t v5 = 80 * v3;
    do
    {
      WebKit::PDFDiscretePresentationController::RowData::~RowData(v4, a2);
      uint64_t v4 = (WebKit::PDFDiscretePresentationController::RowData *)(v6 + 80);
      v5 -= 80;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebKit::PDFDiscretePresentationController::RowData::~RowData(WebKit::PDFDiscretePresentationController::RowData *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 16))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 16))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 16))(v5);
    }
    else {
      --v5[2];
    }
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 16))(v6);
    }
    else {
      --v6[2];
    }
  }
  uint64_t v7 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 16))(v7);
    }
    else {
      --v7[2];
    }
  }
  int v8 = *(WTF **)this;
  if ((WebKit::PDFDiscretePresentationController::RowData *)((char *)this + 16) != *(WebKit::PDFDiscretePresentationController::RowData **)this)
  {
    if (v8)
    {
      *(void *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v8, a2);
    }
  }
}

WTF *WTF::Vector<WebKit::PDFDiscretePresentationController::RowData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, void *a2)
{
  if (*((_DWORD *)result + 2))
  {
    uint64_t v2 = result;
    uint64_t v3 = *((unsigned int *)result + 3);
    if (v3)
    {
      uint64_t v4 = *(WebKit::PDFDiscretePresentationController::RowData **)result;
      uint64_t v5 = 80 * v3;
      do
      {
        WebKit::PDFDiscretePresentationController::RowData::~RowData(v4, a2);
        uint64_t v4 = (WebKit::PDFDiscretePresentationController::RowData *)(v6 + 80);
        v5 -= 80;
      }
      while (v5);
      *((_DWORD *)v2 + 3) = 0;
    }
    uint64_t result = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 32 * v3;
    uint64_t v6 = (WTF *)((char *)v4 + 16);
    do
    {
      uint64_t v7 = (WTF *)*((void *)v6 - 2);
      if (v6 != v7 && v7 != 0)
      {
        *((void *)v6 - 2) = 0;
        *((_DWORD *)v6 - 2) = 0;
        WTF::fastFree(v7, a2);
      }
      uint64_t v6 = (WTF *)((char *)v6 + 32);
      v5 -= 32;
    }
    while (v5);
    uint64_t v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>(uint64_t result, unsigned char *a2, uint64_t a3, unint64_t a4)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  if (a3) {
    unint64_t v4 = a3 - 1;
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = v4 >> 31;
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198E54624);
  }
  unint64_t v6 = a4;
  int v8 = (void *)result;
  unint64_t v9 = a4;
  do
  {
    LODWORD(v5) = v5 + 1;
    BOOL v10 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v10);
  if (((v5 | v4) & 0x80000000) != 0) {
    goto LABEL_20;
  }
  uint64_t v11 = (v4 + v5);
  if (__OFADD__(v4, v5)) {
    goto LABEL_20;
  }
  if (!v11)
  {
    uint64_t v12 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_19;
  }
  if ((v11 & 0x80000000) != 0)
  {
LABEL_20:
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
    uint64_t v12 = v15[0];
    if (v15[0])
    {
      uint64_t v13 = (unsigned char *)(v15[0] + 20);
      *(_DWORD *)v15[0] = 2;
      *(_DWORD *)(v12 + 4) = v11;
      *(void *)(v12 + 8) = v12 + 20;
      *(_DWORD *)(v12 + 16) = 4;
      if (v4)
      {
        if (v4 == 1) {
          *uint64_t v13 = *a2;
        }
        else {
          uint64_t result = (uint64_t)memcpy((void *)(v12 + 20), a2, v4);
        }
      }
      uint64_t v14 = 0;
      do
      {
        *((unsigned char *)&v15[3] + v14--) = (v6 % 0xA) | 0x30;
        BOOL v10 = v6 > 9;
        v6 /= 0xAuLL;
      }
      while (v10);
      if (v14 + 26 <= 25) {
        uint64_t result = (uint64_t)memcpy(&v13[v4], (char *)&v15[3] + v14 + 1, -v14);
      }
    }
  }
LABEL_19:
  *int v8 = v12;
  return result;
}

unint64_t WTF::Vector<WebKit::PDFDocumentLayout::PageGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 36 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::PDFDocumentLayout::PageGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::PDFDocumentLayout::PageGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::PDFDocumentLayout::PageGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x71C71C8)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *(WTF **)result;
      uint64_t v4 = *(unsigned int *)(result + 12);
      int v5 = 36 * a2;
      uint64_t result = WTF::fastMalloc((WTF *)(36 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFFC) / 0x24;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = 36 * v4;
        unint64_t v8 = v3;
        do
        {
          long long v9 = *(_OWORD *)v8;
          long long v10 = *((_OWORD *)v8 + 1);
          *(_DWORD *)(result + 32) = *((_DWORD *)v8 + 8);
          *(_OWORD *)uint64_t result = v9;
          *(_OWORD *)(result + 16) = v10;
          result += 36;
          unint64_t v8 = (WTF *)((char *)v8 + 36);
          v7 -= 36;
        }
        while (v7);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t *WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  int v3 = a3;
  int v5 = result;
  *uint64_t result = (uint64_t)(result + 2);
  result[1] = 2;
  uint64_t v6 = 8 * a3;
  if (a3 < 3)
  {
    if (!a3) {
      return v5;
    }
    unsigned int v7 = 0;
    uint64_t v8 = (uint64_t)(result + 2);
    do
    {
LABEL_6:
      uint64_t v9 = *a2++;
      *(void *)(v8 + 8 * v7++) = v9;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v5 + 3) = v7;
    return v5;
  }
  if (!(a3 >> 29))
  {
    uint64_t v8 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v5 + 2) = v3;
    *int v5 = v8;
    unsigned int v7 = *((_DWORD *)v5 + 3);
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

void sub_198E54888(_Unwind_Exception *exception_object, void *a2)
{
  int v5 = *(WTF **)v2;
  if (v3 != *(void *)v2 && v5 != 0)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::PDFLayoutRow>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 32 * a1[3];
  uint64_t result = (void *)(v4 + 16);
  *(void *)uint64_t v4 = v4 + 16;
  *(void *)(v4 + 8) = 2;
  uint64_t v6 = *(const void **)v3;
  if (*(void *)v3 == v3 + 16)
  {
    uint64_t result = memcpy(result, v6, 8 * *(unsigned int *)(v3 + 12));
  }
  else
  {
    *(void *)unint64_t v3 = v3 + 16;
    *(void *)uint64_t v4 = v6;
    int v7 = *(_DWORD *)(v3 + 8);
    *(_DWORD *)(v3 + 8) = 2;
    *(_DWORD *)(v4 + 8) = v7;
  }
  int v8 = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v4 + 12) = v8;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::PDFLayoutRow,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * a2));
      v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        unint64_t v8 = 0;
        uint64_t v9 = 32 * v5;
        do
        {
          unint64_t v10 = &v7[v8 / 4];
          uint64_t v11 = (char *)v4 + v8;
          uint64_t v12 = &v7[v8 / 4 + 4];
          *(void *)unint64_t v10 = v12;
          *((void *)v10 + 1) = 2;
          uint64_t v13 = (uint64_t)v4 + v8 + 16;
          uint64_t v6 = *(void **)((char *)v4 + v8);
          if ((void *)v13 == v6)
          {
            memcpy(v12, v6, 8 * *((unsigned int *)v11 + 3));
          }
          else
          {
            *(void *)uint64_t v11 = v13;
            *(void *)&v7[v8 / 4] = v6;
            unsigned int v14 = *((_DWORD *)v11 + 2);
            *((_DWORD *)v11 + 2) = 2;
            uint64_t v10[2] = v14;
          }
          unsigned int v15 = *(_DWORD *)((char *)v4 + v8 + 12);
          *(_DWORD *)((char *)v4 + v8 + 12) = 0;
          _OWORD v10[3] = v15;
          uint64_t result = *(unsigned int **)((char *)v4 + v8);
          if ((unsigned int *)v13 != result && result)
          {
            unint64_t v16 = (char *)v4 + v8;
            *(void *)unint64_t v16 = 0;
            *((_DWORD *)v16 + 2) = 0;
            uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v8 += 32;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebGeolocationProvider::startUpdating(uint64_t this, WebKit::WebGeolocationManagerProxy *a2)
{
  unsigned int v2 = *(uint64_t (**)(void, void))(this + 24);
  if (v2) {
    return v2(*((void *)a2 + 1), *(void *)(this + 16));
  }
  return this;
}

uint64_t WebKit::WebGeolocationProvider::stopUpdating(uint64_t this, WebKit::WebGeolocationManagerProxy *a2)
{
  unsigned int v2 = *(uint64_t (**)(void, void))(this + 32);
  if (v2) {
    return v2(*((void *)a2 + 1), *(void *)(this + 16));
  }
  return this;
}

uint64_t WebKit::WebGeolocationProvider::setEnableHighAccuracy(uint64_t this, WebKit::WebGeolocationManagerProxy *a2, uint64_t a3)
{
  unint64_t v3 = *(uint64_t (**)(void, uint64_t, void))(this + 40);
  if (v3) {
    return v3(*((void *)a2 + 1), a3, *(void *)(this + 16));
  }
  return this;
}

void WebKit::WebLockRegistryProxy::~WebLockRegistryProxy(WebKit::WebLockRegistryProxy *this)
{
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*((void *)this + 2) + 152), 0xB5u);
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*((void *)this + 2) + 152), 0xB5u);
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);

  WTF::fastFree(this, v3);
}

void WebKit::WebLockRegistryProxy::requestLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v21 = a3;
  *((void *)&v21 + 1) = a4;
  unint64_t v7 = *(void **)(a1 + 16);
  if (a4 != v7[22])
  {
    unsigned int v15 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&, WebCore::WebLockIden"
                           "tifier, WebCore::ScriptExecutionContextIdentifier, String &&, WebCore::WebLockMode, BOOL, BOOL)";
      _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 60: Invalid message dispatched %{public}s", buf, 0xCu);
      unint64_t v7 = *(void **)(a1 + 16);
    }
    uint64_t v16 = v7[18];
    if (v16) {
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  if (*((void *)a5 + 2) != a4)
  {
    char v17 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&, WebCore::WebLockIden"
                           "tifier, WebCore::ScriptExecutionContextIdentifier, String &&, WebCore::WebLockMode, BOOL, BOOL)";
      _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 61: Invalid message dispatched %{public}s", buf, 0xCu);
      unint64_t v7 = *(void **)(a1 + 16);
    }
    uint64_t v16 = v7[18];
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x198E54F88);
    }
    goto LABEL_27;
  }
  if (*(void *)a6 && *(_DWORD *)(*(void *)a6 + 4) >= 0x401u)
  {
    uint64_t v18 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&, WebCore::WebLockIden"
                           "tifier, WebCore::ScriptExecutionContextIdentifier, String &&, WebCore::WebLockMode, BOOL, BOOL)";
      _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 62: Invalid message dispatched %{public}s", buf, 0xCu);
      unint64_t v7 = *(void **)(a1 + 16);
    }
    uint64_t v16 = v7[18];
    if (v16)
    {
LABEL_27:
      *(unsigned char *)(v16 + 98) = 1;
      return;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x198E54F48);
  }
  *(unsigned char *)(a1 + 24) = 1;
  if (v7[94])
  {
    long long v9 = a5[1];
    long long v26 = *a5;
    long long v27 = v9;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    unint64_t v10 = *(atomic_uint **)(a1 + 8);
    if (v10) {
      atomic_fetch_add(v10, 1u);
    }
    *(_OWORD *)long long buf = v21;
    *(_OWORD *)&v25[8] = *a5;
    *(void *)&v25[24] = *((void *)a5 + 2);
    uint64_t v11 = WTF::fastMalloc((WTF *)0x50);
    *(void *)uint64_t v11 = &unk_1EE9D9E28;
    *(void *)(v11 + 16) = v10;
    *(_OWORD *)(v11 + 24) = *(_OWORD *)buf;
    *(_OWORD *)(v11 + 40) = *(_OWORD *)v25;
    *(_OWORD *)(v11 + 56) = *(_OWORD *)&v25[16];
    uint64_t v20 = v11;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    uint64_t v12 = *(atomic_uint **)(a1 + 8);
    if (v12) {
      atomic_fetch_add(v12, 1u);
    }
    long long v22 = v21;
    *(_OWORD *)&v23[8] = *a5;
    *(void *)&v23[24] = *((void *)a5 + 2);
    uint64_t v13 = WTF::fastMalloc((WTF *)0x50);
    *(void *)uint64_t v13 = &unk_1EE9D9E50;
    *(void *)(v13 + 16) = v12;
    long long v14 = *(_OWORD *)v23;
    *(_OWORD *)(v13 + 24) = v22;
    *(_OWORD *)(v13 + 40) = v14;
    *(_OWORD *)(v13 + 56) = *(_OWORD *)&v23[16];
    uint64_t v19 = v13;
    WebCore::LocalWebLockRegistry::requestLock();
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
  }
  else
  {
    *(void *)long long buf = &v21;
    *(void *)&buf[8] = a5;
    v25[0] = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::RemoteWebLockRegistry::DidCompleteLockRequest>((uint64_t)v7, (uint64_t)buf);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::RemoteWebLockRegistry::DidCompleteLockRequest>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1443;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v16 = v4;
  uint64_t v5 = *(uint64_t **)a2;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, *(uint64_t **)a2);
  uint64_t v17 = v5[1];
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v17);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v4, *(uint64_t **)(a2 + 8));
  char v6 = *(unsigned char *)(a2 + 16);
  unint64_t v7 = (unsigned char *)IPC::Encoder::grow(v4, 1uLL, 1);
  if (v8)
  {
    *unint64_t v7 = v6;
    LOBYTE(v14) = 0;
    char v15 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v16, 0, (uint64_t)&v14, 1);
    if (v15)
    {
      uint64_t v10 = v14;
      uint64_t v14 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    uint64_t result = (uint64_t)v16;
    uint64_t v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void WebKit::WebLockRegistryProxy::releaseLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  char v6 = *(void **)(a1 + 16);
  if (a4 != v6[22])
  {
    unint64_t v7 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v11 = "void WebKit::WebLockRegistryProxy::releaseLock(WebCore::ClientOrigin &&, WebCore::WebLockIdentifier, WebCore"
            "::ScriptExecutionContextIdentifier, String &&)";
      _os_log_fault_impl(&dword_1985F2000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 82: Invalid message dispatched %{public}s", buf, 0xCu);
      char v6 = *(void **)(a1 + 16);
    }
    uint64_t v8 = v6[18];
    if (v8) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  if (*(void *)(a5 + 16) != a4)
  {
    long long v9 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v11 = "void WebKit::WebLockRegistryProxy::releaseLock(WebCore::ClientOrigin &&, WebCore::WebLockIdentifier, WebCore"
            "::ScriptExecutionContextIdentifier, String &&)";
      _os_log_fault_impl(&dword_1985F2000, v9, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 83: Invalid message dispatched %{public}s", buf, 0xCu);
      char v6 = *(void **)(a1 + 16);
    }
    uint64_t v8 = v6[18];
    if (v8)
    {
LABEL_13:
      *(unsigned char *)(v8 + 98) = 1;
      return;
    }
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x198E552DCLL);
  }
  if (v6[94]) {
    WebCore::LocalWebLockRegistry::releaseLock();
  }
}

uint64_t WebKit::WebLockRegistryProxy::abortLockRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v9 = *(void **)(a1 + 16);
  if (a4 != v9[22])
  {
    uint64_t v13 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v18 = "void WebKit::WebLockRegistryProxy::abortLockRequest(WebCore::ClientOrigin &&, WebCore::WebLockIdentifier, We"
            "bCore::ScriptExecutionContextIdentifier, String &&, CompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v13, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 90: Invalid message dispatched %{public}s", buf, 0xCu);
      long long v9 = *(void **)(a1 + 16);
    }
    uint64_t v14 = v9[18];
    if (v14) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  if (*(void *)(a5 + 16) != a4)
  {
    char v15 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v18 = "void WebKit::WebLockRegistryProxy::abortLockRequest(WebCore::ClientOrigin &&, WebCore::WebLockIdentifier, We"
            "bCore::ScriptExecutionContextIdentifier, String &&, CompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 91: Invalid message dispatched %{public}s", buf, 0xCu);
      long long v9 = *(void **)(a1 + 16);
    }
    uint64_t v14 = v9[18];
    if (v14)
    {
LABEL_15:
      *(unsigned char *)(v14 + 98) = 1;
      uint64_t v16 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v16 + 16))(v16, 0);
      return (*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x198E55538);
  }
  if (v9[94]) {
    return WebCore::LocalWebLockRegistry::abortLockRequest();
  }
  uint64_t v11 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v11 + 16))(v11, 0);
  uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);

  return v12(v11);
}

uint64_t WebKit::WebLockRegistryProxy::snapshot(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 752);
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 424);
    uint64_t v7 = *(void *)(v4 + 24);
    return MEMORY[0x1F416FB10](v6, v7, a2, a3);
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v8 + 16))(v8, &v12);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v9);
    return WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v10);
  }
}

void WebKit::WebLockRegistryProxy::clientIsGoingAway(WebKit *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)*((void *)a1 + 2);
  if (*(void *)(a3 + 16) == v4[22])
  {
    *(void *)long long buf = *(void *)(v4[94] + 24);
    uint64_t v5 = WebKit::allDataStores(a1);
    if (WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v5, buf))
    {
      WebCore::LocalWebLockRegistry::clientIsGoingAway();
    }
  }
  else
  {
    uint64_t v6 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebLockRegistryProxy::clientIsGoingAway(WebCore::ClientOrigin &&, WebCore::Scrip"
                           "tExecutionContextIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 114: Invalid message dispatched %{public}s", buf, 0xCu);
      uint64_t v4 = (void *)*((void *)a1 + 2);
    }
    uint64_t v7 = v4[18];
    if (v7) {
      *(unsigned char *)(v7 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
}

uint64_t WebKit::WebLockRegistryProxy::processDidExit(uint64_t this)
{
  if (*(unsigned char *)(this + 24))
  {
    uint64_t v1 = this;
    uint64_t v5 = *(void *)(*(void *)(*(void *)(this + 16) + 752) + 24);
    unsigned int v2 = WebKit::allDataStores((WebKit *)this);
    this = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v2, &v5);
    if (this)
    {
      uint64_t v3 = *(void *)(this + 424);
      uint64_t v4 = *(void *)(*(void *)(v1 + 16) + 176);
      return MEMORY[0x1F416FB08](v3, v4);
    }
  }
  return this;
}

void WebKit::WebNavigationState::createLoadRequestNavigation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = API::Object::newObject(0xDB0uLL, 76);
  uint64_t v11 = API::Navigation::Navigation(v10, a3, a4, a5);
  *a1 = v11;
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v14 = v11;
  uint64_t v15 = v12;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,API::Navigation*>((uint64_t)v13, (uint64_t *)(a2 + 8), &v15, &v14);
}

void WebKit::WebNavigationState::createBackForwardNavigation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, char a6)
{
  uint64_t v12 = API::Object::newObject(0xDB0uLL, 76);
  uint64_t v13 = API::Navigation::Navigation(v12, a3, a4, a5, a6);
  *a1 = v13;
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v16 = v13;
  uint64_t v17 = v14;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,API::Navigation*>((uint64_t)v15, (uint64_t *)(a2 + 8), &v17, &v16);
}

void WebKit::WebNavigationState::createReloadNavigation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = API::Object::newObject(0xDB0uLL, 76);
  uint64_t v9 = API::Navigation::Navigation(v8, a3, a4);
  *a1 = v9;
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v12 = v9;
  uint64_t v13 = v10;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,API::Navigation*>((uint64_t)v11, (uint64_t *)(a2 + 8), &v13, &v12);
}

void WebKit::WebNavigationState::didDestroyNavigation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v5, a3);
  if (v5) {
    uint64_t v7 = (void *)(v5 + 16 * *(unsigned int *)(v5 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != v6 && *(void *)(v6[1] + 24) == a2)
  {
    if (v5)
    {
      uint64_t v8 = (void *)(v5 + 16 * *(unsigned int *)(v5 - 4));
      if (v8 == v6) {
        return;
      }
    }
    else
    {
      if (!v6) {
        return;
      }
      uint64_t v8 = 0;
    }
    if (v8 != v6)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(v4, v6);
    }
  }
}

void WebKit::WebNavigationState::clearNavigationsFromProcess(uint64_t a1, void *a2)
{
  unsigned int v2 = a2;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3)
  {
    uint64_t v7 = 0;
    uint64_t v5 = 0;
LABEL_10:
    uint64_t v6 = (void *)(v3 + 16 * v5);
    goto LABEL_11;
  }
  uint64_t v5 = *(unsigned int *)(v3 - 4);
  uint64_t v6 = (void *)(v3 + 16 * v5);
  if (!*(_DWORD *)(v3 - 12))
  {
    uint64_t v7 = (void *)(v3 + 16 * v5);
    goto LABEL_10;
  }
  uint64_t v7 = *(void **)(a1 + 8);
  if (v5)
  {
    uint64_t v8 = 16 * v5;
    uint64_t v7 = *(void **)(a1 + 8);
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      v7 += 2;
      v8 -= 16;
      if (!v8)
      {
        uint64_t v7 = v6;
        break;
      }
    }
  }
LABEL_11:
  if (v3) {
    uint64_t v9 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != v7)
  {
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    do
    {
      uint64_t v12 = v7[1];
      if (*(void **)(v12 + 24) == v2)
      {
        uint64_t v13 = *(void *)(v12 + 16);
        uint64_t v22 = v13;
        if (v11 == v24)
        {
          uint64_t v14 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, v11 + 1, (unint64_t)&v22);
          int v15 = HIDWORD(v24);
          uint64_t v10 = v23;
          *((void *)v23 + HIDWORD(v24)) = *v14;
        }
        else
        {
          *((void *)v10 + v11) = v13;
          int v15 = HIDWORD(v24);
        }
        unsigned int v11 = v15 + 1;
        HIDWORD(v24) = v11;
      }
      uint64_t v16 = v7 + 2;
      uint64_t v7 = v6;
      if (v16 != v6)
      {
        uint64_t v7 = v16;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          if (v7 == v6)
          {
            uint64_t v7 = v6;
            break;
          }
        }
      }
    }
    while (v7 != v9);
    if (v11)
    {
      uint64_t v17 = 8 * v11;
      uint64_t v18 = (uint64_t *)v10;
      do
      {
        uint64_t v19 = *v4;
        uint64_t v20 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*v4, *v18);
        a2 = v20;
        if (v19)
        {
          long long v21 = (void *)(v19 + 16 * *(unsigned int *)(v19 - 4));
          if (v21 != v20) {
            goto LABEL_34;
          }
        }
        else if (v20)
        {
          long long v21 = 0;
LABEL_34:
          if (v21 != v20) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(v4, v20);
          }
        }
        ++v18;
        v17 -= 8;
      }
      while (v17);
    }
    if (v10)
    {
      uint64_t v23 = 0;
      LODWORD(v24) = 0;
      WTF::fastFree(v10, a2);
    }
  }
}

void WebKit::WebOpenPanelResultListenerProxy::~WebOpenPanelResultListenerProxy(WebKit::WebOpenPanelResultListenerProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9D9768;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

{
  uint64_t vars8;

  WebKit::WebOpenPanelResultListenerProxy::~WebOpenPanelResultListenerProxy(this, a2);

  JUMPOUT(0x199740C10);
}

WTF *WebKit::WebPageProxy::didChooseFilesForOpenPanelWithDisplayStringAndIcon(WTF *result, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  if (!*((unsigned char *)result + 801))
  {
    uint64_t v4 = result;
    if (*((unsigned char *)result + 800))
    {
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)result + 6, (uint64_t)result + 16);
      uint64_t v8 = (atomic_uint *)*((void *)v4 + 3);
      if (v8) {
        atomic_fetch_add(v8, 1u);
      }
      uint64_t v32 = (WTF *)v8;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v33, a2);
      uint64_t v9 = *a3;
      if (*a3) {
        *(_DWORD *)v9 += 2;
      }
      uint64_t v34 = v9;
      if (a4) {
        CFRetain(*(CFTypeRef *)(a4 + 8));
      }
      uint64_t v35 = a4;
      uint64_t v10 = WebKit::WebsiteDataStore::networkProcess(*((WebKit::WebsiteDataStore **)v4 + 39));
      atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
      uint64_t v31 = *(void *)(*((void *)v4 + 32) + 176);
      unsigned int v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unsigned int v11 = 367;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 66) = (char *)v11 + 16;
      *((void *)v11 + 67) = 512;
      *((void *)v11 + 68) = 0;
      *((void *)v11 + 70) = 0;
      *((void *)v11 + 69) = 0;
      IPC::Encoder::encodeHeader(v11);
      uint64_t v36 = v11;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v31);
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v11, a2);
      uint64_t v12 = v32;
      uint64_t v32 = 0;
      uint64_t v37 = v12;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v38, (uint64_t)v33);
      uint64_t v13 = v34;
      if (v34) {
        *(_DWORD *)v34 += 2;
      }
      uint64_t v14 = v35;
      uint64_t v35 = 0;
      uint64_t v40 = v13;
      uint64_t v41 = v14;
      int v15 = (WTF *)WTF::fastMalloc((WTF *)0x30);
      *(void *)int v15 = &unk_1EE9DB380;
      uint64_t v16 = v37;
      uint64_t v37 = 0;
      *((void *)v15 + 1) = v16;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v15 + 16, (uint64_t)&v38);
      uint64_t v18 = v40;
      if (v40)
      {
        *(_DWORD *)v40 += 2;
        *((void *)v15 + 4) = v18;
        *((void *)v15 + 5) = v41;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v17);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      else
      {
        *((void *)v15 + 4) = 0;
        *((void *)v15 + 5) = v41;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v17);
      uint64_t v20 = (unsigned int *)v37;
      uint64_t v37 = 0;
      if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v19);
      }
      uint64_t v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      uint64_t v37 = v15;
      uint64_t v38 = v21;
      char v39 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v36, 0, (uint64_t)&v37, 1);
      if (v39)
      {
        uint64_t v23 = v37;
        uint64_t v37 = 0;
        if (v23) {
          (*(void (**)(WTF *))(*(void *)v23 + 8))(v23);
        }
      }
      uint64_t v24 = v36;
      uint64_t v36 = 0;
      if (v24)
      {
        IPC::Encoder::~Encoder(v24, v22);
        WTF::fastFree(v29, v30);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
      uint64_t v26 = v35;
      uint64_t v35 = 0;
      if (v26) {
        CFRelease(*(CFTypeRef *)(v26 + 8));
      }
      long long v27 = v34;
      uint64_t v34 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v25);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v25);
      uint64_t result = v32;
      uint64_t v32 = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)result);
          return (WTF *)WTF::fastFree(result, v28);
        }
      }
    }
  }
  return result;
}

WTF *WebKit::WebPageProxy::didChooseFilesForOpenPanel(WTF *result, uint64_t a2, uint64_t a3)
{
  if (!*((unsigned char *)result + 801))
  {
    uint64_t v3 = result;
    if (*((unsigned char *)result + 800))
    {
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)result + 6, (uint64_t)result + 16);
      uint64_t v6 = (atomic_uint *)*((void *)v3 + 3);
      if (v6) {
        atomic_fetch_add(v6, 1u);
      }
      uint64_t v26 = (WTF *)v6;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v27, a2);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v28, a3);
      uint64_t v7 = WebKit::WebsiteDataStore::networkProcess(*((WebKit::WebsiteDataStore **)v3 + 39));
      atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
      uint64_t v25 = *(void *)(*((void *)v3 + 32) + 176);
      uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v8 = 367;
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 66) = (char *)v8 + 16;
      *((void *)v8 + 67) = 512;
      *((void *)v8 + 68) = 0;
      *((void *)v8 + 70) = 0;
      *((void *)v8 + 69) = 0;
      IPC::Encoder::encodeHeader(v8);
      uint64_t v29 = v8;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, &v25);
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, a2);
      uint64_t v9 = v26;
      uint64_t v26 = 0;
      BOOL v30 = v9;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v31, (uint64_t)v27);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v33, (uint64_t)v28);
      uint64_t v10 = (WTF *)WTF::fastMalloc((WTF *)0x30);
      *(void *)uint64_t v10 = &unk_1EE9DB3A8;
      unsigned int v11 = v30;
      BOOL v30 = 0;
      *((void *)v10 + 1) = v11;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v10 + 16, (uint64_t)&v31);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v10 + 32, (uint64_t)v33);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v12);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v13);
      int v15 = (unsigned int *)v30;
      BOOL v30 = 0;
      if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v14);
      }
      uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      BOOL v30 = v10;
      uint64_t v31 = v16;
      char v32 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v29, 0, (uint64_t)&v30, 1);
      if (v32)
      {
        uint64_t v18 = v30;
        BOOL v30 = 0;
        if (v18) {
          (*(void (**)(WTF *))(*(void *)v18 + 8))(v18);
        }
      }
      uint64_t v19 = v29;
      uint64_t v29 = 0;
      if (v19)
      {
        IPC::Encoder::~Encoder(v19, v17);
        WTF::fastFree(v23, v24);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v20);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v21);
      uint64_t result = v26;
      uint64_t v26 = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)result);
          return (WTF *)WTF::fastFree(result, v22);
        }
      }
    }
  }
  return result;
}

void WebKit::WebPageProxy::didCancelForOpenPanel(WebKit::WebPageProxy *this, void *a2)
{
  if (!*((unsigned char *)this + 801))
  {
    if (*((unsigned char *)this + 800))
    {
      uint64_t v3 = *((void *)this + 69);
      *((void *)this + 69) = 0;
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 24);
        if (v4)
        {
          uint64_t v5 = *(atomic_uint **)(v4 + 8);
          if (v5)
          {
            atomic_fetch_add(v5 + 4, 1u);
            char v8 = 0;
            uint64_t v6 = WebKit::BrowsingContextGroup::remotePageInProcess(*((WebKit::BrowsingContextGroup **)this + 177), this, (const WebKit::WebProcessProxy *)v5);
            if (v6) {
              uint64_t v7 = (uint64_t *)(v6 + 16);
            }
            else {
              uint64_t v7 = (uint64_t *)(*((void *)this + 4) + 1928);
            }
            WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidCancelForOpenPanel>((uint64_t)v5, (uint64_t)&v8, *v7, 0);
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v5 + 4);
          }
        }
        WebKit::WebOpenPanelResultListenerProxy::invalidate((WebKit::WebOpenPanelResultListenerProxy *)v3, a2);
        CFRelease(*(CFTypeRef *)(v3 + 8));
      }
    }
  }
}

unsigned int *WebKit::WebOpenPanelResultListenerProxy::invalidate(WebKit::WebOpenPanelResultListenerProxy *this, void *a2)
{
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t result = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

void WebKit::WebPageDiagnosticLoggingClient::logDiagnosticMessage(WebKit::WebPageDiagnosticLoggingClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v4 = (void (*)(uint64_t, uint64_t, void, void))*((void *)this + 3);
  if (!v4) {
    return;
  }
  if (a2) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  else {
    uint64_t v7 = 0;
  }
  char v8 = *a3;
  if (*a3) {
    *(_DWORD *)v8 += 2;
  }
  uint64_t v17 = v8;
  API::String::create(&v17, &v18);
  uint64_t v10 = v17;
  unsigned int v11 = v18;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      if (v11) {
        goto LABEL_10;
      }
      goto LABEL_21;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (v11)
  {
LABEL_10:
    uint64_t v12 = *((void *)v11 + 1);
    goto LABEL_11;
  }
LABEL_21:
  uint64_t v12 = 0;
LABEL_11:
  uint64_t v13 = *a4;
  if (*a4) {
    *(_DWORD *)v13 += 2;
  }
  uint64_t v17 = v13;
  API::String::create(&v17, &v18);
  int v15 = v17;
  uint64_t v16 = v18;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v14);
      if (v16)
      {
LABEL_17:
        v4(v7, v12, *((void *)v16 + 1), *((void *)this + 2));
        CFRelease(*((CFTypeRef *)v16 + 1));
        if (!v11) {
          return;
        }
        goto LABEL_18;
      }
      goto LABEL_23;
    }
    *(_DWORD *)v15 -= 2;
  }
  if (v16) {
    goto LABEL_17;
  }
LABEL_23:
  v4(v7, v12, 0, *((void *)this + 2));
  if (v11) {
LABEL_18:
  }
    CFRelease(*((CFTypeRef *)v11 + 1));
}

void WebKit::WebPageDiagnosticLoggingClient::logDiagnosticMessageWithResult(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::StringImpl **a4, int a5)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, uint64_t, void))(a1 + 32);
  if (!v5) {
    return;
  }
  if (a2) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *a3;
  if (*a3) {
    *(_DWORD *)v10 += 2;
  }
  uint64_t v21 = v10;
  API::String::create(&v21, &v22);
  uint64_t v12 = v21;
  uint64_t v13 = v22;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v11);
      if (v13) {
        goto LABEL_10;
      }
      goto LABEL_24;
    }
    *(_DWORD *)v12 -= 2;
  }
  if (v13)
  {
LABEL_10:
    uint64_t v14 = *((void *)v13 + 1);
    goto LABEL_11;
  }
LABEL_24:
  uint64_t v14 = 0;
LABEL_11:
  int v15 = *a4;
  if (*a4) {
    *(_DWORD *)v15 += 2;
  }
  uint64_t v21 = v15;
  API::String::create(&v21, &v22);
  uint64_t v17 = v21;
  uint64_t v18 = v22;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (!v17)
  {
LABEL_16:
    if (v18) {
      goto LABEL_17;
    }
LABEL_26:
    if (a5 == 2) {
      uint64_t v20 = 2;
    }
    else {
      uint64_t v20 = a5 == 1;
    }
    v5(v9, v14, 0, v20, *(void *)(a1 + 16));
    if (v13) {
      goto LABEL_21;
    }
    return;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v17, v16);
  if (!v18) {
    goto LABEL_26;
  }
LABEL_17:
  if (a5 == 2) {
    uint64_t v19 = 2;
  }
  else {
    uint64_t v19 = a5 == 1;
  }
  v5(v9, v14, *((void *)v18 + 1), v19, *(void *)(a1 + 16));
  CFRelease(*((CFTypeRef *)v18 + 1));
  if (v13) {
LABEL_21:
  }
    CFRelease(*((CFTypeRef *)v13 + 1));
}

void WebKit::WebPageDiagnosticLoggingClient::logDiagnosticMessageWithValue(WebKit::WebPageDiagnosticLoggingClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, WTF::StringImpl **a4, WTF::StringImpl **a5)
{
  uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t, void, void))*((void *)this + 5);
  if (v5)
  {
    if (a2) {
      uint64_t v9 = *((void *)a2 + 1);
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *a3;
    if (*a3) {
      *(_DWORD *)v10 += 2;
    }
    uint64_t v24 = v10;
    API::String::create(&v24, &v25);
    uint64_t v12 = v24;
    uint64_t v13 = v25;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v11);
        if (v13) {
          goto LABEL_10;
        }
        goto LABEL_30;
      }
      *(_DWORD *)v12 -= 2;
    }
    if (v13)
    {
LABEL_10:
      uint64_t v14 = *((void *)v13 + 1);
      goto LABEL_11;
    }
LABEL_30:
    uint64_t v14 = 0;
LABEL_11:
    int v15 = *a4;
    if (*a4) {
      *(_DWORD *)v15 += 2;
    }
    uint64_t v24 = v15;
    API::String::create(&v24, &v25);
    uint64_t v17 = v24;
    uint64_t v18 = v25;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v16);
        if (v18) {
          goto LABEL_17;
        }
        goto LABEL_32;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (v18)
    {
LABEL_17:
      uint64_t v19 = *((void *)v18 + 1);
      goto LABEL_18;
    }
LABEL_32:
    uint64_t v19 = 0;
LABEL_18:
    uint64_t v20 = *a5;
    if (*a5) {
      *(_DWORD *)v20 += 2;
    }
    uint64_t v24 = v20;
    API::String::create(&v24, &v25);
    uint64_t v22 = v24;
    uint64_t v23 = v25;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v21);
        if (v23)
        {
LABEL_24:
          v5(v9, v14, v19, *((void *)v23 + 1), *((void *)this + 2));
          CFRelease(*((CFTypeRef *)v23 + 1));
          if (!v18) {
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_34:
        v5(v9, v14, v19, 0, *((void *)this + 2));
        if (!v18)
        {
LABEL_26:
          if (v13) {
            CFRelease(*((CFTypeRef *)v13 + 1));
          }
          return;
        }
LABEL_25:
        CFRelease(*((CFTypeRef *)v18 + 1));
        goto LABEL_26;
      }
      *(_DWORD *)v22 -= 2;
    }
    if (v23) {
      goto LABEL_24;
    }
    goto LABEL_34;
  }
}

void WebKit::WebPageDiagnosticLoggingClient::logDiagnosticMessageWithEnhancedPrivacy(WebKit::WebPageDiagnosticLoggingClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v4 = (void (*)(uint64_t, uint64_t, void, void))*((void *)this + 6);
  if (!v4) {
    return;
  }
  if (a2) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  else {
    uint64_t v7 = 0;
  }
  char v8 = *a3;
  if (*a3) {
    *(_DWORD *)v8 += 2;
  }
  uint64_t v17 = v8;
  API::String::create(&v17, &v18);
  uint64_t v10 = v17;
  unsigned int v11 = v18;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      if (v11) {
        goto LABEL_10;
      }
      goto LABEL_21;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (v11)
  {
LABEL_10:
    uint64_t v12 = *((void *)v11 + 1);
    goto LABEL_11;
  }
LABEL_21:
  uint64_t v12 = 0;
LABEL_11:
  uint64_t v13 = *a4;
  if (*a4) {
    *(_DWORD *)v13 += 2;
  }
  uint64_t v17 = v13;
  API::String::create(&v17, &v18);
  int v15 = v17;
  uint64_t v16 = v18;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v14);
      if (v16)
      {
LABEL_17:
        v4(v7, v12, *((void *)v16 + 1), *((void *)this + 2));
        CFRelease(*((CFTypeRef *)v16 + 1));
        if (!v11) {
          return;
        }
        goto LABEL_18;
      }
      goto LABEL_23;
    }
    *(_DWORD *)v15 -= 2;
  }
  if (v16) {
    goto LABEL_17;
  }
LABEL_23:
  v4(v7, v12, 0, *((void *)this + 2));
  if (v11) {
LABEL_18:
  }
    CFRelease(*((CFTypeRef *)v11 + 1));
}

void WebKit::WebPageGroup::~WebPageGroup(WebKit::WebPageGroup *this, void *a2)
{
  *(void *)this = &unk_1EE9D97E0;
  if (byte_1EB359C46)
  {
    uint64_t v3 = &qword_1EB359000;
    if (qword_1EB359C58)
    {
      uint64_t v4 = *((void *)this + 4);
      unsigned int v5 = *(_DWORD *)(qword_1EB359C58 - 8);
      unint64_t v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
      unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      uint64_t v9 = v5 & ((v8 >> 31) ^ v8);
      uint64_t v10 = *(void *)(qword_1EB359C58 + 16 * v9);
      if (v10 != v4)
      {
        int v11 = 1;
        while (v10)
        {
          uint64_t v9 = (v9 + v11) & v5;
          uint64_t v10 = *(void *)(qword_1EB359C58 + 16 * v9);
          ++v11;
          if (v10 == v4) {
            goto LABEL_9;
          }
        }
        uint64_t v9 = *(unsigned int *)(qword_1EB359C58 - 4);
      }
LABEL_9:
      if (v9 != *(_DWORD *)(qword_1EB359C58 - 4))
      {
        uint64_t v12 = (void *)(qword_1EB359C58 + 16 * v9);
        uint64_t v13 = (unsigned int *)v12[1];
        *uint64_t v12 = -1;
        v12[1] = 0;
        if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v13);
          WTF::fastFree((WTF *)v13, a2);
          uint64_t v3 = &qword_1EB359000;
        }
        uint64_t v14 = v3[395];
        ++*(_DWORD *)(v14 - 16);
        if (v14) {
          int v15 = *(_DWORD *)(v14 - 12) - 1;
        }
        else {
          int v15 = -1;
        }
        *(_DWORD *)(v14 - 12) = v15;
        uint64_t v16 = v3[395];
        if (v16)
        {
          unsigned int v17 = 6 * *(_DWORD *)(v16 - 12);
          unsigned int v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v18 >> 1);
          }
        }
      }
    }
  }
  else
  {
    qword_1EB359C58 = 0;
    byte_1EB359C46 = 1;
  }
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v20) {
    CFRelease(*(CFTypeRef *)(v20 + 8));
  }
  uint64_t v21 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t v22 = *((void *)this + 2);
  if (v22)
  {
    *(void *)(v22 + 8) = 0;
    uint64_t v23 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v23)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::WebPageGroup::~WebPageGroup(this, a2);

  JUMPOUT(0x199740C10);
}

void WebKit::WebPageInjectedBundleClient::didReceiveMessageFromInjectedBundle(WebKit::WebPageInjectedBundleClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, API::Object *a4)
{
  uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t, void))*((void *)this + 2);
  if (v4)
  {
    if (a2) {
      uint64_t v7 = *((void *)a2 + 1);
    }
    else {
      uint64_t v7 = 0;
    }
    unint64_t v8 = *a3;
    if (*a3) {
      *(_DWORD *)v8 += 2;
    }
    uint64_t v14 = v8;
    API::String::create(&v14, &v15);
    uint64_t v10 = v14;
    int v11 = v15;
    uint64_t v14 = 0;
    int v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v11)
        {
LABEL_10:
          uint64_t v12 = *((void *)v11 + 1);
          if (a4)
          {
LABEL_11:
            uint64_t v13 = *((void *)a4 + 1);
            goto LABEL_12;
          }
LABEL_17:
          uint64_t v13 = 0;
LABEL_12:
          v4(v7, v12, v13, *((void *)this + 1));
          if (v11) {
            CFRelease(*((CFTypeRef *)v11 + 1));
          }
          return;
        }
LABEL_16:
        uint64_t v12 = 0;
        if (a4) {
          goto LABEL_11;
        }
        goto LABEL_17;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v11) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebAutomationSessionProxy::TakeScreenshot>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebAutomationSessionProxy::TakeScreenshot &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebAutomationSessionProxy::TakeScreenshot&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebAutomationSessionProxy::TakeScreenshot>(*(void *)(v7 + 24), *(void *)a3, *(void *)(v7 + 16), *(unsigned char *)(a3 + 8));
        unint64_t v8 = *(const void **)(v6 + 8);
        CFRelease(v8);
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(void *)a3;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v12 = *(unsigned char *)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::send<Messages::WebAutomationSessionProxy::TakeScreenshot>(v9, v10, v11, v12);
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction>(*(void *)(v7 + 24), *(void *)a3, *(void *)(v7 + 16), *(unsigned char *)(a3 + 8));
        unint64_t v8 = *(const void **)(v6 + 8);
        CFRelease(v8);
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(void *)a3;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v12 = *(unsigned char *)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::send<Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction>(v9, v10, v11, v12);
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebInspector::ShowMainResourceForFrame>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebInspector::ShowMainResourceForFrame &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebInspector::ShowMainResourceForFrame&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowMainResourceForFrame>(*(void *)(v7 + 24), *(uint64_t ***)a3, *(void *)(v7 + 16), *(unsigned char *)(a3 + 8));
        unint64_t v8 = *(const void **)(v6 + 8);
        CFRelease(v8);
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(uint64_t ***)a3;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v12 = *(unsigned char *)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowMainResourceForFrame>(v9, v10, v11, v12);
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::LoadURLInFrame>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::LoadURLInFrame &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::LoadURLInFrame&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadURLInFrame>(*(void *)(v7 + 24), *(uint64_t ***)a3, *(void *)(v7 + 16), *(unsigned char *)(a3 + 8));
        unint64_t v8 = *(const void **)(v6 + 8);
        CFRelease(v8);
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(uint64_t ***)a3;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v12 = *(unsigned char *)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadURLInFrame>(v9, v10, v11, v12);
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::LoadDataInFrame>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::LoadDataInFrame &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::LoadDataInFrame&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadDataInFrame>(*(void *)(v7 + 24), *(void *)a3, *(void *)(v7 + 16), *(unsigned char *)(a3 + 8));
        unint64_t v8 = *(const void **)(v6 + 8);
        CFRelease(v8);
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(void *)a3;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v12 = *(unsigned char *)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadDataInFrame>(v9, v10, v11, v12);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(std::optional<std::optional<WTF::String> &&::ProcessQualified<std::optional<std::optional<WTF::String> &&::IntPoint> &&<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(IPC::AsyncReplyIDType)1>>>,Messages::WebAutomationSessionProxy::ComputeElementLayout &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)::SendOption>)::{lambda(std::optional<std::optional<WTF::String> &&::IntPoint> &&<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(IPC::AsyncReplyIDType)1>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  char v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>,Messages::WebAutomationSessionProxy::GetComputedRole &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  char v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>,Messages::WebAutomationSessionProxy::GetComputedLabel &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  char v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,Messages::WebAutomationSessionProxy::ResolveParentFrame &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  char v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>,Messages::WebAutomationSessionProxy::SelectOptionElement &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  char v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,Messages::WebAutomationSessionProxy::ResolveChildFrameWithName &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  char v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(std::optional<std::optional<WTF::String> &&::ProcessQualified<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits)1>>>,Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)> &&,WTF::OptionSet<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>::SendOption>)::{lambda(std::optional<WTF::String> &&::ProcessQualified<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits)1>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  char v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>,Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  char v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  char v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  char v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::NavigateServiceWorkerClient &&,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::NavigateServiceWorkerClient&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(*(void *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(uint64_t ***)a3;
  char v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>,Messages::WebPage::DrawToImage &&,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  char v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>,Messages::WebPage::DrawToPDFiOS &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  char v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(v10, v11, v12, v13, v14, 1);
}

void WebKit::WebPageProxy::sendToWebPage<IPC::ConnectionSendSyncResult<Messages::WebPageTesting::IsEditingCommandEnabled> WebKit::WebPageProxy::sendSyncToProcessContainingFrame<Messages::WebPageTesting::IsEditingCommandEnabled>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPageTesting::IsEditingCommandEnabled&&,IPC::Timeout const&)::{lambda(Messages::WebPageTesting::IsEditingCommandEnabled&)#1}>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v7 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v7)
    {
      uint64_t v8 = v7;
      CFRetain(*(CFTypeRef *)(v7 + 8));
      uint64_t v9 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v8 + 32) + 16));
      if (v9)
      {
        WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPageTesting::IsEditingCommandEnabled>(*(void *)(v9 + 24), *(uint64_t ***)a3, *(void *)(v9 + 16), 0, a4, **(double **)(a3 + 8));
        uint64_t v10 = *(const void **)(v8 + 8);
        CFRelease(v10);
        return;
      }
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
  }
  uint64_t v11 = *(void *)(a1 + 256);
  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 1928);
  uint64_t v13 = *(uint64_t ***)a3;
  double v14 = **(double **)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPageTesting::IsEditingCommandEnabled>(v11, v13, v12, 0, a4, v14);
}

void WebKit::WebPageProxy::sendToWebPage<IPC::ConnectionSendSyncResult<Messages::WebPage::ComputePagesForPrintingiOS> WebKit::WebPageProxy::sendSyncToProcessContainingFrame<Messages::WebPage::ComputePagesForPrintingiOS>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::ComputePagesForPrintingiOS&&,IPC::Timeout const&)::{lambda(Messages::WebPage::ComputePagesForPrintingiOS&)#1}>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v7 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v7)
    {
      uint64_t v8 = v7;
      CFRetain(*(CFTypeRef *)(v7 + 8));
      uint64_t v9 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v8 + 32) + 16));
      if (v9)
      {
        WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::ComputePagesForPrintingiOS>(*(void *)(v9 + 24), *(void *)a3, *(void *)(v9 + 16), 0, a4, **(double **)(a3 + 8));
        uint64_t v10 = *(const void **)(v8 + 8);
        CFRelease(v10);
        return;
      }
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
  }
  uint64_t v11 = *(void *)(a1 + 256);
  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 1928);
  uint64_t v13 = *(void *)a3;
  double v14 = **(double **)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::ComputePagesForPrintingiOS>(v11, v13, v12, 0, a4, v14);
}

void WebKit::WebPageProxyFrameLoadStateObserver::~WebPageProxyFrameLoadStateObserver(WebKit::WebPageProxyFrameLoadStateObserver *this, void *a2)
{
  WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)this + 32, a2);
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, (WTF::StringImpl *)v3);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebPageProxyFrameLoadStateObserver::~WebPageProxyFrameLoadStateObserver(this, a2);

  WTF::fastFree(v2, v3);
}

void WebKit::WebPageProxy::forMostVisibleWebPageIfAny(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v11 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9D9E78;
  v6[1] = &v11;
  uint64_t v10 = v6;
  WebKit::WebProcessProxy::forWebPagesWithOrigin(a1, a2, &v10);
  (*(void (**)(void *))(*v6 + 8))(v6);
  uint64_t v7 = v11;
  uint64_t v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v7);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  uint64_t v9 = v11;
  uint64_t v11 = 0;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

WebKit::ProcessThrottlerActivity *WebKit::WebPageProxy::ProcessActivityState::reset(WebKit::ProcessThrottlerActivity **this)
{
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](this + 1, 0);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](this + 2, 0);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](this + 3, 0);
  uint64_t v3 = this[4];
  this[4] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*((atomic_uchar **)v3 + 1), v2);
  }

  return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](this + 5, 0);
}

WebKit::ProcessThrottlerActivity *WebKit::WebPageProxy::ProcessActivityState::takeOpeningAppLinkActivity(WebKit::WebPageProxy::ProcessActivityState *this)
{
  uint64_t v1 = (WebKit::ProcessThrottlerActivity **)((char *)this + 40);
  uint64_t v2 = *(void *)(*(void *)this + 256) + 200;
  uint64_t v3 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
  WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v3, v2, "Opening AppLink", 16, 0, 0);

  return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v1, v3);
}

void WebKit::WebPageProxy::clearAudibleActivity(WebKit::WebPageProxy *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *(void *)(v3 + 760);
    uint64_t v5 = *(void *)(v3 + 1928);
    uint64_t v6 = *(void *)(*((void *)this + 32) + 136);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    }
    int v7 = 134218752;
    uint64_t v8 = this;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    __int16 v11 = 2048;
    uint64_t v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::clearAudibleActivity: UIProcess is releasing a foreground assertion because we are no longer playing audio", (uint8_t *)&v7, 0x26u);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 76, 0);
  WebKit::WebPageProxy::updateMediaCapability(this);
}

uint64_t WebKit::WebPageProxy::resetRecentCrashCount(uint64_t this)
{
  *(_DWORD *)(this + 1184) = 0;
  return this;
}

uint64_t WebKit::WebPageProxy::tryCloseTimedOut(WebKit::WebPageProxy *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *((void *)this + 4);
    uint64_t v5 = *(void *)(v4 + 760);
    uint64_t v6 = *(void *)(v4 + 1928);
    uint64_t v7 = *(void *)(*((void *)this + 32) + 136);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    }
    int v8 = 134218752;
    __int16 v9 = this;
    __int16 v10 = 2048;
    uint64_t v11 = v5;
    __int16 v12 = 2048;
    uint64_t v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryCloseTimedOut: Timed out waiting for the process to respond to the WebPage::TryClose IPC, closing the page now", (uint8_t *)&v8, 0x26u);
  }
  return WebKit::WebPageProxy::closePage((uint64_t)this);
}

uint64_t WebKit::WebPageProxy::updateReportedMediaCaptureState(uint64_t this)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(_DWORD **)(this + 32);
  int v2 = v1[206];
  int v3 = v2 & 0x7FDF800;
  int v4 = v1[426];
  if (v4 != (v2 & 0x7FDF800))
  {
    uint64_t v5 = this;
    int v6 = v4 & 0x7FDF800;
    if (v3) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v6 == 0;
    }
    if (v7)
    {
      if (v3) {
        BOOL v8 = v6 == 0;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8) {
        WTF::RunLoop::TimerBase::start();
      }
    }
    else
    {
      this = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v1 + 458));
      if (this) {
        return this;
      }
    }
    __int16 v9 = qword_1EB358820;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT);
    uint64_t v11 = *(void *)(v5 + 32);
    if (v10)
    {
      uint64_t v12 = *(void *)(v11 + 760);
      uint64_t v13 = *(void *)(v11 + 1928);
      uint64_t v14 = *(void *)(*(void *)(v5 + 256) + 136);
      if (v14) {
        LODWORD(v14) = *(_DWORD *)(v14 + 108);
      }
      int v15 = *(_DWORD *)(v11 + 1704);
      int v43 = 134219264;
      uint64_t v44 = v5;
      __int16 v45 = 2048;
      uint64_t v46 = v12;
      __int16 v47 = 2048;
      uint64_t v48 = v13;
      __int16 v49 = 1024;
      int v50 = v14;
      __int16 v51 = 1024;
      int v52 = v15;
      __int16 v53 = 1024;
      int v54 = v2 & 0x7FDF800;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateReportedMediaCaptureState: from %d to %d", (uint8_t *)&v43, 0x32u);
      uint64_t v11 = *(void *)(v5 + 32);
    }
    int v16 = *(_DWORD *)(v11 + 1704) ^ v2;
    int v17 = v16 & 0x15000;
    int v18 = v16 & 0xA800;
    if ((v16 & 0xA800) != 0)
    {
      uint64_t v19 = *(void *)(v5 + 40);
      if (v19) {
        uint64_t v20 = *(void *)(v19 + 8);
      }
      else {
        uint64_t v20 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v20 + 1592))(v20);
      (*(void (**)(uint64_t))(*(void *)v20 + 1504))(v20);
      (*(void (**)(uint64_t))(*(void *)v20 + 1600))(v20);
    }
    int v21 = v16 & 0xFC0000;
    int v22 = v16 & 0x6C0000;
    if (v17)
    {
      uint64_t v23 = *(void *)(v5 + 40);
      if (v23) {
        uint64_t v24 = *(void *)(v23 + 8);
      }
      else {
        uint64_t v24 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v24 + 1592))(v24);
      (*(void (**)(uint64_t))(*(void *)v24 + 1512))(v24);
      (*(void (**)(uint64_t))(*(void *)v24 + 1600))(v24);
    }
    int v25 = v16 & 0x7000000;
    if (v22)
    {
      uint64_t v26 = *(void *)(v5 + 40);
      if (v26) {
        uint64_t v27 = *(void *)(v26 + 8);
      }
      else {
        uint64_t v27 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v27 + 1592))(v27);
      (*(void (**)(uint64_t))(*(void *)v27 + 1520))(v27);
      (*(void (**)(uint64_t))(*(void *)v27 + 1600))(v27);
    }
    if (v21)
    {
      uint64_t v28 = *(void *)(v5 + 40);
      if (v28) {
        uint64_t v29 = *(void *)(v28 + 8);
      }
      else {
        uint64_t v29 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v29 + 1592))(v29);
      (*(void (**)(uint64_t))(*(void *)v29 + 1528))(v29);
      (*(void (**)(uint64_t))(*(void *)v29 + 1600))(v29);
    }
    if (v25)
    {
      uint64_t v30 = *(void *)(v5 + 40);
      if (v30) {
        uint64_t v31 = *(void *)(v30 + 8);
      }
      else {
        uint64_t v31 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v31 + 1592))(v31);
      (*(void (**)(uint64_t))(*(void *)v31 + 1536))(v31);
      (*(void (**)(uint64_t))(*(void *)v31 + 1600))(v31);
    }
    uint64_t v32 = *(void *)(v5 + 32);
    *(_DWORD *)(v32 + 1704) = v3;
    this = (*(uint64_t (**)(void, void))(**(void **)(v5 + 104) + 432))(*(void *)(v5 + 104), *(unsigned int *)(v32 + 824));
    if (v18)
    {
      uint64_t v33 = *(void *)(v5 + 40);
      if (v33) {
        uint64_t v34 = *(void *)(v33 + 8);
      }
      else {
        uint64_t v34 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v34 + 1592))(v34);
      (*(void (**)(uint64_t))(*(void *)v34 + 1544))(v34);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 1600))(v34);
    }
    if (v17)
    {
      uint64_t v35 = *(void *)(v5 + 40);
      if (v35) {
        uint64_t v36 = *(void *)(v35 + 8);
      }
      else {
        uint64_t v36 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v36 + 1592))(v36);
      (*(void (**)(uint64_t))(*(void *)v36 + 1552))(v36);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 1600))(v36);
    }
    if (v22)
    {
      uint64_t v37 = *(void *)(v5 + 40);
      if (v37) {
        uint64_t v38 = *(void *)(v37 + 8);
      }
      else {
        uint64_t v38 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v38 + 1592))(v38);
      (*(void (**)(uint64_t))(*(void *)v38 + 1560))(v38);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 1600))(v38);
    }
    if (v21)
    {
      uint64_t v39 = *(void *)(v5 + 40);
      if (v39) {
        uint64_t v40 = *(void *)(v39 + 8);
      }
      else {
        uint64_t v40 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v40 + 1592))(v40);
      (*(void (**)(uint64_t))(*(void *)v40 + 1568))(v40);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 1600))(v40);
    }
    if (v25)
    {
      uint64_t v41 = *(void *)(v5 + 40);
      if (v41) {
        uint64_t v42 = *(void *)(v41 + 8);
      }
      else {
        uint64_t v42 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v42 + 1592))(v42);
      (*(void (**)(uint64_t))(*(void *)v42 + 1576))(v42);
      return (*(uint64_t (**)(uint64_t))(*(void *)v42 + 1600))(v42);
    }
  }
  return this;
}

WTF *WebKit::WebPageProxy::didEndNetworkRequestsForPageLoadTimingTimerFired(WebKit::WebPageProxy *this, WebKit::WebPageProxy *a2)
{
  uint64_t v3 = *((void *)this + 23);
  uint64_t v4 = WebKit::NavigationState::fromWebPage(this, a2);
  if (v4) {
    WebKit::NavigationState::didGeneratePageLoadTiming(v4, v3);
  }
  uint64_t result = (WTF *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (result)
  {
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void WebKit::WebPageProxy::~WebPageProxy(WebKit::WebPageProxy *this)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  int v2 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *(void *)(v3 + 760);
    uint64_t v5 = *(void *)(v3 + 1928);
    uint64_t v6 = *(void *)(*((void *)this + 32) + 136);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = this;
    __int16 v132 = 2048;
    uint64_t v133 = v4;
    __int16 v134 = 2048;
    uint64_t v135 = v5;
    __int16 v136 = 1024;
    int v137 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::destructor:", buf, 0x26u);
  }
  *(void *)long long buf = 0;
  WebKit::WebPageProxy::setPageLoadStateObserver((uint64_t)this, (unsigned int **)buf);
  if (*(void *)buf) {
    (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
  }
  if (!*((unsigned char *)this + 801)) {
    WebKit::WebPageProxy::close((unsigned int *)this);
  }
  --HIDWORD(WebKit::WebProcessPool::statistics(void)::statistics);
  if (*((unsigned char *)this + 1168)) {
    WebKit::TextChecker::closeSpellDocumentWithTag(*((WebKit::TextChecker **)this + 145));
  }
  uint64_t v7 = *((void *)this + 34);
  CFRetain(*(CFTypeRef *)(v7 + 8));
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>(v7 + 88, this);
  uint64_t v8 = *((unsigned int *)this + 263);
  if (v8)
  {
    __int16 v9 = (uint64_t *)*((void *)this + 130);
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9;
      *v9++ = 0;
      (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      v10 -= 8;
    }
    while (v10);
  }
  uint64_t v12 = *(void *)(*((void *)this + 39) + 400);
  if (v12)
  {
    atomic_fetch_add((atomic_uint *volatile)(v12 + 16), 1u);
    uint64_t v129 = *(void *)(*((void *)this + 39) + 24);
    uint64_t v13 = (uint64_t *)(*((void *)this + 4) + 760);
    uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v14 = 443;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 66) = (char *)v14 + 16;
    *((void *)v14 + 67) = 512;
    *((void *)v14 + 68) = 0;
    *((void *)v14 + 70) = 0;
    *((void *)v14 + 69) = 0;
    IPC::Encoder::encodeHeader(v14);
    v130 = v14;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, &v129);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, v13);
    buf[0] = 0;
    BYTE2(v133) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v130, 0, (uint64_t)buf, 1);
    if (BYTE2(v133))
    {
      uint64_t v16 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    int v17 = v130;
    v130 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v127, v128);
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
  }
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  uint64_t v18 = *((void *)this + 190);
  *((void *)this + 190) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  *((void *)this + 185) = &unk_1EE9B3390;
  uint64_t v19 = *((void *)this + 188);
  *((void *)this + 188) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPageProxy *)((char *)this + 1480));
  uint64_t v20 = *((void *)this + 183);
  *((void *)this + 183) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  int v21 = (void *)*((void *)this + 181);
  *((void *)this + 181) = 0;
  if (v21) {
    std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100]((uint64_t)this + 1448, (uint64_t)v21);
  }
  int v22 = (unsigned int **)*((void *)this + 179);
  if (v22) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v22, v21);
  }
  std::unique_ptr<WebKit::WebsitePoliciesData>::reset[abi:sn180100]((WebKit::WebsitePoliciesData **)this + 178, 0);
  uint64_t v24 = (WebKit::BrowsingContextGroup *)*((void *)this + 177);
  *((void *)this + 177) = 0;
  if (v24) {
    WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v24, v23);
  }
  uint64_t v25 = *((void *)this + 176);
  *((void *)this + 176) = 0;
  if (v25) {
    CFRelease(*(CFTypeRef *)(v25 + 8));
  }
  std::unique_ptr<WebKit::NetworkIssueReporter>::reset[abi:sn180100]((WebKit::NetworkIssueReporter **)this + 175, 0);
  uint64_t v27 = (const void *)*((void *)this + 173);
  *((void *)this + 173) = 0;
  if (v27) {
    CFRelease(v27);
  }
  uint64_t v28 = (WebKit::LinkDecorationFilteringDataObserver *)*((void *)this + 171);
  *((void *)this + 171) = 0;
  if (v28) {
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v28, v26);
  }
  std::unique_ptr<WebKit::WebScreenOrientationManagerProxy>::reset[abi:sn180100]((WebKit::WebScreenOrientationManagerProxy **)this + 165, 0);
  uint64_t v30 = *((void *)this + 164);
  *((void *)this + 164) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 324, v29);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 1280, v31);
  uint64_t v33 = (WTF::StringImpl *)*((void *)this + 159);
  *((void *)this + 159) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v32);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  std::unique_ptr<WebKit::SpeechRecognitionPermissionManager>::reset[abi:sn180100]((WebKit::SpeechRecognitionPermissionManager **)this + 157, 0);
  uint64_t v35 = (unsigned int *)*((void *)this + 156);
  *((void *)this + 156) = 0;
  if (v35 && atomic_fetch_add((atomic_uint *volatile)v35 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v35 + 2);
    (*(void (**)(unsigned int *))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = (unsigned int **)*((void *)this + 154);
  if (v36) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v36, v34);
  }
  uint64_t v37 = *((void *)this + 152);
  *((void *)this + 152) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t v38 = (unsigned int *)*((void *)this + 151);
  *((void *)this + 151) = 0;
  if (v38 && atomic_fetch_add((atomic_uint *volatile)v38, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v38);
    WTF::fastFree((WTF *)v38, v34);
  }
  uint64_t v39 = *((void *)this + 150);
  *((void *)this + 150) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = *((void *)this + 149);
  *((void *)this + 149) = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v41 = (WTF::StringImpl **)*((void *)this + 147);
  if (v41) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v41, (WTF::StringImpl *)v34);
  }
  uint64_t v42 = *((void *)this + 144);
  *((void *)this + 144) = 0;
  if (v42) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v42 + 8), v34);
  }
  int v43 = (uint64_t *)*((void *)this + 143);
  *((void *)this + 143) = 0;
  if (v43)
  {
    uint64_t v44 = v43[6];
    if (v44) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v44, (WTF::StringImpl *)v34);
    }
    __int16 v45 = (unsigned int *)v43[4];
    v43[4] = 0;
    if (v45 && atomic_fetch_add((atomic_uint *volatile)v45, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v45);
      WTF::fastFree((WTF *)v45, v34);
    }
    Inspector::AgentRegistry::~AgentRegistry((Inspector::AgentRegistry *)(v43 + 2));
    __int16 v47 = (WTF *)v43[1];
    v43[1] = 0;
    if (v47) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v47, v46);
    }
    uint64_t v48 = *v43;
    *int v43 = 0;
    if (v48) {
      WTF::RefCounted<Inspector::FrontendRouter>::deref(v48, v46);
    }
    WTF::fastFree((WTF *)v43, v46);
  }
  uint64_t v49 = *((void *)this + 142);
  if (v49) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v49, (WTF::StringImpl *)v34);
  }
  uint64_t v50 = *((void *)this + 141);
  if (v50) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v50, (WTF::StringImpl *)v34);
  }
  __int16 v51 = (WTF::StringImpl **)*((void *)this + 139);
  if (v51) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v51, (WTF::StringImpl *)v34);
  }
  uint64_t v52 = *((void *)this + 137);
  *((void *)this + 137) = 0;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 1040, v34);
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 1000, v53);
  std::unique_ptr<WebKit::RemoteLayerTreeScrollingPerformanceData>::reset[abi:sn180100]((WebKit::RemoteLayerTreeScrollingPerformanceData **)this + 123, 0);
  std::unique_ptr<WebCore::RunLoopObserver>::reset[abi:sn180100]((WebCore::RunLoopObserver **)this + 122, 0);
  uint64_t v55 = (WTF::StringImpl **)*((void *)this + 121);
  if (v55) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v55, v54);
  }
  uint64_t v56 = (_DWORD *)*((void *)this + 111);
  *((void *)this + 111) = 0;
  if (v56) {
    WTF::RefCounted<WebCore::ValidationBubble>::deref(v56);
  }
  int v57 = (_DWORD *)*((void *)this + 110);
  *((void *)this + 110) = 0;
  if (v57)
  {
    if (v57[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v57 + 8))(v57);
    }
    else {
      --v57[2];
    }
  }
  WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 840, v54);
  std::unique_ptr<WebKit::WebWheelEventCoalescer>::reset[abi:sn180100]((WTF ***)this + 102, 0);
  uint64_t v59 = (WTF::StringImpl *)*((void *)this + 85);
  *((void *)this + 85) = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2) {
      WTF::StringImpl::destroy(v59, v58);
    }
    else {
      *(_DWORD *)v59 -= 2;
    }
  }
  uint64_t v60 = *((void *)this + 83);
  *((void *)this + 83) = 0;
  if (v60) {
    CFRelease(*(CFTypeRef *)(v60 + 8));
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 79, 0);
  uint64_t v62 = *((void *)this + 78);
  *((void *)this + 78) = 0;
  if (v62) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v62 + 8), v61);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 77, 0);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 76, 0);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 75, 0);
  std::unique_ptr<WebKit::MediaKeySystemPermissionRequestManagerProxy>::reset[abi:sn180100]((WebKit::MediaKeySystemPermissionRequestManagerProxy **)this + 72, 0);
  uint64_t v64 = *((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
  }
  uint64_t v65 = *((void *)this + 69);
  *((void *)this + 69) = 0;
  if (v65) {
    CFRelease(*(CFTypeRef *)(v65 + 8));
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 536, v63);
  uint64_t v67 = (_DWORD *)*((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v67)
  {
    if (v67[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v67 + 8))(v67);
    }
    else {
      --v67[2];
    }
  }
  uint64_t v68 = (WTF::StringImpl **)*((void *)this + 65);
  if (v68) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v68, v66);
  }
  long long v69 = (unsigned int **)*((void *)this + 63);
  if (v69) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v69, v66);
  }
  BOOL v70 = (const void *)*((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v70) {
    CFRelease(v70);
  }
  uint64_t v71 = *((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v71) {
    (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
  }
  std::unique_ptr<WebKit::DigitalCredentialsCoordinatorProxy>::reset[abi:sn180100]((WebKit::DigitalCredentialsCoordinatorProxy **)this + 60, 0);
  uint64_t v73 = (const void *)*((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v73) {
    CFRelease(v73);
  }
  uint64_t v74 = (WTF *)*((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v74) {
    std::default_delete<WebKit::ModelElementController>::operator()[abi:sn180100](v74, v72);
  }
  std::unique_ptr<WebKit::SystemPreviewController>::reset[abi:sn180100]((WTF **)this + 57, 0);
  uint64_t v76 = (_DWORD *)*((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v76)
  {
    if (v76[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v76 + 8))(v76);
    }
    else {
      --v76[4];
    }
  }
  int v77 = (_DWORD *)*((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v77)
  {
    if (v77[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v77 + 8))(v77);
    }
    else {
      --v77[4];
    }
  }
  uint64_t v78 = *((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v78) {
    (*(void (**)(uint64_t))(*(void *)v78 + 16))(v78);
  }
  uint64_t v79 = *((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v79) {
    (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
  }
  uint64_t v80 = *((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v80) {
    CFRelease(*(CFTypeRef *)(v80 + 8));
  }
  char v81 = (WTF::StringImpl *)*((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2) {
      WTF::StringImpl::destroy(v81, v75);
    }
    else {
      *(_DWORD *)v81 -= 2;
    }
  }
  uint64_t v82 = (WTF::StringImpl *)*((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2) {
      WTF::StringImpl::destroy(v82, v75);
    }
    else {
      *(_DWORD *)v82 -= 2;
    }
  }
  uint64_t v83 = (WTF::StringImpl *)*((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2) {
      WTF::StringImpl::destroy(v83, v75);
    }
    else {
      *(_DWORD *)v83 -= 2;
    }
  }
  uint64_t v84 = (WTF::StringImpl *)*((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2) {
      WTF::StringImpl::destroy(v84, v75);
    }
    else {
      *(_DWORD *)v84 -= 2;
    }
  }
  uint64_t v85 = (WTF::StringImpl *)*((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2) {
      WTF::StringImpl::destroy(v85, v75);
    }
    else {
      *(_DWORD *)v85 -= 2;
    }
  }
  uint64_t v86 = (WTF::StringImpl *)*((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2) {
      WTF::StringImpl::destroy(v86, v75);
    }
    else {
      *(_DWORD *)v86 -= 2;
    }
  }
  uint64_t v87 = *((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v87) {
    CFRelease(*(CFTypeRef *)(v87 + 8));
  }
  uint64_t v88 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v88) {
    CFRelease(*(CFTypeRef *)(v88 + 8));
  }
  uint64_t v89 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v89) {
    CFRelease(*(CFTypeRef *)(v89 + 8));
  }
  uint64_t v90 = *((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v90) {
    CFRelease(*(CFTypeRef *)(v90 + 8));
  }
  uint64_t v91 = *((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v91) {
    CFRelease(*(CFTypeRef *)(v91 + 8));
  }
  uint64_t v92 = *((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v92) {
    CFRelease(*(CFTypeRef *)(v92 + 8));
  }
  uint64_t v93 = (unsigned int *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v93 && atomic_fetch_add((atomic_uint *volatile)v93, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v93);
    WTF::fastFree((WTF *)v93, v75);
  }
  uint64_t v94 = *((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v94) {
    CFRelease(*(CFTypeRef *)(v94 + 8));
  }
  uint64_t v95 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v95) {
    CFRelease(*(CFTypeRef *)(v95 + 8));
  }
  uint64_t v96 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v96) {
    CFRelease(*(CFTypeRef *)(v96 + 8));
  }
  uint64_t v97 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v97) {
    CFRelease(*(CFTypeRef *)(v97 + 8));
  }
  uint64_t v98 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v98) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v98 + 16));
  }
  uint64_t v99 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v99) {
    (*(void (**)(uint64_t))(*(void *)v99 + 8))(v99);
  }
  std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100]((WebKit::RemoteLayerTreeHost **)this + 30, 0);
  uint64_t v100 = *((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v100) {
    (*(void (**)(uint64_t))(*(void *)v100 + 8))(v100);
  }
  *((void *)this + 25) = &unk_1EE9B3390;
  uint64_t v101 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v101) {
    (*(void (**)(uint64_t))(*(void *)v101 + 8))(v101);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPageProxy *)((char *)this + 200));
  uint64_t v103 = *((void *)this + 24);
  if (v103) {
    WTF::fastFree((WTF *)(v103 - 16), v102);
  }
  uint64_t v104 = (WTF *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v104) {
    WTF::fastFree(v104, v102);
  }
  long long v105 = (WTF::StringImpl *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2) {
      WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v102);
    }
    else {
      *(_DWORD *)v105 -= 2;
    }
  }
  uint64_t v106 = (WTF *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v106)
  {
    uint64_t v107 = *((void *)v106 + 1);
    if (v107) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v107, v102);
    }
    if (*(void *)v106)
    {
      *(void *)(*(void *)v106 + 8) = 0;
      uint64_t v108 = *(unsigned int **)v106;
      *(void *)uint64_t v106 = 0;
      if (v108 && atomic_fetch_add((atomic_uint *volatile)v108, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v108);
        WTF::fastFree((WTF *)v108, v102);
      }
    }
    else
    {
      *(void *)uint64_t v106 = 0;
    }
    WTF::fastFree(v106, v102);
  }
  uint64_t v109 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v109) {
    (*(void (**)(uint64_t))(*(void *)v109 + 8))(v109);
  }
  uint64_t v110 = (WTF *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v110) {
    WTF::fastFree(v110, v102);
  }
  uint64_t v111 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v111) {
    (*(void (**)(uint64_t))(*(void *)v111 + 8))(v111);
  }
  uint64_t v112 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v112) {
    (*(void (**)(uint64_t))(*(void *)v112 + 8))(v112);
  }
  uint64_t v113 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v113) {
    (*(void (**)(uint64_t))(*(void *)v113 + 8))(v113);
  }
  uint64_t v114 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v114) {
    (*(void (**)(uint64_t))(*(void *)v114 + 8))(v114);
  }
  uint64_t v115 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v115) {
    (*(void (**)(uint64_t))(*(void *)v115 + 8))(v115);
  }
  uint64_t v116 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v116) {
    (*(void (**)(uint64_t))(*(void *)v116 + 8))(v116);
  }
  uint64_t v117 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v117) {
    (*(void (**)(uint64_t))(*(void *)v117 + 8))(v117);
  }
  uint64_t v118 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v118) {
    (*(void (**)(uint64_t))(*(void *)v118 + 8))(v118);
  }
  uint64_t v119 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v119) {
    (*(void (**)(uint64_t))(*(void *)v119 + 8))(v119);
  }
  uint64_t v120 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v120) {
    (*(void (**)(uint64_t))(*(void *)v120 + 8))(v120);
  }
  uint64_t v121 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v121) {
    (*(void (**)(uint64_t))(*(void *)v121 + 8))(v121);
  }
  uint64_t v122 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v122) {
    CFRelease(*(CFTypeRef *)(v122 + 8));
  }
  uint64_t v123 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v123 && atomic_fetch_add((atomic_uint *volatile)v123, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v123);
    WTF::fastFree((WTF *)v123, v102);
  }
  uint64_t v124 = (WebKit::WebPageProxy::Internals *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v124)
  {
    WebKit::WebPageProxy::Internals::~Internals(v124, (WTF::StringImpl *)v102);
    WTF::fastFree(v125, v126);
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v102);
}

{
  uint64_t vars8;

  WebKit::WebPageProxy::~WebPageProxy(this);

  JUMPOUT(0x199740C10);
}

unsigned int *WebKit::WebPageProxy::setPageLoadStateObserver(uint64_t a1, unsigned int **a2)
{
  uint64_t v4 = *(void **)(a1 + 152);
  if (v4) {
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(*(void *)(a1 + 32) + 976, v4);
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t result = *(unsigned int **)(a1 + 152);
  *(void *)(a1 + 152) = v5;
  if (result)
  {
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    uint64_t v5 = *(unsigned int **)(a1 + 152);
  }
  if (v5) {
    return WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(*(void *)(a1 + 32) + 976, v5, (uint64_t)v7);
  }
  return result;
}

unsigned int *WebKit::WebPageProxy::close(unsigned int *this)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 801)) {
    return this;
  }
  uint64_t v1 = (uint64_t)this;
  int v2 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t v5 = *(void *)(v4 + 760);
    uint64_t v6 = *(void *)(v4 + 1928);
    uint64_t v7 = *(void *)(*(void *)(v1 + 256) + 136);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = v1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v5;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v73 = v6;
    __int16 v74 = 1024;
    int v75 = v7;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::close:", buf, 0x26u);
  }
  *(unsigned char *)(v1 + 801) = 1;
  uint64_t v8 = *(void *)(v1 + 32);
  uint64_t v9 = *(void *)(v8 + 2000);
  if (v9)
  {
    *(void *)(v8 + 2000) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v9, v3);
  }
  *(void *)long long buf = 0;
  *(void *)&buf[8] = 0;
  WTF::URL::invalidate((WTF::URL *)&buf[8]);
  uint64_t v76 = 0;
  int v77 = 0;
  __int16 v78 = 3;
  CFTypeRef cf = 0;
  char v80 = 1;
  WebKit::WebPageProxy::reportPageLoadResult((WTF::MonotonicTime *)v1, (const WebCore::ResourceError *)buf);
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = v76;
  uint64_t v76 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = *(WTF::StringImpl **)&buf[8];
  *(void *)&buf[8] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v10);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v10);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  int v15 = *(_DWORD **)(v1 + 528);
  if (v15)
  {
    ++v15[2];
    (*(void (**)(_DWORD *))(*(void *)v15 + 32))(v15);
    if (v15[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
    }
    else {
      --v15[2];
    }
  }
  if (*(unsigned char *)(v1 + 898))
  {
    uint64_t v16 = *(CFTypeRef **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(v1 + 48) + 24))
                        + 320);
    if (v16)
    {
      CFRetain(v16[1]);
      WebKit::WebAutomationSession::willClosePage((WebKit::WebAutomationSession *)v16, (const WebKit::WebPageProxy *)v1);
      CFRelease(v16[1]);
    }
  }
  int v17 = *(CFTypeRef **)(v1 + 288);
  if (v17)
  {
    CFRetain(v17[1]);
    WebKit::WebExtensionController::removePage((WebKit::WebExtensionController *)v17, (WebKit::WebPageProxy *)v1);
    CFRelease(v17[1]);
  }
  uint64_t v18 = *(void *)(v1 + 296);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 8);
    if (v19)
    {
      CFRetain(*(CFTypeRef *)(v19 - 8));
      WebKit::WebExtensionController::removePage((WebKit::WebExtensionController *)(v19 - 16), (WebKit::WebPageProxy *)v1);
      CFRelease(*(CFTypeRef *)(v19 - 8));
    }
  }
  uint64_t v20 = *(void *)(v1 + 1192);
  *(void *)(v1 + 1192) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *(void *)(v1 + 1520);
  *(void *)(v1 + 1520) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  int v22 = *(CFTypeRef **)(v1 + 400);
  if (v22)
  {
    CFRetain(v22[1]);
    WebKit::WebInspectorUIProxy::closeFrontendPageAndWindow((WebKit::WebInspectorUIProxy *)v22, v23);
    WebKit::WebInspectorUIProxy::reset((uint64_t)v22);
    CFRelease(v22[1]);
  }
  else
  {
    WebKit::WebInspectorUIProxy::closeFrontendPageAndWindow(0, v10);
    WebKit::WebInspectorUIProxy::reset(0);
  }
  uint64_t v24 = *(CFTypeRef **)(v1 + 664);
  CFRetain(v24[1]);
  WebKit::WebBackForwardList::pageClosed((WebKit::WebBackForwardList *)v24, v25);
  CFRelease(v24[1]);
  uint64_t v26 = *(Inspector::FrontendRouter ***)(v1 + 1144);
  WebKit::WebPageInspectorController::disconnectAllFrontends(v26);
  Inspector::AgentRegistry::discardValues((Inspector::AgentRegistry *)(v26 + 2));
  uint64_t v28 = *(void *)(v1 + 1152);
  *(void *)(v1 + 1152) = 0;
  if (v28)
  {
    uint64_t v29 = *(unsigned int **)(v28 + 40);
    *(void *)(v28 + 40) = 0;
    if (v29 && atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v27);
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v28 + 8), v27);
  }
  uint64_t v30 = *(void *)(v1 + 40);
  if (v30) {
    uint64_t v31 = *(void *)(v30 + 8);
  }
  else {
    uint64_t v31 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v31 + 1592))(v31);
  (*(void (**)(uint64_t))(*(void *)v31 + 160))(v31);
  (*(void (**)(uint64_t))(*(void *)v31 + 1600))(v31);
  WebKit::WebPageProxy::disconnectFramesFromPage((WebKit::WebPageProxy *)v1, v32);
  uint64_t v33 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v34 = &unk_1EE9D9EF0;
  uint64_t v35 = *(void *)(v1 + 72);
  *(void *)(v1 + 72) = v34;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  uint64_t v37 = (void *)WTF::fastMalloc((WTF *)8);
  void *v37 = &unk_1EE9D9AE8;
  uint64_t v38 = *(void *)(v1 + 88);
  *(void *)(v1 + 88) = v37;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  uint64_t v39 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v39 = &unk_1EE9D9B10;
  uint64_t v40 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = v39;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v41 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v41 = &unk_1EE9E0798;
  uint64_t v42 = *(void *)(v1 + 104);
  *(void *)(v1 + 104) = v41;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  int v43 = (void *)WTF::fastMalloc((WTF *)8);
  *int v43 = &unk_1EE9D9B38;
  uint64_t v44 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = v43;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  __int16 v45 = (void *)WTF::fastMalloc((WTF *)8);
  *__int16 v45 = &unk_1EE9D9B80;
  uint64_t v46 = *(void *)(v1 + 120);
  *(void *)(v1 + 120) = v45;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  uint64_t v47 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  uint64_t v48 = (void *)WTF::fastMalloc((WTF *)8);
  void *v48 = &unk_1EE9D9BB0;
  uint64_t v49 = *(void *)(v1 + 416);
  *(void *)(v1 + 416) = v48;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
  }
  WebKit::WebPageProxy::resetState(v1, 0);
  uint64_t v50 = *(void *)(v1 + 256);
  __int16 v51 = (atomic_uint *)(v50 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v50 + 16), 1u);
  uint64_t v52 = *(void *)(v50 + 512);
  if (v52)
  {
    uint64_t v53 = *(void *)(v52 + 8);
    if (v53) {
      uint64_t v54 = v53 - 16;
    }
    else {
      uint64_t v54 = 0;
    }
  }
  else
  {
    uint64_t v54 = 0;
  }
  CFRetain(*(CFTypeRef *)(v54 + 8));
  uint64_t v55 = (WTF::RunLoop *)WebKit::WebBackForwardCache::removeEntriesForPage(*(WebKit::WebBackForwardCache **)(v54 + 760), (WebKit::WebPageProxy *)v1);
  WTF::RunLoop::current(v55);
  *(void *)long long buf = *(void *)(*(void *)(v1 + 32) + 1928);
  *(void *)&buf[8] = v50;
  atomic_fetch_add(v51, 1u);
  WTF::RefCounter<WebKit::WebProcessProxy::ShutdownPreventingScopeType>::count((void *)(v50 + 1008), &buf[16]);
  uint64_t v56 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v56 = &unk_1EE9DA158;
  v56[1] = *(void *)buf;
  v56[2] = *(void *)&buf[8];
  uint64_t v57 = *(void *)&buf[16];
  *(_OWORD *)&buf[8] = 0uLL;
  v56[3] = v57;
  uint64_t v71 = v56;
  WTF::RunLoop::dispatch();
  if (v71) {
    (*(void (**)(void *))(*v71 + 8))(v71);
  }
  uint64_t v58 = *(void *)&buf[16];
  *(void *)&uint8_t buf[16] = 0;
  if (v58)
  {
    uint64_t v59 = *(uint64_t **)v58;
    uint64_t v60 = *(void *)(v58 + 8) - 1;
    *(void *)(v58 + 8) = v60;
    if (!v59) {
      goto LABEL_80;
    }
    uint64_t v61 = *v59;
    if (*v59)
    {
      char v62 = *(unsigned char *)(v58 + 16);
      *(unsigned char *)(v58 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v61 + 16))(v61, 0);
      *(unsigned char *)(v58 + 16) = v62;
      if (!*(void *)v58)
      {
        uint64_t v60 = *(void *)(v58 + 8);
LABEL_80:
        if (!v60) {
          MEMORY[0x199740C10](v58, 0x1020C40545B2139);
        }
      }
    }
  }
  uint64_t v63 = *(void *)&buf[8];
  *(void *)&buf[8] = 0;
  if (v63) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v63 + 16));
  }
  WebKit::WebProcessProxy::removeWebPage(v50, (WebKit::WebPageProxy *)v1, 1);
  WebKit::WebPageProxy::removeAllMessageReceivers((WebKit::WebPageProxy *)v1);
  *(void *)long long buf = "WebNotificationManagerProxy";
  *(void *)&buf[8] = 28;
  uint64_t v64 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v54 + 456), (WTF::ASCIILiteralHash *)buf);
  if (v64) {
    uint64_t v65 = (WTF *)(v64 - 16);
  }
  else {
    uint64_t v65 = 0;
  }
  *(void *)long long buf = 0;
  *(void *)&buf[8] = 0;
  WebKit::WebNotificationManagerProxy::clearNotifications(v65, v1, (uint64_t)buf);
  uint64_t v66 = *(void *)(v1 + 48);
  CFRetain(*(CFTypeRef *)(v66 + 8));
  uint64_t v68 = *(unsigned int **)(v66 + 136);
  *(void *)(v66 + 136) = 0;
  if (v68 && atomic_fetch_add((atomic_uint *volatile)v68, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v68);
    WTF::fastFree((WTF *)v68, v67);
  }
  CFRelease(*(CFTypeRef *)(v66 + 8));
  WebKit::WebPageProxy::ProcessActivityState::reset((WebKit::ProcessThrottlerActivity **)(v1 + 592));
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*(void *)(v1 + 32) + 72));
  WebKit::WebPageProxy::stopAllURLSchemeTasks((WebKit::WebPageProxy *)v1, 0);
  WebKit::WebPageProxy::updatePlayingMediaDidChange((WebKit::WebPageProxy *)v1, 0, 0);
  PAL::HysteresisActivity::cancel((PAL::HysteresisActivity *)(v1 + 1464));
  uint64_t v70 = *(void *)(v1 + 272);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v70 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v69))WebKit::BrowsingContextGroup::removePage(*(WebKit::BrowsingContextGroup **)(v1 + 1416), (WebKit::WebPageProxy *)v1); {
  CFRelease(*(CFTypeRef *)(v54 + 8));
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v51);
}

void non-virtual thunk to'WebKit::WebPageProxy::~WebPageProxy(WebKit::WebPageProxy *this)
{
}

{
  uint64_t vars8;

  WebKit::WebPageProxy::~WebPageProxy((WebKit::WebPageProxy *)((char *)this - 16));

  JUMPOUT(0x199740C10);
}

unsigned __int8 *WebKit::WebPageProxy::removeAllMessageReceivers(WebKit::WebPageProxy *this)
{
  WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages((unsigned __int8 *)(*((void *)this + 4)
                                                                                           + 1960));
  uint64_t v2 = *((void *)this + 32);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
  uint64_t result = IPC::MessageReceiverMap::removeMessageReceiver(v2 + 152, 0x2Du, *(void *)(*((void *)this + 4) + 1928));
  if (v2)
  {
    return (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  }
  return result;
}

uint64_t WebKit::WebPageProxy::pageClient(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    return *(void *)(v1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebPageProxy::gpuProcessID(WebKit::WebPageProxy *this)
{
  if (!*((unsigned char *)this + 801)
    && (uint64_t v2 = *(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*((void *)this + 6) + 24))
                       + 176)) != 0
    && (uint64_t v3 = *(void *)(v2 + 136)) != 0)
  {
    return *(unsigned int *)(v3 + 108);
  }
  else
  {
    return 0;
  }
}

void WebKit::WebPageProxy::notifyProcessPoolToPrewarm(WebKit::WebPageProxy *this)
{
  if (this)
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1) {
      uint64_t v2 = v1 - 16;
    }
    else {
      uint64_t v2 = 0;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v3 = *(void *)(v2 + 88);
  if (!v3 || !*(void *)(v3 + 8)) {
    WebKit::WebProcessPool::didReachGoodTimeToPrewarm((WebKit::WebProcessPool *)v2);
  }
  uint64_t v4 = *(const void **)(v2 + 8);

  CFRelease(v4);
}

WebKit::WebPageProxy *WebKit::WebPageProxy::preferencesDidChange(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  if (!*((unsigned char *)this + 801))
  {
    uint64_t v3 = this;
    if (*((unsigned char *)this + 800))
    {
      WebKit::WebPageProxy::updateThrottleState(this, a2, a3);
      WebKit::WebPageProxy::updateHiddenPageThrottlingAutoIncreases(v3, v4, v5);
      uint64_t v6 = *((void *)v3 + 5);
      if (v6) {
        uint64_t v7 = *(void *)(v6 + 8);
      }
      else {
        uint64_t v7 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
      (*(void (**)(uint64_t))(*(void *)v7 + 168))(v7);
      (*(void (**)(uint64_t))(*(void *)v7 + 1600))(v7);
      uint64_t v8 = (WebKit::WebPageProxy *)WTF::fastMalloc((WTF *)0x10);
      *(void *)uint64_t v8 = &unk_1EE9DACD0;
      *((void *)v8 + 1) = v3;
      uint64_t v9 = v8;
      WebKit::WebPageProxy::forEachWebContentProcess(v3, &v9);
      this = v9;
      uint64_t v9 = 0;
      if (this) {
        return (WebKit::WebPageProxy *)(*(uint64_t (**)(WebKit::WebPageProxy *))(*(void *)this + 8))(this);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setFindMatchesClient(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)8);
    *uint64_t v3 = &unk_1EE9D9B80;
  }
  uint64_t result = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v3;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

WTF *WebKit::WebPageProxy::setInjectedBundleClient(uint64_t a1, int *a2)
{
  if (a2)
  {
    uint64_t result = (WTF *)WTF::fastMalloc((WTF *)0x30);
    *(_OWORD *)uint64_t result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    uint64_t v6 = *(WTF **)(a1 + 144);
    *(void *)(a1 + 144) = result;
    if (v6)
    {
      WTF::fastFree(v6, v5);
      uint64_t result = *(WTF **)(a1 + 144);
    }
    if (*a2 == 1)
    {
      long long v7 = *(_OWORD *)a2;
      long long v8 = *((_OWORD *)a2 + 1);
      *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
    }
    else
    {
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 2) = 0u;
      *(_OWORD *)uint64_t result = 0u;
      if (*a2 > 0) {
        return result;
      }
      if (*a2)
      {
        __break(1u);
        return result;
      }
      long long v7 = *(_OWORD *)a2;
      long long v8 = *((_OWORD *)a2 + 1);
    }
    *(_OWORD *)uint64_t result = v7;
    *((_OWORD *)result + 1) = v8;
  }
  else
  {
    uint64_t result = *(WTF **)(a1 + 144);
    *(void *)(a1 + 144) = 0;
    if (result)
    {
      return (WTF *)WTF::fastFree(result, 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setResourceLoadClient(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[17];
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t result = a1[17];
  a1[17] = v4;
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    uint64_t v4 = a1[17];
  }
  if ((v3 != 0) != (v4 != 0))
  {
    BOOL v6 = v4 != 0;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetHasResourceLoadClient>(a1[32], (char *)&v6, *(void *)(a1[4] + 1928), 0);
  }
  return result;
}

void WebKit::WebPageProxy::handleMessage(WebKit::WebProcessProxy **a1, uint64_t a2, WTF::StringImpl **a3, CFTypeRef **a4)
{
}

void WebKit::WebPageProxy::handleMessageShared(WebKit::WebPageProxy *a1, WebKit::WebProcessProxy **a2, WTF::StringImpl **a3, CFTypeRef **a4)
{
  uint64_t v4 = (WebKit::WebPageInjectedBundleClient *)*((void *)a1 + 18);
  if (v4)
  {
    long long v7 = *a2;
    long long v8 = *a4;
    if (*a4) {
      CFRetain(v8[1]);
    }
    WebKit::WebProcessProxy::transformHandlesToObjects(v7, (API::Object *)v8, (uint64_t *)&v10);
    WebKit::WebPageInjectedBundleClient::didReceiveMessageFromInjectedBundle(v4, a1, a3, v10);
    uint64_t v9 = v10;
    uint64_t v10 = 0;
    if (v9) {
      CFRelease(*((CFTypeRef *)v9 + 1));
    }
    if (v8) {
      CFRelease(v8[1]);
    }
  }
}

void WebKit::WebPageProxy::handleMessageWithAsyncReply(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 144);
  if (v4)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = *a4;
    *a4 = 0;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v9 = &unk_1EE9DA108;
    v9[1] = v8;
    int v22 = v9;
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v4 + 40);
    if (!v10)
    {
      uint64_t v24 = 0;
      WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()((uint64_t *)&v22, (uint64_t *)&v24);
      uint64_t v16 = v24;
      uint64_t v24 = 0;
      if (!v16)
      {
LABEL_13:
        uint64_t v19 = (uint64_t)v22;
        int v22 = 0;
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
        return;
      }
LABEL_12:
      CFRelease(*((CFTypeRef *)v16 + 1));
      goto LABEL_13;
    }
    CFTypeRef v11 = v9;
    uint64_t v12 = *a2;
    uint64_t v13 = *(void *)(a1 + 8);
    if (*a2) {
      *(_DWORD *)v12 += 2;
    }
    uint64_t v23 = v12;
    API::String::create(&v23, &v24);
    int v15 = v23;
    uint64_t v16 = v24;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::destroy(v15, v14);
        if (v16)
        {
LABEL_9:
          uint64_t v17 = *((void *)v16 + 1);
          if (!v7) {
            goto LABEL_11;
          }
          goto LABEL_10;
        }
LABEL_21:
        uint64_t v17 = 0;
        if (!v7)
        {
LABEL_11:
          uint64_t v18 = API::Object::newObject(0x18uLL, 75);
          *(void *)uint64_t v18 = &unk_1EE9D1E28;
          WebKit::InitializeWebKit2((WebKit *)v18);
          *(void *)uint64_t v18 = &unk_1EE9D85C8;
          int v22 = 0;
          *(void *)(v18 + 16) = v11;
          v10(v13, v17, v7, *(void *)(v18 + 8), *(void *)(v4 + 8));
          CFRelease(*(CFTypeRef *)(v18 + 8));
          if (!v16) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }
LABEL_10:
        uint64_t v7 = *(void *)(v7 + 8);
        goto LABEL_11;
      }
      *(_DWORD *)v15 -= 2;
    }
    if (v16) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  uint64_t v24 = 0;
  uint64_t v20 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WebKit **))(*(void *)v20 + 16))(v20, &v24);
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  uint64_t v21 = v24;
  uint64_t v24 = 0;
  if (v21) {
    CFRelease(*((CFTypeRef *)v21 + 1));
  }
}

void WebKit::WebPageProxy::handleSynchronousMessage(void *a1, uint64_t a2, WTF::StringImpl **a3, CFTypeRef **a4, uint64_t *a5)
{
  if (a1[18])
  {
    uint64_t v8 = (atomic_uint *)a1[32];
    uint64_t v9 = v8 + 4;
    atomic_fetch_add(v8 + 4, 1u);
    uint64_t v10 = (void *)a1[18];
    CFTypeRef v11 = *a4;
    if (*a4) {
      CFRetain(v11[1]);
    }
    WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v8, (API::Object *)v11, &v40);
    uint64_t v12 = v40;
    uint64_t v13 = *a5;
    *a5 = 0;
    atomic_fetch_add(v9, 1u);
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v14 = &unk_1EE9DA130;
    v14[1] = v13;
    v14[2] = v8;
    uint64_t v39 = v14;
    int v15 = *a3;
    uint64_t v16 = (void (*)(uint64_t, uint64_t, uint64_t, WebKit **, void))v10[3];
    if (v16)
    {
      uint64_t v41 = 0;
      uint64_t v17 = a1[1];
      if (v15) {
        *(_DWORD *)v15 += 2;
      }
      uint64_t v42 = v15;
      API::String::create(&v42, &v43);
      uint64_t v19 = v42;
      uint64_t v20 = v43;
      uint64_t v42 = 0;
      int v43 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
        {
          WTF::StringImpl::destroy(v19, v18);
          if (v20)
          {
LABEL_11:
            uint64_t v21 = *((void *)v20 + 1);
            if (v12)
            {
LABEL_12:
              uint64_t v22 = *(void *)(v12 + 8);
LABEL_13:
              v16(v17, v21, v22, &v41, v10[1]);
              if (v20) {
                CFRelease(*((CFTypeRef *)v20 + 1));
              }
              uint64_t v23 = v41;
              if (v41) {
                uint64_t v23 = (WebKit *)[(WebKit *)v41 _apiObject];
              }
              int v43 = v23;
LABEL_18:
              WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()((uint64_t *)&v39, (uint64_t *)&v43);
              uint64_t v24 = v43;
              int v43 = 0;
              if (v24)
              {
                uint64_t v25 = (const void *)*((void *)v24 + 1);
LABEL_33:
                CFRelease(v25);
                goto LABEL_34;
              }
              goto LABEL_34;
            }
LABEL_44:
            uint64_t v22 = 0;
            goto LABEL_13;
          }
LABEL_43:
          uint64_t v21 = 0;
          if (v12) {
            goto LABEL_12;
          }
          goto LABEL_44;
        }
        *(_DWORD *)v19 -= 2;
      }
      if (v20) {
        goto LABEL_11;
      }
      goto LABEL_43;
    }
    uint64_t v28 = (void (*)(uint64_t, uint64_t, uint64_t, void, void))v10[4];
    if (!v28)
    {
      int v43 = 0;
      goto LABEL_18;
    }
    uint64_t v29 = a1[1];
    if (v15) {
      *(_DWORD *)v15 += 2;
    }
    uint64_t v42 = v15;
    API::String::create(&v42, &v43);
    uint64_t v31 = v42;
    uint64_t v32 = v43;
    uint64_t v42 = 0;
    int v43 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::destroy(v31, v30);
        if (v32)
        {
LABEL_29:
          uint64_t v33 = *((void *)v32 + 1);
          if (v12)
          {
LABEL_30:
            uint64_t v34 = *(void *)(v12 + 8);
            goto LABEL_31;
          }
LABEL_48:
          uint64_t v34 = 0;
LABEL_31:
          uint64_t v35 = API::Object::newObject(0x18uLL, 75);
          *(void *)uint64_t v35 = &unk_1EE9D1E28;
          WebKit::InitializeWebKit2((WebKit *)v35);
          *(void *)uint64_t v35 = &unk_1EE9D85C8;
          uint64_t v36 = (uint64_t)v39;
          uint64_t v39 = 0;
          *(void *)(v35 + 16) = v36;
          v28(v29, v33, v34, *(void *)(v35 + 8), v10[1]);
          CFRelease(*(CFTypeRef *)(v35 + 8));
          if (v32)
          {
            uint64_t v25 = (const void *)*((void *)v32 + 1);
            goto LABEL_33;
          }
LABEL_34:
          uint64_t v37 = (uint64_t)v39;
          uint64_t v39 = 0;
          if (v37) {
            (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
          }
          uint64_t v38 = v40;
          uint64_t v40 = 0;
          if (v38) {
            CFRelease(*(CFTypeRef *)(v38 + 8));
          }
          if (v11) {
            CFRelease(v11[1]);
          }
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v9);
          return;
        }
LABEL_47:
        uint64_t v33 = 0;
        if (v12) {
          goto LABEL_30;
        }
        goto LABEL_48;
      }
      *(_DWORD *)v31 -= 2;
    }
    if (v32) {
      goto LABEL_29;
    }
    goto LABEL_47;
  }
  int v43 = 0;
  uint64_t v26 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WebKit **))(*(void *)v26 + 16))(v26, &v43);
  (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  uint64_t v27 = v43;
  int v43 = 0;
  if (v27) {
    CFRelease(*((CFTypeRef *)v27 + 1));
  }
}

uint64_t WebKit::WebPageProxy::hasSameGPUAndNetworkProcessPreferencesAs(WebKit::WebPageProxy *this, WebKit::WebPreferences **a2, const WTF::StringImpl *a3)
{
  WebKit::sharedPreferencesForWebProcess((WebKit *)(*((void *)this + 34) + 40), a3, (uint64_t)v7);
  uint64_t v4 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get(a2 + 5);
  return WebKit::updateSharedPreferencesForWebProcess(v7, (WebKit::WebPreferences *)((char *)v4 + 40), v5) ^ 1;
}

void WebKit::WebPageProxy::launchProcess(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, int a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  BOOL v6 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(v7 + 760);
    uint64_t v9 = *(void *)(v7 + 1928);
    uint64_t v10 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v10) {
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)uint64_t v49 = 2048;
    *(void *)&_DWORD v49[2] = v8;
    __int16 v50 = 2048;
    uint64_t v51 = v9;
    __int16 v52 = 1024;
    int v53 = v10;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::launchProcess:", buf, 0x26u);
  }
  if (*(unsigned char *)(a1 + 801) || (uint64_t v11 = *(void *)(a1 + 400)) == 0)
  {
    WebKit::WebInspectorUIProxy::reset(0);
  }
  else
  {
    CFRetain(*(CFTypeRef *)(v11 + 8));
    WebKit::WebInspectorUIProxy::reset(v11);
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  uint64_t v12 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v12 + 16), 1u);
  WebKit::WebProcessProxy::removeWebPage(v12, (WebKit::WebPageProxy *)a1, 1);
  if (v12) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
  }
  WebKit::WebPageProxy::removeAllMessageReceivers((WebKit::WebPageProxy *)a1);
  uint64_t v13 = *(void *)(*(void *)(a1 + 256) + 512);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 8);
    if (v14) {
      uint64_t v15 = v14 - 16;
    }
    else {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  CFRetain(*(CFTypeRef *)(v15 + 8));
  uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 136);
  if (v16 && (uint64_t v17 = *(void *)(v16 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v17 - 8));
    char v19 = 0;
    uint64_t v44 = v17 - 16;
    if (!a3 && !*(unsigned char *)(v17 + 785))
    {
      if (WebKit::WebPageProxy::hasSameGPUAndNetworkProcessPreferencesAs((WebKit::WebPageProxy *)a1, *(WebKit::WebPreferences ***)(v17 + 32), v18))
      {
        uint64_t v20 = WebKit::WebPageProxy::ensureRunningProcess((WebKit::WebPageProxy *)(v17 - 16));
        atomic_fetch_add((atomic_uint *volatile)(v20 + 16), 1u);
        uint64_t v21 = *(void *)(a1 + 256);
        *(void *)(a1 + 256) = v20;
        if (v21) {
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v21 + 16));
        }
        uint64_t v22 = qword_1EB358050;
        if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v23 = *(void *)(a1 + 32);
          uint64_t v24 = *(void *)(v23 + 760);
          uint64_t v25 = *(void *)(v23 + 1928);
          uint64_t v26 = *(void *)(a1 + 256);
          uint64_t v27 = *(void *)(v26 + 136);
          if (v27) {
            LODWORD(v27) = *(_DWORD *)(v27 + 108);
          }
          *(_DWORD *)long long buf = 134219264;
          *(void *)&uint8_t buf[4] = a1;
          *(_WORD *)uint64_t v49 = 2048;
          *(void *)&_DWORD v49[2] = v24;
          __int16 v50 = 2048;
          uint64_t v51 = v25;
          __int16 v52 = 1024;
          int v53 = v27;
          __int16 v54 = 2048;
          uint64_t v55 = v26;
          __int16 v56 = 1024;
          int v57 = v27;
          _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::launchProcess: Using process (process=%p, PID=%i) from related page", buf, 0x36u);
        }
        char v19 = 0;
        goto LABEL_33;
      }
      char v19 = 0;
    }
  }
  else
  {
    uint64_t v44 = 0;
    char v19 = 1;
  }
  uint64_t v28 = *(void *)(a1 + 312);
  CFRetain(*(CFTypeRef *)(v28 + 8));
  BOOL v29 = API::PageConfiguration::lockdownModeEnabled(*(API::PageConfiguration **)(a1 + 48));
  uint64_t v30 = *(void *)(a1 + 48);
  CFRetain(*(CFTypeRef *)(v30 + 8));
  WebKit::WebProcessPool::processForRegistrableDomain(v15, v28, a2 + 1, v29, (WebKit::WebPreferences **)v30, (IPC::Encoder **)buf);
  uint64_t v31 = *(void *)buf;
  *(void *)long long buf = 0;
  uint64_t v32 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = v31;
  if (v32)
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v32 + 16));
    uint64_t v33 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v33) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v33 + 16));
    }
  }
  CFRelease(*(CFTypeRef *)(v30 + 8));
  CFRelease(*(CFTypeRef *)(v28 + 8));
LABEL_33:
  *(unsigned char *)(a1 + 800) = 1;
  *(unsigned char *)(a1 + 930) = 0;
  *(unsigned char *)(a1 + 1363) = API::PageConfiguration::isLockdownModeExplicitlySet(*(API::PageConfiguration **)(a1 + 48));
  uint64_t v34 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v34 + 16), 1u);
  WebKit::WebProcessProxy::addExistingWebPage(v34, (WebKit::WebPageProxy *)a1, 1);
  WebKit::WebPageProxy::addAllMessageReceivers((WebKit::WebPageProxy *)a1);
  if (*(unsigned char *)(*(void *)(a1 + 48) + 240)) {
    *(unsigned char *)(v34 + 1024) = 1;
  }
  WebKit::WebPageProxy::finishAttachingToWebProcess(a1, (const WebKit::Site *)a2, a3);
  uint64_t v36 = *(uint64_t **)(a1 + 1296);
  *(void *)(a1 + 1296) = 0;
  *(void *)long long buf = v36;
  int v37 = *(_DWORD *)(a1 + 1304);
  uint64_t v38 = *(unsigned int *)(a1 + 1308);
  *(void *)(a1 + 1304) = 0;
  *(_DWORD *)&buf[8] = v37;
  *(_DWORD *)uint64_t v49 = v38;
  if (v38)
  {
    uint64_t v39 = 16 * v38;
    do
    {
      uint64_t v40 = (const void *)v36[1];
      v47[0] = (uint64_t *)&unk_1EE9DCAF8;
      WebKit::UserData::transform(v40, (uint64_t)v47, &v45);
      uint64_t v41 = v45;
      if (v45) {
        CFRetain(*(CFTypeRef *)(v45 + 8));
      }
      uint64_t v46 = v41;
      v47[0] = v36;
      v47[1] = &v46;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::PostInjectedBundleMessage>(*(void *)(a1 + 256), v47, *(void *)(*(void *)(a1 + 32) + 1928));
      uint64_t v42 = v46;
      uint64_t v46 = 0;
      if (v42) {
        CFRelease(*(CFTypeRef *)(v42 + 8));
      }
      uint64_t v43 = v45;
      uint64_t v45 = 0;
      if (v43) {
        CFRelease(*(CFTypeRef *)(v43 + 8));
      }
      v36 += 2;
      v39 -= 16;
    }
    while (v39);
  }
  WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)buf, v35);
  if (v34) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v34 + 16));
  }
  if ((v19 & 1) == 0) {
    CFRelease(*(CFTypeRef *)(v44 + 8));
  }
  CFRelease(*(CFTypeRef *)(v15 + 8));
}

uint64_t WebKit::WebPageProxy::ensureRunningProcess(WebKit::WebPageProxy *this)
{
  if (*((unsigned char *)this + 801) || !*((unsigned char *)this + 800))
  {
    uint64_t v2 = (const WTF::URL *)WTF::aboutBlankURL(this);
    WebKit::Site::Site((WebKit::Site *)&v7, v2);
    WebKit::WebPageProxy::launchProcess(this, &v7, 0);
    uint64_t v4 = v8;
    uint64_t v8 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = v7;
    uint64_t v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return *((void *)this + 32);
}

void WebKit::WebPageProxy::finishAttachingToWebProcess(uint64_t a1, const WebKit::Site *a2, int a3)
{
  WebKit::WebPageProxy::updateActivityState((void *)a1, 1023);
  WebKit::WebPageProxy::updateThrottleState((WebKit::WebPageProxy *)a1, v6, v7);
  WebKit::WebPageProxy::didAttachToRunningProcess((WebKit::WebPageProxy *)a1);
  if (a3 != 1) {
    WebKit::WebPageProxy::initializeWebPage((unsigned int *)a1, a2);
  }
  if (*(unsigned char *)(a1 + 801) || (uint64_t v8 = *(CFTypeRef **)(a1 + 400)) == 0)
  {
    WebKit::WebInspectorUIProxy::updateForNewPageProcess(0, (WebKit::WebPageProxy *)a1);
  }
  else
  {
    CFRetain(v8[1]);
    WebKit::WebInspectorUIProxy::updateForNewPageProcess((WebKit::WebInspectorUIProxy *)v8, (WebKit::WebPageProxy *)a1);
    CFRelease(v8[1]);
  }
  uint64_t v9 = *(Inspector::RemoteControllableTarget **)(a1 + 1152);
  if (v9) {
    Inspector::RemoteControllableTarget::update(v9);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 1592))(v11);
  (*(void (**)(uint64_t))(*(void *)v11 + 152))(v11);
  (*(void (**)(uint64_t))(*(void *)v11 + 1600))(v11);
  uint64_t v12 = (WebKit::PageLoadState *)(*(void *)(a1 + 32) + 976);

  WebKit::PageLoadState::didSwapWebProcesses(v12);
}

uint64_t WebKit::WebPageProxy::shouldUseBackForwardCache(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key, a3);
  if (result)
  {
    if (*(_DWORD *)(*(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*((void *)this + 6) + 24))
                               + 760)
                   + 16))
    {
      uint64_t v7 = *((void *)this + 34);
      {
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v6) ^ 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::isAlwaysOnLoggingAllowed(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 39) + 24);
  if ((v1 & 0x8000000000000000) == 0 || v1 == -1) {
    return 1;
  }
  uint64_t v3 = *((void *)this + 34);
  CFRetain(*(CFTypeRef *)(v3 + 8));
  {
    WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v3 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::key, v4);
  CFRelease(*(CFTypeRef *)(v3 + 8));
  return BoolValueForKey;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::CloneSessionStorageForWebPage>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 383;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v12 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, a2[1]);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, a2[2]);
  LOBYTE(v10) = 0;
  char v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::MonotonicTime *WebKit::WebPageProxy::reportPageLoadResult(WTF::MonotonicTime *this, const WebCore::ResourceError *a2)
{
  uint64_t v3 = this;
  v73[1] = *MEMORY[0x1E4F143B8];
  if ((byte_1EB359C43 & 1) == 0) {
    goto LABEL_32;
  }
  while (*(unsigned char *)(*((void *)v3 + 4) + 968))
  {
    this = (WTF::MonotonicTime *)WTF::MonotonicTime::now(this);
    uint64_t v5 = *((void *)v3 + 4);
    if (*(unsigned char *)(v5 + 968))
    {
      double v6 = v4;
      double v7 = *(double *)(v5 + 960);
      *(unsigned char *)(v5 + 968) = 0;
      int v8 = *((unsigned __int8 *)a2 + 60);
      if (v8 == 4)
      {
        int v9 = 3;
      }
      else if (v8 == 3)
      {
        int v9 = 0;
      }
      else if (*((unsigned char *)a2 + 60) || (this = (WTF::MonotonicTime *)MEMORY[0x19973EC60](a2), *((_DWORD *)a2 + 14)))
      {
        int v9 = 1;
      }
      else
      {
        int v9 = 2;
      }
      if (dword_1EB359C84)
      {
        uint64_t v10 = qword_1EB359C78 + 16;
        uint64_t v11 = 24 * dword_1EB359C84;
        while (v9 != *(_DWORD *)(v10 - 16) || v6 - v7 >= *(double *)(v10 - 8))
        {
          v10 += 24;
          v11 -= 24;
          if (!v11) {
            return this;
          }
        }
        WebCore::DiagnosticLoggingKeys::telemetryPageLoadKey((uint64_t *)v36, this);
        WebKit::WebPageProxy::logDiagnosticMessage(v3, (uint64_t)v36, v10, 0);
        uint64_t v13 = v36[0];
        v36[0] = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            uint64_t v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v12);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
        Key = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::telemetryPageLoadKey((uint64_t *)v36, v13);
        WebCore::DiagnosticLoggingKeys::occurredKey((uint64_t *)&v35, Key);
        WebKit::WebPageProxy::logDiagnosticMessage(v3, (uint64_t)v36, (uint64_t)&v35, 0);
        uint64_t v16 = v35;
        uint64_t v35 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v15);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
        this = v36[0];
        v36[0] = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2) {
            return (WTF::MonotonicTime *)WTF::StringImpl::destroy(this, v15);
          }
          else {
            *(_DWORD *)this -= 2;
          }
        }
      }
      return this;
    }
    __break(1u);
LABEL_32:
    LODWORD(v36[0]) = 0;
    v36[1] = (WTF::StringImpl *)0x4000000000000000;
    uint64_t v17 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::canceledLessThan2SecondsKey(&v37, this);
    int v38 = 0;
    uint64_t v39 = 0x4014000000000000;
    uint64_t v18 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::canceledLessThan5SecondsKey(&v40, v17);
    int v41 = 0;
    uint64_t v42 = 0x4034000000000000;
    char v19 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::canceledLessThan20SecondsKey(&v43, v18);
    int v44 = 0;
    uint64_t v45 = 0x7FF0000000000000;
    uint64_t v20 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::canceledMoreThan20SecondsKey(&v46, v19);
    int v47 = 1;
    uint64_t v48 = 0x4000000000000000;
    uint64_t v21 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::failedLessThan2SecondsKey(&v49, v20);
    int v50 = 1;
    uint64_t v51 = 0x4014000000000000;
    uint64_t v22 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::failedLessThan5SecondsKey(&v52, v21);
    int v53 = 1;
    uint64_t v54 = 0x4034000000000000;
    uint64_t v23 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::failedLessThan20SecondsKey(&v55, v22);
    int v56 = 1;
    uint64_t v57 = 0x7FF0000000000000;
    uint64_t v24 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::failedMoreThan20SecondsKey(&v58, v23);
    int v59 = 2;
    uint64_t v60 = 0x4000000000000000;
    uint64_t v25 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::succeededLessThan2SecondsKey(&v61, v24);
    int v62 = 2;
    uint64_t v63 = 0x4014000000000000;
    uint64_t v26 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::succeededLessThan5SecondsKey(&v64, v25);
    int v65 = 2;
    uint64_t v66 = 0x4034000000000000;
    uint64_t v27 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::succeededLessThan20SecondsKey(&v67, v26);
    int v68 = 2;
    uint64_t v69 = 0x7FF0000000000000;
    uint64_t v28 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::succeededMoreThan20SecondsKey(&v70, v27);
    int v71 = 3;
    uint64_t v72 = 0x7FF0000000000000;
    WebCore::DiagnosticLoggingKeys::timedOutKey(v73, v28);
    qword_1EB359C78 = 0;
    *(void *)&dword_1EB359C80 = 0;
    uint64_t v29 = WTF::fastMalloc((WTF *)0x138);
    uint64_t v31 = 0;
    dword_1EB359C80 = 13;
    qword_1EB359C78 = v29;
    unsigned int v32 = dword_1EB359C84;
    do
    {
      *(_OWORD *)(v29 + 24 * v32) = *(_OWORD *)&v36[v31];
      uint64_t v33 = v36[v31 + 2];
      if (v33) {
        *(_DWORD *)v33 += 2;
      }
      *(void *)(v29 + 24 * v32++ + 16) = v33;
      v31 += 3;
    }
    while (v31 != 39);
    dword_1EB359C84 = v32;
    for (uint64_t i = 38; i != -1; i -= 3)
    {
      this = v36[i];
      v36[i] = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2) {
          this = (WTF::MonotonicTime *)WTF::StringImpl::destroy(this, v30);
        }
        else {
          *(_DWORD *)this -= 2;
        }
      }
    }
    byte_1EB359C43 = 1;
  }
  return this;
}

void WebKit::WebPageProxy::disconnectFramesFromPage(WebKit::WebPageProxy *this, void *a2)
{
  uint64_t v2 = (WebKit::WebFrameProxy *)*((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v2)
  {
    WebKit::WebFrameProxy::webProcessWillShutDown(v2, a2);
    uint64_t v3 = (const void *)*((void *)v2 + 1);
    CFRelease(v3);
  }
}

uint64_t WebKit::WebPageProxy::resetState(uint64_t a1, void *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = *(void *)(a1 + 328);
  *(void *)(a1 + 328) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *(void *)(a1 + 344);
  *(void *)(a1 + 344) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = *(void *)(a1 + 1200);
  *(void *)(a1 + 1200) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  double v7 = *(unsigned int **)(a1 + 1208);
  *(void *)(a1 + 1208) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, a2);
  }
  std::unique_ptr<WebKit::RemoteLayerTreeScrollingPerformanceData>::reset[abi:sn180100]((WebKit::RemoteLayerTreeScrollingPerformanceData **)(a1 + 984), 0);
  *(void *)(*(void *)(a1 + 32) + 2024) = 0;
  uint64_t v9 = *(unsigned int *)(a1 + 548);
  if (v9) {
    WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)(a1 + 536), (WTF::StringImpl *)(*(void *)(a1 + 536) + 16 * v9));
  }
  uint64_t v10 = *(WTF **)(a1 + 536);
  if (v10)
  {
    *(void *)(a1 + 536) = 0;
    *(_DWORD *)(a1 + 544) = 0;
    WTF::fastFree(v10, v8);
  }
  int v65 = 0;
  *(void *)(a1 + 536) = 0;
  uint64_t v66 = 0;
  *(void *)(a1 + 544) = 0;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v8);
  uint64_t v12 = *(WebKit::RemoteLayerTreeDrawingAreaProxy **)(a1 + 232);
  if (v12)
  {
    if (v2 == 2 && !*((unsigned char *)v12 + 36))
    {
      WebKit::RemoteLayerTreeDrawingAreaProxy::detachRemoteLayerTreeHost(v12, v11, &v65);
      std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100]((WebKit::RemoteLayerTreeHost **)(a1 + 240), v65);
    }
    int v65 = 0;
    WebKit::WebPageProxy::setDrawingArea((WebKit::DrawingAreaProxy **)a1, &v65);
    if (v65) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v65 + 8))(v65);
    }
  }
  WebKit::WebPageProxy::closeOverlayedViews((WebKit::WebPageProxy *)a1);
  uint64_t v13 = *(void *)(a1 + 400);
  if (v13)
  {
    CFRetain(*(CFTypeRef *)(v13 + 8));
    WebKit::WebInspectorUIProxy::reset(v13);
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    WebKit::WebInspectorUIProxy::reset(0);
  }
  uint64_t v14 = *(void *)(a1 + 408);
  if (v14)
  {
    (*(void (**)(void))(**(void **)(v14 + 32) + 16))(*(void *)(v14 + 32));
    uint64_t v15 = *(void *)(a1 + 408);
    *(void *)(a1 + 408) = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  std::unique_ptr<WebKit::WebScreenOrientationManagerProxy>::reset[abi:sn180100]((WebKit::WebScreenOrientationManagerProxy **)(a1 + 1320), 0);
  if (v2 != 2)
  {
    *(_DWORD *)(a1 + 1224) = 0;
    WebKit::WebPageProxy::callLoadCompletionHandlersIfNecessary(a1);
  }
  uint64_t v17 = *(CFTypeRef **)(a1 + 552);
  *(void *)(a1 + 552) = 0;
  if (v17)
  {
    WebKit::WebOpenPanelResultListenerProxy::invalidate((WebKit::WebOpenPanelResultListenerProxy *)v17, v16);
    CFRelease(v17[1]);
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 2216) = 0;
  WebKit::GeolocationPermissionRequestManagerProxy::invalidateRequests((WebKit::GeolocationPermissionRequestManagerProxy *)(*(void *)(a1 + 32) + 728));
  int v65 = 0;
  WebKit::WebPageProxy::setToolTip((WTF **)a1, &v65, v18);
  uint64_t v20 = v65;
  int v65 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  *(_WORD *)(a1 + 920) = 0;
  *(_DWORD *)(*(void *)(a1 + 32) + 801) = 16843009;
  *(_OWORD *)(*(void *)(a1 + 32) + 1912) = 0u;
  uint64_t v21 = *(WebKit::PlaybackSessionManagerProxy **)(a1 + 424);
  *(void *)(a1 + 424) = 0;
  if (v21)
  {
    WebKit::PlaybackSessionManagerProxy::invalidate(v21, v19);
    if (*((_DWORD *)v21 + 4) == 1) {
      (*(void (**)(WebKit::PlaybackSessionManagerProxy *))(*(void *)v21 + 8))(v21);
    }
    else {
      --*((_DWORD *)v21 + 4);
    }
  }
  uint64_t v22 = *(WebKit::VideoPresentationManagerProxy **)(a1 + 432);
  *(void *)(a1 + 432) = 0;
  if (v22)
  {
    WebKit::VideoPresentationManagerProxy::invalidate(v22, v19);
    if (*((_DWORD *)v22 + 4) == 1) {
      (*(void (**)(WebKit::VideoPresentationManagerProxy *))(*(void *)v22 + 8))(v22);
    }
    else {
      --*((_DWORD *)v22 + 4);
    }
  }
  uint64_t v23 = *(void *)(a1 + 32);
  *(_OWORD *)(v23 + 2408) = 0u;
  *(_OWORD *)(v23 + 2424) = 0u;
  *(_OWORD *)(v23 + 2376) = 0u;
  *(_OWORD *)(v23 + 2392) = 0u;
  *(_OWORD *)(v23 + 2344) = 0u;
  *(_OWORD *)(v23 + 2360) = 0u;
  *(_OWORD *)(v23 + 2312) = 0u;
  *(_OWORD *)(v23 + 2328) = 0u;
  *(_OWORD *)(v23 + 2280) = 0u;
  *(_OWORD *)(v23 + 2296) = 0u;
  *(void *)(v23 + 2440) = 0xBFF0000000000000;
  *(_DWORD *)(v23 + 2448) = 0;
  *(_WORD *)(a1 + 448) = 0;
  *(unsigned char *)(a1 + 450) = 0;
  *(unsigned char *)(a1 + 1105) = 0;
  uint64_t v24 = *(void *)(a1 + 32);
  *(unsigned char *)(v24 + 2608) = 1;
  uint64_t v25 = *(_WORD **)(v24 + 2008);
  if (v25)
  {
    if (v2 == 1 && v25[28]) {
      v25[28] = 8;
    }
    *(void *)(v24 + 2008) = 0;
    (*(void (**)(_WORD *))(*(void *)v25 + 8))(v25);
  }
  std::unique_ptr<WebKit::SystemPreviewController>::reset[abi:sn180100]((WTF **)(a1 + 456), 0);
  uint64_t v27 = *(WTF **)(a1 + 464);
  *(void *)(a1 + 464) = 0;
  if (v27) {
    std::default_delete<WebKit::ModelElementController>::operator()[abi:sn180100](v27, v26);
  }
  uint64_t v28 = *(void *)(a1 + 488);
  *(void *)(a1 + 488) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  std::unique_ptr<WebKit::DigitalCredentialsCoordinatorProxy>::reset[abi:sn180100]((WebKit::DigitalCredentialsCoordinatorProxy **)(a1 + 480), 0);
  uint64_t v29 = *(void *)(a1 + 1312);
  *(void *)(a1 + 1312) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *(void **)(a1 + 504);
  uint64_t v31 = *(void **)(a1 + 512);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  v76[0] = v30;
  v76[1] = v31;
  unsigned int v32 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(v76);
  int v65 = (WTF::StringImpl *)v76;
  uint64_t v66 = v32;
  uint64_t v67 = v33;
  uint64_t v34 = (unsigned int **)v76[0];
  if (v76[0])
  {
    uint64_t v35 = *((unsigned int *)v76[0] - 1);
    uint64_t v36 = &v76[0][v35];
    int v68 = v36;
    uint64_t v69 = v36;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v65);
  }
  else
  {
    int v68 = 0;
    uint64_t v69 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v65);
    uint64_t v36 = 0;
    uint64_t v35 = 0;
  }
  int v71 = v76;
  uint64_t v72 = v36;
  uint64_t v73 = v36;
  __int16 v74 = v36;
  int v75 = &v34[v35];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v71);
  int v38 = v66;
  if (v66 != v72)
  {
    do
    {
      uint64_t v39 = *(void *)(*v38 + 8);
      CFRetain(*(CFTypeRef *)(v39 + 8));
      int v41 = *(unsigned int **)(v39 + 40);
      *(void *)(v39 + 40) = 0;
      if (v41 && atomic_fetch_add((atomic_uint *volatile)v41, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41);
        WTF::fastFree((WTF *)v41, v40);
      }
      CFRelease(*(CFTypeRef *)(v39 + 8));
      uint64_t v42 = v66 + 1;
      uint64_t v66 = v42;
      if (v42 != v67)
      {
        while ((unint64_t)(*v42 + 1) <= 1)
        {
          if (++v42 == v67)
          {
            uint64_t v42 = v67;
            break;
          }
        }
        uint64_t v66 = v42;
      }
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v65);
      ++*((_DWORD *)v65 + 2);
      int v38 = v66;
    }
    while (v66 != v72);
    uint64_t v34 = (unsigned int **)v76[0];
  }
  if (v34) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v34, v37);
  }
  uint64_t v43 = *(_DWORD **)(a1 + 528);
  *(void *)(a1 + 528) = 0;
  if (v43)
  {
    if (v43[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v43 + 8))(v43);
    }
    else {
      --v43[2];
    }
  }
  WebKit::WebPageProxy::updatePlayingMediaDidChange((WebKit::WebPageProxy *)a1, 0, 0);
  uint64_t v44 = *(void *)(a1 + 560);
  *(void *)(a1 + 560) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  *(unsigned char *)(a1 + 568) = 0;
  WebKit::WebPageProxy::resetSpeechSynthesizer(*(void *)(a1 + 32));
  uint64_t v45 = *(void *)(a1 + 312);
  CFRetain(*(CFTypeRef *)(v45 + 8));
  uint64_t v46 = *(WebKit::AuthenticatorManager **)(v45 + 352);
  uint64_t v47 = *(void *)(a1 + 32) + 1928;
  LOBYTE(v65) = 0;
  LOBYTE(v67) = 0;
  WebKit::AuthenticatorManager::cancelRequest(v46, v47, (uint64_t)&v65);
  CFRelease(*(CFTypeRef *)(v45 + 8));
  std::unique_ptr<WebKit::SpeechRecognitionPermissionManager>::reset[abi:sn180100]((WebKit::SpeechRecognitionPermissionManager **)(a1 + 1256), 0);
  *(_WORD *)(a1 + 1378) = 0;
  LOBYTE(v65) = 0;
  char v70 = 0;
  WebKit::WebPageProxy::setMediaCapability((WebKit::WebPageProxy *)a1, (uint64_t)&v65);
  std::__optional_destruct_base<WebKit::MediaCapability,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v48);
  uint64_t v50 = *(void *)(a1 + 32);
  uint64_t v51 = *(void *)(v50 + 2232);
  if (v51)
  {
    uint64_t v52 = *(unsigned int *)(v51 - 4);
    int v53 = (void *)(v51 + 32 * v52);
    if (*(_DWORD *)(v51 - 12))
    {
      uint64_t v54 = *(void **)(v50 + 2232);
      if (v52)
      {
        uint64_t v55 = 32 * v52;
        uint64_t v54 = *(void **)(v50 + 2232);
        while (*v54 <= 1uLL)
        {
          v54 += 4;
          v55 -= 32;
          if (!v55)
          {
            uint64_t v54 = v53;
            goto LABEL_81;
          }
        }
      }
      goto LABEL_81;
    }
    uint64_t v54 = (void *)(v51 + 32 * v52);
  }
  else
  {
    uint64_t v54 = 0;
    uint64_t v52 = 0;
  }
  int v53 = (void *)(v51 + 32 * v52);
  if (v51)
  {
LABEL_81:
    int v56 = (void *)(v51 + 32 * *(unsigned int *)(v51 - 4));
    goto LABEL_86;
  }
  int v56 = 0;
LABEL_86:
  if (v56 != v54)
  {
    do
    {
      uint64_t v57 = v54[2];
      v54[2] = 0;
      (*(void (**)(uint64_t, void))(*(void *)v57 + 16))(v57, 0);
      (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
      uint64_t v58 = v54 + 4;
      uint64_t v54 = v53;
      if (v58 != v53)
      {
        uint64_t v54 = v58;
        while (*v54 <= 1uLL)
        {
          v54 += 4;
          if (v54 == v53)
          {
            uint64_t v54 = v53;
            break;
          }
        }
      }
    }
    while (v54 != v56);
    uint64_t v51 = *(void *)(v50 + 2232);
  }
  if (v51)
  {
    *(void *)(v50 + 2232) = 0;
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v51, v49);
  }
  int v59 = *(unsigned int ***)(a1 + 1432);
  if (v59)
  {
    *(void *)(a1 + 1432) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v59, v49);
    uint64_t v60 = *(void *)(a1 + 1432);
    *(_DWORD *)(a1 + 1440) = 0;
    if (v60)
    {
      LODWORD(v60) = *(_DWORD *)(v60 - 12);
      if (v60 > 0x7FFFFFFE) {
        LODWORD(v60) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v60) = 0;
    *(_DWORD *)(a1 + 1440) = 0;
  }
  *(_DWORD *)(a1 + 1444) = 2 * v60;
  uint64_t v61 = *(void *)(a1 + 1448);
  *(void *)(a1 + 1448) = 0;
  if (v61) {
    std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100](a1 + 1448, v61);
  }
  uint64_t v62 = *(void *)(a1 + 40);
  if (v62) {
    uint64_t v63 = *(void *)(v62 + 8);
  }
  else {
    uint64_t v63 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v63 + 1592))(v63);
  (*(void (**)(uint64_t, void))(*(void *)v63 + 1888))(v63, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v63 + 1600))(v63);
}

WebKit::WebURLSchemeHandler **WebKit::WebPageProxy::stopAllURLSchemeTasks(WebKit::WebPageProxy *this, WebKit::WebProcessProxy *a2)
{
  uint64_t v4 = (WebKit::WebURLSchemeHandler **)*((void *)this + 141);
  uint64_t result = (WebKit::WebURLSchemeHandler **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4);
  double v7 = result;
  int v8 = v6;
  if (v4)
  {
    uint64_t v9 = &v4[2 * *((unsigned int *)v4 - 1)];
    uint64_t v10 = *((unsigned int *)v4 - 3);
    if (v10)
    {
      if (v10 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = (WebKit::WebURLSchemeHandler **)WTF::fastMalloc((WTF *)(8 * v10));
      uint64_t v4 = result;
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v9 != v7)
  {
    int v11 = 0;
    int v12 = 1;
    do
    {
      unsigned int v13 = v12;
      uint64_t v14 = v7[1];
      ++*((_DWORD *)v14 + 2);
      v4[v11] = v14;
      while (1)
      {
        v7 += 2;
        if (v7 == v8) {
          break;
        }
        if ((unint64_t)*v7 + 1 > 1) {
          goto LABEL_14;
        }
      }
      double v7 = v8;
LABEL_14:
      ++v11;
      int v12 = v13 + 1;
    }
    while (v7 != v9);
    if (v11)
    {
      uint64_t v15 = 8 * v13;
      uint64_t v16 = v4;
      do
      {
        uint64_t v17 = *v16++;
        WebKit::WebURLSchemeHandler::stopAllTasksForPage(v17, this, a2);
        v15 -= 8;
      }
      while (v15);
      uint64_t v18 = 8 * v13;
      char v19 = v4;
      do
      {
        uint64_t result = (WebKit::WebURLSchemeHandler **)*v19;
        WTF::StringImpl *v19 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1) {
            uint64_t result = (WebKit::WebURLSchemeHandler **)(*((uint64_t (**)(WebKit::WebURLSchemeHandler **))*result
          }
                                                      + 1))(result);
          else {
            --*((_DWORD *)result + 2);
          }
        }
        ++v19;
        v18 -= 8;
      }
      while (v18);
    }
  }
  if (v4)
  {
    return (WebKit::WebURLSchemeHandler **)WTF::fastFree((WTF *)v4, v6);
  }
  return result;
}

void WebKit::WebPageProxy::updatePlayingMediaDidChange(WebKit::WebPageProxy *this, unsigned int a2, char a3)
{
  uint64_t v6 = *((void *)this + 4);
  unsigned int v7 = *(_DWORD *)(v6 + 824);
  if (v7 == a2)
  {
    if ((a3 & 1) == 0 && WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v6 + 1832)))
    {
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*((void *)this + 4) + 1832));
      WebKit::WebPageProxy::updateReportedMediaCaptureState((uint64_t)this);
    }
  }
  else
  {
    int v8 = a2 & 0x7FDF800;
    if ((a2 & 1) == (*(_DWORD *)(v6 + 824) & 1))
    {
      *(_DWORD *)(v6 + 824) = a2;
    }
    else
    {
      uint64_t v9 = *((void *)this + 5);
      if (v9) {
        uint64_t v10 = *(void *)(v9 + 8);
      }
      else {
        uint64_t v10 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v10 + 1592))(v10);
      (*(void (**)(uint64_t))(*(void *)v10 + 1392))(v10);
      (*(void (**)(uint64_t))(*(void *)v10 + 1600))(v10);
      uint64_t v11 = *((void *)this + 5);
      *(_DWORD *)(*((void *)this + 4) + 824) = a2;
      if (v11) {
        uint64_t v12 = *(void *)(v11 + 8);
      }
      else {
        uint64_t v12 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v12 + 1592))(v12);
      (*(void (**)(uint64_t))(*(void *)v12 + 1400))(v12);
      (*(void (**)(uint64_t))(*(void *)v12 + 1600))(v12);
    }
    if ((v7 & 0x7FDF800) != v8)
    {
      WebKit::WebPageProxy::updateReportedMediaCaptureState((uint64_t)this);
      uint64_t v13 = *((void *)this + 70);
      if (v13) {
        WebKit::UserMediaPermissionRequestManagerProxy::captureStateChanged(v13, v7 & 0x7FDF800, a2 & 0xF800);
      }
    }
    if ((a3 & 1) == 0
      && WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(*((void *)this + 4) + 1832)))
    {
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*((void *)this + 4) + 1832));
      WebKit::WebPageProxy::updateReportedMediaCaptureState((uint64_t)this);
    }
    WebKit::WebPageProxy::activityStateDidChange((uint64_t)this, 320, 0, 0);
    int v14 = *(_DWORD *)(*((void *)this + 4) + 824);
    if (((v14 ^ v7) & 0x7FDF803) != 0)
    {
      (*(void (**)(void, WebKit::WebPageProxy *))(**((void **)this + 13) + 424))(*((void *)this + 13), this);
      int v14 = *(_DWORD *)(*((void *)this + 4) + 824);
    }
    if (((v7 >> 10) & 1) != (unsigned __int16)(v14 & 0x400) >> 10) {
      WebKit::WebPageProxy::videoControlsManagerDidChange(this);
    }
    uint64_t v15 = *((void *)this + 32);
    atomic_fetch_add((atomic_uint *volatile)(v15 + 16), 1u);
    WebKit::WebProcessProxy::updateAudibleMediaAssertions((atomic_uchar *)v15);
    if (((a2 >> 27) & 1) != (v7 & 0x8000000) >> 27) {
      WebKit::WebProcessProxy::updateMediaStreamingActivity((WebKit::WebProcessProxy *)v15);
    }
    WebKit::WebPageProxy::updateMediaCapability(this);
    if (v15)
    {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v15 + 16));
    }
  }
}

uint64_t PAL::HysteresisActivity::cancel(PAL::HysteresisActivity *this)
{
  *((unsigned char *)this + 48) = 0;
  uint64_t v1 = (PAL::HysteresisActivity *)((char *)this + 16);
  uint64_t result = WTF::RunLoop::TimerBase::isActive((PAL::HysteresisActivity *)((char *)this + 16));
  if (result)
  {
    return WTF::RunLoop::TimerBase::stop(v1);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::tryClose(WebKit::WebPageProxy *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 801) || !*((unsigned char *)this + 800)) {
    return 1;
  }
  uint64_t v3 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)this + 4);
    uint64_t v5 = *(void *)(v4 + 760);
    uint64_t v6 = *(void *)(v4 + 1928);
    uint64_t v7 = *(void *)(*((void *)this + 32) + 136);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v5;
    __int16 v21 = 2048;
    uint64_t v22 = v6;
    __int16 v23 = 1024;
    int v24 = v7;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryClose:", buf, 0x26u);
  }
  if (!*(_DWORD *)(*((void *)this + 32) + 656)) {
    return 1;
  }
  WTF::RunLoop::TimerBase::start();
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
  int v8 = (atomic_uint *)*((void *)this + 3);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  uint64_t v9 = *((void *)this + 32);
  uint64_t v10 = *(void *)(*((void *)this + 4) + 1928);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2515;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v19 = v11;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v12 = &unk_1EE9DA180;
  v12[1] = this;
  void v12[2] = v8;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)long long buf = v12;
  *(void *)&buf[8] = v13;
  uint8_t buf[16] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v19, 0, (uint64_t)buf, 1);
  if (buf[16])
  {
    uint64_t v15 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  uint64_t v16 = v19;
  char v19 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v14);
    WTF::fastFree(v17, v18);
  }
  return 0;
}

uint64_t WebKit::WebPageProxy::closePage(uint64_t this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(this + 801))
  {
    uint64_t v1 = this;
    int v2 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(v1 + 32);
      uint64_t v4 = *(void *)(v3 + 760);
      uint64_t v5 = *(void *)(v3 + 1928);
      uint64_t v6 = *(void *)(*(void *)(v1 + 256) + 136);
      if (v6) {
        LODWORD(v6) = *(_DWORD *)(v6 + 108);
      }
      int v9 = 134218752;
      uint64_t v10 = v1;
      __int16 v11 = 2048;
      uint64_t v12 = v4;
      __int16 v13 = 2048;
      uint64_t v14 = v5;
      __int16 v15 = 1024;
      int v16 = v6;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::closePage:", (uint8_t *)&v9, 0x26u);
    }
    uint64_t v7 = *(void *)(v1 + 40);
    if (v7) {
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v8 + 1592))(v8);
    (*(void (**)(uint64_t))(*(void *)v8 + 344))(v8);
    (*(void (**)(uint64_t))(*(void *)v8 + 1600))(v8);
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 104) + 64))(*(void *)(v1 + 104), v1);
  }
  return this;
}

void WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(uint64_t a1, uint64_t a2, const WTF::URL *a3, WTF::URL *a4, int a5, uint64_t *a6)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (WTF::URL::protocolIs())
  {
    uint64_t v12 = *(void *)(a2 + 136);
    if (v12 && *(unsigned char *)(v12 + 104)
      || WebKit::AuxiliaryProcessProxy::wasTerminated((WebKit::AuxiliaryProcessProxy *)a2))
    {
      v62[0] = 0;
      char v63 = 0;
      WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)>::operator()(a6, (uint64_t)v62);
      if (!v63) {
        return;
      }
      __int16 v13 = (const char ***)v62;
      goto LABEL_74;
    }
    uint64_t v61 = 0;
    if (*(void *)a4 && *(_DWORD *)(*(void *)a4 + 4))
    {
      if (a5 && WebKit::WebProcessProxy::hasAssumedReadAccessToURL((WebKit::WebProcessProxy *)a2, a4))
      {
        WTF::URL::fileSystemPath((uint64_t *)v67, a4);
        WTF::FileSystemImpl::fileSystemRepresentation((uint64_t *)v52, (WTF::FileSystemImpl *)v67, v14);
        int v16 = sandbox_check();
        uint64_t v17 = *(WTF **)v52;
        *(void *)uint64_t v52 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1) {
            WTF::fastFree(v17, v15);
          }
          else {
            --*(_DWORD *)v17;
          }
        }
        uint64_t v18 = *(WTF::StringImpl **)v67;
        *(void *)uint64_t v67 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v15);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
        if (!v16)
        {
          v59[0] = 0;
          char v60 = 0;
          WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)>::operator()(a6, (uint64_t)v59);
          if (!v60) {
            goto LABEL_73;
          }
          uint64_t v30 = (const char ***)v59;
          goto LABEL_35;
        }
      }
      uint64_t v19 = *(void *)(a2 + 144);
      if (!v19)
      {
        __break(0xC471u);
        JUMPOUT(0x198E5D770);
      }
      if (*(void *)(v19 + 352))
      {
        xpc_connection_get_audit_token();
        char v20 = v52[0];
        *(_OWORD *)uint64_t v67 = *(_OWORD *)&v52[1];
        *(_OWORD *)&v67[15] = *(_OWORD *)&v52[16];
        WTF::URL::fileSystemPath((uint64_t *)v66, a4);
        unsigned int v21 = *(_DWORD *)v66;
        if (*(void *)v66)
        {
          uint64_t v22 = *(WebKit::SandboxExtensionImpl **)(*(void *)v66 + 8);
          unsigned int v21 = *(_DWORD *)(*(void *)v66 + 4);
          unint64_t v23 = ((unint64_t)*(unsigned int *)(*(void *)v66 + 16) >> 2) & 1;
        }
        else
        {
          uint64_t v22 = 0;
          unint64_t v23 = 1;
        }
        char v57 = v20;
        *(_OWORD *)uint64_t v58 = *(_OWORD *)v67;
        *(_OWORD *)&v58[15] = *(_OWORD *)&v67[15];
        WebKit::SandboxExtension::createHandleForReadByAuditToken(v22, (WebKit::SandboxExtensionImpl *)(v21 | (v23 << 32)), &v57, (uint64_t)v52);
      }
      else
      {
        WTF::URL::fileSystemPath((uint64_t *)v66, a4);
        WebKit::SandboxExtension::createHandle(0, (uint64_t)v52);
      }
      uint64_t v25 = *(WTF::StringImpl **)v66;
      *(void *)uint64_t v66 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v24);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
      if (v52[8])
      {
        uint64_t v26 = *(void *)v52;
        *(void *)uint64_t v52 = 0;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v52);
        uint64_t v61 = 0;
        uint64_t v27 = *a6;
        *a6 = 0;
        uint64_t v28 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v28 = &unk_1EE9DA1A8;
        v28[1] = v26;
        *(void *)uint64_t v52 = 0;
        void v28[2] = v27;
        *(void *)uint64_t v66 = v28;
        WebKit::WebProcessProxy::assumeReadAccessToBaseURL(a2, a1, (WTF::StringImpl **)a4, (WTF::StringImpl **)v66, 0);
        uint64_t v29 = *(void *)v66;
        *(void *)uint64_t v66 = 0;
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
        }
        *(void *)&v52[8] = 0;
        uint64_t v30 = (const char ***)v52;
        goto LABEL_35;
      }
    }
    if (WebKit::WebProcessProxy::hasAssumedReadAccessToURL((WebKit::WebProcessProxy *)a2, a3))
    {
      v55[0] = 0;
      char v56 = 0;
      WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)>::operator()(a6, (uint64_t)v55);
      if (!v56) {
        goto LABEL_73;
      }
      uint64_t v30 = (const char ***)v55;
LABEL_35:
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v30);
LABEL_73:
      __int16 v13 = (const char ***)&v61;
      goto LABEL_74;
    }
    {
      WebKit::pageLevelMap(void)::map = 0;
    }
    *(void *)uint64_t v52 = a1;
    if (WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::WebPageProxy *>>,WebKit::WebPageProxy *>(&WebKit::pageLevelMap(void)::map, v52))
    {
      __break(0xC471u);
      JUMPOUT(0x198E5D790);
    }
    uint64_t v31 = *(void *)(a2 + 144);
    if (!v31)
    {
      __break(0xC471u);
      JUMPOUT(0x198E5D7B0);
    }
    if (*(void *)(v31 + 352))
    {
      xpc_connection_get_audit_token();
      *(_OWORD *)uint64_t v54 = *(_OWORD *)&v52[1];
      *(_OWORD *)&v54[15] = *(_OWORD *)&v52[16];
      char v53 = v52[0];
      WebKit::SandboxExtension::createHandleForReadByAuditToken((WebKit::SandboxExtensionImpl *)"/", (WebKit::SandboxExtensionImpl *)0x100000001, &v53, (uint64_t)v52);
    }
    else
    {
      WebKit::SandboxExtension::createHandle(0, (uint64_t)v52);
    }
    if (v52[8])
    {
      uint64_t v32 = *(void *)v52;
      *(void *)uint64_t v52 = 0;
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v52);
      *(unsigned char *)(a1 + 1189) = 1;
      *(unsigned char *)(a2 + 528) = 1;
      WTF::URL::truncatedForUseAsBase((uint64_t *)v52, a3);
      WTF::URL::fileSystemPath((uint64_t *)v66, (WTF::URL *)v52);
      uint64_t v61 = 0;
      uint64_t v33 = *a6;
      *a6 = 0;
      uint64_t v34 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v34 = &unk_1EE9DA1D0;
      *((void *)v34 + 1) = v32;
      *(void *)uint64_t v67 = 0;
      *((void *)v34 + 2) = v33;
      uint64_t v51 = v34;
      WebKit::WebProcessProxy::assumeReadAccessToBaseURL(a2, a1, (WTF::StringImpl **)v66, &v51, 0);
      uint64_t v35 = v51;
      uint64_t v51 = 0;
      if (v35) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v35 + 8))(v35);
      }
      *(void *)&v67[8] = 0;
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v67);
      uint64_t v37 = *(WTF::StringImpl **)v66;
      *(void *)uint64_t v66 = 0;
      if (!v37) {
        goto LABEL_68;
      }
LABEL_65:
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v36);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
LABEL_68:
      uint64_t v46 = *(WTF::StringImpl **)v52;
      *(void *)uint64_t v52 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2) {
          WTF::StringImpl::destroy(v46, v36);
        }
        else {
          *(_DWORD *)v46 -= 2;
        }
      }
      goto LABEL_73;
    }
    if ((WTF::linkedOnOrAfterSDKWithBehavior() & 1) == 0)
    {
      *(unsigned char *)(a1 + 1189) = 1;
      *(unsigned char *)(a2 + 528) = 1;
    }
    WTF::URL::truncatedForUseAsBase((uint64_t *)v52, a3);
    WTF::URL::fileSystemPath((uint64_t *)&v51, (WTF::URL *)v52);
    if (v51)
    {
      uint64_t v38 = *(void *)(a2 + 144);
      if (!v38)
      {
        __break(0xC471u);
        JUMPOUT(0x198E5D7F4);
      }
      if (*(void *)(v38 + 352))
      {
        xpc_connection_get_audit_token();
        *(_OWORD *)uint64_t v66 = *(_OWORD *)&v67[1];
        *(_OWORD *)&v66[15] = *(_OWORD *)&v67[16];
        if (v51)
        {
          uint64_t v39 = (WebKit::SandboxExtensionImpl *)*((void *)v51 + 1);
          unint64_t v40 = *((unsigned int *)v51 + 1) | ((unint64_t)((*((_DWORD *)v51 + 4) >> 2) & 1) << 32);
        }
        else
        {
          uint64_t v39 = 0;
          unint64_t v40 = 0x100000000;
        }
        char v47 = v67[0];
        *(_OWORD *)uint64_t v48 = *(_OWORD *)v66;
        *(_OWORD *)&v48[15] = *(_OWORD *)&v66[15];
        WebKit::SandboxExtension::createHandleForReadByAuditToken(v39, (WebKit::SandboxExtensionImpl *)v40, &v47, (uint64_t)v67);
      }
      else
      {
        WebKit::SandboxExtension::createHandle(0, (uint64_t)v67);
      }
      if (v67[8])
      {
        uint64_t v41 = *(void *)v67;
        *(void *)uint64_t v67 = 0;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v67);
        uint64_t v61 = 0;
        uint64_t v42 = *a6;
        *a6 = 0;
        uint64_t v43 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v43 = &unk_1EE9DA1F8;
        v43[1] = v41;
        *(void *)uint64_t v67 = 0;
        v43[2] = v42;
        *(void *)uint64_t v66 = v43;
        WebKit::WebProcessProxy::assumeReadAccessToBaseURL(a2, a1, (WTF::StringImpl **)v52, (WTF::StringImpl **)v66, 0);
        uint64_t v44 = *(void *)v66;
        *(void *)uint64_t v66 = 0;
        if (v44) {
          (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
        }
        *(void *)&v67[8] = 0;
        uint64_t v45 = (const char ***)v67;
        goto LABEL_62;
      }
    }
    else
    {
      v49[0] = 0;
      char v50 = 0;
      WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)>::operator()(a6, (uint64_t)v49);
      if (v50)
      {
        uint64_t v45 = (const char ***)v49;
LABEL_62:
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v45);
      }
    }
    uint64_t v37 = v51;
    uint64_t v51 = 0;
    if (!v37) {
      goto LABEL_68;
    }
    goto LABEL_65;
  }
  v64[0] = 0;
  char v65 = 0;
  WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)>::operator()(a6, (uint64_t)v64);
  if (!v65) {
    return;
  }
  __int16 v13 = (const char ***)v64;
LABEL_74:
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v13);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  LOBYTE(v6) = 0;
  char v7 = 0;
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v5 = *(const char ***)a2;
    *(void *)a2 = 0;
    char v7 = 1;
    uint64_t v6 = 0;
    uint64_t v8 = v5;
    char v9 = 1;
  }
  else
  {
    LOBYTE(v8) = 0;
    char v9 = 0;
  }
  (*(void (**)(uint64_t, const char ***))(*(void *)v2 + 16))(v2, &v8);
  if (v9)
  {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v8);
    if (!v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
LABEL_7:
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (v3) {
    goto LABEL_7;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

WebKit::NetworkIssueReporter *WebKit::WebPageProxy::prepareToLoadWebPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (WebKit::NetworkIssueReporter *)(*(uint64_t (**)(void))(**(void **)(a1 + 104) + 496))(*(void *)(a1 + 104));
  *(void *)(a2 + 560) = v4;
  *(unsigned char *)(a2 + 568) = v5;
  uint64_t result = (WebKit::NetworkIssueReporter *)WebKit::NetworkIssueReporter::isEnabled(v4);
  if (result)
  {
    char v7 = (WebKit::NetworkIssueReporter *)WTF::fastMalloc((WTF *)0x18);
    WebKit::NetworkIssueReporter::NetworkIssueReporter(v7);
    return std::unique_ptr<WebKit::NetworkIssueReporter>::reset[abi:sn180100]((WebKit::NetworkIssueReporter **)(a1 + 1400), v7);
  }
  return result;
}

void WebKit::WebPageProxy::loadRequest(uint64_t a1@<X0>, WebCore::ResourceRequestBase *a2@<X1>, char a3@<W2>, char a4@<W3>, const void *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 801))
  {
    *a6 = 0;
  }
  else
  {
    uint64_t v12 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(v13 + 760);
      uint64_t v15 = *(void *)(v13 + 1928);
      uint64_t v16 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v16) {
        LODWORD(v16) = *(_DWORD *)(v16 + 108);
      }
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v14;
      __int16 v40 = 2048;
      uint64_t v41 = v15;
      __int16 v42 = 1024;
      int v43 = v16;
      _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadRequest:", buf, 0x26u);
      if (*(unsigned char *)(a1 + 801)) {
        goto LABEL_8;
      }
    }
    if (!*(unsigned char *)(a1 + 800))
    {
LABEL_8:
      uint64_t v17 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a2);
      WebKit::Site::Site((WebKit::Site *)buf, v17);
      WebKit::WebPageProxy::launchProcess(a1, buf, 0);
      uint64_t v19 = *(WTF::StringImpl **)&buf[8];
      *(void *)&buf[8] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v18);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      char v20 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v18);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    uint64_t v21 = *(void *)(a1 + 160);
    uint64_t v22 = *(void *)(*(void *)(a1 + 256) + 176);
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const String *)a2);
    WebKit::WebBackForwardList::protectedCurrentItem(*(void **)(a1 + 664), &v34);
    WebKit::WebNavigationState::createLoadRequestNavigation(&v38, v21, v22, (uint64_t)buf, &v34);
    if (v34) {
      CFRelease(*(CFTypeRef *)(v34 + 8));
    }
    CFTypeRef v23 = cf;
    CFTypeRef cf = 0;
    if (v23) {
      CFRelease(v23);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    uint64_t v24 = v38;
    uint64_t v25 = v38 + 512;
    WebKit::NavigationActionData::NavigationActionData((WebKit::NavigationActionData *)buf, (const WebKit::NavigationActionData *)(v38 + 512));
    char v45 = 1;
    WebKit::NavigationActionData::operator=(v25, (uint64_t)buf);
    if (WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation((WebKit::WebPageProxy *)a1))
    {
      uint64_t v26 = *(void *)(a1 + 256) + 200;
      uint64_t v27 = WTF::fastMalloc((WTF *)0x28);
      uint64_t v34 = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v27, v26, "Client navigation", 18, 1, 0);
      int v35 = 1;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v24 + 3464, (uint64_t)&v34);
      WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v24 + 3424));
      if (v35 != -1) {
        ((void (*)(uint64_t *, uint64_t *))off_1EE9D9C18[v35])(&v37, &v34);
      }
    }
    WebKit::WebPageProxy::setLastNavigationWasAppInitiated((WebKit::WebPageProxy *)a1, a2);
    uint64_t v28 = *(void *)(a1 + 256);
    atomic_fetch_add((atomic_uint *volatile)(v28 + 16), 1u);
    uint64_t v37 = v28;
    uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v30 = v38;
    __int16 v31 = *(_WORD *)(a1 + 1328);
    LOBYTE(v34) = 0;
    char v36 = 0;
    WebKit::WebPageProxy::loadRequestWithNavigationShared(a1, &v37, v29, v38, (uint64_t)a2, a3, a4, a5, 0, v33, v31, (uint64_t)&v34, 0, 0);
    if (v36) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v34, v32);
    }
    if (v28) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v28 + 16));
    }
    *a6 = v30;
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)buf);
  }
}

void WebKit::WebPageProxy::loadRequestWithNavigationShared(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, const void *a8, char a9, int a10, __int16 a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  char v20 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v22 = *(void *)(v21 + 760);
    uint64_t v23 = *(void *)(v21 + 1928);
    uint64_t v24 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v24) {
      LODWORD(v24) = *(_DWORD *)(v24 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v22;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&long long v92 = v23;
    WORD4(v92) = 1024;
    *(_DWORD *)((char *)&v92 + 10) = v24;
    _os_log_impl(&dword_1985F2000, v20, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadRequestWithNavigationShared:", buf, 0x26u);
  }
  uint64_t v25 = *(void *)(a1 + 32);
  uint64_t v26 = *(void *)(*(void *)(v25 + 992) + 8);
  uint64_t v84 = a3;
  if (v26)
  {
    uint64_t v27 = v26 - 16;
    CFRetain(*(CFTypeRef *)(v26 - 8));
  }
  else
  {
    uint64_t v27 = 0;
  }
  v90[0] = v27;
  v90[1] = v25 + 976;
  ++*(_DWORD *)(v25 + 1348);
  uint64_t v28 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a5);
  uint64_t v29 = *(WTF::StringImpl **)v28;
  if (*(void *)v28) {
    *(_DWORD *)v29 += 2;
  }
  uint64_t v87 = v29;
  long long v30 = *(_OWORD *)(v28 + 24);
  long long v88 = *(_OWORD *)(v28 + 8);
  long long v89 = v30;
  if (!a9)
  {
    uint64_t v31 = *(void *)(a1 + 32);
    *(unsigned char *)(v25 + 1344) = 1;
    uint64_t v32 = *(void *)(a4 + 16);
    if (v29) {
      *(_DWORD *)v29 += 2;
    }
    *(void *)long long buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    *(void *)(v31 + 1176) = v32;
    uint64_t v34 = *(WTF::StringImpl **)(v31 + 1184);
    *(void *)(v31 + 1184) = v29;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v33);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    WTF::String::operator=((uint64_t *)(v31 + 1264), (WTF::StringImpl **)buf);
    *(_OWORD *)(v31 + 1272) = *(_OWORD *)&buf[8];
    *(_OWORD *)(v31 + 1288) = v92;
    char v36 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v35);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  uint64_t v37 = *(void *)(a1 + 32);
  *(unsigned char *)(v25 + 1344) = 1;
  *(unsigned char *)(v37 + 1306) = a7;
  uint64_t v100 = 0;
  LOBYTE(v101) = 0;
  char v102 = 0;
  char v103 = 0;
  char v104 = 0;
  uint64_t v38 = WebCore::ResourceRequest::ResourceRequest((StringImpl *)v105);
  v114[144] = 0;
  __int16 v115 = 0;
  __int16 v118 = 0;
  v119[0] = 0;
  v119[48] = 0;
  __int16 v120 = 0;
  LOBYTE(v121) = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  __int16 v126 = 0;
  LOBYTE(v127) = 0;
  char v128 = 0;
  long long v113 = 0u;
  memset(v114, 0, 25);
  long long v112 = 0u;
  uint64_t v117 = 0;
  memset(v116, 0, 11);
  uint64_t v39 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)v38);
  WebCore::PublicSuffixStore::publicSuffix((uint64_t *)buf, v39, (const WTF::URL *)&v87);
  uint64_t v41 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  __int16 v42 = v100;
  uint64_t v100 = v41;
  if (v42)
  {
    int v43 = *(_DWORD *)v42 - 2;
    if (*(_DWORD *)v42 != 2) {
      goto LABEL_24;
    }
    WTF::StringImpl::destroy(v42, v40);
    __int16 v42 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (!v42) {
      goto LABEL_25;
    }
    int v43 = *(_DWORD *)v42 - 2;
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v44);
    }
    else {
LABEL_24:
    }
      *(_DWORD *)__int16 v42 = v43;
  }
LABEL_25:
  uint64_t v45 = *(void *)(a4 + 16);
  if (!v102) {
    char v102 = 1;
  }
  uint64_t v101 = v45;
  WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v105, a5);
  char v47 = *(WTF::StringImpl **)(a5 + 152);
  *(void *)(a5 + 152) = 0;
  uint64_t v48 = v106;
  uint64_t v106 = v47;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, v46);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
  uint64_t v49 = *(WTF::StringImpl **)(a5 + 160);
  *(void *)(a5 + 160) = 0;
  char v50 = v107;
  uint64_t v107 = v49;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2) {
      WTF::StringImpl::destroy(v50, v46);
    }
    else {
      *(_DWORD *)v50 -= 2;
    }
  }
  uint64_t v51 = *(WTF::RefCountedBase **)(a5 + 168);
  *(void *)(a5 + 168) = 0;
  uint64_t v52 = v108;
  uint64_t v108 = v51;
  if (v52) {
    WTF::RefCounted<WebCore::FormData>::deref(v52);
  }
  uint64_t v109 = *(void *)(a5 + 176);
  char v110 = *(unsigned char *)(a5 + 184);
  char v53 = *(const void **)(a5 + 192);
  *(void *)(a5 + 192) = 0;
  CFTypeRef v54 = cf;
  CFTypeRef cf = v53;
  if (v54) {
    CFRelease(v54);
  }
  LOBYTE(v115) = a6;
  *(void *)long long buf = &unk_1EE9DCAF8;
  WebKit::UserData::transform(a8, (uint64_t)buf, &v86);
  uint64_t v55 = v86;
  if (v86)
  {
    CFRetain(*(CFTypeRef *)(v86 + 8));
    CFRetain(*(CFTypeRef *)(v55 + 8));
  }
  uint64_t v56 = v116[0];
  v116[0] = v55;
  if (v56) {
    CFRelease(*(CFTypeRef *)(v56 + 8));
  }
  if (v55) {
    CFRelease(*(CFTypeRef *)(v55 + 8));
  }
  uint64_t v57 = v86;
  uint64_t v86 = 0;
  if (v57) {
    CFRelease(*(CFTypeRef *)(v57 + 8));
  }
  HIBYTE(v115) = a9;
  std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>((WebKit::WebsitePoliciesData *)&v114[24], a12);
  LOWORD(v116[1]) = *(_WORD *)(a4 + 976);
  int v59 = *(WTF::StringImpl **)(a4 + 984);
  if (v59) {
    *(_DWORD *)v59 += 2;
  }
  char v60 = v117;
  uint64_t v117 = v59;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2) {
      WTF::StringImpl::destroy(v60, v58);
    }
    else {
      *(_DWORD *)v60 -= 2;
    }
  }
  __int16 v118 = *(_WORD *)(a4 + 992);
  buf[0] = 0;
  char v93 = 0;
  if (*(unsigned char *)(a4 + 1048))
  {
    std::construct_at[abi:sn180100]<WebCore::OwnerPermissionsPolicyData,WebCore::OwnerPermissionsPolicyData const&,WebCore::OwnerPermissionsPolicyData*>((uint64_t)buf, a4 + 1000);
    char v93 = 1;
  }
  std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OwnerPermissionsPolicyData,false>>((uint64_t)v119, (uint64_t)buf);
  std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v61);
  __int16 v120 = a11;
  uint64_t v121 = a13;
  char v122 = a14;
  int v62 = *(_DWORD *)(a4 + 3496);
  __int16 v127 = v62;
  char v128 = BYTE2(v62);
  LOBYTE(v126) = *(unsigned char *)(a4 + 856);
  HIBYTE(v126) = a7;
  uint64_t v63 = *a2;
  uint64_t v64 = *(void *)(a1 + 32);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  char v65 = *(atomic_uint **)(a1 + 24);
  if (v65) {
    atomic_fetch_add(v65, 1u);
  }
  uint64_t v66 = (WTF::URL *)(v64 + 1096);
  *(void *)long long buf = v65;
  uint64_t v67 = *a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v67 + 8), v67);
  uint64_t v68 = *(atomic_uint **)(v67 + 8);
  if (v68) {
    atomic_fetch_add(v68, 1u);
  }
  *(void *)&buf[8] = v68;
  WebKit::LoadParameters::LoadParameters((uint64_t)&buf[16], (uint64_t *)&v100);
  uint64_t v69 = v87;
  if (v87) {
    *(_DWORD *)v87 += 2;
  }
  uint64_t v94 = v69;
  long long v95 = v88;
  long long v96 = v89;
  CFRetain(*(CFTypeRef *)(a4 + 8));
  uint64_t v97 = a4;
  uint64_t v98 = v84;
  char v99 = a9;
  uint64_t v70 = WTF::fastMalloc((WTF *)0x2A0);
  *(void *)uint64_t v70 = &unk_1EE9DA220;
  *(void *)(v70 + 8) = *(void *)buf;
  uint64_t v71 = *(void *)&buf[8];
  *(void *)long long buf = 0;
  *(void *)&buf[8] = 0;
  *(void *)(v70 + 16) = v71;
  WebKit::LoadParameters::LoadParameters(v70 + 24, (uint64_t *)&buf[16]);
  WTF::URL::URL(v70 + 608, (uint64_t *)&v94);
  uint64_t v72 = v97;
  uint64_t v97 = 0;
  *(void *)(v70 + 648) = v72;
  LOBYTE(v72) = v99;
  *(void *)(v70 + 656) = v98;
  *(unsigned char *)(v70 + 664) = v72;
  uint64_t v86 = v70;
  WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(a1, v63, (const WTF::URL *)&v87, v66, 1, &v86);
  uint64_t v74 = v86;
  uint64_t v86 = 0;
  if (v74) {
    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
  }
  uint64_t v75 = v97;
  uint64_t v97 = 0;
  if (v75) {
    CFRelease(*(CFTypeRef *)(v75 + 8));
  }
  uint64_t v76 = v94;
  uint64_t v94 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2) {
      WTF::StringImpl::destroy(v76, v73);
    }
    else {
      *(_DWORD *)v76 -= 2;
    }
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&buf[16], v73);
  __int16 v78 = *(unsigned int **)&buf[8];
  *(void *)&buf[8] = 0;
  if (v78 && atomic_fetch_add((atomic_uint *volatile)v78, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v78);
    WTF::fastFree((WTF *)v78, v77);
  }
  uint64_t v79 = *(unsigned int **)buf;
  *(void *)long long buf = 0;
  if (v79 && atomic_fetch_add((atomic_uint *volatile)v79, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v79);
    WTF::fastFree((WTF *)v79, v77);
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&v100, v77);
  uint64_t v82 = v87;
  uint64_t v87 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2) {
      WTF::StringImpl::destroy(v82, v80);
    }
    else {
      *(_DWORD *)v82 -= 2;
    }
  }
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v90, (uint64_t)v80, v81);
}

void WebKit::WebPageProxy::loadFile(WebKit::WebPageProxy *this, const WTF::String *a2, const WTF::String *a3, BOOL a4, API::Object *a5)
{
  uint64_t v5 = MEMORY[0x1F4188790](this, a2, a3);
  char v7 = v6;
  char v9 = v8;
  __int16 v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = v5;
  uint64_t v16 = v15;
  uint64_t v166 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = qword_1EB358050;
  BOOL v18 = os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    uint64_t v19 = *(void *)(v14 + 32);
    uint64_t v20 = *(void *)(v19 + 760);
    uint64_t v21 = *(void *)(v19 + 1928);
    uint64_t v22 = *(void *)(*(void *)(v14 + 256) + 136);
    if (v22) {
      LODWORD(v22) = *(_DWORD *)(v22 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v20;
    __int16 v160 = 2048;
    uint64_t v161 = v21;
    __int16 v162 = 1024;
    int v163 = v22;
    _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadFile:", buf, 0x26u);
  }
  if (*(unsigned char *)(v14 + 801))
  {
    uint64_t v23 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void *)(v14 + 32);
      uint64_t v25 = *(void *)(v24 + 760);
      uint64_t v26 = *(void *)(v24 + 1928);
      uint64_t v27 = *(void *)(*(void *)(v14 + 256) + 136);
      if (v27) {
        LODWORD(v27) = *(_DWORD *)(v27 + 108);
      }
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v25;
      __int16 v160 = 2048;
      uint64_t v161 = v26;
      __int16 v162 = 1024;
      int v163 = v27;
      _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadFile: page is closed", buf, 0x26u);
    }
    *uint64_t v16 = 0;
    return;
  }
  if (!*(unsigned char *)(v14 + 800))
  {
    uint64_t v28 = (const WTF::URL *)WTF::aboutBlankURL((WTF *)v18);
    WebKit::Site::Site((WebKit::Site *)buf, v28);
    WebKit::WebPageProxy::launchProcess(v14, (WTF::ASCIICaseInsensitiveHash **)buf, 0);
    long long v30 = *(WTF::StringImpl **)&buf[8];
    *(void *)&buf[8] = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v29);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    uint64_t v31 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v29);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
  WTF::URL::URL((uint64_t)&v118, v13);
  if ((WTF::URL::protocolIs() & 1) == 0)
  {
    uint64_t v34 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v36 = *(void *)(v14 + 32);
      uint64_t v37 = *(void *)(v36 + 760);
      uint64_t v38 = *(void *)(v36 + 1928);
      uint64_t v39 = *(void *)(*(void *)(v14 + 256) + 136);
      if (v39) {
        LODWORD(v39) = *(_DWORD *)(v39 + 108);
      }
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v37;
      __int16 v160 = 2048;
      uint64_t v161 = v38;
      __int16 v162 = 1024;
      int v163 = v39;
      _os_log_impl(&dword_1985F2000, v34, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadFile: file is not local", buf, 0x26u);
    }
    *uint64_t v16 = 0;
    goto LABEL_122;
  }
  __int16 v115 = 0;
  WTF::URL::invalidate((WTF::URL *)&v115);
  if (!*v11)
  {
    uint64_t v121 = 0;
    WTF::URL::invalidate((WTF::URL *)&v121);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v130 = *(WTF::StringImpl **)buf;
    MEMORY[0x19972E8B0](buf, &v121, &v130, 0);
    WTF::URL::operator=((uint64_t)&v115, (uint64_t)buf);
    uint64_t v41 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, v40);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
    char v47 = v130;
    v130 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2) {
        WTF::StringImpl::destroy(v47, v40);
      }
      else {
        *(_DWORD *)v47 -= 2;
      }
    }
    uint64_t v48 = v121;
    uint64_t v121 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2) {
        WTF::StringImpl::destroy(v48, v40);
      }
      else {
        *(_DWORD *)v48 -= 2;
      }
    }
LABEL_49:
    uint64_t v49 = *(void *)(v14 + 160);
    uint64_t v50 = *(void *)(*(void *)(v14 + 256) + 176);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)buf, (const String *)&v118, 0);
    CFTypeRef cf = 0;
    WebKit::WebBackForwardList::protectedCurrentItem(*(void **)(v14 + 664), &v121);
    WebKit::WebNavigationState::createLoadRequestNavigation(&v114, v49, v50, (uint64_t)buf, (uint64_t *)&v121);
    if (v121) {
      CFRelease(*((CFTypeRef *)v121 + 1));
    }
    CFTypeRef v51 = cf;
    CFTypeRef cf = 0;
    if (v51) {
      CFRelease(v51);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    uint64_t v52 = v114;
    uint64_t v53 = v114 + 512;
    WebKit::NavigationActionData::NavigationActionData((WebKit::NavigationActionData *)buf, (const WebKit::NavigationActionData *)(v114 + 512));
    char v165 = 1;
    WebKit::NavigationActionData::operator=(v53, (uint64_t)buf);
    if (WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation((WebKit::WebPageProxy *)v14))
    {
      uint64_t v55 = *(void *)(v14 + 256) + 200;
      uint64_t v56 = WTF::fastMalloc((WTF *)0x28);
      uint64_t v121 = (WTF::StringImpl *)WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v56, v55, "Client navigation", 18, 1, 0);
      LODWORD(v122) = 1;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v52 + 3464, (uint64_t)&v121);
      WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v52 + 3424));
      if (v122 != -1) {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9D9C18[v122])(&v130, &v121);
      }
    }
    uint64_t v57 = *(void *)(v14 + 32);
    uint64_t v58 = *(void *)(*(void *)(v57 + 992) + 8);
    if (v58)
    {
      uint64_t v59 = v58 - 16;
      CFRetain(*(CFTypeRef *)(v58 - 8));
    }
    else
    {
      uint64_t v59 = 0;
    }
    uint64_t v60 = *(void *)(v14 + 32);
    v113[0] = v59;
    v113[1] = v57 + 976;
    ++*(_DWORD *)(v57 + 1348);
    *(unsigned char *)(v57 + 1344) = 1;
    uint64_t v61 = *(void *)(v52 + 16);
    int v62 = *v13;
    if (*v13) {
      *(_DWORD *)v62 += 2;
    }
    *(void *)(v60 + 1176) = v61;
    uint64_t v63 = *(WTF::StringImpl **)(v60 + 1184);
    *(void *)(v60 + 1184) = v62;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2) {
        WTF::StringImpl::destroy(v63, v54);
      }
      else {
        *(_DWORD *)v63 -= 2;
      }
    }
    WTF::String::operator=((uint64_t *)(v60 + 1264), &v115);
    *(_OWORD *)(v60 + 1272) = v116;
    *(_OWORD *)(v60 + 1288) = v117;
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v106, (const String *)&v118, 0);
    CFTypeRef v112 = 0;
    WebCore::ResourceRequestBase::setIsAppInitiated((WebCore::ResourceRequestBase *)v106);
    *(unsigned char *)(v14 + 1360) = v9;
    v130 = 0;
    LOBYTE(v131) = 0;
    char v132 = 0;
    char v133 = 0;
    char v134 = 0;
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v135);
    v144[144] = 0;
    __int16 v145 = 0;
    __int16 v147 = 0;
    char v148 = 0;
    char v149 = 0;
    __int16 v150 = 0;
    char v151 = 0;
    char v152 = 0;
    char v153 = 0;
    char v154 = 0;
    char v155 = 0;
    __int16 v156 = 0;
    char v157 = 0;
    char v158 = 0;
    long long v143 = 0u;
    memset(v144, 0, 25);
    long long v142 = 0u;
    *(_DWORD *)((char *)v146 + 7) = 0;
    v146[2] = 0;
    v146[0] = 0;
    uint64_t v64 = *(void *)(v52 + 16);
    if (!v132) {
      char v132 = 1;
    }
    uint64_t v131 = v64;
    WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v135, (uint64_t)v106);
    uint64_t v66 = v107;
    uint64_t v107 = 0;
    uint64_t v67 = v136;
    __int16 v136 = v66;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2) {
        WTF::StringImpl::destroy(v67, v65);
      }
      else {
        *(_DWORD *)v67 -= 2;
      }
    }
    uint64_t v68 = v108;
    uint64_t v108 = 0;
    uint64_t v69 = v137;
    int v137 = v68;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2) {
        WTF::StringImpl::destroy(v69, v65);
      }
      else {
        *(_DWORD *)v69 -= 2;
      }
    }
    uint64_t v70 = v109;
    uint64_t v109 = 0;
    uint64_t v71 = v138;
    uint64_t v138 = v70;
    if (v71) {
      WTF::RefCounted<WebCore::FormData>::deref(v71);
    }
    uint64_t v139 = v110;
    char v140 = v111;
    CFTypeRef v72 = v112;
    CFTypeRef v112 = 0;
    CFTypeRef v73 = v141;
    CFTypeRef v141 = v72;
    if (v73) {
      CFRelease(v73);
    }
    LOBYTE(v145) = 0;
    uint64_t v121 = (WTF::StringImpl *)&unk_1EE9DCAF8;
    uint64_t v74 = (WebCore::PublicSuffixStore *)WebKit::UserData::transform(v7, (uint64_t)&v121, (uint64_t *)&v105);
    uint64_t v75 = (uint64_t)v105;
    if (v105)
    {
      CFRetain((CFTypeRef)v105[1]);
      uint64_t v74 = (WebCore::PublicSuffixStore *)CFRetain(*(CFTypeRef *)(v75 + 8));
    }
    uint64_t v76 = v146[0];
    v146[0] = v75;
    if (v76) {
      CFRelease(*(CFTypeRef *)(v76 + 8));
    }
    if (v75) {
      CFRelease(*(CFTypeRef *)(v75 + 8));
    }
    uint64_t v77 = (uint64_t)v105;
    long long v105 = 0;
    if (v77) {
      CFRelease(*(CFTypeRef *)(v77 + 8));
    }
    __int16 v78 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::singleton(v74);
    uint64_t v79 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v135);
    WebCore::PublicSuffixStore::publicSuffix((uint64_t *)&v121, v78, v79);
    uint64_t v81 = v121;
    uint64_t v121 = 0;
    uint64_t v82 = v130;
    v130 = v81;
    if (!v82) {
      goto LABEL_91;
    }
    int v83 = *(_DWORD *)v82 - 2;
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::destroy(v82, v80);
      uint64_t v82 = v121;
      uint64_t v121 = 0;
      if (!v82)
      {
LABEL_91:
        LOBYTE(v156) = v9;
        uint64_t v85 = *(void *)(v14 + 256);
        atomic_fetch_add((atomic_uint *volatile)(v85 + 16), 1u);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v14 + 24), v14 + 16);
        uint64_t v86 = *(atomic_uint **)(v14 + 24);
        if (v86) {
          atomic_fetch_add(v86, 1u);
        }
        uint64_t v121 = (WTF::StringImpl *)v86;
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v85 + 8), v85);
        uint64_t v87 = *(atomic_uint **)(v85 + 8);
        if (v87) {
          atomic_fetch_add(v87, 1u);
        }
        char v122 = (WTF *)v87;
        WebKit::LoadParameters::LoadParameters((uint64_t)v123, (uint64_t *)&v130);
        long long v88 = v118;
        if (v118) {
          *(_DWORD *)v118 += 2;
        }
        char v124 = v88;
        long long v125 = v119;
        long long v126 = v120;
        long long v89 = v115;
        if (v115) {
          *(_DWORD *)v115 += 2;
        }
        __int16 v127 = v89;
        long long v128 = v116;
        long long v129 = v117;
        uint64_t v90 = (void *)WTF::fastMalloc((WTF *)0x2B0);
        *uint64_t v90 = &unk_1EE9DA248;
        v90[1] = v121;
        uint64_t v91 = v122;
        uint64_t v121 = 0;
        char v122 = 0;
        void v90[2] = v91;
        WebKit::LoadParameters::LoadParameters((uint64_t)(v90 + 3), v123);
        WTF::URL::URL((uint64_t)(v90 + 76), (uint64_t *)&v124);
        WTF::URL::URL((uint64_t)(v90 + 81), (uint64_t *)&v127);
        long long v105 = v90;
        WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(v14, v85, (const WTF::URL *)&v118, (WTF::URL *)&v115, 1, (uint64_t *)&v105);
        uint64_t v93 = (uint64_t)v105;
        long long v105 = 0;
        if (v93) {
          (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
        }
        uint64_t v94 = v127;
        __int16 v127 = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2) {
            WTF::StringImpl::destroy(v94, v92);
          }
          else {
            *(_DWORD *)v94 -= 2;
          }
        }
        long long v95 = v124;
        char v124 = 0;
        if (v95)
        {
          if (*(_DWORD *)v95 == 2) {
            WTF::StringImpl::destroy(v95, v92);
          }
          else {
            *(_DWORD *)v95 -= 2;
          }
        }
        WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)v123, v92);
        uint64_t v97 = (unsigned int *)v122;
        char v122 = 0;
        if (v97 && atomic_fetch_add((atomic_uint *volatile)v97, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v97);
          WTF::fastFree((WTF *)v97, v96);
        }
        uint64_t v98 = (unsigned int *)v121;
        uint64_t v121 = 0;
        if (v98 && atomic_fetch_add((atomic_uint *volatile)v98, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v98);
          WTF::fastFree((WTF *)v98, v96);
        }
        *uint64_t v16 = v114;
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v85 + 16));
        WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&v130, v99);
        CFTypeRef v100 = v112;
        CFTypeRef v112 = 0;
        if (v100) {
          CFRelease(v100);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v106);
        WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v113, v101, v102);
        WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)buf);
        goto LABEL_118;
      }
      int v83 = *(_DWORD *)v82 - 2;
      if (*(_DWORD *)v82 == 2)
      {
        WTF::StringImpl::destroy(v82, v84);
        goto LABEL_91;
      }
    }
    *(_DWORD *)uint64_t v82 = v83;
    goto LABEL_91;
  }
  WTF::URL::URL((uint64_t)buf, v11);
  WTF::URL::operator=((uint64_t)&v115, (uint64_t)buf);
  int v33 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v32);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  if (WTF::URL::protocolIs()) {
    goto LABEL_49;
  }
  __int16 v42 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v43 = *(void *)(v14 + 32);
    uint64_t v44 = *(void *)(v43 + 760);
    uint64_t v45 = *(void *)(v43 + 1928);
    uint64_t v46 = *(void *)(*(void *)(v14 + 256) + 136);
    if (v46) {
      LODWORD(v46) = *(_DWORD *)(v46 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v44;
    __int16 v160 = 2048;
    uint64_t v161 = v45;
    __int16 v162 = 1024;
    int v163 = v46;
    _os_log_impl(&dword_1985F2000, v42, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadFile: resource URL is not local", buf, 0x26u);
  }
  *uint64_t v16 = 0;
LABEL_118:
  char v103 = v115;
  __int16 v115 = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2) {
      WTF::StringImpl::destroy(v103, v35);
    }
    else {
      *(_DWORD *)v103 -= 2;
    }
  }
LABEL_122:
  char v104 = v118;
  __int16 v118 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2) {
      WTF::StringImpl::destroy(v104, v35);
    }
    else {
      *(_DWORD *)v104 -= 2;
    }
  }
}

void WebKit::WebPageProxy::loadData(uint64_t a1@<X0>, WebCore::SharedBuffer **a2@<X1>, WTF::StringImpl **a3@<X2>, WTF::StringImpl **a4@<X3>, WTF::StringImpl **a5@<X4>, const void *a6@<X5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(v17 + 760);
    uint64_t v19 = *(void *)(v17 + 1928);
    uint64_t v20 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v20) {
      LODWORD(v20) = *(_DWORD *)(v20 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v18;
    __int16 v61 = 2048;
    uint64_t v62 = v19;
    __int16 v63 = 1024;
    int v64 = v20;
    _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadData:", buf, 0x26u);
  }
  uint64_t isFullWebBrowserOrRunningTest = MEMORY[0x19972E990](*a3, "text/html", 9);
  if (isFullWebBrowserOrRunningTest)
  {
    uint64_t isFullWebBrowserOrRunningTest = WebKit::isFullWebBrowserOrRunningTest((WebKit *)isFullWebBrowserOrRunningTest);
    if ((isFullWebBrowserOrRunningTest & 1) == 0) {
      *(unsigned char *)(a1 + 1333) = 1;
    }
  }
  if (*(unsigned char *)(a1 + 801))
  {
    uint64_t v22 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v24 = *(void *)(v23 + 760);
      uint64_t v25 = *(void *)(v23 + 1928);
      uint64_t v26 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v26) {
        LODWORD(v26) = *(_DWORD *)(v26 + 108);
      }
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v24;
      __int16 v61 = 2048;
      uint64_t v62 = v25;
      __int16 v63 = 1024;
      int v64 = v26;
      _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadData: page is closed", buf, 0x26u);
    }
    uint64_t v27 = 0;
LABEL_39:
    *a8 = v27;
    return;
  }
  if (!*(unsigned char *)(a1 + 800))
  {
    uint64_t v28 = (const WTF::URL *)WTF::aboutBlankURL((WTF *)isFullWebBrowserOrRunningTest);
    WebKit::Site::Site((WebKit::Site *)buf, v28);
    WebKit::WebPageProxy::launchProcess(a1, (WTF::ASCIICaseInsensitiveHash **)buf, 0);
    long long v30 = *(WTF::StringImpl **)&buf[8];
    *(void *)&buf[8] = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v29);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    uint64_t v31 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v29);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
  char v52 = a7;
  uint64_t v53 = a8;
  uint64_t v32 = *(void *)(a1 + 160);
  uint64_t v33 = *(void *)(*(void *)(a1 + 256) + 176);
  uint64_t v34 = *a2;
  uint64_t v35 = WebCore::SharedBuffer::data(*a2);
  uint64_t v36 = (WTF *)*((void *)v34 + 6);
  CFTypeRef v54 = 0;
  int v55 = 0;
  int v56 = (int)v36;
  if (!v36)
  {
LABEL_27:
    uint64_t v40 = WTF::fastMalloc((WTF *)0x38);
    uint64_t v57 = (WTF *)API::SubstituteData::SubstituteData(v40, (uint64_t *)&v54, (_DWORD **)a3, (_DWORD **)a4, (_DWORD **)a5, (uint64_t)a6, 1);
    uint64_t v27 = API::Object::newObject(0xDB0uLL, 76);
    uint64_t v41 = API::Navigation::Navigation(v27, v33, (uint64_t *)&v57);
    uint64_t v42 = *(void *)(v41 + 16);
    uint64_t v58 = v41;
    uint64_t v59 = v42;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,API::Navigation*>((uint64_t)buf, (uint64_t *)(v32 + 8), &v59, &v58);
    uint64_t v43 = v57;
    uint64_t v57 = 0;
    if (v43) {
      std::default_delete<API::SubstituteData>::operator()[abi:sn180100]((int)&v57, v43);
    }
    uint64_t v44 = v54;
    if (v54)
    {
      CFTypeRef v54 = 0;
      int v55 = 0;
      WTF::fastFree(v44, v43);
    }
    if (WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation((WebKit::WebPageProxy *)a1))
    {
      uint64_t v45 = *(void *)(a1 + 256) + 200;
      uint64_t v46 = WTF::fastMalloc((WTF *)0x28);
      *(void *)long long buf = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v46, v45, "Client navigation", 18, 1, 0);
      *(_DWORD *)&buf[8] = 1;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v27 + 3464, (uint64_t)buf);
      WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v27 + 3424));
      if (*(_DWORD *)&buf[8] != -1) {
        ((void (*)(WTF **, unsigned char *))off_1EE9D9C18[*(unsigned int *)&buf[8]])(&v54, buf);
      }
    }
    char v47 = *(atomic_uint **)(a1 + 256);
    atomic_fetch_add(v47 + 4, 1u);
    CFTypeRef v54 = (WTF *)v47;
    uint64_t v48 = *(void *)(*(void *)(a1 + 32) + 1928);
    __int16 v49 = *(_WORD *)(a1 + 1328);
    buf[0] = 0;
    char v65 = 0;
    WebKit::WebPageProxy::loadDataWithNavigationShared(a1, (uint64_t *)&v54, v48, v27, (uint64_t *)a2, a3, a4, a5, a6, 0, v51, v49, (uint64_t)buf, v52, 1);
    if (v65) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)buf, v50);
    }
    if (v47) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v47 + 4);
    }
    a8 = v53;
    goto LABEL_39;
  }
  if (!((unint64_t)v36 >> 32))
  {
    uint64_t v37 = (char *)v35;
    uint64_t v38 = (WTF *)WTF::fastMalloc(v36);
    int v55 = (int)v36;
    CFTypeRef v54 = v38;
    do
    {
      char v39 = *v37++;
      *(unsigned char *)uint64_t v38 = v39;
      uint64_t v38 = (WTF *)((char *)v38 + 1);
      uint64_t v36 = (WTF *)((char *)v36 - 1);
    }
    while (v36);
    goto LABEL_27;
  }
  __break(0xC471u);
}

void WebKit::WebPageProxy::loadDataWithNavigationShared(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, WTF::StringImpl **a6, WTF::StringImpl **a7, WTF::StringImpl **a8, const void *a9, char a10, int a11, __int16 a12, uint64_t a13, char a14, char a15)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = qword_1EB358050;
  uint64_t v21 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT);
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 32);
    uint64_t v23 = *(void *)(v22 + 760);
    uint64_t v24 = *(void *)(v22 + 1928);
    uint64_t v25 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v25) {
      LODWORD(v25) = *(_DWORD *)(v25 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v23;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&long long v61 = v24;
    WORD4(v61) = 1024;
    *(_DWORD *)((char *)&v61 + 10) = v25;
    _os_log_impl(&dword_1985F2000, v20, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadDataWithNavigation", buf, 0x26u);
  }
  uint64_t v26 = *(void *)(a1 + 32);
  uint64_t v27 = *(void *)(*(void *)(v26 + 992) + 8);
  if (v27)
  {
    uint64_t v28 = v27 - 16;
    uint64_t v21 = (WTF *)CFRetain(*(CFTypeRef *)(v27 - 8));
  }
  else
  {
    uint64_t v28 = 0;
  }
  uint64_t v29 = *(void *)(a1 + 32);
  v59[0] = v28;
  v59[1] = v26 + 976;
  ++*(_DWORD *)(v26 + 1348);
  *(unsigned char *)(v26 + 1344) = 1;
  uint64_t v30 = *(void *)(a4 + 16);
  uint64_t v31 = *a8;
  if (*a8 && *((_DWORD *)v31 + 1))
  {
    uint64_t v32 = v29 + 976;
    uint64_t v33 = a3;
LABEL_11:
    char v34 = a15;
    *(_DWORD *)v31 += 2;
    goto LABEL_12;
  }
  uint64_t v31 = *(WTF::StringImpl **)WTF::aboutBlankURL(v21);
  uint64_t v32 = v29 + 976;
  uint64_t v33 = a3;
  if (v31) {
    goto LABEL_11;
  }
  char v34 = a15;
LABEL_12:
  *(void *)long long buf = 0;
  WTF::URL::invalidate((WTF::URL *)buf);
  uint64_t v36 = *(WTF::StringImpl **)(v32 + 208);
  *(void *)(v32 + 200) = v30;
  *(void *)(v32 + 208) = v31;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v35);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  WTF::String::operator=((uint64_t *)(v32 + 288), (WTF::StringImpl **)buf);
  *(_OWORD *)(v32 + 296) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v32 + 312) = v61;
  uint64_t v38 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v37);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  uint64_t v62 = 0;
  LOBYTE(v63) = 0;
  char v64 = 0;
  char v65 = 0;
  char v66 = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v67);
  char v71 = 0;
  __int16 v72 = 0;
  CFTypeRef v73 = 0;
  __int16 v74 = 0;
  uint64_t v76 = 0;
  __int16 v77 = 0;
  char v78 = 0;
  char v79 = 0;
  __int16 v80 = 0;
  char v81 = 0;
  char v82 = 0;
  char v83 = 0;
  char v84 = 0;
  char v85 = 0;
  __int16 v86 = 0;
  char v87 = 0;
  char v88 = 0;
  long long v69 = 0u;
  memset(v70, 0, 25);
  long long v68 = 0u;
  char v75 = v34;
  uint64_t v39 = *(void *)(a4 + 16);
  if (!v64) {
    char v64 = 1;
  }
  uint64_t v40 = *a5;
  *a5 = 0;
  uint64_t v63 = v39;
  *((void *)&v68 + 1) = v40;
  WTF::String::operator=((uint64_t *)&v69, a6);
  WTF::String::operator=((uint64_t *)&v69 + 1, a7);
  WTF::String::operator=(v70, a8);
  HIBYTE(v72) = a10;
  *(void *)long long buf = &unk_1EE9DCAF8;
  WebKit::UserData::transform(a9, (uint64_t)buf, (uint64_t *)&v58);
  uint64_t v41 = v58;
  if (v58)
  {
    CFRetain(v58[1]);
    CFRetain(v41[1]);
  }
  uint64_t v42 = v73;
  CFTypeRef v73 = v41;
  if (v42) {
    CFRelease(v42[1]);
  }
  if (v41) {
    CFRelease(v41[1]);
  }
  uint64_t v43 = v58;
  uint64_t v58 = 0;
  if (v43) {
    CFRelease(v43[1]);
  }
  std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>((WebKit::WebsitePoliciesData *)&v70[3], a13);
  LOBYTE(v72) = a14;
  __int16 v80 = a12;
  char v83 = *(unsigned char *)(a1 + 1190);
  WebKit::WebPageProxy::prepareToLoadWebPage(a1, (uint64_t)&v62);
  uint64_t v44 = *a2;
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    *(_OWORD *)algn_1EB35A7B8 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v44);
  uint64_t v45 = *a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(*a2 + 8), *a2);
  uint64_t v46 = *(atomic_uint **)(v45 + 8);
  if (v46) {
    atomic_fetch_add(v46, 1u);
  }
  *(void *)long long buf = v46;
  *(void *)&buf[8] = v33;
  WebKit::LoadParameters::LoadParameters((uint64_t)&buf[16], &v62);
  char v47 = (CFTypeRef *)WTF::fastMalloc((WTF *)0x260);
  *char v47 = &unk_1EE9DA270;
  uint64_t v48 = *(const void **)buf;
  *(void *)long long buf = 0;
  v47[1] = v48;
  v47[2] = *(CFTypeRef *)&buf[8];
  WebKit::LoadParameters::LoadParameters((uint64_t)(v47 + 3), (uint64_t *)&buf[16]);
  uint64_t v58 = v47;
  WebKit::WebProcessProxy::assumeReadAccessToBaseURL(v45, a1, a8, (WTF::StringImpl **)&v58, 1);
  uint64_t v50 = v58;
  uint64_t v58 = 0;
  if (v50) {
    (*((void (**)(CFTypeRef *))*v50 + 1))(v50);
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&buf[16], v49);
  char v52 = *(unsigned int **)buf;
  *(void *)long long buf = 0;
  if (v52 && atomic_fetch_add((atomic_uint *volatile)v52, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v52);
    WTF::fastFree((WTF *)v52, v51);
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&v62, v51);
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v59, v53, v54);
}

void WebKit::WebPageProxy::loadSimulatedRequest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WebCore::SharedBuffer **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(v11 + 760);
    uint64_t v13 = *(void *)(v11 + 1928);
    uint64_t v14 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v14) {
      LODWORD(v14) = *(_DWORD *)(v14 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v12;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&long long v119 = v13;
    WORD4(v119) = 1024;
    *(_DWORD *)((char *)&v119 + 10) = v14;
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadSimulatedRequest:", buf, 0x26u);
  }
  WebKit::WebPageProxy::setLastNavigationWasAppInitiated((WebKit::WebPageProxy *)a1, (WebCore::ResourceRequest *)a2);
  uint64_t v15 = (void *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)a3);
  uint64_t v16 = (WebKit *)MEMORY[0x19972E990](*v15, "text/html", 9);
  if (v16 && (WebKit::isFullWebBrowserOrRunningTest(v16) & 1) == 0) {
    *(unsigned char *)(a1 + 1333) = 1;
  }
  if (*(unsigned char *)(a1 + 801))
  {
    uint64_t v17 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(v18 + 760);
      uint64_t v20 = *(void *)(v18 + 1928);
      uint64_t v21 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v21) {
        LODWORD(v21) = *(_DWORD *)(v21 + 108);
      }
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v19;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&long long v119 = v20;
      WORD4(v119) = 1024;
      *(_DWORD *)((char *)&v119 + 10) = v21;
      _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadSimulatedRequest: page is closed", buf, 0x26u);
    }
    *a5 = 0;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 800))
    {
      uint64_t v22 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
      WebKit::Site::Site((WebKit::Site *)buf, v22);
      WebKit::WebPageProxy::launchProcess(a1, (WTF::ASCIICaseInsensitiveHash **)buf, 0);
      uint64_t v24 = *(WTF::StringImpl **)&buf[8];
      *(void *)&buf[8] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v23);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      uint64_t v25 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v23);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
    }
    uint64_t v26 = *(void *)(a1 + 160);
    uint64_t v27 = *(void *)(*(void *)(a1 + 256) + 176);
    WebCore::ResourceRequest::ResourceRequest(&v141, (const String *)a2);
    uint64_t v28 = *a4;
    uint64_t v29 = WebCore::SharedBuffer::data(*a4);
    uint64_t v30 = (WTF *)*((void *)v28 + 6);
    char v111 = 0;
    int v112 = 0;
    int v113 = (int)v30;
    if (v30)
    {
      if ((unint64_t)v30 >> 32)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v31 = (char *)v29;
      uint64_t v32 = (WTF::StringImpl *)WTF::fastMalloc(v30);
      int v112 = (int)v30;
      char v111 = v32;
      do
      {
        char v33 = *v31++;
        *(unsigned char *)uint64_t v32 = v33;
        uint64_t v32 = (WTF::StringImpl *)((char *)v32 + 1);
        uint64_t v30 = (WTF *)((char *)v30 - 1);
      }
      while (v30);
    }
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (const WebCore::ResourceResponseBase *)a3);
    char v34 = *(const void **)(a3 + 240);
    CFTypeRef cf = v34;
    if (v34) {
      CFRetain(v34);
    }
    char v121 = *(unsigned char *)(a3 + 248);
    uint64_t v35 = WTF::fastMalloc((WTF *)0x38);
    uint64_t v114 = (WTF *)API::SubstituteData::SubstituteData(v35, (uint64_t *)&v111, (WebCore::ResourceResponseBase *)buf, 0);
    WebKit::WebBackForwardList::protectedCurrentItem(*(void **)(a1 + 664), &v110);
    uint64_t v36 = API::Object::newObject(0xDB0uLL, 76);
    uint64_t v37 = API::Navigation::Navigation(v36, v27, (uint64_t)&v141, (uint64_t *)&v114, &v110);
    uint64_t v38 = *(WTF::StringImpl **)(v37 + 16);
    uint64_t v116 = v37;
    long long v117 = v38;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,API::Navigation*>((uint64_t)v115, (uint64_t *)(v26 + 8), (uint64_t *)&v117, &v116);
    if (v110) {
      CFRelease(*(CFTypeRef *)(v110 + 8));
    }
    uint64_t v39 = v114;
    uint64_t v114 = 0;
    if (v39) {
      std::default_delete<API::SubstituteData>::operator()[abi:sn180100]((int)&v114, v39);
    }
    CFTypeRef v40 = cf;
    CFTypeRef cf = 0;
    if (v40) {
      CFRelease(v40);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v39);
    uint64_t v42 = v111;
    if (v111)
    {
      char v111 = 0;
      int v112 = 0;
      WTF::fastFree(v42, v41);
    }
    CFTypeRef v43 = v147;
    CFTypeRef v147 = 0;
    if (v43) {
      CFRelease(v43);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v141);
    if (WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation((WebKit::WebPageProxy *)a1))
    {
      uint64_t v44 = *(void *)(a1 + 256) + 200;
      uint64_t v45 = WTF::fastMalloc((WTF *)0x28);
      *(void *)long long buf = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v45, v44, "Client navigation", 18, 1, 0);
      *(_DWORD *)&buf[8] = 1;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v36 + 3464, (uint64_t)buf);
      WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v36 + 3424));
      if (*(_DWORD *)&buf[8] != -1) {
        ((void (*)(CFTypeRef *, unsigned char *))off_1EE9D9C18[*(unsigned int *)&buf[8]])(&v141, buf);
      }
    }
    uint64_t v46 = *(void *)(a1 + 32);
    uint64_t v47 = *(void *)(*(void *)(v46 + 992) + 8);
    if (v47)
    {
      uint64_t v48 = v47 - 16;
      CFRetain(*(CFTypeRef *)(v47 - 8));
    }
    else
    {
      uint64_t v48 = 0;
    }
    v115[0] = v48;
    v115[1] = v46 + 976;
    ++*(_DWORD *)(v46 + 1348);
    __int16 v49 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
    if (v49) {
      *(_DWORD *)v49 += 2;
    }
    char v111 = v49;
    uint64_t v50 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
    int v51 = (WTF *)WebCore::ResourceResponseBase::setURL((WebCore::ResourceResponseBase *)a3, v50);
    uint64_t v52 = *(void *)(a1 + 32);
    *(unsigned char *)(v46 + 1344) = 1;
    uint64_t v53 = *(void *)(v36 + 16);
    if (v49 && *((_DWORD *)v49 + 1) || (__int16 v49 = *(WTF::StringImpl **)WTF::aboutBlankURL(v51)) != 0) {
      *(_DWORD *)v49 += 2;
    }
    *(void *)long long buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    *(void *)(v52 + 1176) = v53;
    int v55 = *(WTF::StringImpl **)(v52 + 1184);
    *(void *)(v52 + 1184) = v49;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2) {
        WTF::StringImpl::destroy(v55, v54);
      }
      else {
        *(_DWORD *)v55 -= 2;
      }
    }
    WTF::String::operator=((uint64_t *)(v52 + 1264), (WTF::StringImpl **)buf);
    *(_OWORD *)(v52 + 1272) = *(_OWORD *)&buf[8];
    *(_OWORD *)(v52 + 1288) = v119;
    uint64_t v57 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2) {
        WTF::StringImpl::destroy(v57, v56);
      }
      else {
        *(_DWORD *)v57 -= 2;
      }
    }
    CFTypeRef v141 = 0;
    LOBYTE(v142) = 0;
    char v143 = 0;
    char v144 = 0;
    char v145 = 0;
    uint64_t v58 = WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v146);
    char v157 = 0;
    __int16 v158 = 0;
    __int16 v161 = 0;
    char v162 = 0;
    char v163 = 0;
    __int16 v164 = 0;
    char v165 = 0;
    char v166 = 0;
    char v167 = 0;
    char v168 = 0;
    char v169 = 0;
    __int16 v170 = 0;
    char v171 = 0;
    char v172 = 0;
    long long v155 = 0u;
    memset(v156, 0, 25);
    long long v154 = 0u;
    __int16 v160 = 0;
    memset(v159, 0, 11);
    uint64_t v59 = *(void *)(v36 + 16);
    if (!v143) {
      char v143 = 1;
    }
    uint64_t v142 = v59;
    WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v58, a2);
    long long v61 = *(WTF::StringImpl **)(a2 + 152);
    *(void *)(a2 + 152) = 0;
    uint64_t v62 = v148;
    char v148 = v61;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2) {
        WTF::StringImpl::destroy(v62, v60);
      }
      else {
        *(_DWORD *)v62 -= 2;
      }
    }
    uint64_t v63 = *(WTF::StringImpl **)(a2 + 160);
    *(void *)(a2 + 160) = 0;
    char v64 = v149;
    char v149 = v63;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2) {
        WTF::StringImpl::destroy(v64, v60);
      }
      else {
        *(_DWORD *)v64 -= 2;
      }
    }
    char v65 = *(WTF::RefCountedBase **)(a2 + 168);
    *(void *)(a2 + 168) = 0;
    char v66 = v150;
    __int16 v150 = v65;
    if (v66) {
      WTF::RefCounted<WebCore::FormData>::deref(v66);
    }
    uint64_t v151 = *(void *)(a2 + 176);
    char v152 = *(unsigned char *)(a2 + 184);
    uint64_t v67 = *(const void **)(a2 + 192);
    *(void *)(a2 + 192) = 0;
    CFTypeRef v68 = v153;
    CFTypeRef v153 = v67;
    if (v68) {
      CFRelease(v68);
    }
    long long v69 = *a4;
    *a4 = 0;
    uint64_t v70 = (unsigned int *)*((void *)&v154 + 1);
    *((void *)&v154 + 1) = v69;
    if (v70) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v70, v60);
    }
    char v71 = (WTF::StringImpl **)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)a3);
    WTF::String::operator=((uint64_t *)&v155, v71);
    __int16 v72 = (WTF::StringImpl **)WebCore::ResourceResponseBase::textEncodingName((WebCore::ResourceResponseBase *)a3);
    WTF::String::operator=((uint64_t *)&v155 + 1, v72);
    WTF::String::operator=(v156, &v111);
    __int16 v158 = 0;
    LOWORD(v159[1]) = *(_WORD *)(v36 + 976);
    __int16 v74 = *(WTF::StringImpl **)(v36 + 984);
    if (v74) {
      *(_DWORD *)v74 += 2;
    }
    char v75 = v160;
    __int16 v160 = v74;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2) {
        WTF::StringImpl::destroy(v75, v73);
      }
      else {
        *(_DWORD *)v75 -= 2;
      }
    }
    __int16 v161 = *(_WORD *)(v36 + 992);
    __int16 v164 = *(_WORD *)(a1 + 1328);
    WebCore::ResourceResponseBase::setExpectedContentLength((WebCore::ResourceResponseBase *)a3);
    WebCore::ResourceResponseBase::includeCertificateInfo();
    uint64_t v76 = *(void *)(a1 + 256);
    atomic_fetch_add((atomic_uint *volatile)(v76 + 16), 1u);
    WebKit::WebPageProxy::prepareToLoadWebPage(a1, (uint64_t)&v141);
    {
      WebKit::liveProcessesLRU(void)::processes = 0u;
      *(_OWORD *)algn_1EB35A7B8 = 0u;
    }
    WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v76);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v76 + 8), v76);
    __int16 v77 = *(atomic_uint **)(v76 + 8);
    if (v77) {
      atomic_fetch_add(v77, 1u);
    }
    *(void *)long long buf = v77;
    WebKit::LoadParameters::LoadParameters((uint64_t)&buf[8], (uint64_t *)&v141);
    WTF::URL::URL((uint64_t)v122, (uint64_t *)a3);
    long long v78 = *(_OWORD *)(a3 + 56);
    *(_OWORD *)(a3 + 56) = 0u;
    long long v79 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)(a3 + 72) = 0u;
    uint64_t v80 = *(void *)(a3 + 48);
    uint64_t v123 = *(void *)(a3 + 40);
    *(void *)(a3 + 40) = 0;
    *(void *)char v124 = v80;
    *(_OWORD *)&v124[8] = v78;
    long long v125 = v79;
    *(void *)&long long v78 = *(void *)(a3 + 88);
    *(void *)(a3 + 88) = 0;
    uint64_t v126 = v78;
    uint64_t v81 = *(void *)(a3 + 96);
    *(void *)(a3 + 96) = 0;
    uint64_t v127 = v81;
    *(void *)&long long v78 = *(void *)(a3 + 104);
    *(void *)(a3 + 104) = 0;
    uint64_t v128 = v78;
    uint64_t v82 = *(void *)(a3 + 112);
    *(void *)(a3 + 112) = 0;
    uint64_t v129 = v82;
    LOBYTE(v130) = 0;
    char v131 = 0;
    if (*(unsigned char *)(a3 + 128))
    {
      uint64_t v108 = *(void *)(a3 + 120);
      *(void *)(a3 + 120) = 0;
      uint64_t v130 = v108;
      char v131 = 1;
    }
    long long v135 = *(_OWORD *)(a3 + 184);
    long long v136 = *(_OWORD *)(a3 + 200);
    *(_OWORD *)int v137 = *(_OWORD *)(a3 + 216);
    *(_DWORD *)&v137[15] = *(_DWORD *)(a3 + 231);
    long long v132 = *(_OWORD *)(a3 + 136);
    long long v133 = *(_OWORD *)(a3 + 152);
    long long v134 = *(_OWORD *)(a3 + 168);
    char v83 = *(const void **)(a3 + 240);
    *(void *)(a3 + 240) = 0;
    CFTypeRef v138 = v83;
    char v139 = *(unsigned char *)(a3 + 248);
    uint64_t v140 = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v84 = WTF::fastMalloc((WTF *)0x360);
    *(void *)uint64_t v84 = &unk_1EE9DA298;
    uint64_t v85 = *(void *)buf;
    *(void *)long long buf = 0;
    *(void *)(v84 + 8) = v85;
    WebKit::LoadParameters::LoadParameters(v84 + 16, (uint64_t *)&buf[8]);
    WTF::URL::URL(v84 + 600, v122);
    uint64_t v86 = v123;
    uint64_t v123 = 0;
    *(void *)(v84 + 640) = v86;
    *(_OWORD *)(v84 + 648) = *(_OWORD *)v124;
    *(void *)(v84 + 664) = *(void *)&v124[16];
    *(void *)(v84 + 672) = v125;
    uint64_t v87 = *((void *)&v125 + 1);
    *(_OWORD *)&v124[8] = 0u;
    long long v125 = 0u;
    *(void *)(v84 + 680) = v87;
    uint64_t v88 = v126;
    uint64_t v126 = 0;
    *(void *)(v84 + 688) = v88;
    uint64_t v89 = v127;
    uint64_t v127 = 0;
    *(void *)(v84 + 696) = v89;
    uint64_t v90 = v128;
    uint64_t v128 = 0;
    *(void *)(v84 + 704) = v90;
    uint64_t v91 = v129;
    uint64_t v129 = 0;
    *(void *)(v84 + 712) = v91;
    *(unsigned char *)(v84 + 720) = 0;
    *(unsigned char *)(v84 + 728) = 0;
    if (v131)
    {
      uint64_t v109 = v130;
      uint64_t v130 = 0;
      *(void *)(v84 + 720) = v109;
      *(unsigned char *)(v84 + 728) = 1;
    }
    long long v92 = v135;
    long long v93 = v136;
    long long v94 = *(_OWORD *)v137;
    *(_DWORD *)(v84 + 831) = *(_DWORD *)&v137[15];
    long long v95 = v133;
    long long v96 = v134;
    *(_OWORD *)(v84 + 736) = v132;
    *(_OWORD *)(v84 + 752) = v95;
    *(_OWORD *)(v84 + 800) = v93;
    *(_OWORD *)(v84 + 816) = v94;
    *(_OWORD *)(v84 + 768) = v96;
    *(_OWORD *)(v84 + 784) = v92;
    CFTypeRef v97 = v138;
    CFTypeRef v138 = 0;
    *(void *)(v84 + 840) = v97;
    *(unsigned char *)(v84 + 848) = v139;
    *(void *)(v84 + 856) = v140;
    long long v117 = (WTF::StringImpl *)v84;
    WebKit::WebProcessProxy::assumeReadAccessToBaseURL(v76, a1, &v111, &v117, 0);
    char v99 = v117;
    long long v117 = 0;
    if (v99) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v99 + 8))(v99);
    }
    CFTypeRef v100 = v138;
    CFTypeRef v138 = 0;
    if (v100) {
      CFRelease(v100);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v122, v98);
    WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&buf[8], v101);
    char v103 = *(unsigned int **)buf;
    *(void *)long long buf = 0;
    if (v103 && atomic_fetch_add((atomic_uint *volatile)v103, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v103);
      WTF::fastFree((WTF *)v103, v102);
    }
    *a5 = v36;
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v76 + 16));
    WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&v141, v104);
    uint64_t v107 = v111;
    char v111 = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2) {
        WTF::StringImpl::destroy(v107, v105);
      }
      else {
        *(_DWORD *)v107 -= 2;
      }
    }
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v115, (uint64_t)v105, v106);
  }
}

void WebKit::WebPageProxy::loadAlternateHTML(uint64_t a1, WebCore::DataSegment **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, const void *a6)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 760);
    uint64_t v15 = *(void *)(v13 + 1928);
    uint64_t v16 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v16) {
      LODWORD(v16) = *(_DWORD *)(v16 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v14;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&v77[0] = v15;
    WORD4(v77[0]) = 1024;
    *(_DWORD *)((char *)v77 + 10) = v16;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadAlternateHTML", buf, 0x26u);
  }
  if (*(unsigned char *)(a1 + 801) || *(unsigned char *)(a1 + 176))
  {
    uint64_t v17 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(v18 + 760);
      uint64_t v20 = *(void *)(v18 + 1928);
      uint64_t v21 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v21) {
        LODWORD(v21) = *(_DWORD *)(v21 + 108);
      }
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v19;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&v77[0] = v20;
      WORD4(v77[0]) = 1024;
      *(_DWORD *)((char *)v77 + 10) = v21;
      _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadAlternateHTML: page is closed (or other)", buf, 0x26u);
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 168);
    if (v22 && *(_DWORD *)(v22 + 4)) {
      *(unsigned char *)(a1 + 176) = 1;
    }
    if (!*(unsigned char *)(a1 + 800))
    {
      WebKit::Site::Site((WebKit::Site *)buf, (const WTF::URL *)a4);
      WebKit::WebPageProxy::launchProcess(a1, (WTF::ASCIICaseInsensitiveHash **)buf, 0);
      uint64_t v24 = *(WTF::StringImpl **)&buf[8];
      *(void *)&buf[8] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v23);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      uint64_t v25 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v23);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
    }
    uint64_t v26 = *(void *)(a1 + 32);
    uint64_t v27 = *(void *)(*(void *)(v26 + 992) + 8);
    if (v27)
    {
      uint64_t v28 = v27 - 16;
      CFRetain(*(CFTypeRef *)(v27 - 8));
    }
    else
    {
      uint64_t v28 = 0;
    }
    uint64_t v29 = *(void *)(a1 + 32);
    uint64_t v74 = v28;
    uint64_t v75 = v26 + 976;
    ++*(_DWORD *)(v26 + 1348);
    *(unsigned char *)(v26 + 1344) = 1;
    uint64_t v30 = *(WTF::StringImpl **)a5;
    if (*(void *)a5) {
      *(_DWORD *)v30 += 2;
    }
    *(void *)long long buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    *(void *)(v29 + 1176) = 0;
    uint64_t v32 = *(WTF::StringImpl **)(v29 + 1184);
    *(void *)(v29 + 1184) = v30;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v31);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    WTF::String::operator=((uint64_t *)(v29 + 1264), (WTF::StringImpl **)buf);
    *(_OWORD *)(v29 + 1272) = *(_OWORD *)&buf[8];
    *(_OWORD *)(v29 + 1288) = v77[0];
    char v34 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v33);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    uint64_t v35 = *(void *)(a1 + 32);
    *(unsigned char *)(v75 + 368) = 1;
    uint64_t v36 = (uint64_t *)(v35 + 1240);
    WTF::String::operator=((uint64_t *)(v35 + 1336), (WTF::StringImpl **)(v35 + 1240));
    WTF::String::operator=(v36, (WTF::StringImpl **)a5);
    uint64_t v37 = *(void *)(a1 + 328);
    if (v37)
    {
      CFRetain(*(CFTypeRef *)(v37 + 8));
      WTF::String::operator=((uint64_t *)(v37 + 168), (WTF::StringImpl **)(v37 + 128));
      long long v38 = *(_OWORD *)(v37 + 152);
      *(_OWORD *)(v37 + 176) = *(_OWORD *)(v37 + 136);
      *(_OWORD *)(v37 + 192) = v38;
      WTF::String::operator=((uint64_t *)(v37 + 128), (WTF::StringImpl **)a5);
      long long v39 = *(_OWORD *)(a5 + 24);
      *(_OWORD *)(v37 + 136) = *(_OWORD *)(a5 + 8);
      *(_OWORD *)(v37 + 152) = v39;
      CFRelease(*(CFTypeRef *)(v37 + 8));
    }
    uint64_t v85 = 0;
    char v86 = 0;
    char v87 = 0;
    char v88 = 0;
    char v89 = 0;
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v90);
    char v94 = 0;
    __int16 v95 = 0;
    __int16 v97 = 0;
    char v98 = 0;
    char v99 = 0;
    __int16 v100 = 0;
    char v101 = 0;
    char v102 = 0;
    char v103 = 0;
    char v104 = 0;
    char v105 = 0;
    __int16 v106 = 0;
    char v107 = 0;
    char v108 = 0;
    long long v92 = 0u;
    memset(v93, 0, 25);
    long long v91 = 0u;
    *(_DWORD *)((char *)v96 + 7) = 0;
    v96[2] = 0;
    v96[0] = 0;
    if (v87) {
      char v87 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v41 = (WTF::StringImpl *)v92;
    *(void *)&long long v92 = *(void *)buf;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, v40);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
    WTF::String::operator=((uint64_t *)&v92 + 1, a3);
    WTF::String::operator=(v93, (WTF::StringImpl **)a4);
    WTF::String::operator=(&v93[1], (WTF::StringImpl **)a5);
    WTF::String::operator=(&v93[2], (WTF::StringImpl **)(a1 + 168));
    uint64_t v42 = *a2;
    uint64_t v43 = WebCore::DataSegment::data(v42);
    uint64_t v44 = WebCore::DataSegment::size(v42);
    *(void *)long long buf = v43;
    *(void *)&buf[8] = v44;
    WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v73);
    uint64_t v46 = v73;
    CFTypeRef v73 = 0;
    uint64_t v47 = (unsigned int *)*((void *)&v91 + 1);
    *((void *)&v91 + 1) = v46;
    if (v47)
    {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v47, v45);
      __int16 v49 = (unsigned int *)v73;
      CFTypeRef v73 = 0;
      if (v49) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v49, v48);
      }
    }
    uint64_t v50 = *(void *)(a1 + 256);
    atomic_fetch_add((atomic_uint *volatile)(v50 + 16), 1u);
    *(void *)long long buf = &unk_1EE9DCAF8;
    WebKit::UserData::transform(a6, (uint64_t)buf, (uint64_t *)&v73);
    int v51 = v73;
    if (v73)
    {
      CFRetain(*((CFTypeRef *)v73 + 1));
      CFRetain(*((CFTypeRef *)v51 + 1));
    }
    uint64_t v52 = v96[0];
    v96[0] = v51;
    if (v52) {
      CFRelease(*(CFTypeRef *)(v52 + 8));
    }
    if (v51) {
      CFRelease(*((CFTypeRef *)v51 + 1));
    }
    uint64_t v53 = v73;
    CFTypeRef v73 = 0;
    if (v53) {
      CFRelease(*((CFTypeRef *)v53 + 1));
    }
    WebKit::WebPageProxy::prepareToLoadWebPage(a1, (uint64_t)&v85);
    *(void *)long long buf = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    atomic_fetch_add((atomic_uint *volatile)(v50 + 16), 1u);
    *(void *)&buf[8] = a1;
    *(void *)&uint8_t buf[16] = v50;
    WebKit::LoadParameters::LoadParameters((uint64_t)v77, &v85);
    CFTypeRef v54 = *(_DWORD **)a4;
    if (*(void *)a4) {
      *v54 += 2;
    }
    long long v78 = v54;
    long long v79 = *(_OWORD *)(a4 + 8);
    long long v80 = *(_OWORD *)(a4 + 24);
    int v55 = *(WTF::StringImpl **)a5;
    if (*(void *)a5) {
      *(_DWORD *)v55 += 2;
    }
    uint64_t v81 = v55;
    long long v56 = *(_OWORD *)(a5 + 24);
    long long v82 = *(_OWORD *)(a5 + 8);
    long long v83 = v56;
    WTF::RefCounter<WebKit::WebProcessProxy::ShutdownPreventingScopeType>::count((void *)(v50 + 1008), &v84);
    uint64_t v57 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 312));
    atomic_fetch_add((atomic_uint *volatile)(v57 + 16), 1u);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v73, (const WTF::URL *)a4);
    uint64_t v58 = WTF::fastMalloc((WTF *)0x2C0);
    *(void *)uint64_t v58 = &unk_1EE9DA2C0;
    *(void *)(v58 + 8) = *(void *)buf;
    *(void *)(v58 + 16) = *(void *)&buf[8];
    uint64_t v59 = *(void *)&buf[16];
    *(_OWORD *)&buf[8] = 0uLL;
    *(void *)(v58 + 24) = v59;
    WebKit::LoadParameters::LoadParameters(v58 + 32, (uint64_t *)v77);
    uint64_t v60 = v78;
    if (v78) {
      *v78 += 2;
    }
    *(void *)(v58 + 616) = v60;
    long long v61 = v80;
    *(_OWORD *)(v58 + 624) = v79;
    *(_OWORD *)(v58 + 640) = v61;
    uint64_t v62 = v81;
    if (v81) {
      *(_DWORD *)v81 += 2;
    }
    *(void *)(v58 + 656) = v62;
    long long v63 = v83;
    *(_OWORD *)(v58 + 664) = v82;
    *(_OWORD *)(v58 + 680) = v63;
    uint64_t v64 = v84;
    uint64_t v84 = 0;
    *(void *)(v58 + 696) = v64;
    uint64_t v72 = v58;
    WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(v57, v50, &v73, 0, &v72);
    uint64_t v66 = v72;
    uint64_t v72 = 0;
    if (v66) {
      (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
    }
    uint64_t v67 = v73;
    CFTypeRef v73 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2) {
        WTF::StringImpl::destroy(v67, v65);
      }
      else {
        *(_DWORD *)v67 -= 2;
      }
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v57 + 16));
    WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0::~$_0(buf, v68);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v50 + 16));
    WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&v85, v69);
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v74, v70, v71);
  }
}

void *WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[86];
  a1[86] = 0;
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)v3;
    uint64_t v5 = *(void *)(v3 + 8) - 1;
    *(void *)(v3 + 8) = v5;
    if (v4)
    {
      uint64_t v6 = *v4;
      if (!*v4) {
        goto LABEL_8;
      }
      char v7 = *(unsigned char *)(v3 + 16);
      *(unsigned char *)(v3 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
      *(unsigned char *)(v3 + 16) = v7;
      if (*(void *)v3) {
        goto LABEL_8;
      }
      uint64_t v5 = *(void *)(v3 + 8);
    }
    if (!v5) {
      MEMORY[0x199740C10](v3, 0x1020C40545B2139);
    }
  }
LABEL_8:
  char v8 = (WTF::StringImpl *)a1[81];
  a1[81] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  char v9 = (WTF::StringImpl *)a1[76];
  a1[76] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 3), a2);
  uint64_t v10 = a1[2];
  a1[2] = 0;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
  }
  uint64_t v11 = a1[1];
  a1[1] = 0;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  return a1;
}

void WebKit::WebPageProxy::navigateToPDFLinkWithSimulatedClick(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v32 = a4;
  uint64_t v33 = a3;
  uint64_t v6 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(v7 + 760);
    uint64_t v9 = *(void *)(v7 + 1928);
    uint64_t v10 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v10) {
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v35 = 2048;
    uint64_t v36 = v8;
    __int16 v37 = 2048;
    uint64_t v38 = v9;
    __int16 v39 = 1024;
    int v40 = v10;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::navigateToPDFLinkWithSimulatedClick:", buf, 0x26u);
  }
  if (*(unsigned char *)(a1 + 801))
  {
    uint64_t v11 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(v12 + 760);
      uint64_t v14 = *(void *)(v12 + 1928);
      uint64_t v15 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v15) {
        LODWORD(v15) = *(_DWORD *)(v15 + 108);
      }
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v35 = 2048;
      uint64_t v36 = v13;
      __int16 v37 = 2048;
      uint64_t v38 = v14;
      __int16 v39 = 1024;
      int v40 = v15;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::navigateToPDFLinkWithSimulatedClick: page is closed:", buf, 0x26u);
    }
  }
  else if ((WTF::protocolIsJavaScript() & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
    {
      WTF::URL::URL((uint64_t)buf, a2);
      WebKit::Site::Site((WebKit::Site *)&v30, (const WTF::URL *)buf);
      WebKit::WebPageProxy::launchProcess(a1, &v30, 0);
      uint64_t v17 = v31;
      uint64_t v31 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v16);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      uint64_t v18 = v30;
      uint64_t v30 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v16);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      uint64_t v19 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v16);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    uint64_t v20 = *(void *)(a1 + 256);
    uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v22 = 2325;
    *((void *)v22 + 1) = v21;
    *((void *)v22 + 66) = (char *)v22 + 16;
    *((void *)v22 + 67) = 512;
    *((void *)v22 + 68) = 0;
    *((void *)v22 + 70) = 0;
    *((void *)v22 + 69) = 0;
    IPC::Encoder::encodeHeader(v22);
    uint64_t v30 = v22;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v22, (uint64_t *)a2);
    IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v22, (int *)&v33);
    IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v22, (int *)&v32);
    buf[0] = 0;
    BYTE2(v36) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v20, &v30, 0, (uint64_t)buf, 1);
    if (BYTE2(v36))
    {
      uint64_t v24 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
    }
    uint64_t v25 = v30;
    uint64_t v30 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v23);
      WTF::fastFree(v28, v29);
    }
    uint64_t v26 = *(void *)(a1 + 256);
    uint64_t v27 = (unsigned int *)(v26 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v26 + 16), 1u);
    if (*(unsigned char *)(v26 + 169))
    {
      WebKit::ResponsivenessTimer::start(v26 + 56);
    }
    else if (!*(unsigned char *)(v26 + 185))
    {
      *(_WORD *)(v26 + 184) = 256;
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v27);
  }
}

void WebKit::WebPageProxy::stopLoading(WebKit::WebPageProxy *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *(void *)(v3 + 760);
    uint64_t v5 = *(void *)(v3 + 1928);
    uint64_t v6 = *(void *)(*((void *)this + 32) + 136);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = this;
    __int16 v26 = 2048;
    uint64_t v27 = v4;
    __int16 v28 = 2048;
    uint64_t v29 = v5;
    __int16 v30 = 1024;
    int v31 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::stopLoading:", buf, 0x26u);
  }
  if (*((unsigned char *)this + 801) || !*((unsigned char *)this + 800))
  {
    uint64_t v7 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *((void *)this + 4);
      uint64_t v9 = *(void *)(v8 + 760);
      uint64_t v10 = *(void *)(v8 + 1928);
      uint64_t v11 = *(void *)(*((void *)this + 32) + 136);
      if (v11) {
        LODWORD(v11) = *(_DWORD *)(v11 + 108);
      }
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = this;
      __int16 v26 = 2048;
      uint64_t v27 = v9;
      __int16 v28 = 2048;
      uint64_t v29 = v10;
      __int16 v30 = 1024;
      int v31 = v11;
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::stopLoading: page is not valid", buf, 0x26u);
    }
  }
  else
  {
    uint64_t v12 = *((void *)this + 32);
    uint64_t v13 = *(void *)(*((void *)this + 4) + 1928);
    uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v14 = 2498;
    *((void *)v14 + 1) = v13;
    *((void *)v14 + 66) = (char *)v14 + 16;
    *((void *)v14 + 67) = 512;
    *((void *)v14 + 68) = 0;
    *((void *)v14 + 70) = 0;
    *((void *)v14 + 69) = 0;
    IPC::Encoder::encodeHeader(v14);
    uint64_t v24 = v14;
    buf[0] = 0;
    BYTE2(v27) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v24, 0, (uint64_t)buf, 1);
    if (BYTE2(v27))
    {
      uint64_t v16 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    uint64_t v17 = v24;
    uint64_t v24 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v22, v23);
    }
    uint64_t v18 = (WTF::StringImpl *)*((void *)this + 149);
    if (v18)
    {
      WebKit::ProvisionalPageProxy::cancel(v18);
      uint64_t v19 = *((void *)this + 149);
      *((void *)this + 149) = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
    }
    uint64_t v20 = *((void *)this + 32);
    uint64_t v21 = (unsigned int *)(v20 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v20 + 16), 1u);
    if (*(unsigned char *)(v20 + 169))
    {
      WebKit::ResponsivenessTimer::start(v20 + 56);
    }
    else if (!*(unsigned char *)(v20 + 185))
    {
      *(_WORD *)(v20 + 184) = 256;
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v21);
  }
}

void WebKit::WebPageProxy::reload(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  v123[1] = *(const char ***)MEMORY[0x1E4F143B8];
  uint64_t v6 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(v7 + 760);
    uint64_t v9 = *(void *)(v7 + 1928);
    uint64_t v10 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v10) {
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v8;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&long long v117 = v9;
    WORD4(v117) = 1024;
    *(_DWORD *)((char *)&v117 + 10) = v10;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::reload:", buf, 0x26u);
  }
  uint64_t v11 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 312));
  uint64_t v12 = (unsigned int *)(v11 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 1u);
  *(void *)long long buf = 0;
  WebKit::AuxiliaryProcessProxy::checkForResponsiveness(v11, (uint64_t *)buf, 0);
  if (*(void *)buf) {
    (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v12);
  uint64_t v13 = *(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get(*(void *)(a1 + 48) + 24)
                  + 176);
  if (v13)
  {
    uint64_t v14 = (unsigned int *)(v13 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v13 + 16), 1u);
    *(void *)long long buf = 0;
    WebKit::AuxiliaryProcessProxy::checkForResponsiveness(v13, (uint64_t *)buf, 0);
    if (*(void *)buf) {
      (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v14);
  }
  int v112 = 0;
  int v15 = *(unsigned __int8 *)(a1 + 801);
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v16 = qword_1EB358050;
    BOOL v17 = os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT);
    if (v17)
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(v18 + 760);
      uint64_t v20 = *(void *)(v18 + 1928);
      uint64_t v21 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v21) {
        LODWORD(v21) = *(_DWORD *)(v21 + 108);
      }
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v19;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&long long v117 = v20;
      WORD4(v117) = 1024;
      *(_DWORD *)((char *)&v117 + 10) = v21;
      _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::launchProcessForReload:", buf, 0x26u);
      int v15 = *(unsigned __int8 *)(a1 + 801);
    }
    if (v15)
    {
      uint64_t v22 = qword_1EB358050;
      if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *(void *)(a1 + 32);
        uint64_t v24 = *(void *)(v23 + 760);
        uint64_t v25 = *(void *)(v23 + 1928);
        uint64_t v26 = *(void *)(*(void *)(a1 + 256) + 136);
        if (v26) {
          LODWORD(v26) = *(_DWORD *)(v26 + 108);
        }
        *(_DWORD *)long long buf = 134218752;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v24;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&long long v117 = v25;
        WORD4(v117) = 1024;
        *(_DWORD *)((char *)&v117 + 10) = v26;
        _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::launchProcessForReload: page is closed", buf, 0x26u);
      }
      *a3 = 0;
      goto LABEL_105;
    }
    uint64_t v38 = *(void *)(a1 + 664);
    uint64_t v39 = *(void *)(v38 + 16);
    if (!v39 || !*(void *)(v39 + 8) || !*(unsigned char *)(v38 + 48)) {
      goto LABEL_42;
    }
    unint64_t v40 = *(void *)(v38 + 40);
    if (v40 >= *(unsigned int *)(v38 + 36))
    {
      __break(0xC471u);
      goto LABEL_158;
    }
    uint64_t v41 = *(void *)(*(void *)(v38 + 24) + 8 * v40);
    if (v41)
    {
      WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(v41 + 56));
      WebKit::Site::Site((WebKit::Site *)&v110, (const WTF::URL *)buf);
      uint64_t v43 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2) {
          WTF::StringImpl::destroy(v43, v42);
        }
        else {
          *(_DWORD *)v43 -= 2;
        }
      }
    }
    else
    {
LABEL_42:
      uint64_t v44 = (const WTF::URL *)WTF::aboutBlankURL((WTF *)v17);
      WebKit::Site::Site((WebKit::Site *)&v110, v44);
    }
    WebKit::WebPageProxy::launchProcess(a1, &v110, 2);
    uint64_t v45 = *(void *)(a1 + 664);
    uint64_t v46 = *(void *)(v45 + 16);
    if (!v46 || !*(void *)(v46 + 8) || !*(unsigned char *)(v45 + 48)) {
      goto LABEL_59;
    }
    unint64_t v47 = *(void *)(v45 + 40);
    if (v47 >= *(unsigned int *)(v45 + 36))
    {
      __break(0xC471u);
      JUMPOUT(0x198E61DD0);
    }
    if (!*(void *)(*(void *)(v45 + 24) + 8 * v47))
    {
LABEL_59:
      uint64_t v59 = qword_1EB358050;
      if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v61 = *(void *)(a1 + 32);
        uint64_t v62 = *(void *)(v61 + 760);
        uint64_t v63 = *(void *)(v61 + 1928);
        uint64_t v64 = *(void *)(*(void *)(a1 + 256) + 136);
        if (v64) {
          LODWORD(v64) = *(_DWORD *)(v64 + 108);
        }
        *(_DWORD *)long long buf = 134218752;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v62;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&long long v117 = v63;
        WORD4(v117) = 1024;
        *(_DWORD *)((char *)&v117 + 10) = v64;
        _os_log_impl(&dword_1985F2000, v59, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::launchProcessForReload: no current item to reload", buf, 0x26u);
      }
      *a3 = 0;
LABEL_64:
      char v65 = v111;
      char v111 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2) {
          WTF::StringImpl::destroy(v65, v60);
        }
        else {
          *(_DWORD *)v65 -= 2;
        }
      }
      uint64_t v66 = v110;
      uint64_t v110 = 0;
      if (v66) {
        goto LABEL_102;
      }
      goto LABEL_105;
    }
    uint64_t v48 = *(void *)(a1 + 160);
    uint64_t v49 = *(void *)(*(void *)(a1 + 256) + 176);
    WebKit::WebBackForwardList::protectedCurrentItem((void *)v45, buf);
    WebKit::WebNavigationState::createReloadNavigation(&v115, v48, v49, (uint64_t *)buf);
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
    }
    uint64_t v50 = WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)a1, (uint64_t *)&v114);
    int v51 = v114;
    if (v114 && *((_DWORD *)v114 + 1))
    {
      uint64_t v52 = *(void *)(a1 + 32);
      uint64_t v53 = *(void *)(*(void *)(v52 + 992) + 8);
      if (v53)
      {
        CFTypeRef v54 = (WTF::StringImpl *)(v53 - 16);
        CFRetain(*(CFTypeRef *)(v53 - 8));
        uint64_t v55 = *(void *)(a1 + 32);
        int v51 = v114;
      }
      else
      {
        CFTypeRef v54 = 0;
        uint64_t v55 = *(void *)(a1 + 32);
      }
      char v105 = v54;
      uint64_t v106 = v52 + 976;
      ++*(_DWORD *)(v52 + 1348);
      *(unsigned char *)(v52 + 1344) = 1;
      uint64_t v56 = *(void *)(v115 + 16);
      if (v51) {
        *(_DWORD *)v51 += 2;
      }
      *(void *)long long buf = 0;
      WTF::URL::invalidate((WTF::URL *)buf);
      *(void *)(v55 + 1176) = v56;
      uint64_t v58 = *(WTF::StringImpl **)(v55 + 1184);
      *(void *)(v55 + 1184) = v51;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2) {
          WTF::StringImpl::destroy(v58, v57);
        }
        else {
          *(_DWORD *)v58 -= 2;
        }
      }
      WTF::String::operator=((uint64_t *)(v55 + 1264), (WTF::StringImpl **)buf);
      *(_OWORD *)(v55 + 1272) = *(_OWORD *)&buf[8];
      *(_OWORD *)(v55 + 1288) = v117;
      uint64_t v84 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 2) {
          WTF::StringImpl::destroy(v84, v82);
        }
        else {
          *(_DWORD *)v84 -= 2;
        }
      }
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v105, (uint64_t)v82, v83);
    }
    uint64_t v85 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)v50);
    uint64_t v86 = *(void *)(a1 + 664);
    uint64_t v87 = *(void *)(v86 + 16);
    if (v87 && *(void *)(v87 + 8) && *(unsigned char *)(v86 + 48))
    {
      unint64_t v88 = *(void *)(v86 + 40);
      if (v88 >= *(unsigned int *)(v86 + 36))
      {
        __break(0xC471u);
        JUMPOUT(0x198E61DD8);
      }
      uint64_t v89 = *(void *)(*(void *)(v86 + 24) + 8 * v88);
    }
    else
    {
      uint64_t v89 = 0;
    }
    WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(v89 + 56));
    WebCore::PublicSuffixStore::publicSuffix((uint64_t *)&v105, v85, (const WTF::URL *)buf);
    long long v91 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2) {
        WTF::StringImpl::destroy(v91, v90);
      }
      else {
        *(_DWORD *)v91 -= 2;
      }
    }
    uint64_t v92 = v115;
    *(void *)long long buf = *(void *)(v115 + 16);
    uint64_t v93 = *(void *)(a1 + 664);
    uint64_t v94 = *(void *)(v93 + 16);
    if (!v94 || !*(void *)(v94 + 8) || !*(unsigned char *)(v93 + 48))
    {
      uint64_t v96 = 0;
      goto LABEL_129;
    }
    unint64_t v95 = *(void *)(v93 + 40);
    if (v95 < *(unsigned int *)(v93 + 36))
    {
      uint64_t v96 = *(void *)(*(void *)(v93 + 24) + 8 * v95);
LABEL_129:
      *(_OWORD *)&buf[8] = *(_OWORD *)(v96 + 32);
      LOWORD(v117) = 3;
      BYTE8(v117) = 0;
      char v118 = 0;
      char v119 = *(unsigned char *)(a1 + 1360);
      char v120 = 0;
      char v121 = 0;
      __int16 v97 = v105;
      if (v105) {
        *(_DWORD *)v105 += 2;
      }
      char v122 = v97;
      v123[0] = 0;
      int v113 = buf;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GoToBackForwardItem>(*(void *)(a1 + 256), (uint64_t *)&v113, *(void *)(*(void *)(a1 + 32) + 1928), 0);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v123);
      char v99 = v122;
      char v122 = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2) {
          WTF::StringImpl::destroy(v99, v98);
        }
        else {
          *(_DWORD *)v99 -= 2;
        }
      }
      if (v118) {
        WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)((char *)&v117 + 8), v98);
      }
      uint64_t v100 = *(void *)(a1 + 256);
      if (*(unsigned char *)(v100 + 169))
      {
        WebKit::ResponsivenessTimer::start(v100 + 56);
      }
      else if (!*(unsigned char *)(v100 + 185))
      {
        *(_WORD *)(v100 + 184) = 256;
      }
      if (WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation((WebKit::WebPageProxy *)a1))
      {
        uint64_t v101 = *(void *)(a1 + 256) + 200;
        uint64_t v102 = WTF::fastMalloc((WTF *)0x28);
        *(void *)long long buf = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v102, v101, "Client reload", 14, 1, 0);
        *(_DWORD *)&buf[8] = 1;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v92 + 3464, (uint64_t)buf);
        WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v92 + 3424));
        if (*(_DWORD *)&buf[8] != -1) {
          ((void (*)(unsigned char **, unsigned char *))off_1EE9D9C18[*(unsigned int *)&buf[8]])(&v113, buf);
        }
      }
      *a3 = v92;
      char v103 = v105;
      char v105 = 0;
      if (v103)
      {
        if (*(_DWORD *)v103 == 2) {
          WTF::StringImpl::destroy(v103, v60);
        }
        else {
          *(_DWORD *)v103 -= 2;
        }
      }
      char v104 = v114;
      uint64_t v114 = 0;
      if (v104)
      {
        if (*(_DWORD *)v104 == 2) {
          WTF::StringImpl::destroy(v104, v60);
        }
        else {
          *(_DWORD *)v104 -= 2;
        }
      }
      goto LABEL_64;
    }
    __break(0xC471u);
LABEL_158:
    JUMPOUT(0x198E61DC8);
  }
  char v27 = a2;
  uint64_t v28 = *(void *)(a1 + 160);
  uint64_t v29 = *(void *)(*(void *)(a1 + 256) + 176);
  WebKit::WebBackForwardList::protectedCurrentItem(*(void **)(a1 + 664), buf);
  WebKit::WebNavigationState::createReloadNavigation(&v115, v28, v29, (uint64_t *)buf);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
  }
  WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)a1, (uint64_t *)&v114);
  __int16 v30 = v114;
  if (v114 && *((_DWORD *)v114 + 1))
  {
    uint64_t v31 = *(void *)(a1 + 32);
    uint64_t v32 = *(void *)(*(void *)(v31 + 992) + 8);
    if (v32)
    {
      uint64_t v33 = (WTF::StringImpl *)(v32 - 16);
      CFRetain(*(CFTypeRef *)(v32 - 8));
      uint64_t v34 = *(void *)(a1 + 32);
      __int16 v30 = v114;
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v34 = *(void *)(a1 + 32);
    }
    uint64_t v110 = v33;
    char v111 = (WTF::StringImpl *)(v31 + 976);
    ++*(_DWORD *)(v31 + 1348);
    *(unsigned char *)(v31 + 1344) = 1;
    uint64_t v35 = *(void *)(v115 + 16);
    if (v30) {
      *(_DWORD *)v30 += 2;
    }
    *(void *)long long buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    *(void *)(v34 + 1176) = v35;
    __int16 v37 = *(WTF::StringImpl **)(v34 + 1184);
    *(void *)(v34 + 1184) = v30;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v36);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    WTF::String::operator=((uint64_t *)(v34 + 1264), (WTF::StringImpl **)buf);
    *(_OWORD *)(v34 + 1272) = *(_OWORD *)&buf[8];
    *(_OWORD *)(v34 + 1288) = v117;
    long long v69 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2) {
        WTF::StringImpl::destroy(v69, v67);
      }
      else {
        *(_DWORD *)v69 -= 2;
      }
    }
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v110, (uint64_t)v67, v68);
  }
  if ((v27 & 4) != 0) {
    *(unsigned char *)(v115 + 3416) = 0;
  }
  uint64_t v70 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v70 + 16), 1u);
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    *(_OWORD *)algn_1EB35A7B8 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v70);
  if (v114 && *((_DWORD *)v114 + 1))
  {
    uint64_t v71 = *(void *)(a1 + 256);
    atomic_fetch_add((atomic_uint *volatile)(v71 + 16), 1u);
    WTF::URL::URL((uint64_t)buf, &v114);
    WebKit::WebPageProxy::currentResourceDirectoryURL((WebKit::WebPageProxy *)a1, (uint64_t)&v110);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
    uint64_t v72 = *(atomic_uint **)(a1 + 24);
    if (v72) {
      atomic_fetch_add(v72, 1u);
    }
    char v107 = v27;
    CFTypeRef v73 = v112;
    int v112 = 0;
    uint64_t v74 = v115;
    CFRetain(*(CFTypeRef *)(v115 + 8));
    uint64_t v109 = v74;
    uint64_t v75 = WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v75 = &unk_1EE9DA310;
    *(void *)(v75 + 8) = v72;
    char v105 = 0;
    uint64_t v106 = 0;
    *(void *)(v75 + 16) = v70;
    *(unsigned char *)(v75 + 24) = v27;
    char v108 = 0;
    *(void *)(v75 + 32) = v73;
    *(void *)(v75 + 40) = v74;
    int v113 = (unsigned char *)v75;
    WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(a1, v71, (const WTF::URL *)buf, (WTF::URL *)&v110, 1, (uint64_t *)&v113);
    uint64_t v76 = (uint64_t)v113;
    int v113 = 0;
    if (v76) {
      (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
    }
    uint64_t v109 = 0;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v108);
    uint64_t v78 = v106;
    uint64_t v106 = 0;
    if (v78) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v78 + 16));
    }
    long long v79 = (unsigned int *)v105;
    char v105 = 0;
    if (v79 && atomic_fetch_add((atomic_uint *volatile)v79, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v79);
      WTF::fastFree((WTF *)v79, v77);
    }
    long long v80 = v110;
    uint64_t v110 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2) {
        WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v77);
      }
      else {
        *(_DWORD *)v80 -= 2;
      }
    }
    uint64_t v81 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2) {
        WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v77);
      }
      else {
        *(_DWORD *)v81 -= 2;
      }
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v71 + 16));
    *a3 = v115;
  }
  else
  {
    *a3 = v115;
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v70 + 16));
  }
  uint64_t v66 = v114;
  uint64_t v114 = 0;
  if (v66)
  {
LABEL_102:
    if (*(_DWORD *)v66 == 2) {
      WTF::StringImpl::destroy(v66, v60);
    }
    else {
      *(_DWORD *)v66 -= 2;
    }
  }
LABEL_105:
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v112);
}

void WebKit::WebPageProxy::currentResourceDirectoryURL(WebKit::WebPageProxy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 4);
  uint64_t v4 = *(WTF::StringImpl **)(v3 + 1096);
  if (v4)
  {
    *(_DWORD *)v4 += 2;
    uint64_t v14 = v4;
    long long v5 = *(_OWORD *)(v3 + 1120);
    long long v15 = *(_OWORD *)(v3 + 1104);
    long long v16 = v5;
    if (*((_DWORD *)v4 + 1))
    {
      WTF::URL::URL(a2, (uint64_t *)&v14);
      uint64_t v4 = v14;
      goto LABEL_14;
    }
  }
  else
  {
    long long v7 = *(_OWORD *)(v3 + 1120);
    long long v15 = *(_OWORD *)(v3 + 1104);
    long long v16 = v7;
  }
  uint64_t v8 = *((void *)this + 83);
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9 || !*(void *)(v9 + 8) || !*(unsigned char *)(v8 + 48)) {
    goto LABEL_13;
  }
  unint64_t v10 = *(void *)(v8 + 40);
  if (v10 >= *(unsigned int *)(v8 + 36))
  {
    __break(0xC471u);
    return;
  }
  uint64_t v11 = *(void *)(*(void *)(v8 + 24) + 8 * v10);
  if (v11)
  {
    CFRetain(*(CFTypeRef *)(v11 + 8));
    uint64_t v12 = *(_DWORD **)(v11 + 344);
    if (v12) {
      *v12 += 2;
    }
    *(void *)a2 = v12;
    long long v13 = *(_OWORD *)(v11 + 352);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v11 + 368);
    *(_OWORD *)(a2 + 8) = v13;
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  else
  {
LABEL_13:
    *(void *)a2 = 0;
    WTF::URL::invalidate((WTF::URL *)a2);
  }
LABEL_14:
  uint64_t v14 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v6);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
}

void WebKit::WebPageProxy::recordAutomaticNavigationSnapshot(WebKit::WebPageProxy *this)
{
  if (!*((unsigned char *)this + 965))
  {
    uint64_t v2 = *((void *)this + 83);
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      if (*(void *)(v3 + 8) && *(unsigned char *)(v2 + 48))
      {
        unint64_t v4 = *(void *)(v2 + 40);
        if (v4 >= *(unsigned int *)(v2 + 36))
        {
          __break(0xC471u);
        }
        else
        {
          uint64_t v5 = *(void *)(*(void *)(v2 + 24) + 8 * v4);
          if (v5)
          {
            CFRetain(*(CFTypeRef *)(v5 + 8));
            if (*((unsigned char *)this + 927))
            {
              {
                byte_1EB35A7F0 = 0;
                WebKit::ViewSnapshotStore::singleton(void)::store = 0u;
                *(_OWORD *)&qword_1EB35A7E0 = 0u;
              }
              WebKit::ViewSnapshotStore::recordSnapshot((WebKit::ViewSnapshot *)&WebKit::ViewSnapshotStore::singleton(void)::store, this, (WTF::StringImpl **)v5);
            }
            uint64_t v6 = *(const void **)(v5 + 8);
            CFRelease(v6);
          }
        }
      }
    }
  }
}

void WebKit::WebPageProxy::goForward(WebKit::WebPageProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 4);
    uint64_t v6 = *(void *)(v5 + 760);
    uint64_t v7 = *(void *)(v5 + 1928);
    uint64_t v8 = *(void *)(*((void *)this + 32) + 136);
    if (v8) {
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    }
    int v12 = 134218752;
    long long v13 = this;
    __int16 v14 = 2048;
    uint64_t v15 = v6;
    __int16 v16 = 2048;
    uint64_t v17 = v7;
    __int16 v18 = 1024;
    int v19 = v8;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::goForward:", (uint8_t *)&v12, 0x26u);
  }
  uint64_t v9 = *((void *)this + 83);
  CFRetain(*(CFTypeRef *)(v9 + 8));
  uint64_t v10 = WebKit::itemSkippingBackForwardItemsAddedByJSWithoutUserGesture(v9, 1);
  if (v10)
  {
    uint64_t v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    CFRelease(*(CFTypeRef *)(v9 + 8));
    WebKit::WebPageProxy::goToBackForwardItem((uint64_t)this, v11, 2u, a2);
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  else
  {
    CFRelease(*(CFTypeRef *)(v9 + 8));
    *a2 = 0;
  }
}

void WebKit::WebPageProxy::goToBackForwardItem(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(v9 + 760);
    uint64_t v11 = *(void *)(v9 + 1928);
    uint64_t v12 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v12) {
      LODWORD(v12) = *(_DWORD *)(v12 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v10;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&long long v94 = v11;
    WORD4(v94) = 1024;
    *(_DWORD *)((char *)&v94 + 10) = v12;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::goToBackForwardItem:", buf, 0x26u);
  }
  if (!*(unsigned char *)(a1 + 801))
  {
    if (!*(unsigned char *)(a1 + 800))
    {
      WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(a2 + 56));
      WebKit::Site::Site((WebKit::Site *)&v83, (const WTF::URL *)buf);
      WebKit::WebPageProxy::launchProcess(a1, &v83, 0);
      int v19 = v84;
      uint64_t v84 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v18);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      uint64_t v20 = v83;
      long long v83 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v18);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      uint64_t v21 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v18);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      uint64_t v22 = *(void *)(a1 + 664);
      uint64_t v23 = *(void *)(v22 + 16);
      if (!v23 || !*(void *)(v23 + 8) || !*(unsigned char *)(v22 + 48)) {
        goto LABEL_29;
      }
      unint64_t v24 = *(void *)(v22 + 40);
      if (v24 >= *(unsigned int *)(v22 + 36)) {
        goto LABEL_106;
      }
      if (*(void *)(*(void *)(v22 + 24) + 8 * v24) != a2)
      {
LABEL_29:
        CFRetain(*(CFTypeRef *)(v22 + 8));
        WebKit::WebBackForwardList::goToItem((WebKit::WebBackForwardList *)v22, (WebKit::WebBackForwardListItem *)a2);
        CFRelease(*(CFTypeRef *)(v22 + 8));
      }
    }
    uint64_t v81 = a4;
    uint64_t v25 = *(void *)(a1 + 256);
    uint64_t v26 = (unsigned int *)(v25 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v25 + 16), 1u);
    uint64_t v27 = *(void *)(a1 + 160);
    uint64_t v28 = *(void *)(v25 + 176);
    CFRetain(*(CFTypeRef *)(a2 + 8));
    *(void *)long long buf = a2;
    WebKit::WebBackForwardList::protectedCurrentItem(*(void **)(a1 + 664), &v83);
    WebKit::WebNavigationState::createBackForwardNavigation(&v92, v27, v28, (uint64_t *)buf, (uint64_t *)&v83, a3);
    if (v83) {
      CFRelease(*((CFTypeRef *)v83 + 1));
    }
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
    }
    uint64_t v29 = *(void *)(a1 + 32);
    uint64_t v30 = *(void *)(*(void *)(v29 + 992) + 8);
    if (v30)
    {
      uint64_t v31 = v30 - 16;
      CFRetain(*(CFTypeRef *)(v30 - 8));
    }
    else
    {
      uint64_t v31 = 0;
    }
    uint64_t v32 = *(void *)(a1 + 32);
    v91[0] = v31;
    v91[1] = v29 + 976;
    ++*(_DWORD *)(v29 + 1348);
    *(unsigned char *)(v29 + 1344) = 1;
    uint64_t v80 = v92;
    uint64_t v33 = *(void *)(v92 + 16);
    uint64_t v34 = *(_DWORD **)(a2 + 56);
    if (v34) {
      *v34 += 2;
    }
    *(void *)long long buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    *(void *)(v32 + 1176) = v33;
    uint64_t v36 = *(WTF::StringImpl **)(v32 + 1184);
    *(void *)(v32 + 1184) = v34;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v35);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
    WTF::String::operator=((uint64_t *)(v32 + 1264), (WTF::StringImpl **)buf);
    *(_OWORD *)(v32 + 1272) = *(_OWORD *)&buf[8];
    *(_OWORD *)(v32 + 1288) = v94;
    uint64_t v38 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, v37);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
    if (*(void *)(a2 + 56)) {
      goto LABEL_51;
    }
    *(void *)long long buf = *(void *)(a2 + 392);
    {
      WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
    }
    uint64_t v39 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, buf);
    if (v39)
    {
      uint64_t v40 = v39;
      uint64_t v41 = (unsigned int *)(v39 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v39 + 16), 1u);
      atomic_fetch_add((atomic_uint *volatile)(v39 + 16), 1u);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v26);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v41);
      uint64_t v25 = v40;
      goto LABEL_51;
    }
    uint64_t v55 = *(void *)(a2 + 400);
    uint64_t v56 = *(void *)(a2 + 408);
    uint64_t v57 = WebKit::FrameState::stateForFrameID(a2 + 56, v55, v56);
    if (!v57) {
      goto LABEL_51;
    }
    uint64_t v58 = (const WTF::String *)v57;
    uint64_t v59 = *(void *)(a1 + 664);
    uint64_t v60 = *(void *)(v59 + 16);
    if (!v60 || !*(void *)(v60 + 8) || !*(unsigned char *)(v59 + 48))
    {
LABEL_82:
      uint64_t v62 = (CFTypeRef *)v59;
      CFRetain(*(CFTypeRef *)(v59 + 8));
      WebKit::WebBackForwardList::goToItem((WebKit::WebBackForwardList *)v62, (WebKit::WebBackForwardListItem *)a2);
      CFRelease(v62[1]);
      uint64_t v55 = *(void *)(a2 + 400);
      uint64_t v56 = *(void *)(a2 + 408);
LABEL_83:
      uint64_t v63 = WebKit::WebFrameProxy::webFrame(v55, v56);
      if (v63)
      {
        uint64_t v64 = v63;
        CFRetain(*(CFTypeRef *)(v63 + 8));
        *(void *)long long buf = 0;
        buf[8] = 0;
        uint8_t buf[16] = 0;
        LOBYTE(v94) = 0;
        char v95 = 0;
        WebCore::ResourceRequest::ResourceRequest((StringImpl *)v96);
        v111[144] = 0;
        __int16 v112 = 0;
        __int16 v114 = 0;
        char v115 = 0;
        char v116 = 0;
        __int16 v117 = 0;
        char v118 = 0;
        char v119 = 0;
        char v120 = 0;
        char v121 = 0;
        char v122 = 0;
        __int16 v123 = 0;
        char v124 = 0;
        char v125 = 0;
        long long v110 = 0u;
        memset(v111, 0, 25);
        long long v109 = 0u;
        void v113[2] = 0;
        memset(v113, 0, 11);
        WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v83, v58);
        WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v96, (uint64_t)&v83);
        uint64_t v66 = v85;
        uint64_t v85 = 0;
        uint64_t v67 = v103;
        char v103 = v66;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2) {
            WTF::StringImpl::destroy(v67, v65);
          }
          else {
            *(_DWORD *)v67 -= 2;
          }
        }
        CFTypeRef v68 = v86;
        uint64_t v86 = 0;
        long long v69 = v104;
        char v104 = v68;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2) {
            WTF::StringImpl::destroy(v69, v65);
          }
          else {
            *(_DWORD *)v69 -= 2;
          }
        }
        uint64_t v70 = v87;
        uint64_t v87 = 0;
        uint64_t v71 = v105;
        char v105 = v70;
        if (v71) {
          WTF::RefCounted<WebCore::FormData>::deref(v71);
        }
        uint64_t v106 = v88;
        char v107 = v89;
        CFTypeRef v72 = v90;
        CFTypeRef v90 = 0;
        CFTypeRef v73 = cf;
        CFTypeRef cf = v72;
        if (v73)
        {
          CFRelease(v73);
          CFTypeRef v79 = v90;
          CFTypeRef v90 = 0;
          if (v79) {
            CFRelease(v79);
          }
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v83);
        long long v94 = *(_OWORD *)(a2 + 400);
        if (!v95) {
          char v95 = 1;
        }
        uint64_t v74 = *(void *)(v80 + 16);
        if (!buf[16]) {
          uint8_t buf[16] = 1;
        }
        *(void *)&buf[8] = v74;
        BYTE1(v113[1]) = 1;
        *(unsigned char *)(v64 + 440) = 1;
        uint64_t v75 = *(atomic_uint **)(*(void *)(v64 + 32) + 16);
        atomic_fetch_add(v75 + 4, 1u);
        long long v83 = (WTF::StringImpl *)buf;
        uint64_t v76 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, (const WebKit::WebProcessProxy *)v75);
        if (v76) {
          __int16 v77 = (uint64_t *)(v76 + 16);
        }
        else {
          __int16 v77 = (uint64_t *)(*(void *)(a1 + 32) + 1928);
        }
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>((uint64_t)v75, (uint64_t *)&v83, *v77, 0);
        *uint64_t v81 = v92;
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v75 + 4);
        WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)buf, v78);
        CFRelease(*(CFTypeRef *)(v64 + 8));
        goto LABEL_74;
      }
LABEL_51:
      {
        WebKit::liveProcessesLRU(void)::processes = 0u;
        *(_OWORD *)algn_1EB35A7B8 = 0u;
      }
      BOOL v42 = WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v25);
      uint64_t v43 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)v42);
      WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(a2 + 56));
      WebCore::PublicSuffixStore::publicSuffix((uint64_t *)&v83, v43, (const WTF::URL *)buf);
      uint64_t v45 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, v44);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
      uint64_t v46 = v92;
      *(void *)long long buf = *(void *)(v92 + 16);
      *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 32);
      LOWORD(v94) = a3;
      BYTE8(v94) = 0;
      char v97 = 0;
      char v98 = *(unsigned char *)(a1 + 1360);
      char v99 = 0;
      char v100 = 0;
      unint64_t v47 = v83;
      long long v82 = buf;
      long long v83 = 0;
      uint64_t v101 = v47;
      uint64_t v102 = 0;
      uint64_t v48 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, (const WebKit::WebProcessProxy *)v25);
      if (v48) {
        uint64_t v49 = (uint64_t *)(v48 + 16);
      }
      else {
        uint64_t v49 = (uint64_t *)(*(void *)(a1 + 32) + 1928);
      }
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GoToBackForwardItem>(v25, (uint64_t *)&v82, *v49, 0);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v102);
      uint64_t v52 = v101;
      uint64_t v101 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2) {
          WTF::StringImpl::destroy(v52, v50);
        }
        else {
          *(_DWORD *)v52 -= 2;
        }
      }
      if (v97) {
        WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)((char *)&v94 + 8), v50);
      }
      if (*(unsigned char *)(v25 + 169))
      {
        WebKit::ResponsivenessTimer::start(v25 + 56);
        uint64_t v46 = v92;
        uint64_t v53 = v81;
      }
      else
      {
        uint64_t v53 = v81;
        if (!*(unsigned char *)(v25 + 185)) {
          *(_WORD *)(v25 + 184) = 256;
        }
      }
      *uint64_t v53 = v46;
      CFTypeRef v54 = v83;
      long long v83 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2) {
          WTF::StringImpl::destroy(v54, v50);
        }
        else {
          *(_DWORD *)v54 -= 2;
        }
      }
LABEL_74:
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v91, (uint64_t)v50, v51);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v25 + 16));
      return;
    }
    unint64_t v61 = *(void *)(v59 + 40);
    if (v61 < *(unsigned int *)(v59 + 36))
    {
      uint64_t v59 = *(void *)(a1 + 664);
      if (*(void *)(*(void *)(v59 + 24) + 8 * v61) == a2) {
        goto LABEL_83;
      }
      goto LABEL_82;
    }
LABEL_106:
    __break(0xC471u);
    JUMPOUT(0x198E629E0);
  }
  long long v13 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void *)(v14 + 760);
    uint64_t v16 = *(void *)(v14 + 1928);
    uint64_t v17 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v17) {
      LODWORD(v17) = *(_DWORD *)(v17 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v15;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&long long v94 = v16;
    WORD4(v94) = 1024;
    *(_DWORD *)((char *)&v94 + 10) = v17;
    _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::goToBackForwardItem: page is closed", buf, 0x26u);
  }
  *a4 = 0;
}

void WebKit::WebPageProxy::goBack(WebKit::WebPageProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 4);
    uint64_t v6 = *(void *)(v5 + 760);
    uint64_t v7 = *(void *)(v5 + 1928);
    uint64_t v8 = *(void *)(*((void *)this + 32) + 136);
    if (v8) {
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    }
    int v18 = 134218752;
    int v19 = this;
    __int16 v20 = 2048;
    uint64_t v21 = v6;
    __int16 v22 = 2048;
    uint64_t v23 = v7;
    __int16 v24 = 1024;
    int v25 = v8;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::goBack:", (uint8_t *)&v18, 0x26u);
  }
  uint64_t v9 = *((void *)this + 83);
  CFRetain(*(CFTypeRef *)(v9 + 8));
  uint64_t v10 = WebKit::itemSkippingBackForwardItemsAddedByJSWithoutUserGesture(v9, 0);
  if (!v10)
  {
    CFRelease(*(CFTypeRef *)(v9 + 8));
    *a2 = 0;
    return;
  }
  uint64_t v11 = v10;
  CFRetain(*(CFTypeRef *)(v10 + 8));
  CFRelease(*(CFTypeRef *)(v9 + 8));
  uint64_t v12 = *((void *)this + 83);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13 && *(void *)(v13 + 8) && *(unsigned char *)(v12 + 48))
  {
    unint64_t v14 = *(void *)(v12 + 40);
    if (v14 >= *(unsigned int *)(v12 + 36))
    {
      __break(0xC471u);
      return;
    }
    uint64_t v15 = *(void *)(*(void *)(v12 + 24) + 8 * v14);
    if (v15)
    {
      uint64_t v16 = WebKit::WebBackForwardListItem::childItemForFrameID(v11, *(void *)(v15 + 400), *(void *)(v15 + 408));
      if (v16)
      {
        uint64_t v17 = v16;
        CFRetain(v16[1]);
        CFRelease(*(CFTypeRef *)(v11 + 8));
        uint64_t v11 = (uint64_t)v17;
      }
    }
  }
  WebKit::WebPageProxy::goToBackForwardItem((uint64_t)this, v11, 1u, a2);
  CFRelease(*(CFTypeRef *)(v11 + 8));
}

void WebKit::WebPageProxy::tryRestoreScrollPosition(WebKit::WebPageProxy *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *(void *)(v3 + 760);
    uint64_t v5 = *(void *)(v3 + 1928);
    uint64_t v6 = *(void *)(*((void *)this + 32) + 136);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = this;
    __int16 v22 = 2048;
    uint64_t v23 = v4;
    __int16 v24 = 2048;
    uint64_t v25 = v5;
    __int16 v26 = 1024;
    int v27 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryRestoreScrollPosition:", buf, 0x26u);
  }
  if (*((unsigned char *)this + 801) || !*((unsigned char *)this + 800))
  {
    uint64_t v7 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *((void *)this + 4);
      uint64_t v9 = *(void *)(v8 + 760);
      uint64_t v10 = *(void *)(v8 + 1928);
      uint64_t v11 = *(void *)(*((void *)this + 32) + 136);
      if (v11) {
        LODWORD(v11) = *(_DWORD *)(v11 + 108);
      }
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = this;
      __int16 v22 = 2048;
      uint64_t v23 = v9;
      __int16 v24 = 2048;
      uint64_t v25 = v10;
      __int16 v26 = 1024;
      int v27 = v11;
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryRestoreScrollPosition: page is not valid", buf, 0x26u);
    }
  }
  else
  {
    uint64_t v12 = *((void *)this + 32);
    uint64_t v13 = *(void *)(*((void *)this + 4) + 1928);
    unint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v14 = 2516;
    *((void *)v14 + 1) = v13;
    *((void *)v14 + 66) = (char *)v14 + 16;
    *((void *)v14 + 67) = 512;
    *((void *)v14 + 68) = 0;
    *((void *)v14 + 70) = 0;
    *((void *)v14 + 69) = 0;
    IPC::Encoder::encodeHeader(v14);
    __int16 v20 = v14;
    buf[0] = 0;
    BYTE2(v23) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v20, 0, (uint64_t)buf, 1);
    if (BYTE2(v23))
    {
      uint64_t v16 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    uint64_t v17 = v20;
    __int16 v20 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v18, v19);
    }
  }
}

uint64_t WebKit::WebPageProxy::didChangeBackForwardList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 72) + 360))() & 1) == 0)
  {
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 88))(v8, a1, a2, a3);
    }
  }
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(*(void *)(v9 + 992) + 8);
  if (v10)
  {
    uint64_t v11 = v10 - 16;
    CFRetain(*(CFTypeRef *)(v10 - 8));
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  v17[0] = v11;
  v17[1] = v9 + 976;
  ++*(_DWORD *)(v9 + 1348);
  *(unsigned char *)(v9 + 1344) = 1;
  *(unsigned char *)(v12 + 1304) = WebKit::WebBackForwardList::backItem(*(void *)(a1 + 664)) != 0;
  uint64_t v13 = *(void *)(a1 + 32);
  *(unsigned char *)(v9 + 1344) = 1;
  *(unsigned char *)(v13 + 1305) = WebKit::WebBackForwardList::forwardItem(*(void *)(a1 + 664)) != 0;
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v17, v14, v15);
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 1600))(v7);
}

uint64_t WebKit::WebPageProxy::willGoToBackForwardListItem(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
  uint64_t v8 = WebKit::WebBackForwardList::itemForID(*(WebKit::WebBackForwardListItem **)(a1 + 664), a2);
  if (v8)
  {
    uint64_t v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 320))(*(void *)(a1 + 72), a1, v9, a3);
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 1600);

  return v10(v7);
}

uint64_t WebKit::WebPageProxy::shouldKeepCurrentBackForwardListItemInList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 72))(v6, a1, a2);
  }
  else {
    uint64_t v7 = 1;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 1600))(v5);
  return v7;
}

unsigned int *WebKit::WebPageProxy::setControlledByAutomation(unsigned int *this, int a2)
{
  if (*((unsigned __int8 *)this + 898) != a2)
  {
    uint64_t v2 = this;
    *((unsigned char *)this + 898) = a2;
    if (!*((unsigned char *)this + 801))
    {
      if (*((unsigned char *)this + 800))
      {
        LOBYTE(v7) = a2;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetControlledByAutomation>(*((void *)this + 32), (char *)&v7, *(void *)(*((void *)this + 4) + 1928), 0);
        uint64_t v3 = WebKit::WebsiteDataStore::networkProcess(*((WebKit::WebsiteDataStore **)v2 + 39));
        uint64_t v4 = (unsigned int *)(v3 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
        char v5 = *((unsigned char *)v2 + 898);
        uint64_t v6 = *(void *)(*((void *)v2 + 39) + 24);
        uint64_t v7 = &v6;
        char v8 = v5;
        WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetSessionIsControlledByAutomation>(v3, (uint64_t)&v7, 0, 0);
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
      }
    }
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetSessionIsControlledByAutomation>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 489;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void WebKit::WebPageProxy::createInspectorTarget(uint64_t a1, uint64_t a2, _DWORD **a3, char a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*a3 && (*a3)[1])
  {
    uint64_t v5 = *(void *)(a1 + 1144);
    WebKit::WebPageInspectorController::createInspectorTarget(v5, a3, a4);
  }
  else
  {
    uint64_t v6 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v7 = 136446210;
      char v8 = "void WebKit::WebPageProxy::createInspectorTarget(IPC::Connection &, const String &, Inspector::InspectorTargetType)";
      _os_log_fault_impl(&dword_1985F2000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 2495: Invalid message dispatched %{public}s", (uint8_t *)&v7, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::destroyInspectorTarget(WebKit::WebPageProxy *this, IPC::Connection *a2, WTF::StringImpl **a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*a3 && *((_DWORD *)*a3 + 1))
  {
    uint64_t v4 = (WebKit::WebPageInspectorController *)*((void *)this + 143);
    WebKit::WebPageInspectorController::destroyInspectorTarget(v4, a3, (const WTF::StringImpl *)a3);
  }
  else
  {
    uint64_t v5 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v6 = 136446210;
      int v7 = "void WebKit::WebPageProxy::destroyInspectorTarget(IPC::Connection &, const String &)";
      _os_log_fault_impl(&dword_1985F2000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 2501: Invalid message dispatched %{public}s", (uint8_t *)&v6, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::sendMessageToInspectorFrontend(WebKit::WebPageProxy *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F40EC000](*(void *)(*((void *)this + 143) + 40), a2, a3);
}

uint64_t WebKit::WebPageProxy::setRemoteInspectionNameOverride(uint64_t this, WTF::StringImpl **a2)
{
  uint64_t v2 = *(uint64_t **)(this + 1152);
  if (v2)
  {
    WTF::String::operator=(v2 + 6, a2);
    return Inspector::RemoteControllableTarget::update((Inspector::RemoteControllableTarget *)v2);
  }
  return this;
}

void WebKit::WebPageProxy::setBackgroundColor(uint64_t a1, unsigned __int8 *a2)
{
  if (!std::operator==[abi:sn180100]<WebCore::Color,WebCore::Color>((uint64_t *)(*(void *)(a1 + 32) + 104), (uint64_t *)a2))
  {
    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Color,false> const&>((WebCore::Color *)(*(void *)(a1 + 32) + 104), (uint64_t)a2);
    if (!*(unsigned char *)(a1 + 801))
    {
      if (*(unsigned char *)(a1 + 800))
      {
        uint64_t v4 = a2;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetBackgroundColor>(*(void *)(a1 + 256), &v4, *(void *)(*(void *)(a1 + 32) + 1928), 0);
      }
    }
  }
}

BOOL std::operator==[abi:sn180100]<WebCore::Color,WebCore::Color>(uint64_t *a1, uint64_t *a2)
{
  if (*((unsigned char *)a1 + 8)) {
    BOOL v2 = *((unsigned char *)a2 + 8) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*((unsigned char *)a1 + 8) != 0) == (*((unsigned char *)a2 + 8) != 0);
  }
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if ((*a1 & 0x8000000000000) == 0) {
    return (v5 & 0x8000000000000) == 0 && v4 == v5;
  }
  if ((v5 & 0x8000000000000) != 0)
  {
    BOOL v7 = 0;
    unint64_t v8 = 0;
    long long v9 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    long long v12 = *(_OWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
    long long v13 = v9;
    do
    {
      if (*((float *)&v13 + v8) != *((float *)&v12 + v8)) {
        break;
      }
      BOOL v7 = v8++ > 2;
    }
    while (v8 != 4);
    unint64_t v10 = HIBYTE(v5);
    BOOL v11 = BYTE6(v4) == BYTE6(v5);
    if (HIBYTE(v4) != v10) {
      BOOL v11 = 0;
    }
    return v7 && v11;
  }
  else
  {
    return 0;
  }
}

void WebKit::WebPageProxy::setTopContentInset(WebKit::WebPageProxy *this, float a2)
{
  if (*((float *)this + 193) != a2)
  {
    *((float *)this + 193) = a2;
    uint64_t v4 = *((void *)this + 5);
    if (v4) {
      uint64_t v5 = *(void *)(v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
    (*(void (**)(uint64_t))(*(void *)v5 + 248))(v5);
    (*(void (**)(uint64_t))(*(void *)v5 + 1600))(v5);
    if (!*((unsigned char *)this + 801))
    {
      if (*((unsigned char *)this + 800))
      {
        (*(void (**)(_DWORD *__return_ptr))(**((void **)this + 29) + 200))(v6);
        *(float *)&v6[1] = a2;
        *(void *)&v6[3] = v6;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetTopContentInsetFenced>(*((void *)this + 32), (uint64_t)&v6[1], *(void *)(*((void *)this + 4) + 1928), 0);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v6);
      }
    }
  }
}

uint64_t WebKit::WebPageProxy::closeOverlayedViews(WebKit::WebPageProxy *this)
{
  BOOL v2 = (_DWORD *)*((void *)this + 111);
  *((void *)this + 111) = 0;
  if (v2) {
    WTF::RefCounted<WebCore::ValidationBubble>::deref(v2);
  }
  WebKit::WebPageProxy::endDataListSuggestions((uint64_t)this);
  WebKit::WebPageProxy::endColorPicker((uint64_t)this);

  return WebKit::WebPageProxy::endDateTimePicker((uint64_t)this);
}

uint64_t WebKit::WebPageProxy::requestScroll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 1592))(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a2, a3, a4);
  long long v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 1600);

  return v9(v8);
}

float WebKit::WebPageProxy::viewScrollPosition(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  float v3 = (*(float (**)(uint64_t))(*(void *)v2 + 40))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1600))(v2);
  return v3;
}

void WebKit::WebPageProxy::setSuppressVisibilityUpdates(WebKit::WebPageProxy *this, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*((unsigned __int8 *)this + 953) != a2)
  {
    uint64_t v4 = qword_1EB358730;
    if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *((void *)this + 4);
      uint64_t v6 = *(void *)(v5 + 760);
      uint64_t v7 = *(void *)(v5 + 1928);
      uint64_t v8 = *(void *)(*((void *)this + 32) + 136);
      if (v8) {
        LODWORD(v8) = *(_DWORD *)(v8 + 108);
      }
      int v9 = 134219008;
      unint64_t v10 = this;
      __int16 v11 = 2048;
      uint64_t v12 = v6;
      __int16 v13 = 2048;
      uint64_t v14 = v7;
      __int16 v15 = 1024;
      int v16 = v8;
      __int16 v17 = 1024;
      int v18 = a2;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::setSuppressVisibilityUpdates: %d", (uint8_t *)&v9, 0x2Cu);
    }
    *((unsigned char *)this + 953) = a2;
    if ((a2 & 1) == 0) {
      WebKit::WebPageProxy::scheduleActivityStateUpdate(this);
    }
  }
}

void WebKit::WebPageProxy::setInitialFocus(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t *a5)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v5 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    uint64_t v6 = *(void (**)(uint64_t))(*(void *)v5 + 8);
    v6(v5);
  }
  else
  {
    uint64_t v11 = *a5;
    *a5 = 0;
    uint64_t v12 = *(void *)(a1 + 256) + 200;
    uint64_t v13 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v13, v12, "WebPageProxy::setInitialFocus", 30, 0, 0);
    uint64_t v14 = *(void *)(a1 + 256);
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 1928);
    int v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v16 = 2436;
    *((void *)v16 + 1) = v15;
    *((void *)v16 + 66) = (char *)v16 + 16;
    *((void *)v16 + 67) = 512;
    *((void *)v16 + 68) = 0;
    *((void *)v16 + 70) = 0;
    *((void *)v16 + 69) = 0;
    IPC::Encoder::encodeHeader(v16);
    uint64_t v34 = v16;
    __int16 v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x198E63E0CLL);
    }
    *__int16 v17 = a2;
    uint64_t v19 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x198E63E2CLL);
    }
    unsigned char *v19 = a3;
    int v21 = *(unsigned __int8 *)(a4 + 96);
    __int16 v22 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
    if (v21)
    {
      if (!v23)
      {
        __break(0xC471u);
        JUMPOUT(0x198E63E4CLL);
      }
      *__int16 v22 = 1;
      if (!*(unsigned char *)(a4 + 96))
      {
        uint64_t v30 = std::__throw_bad_optional_access[abi:sn180100]();
        WebKit::WebPageProxy::clearSelection(v30, v31);
        return;
      }
      IPC::ArgumentCoder<WebKit::WebKeyboardEvent,void>::encode(v16, a4);
    }
    else
    {
      if (!v23)
      {
        __break(0xC471u);
        JUMPOUT(0x198E63E6CLL);
      }
      *__int16 v22 = 0;
    }
    __int16 v24 = (void *)WTF::fastMalloc((WTF *)0x18);
    *__int16 v24 = &unk_1EE9DA400;
    v24[1] = v11;
    void v24[2] = v13;
    v32[0] = v24;
    v32[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    char v33 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v14, &v34, 0, (uint64_t)v32, 1);
    if (v33)
    {
      uint64_t v26 = v32[0];
      v32[0] = 0;
      if (v26) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
    }
    int v27 = v34;
    uint64_t v34 = 0;
    if (v27)
    {
      IPC::Encoder::~Encoder(v27, v25);
      WTF::fastFree(v28, v29);
    }
  }
}

void WebKit::WebPageProxy::clearSelection(uint64_t a1, long long *a2)
{
  if (!*(unsigned char *)(a1 + 801))
  {
    if (*(unsigned char *)(a1 + 800))
    {
      long long v5 = *a2;
      uint64_t v6 = *((void *)a2 + 2);
      char v2 = 0;
      float v3 = &v2;
      char v4 = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::ClearSelection>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::ClearSelection &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ClearSelection&)#1}>(a1, (uint64_t)&v5, (uint64_t)&v3);
    }
  }
}

uint64_t WebKit::WebPageProxy::restoreSelectionInFocusedEditableElement(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      char v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RestoreSelectionInFocusedEditableElement>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::validateCommand(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v3 + 16))(v3, 0, 0);
    char v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return v4(v3);
  }
  else
  {
    uint64_t v6 = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ValidateCommand,WTF::CompletionHandler<void ()(BOOL,int)>>(*(void *)(a1 + 256), &v6, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::increaseListLevel(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      char v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::IncreaseListLevel>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::decreaseListLevel(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      char v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DecreaseListLevel>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::changeListType(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      char v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ChangeListType>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setBaseWritingDirection(uint64_t result, char a2)
{
  if (!*(unsigned char *)(result + 801))
  {
    if (*(unsigned char *)(result + 800))
    {
      char v2 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetBaseWritingDirection>(*(void *)(result + 256), &v2, *(void *)(*(void *)(result + 32) + 1928), 0);
    }
  }
  return result;
}

_DWORD *WebKit::WebPageProxy::updateFontAttributesAfterEditorStateChange(WebKit::WebPageProxy *this, void *a2)
{
  uint64_t result = std::__optional_destruct_base<WebCore::FontAttributes,false>::reset[abi:sn180100]((_DWORD *)(*((void *)this + 4) + 128), a2);
  uint64_t v5 = *((void *)this + 4);
  if (*(unsigned char *)(v5 + 576))
  {
    LOBYTE(v6[0]) = 0;
    char v7 = 0;
    if (*(unsigned char *)(v5 + 560))
    {
      std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes const&,WebCore::FontAttributes*>(v6, v5 + 480);
      char v7 = 1;
      (*(void (**)(void, void *))(**((void **)this + 13) + 288))(*((void *)this + 13), v6);
      std::__optional_storage_base<WebCore::FontAttributes,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::FontAttributes,false>>((_DWORD *)(*((void *)this + 4) + 128), (unsigned __int8 *)v6);
    }
    return (_DWORD *)std::__optional_destruct_base<WebCore::FontAttributes,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::scheduleFullEditorStateUpdate(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      char v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ScheduleFullEditorStateUpdate>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::selectAll(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      char v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SelectAll>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

unsigned int *WebKit::WebPageProxy::executeEditCommand(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, WTF::StringImpl **a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    char v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return (unsigned int *)v7(v6);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 344);
    if (v12 || (uint64_t v12 = *(void *)(a1 + 328)) != 0)
    {
      uint64_t v4 = *(void *)(v12 + 280);
      unint64_t v13 = *(void *)(v12 + 272) & 0xFFFFFFFFFFFFFF00;
      uint64_t v14 = *(void *)(v12 + 272);
      char v15 = 1;
    }
    else
    {
      char v15 = 0;
      uint64_t v14 = 0;
      unint64_t v13 = 0;
    }
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
    __int16 v17 = *(atomic_uint **)(a1 + 24);
    if (v17) {
      atomic_fetch_add(v17, 1u);
    }
    uint64_t v18 = *a4;
    *a4 = 0;
    uint64_t v34 = (WTF *)v17;
    uint64_t v35 = v18;
    uint64_t v19 = *a2;
    if (*a2) {
      *(_DWORD *)v19 += 2;
    }
    uint64_t v36 = v19;
    uint64_t v20 = *a3;
    if (v20) {
      *(_DWORD *)v20 += 2;
    }
    unint64_t v21 = v13 | v14;
    __int16 v37 = v20;
    *(void *)&long long v38 = v21;
    *((void *)&v38 + 1) = v4;
    LOBYTE(v39) = v15;
    unsigned __int16 v22 = WebKit::pasteAccessCategoryForCommand(a2, v16);
    if (v22 >= 0x100u)
    {
      unsigned __int8 v24 = v22;
      uint64_t v25 = WTF::fastMalloc((WTF *)0x40);
      *(void *)uint64_t v25 = &unk_1EE9DA450;
      *(void *)(v25 + 8) = v17;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      *(void *)(v25 + 16) = v18;
      if (v19) {
        *(_DWORD *)v19 += 2;
      }
      *(void *)(v25 + 24) = v19;
      if (v20) {
        *(_DWORD *)v20 += 2;
      }
      *(void *)(v25 + 32) = v20;
      long long v26 = v38;
      *(void *)(v25 + 56) = v39;
      *(_OWORD *)(v25 + 40) = v26;
      uint64_t v33 = v25;
      *(void *)&long long v30 = v21;
      *((void *)&v30 + 1) = v4;
      char v31 = v15;
      *(_DWORD *)uint64_t v32 = *(_DWORD *)v40;
      *(_DWORD *)&v32[3] = *(_DWORD *)&v40[3];
      WebKit::WebPageProxy::willPerformPasteCommand((WebKit::WebPasteboardProxy *)a1, v24, &v33, &v30);
      uint64_t v27 = v33;
      uint64_t v33 = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
    else
    {
      WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()((uint64_t *)&v34);
      uint64_t v20 = v37;
    }
    __int16 v37 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v23);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    uint64_t v28 = v36;
    uint64_t v36 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v23);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    uint64_t v29 = v35;
    uint64_t v35 = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    uint64_t result = (unsigned int *)v34;
    uint64_t v34 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v23);
    }
  }
  return result;
}

uint64_t WebKit::pasteAccessCategoryForCommand(WTF::ASCIICaseInsensitiveHash **this, const WTF::String *a2)
{
  v40[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = &qword_1EB359000;
  if (byte_1EB359C47) {
    goto LABEL_2;
  }
  char v34 = 0;
  WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>::KeyValuePair<WTF::ASCIILiteral,WebCore::DOMPasteAccessCategory>((uint64_t)v36, (uint64_t)"Paste", 6, &v34);
  char v33 = 0;
  WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>::KeyValuePair<WTF::ASCIILiteral,WebCore::DOMPasteAccessCategory>((uint64_t)&v37, (uint64_t)"PasteAndMatchStyle", 19, &v33);
  char v32 = 0;
  WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>::KeyValuePair<WTF::ASCIILiteral,WebCore::DOMPasteAccessCategory>((uint64_t)&v38, (uint64_t)"PasteAsQuotation", 17, &v32);
  char v31 = 0;
  WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>::KeyValuePair<WTF::ASCIILiteral,WebCore::DOMPasteAccessCategory>((uint64_t)&v39, (uint64_t)"PasteAsPlainText", 17, &v31);
  char v30 = 1;
  WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>::KeyValuePair<WTF::ASCIILiteral,WebCore::DOMPasteAccessCategory>((uint64_t)v40, (uint64_t)"PasteFont", 10, &v30);
  uint64_t v14 = 0;
  uint64_t Table = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::allocateTable(0x10u);
  *(_OWORD *)(Table - 16) = xmmword_1994F7180;
  do
  {
    uint64_t v15 = Table;
    if (Table
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::DOMPasteAccessCategory,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::DOMPasteAccessCategory>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&Table),
          (uint64_t v15 = Table) != 0))
    {
      int v16 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      int v16 = 0;
    }
    __int16 v17 = (WTF::ASCIICaseInsensitiveHash **)&v36[16 * v14];
    unsigned int v18 = WTF::ASCIICaseInsensitiveHash::hash(*v17, a2);
    uint64_t v19 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v21 = v18 & v16;
      uint64_t v22 = *(void *)(v15 + 16 * (v18 & v16));
      if (v22 == -1)
      {
        uint64_t v19 = v15 + 16 * v21;
        goto LABEL_27;
      }
      if (!v22) {
        break;
      }
      if (WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>(v22, (uint64_t)*v17)) {
        goto LABEL_36;
      }
LABEL_27:
      unsigned int v18 = i + v21;
    }
    uint64_t v29 = v15 + 16 * v21;
    if (v19)
    {
      *(void *)uint64_t v19 = 0;
      *(unsigned char *)(v19 + 8) = 0;
      --*(_DWORD *)(Table - 16);
      uint64_t v29 = v19;
    }
    WTF::String::operator=((uint64_t *)v29, (WTF::StringImpl **)&v36[16 * v14]);
    *(unsigned char *)(v29 + 8) = *((unsigned char *)v17 + 8);
    uint64_t v23 = Table;
    if (Table) {
      int v24 = *(_DWORD *)(Table - 12) + 1;
    }
    else {
      int v24 = 1;
    }
    *(_DWORD *)(Table - 12) = v24;
    uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
    unint64_t v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25) {
LABEL_35:
      }
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::DOMPasteAccessCategory,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::DOMPasteAccessCategory>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&Table);
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_35;
    }
LABEL_36:
    ++v14;
  }
  while (v14 != 5);
  qword_1EB359C60 = Table;
  for (uint64_t j = 64; j != -16; j -= 16)
  {
    uint64_t v28 = *(WTF::StringImpl **)&v36[j];
    *(void *)&v36[j] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, a2);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }
  byte_1EB359C47 = 1;
  uint64_t v3 = &qword_1EB359000;
LABEL_2:
  uint64_t v4 = v3[396];
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 8);
    int v6 = WTF::ASCIICaseInsensitiveHash::hash(*this, a2);
    for (k = 0; ; int v6 = k + v8)
    {
      uint64_t v8 = v6 & v5;
      uint64_t v9 = *(void *)(v4 + 16 * v8);
      if (v9 != -1)
      {
        if (!v9)
        {
          uint64_t v10 = v3[396];
          if (!v10)
          {
            unsigned int v12 = 0;
            return v12 | (v10 << 8);
          }
          uint64_t v11 = v10 + 16 * *(unsigned int *)(v10 - 4);
          goto LABEL_11;
        }
        if (WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>(v9, (uint64_t)*this)) {
          break;
        }
      }
      ++k;
    }
    uint64_t v11 = v4 + 16 * v8;
    uint64_t v10 = v3[396];
    if (!v10) {
      goto LABEL_12;
    }
LABEL_11:
    v10 += 16 * *(unsigned int *)(v10 - 4);
LABEL_12:
    if (v10 == v11) {
      goto LABEL_14;
    }
    unsigned int v12 = *(unsigned __int8 *)(v11 + 8);
    LODWORD(v10) = 1;
  }
  else
  {
LABEL_14:
    unsigned int v12 = 0;
    LODWORD(v10) = 0;
  }
  return v12 | (v10 << 8);
}

uint64_t WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1 || (uint64_t v2 = *(void *)(v1 + 8)) == 0)
  {
    uint64_t v15 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
    int v16 = *(uint64_t (**)(uint64_t))(*(void *)v15 + 8);
    uint64_t result = v15;
LABEL_11:
    return v16(result);
  }
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  int v5 = *((unsigned __int8 *)a1 + 48);
  v21[0] = a1 + 2;
  v21[1] = a1 + 3;
  uint64_t v6 = a1[1];
  a1[1] = 0;
  *(void *)&long long v20 = v6;
  uint64_t v7 = *(void *)(v1 + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(v8 + 256) + 200;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x28);
  *((void *)&v20 + 1) = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v10, v9, "WebPageProxy::executeEditCommand", 33, 0, 0);
  if (v5)
  {
    uint64_t v11 = WebKit::WebFrameProxy::webFrame(v3, v4);
    if (v11)
    {
      uint64_t v12 = v11;
      CFRetain(*(CFTypeRef *)(v11 + 8));
      uint64_t v13 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(v2 + 1400), (const WebKit::WebPageProxy *)(v2 - 16), *(const WebKit::WebProcessProxy **)(*(void *)(v12 + 32) + 16));
      if (v13)
      {
        WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ExecuteEditCommandWithCallback,WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},unsigned long long>(*(void *)(v13 + 24), v21, &v20, *(void *)(v13 + 16));
        CFRelease(*(CFTypeRef *)(v12 + 8));
        goto LABEL_16;
      }
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ExecuteEditCommandWithCallback,WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},unsigned long long>(*(void *)(v2 + 240), v21, &v20, *(void *)(*(void *)(v2 + 16) + 1928));
LABEL_16:
  if (*((void *)&v20 + 1))
  {
    WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(*((WebKit::ProcessThrottlerActivity **)&v20 + 1), v14);
    WTF::fastFree(v18, v19);
  }
  uint64_t result = v20;
  if ((void)v20)
  {
    int v16 = *(uint64_t (**)(uint64_t))(*(void *)v20 + 8);
    goto LABEL_11;
  }
  return result;
}

void WebKit::WebPageProxy::executeEditCommand(WebKit::WebPageProxy *this, WTF::ASCIICaseInsensitiveHash **a2, WTF::StringImpl **a3)
{
  if (*((unsigned char *)this + 801)) {
    return;
  }
  if (!*((unsigned char *)this + 800)) {
    return;
  }
  uint64_t v6 = *((void *)this + 43);
  if (!v6)
  {
    uint64_t v6 = *((void *)this + 41);
    if (!v6) {
      return;
    }
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v7 = *(void *)(v6 + 272);
  uint64_t v8 = *(void *)(v6 + 280);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
  uint64_t v10 = (atomic_uint *)*((void *)this + 3);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  char v33 = (WTF *)v10;
  uint64_t v11 = *a2;
  if (*a2) {
    *(_DWORD *)v11 += 2;
  }
  char v34 = v11;
  uint64_t v12 = *a3;
  if (v12) {
    *(_DWORD *)v12 += 2;
  }
  uint64_t v35 = v12;
  *(void *)&long long v36 = v7;
  *((void *)&v36 + 1) = v8;
  unsigned __int16 v13 = WebKit::pasteAccessCategoryForCommand(a2, v9);
  if (v13 >= 0x100u)
  {
    unsigned __int8 v20 = v13;
    uint64_t v21 = WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v21 = &unk_1EE9DA478;
    *(void *)(v21 + 8) = v10;
    char v33 = 0;
    if (v11) {
      *(_DWORD *)v11 += 2;
    }
    *(void *)(v21 + 16) = v11;
    if (v12) {
      *(_DWORD *)v12 += 2;
    }
    *(void *)(v21 + 24) = v12;
    *(_OWORD *)(v21 + 32) = v36;
    *(void *)&long long v40 = v21;
    *(void *)&long long v31 = v7;
    *((void *)&v31 + 1) = v8;
    char v32 = 1;
    unint64_t v22 = WebKit::WebPageProxy::willPerformPasteCommand(this, v20, (uint64_t *)&v40, &v31);
    char v23 = (char)v14;
    uint64_t v24 = v40;
    *(void *)&long long v40 = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
    if (v23)
    {
      uint64_t v25 = WebKit::WebsiteDataStore::networkProcess(*((WebKit::WebsiteDataStore **)this + 39));
      unint64_t v26 = (unsigned int *)(v25 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v25 + 16), 1u);
      uint64_t v27 = *(atomic_uchar *volatile ***)(v25 + 144);
      if (!v27)
      {
        __break(0xC471u);
        JUMPOUT(0x198E64DA0);
      }
      WTF::ApproximateTime::now((WTF::ApproximateTime *)v25);
      IPC::Connection::waitForAsyncReplyAndDispatchImmediately<Messages::NetworkProcess::AllowFilesAccessFromWebProcess>(v27, v22, v28 + 0.1);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v26);
    }
    goto LABEL_32;
  }
  if (byte_1EB359C48)
  {
    if (v10) {
      goto LABEL_14;
    }
  }
  else
  {
    WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
    qword_1EB359C68 = (uint64_t)&WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::impl;
    byte_1EB359C48 = 1;
    if (v10)
    {
LABEL_14:
      if (*((void *)v10 + 1))
      {
        int v16 = WTF::equal(v11, (const WTF::StringImpl *)qword_1EB359C68, v15);
        uint64_t v17 = *((void *)v10 + 1);
        if (v16)
        {
          uint64_t v18 = v17 - 16;
          if (!v17) {
            uint64_t v18 = 0;
          }
          ++*(_DWORD *)(v18 + 908);
        }
        if (v17) {
          uint64_t v19 = v17 - 16;
        }
        else {
          uint64_t v19 = 0;
        }
        long long v40 = v36;
        v37[0] = &v34;
        v37[1] = &v35;
        char v41 = 1;
        uint64_t v38 = v37;
        char v39 = 0;
        WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::ExecuteEditCommand>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::ExecuteEditCommand &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ExecuteEditCommand&)#1}>(v19, (uint64_t)&v40, (uint64_t)&v38);
        uint64_t v12 = v35;
      }
    }
  }
LABEL_32:
  uint64_t v35 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v14);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v29 = v34;
  char v34 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v14);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  char v30 = (unsigned int *)v33;
  char v33 = 0;
  if (v30)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v14);
    }
  }
  CFRelease(*(CFTypeRef *)(v6 + 8));
}

uint64_t IPC::Connection::waitForAsyncReplyAndDispatchImmediately<Messages::NetworkProcess::AllowFilesAccessFromWebProcess>(atomic_uchar *volatile **a1, uint64_t a2, double a3)
{
  IPC::Connection::waitForMessage(a1, 0xB8Fu, a2, 0, (uint64_t)&v13, a3);
  int v4 = v14;
  if (!v14)
  {
    uint64_t v6 = *(void *)(v13 + 64);
    if (v6 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x198E64F34);
    }
    IPC::Connection::takeAsyncReplyHandler((os_unfair_lock_s *)a1, v6, &v12);
    uint64_t v7 = v12;
    if (v12)
    {
      if (v14) {
        goto LABEL_15;
      }
      uint64_t v12 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v13);
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      uint64_t v8 = v12;
      uint64_t v12 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = 14;
    }
    int v4 = v14;
    if (v14 == -1) {
      return v5;
    }
LABEL_12:
    ((void (*)(uint64_t *, uint64_t *))off_1EE9D9AC8[v4])(&v12, &v13);
    return v5;
  }
  if (v14 == 1)
  {
    uint64_t v5 = v13;
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::WebPageProxy::setEditable(v10, v11);
}

uint64_t WebKit::WebPageProxy::setEditable(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 688) != a2)
  {
    *(unsigned char *)(this + 688) = a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        char v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetEditable>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setMuted(uint64_t a1, unsigned __int8 a2)
{
  int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v4 = &unk_1EE9DB1D0;
  uint64_t v7 = v4;
  WebKit::WebPageProxy::setMuted(a1, a2, (uint64_t *)&v7);
  uint64_t result = (uint64_t)v7;
  if (v7)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*v7 + 8);
    return v6();
  }
  return result;
}

uint64_t WebKit::WebPageProxy::stopMakingViewBlankDueToLackOfRenderingUpdateIfNecessary(uint64_t this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(this + 966))
  {
    uint64_t v1 = this;
    char v2 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(v1 + 32);
      uint64_t v4 = *(void *)(v3 + 760);
      uint64_t v5 = *(void *)(v3 + 1928);
      uint64_t v6 = *(void *)(*(void *)(v1 + 256) + 136);
      if (v6) {
        LODWORD(v6) = *(_DWORD *)(v6 + 108);
      }
      int v9 = 134218752;
      uint64_t v10 = v1;
      __int16 v11 = 2048;
      uint64_t v12 = v4;
      __int16 v13 = 2048;
      uint64_t v14 = v5;
      __int16 v15 = 1024;
      int v16 = v6;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::stopMakingViewBlankDueToLackOfRenderingUpdateIfNecessary:", (uint8_t *)&v9, 0x26u);
    }
    uint64_t v7 = *(void *)(v1 + 40);
    if (v7) {
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v8 + 1592))(v8);
    (*(void (**)(uint64_t, void))(*(void *)v8 + 1456))(v8, 0);
    this = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 1600))(v8);
    *(unsigned char *)(v1 + 966) = 0;
  }
  return this;
}

uint64_t WebKit::WebPageProxy::makeViewBlankIfUnpaintedSinceLastLoadCommit(uint64_t this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(this + 805))
  {
    uint64_t v1 = this;
    if (byte_1EB359C42)
    {
      this = byte_1EB359C41;
      if (!byte_1EB359C41) {
        return this;
      }
    }
    else
    {
      this = WTF::linkedOnOrAfterSDKWithBehavior();
      byte_1EB359C41 = this;
      byte_1EB359C42 = 1;
      if (!this) {
        return this;
      }
    }
    char v2 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(v1 + 32);
      uint64_t v4 = *(void *)(v3 + 760);
      uint64_t v5 = *(void *)(v3 + 1928);
      uint64_t v6 = *(void *)(*(void *)(v1 + 256) + 136);
      if (v6) {
        LODWORD(v6) = *(_DWORD *)(v6 + 108);
      }
      int v9 = 134218752;
      uint64_t v10 = v1;
      __int16 v11 = 2048;
      uint64_t v12 = v4;
      __int16 v13 = 2048;
      uint64_t v14 = v5;
      __int16 v15 = 1024;
      int v16 = v6;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::makeViewBlankIfUnpaintedSinceLastLoadCommit: Making the view blank because of a JS prompt before the first paint for its page", (uint8_t *)&v9, 0x26u);
    }
    uint64_t v7 = *(void *)(v1 + 40);
    if (v7) {
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v8 + 1592))(v8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 1456))(v8, 1);
    this = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 1600))(v8);
    *(unsigned char *)(v1 + 966) = 1;
  }
  return this;
}

uint64_t WebKit::WebPageProxy::discardQueuedMouseEvents(uint64_t this)
{
  uint64_t v1 = this;
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 32);
    unint64_t v3 = *(void *)(v2 + 856);
    unint64_t v4 = *(void *)(v2 + 864);
    unint64_t v5 = v4;
    if (v3 > v4) {
      unint64_t v5 = v4 + *(unsigned int *)(v2 + 880);
    }
    if (v5 - v3 < 2) {
      break;
    }
    if (v3 == v4)
    {
      this = 526;
      __break(0xC471u);
      return this;
    }
    if (!v4) {
      unint64_t v4 = *(unsigned int *)(v2 + 880);
    }
    *(void *)(v2 + 864) = v4 - 1;
    this = (uint64_t)WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct((WTF::StringImpl *)(*(void *)(v2 + 872) + 160 * v4 - 160), (WTF::StringImpl *)(*(void *)(v2 + 872) + 160 * v4));
  }
  return this;
}

void WebKit::WebPageProxy::dragEntered(WebKit::WebPageProxy *this, DragData *a2, WTF::StringImpl **a3)
{
  uint64_t v6 = WebKit::WebPasteboardProxy::singleton(this);
  WebKit::WebPasteboardProxy::grantAccess((uint64_t)v6, *((void *)this + 32), a3, 0);
  WebKit::WebPageProxy::launchInitialProcessIfNecessary((WebKit::WebProcessProxy **)this);
  v7[0] = 0;
  v7[16] = 0;
  WebKit::WebPageProxy::performDragControllerAction((uint64_t)this, 0, (uint64_t)a2, (uint64_t)v7);
}

WTF *WebKit::WebPageProxy::launchInitialProcessIfNecessary(WebKit::WebProcessProxy **this)
{
  uint64_t result = (WTF *)WebKit::WebProcessProxy::isDummyProcessProxy(this[32]);
  if (result)
  {
    unint64_t v3 = (const WTF::URL *)WTF::aboutBlankURL(result);
    WebKit::Site::Site((WebKit::Site *)&v6, v3);
    WebKit::WebPageProxy::launchProcess((uint64_t)this, &v6, 0);
    unint64_t v5 = v7;
    uint64_t v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF *)WTF::StringImpl::destroy(result, v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WebKit::WebPageProxy::performDragControllerAction(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 801) && *(unsigned char *)(a1 + 800))
  {
    *(void *)&long long v70 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    *((void *)&v70 + 1) = a1;
    char v71 = a2;
    *(_OWORD *)CFTypeRef v72 = *(_OWORD *)a3;
    *(_OWORD *)&v72[10] = *(_OWORD *)(a3 + 10);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v73, a3 + 32);
    long long v75 = *(_OWORD *)(a3 + 48);
    char v76 = *(unsigned char *)(a3 + 64);
    uint64_t v8 = *(WTF::StringImpl **)(a3 + 72);
    if (v8) {
      *(_DWORD *)v8 += 2;
    }
    __int16 v77 = v8;
    char v78 = *(unsigned char *)(a3 + 80);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v68, a3 + 32);
    *(void *)&long long v50 = a1;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
    int v9 = *(atomic_uint **)(a1 + 24);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
    *((void *)&v50 + 1) = v9;
    *(_OWORD *)int v51 = *(_OWORD *)a4;
    v51[16] = *(unsigned char *)(a4 + 16);
    v51[24] = a2;
    v52[0] = *(_OWORD *)a3;
    *(_OWORD *)((char *)v52 + 10) = *(_OWORD *)(a3 + 10);
    uint64_t v10 = *(void *)(a3 + 32);
    *(void *)(a3 + 32) = 0;
    uint64_t v53 = v10;
    uint64_t v11 = *(void *)(a3 + 40);
    *(void *)(a3 + 40) = 0;
    uint64_t v54 = v11;
    long long v12 = *(_OWORD *)(a3 + 48);
    char v56 = *(unsigned char *)(a3 + 64);
    long long v55 = v12;
    uint64_t v13 = *(void *)(a3 + 72);
    *(void *)(a3 + 72) = 0;
    uint64_t v57 = v13;
    char v58 = *(unsigned char *)(a3 + 80);
    long long v59 = v70;
    char v60 = v71;
    *(_OWORD *)&v61[10] = *(_OWORD *)&v72[10];
    *(_OWORD *)unint64_t v61 = *(_OWORD *)v72;
    uint64_t v14 = v73;
    *((void *)&v70 + 1) = 0;
    uint64_t v73 = 0;
    uint64_t v62 = v14;
    *(void *)&long long v12 = v74;
    uint64_t v74 = 0;
    uint64_t v63 = v12;
    char v65 = v76;
    long long v64 = v75;
    __int16 v15 = v77;
    __int16 v77 = 0;
    uint64_t v66 = v15;
    char v67 = v78;
    uint64_t v49 = *(void *)(*(void *)(a1 + 256) + 176);
    if (*(unsigned char *)(a4 + 16))
    {
      uint64_t v16 = WebKit::WebFrameProxy::webFrame(*(void *)a4, *(void *)(a4 + 8));
      if (v16)
      {
        uint64_t v17 = v16;
        CFRetain(*(CFTypeRef *)(v16 + 8));
        uint64_t v49 = *(void *)(*(void *)(*(void *)(v17 + 32) + 16) + 176);
        CFRelease(*(CFTypeRef *)(v17 + 8));
      }
    }
    if (v69)
    {
      uint64_t v18 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 312));
      atomic_fetch_add((atomic_uint *volatile)(v18 + 16), 1u);
      uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v19 = 367;
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 66) = (char *)v19 + 16;
      *((void *)v19 + 67) = 512;
      *((void *)v19 + 68) = 0;
      *((void *)v19 + 70) = 0;
      *((void *)v19 + 69) = 0;
      IPC::Encoder::encodeHeader(v19);
      CFTypeRef v79 = v19;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v19, &v49);
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v19, (uint64_t)v68);
      v82[0] = *(_OWORD *)v51;
      *(_OWORD *)((char *)v82 + 9) = *(_OWORD *)&v51[9];
      v83[0] = v52[0];
      *(_OWORD *)((char *)v83 + 10) = *(_OWORD *)((char *)v52 + 10);
      uint64_t v20 = v53;
      long long v86 = v55;
      char v87 = v56;
      uint64_t v21 = v57;
      char v22 = v58;
      char v89 = v58;
      char v23 = v60;
      char v92 = v60;
      *(_OWORD *)((char *)v93 + 10) = *(_OWORD *)&v61[10];
      uint64_t v24 = v62;
      uint64_t v62 = 0;
      char v97 = v65;
      v93[0] = *(_OWORD *)v61;
      long long v96 = v64;
      uint64_t v25 = v66;
      uint64_t v66 = 0;
      char v26 = v67;
      char v99 = v67;
      uint64_t v27 = v54;
      uint64_t v54 = 0;
      uint64_t v28 = v63;
      uint64_t v63 = 0;
      long long v47 = v50;
      uint64_t v80 = v50;
      uint64_t v53 = 0;
      *((void *)&v50 + 1) = 0;
      long long v48 = v59;
      uint64_t v90 = v59;
      uint64_t v57 = 0;
      *((void *)&v59 + 1) = 0;
      uint64_t v29 = WTF::fastMalloc((WTF *)0x100);
      *(void *)uint64_t v29 = &unk_1EE9DA4F0;
      *(_OWORD *)(v29 + 8) = v47;
      long long v30 = v82[0];
      *(_OWORD *)(v29 + 33) = *(_OWORD *)((char *)v82 + 9);
      *(_OWORD *)(v29 + 24) = v30;
      long long v31 = v83[0];
      *(_OWORD *)(v29 + 66) = *(_OWORD *)((char *)v83 + 10);
      *(_OWORD *)(v29 + 56) = v31;
      uint64_t v81 = 0;
      uint64_t v84 = 0;
      *(void *)(v29 + 88) = v20;
      uint64_t v85 = 0;
      *(void *)(v29 + 96) = v27;
      char v32 = v87;
      *(_OWORD *)(v29 + 104) = v86;
      *(unsigned char *)(v29 + 120) = v32;
      *(void *)(v29 + 128) = v21;
      *(unsigned char *)(v29 + 136) = v22;
      *(_OWORD *)(v29 + 144) = v48;
      uint64_t v88 = 0;
      uint64_t v91 = 0;
      *(unsigned char *)(v29 + 160) = v23;
      long long v33 = v93[0];
      *(_OWORD *)(v29 + 178) = *(_OWORD *)((char *)v93 + 10);
      *(_OWORD *)(v29 + 168) = v33;
      uint64_t v94 = 0;
      *(void *)(v29 + 200) = v24;
      uint64_t v95 = 0;
      *(void *)(v29 + 208) = v28;
      long long v34 = v96;
      *(unsigned char *)(v29 + 232) = v97;
      *(_OWORD *)(v29 + 216) = v34;
      uint64_t v98 = 0;
      *(void *)(v29 + 240) = v25;
      *(unsigned char *)(v29 + 248) = v26;
      WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_1::~$_1(&v80, v35);
      uint64_t v36 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      uint64_t v80 = v29;
      uint64_t v81 = v36;
      LOBYTE(v82[0]) = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v18, &v79, 0, (uint64_t)&v80, 1);
      if (LOBYTE(v82[0]))
      {
        uint64_t v38 = v80;
        uint64_t v80 = 0;
        if (v38) {
          (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
        }
      }
      char v39 = v79;
      CFTypeRef v79 = 0;
      if (v39)
      {
        IPC::Encoder::~Encoder(v39, v37);
        WTF::fastFree(v45, v46);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v18 + 16));
    }
    else
    {
      WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_1::operator()((uint64_t *)&v50);
    }
    WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_1::~$_1(&v50, v40);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v41);
    uint64_t v43 = v77;
    __int16 v77 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, v42);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v73, v42);
    uint64_t v44 = *((void *)&v70 + 1);
    *((void *)&v70 + 1) = 0;
    if (v44) {
      CFRelease(*(CFTypeRef *)(v44 + 8));
    }
  }
}

void WebKit::WebPageProxy::dragUpdated(WebKit::WebPageProxy *this, DragData *a2, WTF::StringImpl **a3)
{
  uint64_t v6 = WebKit::WebPasteboardProxy::singleton(this);
  WebKit::WebPasteboardProxy::grantAccess((uint64_t)v6, *((void *)this + 32), a3, 0);
  v7[0] = 0;
  v7[16] = 0;
  WebKit::WebPageProxy::performDragControllerAction((uint64_t)this, 1, (uint64_t)a2, (uint64_t)v7);
}

void WebKit::WebPageProxy::performDragOperation(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4, uint64_t *a5)
{
  if (!*(unsigned char *)(a1 + 801) && *(unsigned char *)(a1 + 800))
  {
    uint64_t v32 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v10 = *a3;
    if (*a3) {
      *(_DWORD *)v10 += 2;
    }
    long long v34 = v10;
    v35[0] = *(_OWORD *)a2;
    *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(a2 + 10);
    uint64_t v11 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    uint64_t v30 = v11;
    uint64_t v36 = v11;
    unsigned int v12 = *(_DWORD *)(a2 + 40);
    unsigned int v13 = *(_DWORD *)(a2 + 44);
    *(void *)(a2 + 40) = 0;
    unint64_t v37 = __PAIR64__(v13, v12);
    long long v38 = *(_OWORD *)(a2 + 48);
    char v39 = *(unsigned char *)(a2 + 64);
    uint64_t v14 = *(void *)(a2 + 72);
    *(void *)(a2 + 72) = 0;
    char v15 = *(unsigned char *)(a2 + 80);
    char v41 = v15;
    uint64_t v28 = *a4;
    uint64_t v29 = v14;
    *a4 = 0;
    uint64_t v16 = *a5;
    *a5 = 0;
    uint64_t v17 = a5[1];
    a5[1] = 0;
    uint64_t v18 = WTF::fastMalloc((WTF *)0x90);
    *(void *)uint64_t v18 = &unk_1EE9DA4A0;
    *(void *)(v18 + 8) = a1;
    uint64_t v33 = 0;
    *(void *)(v18 + 16) = a1;
    if (v10) {
      *(_DWORD *)v10 += 2;
    }
    *(void *)(v18 + 24) = v10;
    long long v19 = v35[0];
    *(_OWORD *)(v18 + 42) = *(_OWORD *)((char *)v35 + 10);
    *(_OWORD *)(v18 + 32) = v19;
    uint64_t v36 = 0;
    *(void *)(v18 + 64) = v30;
    unint64_t v37 = 0;
    *(_DWORD *)(v18 + 72) = v12;
    *(_DWORD *)(v18 + 76) = v13;
    char v20 = v39;
    *(_OWORD *)(v18 + 80) = v38;
    *(unsigned char *)(v18 + 96) = v20;
    *(void *)(v18 + 104) = v29;
    *(unsigned char *)(v18 + 112) = v15;
    long long v40 = 0;
    *(void *)(v18 + 120) = v28;
    *(void *)(v18 + 128) = v16;
    BOOL v42 = 0;
    v43[0] = 0;
    v43[1] = 0;
    *(void *)(v18 + 136) = v17;
    uint64_t v44 = v18;
    v31[0] = 0;
    v31[16] = 0;
    WebKit::WebPageProxy::grantAccessToCurrentPasteboardData((WebKit::WebPasteboardProxy *)a1, a3, &v44, (uint64_t)v31);
    uint64_t v22 = v44;
    uint64_t v44 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v21);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v42);
    uint64_t v24 = v40;
    long long v40 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v23);
    char v26 = v34;
    long long v34 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    uint64_t v27 = v33;
    uint64_t v33 = 0;
    if (v27) {
      CFRelease(*(CFTypeRef *)(v27 + 8));
    }
  }
}

void WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_1::operator()(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v5 = a1[2];
    uint64_t v4 = a1[3];
    unint64_t v3 = a1 + 2;
    int v6 = *((unsigned __int8 *)v3 + 16);
    char v7 = *((unsigned char *)v3 + 24);
    unsigned int v12 = v3;
    char v13 = v7;
    uint64_t v14 = v3 + 4;
    uint64_t v8 = (long long *)(v3 + 15);
    if (v6)
    {
      uint64_t v9 = WebKit::WebFrameProxy::webFrame(v5, v4);
      if (v9)
      {
        uint64_t v10 = v9;
        CFRetain(*(CFTypeRef *)(v9 + 8));
        uint64_t v11 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(v2 + 1416), (const WebKit::WebPageProxy *)v2, *(const WebKit::WebProcessProxy **)(*(void *)(v10 + 32) + 16));
        if (v11)
        {
          WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0,unsigned long long>(*(void *)(v11 + 24), (uint64_t)&v12, v8, *(void *)(v11 + 16));
          CFRelease(*(CFTypeRef *)(v10 + 8));
          return;
        }
        CFRelease(*(CFTypeRef *)(v10 + 8));
      }
    }
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0,unsigned long long>(*(void *)(v2 + 256), (uint64_t)&v12, v8, *(void *)(*(void *)(v2 + 32) + 1928));
  }
}

void *WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_1::~$_1(void *a1, WTF::StringImpl *a2)
{
  unint64_t v3 = (WTF::StringImpl *)a1[29];
  a1[29] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), a2);
  uint64_t v5 = a1[18];
  a1[18] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  int v6 = (WTF::StringImpl *)a1[15];
  a1[15] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 10), v4);
  uint64_t v8 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  return a1;
}

uint64_t WebKit::WebPageProxy::didPerformDragControllerAction(uint64_t a1, __int16 a2, char a3, char a4, int a5, IntRect *a6, _OWORD *a7)
{
  *(_WORD *)(a1 + 913) = a2;
  uint64_t v8 = *(void *)(a1 + 32);
  *(unsigned char *)(v8 + 2072) = a3;
  *(unsigned char *)(a1 + 915) = a4;
  *(_DWORD *)(a1 + 916) = a5;
  *(_OWORD *)(v8 + 2040) = *a7;
  WebKit::WebPageProxy::setDragCaretRect(a1, a6);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 1592))(v10);
  (*(void (**)(uint64_t))(*(void *)v10 + 296))(v10);
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 1600);

  return v11(v10);
}

uint64_t WebKit::WebPageProxy::setDragCaretRect(uint64_t this, const IntRect *a2)
{
  unint64_t v3 = *(_DWORD **)(this + 32);
  BOOL v4 = v3[514] == a2->m_location.m_x && v3[515] == a2->m_location.m_y;
  if (!v4 || (v3[516] == a2->m_size.m_width ? (BOOL v5 = v3[517] == a2->m_size.m_height) : (BOOL v5 = 0), !v5))
  {
    int v6 = (IntRect *)(v3 + 514);
    IntRect v7 = *v6;
    IntRect *v6 = *a2;
    IntRect v10 = v7;
    uint64_t v8 = *(void *)(this + 40);
    if (v8) {
      uint64_t v9 = *(void *)(v8 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v9 + 1592))(v9);
    (*(void (**)(uint64_t, IntRect *, const IntRect *))(*(void *)v9 + 304))(v9, &v10, a2);
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 1600))(v9);
  }
  return this;
}

void WebKit::WebPageProxy::dragEnded(uint64_t a1, IntSize a2, void *a3, char a4, IntPoint a5)
{
  char v24 = a4;
  if (!*(unsigned char *)(a1 + 801) && *(unsigned char *)(a1 + 800))
  {
    *(void *)&long long v21 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v10 = *a3;
    *((void *)&v21 + 1) = a1;
    uint64_t v22 = v10;
    char v23 = a4;
    uint64_t v11 = **(void **)&a5;
    uint64_t v12 = *(void *)(*(void *)&a5 + 8);
    LODWORD(v10) = *(unsigned __int8 *)(*(void *)&a5 + 16);
    v18.m_location = a5;
    v18.uint64_t m_size = a2;
    long long v19 = a3;
    char v20 = &v24;
    if (v10)
    {
      uint64_t v13 = WebKit::WebFrameProxy::webFrame(v11, v12);
      if (v13)
      {
        uint64_t v14 = v13;
        CFRetain(*(CFTypeRef *)(v13 + 8));
        uint64_t v15 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v14 + 32) + 16));
        if (v15)
        {
          uint64_t v16 = *(void *)(v15 + 24);
          uint64_t v25 = *(void *)(v15 + 16);
          WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DragEnded,WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0,unsigned long long>(v16, (uint64_t)&v18, &v21, &v25, 0);
          CFRelease(*(CFTypeRef *)(v14 + 8));
          goto LABEL_10;
        }
        CFRelease(*(CFTypeRef *)(v14 + 8));
      }
    }
    uint64_t v17 = *(void *)(a1 + 256);
    uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 1928);
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DragEnded,WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0,unsigned long long>(v17, (uint64_t)&v18, &v21, &v25, 0);
LABEL_10:
    v18.m_location = 0;
    v18.uint64_t m_size = 0;
    WebKit::WebPageProxy::setDragCaretRect(a1, &v18);
    if (*((void *)&v21 + 1)) {
      CFRelease(*(CFTypeRef *)(*((void *)&v21 + 1) + 8));
    }
  }
}

uint64_t WebKit::WebPageProxy::didStartDrag(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    uint64_t v1 = this;
    if (*(unsigned char *)(this + 800))
    {
      WebKit::WebPageProxy::discardQueuedMouseEvents(this);
      char v2 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidStartDrag>(*(void *)(v1 + 256), (uint64_t)&v2, *(void *)(*(void *)(v1 + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::dragCancelled(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      char v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DragCancelled>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::resetCurrentDragInformation(WebKit::WebPageProxy *this)
{
  if (*((unsigned char *)this + 914)) {
    *((unsigned char *)this + 914) = 0;
  }
  *(unsigned char *)(*((void *)this + 4) + 2072) = 0;
  *((unsigned char *)this + 915) = 0;
  *((_DWORD *)this + 229) = 0;
  v2.m_location = 0;
  v2.uint64_t m_size = 0;
  return WebKit::WebPageProxy::setDragCaretRect((uint64_t)this, &v2);
}

void WebKit::WebPageProxy::sendMouseEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v8 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
  WebKit::WebProcessProxy::recordUserGestureAuthorizationToken(v8, *(void *)(*(void *)(a1 + 32) + 1928), *(void *)(a4 + 16), *(void *)(a4 + 24));
  if (v8) {
    uint64_t v9 = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  int v10 = *(unsigned __int8 *)(a4 + 4);
  if (*(unsigned char *)(a4 + 4)) {
    BOOL v11 = v10 == 13;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11 || v10 == 7 && *(_DWORD *)(a4 + 72) != 27)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
    *(void *)(*(void *)(a1 + 32) + 2264) = v12;
  }
  v16[0] = &v17;
  v16[1] = a4;
  _DWORD v16[2] = a5;
  uint64_t v13 = WebKit::WebFrameProxy::webFrame(v17, v18);
  if (v13)
  {
    uint64_t v14 = v13;
    CFRetain(*(CFTypeRef *)(v13 + 8));
    uint64_t v15 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v14 + 32) + 16));
    if (v15)
    {
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MouseEvent>(*(void *)(v15 + 24), (uint64_t)v16, *(void *)(v15 + 16), 0);
      CFRelease(*(CFTypeRef *)(v14 + 8));
      return;
    }
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MouseEvent>(*(void *)(a1 + 256), (uint64_t)v16, *(void *)(*(void *)(a1 + 32) + 1928), 0);
}

WebKit::WebProcessProxy **WebKit::WebPageProxy::handleMouseEvent(WebKit::WebProcessProxy **this, const NativeWebMouseEvent *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  p_int var1 = &a2->var1;
  if (!a2->var1) {
    this = (WebKit::WebProcessProxy **)WebKit::WebPageProxy::launchInitialProcessIfNecessary(this);
  }
  if (*(unsigned char *)(v3 + 801) || !*(unsigned char *)(v3 + 800) || !*(void *)(v3 + 328)) {
    return this;
  }
  int var1 = a2->var1;
  if (LOBYTE(a2[1].var0.m_value) == 2 && !a2->var1)
  {
    *(unsigned char *)(v3 + 832) = 1;
    uint64_t v6 = v3 + 32;
LABEL_23:
    LOBYTE(v92) = 0;
    char v102 = 0;
    goto LABEL_24;
  }
  uint64_t v6 = v3 + 32;
  uint64_t v7 = *(void *)(v3 + 32);
  if ((var1 - 4) <= 0xFFFFFFFD) {
    goto LABEL_23;
  }
  unint64_t v8 = *(void *)(v7 + 864);
  uint64_t v9 = *(void *)(v7 + 856);
  if (v8 == v9) {
    goto LABEL_23;
  }
  unint64_t v10 = *(unsigned int *)(v7 + 880);
  unint64_t v11 = v9 + v10 + 1;
  do
    v11 -= v10;
  while (v11 >= v10);
  if (v8 == v11) {
    goto LABEL_23;
  }
  uint64_t v12 = *(void *)(v7 + 872);
  unint64_t v13 = v10 - 1;
  while (v8)
  {
    unint64_t v14 = v8 - 1;
    int v15 = *(unsigned __int8 *)(v12 + 160 * (v8 - 1) + 4);
    if (v15 == var1) {
      goto LABEL_67;
    }
    unsigned int v16 = v15 - 4;
LABEL_21:
    if (v16 >= 0xFFFFFFFE)
    {
      unint64_t v8 = v14;
      if (v14 != v11) {
        continue;
      }
    }
    goto LABEL_23;
  }
  int v17 = *(unsigned __int8 *)(v12 + 160 * v13 + 4);
  if (v17 != var1)
  {
    unsigned int v16 = v17 - 4;
    unint64_t v14 = v13;
    goto LABEL_21;
  }
  unint64_t v14 = v13;
LABEL_67:
  uint64_t v58 = v12 + 160 * v14;
  *(_DWORD *)long long buf = 0;
  long long v59 = *(_OWORD *)(v58 + 4);
  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)(v58 + 16);
  *(_OWORD *)&uint8_t buf[4] = v59;
  long long v60 = *(_OWORD *)(v58 + 32);
  long long v61 = *(_OWORD *)(v58 + 48);
  long long v62 = *(_OWORD *)(v58 + 80);
  long long v106 = *(_OWORD *)(v58 + 64);
  long long v107 = v62;
  long long v104 = v60;
  long long v105 = v61;
  uint64_t v63 = *(WTF::StringImpl **)(v58 + 96);
  if (v63) {
    *(_DWORD *)v63 += 2;
  }
  char v108 = v63;
  char v109 = *(unsigned char *)(v58 + 104);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v110, (uint64_t *)(v58 + 112));
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v112, (uint64_t *)(v58 + 128));
  char v65 = *(const void **)(v12 + 160 * v14 + 144);
  uint64_t v114 = (uint64_t)v65;
  if (v65) {
    CFRetain(v65);
  }
  unint64_t v66 = *(unsigned int *)(v7 + 880);
  if (v8) {
    unint64_t v66 = v8;
  }
  unint64_t v67 = v66 - 1;
  if (*(void *)(v7 + 864) != v66 - 1)
  {
    uint64_t v68 = *(void *)(v7 + 872);
    char v89 = (WTF::StringImpl *)(v68 + 160 * v66);
    uint64_t v90 = (WTF::StringImpl *)(v68 + 160 * v67);
    WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct(v90, v89);
    unint64_t v69 = *(void *)(v7 + 856);
    if (v69 <= v67)
    {
      WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::moveOverlapping((WTF::StringImpl *)(v68 + 160 * v69), v90, v68 + 160 * v69 + 160);
      *(void *)(v7 + 856) = (*(void *)(v7 + 856) + 1) % (unint64_t)*(unsigned int *)(v7 + 880);
    }
    else
    {
      WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::moveOverlapping(v89, (WTF::StringImpl *)(v68 + 160 * *(void *)(v7 + 864)), (unint64_t)v90);
      *(void *)(v7 + 864) = (*(void *)(v7 + 864) + (unint64_t)*(unsigned int *)(v7 + 880) - 1)
                            % *(unsigned int *)(v7 + 880);
    }
  }
  int v92 = 0;
  *(_OWORD *)uint64_t v93 = *(_OWORD *)&buf[4];
  *(_OWORD *)&v93[12] = *(_OWORD *)&buf[16];
  long long v94 = v104;
  long long v95 = v105;
  long long v96 = v106;
  long long v97 = v107;
  uint64_t v98 = v108;
  char v99 = v109;
  uint64_t v70 = v110;
  uint64_t v110 = 0;
  v100[0] = v70;
  uint64_t v71 = v111;
  uint64_t v111 = 0;
  v100[1] = v71;
  uint64_t v72 = v112;
  uint64_t v112 = 0;
  v101[0] = v72;
  uint64_t v73 = v113;
  uint64_t v113 = 0;
  v101[1] = v73;
  v101[2] = v114;
  char v102 = 1;
  uint64_t v114 = 0;
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v64);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v110, v74);
  this = 0;
  char v108 = 0;
  if (buf[4] == 2)
  {
    uint64_t v75 = *(void *)v6;
    char v76 = (uint64_t *)(*(void *)v6 + 888);
    unint64_t v77 = *(unsigned int *)(*(void *)v6 + 900);
    if (v77 == *(_DWORD *)(*(void *)v6 + 896))
    {
      unint64_t v78 = v77 + (v77 >> 2);
      if (v78 >= 0x10) {
        unint64_t v79 = v78 + 1;
      }
      else {
        unint64_t v79 = 16;
      }
      if (v79 <= v77 + 1) {
        unint64_t v80 = v77 + 1;
      }
      else {
        unint64_t v80 = v79;
      }
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v76, v80);
      LODWORD(v77) = *(_DWORD *)(v75 + 900);
      uint64_t v81 = *(void *)(v75 + 888);
    }
    else
    {
      uint64_t v81 = *v76;
    }
    uint64_t v82 = v81 + 144 * v77;
    *(_DWORD *)uint64_t v82 = 0;
    long long v83 = *(_OWORD *)v93;
    *(_OWORD *)(v82 + 16) = *(_OWORD *)&v93[12];
    *(_OWORD *)(v82 + 4) = v83;
    long long v84 = v94;
    long long v85 = v95;
    long long v86 = v97;
    *(_OWORD *)(v82 + 64) = v96;
    *(_OWORD *)(v82 + 80) = v86;
    *(_OWORD *)(v82 + 32) = v84;
    *(_OWORD *)(v82 + 48) = v85;
    char v87 = v98;
    if (v98) {
      *(_DWORD *)v98 += 2;
    }
    uint64_t v88 = v81 + 144 * v77;
    *(void *)(v88 + 96) = v87;
    *(unsigned char *)(v88 + 104) = v99;
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v88 + 112, v100);
    this = (WebKit::WebProcessProxy **)WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v88 + 128, v101);
    ++*(_DWORD *)(v75 + 900);
  }
LABEL_24:
  uint64_t v18 = *(void *)v6;
  uint64_t v19 = *(void *)(*(void *)v6 + 856);
  uint64_t v20 = *(void *)(*(void *)v6 + 864);
  if (v19)
  {
    if (v20 + 1 == v19)
    {
      LODWORD(v21) = *(_DWORD *)(v18 + 880);
      goto LABEL_32;
    }
LABEL_43:
    uint64_t v32 = *(void *)(v18 + 872);
    uint64_t v33 = v32 + 160 * v20;
    *(_DWORD *)uint64_t v33 = 0;
    long long v34 = *(_OWORD *)p_var1;
    *(_OWORD *)(v33 + 16) = *(_OWORD *)(p_var1 + 12);
    *(_OWORD *)(v33 + 4) = v34;
    long long v35 = *(_OWORD *)&a2[1].var0.m_value;
    long long v36 = *(_OWORD *)a2[1].var4;
    long long v37 = *(_OWORD *)a2[2].var4;
    *(_OWORD *)(v33 + 64) = *(_OWORD *)&a2[2].var0.m_value;
    *(_OWORD *)(v33 + 80) = v37;
    *(_OWORD *)(v33 + 32) = v35;
    *(_OWORD *)(v33 + 48) = v36;
    long long v38 = *(_DWORD **)&a2[3].var0.m_value;
    if (v38) {
      *v38 += 2;
    }
    *(void *)(v33 + 96) = v38;
    *(unsigned char *)(v33 + 104) = LOBYTE(a2[3].var3.m_value);
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v33 + 112, (uint64_t *)a2[3].var4);
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v33 + 128, (uint64_t *)&a2[4]);
    long long v40 = *(const void **)a2[4].var4;
    *(void *)(v32 + 160 * v20 + 144) = v40;
    if (v40) {
      CFRetain(v40);
    }
    uint64_t v41 = *(void *)(v18 + 864);
    if (v41 == *(unsigned int *)(v18 + 880) - 1) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = v41 + 1;
    }
    *(void *)(v18 + 864) = v42;
    if (*p_var1 != 2)
    {
      uint64_t v43 = *(void *)(v3 + 256);
      uint64_t v44 = *(void *)(*(void *)(v3 + 32) + 1928);
      uint64_t v45 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v45 = 2247;
      *((void *)v45 + 1) = v44;
      *((void *)v45 + 66) = (char *)v45 + 16;
      *((void *)v45 + 67) = 512;
      *((void *)v45 + 68) = 0;
      *((void *)v45 + 70) = 0;
      *((void *)v45 + 69) = 0;
      IPC::Encoder::encodeHeader(v45);
      uint64_t v91 = v45;
      buf[0] = 0;
      uint8_t buf[16] = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v43, &v91, 0, (uint64_t)buf, 1);
      if (buf[16])
      {
        uint64_t v46 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v46) {
          (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
        }
      }
      long long v47 = v91;
      uint64_t v91 = 0;
      if (v47)
      {
        IPC::Encoder::~Encoder(v47, v39);
        WTF::fastFree(v56, v57);
      }
    }
    uint64_t v48 = *(void *)v6;
    unint64_t v49 = *(void *)(*(void *)v6 + 856);
    unint64_t v50 = *(void *)(*(void *)v6 + 864);
    if (v49 > v50) {
      v50 += *(unsigned int *)(v48 + 880);
    }
    if (v50 - v49 == 1)
    {
      WebKit::WebPageProxy::processNextQueuedMouseEvent((unsigned int *)v3);
    }
    else
    {
      unint64_t v51 = *(void *)(v3 + 1352) + 1;
      *(void *)(v3 + 1352) = v51;
      if (v51 >= 0x14)
      {
        uint64_t v52 = qword_1EB3580F0;
        if (os_log_type_enabled((os_log_t)qword_1EB3580F0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v53 = *(void *)(v48 + 760);
          uint64_t v54 = *(void *)(v48 + 1928);
          uint64_t v55 = *(void *)(*(void *)(v3 + 256) + 136);
          if (v55) {
            LODWORD(v55) = *(_DWORD *)(v55 + 108);
          }
          *(_DWORD *)long long buf = 134218752;
          *(void *)&uint8_t buf[4] = v3;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v53;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = v54;
          LOWORD(v104) = 1024;
          *(_DWORD *)((char *)&v104 + 2) = v55;
          _os_log_impl(&dword_1985F2000, v52, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::handleMouseEvent: skipped called processNextQueuedMouseEvent 20 times, possibly stuck?", buf, 0x26u);
        }
      }
    }
    return (WebKit::WebProcessProxy **)std::__optional_destruct_base<WebKit::NativeWebMouseEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v92, (WTF::StringImpl *)v39);
  }
  else
  {
    uint64_t v21 = *(unsigned int *)(v18 + 880);
    if (v20)
    {
      if (v20 != v21 - 1) {
        goto LABEL_43;
      }
    }
    else if (v21)
    {
      uint64_t v20 = 0;
      goto LABEL_43;
    }
LABEL_32:
    uint64_t v22 = v21;
    unint64_t v23 = ((unint64_t)v21 >> 2) + v21;
    if (v23 <= 0xF) {
      unint64_t v23 = 15;
    }
    if (v23 < 0x1999999)
    {
      char v24 = *(WTF::StringImpl **)(v18 + 872);
      int v25 = 160 * v23 + 160;
      uint64_t v26 = WTF::fastMalloc((WTF *)(160 * v23 + 160));
      *(_DWORD *)(v18 + 880) = (v25 & 0xFFFFFFE0) / 0xA0;
      *(void *)(v18 + 872) = v26;
      unint64_t v27 = *(void *)(v18 + 856);
      unint64_t v28 = *(void *)(v18 + 864);
      if (v27 <= v28)
      {
        WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::move((WTF::StringImpl *)((char *)v24 + 160 * v27), (WTF::StringImpl *)((char *)v24 + 160 * v28), v26 + 160 * v27);
      }
      else
      {
        WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::move(v24, (WTF::StringImpl *)((char *)v24 + 160 * v28), v26);
        uint64_t v29 = *(void *)(v18 + 856);
        uint64_t v30 = v29 - v22 + *(unsigned int *)(v18 + 880);
        WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::move((WTF::StringImpl *)((char *)v24 + 160 * v29), (WTF::StringImpl *)((char *)v24 + 160 * v22), *(void *)(v18 + 872) + 160 * v30);
        *(void *)(v18 + 856) = v30;
      }
      if (v24)
      {
        if (*(WTF::StringImpl **)(v18 + 872) == v24)
        {
          *(void *)(v18 + 872) = 0;
          *(_DWORD *)(v18 + 880) = 0;
        }
        WTF::fastFree(v24, v31);
      }
      uint64_t v20 = *(void *)(v18 + 864);
      goto LABEL_43;
    }
    __break(0xC471u);
  }
  return this;
}

unsigned int *WebKit::WebPageProxy::processNextQueuedMouseEvent(unsigned int *this)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 801)) {
    return this;
  }
  uint64_t v1 = (uint64_t)this;
  if (!*((unsigned char *)this + 800) || !*((void *)this + 41)) {
    return this;
  }
  *((void *)this + 169) = 0;
  IntRect v2 = (void *)*((void *)this + 4);
  uint64_t v3 = v2[107];
  if (v3 == v2[108])
  {
    __break(0xC471u);
    JUMPOUT(0x198E67098);
  }
  uint64_t v4 = v2[109];
  uint64_t v5 = v4 + 160 * v3;
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 1624))(v7, v4 + 160 * v3);
  (*(void (**)(uint64_t))(*(void *)v7 + 1600))(v7);
  if (v8)
  {
    *(void *)uint64_t v43 = 0;
    WebKit::WebPageProxy::setToolTip((WTF **)v1, (const WTF::StringImpl **)v43, v9);
    unint64_t v11 = *(WTF::StringImpl **)v43;
    *(void *)uint64_t v43 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  uint64_t v12 = *(void *)(v1 + 256);
  int v13 = 1;
  atomic_fetch_add((atomic_uint *volatile)(v12 + 16), 1u);
  int v15 = (long long *)(v5 + 4);
  int v14 = *(unsigned __int8 *)(v5 + 4);
  if ((v14 - 3) >= 2 && v14 != 0)
  {
    if (v14 == 2) {
      goto LABEL_21;
    }
    int v13 = 0;
  }
  WebKit::AuxiliaryProcessProxy::startResponsivenessTimer(v12, v13);
LABEL_21:
  v41[0] = 0;
  char v42 = 0;
  *(_DWORD *)uint64_t v43 = 0;
  long long v17 = *v15;
  *(_OWORD *)&v43[16] = *(_OWORD *)(v5 + 16);
  *(_OWORD *)&v43[4] = v17;
  long long v18 = *(_OWORD *)(v5 + 32);
  long long v19 = *(_OWORD *)(v5 + 48);
  long long v20 = *(_OWORD *)(v5 + 80);
  long long v46 = *(_OWORD *)(v5 + 64);
  long long v47 = v20;
  long long v44 = v18;
  long long v45 = v19;
  uint64_t v21 = *(WTF::StringImpl **)(v5 + 96);
  if (v21) {
    *(_DWORD *)v21 += 2;
  }
  uint64_t v48 = v21;
  char v49 = *(unsigned char *)(v5 + 104);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v50, (uint64_t *)(v5 + 112));
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v51, (uint64_t *)(v5 + 128));
  uint64_t v22 = *(const void **)(v4 + 160 * v3 + 144);
  CFTypeRef cf = v22;
  if (v22) {
    CFRetain(v22);
  }
  if (*(unsigned char *)v15 == 2)
  {
    uint64_t v23 = *(void *)(v1 + 32);
    char v24 = (uint64_t *)(v23 + 888);
    unint64_t v25 = *(unsigned int *)(v23 + 900);
    if (v25 == *(_DWORD *)(v23 + 896))
    {
      unint64_t v26 = v25 + (v25 >> 2);
      if (v26 >= 0x10) {
        unint64_t v27 = v26 + 1;
      }
      else {
        unint64_t v27 = 16;
      }
      if (v27 <= v25 + 1) {
        unint64_t v28 = v25 + 1;
      }
      else {
        unint64_t v28 = v27;
      }
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v24, v28);
      LODWORD(v25) = *(_DWORD *)(v23 + 900);
      uint64_t v29 = *(void *)(v23 + 888);
    }
    else
    {
      uint64_t v29 = *v24;
    }
    uint64_t v30 = v29 + 144 * v25;
    *(_DWORD *)uint64_t v30 = 0;
    long long v31 = *v15;
    *(_OWORD *)(v30 + 16) = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(v30 + 4) = v31;
    long long v32 = *(_OWORD *)(v5 + 32);
    long long v33 = *(_OWORD *)(v5 + 48);
    long long v34 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(v30 + 64) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(v30 + 80) = v34;
    *(_OWORD *)(v30 + 32) = v32;
    *(_OWORD *)(v30 + 48) = v33;
    long long v35 = *(_DWORD **)(v5 + 96);
    if (v35) {
      *v35 += 2;
    }
    uint64_t v36 = v29 + 144 * v25;
    *(void *)(v36 + 96) = v35;
    *(unsigned char *)(v36 + 104) = *(unsigned char *)(v5 + 104);
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v36 + 112, (uint64_t *)(v5 + 112));
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v36 + 128, (uint64_t *)(v5 + 128));
    ++*(_DWORD *)(v23 + 900);
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v50, *(void *)(v1 + 32) + 888);
  }
  WebKit::WebPageProxy::sendMouseEvent(v1, *(void *)(*(void *)(v1 + 328) + 272), *(void *)(*(void *)(v1 + 328) + 280), (uint64_t)v43, (uint64_t)v41);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(*(void *)(v1 + 32) + 888), 0);
  CFTypeRef v38 = cf;
  CFTypeRef cf = 0;
  if (v38) {
    CFRelease(v38);
  }
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v51, v37);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v50, v39);
  this = (unsigned int *)v48;
  uint64_t v48 = 0;
  if (this)
  {
    if (*this == 2) {
      this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v40);
    }
    else {
      *this -= 2;
    }
  }
  if (v42)
  {
    this = (unsigned int *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v40);
    if (v12) {
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
    }
  }
  else if (v12)
  {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setToolTip(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::equal(this[85], *a2, a3);
  if ((result & 1) == 0)
  {
    uint64_t v6 = (char *)(this + 85);
    uint64_t v7 = this[85];
    if (v7) {
      *(_DWORD *)v7 += 2;
    }
    unint64_t v11 = v7;
    WTF::String::operator=((uint64_t *)this + 85, a2);
    int v8 = this[5];
    if (v8) {
      uint64_t v9 = *((void *)v8 + 1);
    }
    else {
      uint64_t v9 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v9 + 1592))(v9);
    (*(void (**)(uint64_t, WTF::StringImpl **, char *))(*(void *)v9 + 176))(v9, &v11, v6);
    (*(void (**)(uint64_t))(*(void *)v9 + 1600))(v9);
    uint64_t result = (uint64_t)v11;
    unint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t *WebKit::WebPageProxy::doAfterProcessingAllPendingMouseEvents(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = result[4];
  if (*(void *)(v2 + 856) == *(void *)(v2 + 864))
  {
    uint64_t v3 = *(uint64_t (**)(void))(**(void **)a2 + 16);
    return (uint64_t *)v3();
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(v2 + 228);
    if (v4 == *(_DWORD *)(v2 + 224))
    {
      uint64_t result = (uint64_t *)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 216, v4 + 1, a2);
      uint64_t v4 = *(unsigned int *)(v2 + 228);
      int v5 = v4 + 1;
      uint64_t v6 = *(void *)(v2 + 216);
      uint64_t v7 = *result;
      *uint64_t result = 0;
    }
    else
    {
      int v5 = v4 + 1;
      uint64_t v6 = *(void *)(v2 + 216);
      uint64_t v7 = *(void *)a2;
      *(void *)a2 = 0;
    }
    *(void *)(v6 + 8 * v4) = v7;
    *(_DWORD *)(v2 + 228) = v5;
  }
  return result;
}

uint64_t WebKit::WebPageProxy::dispatchWheelEventWithoutScrolling(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1[41];
  if (v3)
  {
    long long v7 = *(_OWORD *)(v3 + 272);
    v8[0] = &v7;
    v8[1] = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DispatchWheelEventWithoutScrolling,WTF::CompletionHandler<void ()(BOOL)>>(a1[32], (uint64_t)v8, a3, *(void *)(a1[4] + 1928), 0, 1);
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
}

WTF **WebKit::WebPageProxy::wheelEventCoalescer(WebKit::WebPageProxy *this)
{
  uint64_t result = (WTF **)*((void *)this + 102);
  if (!result)
  {
    uint64_t v3 = (WTF ***)((char *)this + 816);
    uint64_t v4 = WTF::fastMalloc((WTF *)0x120);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(void *)(v4 + 16) = v4 + 32;
    *(_DWORD *)(v4 + 24) = 2;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_OWORD *)(v4 + 272) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    std::unique_ptr<WebKit::WebWheelEventCoalescer>::reset[abi:sn180100](v3, (WTF **)v4);
    return *v3;
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebPageProxy::continueWheelEventHandling(atomic_uchar *volatile **this, uint64_t a2, char *a3, __int16 a4)
{
  uint64_t v6 = this;
  long long v7 = this[41];
  if ((*a3 & 0xE) != 0)
  {
    if (v7)
    {
      int v9 = WebKit::WebPageProxy::rubberBandableEdgesRespectingHistorySwipe((WebKit::WebPageProxy *)this);
      unint64_t v10 = v6[41];
      uint64_t v11 = *((void *)v10 + 34);
      uint64_t v12 = *((void *)v10 + 35);
      char v13 = *a3;
      char v14 = a3[1];
      return WebKit::WebPageProxy::sendWheelEvent((uint64_t)v6, v11, v12, (_OWORD *)a2, v13, v9, a4, v14);
    }
  }
  else
  {
    if (v7) {
      BOOL v15 = *(_DWORD *)(a2 + 68) == 1;
    }
    else {
      BOOL v15 = 0;
    }
    if (v15)
    {
      uint64_t v17 = *((void *)v7 + 34);
      uint64_t v16 = *((void *)v7 + 35);
      v21[0] = v17;
      v21[1] = v16;
      uint64_t v18 = *(void *)(a2 + 32);
      uint64_t v19 = *(void *)(a2 + 40);
      uint64_t v20 = v18;
      v22[0] = v21;
      v22[1] = &v20;
      v25[0] = v17;
      v25[1] = v16;
      char v26 = 1;
      void v22[2] = &v19;
      uint64_t v23 = v22;
      char v24 = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::SetLastKnownMousePosition>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::SetLastKnownMousePosition &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::SetLastKnownMousePosition&)#1}>((uint64_t)this, (uint64_t)v25, (uint64_t)&v23);
    }
    return (atomic_uchar *volatile **)WebKit::WebPageProxy::wheelEventHandlingCompleted((WebKit::WebPageProxy *)v6, a3[1]);
  }
  return this;
}

void WebKit::WebPageProxy::wheelEventHandlingCompleted(WebKit::WebPageProxy *this, char a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = WebKit::WebPageProxy::wheelEventCoalescer(this);
  WebKit::WebWheelEventCoalescer::takeOldestEventBeingProcessed((WebKit::WebWheelEventCoalescer *)v4, (uint64_t)v11);
  if (v12)
  {
    if ((a2 & 1) == 0)
    {
      (*(void (**)(void, WebKit::WebPageProxy *, unsigned char *))(**((void **)this + 13) + 152))(*((void *)this + 13), this, v11);
      uint64_t v5 = *((void *)this + 5);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          if (!v12) {
            __break(1u);
          }
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 368))(v6, v11);
        }
      }
    }
  }
  long long v7 = WebKit::WebPageProxy::wheelEventCoalescer(this);
  WebKit::WebWheelEventCoalescer::nextEventToDispatch((uint64_t)v7, (uint64_t)v10);
  if (v10[112])
  {
    if (!*((unsigned char *)this + 801) && *((unsigned char *)this + 800))
    {
      if ((*(unsigned int (**)(void))(**((void **)this + 29) + 224))(*((void *)this + 29)))
      {
        __int16 v9 = 2;
        WebKit::WebPageProxy::continueWheelEventHandling((atomic_uchar *volatile **)this, (uint64_t)v10, (char *)&v9, 0);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*((void *)this + 6) + 24))
                   + 320);
    if (v8)
    {
      CFRetain(*(CFTypeRef *)(v8 + 8));
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
  }
}

uint64_t WebKit::WebPageProxy::rubberBandableEdgesRespectingHistorySwipe(WebKit::WebPageProxy *this)
{
  unsigned int v1 = *(_DWORD *)(*((void *)this + 4) + 1744);
  if (*((unsigned char *)this + 923))
  {
    unsigned int v3 = WebKit::WebBackForwardList::backItem(*((void *)this + 83)) == 0;
    LOBYTE(v4) = WebKit::WebBackForwardList::forwardItem(*((void *)this + 83)) == 0;
  }
  else
  {
    unsigned int v4 = v1 >> 8;
    unsigned int v3 = HIBYTE(v1);
  }
  return v1 & 0xFF0000 | (v3 << 24) | (v4 << 8) | v1;
}

atomic_uchar *volatile **WebKit::WebPageProxy::sendWheelEvent(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, char a5, int a6, __int16 a7, char a8)
{
  int v8 = a6;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  v35[0] = a2;
  v35[1] = a3;
  char v34 = a5;
  *(_DWORD *)long long v33 = a6;
  __int16 v32 = a7;
  unint64_t v10 = *(atomic_uchar *volatile **)(*(void *)(a1 + 256) + 144);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198E679A8);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v31, v10);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 232) + 224))(*(void *)(a1 + 232)))
  {
    BOOL v15 = v31;
    v30[0] = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v16 = 36;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 66) = (char *)v16 + 16;
    *((void *)v16 + 67) = 512;
    *((void *)v16 + 68) = 0;
    *((void *)v16 + 70) = 0;
    *((void *)v16 + 69) = 0;
    IPC::Encoder::encodeHeader(v16);
    v36[0] = v16;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v16, v30);
    IPC::ArgumentCoder<WebKit::WebWheelEvent,void>::encode(v16, (uint64_t)a4);
    IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::encode(v16, v33);
    IPC::Connection::sendMessageImpl((uint64_t)v15, (uint64_t *)v36, 0, 0x100000000);
    uint64_t v18 = v36[0];
    v36[0] = 0;
    if (!v18) {
      goto LABEL_15;
    }
    IPC::Encoder::~Encoder(v18, v17);
    goto LABEL_5;
  }
  v30[0] = (uint64_t)v35;
  v30[1] = (uint64_t)a4;
  void v30[2] = (uint64_t)&v34;
  v30[3] = (uint64_t)&v32;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  uint64_t v21 = *(atomic_uint **)(a1 + 24);
  if (v21)
  {
    atomic_fetch_add(v21, 1u);
    int v8 = *(_DWORD *)v33;
  }
  v36[0] = (IPC::Encoder *)v21;
  int v37 = 0;
  *(_OWORD *)CFTypeRef v38 = *(_OWORD *)((char *)a4 + 4);
  long long v22 = a4[4];
  *(_OWORD *)&v38[11] = a4[3];
  *(_OWORD *)&v38[15] = v22;
  long long v23 = a4[6];
  *(_OWORD *)&v38[19] = a4[5];
  *(_OWORD *)&v38[23] = v23;
  long long v24 = a4[2];
  *(_OWORD *)&v38[3] = a4[1];
  *(_OWORD *)&v38[7] = v24;
  char v39 = v34;
  int v40 = v8;
  __int16 v41 = v32;
  char v42 = a8;
  uint64_t v25 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (!v25) {
    goto LABEL_12;
  }
  uint64_t v26 = v25;
  CFRetain(*(CFTypeRef *)(v25 + 8));
  uint64_t v27 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v26 + 32) + 16));
  if (!v27)
  {
    CFRelease(*(CFTypeRef *)(v26 + 8));
LABEL_12:
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0,unsigned long long>(*(void *)(a1 + 256), (uint64_t)v30, (uint64_t *)v36, *(void *)(*(void *)(a1 + 32) + 1928));
    goto LABEL_13;
  }
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0,unsigned long long>(*(void *)(v27 + 24), (uint64_t)v30, (uint64_t *)v36, *(void *)(v27 + 16));
  CFRelease(*(CFTypeRef *)(v26 + 8));
LABEL_13:
  uint64_t v19 = (unsigned int *)v36[0];
  v36[0] = 0;
  if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v19);
LABEL_5:
    WTF::fastFree((WTF *)v19, v20);
  }
LABEL_15:
  uint64_t v28 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v28 + 16), 1u);
  WebKit::WebProcessProxy::isResponsiveWithLazyStop((unsigned int *)v28);
  if (v28) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v28 + 16));
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v31);
}

void WebKit::WebPageProxy::handleWheelEventReply(WebKit::WebPageProxy *a1, char a2, char a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::WebPageProxy::wheelEventCoalescer(a1);
  if (v6[32] == v6[33])
  {
    long long v7 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v9 = 136446210;
      unint64_t v10 = "void WebKit::WebPageProxy::handleWheelEventReply(const WebWheelEvent &, std::optional<ScrollingNodeID>, std:"
            ":optional<WheelScrollGestureState>, BOOL, BOOL)";
      _os_log_fault_impl(&dword_1985F2000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 3898: Invalid message dispatched %{public}s", (uint8_t *)&v9, 0xCu);
    }
    uint64_t v8 = *(void *)(*((void *)a1 + 32) + 144);
    if (v8) {
      *(unsigned char *)(v8 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
  else
  {
    WebKit::WebPageProxy::wheelEventHandlingCompleted(a1, a2 | a3);
  }
}

void WebKit::WebPageProxy::sendKeyEvent(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[32];
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  WebKit::WebProcessProxy::recordUserGestureAuthorizationToken(v4, *(void *)(a1[4] + 1928), *(void *)(a2 + 16), *(void *)(a2 + 24));
  if (v4) {
    uint64_t v5 = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  int v6 = *(unsigned __int8 *)(a2 + 4);
  if (*(unsigned char *)(a2 + 4)) {
    BOOL v7 = v6 == 13;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || v6 == 7 && *(_DWORD *)(a2 + 72) != 27)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    *(void *)(a1[4] + 2264) = v8;
  }
  uint64_t v9 = a1[43];
  if (!v9) {
    uint64_t v9 = a1[41];
  }
  long long v11 = *(_OWORD *)(v9 + 272);
  long long v14 = v11;
  v10[0] = &v11;
  v10[1] = a2;
  char v15 = 1;
  char v12 = v10;
  char v13 = 0;
  WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::KeyEvent>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::KeyEvent &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::KeyEvent&)#1}>((uint64_t)a1, (uint64_t)&v14, (uint64_t)&v12);
}

uint64_t WebKit::WebPageProxy::handleKeyboardEvent(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800)) {
    return 0;
  }
  if (!*(void *)(a1 + 328))
  {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 104) + 144))(*(void *)(a1 + 104), a1, a2);
    return 0;
  }
  WTF::Deque<WebKit::NativeWebKeyboardEvent,0ul>::append<WebKit::NativeWebKeyboardEvent const&>((unsigned int *)(*(void *)(a1 + 32) + 768), a2);
  uint64_t v5 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 1u);
  WebKit::AuxiliaryProcessProxy::startResponsivenessTimer(v5, *(unsigned __int8 *)(a2 + 4) == 7);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(v6 + 768);
  unint64_t v8 = *(void *)(v6 + 776);
  if (v7 > v8) {
    v8 += *(unsigned int *)(v6 + 792);
  }
  if (v8 - v7 == 1) {
    WebKit::WebPageProxy::sendKeyEvent((void *)a1, a2);
  }
  if (v5) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
  }
  return 1;
}

unsigned int *WTF::Deque<WebKit::NativeWebKeyboardEvent,0ul>::append<WebKit::NativeWebKeyboardEvent const&>(unsigned int *result, uint64_t a2)
{
  unsigned int v3 = result;
  uint64_t v4 = *((void *)result + 1);
  if (!*(void *)result)
  {
    uint64_t v5 = result[6];
    if (v4)
    {
      if (v4 != v5 - 1) {
        goto LABEL_20;
      }
    }
    else if (v5)
    {
      uint64_t v4 = 0;
      goto LABEL_20;
    }
LABEL_9:
    uint64_t v6 = v5;
    unint64_t v7 = ((unint64_t)v5 >> 2) + v5;
    if (v7 <= 0xF) {
      unint64_t v7 = 15;
    }
    if (v7 >= 0x2AAAAAA)
    {
      __break(0xC471u);
      return result;
    }
    unint64_t v8 = (WebKit::WebKeyboardEvent *)*((void *)result + 2);
    int v9 = 96 * v7 + 96;
    uint64_t v10 = WTF::fastMalloc((WTF *)(96 * v7 + 96));
    v3[6] = (v9 & 0xFFFFFFE0) / 0x60;
    *((void *)v3 + 2) = v10;
    unint64_t v11 = *((void *)v3 + 1);
    if (*(void *)v3 <= v11)
    {
      WTF::VectorMover<false,WebKit::NativeWebKeyboardEvent>::move((WebKit::WebKeyboardEvent *)((char *)v8 + 96 * *(void *)v3), (WebKit::WebKeyboardEvent *)((char *)v8 + 96 * v11), v10 + 96 * *(void *)v3);
      if (!v8)
      {
LABEL_19:
        uint64_t v4 = *((void *)v3 + 1);
        goto LABEL_20;
      }
    }
    else
    {
      WTF::VectorMover<false,WebKit::NativeWebKeyboardEvent>::move(v8, (WebKit::WebKeyboardEvent *)((char *)v8 + 96 * v11), v10);
      uint64_t v12 = *(void *)v3 - v6 + v3[6];
      WTF::VectorMover<false,WebKit::NativeWebKeyboardEvent>::move((WebKit::WebKeyboardEvent *)((char *)v8 + 96 * *(void *)v3), (WebKit::WebKeyboardEvent *)((char *)v8 + 96 * v6), *((void *)v3 + 2) + 96 * v12);
      *(void *)unsigned int v3 = v12;
      if (!v8) {
        goto LABEL_19;
      }
    }
    if (*((WebKit::WebKeyboardEvent **)v3 + 2) == v8)
    {
      *((void *)v3 + 2) = 0;
      v3[6] = 0;
    }
    WTF::fastFree(v8, v13);
    goto LABEL_19;
  }
  if (v4 + 1 == *(void *)result)
  {
    LODWORD(v5) = result[6];
    goto LABEL_9;
  }
LABEL_20:
  uint64_t v14 = *((void *)v3 + 2);
  uint64_t v15 = v14 + 96 * v4;
  *(_DWORD *)uint64_t v15 = 0;
  long long v16 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v15 + 4) = v16;
  uint64_t v17 = *(_DWORD **)(a2 + 32);
  if (v17) {
    *v17 += 2;
  }
  *(void *)(v15 + 32) = v17;
  uint64_t v18 = *(_DWORD **)(a2 + 40);
  if (v18) {
    *v18 += 2;
  }
  *(void *)(v15 + 40) = v18;
  uint64_t v19 = *(_DWORD **)(a2 + 48);
  if (v19) {
    *v19 += 2;
  }
  *(void *)(v15 + 48) = v19;
  uint64_t v20 = *(_DWORD **)(a2 + 56);
  if (v20) {
    *v20 += 2;
  }
  *(void *)(v15 + 56) = v20;
  uint64_t v21 = *(_DWORD **)(a2 + 64);
  if (v21) {
    *v21 += 2;
  }
  *(void *)(v15 + 64) = v21;
  *(_OWORD *)(v15 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t result = *(unsigned int **)(a2 + 88);
  *(void *)(v14 + 96 * v4 + 88) = result;
  if (result) {
    uint64_t result = (unsigned int *)CFRetain(result);
  }
  uint64_t v22 = *((void *)v3 + 1);
  if (v22 == v3[6] - 1) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22 + 1;
  }
  *((void *)v3 + 1) = v23;
  return result;
}

uint64_t WebKit::WebPageProxy::touchEventTrackingType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 32);
  unsigned int v3 = v2[2216];
  BOOL v4 = v2[2216] || v2[2217] || v2[2218] || v2[2219] != 0;
  if (v3 <= v4) {
    LOBYTE(v3) = v4;
  }
  uint64_t v5 = *(unsigned int *)(a2 + 44);
  if (v5)
  {
    uint64_t v6 = 72 * v5;
    unint64_t v7 = (unsigned __int8 *)(*(void *)(a2 + 32) + 12);
    do
    {
      int v8 = *v7;
      v7 += 72;
      switch(v8)
      {
        case 0:
          unsigned int v9 = v2[2219];
          goto LABEL_13;
        case 1:
          unsigned int v9 = v2[2217];
          goto LABEL_13;
        case 2:
        case 3:
          unsigned int v9 = v2[2218];
LABEL_13:
          if (v9 > v3) {
            LOBYTE(v3) = v9;
          }
          break;
        case 4:
          if ((v3 & 0xFE) == 0) {
            LOBYTE(v3) = 1;
          }
          break;
        default:
          break;
      }
      v6 -= 72;
    }
    while (v6);
  }
  return v3;
}

unsigned int *WebKit::WebPageProxy::sendPreventableTouchEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  v22[0] = a2;
  v22[1] = a3;
  unsigned int v9 = (_OWORD *)(a4 + 4);
  int v8 = *(unsigned __int8 *)(a4 + 4);
  if (*(unsigned char *)(a4 + 4)) {
    BOOL v10 = v8 == 13;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10 || v8 == 7 && *(_DWORD *)(a4 + 72) != 27)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    *(void *)(*(void *)(a1 + 32) + 2264) = v11;
  }
  v21[0] = *(void *)(a1 + 32) + 1928;
  v21[1] = v22;
  void v21[2] = a4;
  *(void *)&long long v23 = a1;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  uint64_t v12 = *(atomic_uint **)(a1 + 24);
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  *((void *)&v23 + 1) = v12;
  int v24 = 0;
  *(_OWORD *)uint64_t v25 = *v9;
  *(_OWORD *)&v25[12] = *(_OWORD *)((char *)v9 + 12);
  WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v26, (uint64_t *)(a4 + 32));
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v28, (uint64_t *)(a4 + 48));
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v29, (uint64_t *)(a4 + 64));
  v29[1] = *(_OWORD *)(a4 + 80);
  int v30 = *(_DWORD *)(a4 + 96);
  uint64_t v13 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v13)
  {
    uint64_t v14 = v13;
    CFRetain(*(CFTypeRef *)(v13 + 8));
    uint64_t v15 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v14 + 32) + 16));
    if (v15)
    {
      WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0,unsigned long long>(*(void *)(v15 + 24), (uint64_t)v21, &v23, *(void *)(v15 + 16));
      CFRelease(*(CFTypeRef *)(v14 + 8));
      goto LABEL_15;
    }
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0,unsigned long long>(*(void *)(a1 + 256), (uint64_t)v21, &v23, *(void *)(*(void *)(a1 + 32) + 1928));
LABEL_15:
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v16);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v17);
  uint64_t v19 = v26;
  if (v26)
  {
    uint64_t v26 = 0;
    int v27 = 0;
    WTF::fastFree(v19, v18);
  }
  uint64_t result = (unsigned int *)*((void *)&v23 + 1);
  *((void *)&v23 + 1) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v18);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::handlePreventableTouchEvent(uint64_t this, WebKit::NativeWebTouchEvent *a2)
{
  if (*(unsigned char *)(this + 801)) {
    return this;
  }
  uint64_t v2 = this;
  if (!*(unsigned char *)(this + 800) || !*(void *)(this + 328)) {
    return this;
  }
  kdebug_trace();
  uint64_t v4 = *((unsigned int *)a2 + 11);
  if (v4)
  {
    uint64_t v5 = 72 * v4;
    uint64_t v6 = *((void *)a2 + 4) + 4;
    do
    {
      v6 += 72;
      unint64_t v7 = *(unsigned __int8 **)(v2 + 32);
      if (v7[2216] != 2)
      {
        unsigned int v8 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        unsigned int v9 = v7[2216];
        if (v8 > v9) {
          LOBYTE(v9) = v8;
        }
        v7[2216] = v9;
      }
      if (v7[2217] != 2)
      {
        unsigned int v10 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        unsigned int v11 = v7[2217];
        if (v10 > v11) {
          LOBYTE(v11) = v10;
        }
        v7[2217] = v11;
      }
      if (v7[2218] != 2)
      {
        unsigned int v12 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        unsigned int v13 = v7[2218];
        if (v12 > v13) {
          LOBYTE(v13) = v12;
        }
        v7[2218] = v13;
      }
      if (v7[2219] != 2)
      {
        unsigned int v14 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        unsigned int v15 = v7[2219];
        if (v14 > v15) {
          LOBYTE(v15) = v14;
        }
        v7[2219] = v15;
      }
      if (v7[2217] != 2)
      {
        unsigned int v16 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        unsigned int v17 = v7[2217];
        if (v16 > v17) {
          unsigned int v17 = v16;
        }
        v7[2217] = v17;
        if (v17 != 2)
        {
          unsigned int v18 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
          unsigned int v19 = v7[2217];
          if (v18 > v19) {
            unsigned int v19 = v18;
          }
          v7[2217] = v19;
          if (v19 != 2)
          {
            unsigned int v20 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
            unsigned int v21 = v7[2217];
            if (v20 > v21) {
              LOBYTE(v21) = v20;
            }
            v7[2217] = v21;
          }
        }
      }
      if (v7[2218] != 2)
      {
        unsigned int v22 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        unsigned int v23 = v7[2218];
        if (v22 > v23) {
          LOBYTE(v23) = v22;
        }
        v7[2218] = v23;
      }
      if (v7[2219] != 2)
      {
        unsigned int v24 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        unsigned int v25 = v7[2219];
        if (v24 > v25) {
          unsigned int v25 = v24;
        }
        v7[2219] = v25;
        if (v25 != 2)
        {
          unsigned int v26 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
          unsigned int v27 = v7[2219];
          if (v26 > v27) {
            unsigned int v27 = v26;
          }
          v7[2219] = v27;
          if (v27 != 2)
          {
            unsigned int v28 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
            unsigned int v29 = v7[2219];
            if (v28 > v29) {
              LOBYTE(v29) = v28;
            }
            v7[2219] = v29;
          }
        }
      }
      if (v7[2217] != 2)
      {
        unsigned int v30 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        unsigned int v31 = v7[2217];
        if (v30 > v31) {
          LOBYTE(v31) = v30;
        }
        v7[2217] = v31;
      }
      if (v7[2218] != 2)
      {
        unsigned int v32 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        unsigned int v33 = v7[2218];
        if (v32 > v33) {
          LOBYTE(v33) = v32;
        }
        v7[2218] = v33;
      }
      if (v7[2219] != 2)
      {
        unsigned int v34 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        unsigned int v35 = v7[2219];
        if (v34 > v35) {
          LOBYTE(v35) = v34;
        }
        v7[2219] = v35;
      }
      v5 -= 72;
    }
    while (v5);
  }
  int v36 = *((unsigned __int8 *)a2 + 4);
  if (v36 == 11) {
    *(unsigned char *)(v2 + 872) = 0;
  }
  int v37 = WebKit::WebPageProxy::touchEventTrackingType(v2, (uint64_t)a2);
  if (v37 == 1)
  {
    *((unsigned char *)a2 + 88) = 0;
    WebKit::WebPageProxy::handleUnpreventableTouchEvent((WebKit::WebPageProxy *)v2, a2);
    unsigned int v39 = *((unsigned __int8 *)a2 + 4);
    v48[0] = 0;
    v48[24] = 0;
    WebKit::WebPageProxy::didReceiveEvent(v2, v39, 0, (uint64_t)v48);
    BOOL v38 = v36 == 11;
  }
  else
  {
    BOOL v38 = v36 == 11;
    if (v37)
    {
      switch(v36)
      {
        case 11:
          ++*(void *)(v2 + 856);
          break;
        case 12:
          if (!*(unsigned char *)(v2 + 872)) {
            *(unsigned char *)(v2 + 872) = 1;
          }
          break;
        case 13:
          ++*(void *)(v2 + 864);
          break;
      }
      WebKit::WebPageProxy::sendPreventableTouchEvent(v2, *(void *)(*(void *)(v2 + 328) + 272), *(void *)(*(void *)(v2 + 328) + 280), (uint64_t)a2);
      goto LABEL_90;
    }
  }
  if (v38)
  {
    uint64_t v40 = *(void *)(v2 + 40);
    if (v40) {
      uint64_t v41 = *(void *)(v40 + 8);
    }
    else {
      uint64_t v41 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v41 + 1592))(v41);
    (*(void (**)(uint64_t, void))(*(void *)v41 + 624))(v41, 0);
    goto LABEL_89;
  }
  if (v36 == 12)
  {
    uint64_t v42 = *(void *)(v2 + 40);
    if (v42) {
      uint64_t v41 = *(void *)(v42 + 8);
    }
    else {
      uint64_t v41 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v41 + 1592))(v41);
    (*(void (**)(uint64_t, void))(*(void *)v41 + 632))(v41, 0);
LABEL_89:
    (*(void (**)(uint64_t))(*(void *)v41 + 1600))(v41);
    goto LABEL_90;
  }
  if (v36 == 13)
  {
    uint64_t v43 = *(void *)(v2 + 40);
    if (v43) {
      uint64_t v41 = *(void *)(v43 + 8);
    }
    else {
      uint64_t v41 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v41 + 1592))(v41);
    (*(void (**)(uint64_t, void))(*(void *)v41 + 640))(v41, 0);
    goto LABEL_89;
  }
LABEL_90:
  uint64_t v44 = *((unsigned int *)a2 + 11);
  if (v44)
  {
    uint64_t v45 = 72 * v44;
    long long v46 = (unsigned __int8 *)(*((void *)a2 + 4) + 12);
    while (1)
    {
      int v47 = *v46;
      v46 += 72;
      if ((v47 | 4) != 4) {
        break;
      }
      v45 -= 72;
      if (!v45) {
        goto LABEL_94;
      }
    }
  }
  else
  {
LABEL_94:
    *(_DWORD *)(*(void *)(v2 + 32) + 2216) = 0;
    WebKit::WebPageProxy::didReleaseAllTouchPoints(v2);
  }

  return kdebug_trace();
}

void WebKit::WebPageProxy::handleUnpreventableTouchEvent(WebKit::WebPageProxy *this, const WebKit::NativeWebTouchEvent *a2)
{
  if (!*((unsigned char *)this + 801))
  {
    if (*((unsigned char *)this + 800))
    {
      uint64_t v3 = *((void *)this + 41);
      if (v3)
      {
        if (WebKit::WebPageProxy::touchEventTrackingType((uint64_t)this, (uint64_t)a2))
        {
          WebKit::WebPageProxy::sendUnpreventableTouchEvent((uint64_t)this, *(void *)(v3 + 272), *(void *)(v3 + 280), (uint64_t)a2);
          uint64_t v5 = *((unsigned int *)a2 + 11);
          if (v5)
          {
            uint64_t v6 = 72 * v5;
            unint64_t v7 = (unsigned __int8 *)(*((void *)a2 + 4) + 12);
            while (1)
            {
              int v8 = *v7;
              v7 += 72;
              if ((v8 | 4) != 4) {
                break;
              }
              v6 -= 72;
              if (!v6) {
                goto LABEL_10;
              }
            }
          }
          else
          {
LABEL_10:
            *(_DWORD *)(*((void *)this + 4) + 2216) = 0;
            WebKit::WebPageProxy::didReleaseAllTouchPoints((uint64_t)this);
          }
        }
      }
    }
  }
}

void WebKit::WebPageProxy::didReceiveEvent(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  if (a2 > 0xE) {
    return;
  }
  if (((1 << a2) & 0x7FBB) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 256);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
    WebKit::ResponsivenessTimer::stop((unsigned char *)(v8 + 56));
    if (v8) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
    }
    if (a2 < 6) {
      goto LABEL_6;
    }
    if (a2 - 7 < 4)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(v16 + 768);
      if (v17 == *(void *)(v16 + 776))
      {
        uint64_t v75 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          int v83 = 136446210;
          *(void *)long long v84 = "void WebKit::WebPageProxy::keyEventHandlingCompleted(std::optional<WebEventType>, BOOL)";
          _os_log_fault_impl(&dword_1985F2000, v75, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9760: Invalid message dispatched %{public}s", (uint8_t *)&v83, 0xCu);
        }
        uint64_t v76 = *(void *)(*(void *)(a1 + 256) + 144);
        if (!v76)
        {
          __break(0xC471u);
          JUMPOUT(0x198E68FD0);
        }
        goto LABEL_112;
      }
      uint64_t v18 = *(void *)(v16 + 784);
      uint64_t v19 = v18 + 96 * v17;
      int v83 = 0;
      long long v20 = *(_OWORD *)(v19 + 4);
      *(_OWORD *)&v84[12] = *(_OWORD *)(v19 + 16);
      *(_OWORD *)long long v84 = v20;
      unsigned int v21 = *(_DWORD **)(v19 + 32);
      if (v21) {
        *v21 += 2;
      }
      *(void *)&long long v85 = v21;
      unsigned int v22 = *(_DWORD **)(v19 + 40);
      if (v22) {
        *v22 += 2;
      }
      *((void *)&v85 + 1) = v22;
      unsigned int v23 = *(_DWORD **)(v19 + 48);
      if (v23) {
        *v23 += 2;
      }
      *(void *)&long long v86 = v23;
      unsigned int v24 = *(_DWORD **)(v19 + 56);
      if (v24) {
        *v24 += 2;
      }
      *((void *)&v86 + 1) = v24;
      unsigned int v25 = *(_DWORD **)(v19 + 64);
      if (v25) {
        *v25 += 2;
      }
      *(void *)char v87 = v25;
      *(_OWORD *)&v87[8] = *(_OWORD *)(v19 + 72);
      uint64_t v26 = 3 * v17;
      uint64_t v27 = v18 + 32 * v26;
      uint64_t v28 = *(void *)(v27 + 88);
      *(void *)(v27 + 88) = 0;
      *(void *)&v87[24] = v28;
      WTF::VectorDestructor<true,WebKit::NativeWebKeyboardEvent>::destruct((WebKit::WebKeyboardEvent *)(*(void *)(v16 + 784) + 32 * v26), (WTF::StringImpl *)(*(void *)(v16 + 784) + 32 * v26 + 96));
      uint64_t v29 = *(void *)(v16 + 768);
      if (v29 == *(unsigned int *)(v16 + 792) - 1) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v29 + 1;
      }
      *(void *)(v16 + 768) = v30;
      if (v84[0] == a2)
      {
        unsigned int v31 = *(void **)(a1 + 32);
        uint64_t v32 = v31[96];
        uint64_t v33 = v31[97];
        if (v32 != v33 && *(void *)(a1 + 328))
        {
          uint64_t v34 = v31[98];
          uint64_t v35 = v34 + 96 * v32;
          *(_DWORD *)long long buf = 0;
          long long v36 = *(_OWORD *)(v35 + 4);
          *(_OWORD *)&v93[12] = *(_OWORD *)(v35 + 16);
          *(_OWORD *)uint64_t v93 = v36;
          int v37 = *(_DWORD **)(v35 + 32);
          if (v37) {
            *v37 += 2;
          }
          long long v94 = v37;
          BOOL v38 = *(_DWORD **)(v35 + 40);
          if (v38) {
            *v38 += 2;
          }
          long long v95 = v38;
          unsigned int v39 = *(_DWORD **)(v35 + 48);
          if (v39) {
            *v39 += 2;
          }
          long long v96 = v39;
          uint64_t v40 = *(_DWORD **)(v35 + 56);
          if (v40) {
            *v40 += 2;
          }
          long long v97 = v40;
          uint64_t v41 = *(_DWORD **)(v35 + 64);
          if (v41) {
            *v41 += 2;
          }
          uint64_t v98 = v41;
          long long v99 = *(_OWORD *)(v35 + 72);
          uint64_t v42 = *(const void **)(v34 + 96 * v32 + 88);
          CFTypeRef cf = v42;
          if (v42) {
            CFRetain(v42);
          }
          WebKit::WebPageProxy::sendKeyEvent((void *)a1, (uint64_t)buf);
          CFTypeRef v44 = cf;
          CFTypeRef cf = 0;
          if (v44) {
            CFRelease(v44);
          }
          WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)buf, v43);
        }
        CFRetain(*(CFTypeRef *)(a1 + 8));
        uint64_t v45 = *(void *)(a1 + 40);
        if (v45) {
          uint64_t v46 = *(void *)(v45 + 8);
        }
        else {
          uint64_t v46 = 0;
        }
        (*(void (**)(uint64_t))(*(void *)v46 + 1592))(v46);
        (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v46 + 608))(v46, &v83, a3);
        (*(void (**)(uint64_t))(*(void *)v46 + 1600))(v46);
        if ((a3 & 1) == 0) {
          (*(void (**)(void, uint64_t, int *))(**(void **)(a1 + 104) + 144))(*(void *)(a1 + 104), a1, &v83);
        }
        if (v32 == v33)
        {
          long long v61 = *(CFTypeRef **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24))
                              + 320);
          if (v61)
          {
            CFRetain(v61[1]);
            WebKit::WebAutomationSession::keyboardEventsFlushedForPage((WebKit::WebAutomationSession *)v61, (const WebKit::WebPageProxy *)a1);
            CFRelease(v61[1]);
          }
        }
        CFRelease(*(CFTypeRef *)(a1 + 8));
      }
      else
      {
        unint64_t v80 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)uint64_t v93 = "void WebKit::WebPageProxy::keyEventHandlingCompleted(std::optional<WebEventType>, BOOL)";
          _os_log_fault_impl(&dword_1985F2000, v80, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9763: Invalid message dispatched %{public}s", buf, 0xCu);
        }
        uint64_t v81 = *(void *)(*(void *)(a1 + 256) + 144);
        if (!v81)
        {
          __break(0xC471u);
          JUMPOUT(0x198E69228);
        }
        *(unsigned char *)(v81 + 98) = 1;
      }
      uint64_t v63 = *(const void **)&v87[24];
      *(void *)&v87[24] = 0;
      if (v63) {
        CFRelease(v63);
      }
      WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)&v83, v62);
      return;
    }
    if (a2 != 6) {
      return;
    }
  }
  else if (a2 == 2)
  {
LABEL_6:
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(v9 + 856);
    uint64_t v11 = *(void *)(v9 + 864);
    if (*(unsigned char *)(a4 + 24))
    {
      if (v10 != v11)
      {
        uint64_t v12 = *(void *)a4;
        uint64_t v13 = *(void *)(a4 + 8);
        uint64_t v14 = *(void *)(v9 + 872) + 160 * v10;
        *(void *)(v14 + 36) = *(void *)(a4 + 16);
        LOBYTE(v83) = 0;
        v84[12] = 0;
        WebKit::WebPageProxy::sendMouseEvent(a1, v12, v13, v14, (uint64_t)&v83);
        if (v84[12]) {
          WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83, v15);
        }
        return;
      }
      __break(0xC471u);
LABEL_116:
      JUMPOUT(0x198E68F8CLL);
    }
    if (v10 != v11)
    {
      uint64_t v47 = 5 * v10;
      uint64_t v48 = *(void *)(v9 + 872) + 32 * v47;
      int v83 = 0;
      long long v49 = *(_OWORD *)(v48 + 16);
      *(_OWORD *)long long v84 = *(_OWORD *)(v48 + 4);
      *(_OWORD *)&v84[12] = v49;
      long long v50 = *(_OWORD *)(v48 + 80);
      long long v52 = *(_OWORD *)(v48 + 32);
      long long v51 = *(_OWORD *)(v48 + 48);
      *(_OWORD *)char v87 = *(_OWORD *)(v48 + 64);
      *(_OWORD *)&v87[16] = v50;
      long long v85 = v52;
      long long v86 = v51;
      uint64_t v53 = *(WTF::StringImpl **)(v48 + 96);
      *(void *)(v48 + 96) = 0;
      uint64_t v88 = v53;
      char v89 = *(unsigned char *)(v48 + 104);
      uint64_t v54 = *(void *)(v48 + 112);
      *(void *)(v48 + 112) = 0;
      v90[0] = v54;
      *(void *)&long long v49 = *(void *)(v48 + 120);
      *(void *)(v48 + 120) = 0;
      v90[1] = v49;
      uint64_t v55 = *(void *)(v48 + 128);
      *(void *)(v48 + 128) = 0;
      v91[0] = v55;
      *(void *)&long long v49 = *(void *)(v48 + 136);
      *(void *)(v48 + 136) = 0;
      v91[1] = v49;
      char v56 = *(const void **)(v48 + 144);
      *(void *)(v48 + 144) = 0;
      WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct((WTF::StringImpl *)(*(void *)(v9 + 872) + 32 * v47), (WTF::StringImpl *)(*(void *)(v9 + 872) + 32 * v47 + 160));
      uint64_t v58 = *(void *)(v9 + 856);
      if (v58 == *(unsigned int *)(v9 + 880) - 1) {
        uint64_t v59 = 0;
      }
      else {
        uint64_t v59 = v58 + 1;
      }
      *(void *)(v9 + 856) = v59;
      if (v84[0] == a2)
      {
        if (v85 == 2)
        {
          if (a2)
          {
            if (*(unsigned char *)(a1 + 832) != 1) {
              *(unsigned char *)(a1 + 832) = 0;
            }
          }
          else
          {
            if (a3) {
              char v64 = 2;
            }
            else {
              char v64 = 3;
            }
            *(unsigned char *)(a1 + 832) = v64;
          }
          WebKit::WebPageProxy::processContextMenuCallbacks(a1, v57);
        }
        if (*(void *)(*(void *)(a1 + 32) + 856) == *(void *)(*(void *)(a1 + 32) + 864))
        {
          uint64_t v65 = *(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24))
                          + 320);
          if (v65)
          {
            CFRetain(*(CFTypeRef *)(v65 + 8));
            CFRelease(*(CFTypeRef *)(v65 + 8));
          }
          uint64_t v66 = *(void *)(a1 + 32);
          uint64_t v67 = *(unsigned int *)(v66 + 228);
          if (v67)
          {
            uint64_t v68 = *(uint64_t **)(v66 + 216);
            uint64_t v69 = 8 * v67;
            do
            {
              uint64_t v70 = *v68++;
              (*(void (**)(uint64_t))(*(void *)v70 + 16))(v70);
              v69 -= 8;
            }
            while (v69);
            uint64_t v66 = *(void *)(a1 + 32);
          }
          WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v66 + 216, 0);
        }
        else
        {
          WebKit::WebPageProxy::processNextQueuedMouseEvent((unsigned int *)a1);
        }
      }
      else
      {
        unint64_t v78 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)uint64_t v93 = "void WebKit::WebPageProxy::mouseEventHandlingCompleted(std::optional<WebEventType>, BOOL, std"
                           "::optional<RemoteUserInputEventData>)";
          _os_log_fault_impl(&dword_1985F2000, v78, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9734: Invalid message dispatched %{public}s", buf, 0xCu);
        }
        uint64_t v79 = *(void *)(*(void *)(a1 + 256) + 144);
        if (!v79)
        {
          __break(0xC471u);
          JUMPOUT(0x198E69208);
        }
        *(unsigned char *)(v79 + 98) = 1;
      }
      void v91[2] = 0;
      if (v56) {
        CFRelease(v56);
      }
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v91, v71);
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v90, v72);
      uint64_t v74 = v88;
      uint64_t v88 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2) {
          WTF::StringImpl::destroy(v74, v73);
        }
        else {
          *(_DWORD *)v74 -= 2;
        }
      }
      return;
    }
    unint64_t v77 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v83 = 136446210;
      *(void *)long long v84 = "void WebKit::WebPageProxy::mouseEventHandlingCompleted(std::optional<WebEventType>, BOOL, std::op"
                       "tional<RemoteUserInputEventData>)";
      _os_log_fault_impl(&dword_1985F2000, v77, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9731: Invalid message dispatched %{public}s", (uint8_t *)&v83, 0xCu);
    }
    uint64_t v76 = *(void *)(*(void *)(a1 + 256) + 144);
    if (!v76)
    {
      __break(0xC471u);
      JUMPOUT(0x198E69014);
    }
LABEL_112:
    *(unsigned char *)(v76 + 98) = 1;
    return;
  }
  long long v60 = WebKit::WebPageProxy::wheelEventCoalescer((WebKit::WebPageProxy *)a1);
  if (v60[32] == v60[33])
  {
    uint64_t v82 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v83 = 136446210;
      *(void *)long long v84 = "void WebKit::WebPageProxy::didReceiveEvent(WebEventType, BOOL, std::optional<RemoteUserInputEventData>)";
      _os_log_fault_impl(&dword_1985F2000, v82, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9839: Invalid message dispatched %{public}s", (uint8_t *)&v83, 0xCu);
    }
    uint64_t v76 = *(void *)(*(void *)(a1 + 256) + 144);
    if (!v76)
    {
      __break(0xC471u);
      goto LABEL_116;
    }
    goto LABEL_112;
  }

  WebKit::WebPageProxy::wheelEventHandlingCompleted((WebKit::WebPageProxy *)a1, a3);
}

uint64_t WebKit::WebPageProxy::resetPotentialTapSecurityOrigin(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      char v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ResetPotentialTapSecurityOrigin>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

void WebKit::WebPageProxy::sendUnpreventableTouchEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  v21[0] = a2;
  v21[1] = a3;
  uint64_t v9 = (_OWORD *)(a4 + 4);
  int v8 = *(unsigned __int8 *)(a4 + 4);
  if (*(unsigned char *)(a4 + 4)) {
    BOOL v10 = v8 == 13;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10 || v8 == 7 && *(_DWORD *)(a4 + 72) != 27)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    *(void *)(*(void *)(a1 + 32) + 2264) = v11;
  }
  v20[0] = *(void *)(a1 + 32) + 1928;
  v20[1] = v21;
  v20[2] = a4;
  *(void *)&long long v22 = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *((void *)&v22 + 1) = a1;
  int v23 = 0;
  *(_OWORD *)unsigned int v24 = *v9;
  *(_OWORD *)&v24[12] = *(_OWORD *)((char *)v9 + 12);
  WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v25, (uint64_t *)(a4 + 32));
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v27, (uint64_t *)(a4 + 48));
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v28, (uint64_t *)(a4 + 64));
  v28[1] = *(_OWORD *)(a4 + 80);
  int v29 = *(_DWORD *)(a4 + 96);
  uint64_t v12 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v12)
  {
    uint64_t v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    uint64_t v14 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v13 + 32) + 16));
    if (v14)
    {
      WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0,unsigned long long>(*(void *)(v14 + 24), (uint64_t)v20, &v22, *(void *)(v14 + 16));
      CFRelease(*(CFTypeRef *)(v13 + 8));
      goto LABEL_13;
    }
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0,unsigned long long>(*(void *)(a1 + 256), (uint64_t)v20, &v22, *(void *)(*(void *)(a1 + 32) + 1928));
LABEL_13:
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v15);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v16);
  uint64_t v18 = v25;
  if (v25)
  {
    unsigned int v25 = 0;
    int v26 = 0;
    WTF::fastFree(v18, v17);
  }
  uint64_t v19 = *((void *)&v22 + 1);
  *((void *)&v22 + 1) = 0;
  if (v19) {
    CFRelease(*(CFTypeRef *)(v19 + 8));
  }
}

uint64_t WebKit::WebPageProxy::centerSelectionInVisibleArea(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      char v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CenterSelectionInVisibleArea>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::shouldTreatURLProtocolAsAppBound(WebKit *this, const WTF::URL *a2)
{
  if (a2) {
    return 0;
  }
  WTF::URL::host(this);
  if ((WebCore::SecurityOrigin::isLocalHostOrLoopbackIPAddress() & 1) != 0
    || (WTF::URL::protocolIs() & 1) != 0
    || (WTF::URL::protocolIs() & 1) != 0
    || (WTF::URL::protocolIs() & 1) != 0
    || (WTF::URL::protocolIs() & 1) != 0)
  {
    return 1;
  }

  return WTF::URL::protocolIsJavaScript(this);
}

uint64_t WebKit::WebPageProxy::isNavigatingToAppBoundDomainTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1329);
  if (*(unsigned char *)(a1 + 1329)) {
    uint64_t v2 = *(unsigned char *)(a1 + 1328) != 0;
  }
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

unsigned int *WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v4 = 1;
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(v4 + 8) = v5;
  atomic_fetch_add((atomic_uint *volatile)v4, 1u);
  uint64_t v6 = *(void *)(a1 + 256);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 1928);
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2169;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v28 = v8;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v9 = &unk_1EE9DA5E0;
  v9[1] = v4;
  unsigned int v25 = v9;
  uint64_t v26 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v27 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v28, 0, (uint64_t)&v25, 1);
  if (v27)
  {
    uint64_t v11 = v25;
    unsigned int v25 = 0;
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
  }
  uint64_t v12 = v28;
  uint64_t v28 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v21, v22);
  }
  uint64_t v13 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 312));
  atomic_fetch_add((atomic_uint *volatile)(v13 + 16), 1u);
  atomic_fetch_add((atomic_uint *volatile)v4, 1u);
  uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v14 = 380;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 66) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 68) = 0;
  *((void *)v14 + 70) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  uint64_t v28 = v14;
  unsigned int v15 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned int v15 = &unk_1EE9DA608;
  v15[1] = v4;
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unsigned int v25 = v15;
  uint64_t v26 = v16;
  char v27 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v13, &v28, 0, (uint64_t)&v25, 1);
  if (v27)
  {
    uint64_t v18 = v25;
    unsigned int v25 = 0;
    if (v18) {
      (*(void (**)(void *))(*v18 + 8))(v18);
    }
  }
  uint64_t v19 = v28;
  uint64_t v28 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v17);
    WTF::fastFree(v23, v24);
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v13 + 16));
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v4);
}

void WebKit::WebPageProxy::receivedPolicyDecision(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, API::WebsitePolicies **a4, const String **a5, int a6, uint64_t a7, __int16 *a8, uint64_t *a9)
{
  v103[7] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 801) && *(unsigned char *)(a1 + 800))
  {
    int v16 = (int)a2;
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(*(void *)(v17 + 992) + 8);
    if (v18)
    {
      uint64_t v19 = v18 - 16;
      CFRetain(*(CFTypeRef *)(v18 - 8));
    }
    else
    {
      uint64_t v19 = 0;
    }
    v77[0] = v19;
    v77[1] = v17 + 976;
    ++*(_DWORD *)(v17 + 1348);
    if (a3 && v16 == 2 && !a6)
    {
      long long v20 = *(void **)(a1 + 32);
      uint64_t v21 = v20[126];
      if (v21) {
        BOOL v22 = *(void *)(a3 + 16) == v21;
      }
      else {
        BOOL v22 = 0;
      }
      if (v22)
      {
        *(unsigned char *)(v17 + 1344) = 1;
        v20[147] = 0;
        int v23 = (WTF::StringImpl *)v20[148];
        v20[148] = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 != 2)
          {
            char v24 = 0;
            uint64_t v25 = 0;
            unint64_t v26 = 0;
            *(_DWORD *)v23 -= 2;
LABEL_50:
            LOBYTE(v64) = 0;
            char v76 = 0;
            if (*a4)
            {
              API::WebsitePolicies::data(*a4, &v79);
              std::optional<WebKit::WebsitePoliciesData>::operator=[abi:sn180100]<WebKit::WebsitePoliciesData,void>((uint64_t)&v64, (uint64_t *)&v79);
              WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v79, v47);
            }
            v79.n128_u16[0] = *(_WORD *)(a1 + 1328);
            v79.n128_u8[2] = v16;
            if (a3)
            {
              v79.n128_u64[1] = *(void *)(a3 + 16);
              char v48 = 1;
            }
            else
            {
              char v48 = 0;
              v79.n128_u8[8] = 0;
            }
            char v80 = v48;
            unint64_t v81 = v26 | v25;
            char v82 = v24;
            LOBYTE(v83) = 0;
            char v95 = 0;
            if (v76)
            {
              long long v49 = v64;
              long long v64 = 0u;
              long long v83 = v49;
              *(void *)&long long v49 = v65;
              uint64_t v65 = 0;
              uint64_t v84 = v49;
              uint64_t v50 = v66;
              uint64_t v66 = 0;
              uint64_t v85 = v50;
              *(void *)&long long v49 = v67;
              uint64_t v67 = 0;
              uint64_t v86 = v49;
              long long v51 = v68;
              long long v68 = 0u;
              long long v52 = v69;
              long long v69 = 0u;
              long long v87 = v51;
              long long v88 = v52;
              char v90 = v71;
              __int16 v89 = v70;
              char v91 = v72;
              uint64_t v53 = v73;
              uint64_t v73 = 0;
              uint64_t v92 = v53;
              char v94 = v75;
              long long v93 = v74;
              char v95 = 1;
            }
            LOBYTE(v96) = 0;
            char v97 = 0;
            if (*(unsigned char *)(a7 + 8))
            {
              uint64_t v57 = *(const char ***)a7;
              *(void *)a7 = 0;
              long long v96 = v57;
              char v97 = 1;
            }
            LOBYTE(v98) = 0;
            LOBYTE(cf) = 0;
            if (*((unsigned char *)a8 + 16))
            {
              __int16 v98 = *a8;
              uint64_t v59 = (WTF::StringImpl *)*((void *)a8 + 1);
              *((void *)a8 + 1) = 0;
              long long v99 = v59;
              LOBYTE(cf) = 1;
            }
            uint64_t v54 = *a9;
            *a9 = 0;
            (*(void (**)(uint64_t, __n128 *))(*(void *)v54 + 16))(v54, &v79);
            (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
            if ((_BYTE)cf)
            {
              long long v60 = v99;
              long long v99 = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2) {
                  WTF::StringImpl::destroy(v60, v55);
                }
                else {
                  *(_DWORD *)v60 -= 2;
                }
              }
            }
            if (v97) {
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v96);
            }
            if (v95) {
              WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v83, v55);
            }
            if (v76) {
              WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v64, v55);
            }
            WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v77, (uint64_t)v55, v56);
            return;
          }
          WTF::StringImpl::destroy(v23, a2);
        }
      }
    }
    else if (v16 == 1)
    {
      uint64_t v27 = *(void *)(*(void *)(a1 + 256) + 512);
      if (v27)
      {
        uint64_t v28 = *(void *)(v27 + 8);
        if (v28) {
          int v29 = (WebKit::WebProcessPool *)(v28 - 16);
        }
        else {
          int v29 = 0;
        }
        long long v61 = v29;
      }
      else
      {
        long long v61 = 0;
      }
      uint64_t v30 = *(WebKit::WebsiteDataStore **)(a1 + 312);
      unsigned int v31 = *a5 + 5;
      if (a3)
      {
        v79.n128_u16[0] = *(_WORD *)(a3 + 3088);
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v79.n128_u64[1], (const String *)(a3 + 3096));
        LOBYTE(v101) = 0;
        DWORD2(v102) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v101, a3 + 3296);
        uint64_t v32 = *(WTF::StringImpl **)(a3 + 3328);
        if (v32) {
          *(_DWORD *)v32 += 2;
        }
        v103[0] = v32;
        long long v33 = *(_OWORD *)(a3 + 3336);
        *(_OWORD *)&v103[3] = *(_OWORD *)(a3 + 3352);
        *(_OWORD *)((char *)&v103[4] + 6) = *(_OWORD *)(a3 + 3366);
        *(_OWORD *)&v103[1] = v33;
      }
      else
      {
        v79.n128_u16[0] = 0;
        WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v79.n128_i8[8]);
        LOBYTE(v103[5]) = 0;
        LODWORD(v103[6]) = 0;
        WORD2(v103[6]) = 0;
        long long v101 = 0u;
        long long v102 = 0u;
        memset(v103, 0, 25);
      }
      WebKit::WebProcessPool::createDownloadProxy(v61, v30, v31, (WebKit::WebPageProxy *)a1, (const WebKit::FrameInfoData *)&v79, (uint64_t)&v64);
      uint64_t v35 = v103[0];
      v103[0] = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, v34);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
      if (DWORD2(v102) != -1) {
        ((void (*)(char *, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[DWORD2(v102)])(&v78, &v101);
      }
      DWORD2(v102) = -1;
      CFTypeRef v36 = cf;
      CFTypeRef cf = 0;
      if (v36) {
        CFRelease(v36);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v79.n128_i8[8]);
      uint64_t v37 = v64;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
      BOOL v38 = *(atomic_uint **)(a1 + 24);
      if (v38) {
        atomic_fetch_add(v38, 1u);
      }
      unsigned int v39 = *a5;
      *a5 = 0;
      uint64_t v40 = (void *)WTF::fastMalloc((WTF *)0x20);
      *uint64_t v40 = &unk_1EE9DA680;
      v40[1] = a1;
      v40[2] = v38;
      void v40[3] = v39;
      uint64_t v41 = *(void *)(v37 + 328);
      *(void *)(v37 + 328) = v40;
      if (v41) {
        (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
      }
      if (a3)
      {
        uint64_t v42 = v64;
        *(unsigned char *)(v64 + 312) = *(unsigned char *)(a3 + 536);
        v79.n128_u64[0] = *(void *)(a3 + 448);
        unint64_t v43 = *(void *)(a3 + 456);
        *(void *)(a3 + 448) = 0;
        *(void *)(a3 + 456) = 0;
        v79.n128_u64[1] = v43;
        WebKit::DownloadProxy::setRedirectChain(v42, (WTF::StringImpl *)&v79);
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v44);
      }
      uint64_t v45 = v64;
      uint64_t v46 = *(void *)(v64 + 56);
      unint64_t v26 = v46 & 0xFFFFFFFFFFFFFF00;
      *(void *)&long long v64 = 0;
      CFRelease(*(CFTypeRef *)(v45 + 8));
      uint64_t v25 = v46;
      char v24 = 1;
      goto LABEL_50;
    }
    char v24 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    goto LABEL_50;
  }
  v79.n128_u16[0] = 0;
  v79.n128_u8[2] = 2;
  v79.n128_u8[8] = 0;
  char v80 = 0;
  LOBYTE(v81) = 0;
  char v82 = 0;
  LOBYTE(v83) = 0;
  char v95 = 0;
  LOBYTE(v96) = 0;
  char v97 = 0;
  LOBYTE(v98) = 0;
  LOBYTE(cf) = 0;
  uint64_t v9 = *a9;
  *a9 = 0;
  (*(void (**)(uint64_t, __n128 *))(*(void *)v9 + 16))(v9, &v79);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if ((_BYTE)cf)
  {
    uint64_t v58 = v99;
    long long v99 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2) {
        WTF::StringImpl::destroy(v58, v10);
      }
      else {
        *(_DWORD *)v58 -= 2;
      }
    }
  }
  if (v97) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v96);
  }
  if (v95) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v83, v10);
  }
}

uint64_t WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v11 = *(WTF::StringImpl **)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, a2);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  uint64_t v4 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  uint64_t v5 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  return a1;
}

WTF *WebKit::DownloadProxy::setRedirectChain(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl ***)(a1 + 296);
  uint64_t v4 = *(unsigned int *)(a1 + 308);
  if (v4)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t v7 = *v5;
      *uint64_t v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, a2);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v3, a2);
}

void WebKit::WebPageProxy::commitProvisionalPage(uint64_t a1, WTF::String *a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl **a9, __int16 a10, const void **a11, __int16 a12, char a13, char a14, unsigned __int8 a15, CFTypeRef **a16)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  int v23 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = *(void *)(a1 + 32);
    uint64_t v25 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v25) {
      LODWORD(v25) = *(_DWORD *)(v25 + 108);
    }
    uint64_t v26 = *(void *)(v24 + 760);
    unint64_t v27 = *(void *)(v24 + 1928);
    uint64_t v28 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 1192) + 40) + 16) + 136);
    if (v28) {
      LODWORD(v28) = *(_DWORD *)(v28 + 108);
    }
    *(_DWORD *)long long buf = 134219008;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v26;
    __int16 v157 = 2048;
    unint64_t v158 = v27;
    __int16 v159 = 1024;
    int v160 = v25;
    __int16 v161 = 1024;
    LODWORD(v162) = v28;
    _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::commitProvisionalPage: newPID=%i", buf, 0x2Cu);
  }
  int v29 = *(CFTypeRef **)(a1 + 328);
  if (v29)
  {
    CFRetain(v29[1]);
    uint64_t v31 = *(void *)(a1 + 272);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v31 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v30))WebKit::WebFrameProxy::removeChildFrames((WebKit::WebFrameProxy *)v29, v32); {
  }
    }
  uint64_t v152 = (uint64_t)v29;
  if (*(unsigned char *)(a1 + 1266))
  {
    buf[0] = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SwipeAnimationDidEnd>(*(void *)(a1 + 256), (uint64_t)buf, *(void *)(*(void *)(a1 + 32) + 1928), 0);
  }
  WebKit::WebPageProxy::resetStateAfterProcessTermination(a1, 7);
  WebKit::WebPageProxy::removeAllMessageReceivers((WebKit::WebPageProxy *)a1);
  uint64_t v33 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(*(void *)(a1 + 160) + 8), *(void *)(*(void *)(a1 + 1192) + 88));
  uint64_t v149 = a3;
  uint64_t v150 = a4;
  uint64_t v147 = v33;
  if (!v33) {
    goto LABEL_63;
  }
  uint64_t v34 = v33;
  CFRetain(*(CFTypeRef *)(v33 + 8));
  uint64_t v37 = *(void *)(a1 + 1200);
  *(void *)(a1 + 1200) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  BOOL v38 = *(unsigned int **)(a1 + 1208);
  *(void *)(a1 + 1208) = 0;
  if (v38 && atomic_fetch_add((atomic_uint *volatile)v38, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v38);
    WTF::fastFree((WTF *)v38, v35);
  }
  if (!v152)
  {
    uint64_t v152 = 0;
    goto LABEL_63;
  }
  if (*(void *)(a1 + 336))
  {
    uint64_t v39 = *(void *)(a1 + 272);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v39 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v36))
    {
      uint64_t v40 = qword_1EB358370;
      if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v41 = *(void *)(a1 + 32);
        uint64_t v42 = *(void *)(v41 + 760);
        unint64_t v43 = *(void *)(v41 + 1928);
        uint64_t v44 = *(void *)(*(void *)(a1 + 256) + 136);
        if (v44) {
          LODWORD(v44) = *(_DWORD *)(v44 + 108);
        }
        *(_DWORD *)long long buf = 134219008;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v42;
        __int16 v157 = 2048;
        unint64_t v158 = v43;
        __int16 v159 = 1024;
        int v160 = v44;
        __int16 v161 = 1024;
        LODWORD(v162) = v44;
        uint64_t v45 = "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Not suspending"
              " current page for process pid %i because it has an opener.";
LABEL_62:
        _os_log_impl(&dword_1985F2000, v40, OS_LOG_TYPE_DEFAULT, v45, buf, 0x2Cu);
        goto LABEL_63;
      }
      goto LABEL_63;
    }
  }
  if (!*(unsigned char *)(a1 + 1121))
  {
    uint64_t v40 = qword_1EB358370;
    if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v71 = *(void *)(a1 + 32);
      uint64_t v72 = *(void *)(v71 + 760);
      unint64_t v73 = *(void *)(v71 + 1928);
      uint64_t v74 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v74) {
        LODWORD(v74) = *(_DWORD *)(v74 + 108);
      }
      *(_DWORD *)long long buf = 134219008;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v72;
      __int16 v157 = 2048;
      unint64_t v158 = v73;
      __int16 v159 = 1024;
      int v160 = v74;
      __int16 v161 = 1024;
      LODWORD(v162) = v74;
      uint64_t v45 = "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Not suspending c"
            "urrent page for process pid %i because has not committed any load yet";
      goto LABEL_62;
    }
LABEL_63:
    char v70 = 0;
    goto LABEL_81;
  }
  uint64_t v46 = *(void *)(v34 + 472);
  if (!v46)
  {
    uint64_t v40 = qword_1EB358370;
    if (!os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_63;
    }
    uint64_t v143 = *(void *)(a1 + 32);
    uint64_t v144 = *(void *)(v143 + 760);
    unint64_t v145 = *(void *)(v143 + 1928);
    uint64_t v146 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v146) {
      LODWORD(v146) = *(_DWORD *)(v146 + 108);
    }
    *(_DWORD *)long long buf = 134219008;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v144;
    __int16 v157 = 2048;
    unint64_t v158 = v145;
    __int16 v159 = 1024;
    int v160 = v146;
    __int16 v161 = 1024;
    LODWORD(v162) = v146;
    uint64_t v45 = "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Not suspending cur"
          "rent page for process pid %i there is no associated WebBackForwardListItem";
    goto LABEL_62;
  }
  CFRetain(*(CFTypeRef *)(v46 + 8));
  uint64_t v48 = *(void *)(a1 + 664);
  uint64_t v49 = *(void *)(v48 + 16);
  if (v49 && *(void *)(v49 + 8) && *(unsigned char *)(v48 + 48))
  {
    unint64_t v50 = *(void *)(v48 + 40);
    if (v50 >= *(unsigned int *)(v48 + 36))
    {
      __break(0xC471u);
      goto LABEL_165;
    }
    if (v46 == *(void *)(*(void *)(v48 + 24) + 8 * v50))
    {
      uint64_t v54 = qword_1EB358370;
      if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v85 = *(void *)(a1 + 32);
        uint64_t v86 = *(void *)(v85 + 760);
        unint64_t v87 = *(void *)(v85 + 1928);
        uint64_t v88 = *(void *)(*(void *)(a1 + 256) + 136);
        if (v88) {
          LODWORD(v88) = *(_DWORD *)(v88 + 108);
        }
        *(_DWORD *)long long buf = 134219008;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v86;
        __int16 v157 = 2048;
        unint64_t v158 = v87;
        __int16 v159 = 1024;
        int v160 = v88;
        __int16 v161 = 1024;
        LODWORD(v162) = v88;
        uint64_t v84 = "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Not suspending"
              " current page for process pid %i because this is a client-side redirect";
        goto LABEL_78;
      }
LABEL_79:
      char v70 = 0;
      goto LABEL_80;
    }
  }
  if ((WTF::equal(*(WTF **)(v46 + 56), *(const WTF::StringImpl **)(*(void *)(a1 + 32) + 1032), v47) & 1) == 0)
  {
    char v75 = qword_1EB358370;
    if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_ERROR))
    {
      uint64_t v76 = *(void *)(a1 + 32);
      uint64_t v77 = *(void *)(v76 + 760);
      unint64_t v78 = *(void *)(v76 + 1928);
      uint64_t v79 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v79) {
        LODWORD(v79) = *(_DWORD *)(v79 + 108);
      }
      *(_DWORD *)long long buf = 134219008;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v77;
      __int16 v157 = 2048;
      unint64_t v158 = v78;
      __int16 v159 = 1024;
      int v160 = v79;
      __int16 v161 = 1024;
      LODWORD(v162) = v79;
      _os_log_error_impl(&dword_1985F2000, v75, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Not suspending current page for process pid %i because fromItem's URL does not match the page URL.", buf, 0x2Cu);
    }
    goto LABEL_79;
  }
  char shouldUseBackForwardCache = WebKit::WebPageProxy::shouldUseBackForwardCache((WebKit::WebPageProxy *)a1, v51, v52);
  uint64_t v54 = qword_1EB358370;
  BOOL v55 = os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT);
  if ((shouldUseBackForwardCache & 1) == 0)
  {
    if (v55)
    {
      uint64_t v80 = *(void *)(a1 + 32);
      uint64_t v81 = *(void *)(v80 + 760);
      unint64_t v82 = *(void *)(v80 + 1928);
      uint64_t v83 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v83) {
        LODWORD(v83) = *(_DWORD *)(v83 + 108);
      }
      *(_DWORD *)long long buf = 134219008;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v81;
      __int16 v157 = 2048;
      unint64_t v158 = v82;
      __int16 v159 = 1024;
      int v160 = v83;
      __int16 v161 = 1024;
      LODWORD(v162) = v83;
      uint64_t v84 = "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Not suspending c"
            "urrent page for process pid %i the back / forward cache is disabled";
LABEL_78:
      _os_log_impl(&dword_1985F2000, v54, OS_LOG_TYPE_DEFAULT, v84, buf, 0x2Cu);
      goto LABEL_79;
    }
    goto LABEL_79;
  }
  if (v55)
  {
    uint64_t v56 = *(void *)(a1 + 32);
    uint64_t v57 = *(void *)(v56 + 760);
    unint64_t v58 = *(void *)(v56 + 1928);
    uint64_t v59 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v59) {
      LODWORD(v59) = *(_DWORD *)(v59 + 108);
    }
    *(_DWORD *)long long buf = 134219008;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v57;
    __int16 v157 = 2048;
    unint64_t v158 = v58;
    __int16 v159 = 1024;
    int v160 = v59;
    __int16 v161 = 1024;
    LODWORD(v162) = v59;
    _os_log_impl(&dword_1985F2000, v54, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Suspending current page for process pid %i", buf, 0x2Cu);
  }
  WebKit::FrameLoadState::didSuspend((WebKit::FrameLoadState *)(v152 + 40));
  uint64_t v60 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v60 + 16), 1u);
  v154[0] = v60;
  uint64_t v155 = v152;
  uint64_t v61 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)uint64_t v61 = 1;
  *(_OWORD *)(v61 + 8) = 0u;
  *(_OWORD *)(v61 + 24) = 0u;
  *(_OWORD *)(v61 + 40) = 0u;
  *(_OWORD *)(v61 + 56) = 0u;
  CFTypeRef v153 = *(WebKit::BrowsingContextGroup **)(a1 + 1416);
  *(void *)(a1 + 1416) = v61;
  uint64_t v62 = WTF::fastMalloc((WTF *)0x98);
  *(void *)long long buf = WebKit::SuspendedPageProxy::SuspendedPageProxy(v62, a1, v154, &v155, (uint64_t *)&v153, 0);
  if (v153) {
    WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v153, v63);
  }
  if (v155) {
    CFRelease(*(CFTypeRef *)(v155 + 8));
  }
  if (v154[0]) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v154[0] + 16));
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v62 + 8), v62);
  uint64_t v66 = *(atomic_uint **)(v62 + 8);
  if (v66) {
    atomic_fetch_add(v66, 1u);
  }
  uint64_t v67 = *(unsigned int **)(a1 + 1208);
  *(void *)(a1 + 1208) = v66;
  if (v67 && atomic_fetch_add((atomic_uint *volatile)v67, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v67);
    WTF::fastFree((WTF *)v67, v64);
  }
  if ((WebKit::WebPageProxy::shouldUseBackForwardCache((WebKit::WebPageProxy *)a1, (uint64_t)v64, v65) & 1) == 0)
  {
    uint64_t v69 = *(void *)(a1 + 1200);
    *(void *)(a1 + 1200) = *(void *)buf;
    if (!v69) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  uint64_t v68 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24));
  WebKit::WebBackForwardCache::addEntry(*(void *)(v68 + 760), v46, (uint64_t *)buf);
  uint64_t v69 = *(void *)buf;
  *(void *)long long buf = 0;
  if (v69) {
LABEL_55:
  }
    (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
LABEL_56:
  uint64_t v152 = 0;
  char v70 = 1;
LABEL_80:
  CFRelease(*(CFTypeRef *)(v46 + 8));
LABEL_81:
  uint64_t v89 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v89 + 16), 1u);
  WebKit::WebProcessProxy::removeWebPage(v89, (WebKit::WebPageProxy *)a1, *(void *)(a1 + 312) != *(void *)(*(void *)(*(void *)(*(void *)(a1 + 1192) + 40) + 16) + 752));
  if (v89) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v89 + 16));
  }
  uint64_t v91 = *(void *)(*(void *)(a1 + 1192) + 376);
  if (v91)
  {
    uint64_t v92 = WTF::fastMalloc((WTF *)0x78);
    long long v93 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)v92, (void **)v91);
    WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v93 + 1), v91 + 8);
    WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v92 + 24, v91 + 24);
    char v94 = *(_DWORD **)(v91 + 40);
    if (v94) {
      *v94 += 2;
    }
    *(void *)(v92 + 40) = v94;
    char v95 = *(_DWORD **)(v91 + 48);
    if (v95) {
      *v95 += 2;
    }
    *(void *)(v92 + 48) = v95;
    long long v96 = *(_DWORD **)(v91 + 56);
    if (v96) {
      *v96 += 2;
    }
    *(void *)(v92 + 56) = v96;
    char v97 = *(_DWORD **)(v91 + 64);
    if (v97) {
      *v97 += 2;
    }
    *(void *)(v92 + 64) = v97;
    char v98 = *(unsigned char *)(v91 + 74);
    *(_WORD *)(v92 + 72) = *(_WORD *)(v91 + 72);
    *(unsigned char *)(v92 + 74) = v98;
    *(unsigned char *)(v92 + 80) = *(unsigned char *)(v91 + 80);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v92 + 88), (void **)(v91 + 88));
    long long v99 = *(_OWORD *)(v91 + 96);
    *(unsigned char *)(v92 + 112) = *(unsigned char *)(v91 + 112);
    *(_OWORD *)(v92 + 96) = v99;
    std::unique_ptr<WebKit::WebsitePoliciesData>::reset[abi:sn180100]((WebKit::WebsitePoliciesData **)(a1 + 1424), (WTF::StringImpl *)v92);
  }
  if ((v70 & 1) == 0)
  {
    uint64_t v100 = *(void *)(a1 + 272);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v101 = *(void *)(a1 + 336);
    int BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v100 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v90);
    uint64_t v103 = *(void *)(a1 + 256);
    if (!BoolValueForKey || !v101 || *(void *)(*(void *)(v101 + 32) + 16) != v103)
    {
      buf[0] = 0;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::Close>(v103, (uint64_t)buf, *(void *)(*(void *)(a1 + 32) + 1928), 0);
    }
  }
  uint64_t v104 = *(void *)(a1 + 32);
  unint64_t v151 = *(void *)(v104 + 1928);
  uint64_t v105 = *(void *)(a1 + 1192);
  *(void *)(a1 + 1192) = 0;
  long long v106 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v107 = *(void *)(v104 + 760);
    uint64_t v108 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v108) {
      LODWORD(v108) = *(_DWORD *)(v108 + 108);
    }
    uint64_t v109 = *(void *)(v105 + 32);
    *(_DWORD *)long long buf = 134219008;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v107;
    __int16 v157 = 2048;
    unint64_t v158 = v151;
    __int16 v159 = 1024;
    int v160 = v108;
    __int16 v161 = 2048;
    uint64_t v162 = v109;
    _os_log_impl(&dword_1985F2000, v106, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::swapToProvisionalPage: newWebPageID=%llu", buf, 0x30u);
  }
  uint64_t v110 = *(void *)(*(void *)(v105 + 40) + 16);
  atomic_fetch_add((atomic_uint *volatile)(v110 + 16), 1u);
  uint64_t v111 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = v110;
  if (v111) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v111 + 16));
  }
  *(void *)(*(void *)(a1 + 32) + 1928) = *(void *)(v105 + 32);
  uint64_t v112 = *(void *)(a1 + 40);
  if (v112) {
    uint64_t v113 = *(void *)(v112 + 8);
  }
  else {
    uint64_t v113 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v113 + 1592))(v113);
  (*(void (**)(uint64_t))(*(void *)v113 + 1768))(v113);
  (*(void (**)(uint64_t))(*(void *)v113 + 1600))(v113);
  uint64_t v114 = *(void *)(*(void *)(a1 + 256) + 752);
  CFRetain(*(CFTypeRef *)(v114 + 8));
  uint64_t v115 = *(void *)(a1 + 312);
  *(void *)(a1 + 312) = v114;
  if (v115) {
    CFRelease(*(CFTypeRef *)(v115 + 8));
  }
  uint64_t v116 = *(void *)(v105 + 80);
  if (v116)
  {
    CFRetain(*(CFTypeRef *)(v116 + 8));
    CFRelease(*(CFTypeRef *)(v116 + 8));
    uint64_t v117 = *(void *)(v105 + 80);
    if (v117) {
      CFRetain(*(CFTypeRef *)(v117 + 8));
    }
    uint64_t v118 = *(void *)(a1 + 320);
    *(void *)(a1 + 320) = v117;
    if (v118) {
      CFRelease(*(CFTypeRef *)(v118 + 8));
    }
  }
  *(void *)(a1 + 1224) = *(void *)(v105 + 408);
  uint64_t v119 = *(void *)(a1 + 1248);
  if (v119)
  {
    atomic_fetch_add((atomic_uint *volatile)(v119 + 8), 1u);
    char isAlwaysOnLoggingAllowed = WebKit::WebPageProxy::isAlwaysOnLoggingAllowed((WebKit::WebPageProxy *)a1);
    if (*(void *)(v119 + 16) == a1) {
      *(unsigned char *)(v119 + 12) = isAlwaysOnLoggingAllowed;
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v119 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v119 + 8));
      (*(void (**)(uint64_t))(*(void *)v119 + 8))(v119);
    }
  }
  *(unsigned char *)(a1 + 800) = 1;
  uint64_t v121 = *(void *)(v105 + 64);
  *(void *)(v105 + 64) = 0;
  *(void *)long long buf = v121;
  WebKit::WebPageProxy::setDrawingArea((WebKit::DrawingAreaProxy **)a1, (WebKit::DrawingAreaProxy **)buf);
  if (*(void *)buf) {
    (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
  }
  uint64_t v123 = *(void *)(v105 + 72);
  if (v123) {
    CFRetain(*(CFTypeRef *)(v123 + 8));
  }
  uint64_t v124 = *(void *)(a1 + 328);
  *(void *)(a1 + 328) = v123;
  if (v124) {
    CFRelease(*(CFTypeRef *)(v124 + 8));
  }
  char v125 = *(WebKit::BrowsingContextGroup **)(v105 + 48);
  if (*(WebKit::BrowsingContextGroup **)(a1 + 1416) != v125)
  {
    uint64_t v126 = *(void *)(a1 + 272);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v126 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v122))
    {
      WebKit::BrowsingContextGroup::removePage(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (WebKit::WebPageProxy *)a1);
      WebKit::BrowsingContextGroup::addPage(v125, (WebKit::WebPageProxy *)a1);
    }
    ++*(_DWORD *)v125;
    uint64_t v128 = *(WebKit::BrowsingContextGroup **)(a1 + 1416);
    *(void *)(a1 + 1416) = v125;
    if (v128) {
      WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v128, v127);
    }
  }
  uint64_t v129 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v129 + 16), 1u);
  WebKit::WebProcessProxy::addExistingWebPage(v129, (WebKit::WebPageProxy *)a1, 0);
  if (v129) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v129 + 16));
  }
  uint64_t v130 = WebKit::WebPageProxy::addAllMessageReceivers((WebKit::WebPageProxy *)a1);
  char v131 = (const WTF::URL *)WTF::aboutBlankURL((WTF *)v130);
  WebKit::Site::Site((WebKit::Site *)buf, v131);
  WebKit::WebPageProxy::finishAttachingToWebProcess(a1, (const WebKit::Site *)buf, 1);
  uint64_t v132 = *(void *)(a1 + 32);
  int v133 = ~*(_DWORD *)(v132 + 1928);
  *(_DWORD *)(a1 + 824) = v133;
  *(unsigned char *)(a1 + 828) = 1;
  LOBYTE(v155) = 0;
  BYTE4(v155) = 0;
  uint64_t v134 = *(void *)(a1 + 232);
  if (!v134) {
    goto LABEL_139;
  }
  uint64_t v135 = (*(uint64_t (**)(uint64_t))(*(void *)v134 + 80))(v134);
  LODWORD(v155) = v135;
  BYTE4(v155) = BYTE4(v135);
  if (!*(unsigned char *)(a1 + 828))
  {
LABEL_165:
    __break(1u);
    return;
  }
  int v133 = *(_DWORD *)(a1 + 824);
  uint64_t v132 = *(void *)(a1 + 32);
LABEL_139:
  LODWORD(v154[0]) = v133;
  v154[1] = (uint64_t)&v155;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WindowScreenDidChange>(*(void *)(a1 + 256), (int *)v154, *(void *)(v132 + 1928), 0);
  int v137 = *(WTF **)(v105 + 384);
  uint64_t v138 = *(unsigned int *)(v105 + 396);
  *(void *)(v105 + 384) = 0;
  *(void *)(v105 + 392) = 0;
  if (v138) {
    WebKit::WebPageProxy::registerWebProcessAccessibilityToken(a1, (uint64_t)v137, v138, 0, 0);
  }
  if (v137) {
    WTF::fastFree(v137, v136);
  }
  char v139 = *(WTF::StringImpl **)&buf[8];
  *(void *)&buf[8] = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2) {
      WTF::StringImpl::destroy(v139, (WTF::StringImpl *)v136);
    }
    else {
      *(_DWORD *)v139 -= 2;
    }
  }
  uint64_t v140 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2) {
      WTF::StringImpl::destroy(v140, (WTF::StringImpl *)v136);
    }
    else {
      *(_DWORD *)v140 -= 2;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v105 + 8))(v105);
  WebKit::WebPageProxy::didCommitLoadForFrame(a1, a2, v149, v150, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  uint64_t v142 = *(void *)(a1 + 272);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v142 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v141) & 1) == 0)WebKit::WebPageInspectorController::didCommitProvisionalPage(*(void *)(a1 + 1144), v151, *(void *)(*(void *)(a1 + 32) + 1928)); {
  if (v147)
  }
    CFRelease(*(CFTypeRef *)(v147 + 8));
  if (v152) {
    CFRelease(*(CFTypeRef *)(v152 + 8));
  }
}

void WebKit::WebPageProxy::resetStateAfterProcessTermination(BOOL this, int a2)
{
  uint64_t v3 = (WebKit::WebPageProxy *)this;
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  if (a2 != 7)
  {
    uint64_t v4 = qword_1EB358960;
    this = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR);
    if (this)
    {
      uint64_t v68 = *((void *)v3 + 4);
      uint64_t v69 = *(void *)(v68 + 760);
      uint64_t v70 = *(void *)(v68 + 1928);
      uint64_t v71 = *(void *)(*((void *)v3 + 32) + 136);
      if (v71)
      {
        int v72 = *(_DWORD *)(v71 + 108);
        if (*((unsigned char *)v3 + 801)) {
          int v73 = 0;
        }
        else {
          int v73 = *(_DWORD *)(v71 + 108);
        }
      }
      else
      {
        int v72 = 0;
        int v73 = 0;
      }
      *(_DWORD *)long long buf = 134219266;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v69;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = v70;
      *(_WORD *)unint64_t v78 = 1024;
      *(_DWORD *)&v78[2] = v72;
      *(_WORD *)&v78[6] = 1024;
      *(_DWORD *)&v78[8] = v73;
      *(_WORD *)&v78[12] = 2082;
      *(void *)&v78[14] = WebKit::processTerminationReasonToString();
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::processDidTerminate: (pid %d), reason=%{public}s", buf, 0x36u);
    }
  }
  if (*(unsigned char *)(*((void *)v3 + 32) + 760))
  {
    WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)this);
    v75[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v75);
    WebKit::WebPageProxy::currentURL(v3, (uint64_t *)&v74);
    MEMORY[0x19972E8B0](buf, v75, &v74, 0);
    WTF::URL::host((WTF::URL *)buf);
    WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
    uint64_t v6 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = v74;
    uint64_t v74 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = v75[0];
    v75[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v5);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = v76;
    if (v76)
    {
      if (!*((_DWORD *)v76 + 1))
      {
        uint64_t v76 = 0;
LABEL_24:
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v5);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
        goto LABEL_27;
      }
      WebCore::DiagnosticLoggingKeys::domainCausingJetsamKey((uint64_t *)buf, v76);
      WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacy(v3, (uint64_t)buf, (uint64_t)&v76, 0);
      BOOL v10 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v5);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t v9 = v76;
      uint64_t v76 = 0;
      if (v9) {
        goto LABEL_24;
      }
    }
  }
LABEL_27:
  if (*((unsigned char *)v3 + 801) || !*((unsigned char *)v3 + 800)) {
    goto LABEL_78;
  }
  uint64_t v11 = *((void *)v3 + 5);
  if (v11) {
    uint64_t v12 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v12 + 1592))(v12);
  *((unsigned char *)v3 + 1104) = 0;
  WebKit::WebPageProxy::ProcessActivityState::reset((WebKit::ProcessThrottlerActivity **)v3 + 74);
  uint64_t v13 = *((void *)v3 + 4);
  uint64_t v14 = *(void *)(v13 + 952);
  *(void *)(v13 + 952) = 0;
  if (v14)
  {
    unsigned int v15 = *(uint64_t **)v14;
    uint64_t v16 = *(void *)(v14 + 8) - 1;
    *(void *)(v14 + 8) = v16;
    if (v15)
    {
      uint64_t v17 = *v15;
      if (!*v15) {
        goto LABEL_39;
      }
      char v18 = *(unsigned char *)(v14 + 16);
      *(unsigned char *)(v14 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v17 + 16))(v17, 0);
      *(unsigned char *)(v14 + 16) = v18;
      if (*(void *)v14) {
        goto LABEL_39;
      }
      uint64_t v16 = *(void *)(v14 + 8);
    }
    if (!v16) {
      MEMORY[0x199740C10](v14, 0x1020C40545B2139);
    }
  }
LABEL_39:
  uint64_t v19 = *((void *)v3 + 4);
  uint64_t v20 = *(void *)(v19 + 1904);
  *(void *)(v19 + 1904) = 0;
  if (v20)
  {
    uint64_t v21 = *(uint64_t **)v20;
    uint64_t v22 = *(void *)(v20 + 8) - 1;
    *(void *)(v20 + 8) = v22;
    if (!v21) {
      goto LABEL_44;
    }
    uint64_t v23 = *v21;
    if (*v21)
    {
      char v24 = *(unsigned char *)(v20 + 16);
      *(unsigned char *)(v20 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v23 + 16))(v23, 0);
      *(unsigned char *)(v20 + 16) = v24;
      if (!*(void *)v20)
      {
        uint64_t v22 = *(void *)(v20 + 8);
LABEL_44:
        if (!v22) {
          MEMORY[0x199740C10](v20, 0x1020C40545B2139);
        }
      }
    }
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*((void *)v3 + 4) + 1944), 0);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*((void *)v3 + 4) + 1952), 0);
  *((unsigned char *)v3 + 800) = 0;
  *((unsigned char *)v3 + 896) = 0;
  *((unsigned char *)v3 + 1190) = 0;
  *((unsigned char *)v3 + 1334) = 0;
  *((_WORD *)v3 + 403) = 0;
  uint64_t v26 = *((void *)v3 + 4);
  uint64_t v27 = *(void *)(v26 + 2000);
  if (v27)
  {
    *(void *)(v26 + 2000) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v27, v25);
    uint64_t v26 = *((void *)v3 + 4);
  }
  memset(v97, 0, sizeof(v97));
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v80 = 0u;
  memset(buf, 0, sizeof(buf));
  buf[9] = 1;
  *(void *)&buf[10] = 0;
  *(_OWORD *)(v26 + 240) = *(_OWORD *)buf;
  *(_OWORD *)&v78[16] = 0u;
  long long v79 = 0u;
  buf[18] = 0;
  *(_DWORD *)(v26 + 255) = *(_DWORD *)&buf[15];
  *(_OWORD *)unint64_t v78 = 0u;
  std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::PostLayoutData,false>>((WebKit::EditorState::PostLayoutData *)(v26 + 272), v78);
  std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::VisualData,false>>(v26 + 592, v97);
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v97, v28);
  if ((_BYTE)v96) {
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v78, v29);
  }
  std::__optional_destruct_base<WebCore::FontAttributes,false>::reset[abi:sn180100]((_DWORD *)(*((void *)v3 + 4) + 128), v29);
  if (a2 == 7)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 144))(v12);
    uint64_t v30 = 2;
  }
  else
  {
    uint64_t v31 = *((void *)v3 + 149);
    *((void *)v3 + 149) = 0;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
    }
    (*(void (**)(uint64_t))(*(void *)v12 + 136))(v12);
    uint64_t v30 = 1;
  }
  uint64_t v32 = (WebKit::WebPasteboardProxy *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 344))(v12);
  uint64_t v33 = WebKit::WebPasteboardProxy::singleton(v32);
  WebKit::WebPasteboardProxy::revokeAccess((WebKit::WebPasteboardProxy *)v33, *((WebKit::WebProcessProxy **)v3 + 32));
  WebKit::WebPageProxy::resetState((uint64_t)v3, (void *)v30);
  *((_DWORD *)v3 + 227) = 0;
  uint64_t v34 = *((void *)v3 + 4);
  unint64_t v35 = *(void *)(v34 + 856);
  unint64_t v36 = *(void *)(v34 + 864);
  uint64_t v37 = *(WTF::StringImpl **)(v34 + 872);
  if (v35 <= v36)
  {
    uint64_t v40 = (WTF::StringImpl *)((char *)v37 + 160 * v36);
    uint64_t v39 = (WTF::StringImpl *)((char *)v37 + 160 * v35);
  }
  else
  {
    WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct(v37, (WTF::StringImpl *)((char *)v37 + 160 * v36));
    uint64_t v38 = *(void *)(v34 + 872);
    uint64_t v39 = (WTF::StringImpl *)(v38 + 160 * *(void *)(v34 + 856));
    uint64_t v40 = (WTF::StringImpl *)(v38 + 160 * *(unsigned int *)(v34 + 880));
  }
  WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct(v39, v40);
  *(void *)(v34 + 856) = 0;
  *(void *)(v34 + 864) = 0;
  uint64_t v42 = *(WTF **)(v34 + 872);
  if (v42)
  {
    *(void *)(v34 + 872) = 0;
    *(_DWORD *)(v34 + 880) = 0;
    WTF::fastFree(v42, v41);
  }
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(*((void *)v3 + 4) + 888), 0);
  uint64_t v43 = *((void *)v3 + 4);
  unint64_t v44 = *(void *)(v43 + 768);
  unint64_t v45 = *(void *)(v43 + 776);
  uint64_t v46 = *(WebKit::WebKeyboardEvent **)(v43 + 784);
  if (v44 <= v45)
  {
    uint64_t v49 = (WebKit::WebKeyboardEvent *)((char *)v46 + 96 * v45);
    uint64_t v48 = (WebKit::WebKeyboardEvent *)((char *)v46 + 96 * v44);
  }
  else
  {
    WTF::VectorDestructor<true,WebKit::NativeWebKeyboardEvent>::destruct(v46, (WebKit::WebKeyboardEvent *)((char *)v46 + 96 * v45));
    uint64_t v47 = *(void *)(v43 + 784);
    uint64_t v48 = (WebKit::WebKeyboardEvent *)(v47 + 96 * *(void *)(v43 + 768));
    uint64_t v49 = (WTF::StringImpl *)(v47 + 96 * *(unsigned int *)(v43 + 792));
  }
  WTF::VectorDestructor<true,WebKit::NativeWebKeyboardEvent>::destruct(v48, v49);
  *(void *)(v43 + 768) = 0;
  *(void *)(v43 + 776) = 0;
  uint64_t v51 = *(WTF **)(v43 + 784);
  if (v51)
  {
    *(void *)(v43 + 784) = 0;
    *(_DWORD *)(v43 + 792) = 0;
    WTF::fastFree(v51, v50);
  }
  long long v52 = (WebKit::WebWheelEventCoalescer *)*((void *)v3 + 102);
  if (v52) {
    WebKit::WebWheelEventCoalescer::clear(v52, v50);
  }
  WebKit::WebPageProxy::invalidateAllAttachments(v3, (WTF::StringImpl *)v50);
  uint64_t v54 = (WebKit::RemoteScrollingCoordinatorProxy *)*((void *)v3 + 31);
  if (v54) {
    WebKit::RemoteScrollingCoordinatorProxy::resetStateAfterProcessExited(v54, v53);
  }
  if (a2 != 7)
  {
    uint64_t v55 = *((void *)v3 + 4);
    uint64_t v56 = *(void *)(*(void *)(v55 + 992) + 8);
    if (v56)
    {
      uint64_t v57 = v56 - 16;
      CFRetain(*(CFTypeRef *)(v56 - 8));
    }
    else
    {
      uint64_t v57 = 0;
    }
    uint64_t v58 = *((void *)v3 + 4);
    *(void *)long long buf = v57;
    *(void *)&buf[8] = v55 + 976;
    ++*(_DWORD *)(v55 + 1348);
    *(unsigned char *)(v55 + 1344) = 1;
    WebKit::PageLoadState::reset(v58 + 976, (WTF::StringImpl *)v75);
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v59, v60);
  }
  WebKit::WebPageProxy::updatePlayingMediaDidChange(v3, 0, 0);
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*((void *)v3 + 4) + 2456));
  uint64_t v61 = *((void *)v3 + 4);
  if (*(unsigned char *)(v61 + 2496)) {
    *(unsigned char *)(v61 + 2496) = 0;
  }
  WebKit::WebPageProxy::resetRecentGamepadAccessState(v3);
  uint64_t v62 = (atomic_uint *)*((void *)v3 + 32);
  atomic_fetch_add(v62 + 4, 1u);
  WebKit::WebProcessProxy::processTerminated((WebKit::WebProcessProxy *)v62);
  if (v62) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v62 + 4);
  }
  (*(void (**)(uint64_t))(*(void *)v12 + 1600))(v12);
LABEL_78:
  uint64_t v63 = (atomic_uint *)*((void *)v3 + 32);
  atomic_fetch_add(v63 + 4, 1u);
  WebKit::WebPageProxy::stopAllURLSchemeTasks(v3, (WebKit::WebProcessProxy *)v63);
  if (v63) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v63 + 4);
  }
  if (a2 != 7)
  {
    uint64_t v65 = *((void *)v3 + 20);
    uint64_t v66 = *(void *)(v65 + 8);
    if (v66)
    {
      *(void *)(v65 + 8) = 0;
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v66, v64);
    }
    if (*((unsigned char *)v3 + 898))
    {
      uint64_t v67 = *(CFTypeRef **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get(*((void *)v3 + 6) + 24)
                          + 320);
      if (v67)
      {
        CFRetain(v67[1]);
        WebKit::WebAutomationSession::terminate((WebKit::WebAutomationSession *)v67);
        CFRelease(v67[1]);
      }
    }
  }
}

uint64_t WebKit::WebPageProxy::didCommitLoadForFrame(uint64_t a1, WTF::String *a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl **a9, __int16 a10, const void **a11, __int16 a12, char a13, char a14, unsigned __int8 a15, CFTypeRef **a16)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = *(void *)(a1 + 40);
  if (v23) {
    uint64_t v24 = *(void *)(v23 + 8);
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = buf;
  (*(void (**)(uint64_t))(*(void *)v24 + 1592))(v24);
  uint64_t v26 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (!v26)
  {
    uint64_t v27 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_146:
      *((unsigned char *)a2 + 98) = 1;
      return (*(uint64_t (**)(uint64_t))(*(void *)v24 + 1600))(v24);
    }
LABEL_149:
    *(_DWORD *)long long buf = 136446210;
    *(void *)(v25 + 4) = "void WebKit::WebPageProxy::didCommitLoadForFrame(IPC::Connection &, FrameIdentifier, FrameInf"
                           "oData &&, ResourceRequest &&, std::optional<WebCore::NavigationIdentifier>, const String &, b"
                           "ool, FrameLoadType, const CertificateInfo &, BOOL, BOOL, BOOL, HasInsecureContent, MouseEvent"
                           "Policy, const UserData &)";
    _os_log_fault_impl(&dword_1985F2000, v27, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6584: Invalid message dispatched %{public}s", buf, 0xCu);
    goto LABEL_146;
  }
  uint64_t v119 = a7;
  uint64_t v120 = a4;
  uint64_t v121 = a3;
  char v122 = (WebCore::ResourceRequestBase *)a6;
  uint64_t v118 = a1;
  uint64_t v27 = v26;
  CFRetain(*(CFTypeRef *)(v26 + 8));
  if (!v27[40].isa)
  {
    uint64_t v28 = qword_1EB358050;
    uint64_t v29 = a4;
    uint64_t v30 = (WTF::String *)a3;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *(void *)(v118 + 32);
      uint64_t v32 = *(void *)(v31 + 760);
      uint64_t v33 = *(void *)(v31 + 1928);
      uint64_t v34 = *(void *)(*(void *)(v118 + 256) + 136);
      if (v34) {
        LODWORD(v34) = *(_DWORD *)(v34 + 108);
      }
      int v35 = BYTE1(v27[55].isa);
      *(_DWORD *)long long buf = 134219264;
      *(void *)&uint8_t buf[4] = v118;
      __int16 v140 = 2048;
      *(void *)CFTypeRef v141 = v32;
      *(_WORD *)&v141[8] = 2048;
      uint64_t v142 = v33;
      __int16 v143 = 1024;
      int v144 = v34;
      __int16 v145 = 2048;
      uint64_t v146 = a3;
      __int16 v147 = 1024;
      int v148 = v35;
      _os_log_impl(&dword_1985F2000, v28, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didCommitLoadForFrame: frameID=%llu, isMainFrame=%d", buf, 0x36u);
    }
    uint64_t v36 = 0;
    if (BYTE1(v27[55].isa))
    {
      if ((_BYTE)a8)
      {
        uint64_t v37 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(*(void *)(v118 + 160) + 8), v119);
        uint64_t v36 = v37;
        if (v37)
        {
          CFRetain(*(CFTypeRef *)(v37 + 8));
          v153[0] = 0;
          int v154 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v153, v36 + 864);
          WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const String *)(v36 + 232));
          v151[0] = 0;
          int v152 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v151, (uint64_t)v153);
          WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v124, (WebCore::SecurityOriginData *)v151);
          uint64_t v38 = v124;
          int v39 = *((_DWORD *)v124 + 8);
          uint64_t v124 = 0;
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v38, v40);
          int v41 = 0;
          if (v39 != 1)
          {
            uint64_t v42 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)buf);
            uint64_t v43 = *(WTF::StringImpl **)v42;
            if (*(void *)v42) {
              *(_DWORD *)v43 += 2;
            }
            uint64_t v124 = v43;
            long long v44 = *(_OWORD *)(v42 + 24);
            long long v125 = *(_OWORD *)(v42 + 8);
            long long v126 = v44;
            WTF::URL::query((WTF::URL *)&v124);
            if (v45 || (WTF::URL::fragmentIdentifier((WTF::URL *)&v124), v46)) {
              int v41 = 2;
            }
            else {
              int v41 = 0;
            }
            WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v137, (WebCore::ResourceRequestBase *)buf);
            MEMORY[0x19972E890](v138, &v137, 0);
            uint64_t v48 = v137;
            int v137 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2) {
                WTF::StringImpl::destroy(v48, v47);
              }
              else {
                *(_DWORD *)v48 -= 2;
              }
            }
            WTF::URL::query((WTF::URL *)v138);
            if (v49 || (WTF::URL::fragmentIdentifier((WTF::URL *)v138), v49)) {
              v41 |= 4u;
            }
            unint64_t v50 = v138[0];
            v138[0] = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2) {
                WTF::StringImpl::destroy(v50, v49);
              }
              else {
                *(_DWORD *)v50 -= 2;
              }
            }
            uint64_t v51 = v124;
            uint64_t v124 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2) {
                WTF::StringImpl::destroy(v51, v49);
              }
              else {
                *(_DWORD *)v51 -= 2;
              }
            }
          }
          if (v152 != -1) {
            ((void (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v152])(&v124, v151);
          }
          int v152 = -1;
          if (v41)
          {
            long long v52 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)buf);
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v138, v52);
            WebCore::SecurityOriginData::toString((uint64_t *)&v137, (WebCore::SecurityOriginData *)v153);
            MEMORY[0x19972E890](&v124, &v137, 0);
            uint64_t v54 = v137;
            int v137 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2) {
                WTF::StringImpl::destroy(v54, v53);
              }
              else {
                *(_DWORD *)v54 -= 2;
              }
            }
            uint64_t v55 = WTF::URL::host((WTF::URL *)&v124);
            if ((WebCore::RegistrableDomain::matches(v138, v55, v56) & 1) == 0)
            {
              uint64_t v58 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(v118 + 312));
              atomic_fetch_add((atomic_uint *volatile)(v58 + 16), 1u);
              uint64_t v59 = *(void *)(*(void *)(v118 + 312) + 24);
              WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v137, (const WTF::URL *)&v124);
              WebKit::NetworkProcessProxy::didCommitCrossSiteLoadWithDataTransfer(v58, v59, (uint64_t)&v137, (uint64_t)v138, v41, *(void *)(*(void *)(v118 + 32) + 760), *(void *)(*(void *)(v118 + 32) + 1928), (*((unsigned char *)v122 + 148) & 0x20) != 0);
              uint64_t v61 = v137;
              int v137 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2) {
                  WTF::StringImpl::destroy(v61, v60);
                }
                else {
                  *(_DWORD *)v61 -= 2;
                }
              }
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v58 + 16));
              uint64_t v29 = v120;
              uint64_t v30 = (WTF::String *)v121;
            }
            uint64_t v62 = v124;
            uint64_t v124 = 0;
            if (v62)
            {
              if (*(_DWORD *)v62 == 2) {
                WTF::StringImpl::destroy(v62, v57);
              }
              else {
                *(_DWORD *)v62 -= 2;
              }
            }
            uint64_t v63 = v138[0];
            v138[0] = 0;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2) {
                WTF::StringImpl::destroy(v63, v57);
              }
              else {
                *(_DWORD *)v63 -= 2;
              }
            }
          }
          long long v64 = *(API::WebsitePolicies **)(v36 + 3488);
          if (v64 && !*(void *)(v118 + 1192))
          {
            API::WebsitePolicies::data(v64, (__n128 *)&v124);
            uint64_t v65 = WTF::fastMalloc((WTF *)0x78);
            *(void *)uint64_t v65 = 0;
            *(void *)(v65 + 8) = 0;
            uint64_t v66 = v124;
            uint64_t v124 = 0;
            *(void *)uint64_t v65 = v66;
            *(void *)(v65 + 16) = 0;
            *(void *)(v65 + 24) = 0;
            uint64_t v67 = v125;
            *(void *)&long long v125 = 0;
            *(void *)(v65 + 8) = v67;
            LODWORD(v67) = DWORD2(v125);
            DWORD2(v125) = 0;
            *(_DWORD *)(v65 + 16) = v67;
            LODWORD(v67) = HIDWORD(v125);
            HIDWORD(v125) = 0;
            *(_DWORD *)(v65 + 20) = v67;
            *(void *)(v65 + 32) = 0;
            uint64_t v68 = v126;
            *(void *)&long long v126 = 0;
            *(void *)(v65 + 24) = v68;
            LODWORD(v68) = DWORD2(v126);
            DWORD2(v126) = 0;
            *(_DWORD *)(v65 + 32) = v68;
            LODWORD(v68) = HIDWORD(v126);
            HIDWORD(v126) = 0;
            *(_DWORD *)(v65 + 36) = v68;
            uint64_t v69 = v127;
            uint64_t v127 = 0;
            *(void *)(v65 + 40) = v69;
            uint64_t v70 = v128;
            uint64_t v128 = 0;
            *(void *)(v65 + 48) = v70;
            uint64_t v71 = v129;
            uint64_t v129 = 0;
            *(void *)(v65 + 56) = v71;
            uint64_t v72 = v130;
            uint64_t v130 = 0;
            *(void *)(v65 + 64) = v72;
            LOWORD(v72) = v131;
            *(unsigned char *)(v65 + 74) = v132;
            *(_WORD *)(v65 + 72) = v72;
            *(unsigned char *)(v65 + 80) = v133;
            *(void *)(v65 + 88) = 0;
            uint64_t v73 = v134;
            uint64_t v134 = 0;
            *(void *)(v65 + 88) = v73;
            long long v74 = v135;
            *(unsigned char *)(v65 + 112) = v136;
            *(_OWORD *)(v65 + 96) = v74;
            std::unique_ptr<WebKit::WebsitePoliciesData>::reset[abi:sn180100]((WebKit::WebsitePoliciesData **)(v118 + 1424), (WTF::StringImpl *)v65);
            WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v124, v75);
          }
          CFTypeRef v76 = cf;
          CFTypeRef cf = 0;
          if (v76) {
            CFRelease(v76);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
          if (v154 != -1) {
            ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v154])(buf, v153);
          }
        }
      }
    }
    *(unsigned char *)(v118 + 1121) = 1;
    uint64_t v77 = *(void *)(v118 + 256);
    atomic_fetch_add((atomic_uint *volatile)(v77 + 16), 1u);
    *(unsigned char *)(v77 + 776) = 1;
    WebCore::ResourceRequestBase::url(v122);
    if ((WTF::URL::protocolIs() & 1) == 0) {
      *(unsigned char *)(v77 + 777) = 1;
    }
    if (BYTE1(v27[55].isa))
    {
      *(unsigned char *)(v118 + 805) = 0;
      uint64_t v78 = *(void *)(v118 + 232);
      if (!v78 || *(unsigned char *)(v78 + 36))
      {
        uint64_t v80 = *(void *)(v118 + 32);
      }
      else
      {
        uint64_t v79 = *(void *)(v78 + 104) + 1;
        uint64_t v80 = *(void *)(v118 + 32);
        *(void *)(v80 + 2024) = v79;
      }
      std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v80 + 1944), 0);
      long long v81 = std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*(void *)(v118 + 32) + 1952), 0);
      WTF::MonotonicTime::now(v81);
      *(void *)(*(void *)(v118 + 32) + 2272) = v82;
    }
    a2 = v30;
    long long v83 = (unsigned char *)v29;
    uint64_t v84 = *(void *)(v118 + 32);
    uint64_t v85 = *(void *)(*(void *)(v84 + 992) + 8);
    if (v85)
    {
      long long v86 = (WTF::StringImpl *)(v85 - 16);
      CFRetain(*(CFTypeRef *)(v85 - 8));
    }
    else
    {
      long long v86 = 0;
    }
    long long v87 = a11;
    uint64_t v124 = v86;
    *(void *)&long long v125 = v84 + 976;
    ++*(_DWORD *)(v84 + 1348);
    if (BYTE1(v27[55].isa))
    {
      uint64_t v88 = *(void *)(v118 + 32) + 976;
      *(unsigned char *)(v84 + 1344) = 1;
      WebKit::PageLoadState::didCommitLoad(v88, (uint64_t)buf, a11, a14, a12, SHIBYTE(a12), (uint64_t)(a5 + 208));
      long long v87 = a11;
      *(unsigned char *)(v118 + 965) = 0;
      uint64_t v25 = v83;
      uint64_t v89 = a10;
    }
    else
    {
      uint64_t v25 = v83;
      uint64_t v89 = a10;
      if (a14)
      {
        uint64_t v90 = *(void *)(v118 + 32);
        *(unsigned char *)(v84 + 1344) = 1;
        *(unsigned char *)(v90 + 1169) = 1;
      }
    }
    WebKit::WebFrameProxy::didCommitLoad((WebKit::WebFrameProxy *)v27, a9, v87, a13);
    uint64_t v92 = *(void *)(v118 + 32);
    if (!BYTE1(v27[55].isa))
    {
      uint64_t v96 = a15;
LABEL_100:
      std::__optional_destruct_base<WebKit::PrivateClickMeasurementAndMetadata,false>::reset[abi:sn180100]((WebCore::PrivateClickMeasurement *)(v92 + 1368), v91);
      if (BYTE1(v27[55].isa))
      {
        *(unsigned char *)(v118 + 912) = v89;
        if (v89)
        {
          *(_DWORD *)(*(void *)(v118 + 32) + 801) = 16843009;
          (*(void (**)(void, uint64_t))(**(void **)(v118 + 104) + 416))(*(void *)(v118 + 104), v118);
        }
        (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(void *)v24 + 208))(v24, a9, v89);
        if (BYTE1(v27[55].isa))
        {
          *(void *)(v118 + 712) = 0x3FF0000000000000;
          *(void *)(v118 + 744) = 0x3FF0000000000000;
          *(unsigned char *)(v118 + 929) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 1448))(v24, v96);
          WebKit::WebPageProxy::resetRecentGamepadAccessState((WebKit::WebPageProxy *)v118);
        }
      }
      WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(void *)(v118 + 32) + 976), v99, v100);
      uint64_t v101 = *(void *)(v118 + 56);
      if (v101)
      {
        long long v102 = *a16;
        if (*a16) {
          CFRetain(v102[1]);
        }
        WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v77, (API::Object *)v102, (uint64_t *)buf);
        (*(void (**)(uint64_t, uint64_t, NSObject *, uint64_t, void))(*(void *)v101 + 96))(v101, v118, v27, v36, *(void *)buf);
        uint64_t v105 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v105) {
          CFRelease(*(CFTypeRef *)(v105 + 8));
        }
        long long v106 = (unsigned int *)(v77 + 16);
        if (v102) {
          CFRelease(v102[1]);
        }
      }
      else
      {
        if (*a5)
        {
          uint64_t v107 = *(void *)(v118 + 72);
          uint64_t v108 = *a16;
          if (*a16) {
            CFRetain(v108[1]);
          }
          WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v77, (API::Object *)v108, (uint64_t *)buf);
          (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v107 + 80))(v107, v118, v36, *(void *)buf);
          uint64_t v109 = *(void *)buf;
          *(void *)long long buf = 0;
          if (v109) {
            CFRelease(*(CFTypeRef *)(v109 + 8));
          }
          if (v108) {
            CFRelease(v108[1]);
          }
        }
        (*(void (**)(void, uint64_t, WebCore::ResourceRequestBase *, unsigned char *))(**(void **)(v118 + 72)
                                                                                         + 88))(*(void *)(v118 + 72), v118, v122, a5);
        long long v106 = (unsigned int *)(v77 + 16);
      }
      if (BYTE1(v27[55].isa))
      {
        WebKit::WebPageProxy::invalidateAllAttachments((WebKit::WebPageProxy *)v118, v103);
        uint64_t v110 = *(Inspector::RemoteControllableTarget **)(v118 + 1152);
        if (v110) {
          uint64_t v110 = (Inspector::RemoteControllableTarget *)Inspector::RemoteControllableTarget::update(v110);
        }
        if (*(unsigned char *)(v118 + 1377))
        {
          *(unsigned char *)(v118 + 1377) = 0;
          WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(v110, v103);
          if (!dword_1EB359C94)
          {
            WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v118 + 24), v118 + 16);
            uint64_t v111 = *(atomic_uint **)(v118 + 24);
            if (v111) {
              atomic_fetch_add(v111, 1u);
            }
            uint64_t v112 = (void *)WTF::fastMalloc((WTF *)0x10);
            *uint64_t v112 = &unk_1EE9DBB78;
            v112[1] = v111;
            *(void *)long long buf = v112;
            WebKit::requestLinkDecorationFilteringData((uint64_t *)buf);
            uint64_t v113 = *(void *)buf;
            *(void *)long long buf = 0;
            if (v113) {
              (*(void (**)(uint64_t))(*(void *)v113 + 8))(v113);
            }
          }
        }
        if (v36)
        {
          uint64_t v114 = *(void *)(v36 + 3488);
          if (v114) {
            *(_WORD *)(v118 + 1378) = *(_WORD *)(v114 + 96);
          }
        }
      }
      uint64_t v115 = *(uint64_t **)(v118 + 560);
      if (v115) {
        WebKit::UserMediaPermissionRequestManagerProxy::didCommitLoadForFrame(v115, a2, (uint64_t)v25);
      }
      if (BYTE1(v27[55].isa))
      {
        WebKit::WebPageProxy::resetMediaCapability((WebKit::WebPageProxy *)v118, (uint64_t)v103, v104);
        if (BYTE1(v27[55].isa))
        {
          uint64_t v116 = *(void *)(v118 + 272);
          {
            WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl;
          }
          if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v116 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key, v104))WebKit::WebKitSwiftLibrary((WebKit *)1); {
        }
          }
      }
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v124, (uint64_t)v103, v104);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v106);
      if (v36) {
        CFRelease(*(CFTypeRef *)(v36 + 8));
      }
      goto LABEL_142;
    }
    buf[0] = 0;
    char v150 = 0;
    if (*(unsigned char *)(v92 + 1696))
    {
      WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, (const WebCore::PrivateClickMeasurement *)(v92 + 1368));
      char v150 = 1;
    }
    else
    {
      if (!v36) {
        goto LABEL_95;
      }
      if (!*(unsigned char *)(v36 + 1368)) {
        goto LABEL_95;
      }
      std::__optional_storage_base<WebCore::PrivateClickMeasurement,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PrivateClickMeasurement,false> const&>((WebCore::PrivateClickMeasurement *)buf, (unsigned __int8 *)(v36 + 1056));
      if (!v150) {
        goto LABEL_95;
      }
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v138, (const WTF::URL *)&v27[6]);
    char v94 = WTF::equal(*(WTF **)&v141[2], v138[0], v93);
    long long v95 = v138[0];
    v138[0] = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
      {
        WTF::StringImpl::destroy(v95, v91);
        if (v94) {
          goto LABEL_93;
        }
LABEL_91:
        if (!v150)
        {
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        if (!(_BYTE)v147)
        {
LABEL_95:
          uint64_t v98 = *(unsigned char **)(v118 + 1320);
          if (v98) {
            WebKit::WebScreenOrientationManagerProxy::unlockIfNecessary(v98);
          }
          uint64_t v96 = a15;
          if (v150) {
            WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v91);
          }
          uint64_t v92 = *(void *)(v118 + 32);
          goto LABEL_100;
        }
LABEL_93:
        char v97 = *(CFTypeRef **)(v118 + 312);
        CFRetain(v97[1]);
        if (v150)
        {
          WebKit::WebsiteDataStore::storePrivateClickMeasurement((WebKit::WebsiteDataStore *)v97, (const WebCore::PrivateClickMeasurement *)buf);
          CFRelease(v97[1]);
          goto LABEL_95;
        }
        goto LABEL_148;
      }
      *(_DWORD *)v95 -= 2;
    }
    if (v94) {
      goto LABEL_93;
    }
    goto LABEL_91;
  }
  WebKit::WebFrameProxy::commitProvisionalFrame((WebKit::WebFrameProxy *)v27, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)a9, a10, (uint64_t)a11, a12, a13, a14, a15, (uint64_t)a16);
LABEL_142:
  CFRelease(v27[1].isa);
  return (*(uint64_t (**)(uint64_t))(*(void *)v24 + 1600))(v24);
}

void WebKit::WebPageProxy::continueNavigationInNewProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, const WebKit::WebProcessProxy **a5, char a6, int a7, uint64_t a8, uint64_t a9, char a10, int a11, char a12, char a13, uint64_t a14)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = *(void *)(a1 + 32);
    uint64_t v23 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v23) {
      LODWORD(v23) = *(_DWORD *)(v23 + 108);
    }
    uint64_t v24 = *(void *)(v22 + 760);
    uint64_t v25 = *(void *)(v22 + 1928);
    uint64_t v26 = *((void *)*a5 + 17);
    if (v26) {
      LODWORD(v26) = *(_DWORD *)(v26 + 108);
    }
    BOOL v27 = *a4 != 0;
    *(_DWORD *)long long buf = 134219264;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v24;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v25;
    LOWORD(v102) = 1024;
    *(_DWORD *)((char *)&v102 + 2) = v23;
    HIWORD(v102) = 1024;
    *(_DWORD *)uint64_t v103 = v26;
    *(_WORD *)&v103[4] = 1024;
    *(_DWORD *)&v103[6] = v27;
    _os_log_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::continueNavigationInNewProcess: newProcessPID=%i, hasSuspendedPage=%i", buf, 0x32u);
  }
  if (*((unsigned char *)*a5 + 712))
  {
    __break(0xC471u);
    JUMPOUT(0x198E6CFF4);
  }
  *(void *)(a2 + 24) = *((void *)*a5 + 22);
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 232));
  if (WTF::URL::protocolIs())
  {
    uint64_t v28 = *a5;
    uint64_t v29 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 232));
    WebKit::WebProcessProxy::addPreviouslyApprovedFileURL(v28, v29);
  }
  uint64_t v30 = *(WTF::StringImpl **)(a1 + 1192);
  if (v30 && *(unsigned char *)(a3 + 441))
  {
    int v31 = a7;
    uint64_t v32 = qword_1EB358370;
    if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(void *)(a1 + 32);
      uint64_t v34 = *(void *)(v33 + 760);
      uint64_t v35 = *(void *)(v33 + 1928);
      uint64_t v36 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v36) {
        LODWORD(v36) = *(_DWORD *)(v36 + 108);
      }
      uint64_t v37 = *((void *)v30 + 11);
      uint64_t v38 = *(void *)(a2 + 16);
      *(_DWORD *)long long buf = 134219264;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v34;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = v35;
      LOWORD(v102) = 1024;
      *(_DWORD *)((char *)&v102 + 2) = v36;
      HIWORD(v102) = 2048;
      *(void *)uint64_t v103 = v37;
      *(_WORD *)&v103[8] = 2048;
      uint64_t v104 = v38;
      _os_log_impl(&dword_1985F2000, v32, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::continueNavigationInNewProcess: There is already a pending provisional load, cancelling it (provisonalNavigationID=%llu, navigationID=%llu)", buf, 0x3Au);
      uint64_t v30 = *(WTF::StringImpl **)(a1 + 1192);
    }
    a7 = v31;
    if (*((void *)v30 + 11) == *(void *)(a2 + 16))
    {
      *(void *)(a1 + 1192) = 0;
    }
    else
    {
      WebKit::ProvisionalPageProxy::cancel(v30);
      uint64_t v30 = *(WTF::StringImpl **)(a1 + 1192);
      *(void *)(a1 + 1192) = 0;
      if (!v30) {
        goto LABEL_20;
      }
    }
    (*(void (**)(WTF::StringImpl *))(*(void *)v30 + 8))(v30);
  }
LABEL_20:
  uint64_t v96 = a4;
  int v39 = *(CFTypeRef **)(a2 + 3488);
  if (v39) {
    CFRetain(v39[1]);
  }
  char v41 = (*(unsigned char *)(a2 + 738) & 1) == 0 && a7 == 1;
  uint64_t v42 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 232));
  WebKit::Site::Site((WebKit::Site *)&v99, v42);
  uint64_t v44 = *(void *)(a1 + 272);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v44 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v43))
  {
    if (!*(unsigned char *)(a3 + 441)
      || (int v45 = *a5, *((void *)*a5 + 22) == *(void *)(*(void *)(*(void *)(a3 + 32) + 16) + 176)))
    {
      uint64_t v108 = 0;
      LOBYTE(v109) = 0;
      char v110 = 0;
      LOBYTE(v111) = 0;
      char v112 = 0;
      int v46 = WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v113);
      v117[144] = 0;
      __int16 v118 = 0;
      __int16 v120 = 0;
      v121[0] = 0;
      v121[48] = 0;
      __int16 v122 = 0;
      char v123 = 0;
      char v124 = 0;
      char v125 = 0;
      char v126 = 0;
      char v127 = 0;
      __int16 v128 = 0;
      char v129 = 0;
      char v130 = 0;
      long long v116 = 0u;
      memset(v117, 0, 25);
      long long v115 = 0u;
      v119[2] = 0;
      memset(v119, 0, 11);
      WebCore::ResourceRequestBase::operator=((uint64_t)v46, a2 + 232);
      uint64_t v47 = *(const void **)(a2 + 424);
      if (v47) {
        CFRetain(*(CFTypeRef *)(a2 + 424));
      }
      CFTypeRef v48 = cf;
      CFTypeRef cf = v47;
      if (v48) {
        CFRelease(v48);
      }
      if (*(unsigned char *)(a2 + 738)) {
        char v49 = 1;
      }
      else {
        char v49 = 2;
      }
      HIBYTE(v118) = v49;
      long long v111 = *(_OWORD *)(a3 + 272);
      if (!v112) {
        char v112 = 1;
      }
      LOBYTE(v128) = *(unsigned char *)(a2 + 856);
      uint64_t v50 = *(void *)(a2 + 16);
      if (!v110) {
        char v110 = 1;
      }
      uint64_t v109 = v50;
      BYTE1(v119[1]) = *(unsigned char *)(a3 + 440);
      std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::OwnerPermissionsPolicyData,false> const&>((uint64_t)v121, a2 + 1000);
      HIBYTE(v128) = a13;
      if (*(unsigned char *)(a3 + 441) && (uint64_t v51 = *(void *)(a1 + 1192)) != 0) {
        uint64_t v52 = *(void *)(v51 + 40);
      }
      else {
        uint64_t v52 = *(void *)(a3 + 32);
      }
      uint64_t v71 = *(void *)(v52 + 16);
      uint64_t v72 = (unsigned int *)(v71 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v71 + 16), 1u);
      uint64_t v73 = *(void *)(a3 + 312);
      v75 = v73 && (uint64_t v74 = *(void *)(v73 + 8)) != 0 && *(void *)(*(void *)(v74 + 32) + 16) == v71;
      *(unsigned char *)(a3 + 440) = v75;
      uint64_t v76 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *a5);
      if (v76) {
        uint64_t v77 = (uint64_t *)(v76 + 16);
      }
      else {
        uint64_t v77 = (uint64_t *)(*(void *)(a1 + 32) + 1928);
      }
      uint64_t v78 = *v77;
      uint64_t v79 = *a5;
      uint64_t v80 = *(WebKit::BrowsingContextGroup **)(a1 + 1416);
      WebKit::LoadParameters::LoadParameters((uint64_t)buf, (uint64_t *)&v108);
      long long v81 = *a5;
      atomic_fetch_add((atomic_uint *volatile)*a5 + 4, 1u);
      uint64_t v105 = v81;
      uint64_t v106 = v78;
      WTF::RefCounter<WebKit::WebProcessProxy::ShutdownPreventingScopeType>::count((void *)*a5 + 126, &v107);
      uint64_t v82 = (void *)WTF::fastMalloc((WTF *)0x268);
      *uint64_t v82 = &unk_1EE9DA6D0;
      WebKit::LoadParameters::LoadParameters((uint64_t)(v82 + 1), (uint64_t *)buf);
      long long v83 = v105;
      uint64_t v105 = 0;
      v82[74] = v83;
      v82[75] = v106;
      uint64_t v84 = v107;
      uint64_t v107 = 0;
      v82[76] = v84;
      uint64_t v98 = v82;
      WebKit::WebFrameProxy::prepareForProvisionalLoadInProcess(a3, (atomic_uint *)v79, a2, v80, (uint64_t *)&v98);
      uint64_t v86 = (uint64_t)v98;
      uint64_t v98 = 0;
      if (v86) {
        (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
      }
      uint64_t v87 = v107;
      uint64_t v107 = 0;
      if (!v87) {
        goto LABEL_85;
      }
      uint64_t v88 = *(uint64_t **)v87;
      uint64_t v89 = *(void *)(v87 + 8) - 1;
      *(void *)(v87 + 8) = v89;
      if (v88)
      {
        uint64_t v90 = *v88;
        if (!*v88
          || (char v91 = *(unsigned char *)(v87 + 16),
              *(unsigned char *)(v87 + 16) = 1,
              (*(void (**)(uint64_t, void))(*(void *)v90 + 16))(v90, 0),
              *(unsigned char *)(v87 + 16) = v91,
              *(void *)v87))
        {
LABEL_85:
          uint64_t v92 = v105;
          uint64_t v105 = 0;
          if (v92) {
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v92 + 4);
          }
          WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)buf, v85);
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v72);
          WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&v108, v93);
          goto LABEL_88;
        }
        uint64_t v89 = *(void *)(v87 + 8);
      }
      if (!v89) {
        MEMORY[0x199740C10](v87, 0x1020C40545B2139);
      }
      goto LABEL_85;
    }
  }
  else
  {
    int v45 = *a5;
  }
  if (*((void *)v45 + 94) == *(void *)(a1 + 312))
  {
    uint64_t v53 = *(void *)(a1 + 1416);
    ++*(_DWORD *)v53;
  }
  else
  {
    uint64_t v53 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)uint64_t v53 = 1;
    *(_OWORD *)(v53 + 8) = 0u;
    *(_OWORD *)(v53 + 24) = 0u;
    *(_OWORD *)(v53 + 40) = 0u;
    *(_OWORD *)(v53 + 56) = 0u;
    int v45 = *a5;
  }
  char v97 = (String *)(a2 + 232);
  WebKit::BrowsingContextGroup::ensureProcessForSite((WebKit::BrowsingContextGroup *)v53, (const WebKit::Site *)&v99, (atomic_uint *)v45, *(const WebKit::WebPreferences **)(a1 + 272), &v108);
  uint64_t v54 = *(void *)(a1 + 1192);
  *(void *)(a1 + 1192) = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  char v55 = a7;
  char v56 = a7 == 2;
  uint64_t v57 = WTF::fastMalloc((WTF *)0x1A0);
  uint64_t v58 = *v96;
  *uint64_t v96 = 0;
  *(void *)long long buf = v58;
  WebKit::ProvisionalPageProxy::ProvisionalPageProxy(v57, a1, (uint64_t *)&v108, (_DWORD *)v53, (uint64_t *)buf, a2, v41, v97, a6, v56, v39, a14);
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  uint64_t v59 = *(void *)(a1 + 1192);
  *(void *)(a1 + 1192) = v57;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  CFRetain(*(CFTypeRef *)(a1 + 8));
  CFRetain(*(CFTypeRef *)(a2 + 8));
  uint64_t v60 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v60 = &unk_1EE9DA6F8;
  *(void *)(v60 + 8) = a1;
  *(void *)(v60 + 16) = a1;
  *(void *)(v60 + 24) = a2;
  *(unsigned char *)(v60 + 32) = v55;
  *(void *)(v60 + 40) = v39;
  *(void *)(v60 + 48) = a9;
  *(unsigned char *)(v60 + 56) = a10;
  *(unsigned char *)(v60 + 64) = a13;
  uint64_t v98 = (void *)v60;
  uint64_t v61 = *(const WebKit::ProvisionalPageProxy **)(a1 + 1192);
  if (*((unsigned char *)v61 + 307))
  {
    uint64_t v62 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 312));
    atomic_fetch_add((atomic_uint *volatile)(v62 + 16), 1u);
    *(void *)long long buf = v62;
    *(void *)&buf[8] = v98;
    uint64_t v63 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v97);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&buf[16], v63);
    uint64_t v64 = *(void *)(*(void *)(*(void *)(a1 + 1192) + 40) + 16);
    atomic_fetch_add((atomic_uint *volatile)(v64 + 16), 1u);
    *(void *)&unsigned char buf[24] = v64;
    WTF::RefCounter<WebKit::WebProcessProxy::ShutdownPreventingScopeType>::count((void *)(*(void *)(*(void *)(*(void *)(a1 + 1192) + 40) + 16) + 1008), &v102);
    v103[0] = a12;
    uint64_t v65 = WTF::fastMalloc((WTF *)0x38);
    *(void *)uint64_t v65 = &unk_1EE9DA720;
    *(void *)(v65 + 8) = *(void *)buf;
    *(void *)(v65 + 16) = *(void *)&buf[8];
    *(void *)(v65 + 24) = *(void *)&buf[16];
    uint64_t v66 = *(void *)&buf[24];
    memset(buf, 0, sizeof(buf));
    *(void *)(v65 + 32) = v66;
    uint64_t v67 = v102;
    uint64_t v102 = 0;
    *(void *)(v65 + 40) = v67;
    *(unsigned char *)(v65 + 48) = v103[0];
    uint64_t v98 = (void *)v65;
    WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,std::unique_ptr<WebKit::SuspendedPageProxy> &&::RawPtrTraits<WTF::Ref>,std::unique_ptr<WebKit::SuspendedPageProxy> &&::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(std::unique_ptr<WebKit::SuspendedPageProxy> &&::SupportsObjectIdentifierNullState)1>>,WebKit::LoadedWebArchive,WTF::Ref<WebKit::WebProcessProxy,std::unique_ptr<WebKit::SuspendedPageProxy> &&::RawPtrTraits<WTF::Ref>,std::unique_ptr<WebKit::SuspendedPageProxy> &&::DefaultRefDerefTraits<WTF::Ref>> &&::IsPerformingHTTPFallback,WebKit::WebsiteDataStore *)::$_2::~$_2((uint64_t *)buf, v68);
    uint64_t v61 = *(const WebKit::ProvisionalPageProxy **)(a1 + 1192);
  }
  else
  {
    uint64_t v65 = v60;
  }
  if (!WebKit::WebPageInspectorController::shouldPauseLoading(*(WebKit::WebPageInspectorController **)(a1 + 1144), v61))
  {
    (*(void (**)(uint64_t))(*(void *)v65 + 16))(v65);
    uint64_t v98 = 0;
LABEL_64:
    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
    goto LABEL_65;
  }
  WebKit::WebPageInspectorController::setContinueLoadingCallback(*(void *)(a1 + 1144), *(void *)(a1 + 1192));
  uint64_t v65 = (uint64_t)v98;
  uint64_t v98 = 0;
  if (v65) {
    goto LABEL_64;
  }
LABEL_65:
  if (v108) {
    WTF::RefCounted<WebKit::FrameProcess>::deref(v108, v69);
  }
  WTF::RefCounted<WebKit::BrowsingContextGroup>::deref((WebKit::BrowsingContextGroup *)v53, v69);
  int v39 = 0;
LABEL_88:
  char v94 = v100;
  uint64_t v100 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2) {
      WTF::StringImpl::destroy(v94, v70);
    }
    else {
      *(_DWORD *)v94 -= 2;
    }
  }
  long long v95 = v99;
  uint64_t v99 = 0;
  if (!v95)
  {
LABEL_95:
    if (!v39) {
      return;
    }
    goto LABEL_96;
  }
  if (*(_DWORD *)v95 != 2)
  {
    *(_DWORD *)v95 -= 2;
    goto LABEL_95;
  }
  WTF::StringImpl::destroy(v95, v70);
  if (v39) {
LABEL_96:
  }
    CFRelease(v39[1]);
}

uint64_t *WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,std::unique_ptr<WebKit::SuspendedPageProxy> &&::RawPtrTraits<WTF::Ref>,std::unique_ptr<WebKit::SuspendedPageProxy> &&::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(std::unique_ptr<WebKit::SuspendedPageProxy> &&::SupportsObjectIdentifierNullState)1>>,WebKit::LoadedWebArchive,WTF::Ref<WebKit::WebProcessProxy,std::unique_ptr<WebKit::SuspendedPageProxy> &&::RawPtrTraits<WTF::Ref>,std::unique_ptr<WebKit::SuspendedPageProxy> &&::DefaultRefDerefTraits<WTF::Ref>> &&::IsPerformingHTTPFallback,WebKit::WebsiteDataStore *)::$_2::~$_2(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)v3;
    uint64_t v5 = *(void *)(v3 + 8) - 1;
    *(void *)(v3 + 8) = v5;
    if (v4)
    {
      uint64_t v6 = *v4;
      if (!*v4) {
        goto LABEL_8;
      }
      char v7 = *(unsigned char *)(v3 + 16);
      *(unsigned char *)(v3 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
      *(unsigned char *)(v3 + 16) = v7;
      if (*(void *)v3) {
        goto LABEL_8;
      }
      uint64_t v5 = *(void *)(v3 + 8);
    }
    if (!v5) {
      MEMORY[0x199740C10](v3, 0x1020C40545B2139);
    }
  }
LABEL_8:
  uint64_t v8 = a1[3];
  a1[3] = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  uint64_t v9 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = a1[1];
  a1[1] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
  }
  return a1;
}

uint64_t WebKit::WebPageProxy::setCustomUserAgent(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::equal(this[47], *a2, a3);
  if ((result & 1) == 0)
  {
    WTF::String::operator=((uint64_t *)this + 47, a2);
    uint64_t v6 = this[47];
    if (v6 && *((_DWORD *)v6 + 1))
    {
      *(_DWORD *)v6 += 2;
      uint64_t v10 = v6;
      char v7 = (WebKit::WebPageProxy *)this;
      uint64_t v8 = 1;
    }
    else
    {
      WebCore::standardUserAgentWithApplicationName();
      char v7 = (WebKit::WebPageProxy *)this;
      uint64_t v8 = 0;
    }
    WebKit::WebPageProxy::setUserAgent((uint64_t)v7, (uint64_t *)&v10, (const WTF::StringImpl *)v8);
    uint64_t result = (uint64_t)v10;
    uint64_t v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::resumeActiveDOMObjectsAndAnimations(uint64_t this)
{
  if (!*(unsigned char *)(this + 801) && *(unsigned char *)(this + 800))
  {
    if (*(unsigned char *)(this + 896))
    {
      *(unsigned char *)(this + 896) = 0;
      char v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ResumeActiveDOMObjectsAndAnimations>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::suspendActiveDOMObjectsAndAnimations(uint64_t this)
{
  if (!*(unsigned char *)(this + 801) && *(unsigned char *)(this + 800) && !*(unsigned char *)(this + 896))
  {
    *(unsigned char *)(this + 896) = 1;
    char v1 = 0;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SuspendActiveDOMObjectsAndAnimations>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
  }
  return this;
}

IPC::Encoder *WebKit::WebPageProxy::suspend(uint64_t a1, uint64_t *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(v5 + 760);
    uint64_t v7 = *(void *)(v5 + 1928);
    uint64_t v8 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v8) {
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v6;
    __int16 v23 = 2048;
    uint64_t v24 = v7;
    __int16 v25 = 1024;
    int v26 = v8;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspend:", buf, 0x26u);
  }
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800) || *(unsigned char *)(a1 + 1362))
  {
    uint64_t v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  else
  {
    *(unsigned char *)(a1 + 1362) = 1;
    uint64_t v11 = *(void *)(a1 + 256);
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 2503;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v21 = v13;
    uint64_t v14 = *a2;
    *a2 = 0;
    unsigned int v15 = (void *)WTF::fastMalloc((WTF *)0x10);
    *unsigned int v15 = &unk_1EE9DA770;
    v15[1] = v14;
    uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    *(void *)long long buf = v15;
    *(void *)&buf[8] = v16;
    uint8_t buf[16] = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v21, 0, (uint64_t)buf, 1);
    if (buf[16])
    {
      uint64_t v18 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
    }
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v17);
      return (IPC::Encoder *)WTF::fastFree(v19, v20);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::resume(uint64_t a1, uint64_t *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(v5 + 760);
    uint64_t v7 = *(void *)(v5 + 1928);
    uint64_t v8 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v8) {
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v6;
    __int16 v23 = 2048;
    uint64_t v24 = v7;
    __int16 v25 = 1024;
    int v26 = v8;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::resume:", buf, 0x26u);
  }
  if (!*(unsigned char *)(a1 + 801) && *(unsigned char *)(a1 + 800) && *(unsigned char *)(a1 + 1362))
  {
    *(unsigned char *)(a1 + 1362) = 0;
    uint64_t v11 = *(void *)(a1 + 256);
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 2384;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v21 = v13;
    uint64_t v14 = *a2;
    *a2 = 0;
    unsigned int v15 = (void *)WTF::fastMalloc((WTF *)0x10);
    *unsigned int v15 = &unk_1EE9DA798;
    v15[1] = v14;
    uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    *(void *)long long buf = v15;
    *(void *)&buf[8] = v16;
    uint8_t buf[16] = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v21, 0, (uint64_t)buf, 1);
    if (buf[16])
    {
      uint64_t v18 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
    }
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v17);
      return (IPC::Encoder *)WTF::fastFree(v19, v20);
    }
  }
  else
  {
    uint64_t v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setCustomTextEncodingName(WebKit::WebPageProxy *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::equal(*((WTF **)this + 48), *a2, a3);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)WTF::String::operator=((uint64_t *)this + 48, a2);
    if (!*((unsigned char *)this + 801))
    {
      if (*((unsigned char *)this + 800))
      {
        uint64_t v6 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCustomTextEncodingName>(*((void *)this + 32), (uint64_t **)&v6, *(void *)(*((void *)this + 4) + 1928), 0);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::sessionState@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  if ((WTF::RunLoop::isCurrent(v6) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198E6D97CLL);
  }
  *(unsigned char *)(a3 + 20) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  WTF::URL::invalidate((WTF::URL *)(a3 + 32));
  *(unsigned char *)(a3 + 72) = 1;
  WebKit::WebBackForwardList::backForwardListState(*(void *)(a1 + 664), a2, (uint64_t)&v16);
  unsigned int v8 = *(_DWORD *)(a3 + 12);
  if (v8) {
    WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct(*(WTF::StringImpl **)a3, (WTF::StringImpl *)(*(void *)a3 + 312 * v8));
  }
  uint64_t v9 = *(WTF **)a3;
  if (*(void *)a3)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    WTF::fastFree(v9, v7);
  }
  *(void *)a3 = v16;
  uint64_t v10 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  *(void *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 16) = v18;
  *(unsigned char *)(a3 + 20) = v19;
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v7);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(WTF::StringImpl **)(v11 + 1016);
  if (v12)
  {
    *(_DWORD *)v12 += 2;
    uint64_t v20 = v12;
    if (*((_DWORD *)v12 + 1)) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  WTF::String::operator=((uint64_t *)&v20, (WTF::StringImpl **)(v11 + 1024));
  uint64_t result = v20;
  if (!v20)
  {
    *(void *)(a3 + 24) = *(void *)(a1 + 936);
    *(unsigned char *)(a3 + 72) = *(unsigned char *)(a1 + 1360);
    return result;
  }
  if (!*((_DWORD *)v20 + 1))
  {
    *(void *)(a3 + 24) = *(void *)(a1 + 936);
    *(unsigned char *)(a3 + 72) = *(unsigned char *)(a1 + 1360);
    uint64_t v20 = 0;
LABEL_13:
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    *(_DWORD *)result -= 2;
    return result;
  }
LABEL_8:
  WTF::URL::URL((uint64_t)&v16, &v20);
  WTF::URL::operator=(a3 + 32, (uint64_t)&v16);
  uint64_t v14 = v16;
  uint64_t v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t result = v20;
  *(void *)(a3 + 24) = *(void *)(a1 + 936);
  *(unsigned char *)(a3 + 72) = *(unsigned char *)(a1 + 1360);
  uint64_t v20 = 0;
  if (result) {
    goto LABEL_13;
  }
  return result;
}

void WebKit::WebPageProxy::restoreFromSessionState(WebKit::WebPageProxy *this@<X0>, SessionState *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *((void *)this + 4);
    uint64_t v10 = *(void *)(v9 + 760);
    uint64_t v11 = *(void *)(v9 + 1928);
    uint64_t v12 = *(void *)(*((void *)this + 32) + 136);
    if (v12) {
      LODWORD(v12) = *(_DWORD *)(v12 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v10;
    __int16 v44 = 2048;
    uint64_t v45 = v11;
    __int16 v46 = 1024;
    int v47 = v12;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::restoreFromSessionState:", buf, 0x26u);
  }
  *((unsigned char *)this + 1360) = a2->isAppInitiated;
  *((void *)this + 118) = 0;
  *((unsigned char *)this + 952) = 0;
  BOOL engaged = a2->backForwardListState.currentIndex.__engaged_;
  if (a2->backForwardListState.currentIndex.__engaged_)
  {
    *((unsigned char *)this + 1264) = 1;
    uint64_t v14 = (CFTypeRef *)*((void *)this + 83);
    CFRetain(v14[1]);
    v41.items.m_buffer = a2->backForwardListState.items.m_buffer;
    uint64_t v15 = *(void *)&a2->backForwardListState.items.m_capacity;
    a2->backForwardListState.items.m_buffer = 0;
    *(void *)&a2->backForwardListState.items.m_capacity = 0;
    *(void *)&v41.items.m_capacity = v15;
    v41.currentIndeCGFloat x = a2->backForwardListState.currentIndex;
    WebKit::WebBackForwardList::restoreFromState((uint64_t)v14, &v41);
    WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v16);
    if (!*((unsigned char *)this + 801) && *((unsigned char *)this + 800))
    {
      WebKit::WebBackForwardList::itemStates((WebKit::WebBackForwardList *)v14, (uint64_t)v40);
      uint64_t v17 = *((void *)this + 32);
      uint64_t v18 = *(void *)(*((void *)this + 4) + 1928);
      char v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)char v19 = 2383;
      *((void *)v19 + 1) = v18;
      *((void *)v19 + 66) = (char *)v19 + 16;
      *((void *)v19 + 67) = 512;
      *((void *)v19 + 68) = 0;
      *((void *)v19 + 70) = 0;
      *((void *)v19 + 69) = 0;
      IPC::Encoder::encodeHeader(v19);
      uint64_t v42 = v19;
      IPC::VectorArgumentCoder<false,WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v19, (uint64_t)v40);
      buf[0] = 0;
      uint8_t buf[16] = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v17, &v42, 0, (uint64_t)buf, 1);
      if (buf[16])
      {
        uint64_t v21 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        }
      }
      uint64_t v22 = v42;
      uint64_t v42 = 0;
      if (v22)
      {
        IPC::Encoder::~Encoder(v22, v20);
        WTF::fastFree(v38, v39);
      }
      WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v20);
    }
    uint64_t v23 = *((void *)this + 4);
    uint64_t v24 = *(void *)(*(void *)(v23 + 992) + 8);
    if (v24)
    {
      uint64_t v25 = v24 - 16;
      CFRetain(*(CFTypeRef *)(v24 - 8));
    }
    else
    {
      uint64_t v25 = 0;
    }
    uint64_t v26 = *((void *)this + 4);
    *(void *)long long buf = v25;
    *(void *)&buf[8] = v23 + 976;
    ++*(_DWORD *)(v23 + 1348);
    *(unsigned char *)(v23 + 1344) = 1;
    *(unsigned char *)(v26 + 1304) = WebKit::WebBackForwardList::backItem((uint64_t)v14) != 0;
    uint64_t v27 = *((void *)this + 4);
    *(unsigned char *)(v23 + 1344) = 1;
    *(unsigned char *)(v27 + 1305) = WebKit::WebBackForwardList::forwardItem((uint64_t)v14) != 0;
    *((unsigned char *)this + 965) = 1;
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v28, v29);
    CFRelease(v14[1]);
  }
  if (!a3) {
    goto LABEL_31;
  }
  unint64_t renderTreeSize = a2->renderTreeSize;
  *((void *)this + 118) = renderTreeSize;
  if (!renderTreeSize) {
    *((unsigned char *)this + 952) = 1;
  }
  m_ptr = a2->provisionalURL.m_string.m_impl.m_ptr;
  p_provisionalURL = &a2->provisionalURL;
  if (!m_ptr)
  {
    if (engaged)
    {
      uint64_t v34 = *((void *)this + 83);
      uint64_t v35 = *(void *)(v34 + 16);
      if (v35)
      {
        if (*(void *)(v35 + 8) && *(unsigned char *)(v34 + 48))
        {
          unint64_t v36 = *(void *)(v34 + 40);
          if (v36 >= *(unsigned int *)(v34 + 36))
          {
            __break(0xC471u);
            return;
          }
          uint64_t v37 = *(void *)(*(void *)(v34 + 24) + 8 * v36);
          if (v37)
          {
            CFRetain(*(CFTypeRef *)(v37 + 8));
            WebKit::WebPageProxy::goToBackForwardItem((uint64_t)this, v37, 3u, a4);
            CFRelease(*(CFTypeRef *)(v37 + 8));
            return;
          }
        }
      }
    }
LABEL_31:
    *a4 = 0;
    return;
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)buf, &p_provisionalURL->m_string, 0);
  CFTypeRef cf = 0;
  WebKit::WebPageProxy::loadRequest((uint64_t)this, (WebCore::ResourceRequestBase *)buf, 1, 0, 0, a4);
  CFTypeRef v33 = cf;
  CFTypeRef cf = 0;
  if (v33) {
    CFRelease(v33);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
}

uint64_t WebKit::WebPageProxy::setTextZoomFactor(uint64_t this, double a2)
{
  if (*(unsigned char *)(this + 929) || *(double *)(this + 696) != a2)
  {
    *(double *)(this + 696) = a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        double v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetTextZoomFactor>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setPageZoomFactor(uint64_t this, double a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 929) || *(double *)(this + 704) != a2)
  {
    this = WebKit::WebPageProxy::closeOverlayedViews((WebKit::WebPageProxy *)this);
    *(double *)(v3 + 704) = a2;
    if (!*(unsigned char *)(v3 + 801) && *(unsigned char *)(v3 + 800))
    {
      uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v4 = &unk_1EE9DA7C0;
      v4[1] = v3;
      uint64_t v5 = (uint64_t)v4;
      WebKit::WebPageProxy::forEachWebContentProcess((void *)v3, &v5);
      this = v5;
      uint64_t v5 = 0;
      if (this) {
        return (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setPageAndTextZoomFactors(uint64_t this, double a2, double a3)
{
  uint64_t v5 = this;
  if (*(unsigned char *)(this + 929) || *(double *)(this + 704) != a2 || *(double *)(this + 696) != a3)
  {
    this = WebKit::WebPageProxy::closeOverlayedViews((WebKit::WebPageProxy *)this);
    *(double *)(v5 + 704) = a2;
    *(double *)(v5 + 696) = a3;
    if (!*(unsigned char *)(v5 + 801))
    {
      if (*(unsigned char *)(v5 + 800))
      {
        v6[0] = a2;
        v6[1] = a3;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPageAndTextZoomFactors>(*(void *)(v5 + 256), v6, *(void *)(*(void *)(v5 + 32) + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::scalePage(uint64_t this, double a2, const WebCore::IntPoint *a3)
{
  *(double *)(this + 712) = a2;
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      *(double *)uint64_t v3 = a2;
      v3[1] = a3;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ScalePage>(*(void *)(this + 256), (uint64_t)v3, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setCustomDeviceScaleFactor(uint64_t this, float a2)
{
  double v2 = (float *)(this + 764);
  if (!*(unsigned char *)(this + 768))
  {
    uint64_t v4 = (float *)(this + 760);
    float v3 = *(float *)(this + 760);
    if (a2 == 0.0)
    {
      int v6 = 1;
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  float v3 = *v2;
  if (*v2 == a2) {
    return this;
  }
  uint64_t v4 = (float *)(this + 760);
  if (a2 != 0.0)
  {
LABEL_6:
    int v6 = 0;
    *double v2 = a2;
    char v5 = 1;
    goto LABEL_7;
  }
  char v5 = 0;
  int v6 = 1;
LABEL_7:
  *(unsigned char *)(this + 768) = v5;
LABEL_9:
  if (!*(unsigned char *)(this + 801) && *(unsigned char *)(this + 800))
  {
    if (v6) {
      double v2 = v4;
    }
    if (*v2 != v3) {
      return (*(uint64_t (**)(float))(**(void **)(this + 232) + 56))(*v2);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::accessibilitySettingsDidChange(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    uint64_t v1 = this;
    if (*(unsigned char *)(this + 800))
    {
      uint64_t v2 = *(void *)(*(void *)(*(void *)(this + 256) + 512) + 8);
      if (v2) {
        float v3 = (CFTypeRef *)(v2 - 16);
      }
      else {
        float v3 = 0;
      }
      CFRetain(v3[1]);
      WebKit::WebProcessPool::screenPropertiesChanged((WebKit::WebProcessPool *)v3);
      if (v2) {
        CFRelease(v3[1]);
      }
      char v4 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AccessibilitySettingsDidChange>(*(void *)(v1 + 256), (uint64_t)&v4, *(void *)(*(void *)(v1 + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setFixedLayoutSize(uint64_t this, const WebCore::IntSize *a2)
{
  uint64_t v2 = *(void *)(this + 32);
  if (*(_DWORD *)a2 != *(_DWORD *)(v2 + 720) || *((_DWORD *)a2 + 1) != *(_DWORD *)(v2 + 724))
  {
    *(void *)(v2 + 720) = *(void *)a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        char v4 = (int *)a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetFixedLayoutSize>(*(void *)(this + 256), &v4, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setSuppressScrollbarAnimations(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 780) != a2)
  {
    *(unsigned char *)(this + 780) = a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        char v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetSuppressScrollbarAnimations>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setEnableVerticalRubberBanding(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 924) != a2)
  {
    *(unsigned char *)(this + 924) = a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        char v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetEnableVerticalRubberBanding>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setEnableHorizontalRubberBanding(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 925) != a2)
  {
    *(unsigned char *)(this + 925) = a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        char v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetEnableHorizontalRubberBanding>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setPaginationMode(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 781) != a2)
  {
    *(unsigned char *)(result + 781) = a2;
    if (!*(unsigned char *)(result + 801))
    {
      if (*(unsigned char *)(result + 800))
      {
        char v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPaginationMode>(*(void *)(result + 256), &v2, *(void *)(*(void *)(result + 32) + 1928), 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setPaginationBehavesLikeColumns(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 782) != a2)
  {
    *(unsigned char *)(this + 782) = a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        char v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPaginationBehavesLikeColumns>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setPageLength(uint64_t this, double a2)
{
  if (*(double *)(this + 784) != a2)
  {
    *(double *)(this + 784) = a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        double v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPageLength>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setGapBetweenPages(uint64_t this, double a2)
{
  if (*(double *)(this + 792) != a2)
  {
    *(double *)(this + 792) = a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        double v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetGapBetweenPages>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

void WebKit::WebPageProxy::pluginScaleFactorDidChange(WebKit::WebPageProxy *this, IPC::Connection *a2, double a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a3 > 0.0)
  {
    BOOL v4 = a3 == 100.0;
    BOOL v3 = a3 >= 100.0;
  }
  else
  {
    BOOL v3 = 1;
    BOOL v4 = 0;
  }
  if (!v4 && v3)
  {
    int v6 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v7 = 136446210;
      unsigned int v8 = "void WebKit::WebPageProxy::pluginScaleFactorDidChange(IPC::Connection &, double)";
      _os_log_fault_impl(&dword_1985F2000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 5623: Invalid message dispatched %{public}s", (uint8_t *)&v7, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
  else
  {
    *((double *)this + 93) = a3;
  }
}

void WebKit::WebPageProxy::pluginZoomFactorDidChange(WebKit::WebPageProxy *this, IPC::Connection *a2, double a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a3 > 0.0)
  {
    BOOL v4 = a3 == 100.0;
    BOOL v3 = a3 >= 100.0;
  }
  else
  {
    BOOL v3 = 1;
    BOOL v4 = 0;
  }
  if (!v4 && v3)
  {
    int v6 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v7 = 136446210;
      unsigned int v8 = "void WebKit::WebPageProxy::pluginZoomFactorDidChange(IPC::Connection &, double)";
      _os_log_fault_impl(&dword_1985F2000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 5629: Invalid message dispatched %{public}s", (uint8_t *)&v7, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
  else
  {
    *((double *)this + 90) = a3;
  }
}

IPC::Encoder *WebKit::WebPageProxy::findStringMatches(uint64_t a1, WTF::StringImpl **a2, __int16 a3, int a4)
{
  __int16 v24 = a3;
  int v23 = a4;
  if (!*a2 || !*((_DWORD *)*a2 + 1))
  {
    uint64_t v14 = *(void *)(a1 + 120);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, void **, void))(*(void *)v14 + 16))(v14, a1, a2, &v25, 0);
    return (IPC::Encoder *)WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v15);
  }
  v22[0] = a2;
  v22[1] = &v24;
  void v22[2] = &v23;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  int v6 = *a2;
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v7 = *(void *)(a1 + 256);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 1928);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2244;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v28 = v9;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v9, (uint64_t)v22);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  uint64_t v12 = v10;
  void *v10 = &unk_1EE9DA7E8;
  v10[1] = a1;
  void v10[2] = a1;
  if (v6)
  {
    int v13 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    _OWORD v10[3] = v6;
    if (v13) {
      *(_DWORD *)int v6 = v13;
    }
    else {
      WTF::StringImpl::destroy(v6, v11);
    }
  }
  else
  {
    _OWORD v10[3] = 0;
  }
  uint64_t v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v25 = v12;
  uint64_t v26 = v17;
  char v27 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v28, 0, (uint64_t)&v25, 1);
  if (v27)
  {
    char v19 = v25;
    uint64_t v25 = 0;
    if (v19) {
      (*(void (**)(void *))(*v19 + 8))(v19);
    }
  }
  uint64_t result = v28;
  uint64_t v28 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v20, v21);
    if (!v6) {
      return result;
    }
  }
  else if (!v6)
  {
    return result;
  }
  if (*(_DWORD *)v6 == 2) {
    return (IPC::Encoder *)WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v18);
  }
  *(_DWORD *)v6 -= 2;
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::findString(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, int a4, uint64_t *a5)
{
  __int16 v6 = (__int16)a3;
  __int16 v40 = (__int16)a3;
  int v39 = a4;
  uint64_t v9 = *(void *)(a1 + 272);
  {
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v9 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key, a3))
  {
    __int16 v38 = v6 | 0x800;
    BackForwardListState v41 = a2;
    uint64_t v42 = (uint64_t *)&v38;
    uint64_t v43 = &v39;
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v10 = &unk_1EE9DA810;
    uint64_t v37 = v10;
    int v11 = v39;
    uint64_t v12 = WTF::fastMalloc((WTF *)0x38);
    v36[0] = WebKit::FindStringCallbackAggregator::FindStringCallbackAggregator(v12, a1, (_DWORD **)a2, v6, v11, (uint64_t *)&v37);
    int v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
    *(void *)int v13 = &unk_1EE9D9CB8;
    *((void *)v13 + 1) = v36;
    *((void *)v13 + 2) = &v41;
    __int16 v44 = v13;
    WebKit::WebPageProxy::forEachWebContentProcess((void *)a1, &v44);
    uint64_t v14 = v44;
    __int16 v44 = 0;
    if (v14) {
      (*(void (**)(IPC::Encoder *))(*(void *)v14 + 8))(v14);
    }
    uint64_t v15 = (WebKit::FindStringCallbackAggregator *)v36[0];
    v36[0] = 0;
    if (v15) {
      WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(v15);
    }
    if (v37) {
      (*(void (**)(void *))(*v37 + 8))(v37);
    }
  }
  if (WebKit::BrowsingContextGroup::hasRemotePages(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1))
  {
    __int16 v16 = v6;
    LOWORD(v37) = v6 | 0x800;
    BackForwardListState v41 = a2;
    uint64_t v42 = (uint64_t *)&v37;
    uint64_t v43 = &v39;
    int v17 = v39;
    uint64_t v18 = WTF::fastMalloc((WTF *)0x38);
    v36[0] = WebKit::FindStringCallbackAggregator::FindStringCallbackAggregator(v18, a1, (_DWORD **)a2, v16, v17, a5);
    char v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
    *(void *)char v19 = &unk_1EE9D9D08;
    *((void *)v19 + 1) = v36;
    *((void *)v19 + 2) = &v41;
    __int16 v44 = v19;
    WebKit::WebPageProxy::forEachWebContentProcess((void *)a1, &v44);
    uint64_t v20 = v44;
    __int16 v44 = 0;
    if (v20) {
      (*(void (**)(IPC::Encoder *))(*(void *)v20 + 8))(v20);
    }
    uint64_t result = (IPC::Encoder *)v36[0];
    v36[0] = 0;
    if (result) {
      return WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(result);
    }
  }
  else
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v22 = *a2;
    if (*a2) {
      *(_DWORD *)v22 += 2;
    }
    uint64_t v23 = *a5;
    *a5 = 0;
    v36[0] = a2;
    v36[1] = &v40;
    v36[2] = &v39;
    uint64_t v24 = *(void *)(a1 + 256);
    uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v26 = 2242;
    *((void *)v26 + 1) = v25;
    *((void *)v26 + 66) = (char *)v26 + 16;
    *((void *)v26 + 67) = 512;
    *((void *)v26 + 68) = 0;
    *((void *)v26 + 70) = 0;
    *((void *)v26 + 69) = 0;
    IPC::Encoder::encodeHeader(v26);
    __int16 v44 = v26;
    IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v26, (uint64_t)v36);
    if (v22) {
      *(_DWORD *)v22 += 2;
    }
    char v27 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x20);
    uint64_t v29 = v27;
    *char v27 = (WTF::StringImpl *)&unk_1EE9DA838;
    v27[1] = (WTF::StringImpl *)a1;
    if (v22)
    {
      int v30 = *(_DWORD *)v22;
      *(_DWORD *)v22 += 2;
      v27[2] = v22;
      void v27[3] = (WTF::StringImpl *)v23;
      if (v30) {
        *(_DWORD *)uint64_t v22 = v30;
      }
      else {
        WTF::StringImpl::destroy(v22, v28);
      }
    }
    else
    {
      v27[2] = 0;
      void v27[3] = (WTF::StringImpl *)v23;
    }
    uint64_t v31 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    BackForwardListState v41 = v29;
    uint64_t v42 = (uint64_t *)v31;
    LOBYTE(v43) = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v24, &v44, 0, (uint64_t)&v41, 1);
    if ((_BYTE)v43)
    {
      CFTypeRef v33 = v41;
      BackForwardListState v41 = 0;
      if (v33) {
        (*((void (**)(WTF::StringImpl **))*v33 + 1))(v33);
      }
    }
    uint64_t result = v44;
    __int16 v44 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v32);
      uint64_t result = (IPC::Encoder *)WTF::fastFree(v34, v35);
      if (!v22) {
        return result;
      }
    }
    else if (!v22)
    {
      return result;
    }
    if (*(_DWORD *)v22 == 2) {
      return (IPC::Encoder *)WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v32);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::findString(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, int a4)
{
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9DA860;
  int v11 = v8;
  WebKit::WebPageProxy::findString(a1, a2, (const WTF::StringImpl *)a3, a4, (uint64_t *)&v11);
  uint64_t result = (uint64_t)v11;
  if (v11)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*v11 + 8);
    return v10();
  }
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::countStringMatches(IPC::Encoder *result, WTF::StringImpl **a2, __int16 a3, int a4)
{
  __int16 v21 = a3;
  int v20 = a4;
  if (!*((unsigned char *)result + 801))
  {
    BOOL v4 = result;
    if (*((unsigned char *)result + 800))
    {
      v19[0] = a2;
      v19[1] = &v21;
      void v19[2] = &v20;
      CFRetain(*((CFTypeRef *)result + 1));
      __int16 v6 = *a2;
      if (v6) {
        *(_DWORD *)v6 += 2;
      }
      uint64_t v7 = *((void *)v4 + 32);
      uint64_t v8 = *(void *)(*((void *)v4 + 4) + 1928);
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 2181;
      *((void *)v9 + 1) = v8;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 70) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      uint64_t v24 = v9;
      IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v9, (uint64_t)v19);
      if (v6) {
        *(_DWORD *)v6 += 2;
      }
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
      uint64_t v12 = v10;
      void *v10 = &unk_1EE9DA928;
      v10[1] = v4;
      void v10[2] = v4;
      if (v6)
      {
        int v13 = *(_DWORD *)v6;
        *(_DWORD *)v6 += 2;
        _OWORD v10[3] = v6;
        if (v13) {
          *(_DWORD *)__int16 v6 = v13;
        }
        else {
          WTF::StringImpl::destroy(v6, v11);
        }
      }
      else
      {
        _OWORD v10[3] = 0;
      }
      uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v22[0] = v12;
      v22[1] = v14;
      char v23 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v24, 0, (uint64_t)v22, 1);
      if (v23)
      {
        uint64_t v16 = v22[0];
        v22[0] = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
      uint64_t result = v24;
      uint64_t v24 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v15);
        uint64_t result = (IPC::Encoder *)WTF::fastFree(v17, v18);
        if (!v6) {
          return result;
        }
      }
      else if (!v6)
      {
        return result;
      }
      if (*(_DWORD *)v6 == 2) {
        return (IPC::Encoder *)WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v15);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WebKit::WebPageProxy::launchInitialProcessIfNecessary((WebKit::WebProcessProxy **)a1);
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    unint64_t v36 = 0;
    int v39 = 0;
    uint64_t v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WebKit::ProcessThrottlerActivity **))(*(void *)v10 + 16))(v10, &v36);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
    if (v39 != -1) {
      return ((uint64_t (*)(uint64_t *, WebKit::ProcessThrottlerActivity **))off_1EE9D9D48[v39])(v33, &v36);
    }
    return result;
  }
  uint64_t v34 = 0;
  int v35 = 0;
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 1592))(v13);
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 88))(v13);
  (*(void (**)(uint64_t))(*(void *)v13 + 1600))(v13);
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 256) + 200;
    uint64_t v16 = WTF::fastMalloc((WTF *)0x28);
    unint64_t v36 = (WebKit::ProcessThrottlerActivity *)WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v16, v15, "WebPageProxy::runJavaScriptInFrameInScriptWorld", 48, 1, 0);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__assign_alt[abi:sn180100]<1ul,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>((WebKit::ProcessThrottlerActivity *)&v34, &v34, &v36);
    uint64_t v18 = v36;
    unint64_t v36 = 0;
    if (v18)
    {
      WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(v18, v17);
      WTF::fastFree(v19, v20);
    }
  }
  LOBYTE(v36) = 0;
  int v37 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v36, (uint64_t)&v34);
  uint64_t v21 = *a5;
  *a5 = 0;
  uint64_t v38 = v21;
  uint64_t v22 = *(void *)a3;
  uint64_t v23 = *(void *)(a3 + 8);
  int v24 = *(unsigned __int8 *)(a3 + 16);
  uint64_t v25 = *(WTF::StringImpl **)(a4 + 32);
  uint64_t v31 = *(void *)(a4 + 24);
  if (v25) {
    *(_DWORD *)v25 += 2;
  }
  uint64_t v32 = v25;
  v33[0] = a2;
  v33[1] = a3;
  v33[2] = (uint64_t)&v31;
  if (!v24) {
    goto LABEL_18;
  }
  uint64_t v26 = WebKit::WebFrameProxy::webFrame(v22, v23);
  if (!v26) {
    goto LABEL_18;
  }
  uint64_t v27 = v26;
  CFRetain(*(CFTypeRef *)(v26 + 8));
  uint64_t v28 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v27 + 32) + 16));
  if (!v28)
  {
    CFRelease(*(CFTypeRef *)(v27 + 8));
LABEL_18:
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,API::ContentWorld &,WebCore::ProcessQualified::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ProcessQualified::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WebCore::ProcessQualified::RawPtrTraits<WebCore::ProcessQualified::RefPtr>,WebCore::ProcessQualified::DefaultRefDerefTraits<WebCore::ProcessQualified::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0,unsigned long long>(*(void *)(a1 + 256), v33, (uint64_t)&v36, *(void *)(*(void *)(a1 + 32) + 1928));
    goto LABEL_19;
  }
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,API::ContentWorld &,WebCore::ProcessQualified::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ProcessQualified::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WebCore::ProcessQualified::RawPtrTraits<WebCore::ProcessQualified::RefPtr>,WebCore::ProcessQualified::DefaultRefDerefTraits<WebCore::ProcessQualified::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0,unsigned long long>(*(void *)(v28 + 24), v33, (uint64_t)&v36, *(void *)(v28 + 16));
  CFRelease(*(CFTypeRef *)(v27 + 8));
LABEL_19:
  int v30 = v32;
  uint64_t v32 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v29);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  uint64_t result = v38;
  uint64_t v38 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v37 != -1) {
    uint64_t result = ((uint64_t (*)(uint64_t *, WebKit::ProcessThrottlerActivity **))off_1EE9D9C18[v37])(v33, &v36);
  }
  if (v35 != -1) {
    return ((uint64_t (*)(WebKit::ProcessThrottlerActivity **, WebKit::ProcessThrottlerActivity **))off_1EE9D9C18[v35])(&v36, &v34);
  }
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::getContentsAsAttributedString(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v17);
    uint64_t v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v3 + 16))(v3, v17);
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    return (IPC::Encoder *)MEMORY[0x199732DE0](v17);
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = *(void *)(a1 + 256) + 200;
    uint64_t v8 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v8, v7, "getContentsAsAttributedString", 30, 1, 0);
    uint64_t v9 = *(void *)(a1 + 256);
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 1928);
    int v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v11 = 2259;
    *((void *)v11 + 1) = v10;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    char v19 = v11;
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v12 = &unk_1EE9DA9F0;
    v12[1] = v6;
    void v12[2] = v8;
    v17[0] = v12;
    v17[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    char v18 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v19, 0, (uint64_t)v17, 1);
    if (v18)
    {
      uint64_t v14 = v17[0];
      v17[0] = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t result = v19;
    char v19 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  return result;
}

void WebKit::WebPageProxy::getAllFrames(uint64_t a1, uint64_t *a2)
{
  v20[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 328);
  if (v3)
  {
    CFRetain(*(CFTypeRef *)(v3 + 8));
    WebKit::WebFrameProxy::getFrameInfo((uint64_t *)v3, a2);
    BOOL v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
  else
  {
    __int16 v11 = 0;
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v12);
    char v17 = 0;
    int v18 = 0;
    __int16 v19 = 0;
    v20[0] = 0;
    v20[1] = 0;
    long long v15 = 0u;
    memset(v16, 0, 25);
    long long v14 = 0u;
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, __int16 *))(*(void *)v5 + 16))(v5, &v11);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v6);
    uint64_t v8 = (WTF::StringImpl *)v16[0];
    v16[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    if (DWORD2(v15) != -1) {
      ((void (*)(char *, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[DWORD2(v15)])(&v10, &v14);
    }
    DWORD2(v15) = -1;
    uint64_t v9 = v13;
    uint64_t v13 = 0;
    if (v9) {
      CFRelease(v9);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v12);
  }
}

WTF **WebKit::WebPageProxy::getAllFrameTrees(void *a1, uint64_t *a2)
{
  if (a1[41])
  {
    BOOL v4 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)BOOL v4 = 1;
    uint64_t v5 = *a2;
    *a2 = 0;
    *((void *)v4 + 2) = 0;
    *((void *)v4 + 3) = 0;
    *((void *)v4 + 1) = v5;
    v12[0] = v4;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v6 = &unk_1EE9DAA18;
    v6[1] = v12;
    __int16 v11 = v6;
    WebKit::WebPageProxy::forEachWebContentProcess(a1, &v11);
    uint64_t v7 = v11;
    __int16 v11 = 0;
    if (v7) {
      (*(void (**)(void *))(*v7 + 8))(v7);
    }
    return WTF::Ref<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::FrameTreeCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(v12);
  }
  else
  {
    v12[0] = 0;
    v12[1] = 0;
    uint64_t v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v9 + 16))(v9, v12);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    return (WTF **)WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v10);
  }
}

WTF **WTF::Ref<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::FrameTreeCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(WTF **a1)
{
  double v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      uint64_t v3 = *((void *)v2 + 1);
      *((void *)v2 + 1) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 16))(v3, (void *)v2 + 2);
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 16, v4);
      uint64_t v6 = *((void *)v2 + 1);
      *((void *)v2 + 1) = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      WTF::fastFree(v2, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return a1;
}

void *WebKit::toAPIDataCallbackT<std::optional<IPC::SharedBufferReference> const&>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t result = &unk_1EE9DAAB8;
  result[1] = v3;
  *a2 = result;
  return result;
}

uint64_t WebKit::WebPageProxy::getSelectionAsWebArchiveData(uint64_t a1, uint64_t *a2)
{
  char v5 = 0;
  WebKit::toAPIDataCallback(a2, &v4);
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(*(void *)(a1 + 256), (uint64_t)&v5, &v4, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::saveResources(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4, WTF::StringImpl **a5, uint64_t *a6)
{
  if (!a2)
  {
    uint64_t v13 = *a6;
    *a6 = 0;
    __int16 v14 = 259;
LABEL_9:
    LOWORD(v34[0]) = v14;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v13 + 16))(v13, v34);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v8 = *a4;
  if (!*a4 || !v8[1])
  {
    uint64_t v13 = *a6;
    *a6 = 0;
    __int16 v14 = 258;
    goto LABEL_9;
  }
  uint64_t v12 = *a5;
  if (*a5 && (*(_DWORD *)v12 += 2, CFTypeRef v33 = v12, *((_DWORD *)v12 + 1)))
  {
    *(_OWORD *)uint64_t v32 = *(_OWORD *)(a2 + 272);
  }
  else
  {
    WTF::URL::host((WTF::URL *)(a2 + 48));
    if (v16)
    {
      if ((v16 & 0xFF00000000) != 0) {
        WTF::String::String();
      }
      else {
        WTF::String::String();
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    CFTypeRef v33 = v34[0];
    v34[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v17);
        v34[0] = 0;
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v8 = *a4;
    *(_OWORD *)uint64_t v32 = *(_OWORD *)(a2 + 272);
    if (!v8) {
      goto LABEL_20;
    }
  }
  *v8 += 2;
LABEL_20:
  uint64_t v18 = *a6;
  *a6 = 0;
  uint64_t v19 = *(void *)(a1 + 256);
  uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 1928);
  uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v21 = 2281;
  *((void *)v21 + 1) = v20;
  *((void *)v21 + 66) = (char *)v21 + 16;
  *((void *)v21 + 67) = 512;
  *((void *)v21 + 68) = 0;
  *((void *)v21 + 70) = 0;
  *((void *)v21 + 69) = 0;
  IPC::Encoder::encodeHeader(v21);
  unint64_t v36 = v21;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v21, v32);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v21, *(unsigned int *)(a3 + 12));
  unsigned int v22 = *(_DWORD *)(a3 + 12);
  if (v22)
  {
    uint64_t v23 = *(uint64_t **)a3;
    int v24 = &v23[3 * v22];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, v23);
      IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v21, (uint64_t)(v23 + 1));
      v23 += 3;
    }
    while (v23 != v24);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, (uint64_t *)&v33);
  uint64_t v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v25 = &unk_1EE9DAB58;
  *((void *)v25 + 1) = v8;
  *((void *)v25 + 2) = v18;
  uint64_t v26 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v34[0] = v25;
  v34[1] = v26;
  char v35 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v19, &v36, 0, (uint64_t)v34, 1);
  if (v35)
  {
    uint64_t v28 = v34[0];
    v34[0] = 0;
    if (v28) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v28 + 8))(v28);
    }
  }
  uint64_t v29 = v36;
  unint64_t v36 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, v27);
    WTF::fastFree(v30, v31);
  }
  uint64_t result = v33;
  CFTypeRef v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::getMainResourceDataOfFrame(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2)
  {
    long long v8 = *(_OWORD *)(a2 + 272);
    uint64_t v9 = &v8;
    WebKit::toAPIDataCallback(a3, &v7);
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetMainResourceDataOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(*(void *)(a1 + 256), (uint64_t **)&v9, &v7, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::getResourceDataFromFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  long long v7 = *(_OWORD *)(a2 + 272);
  v8[0] = (uint64_t *)&v7;
  v8[1] = (uint64_t *)(a3 + 16);
  WebKit::toAPIDataCallback(a4, &v6);
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetResourceDataFromFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(*(void *)(a1 + 256), v8, &v6, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::getWebArchiveOfFrame(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebPageProxy::launchInitialProcessIfNecessary((WebKit::WebProcessProxy **)a1);
  if (a2)
  {
    long long v9 = *(_OWORD *)(a2 + 272);
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    LOBYTE(v9) = 0;
  }
  char v10 = v6;
  __int16 v11 = &v9;
  WebKit::toAPIDataCallback(a3, &v8);
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetWebArchiveOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(*(void *)(a1 + 256), (uint64_t *)&v11, &v8, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

unsigned int *WebKit::WebPageProxy::updateRenderingWithForcedRepaint(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return (unsigned int *)v4(v3);
  }
  else
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
    long long v7 = *(atomic_uint **)(a1 + 24);
    if (v7) {
      atomic_fetch_add(v7, 1u);
    }
    uint64_t v8 = *a2;
    *a2 = 0;
    long long v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *long long v9 = &unk_1EE9DAC58;
    v9[1] = v7;
    uint64_t v9[2] = v8;
    uint64_t v10 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v10 = 1;
    *(void *)(v10 + 8) = v9;
    __int16 v14 = (unsigned int *)v10;
    __int16 v11 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v11 = &unk_1EE9DAC80;
    v11[1] = &v14;
    uint64_t v13 = v11;
    WebKit::WebPageProxy::forEachWebContentProcess((void *)a1, &v13);
    uint64_t v12 = v13;
    uint64_t v13 = 0;
    if (v12) {
      (*(void (**)(void *))(*v12 + 8))(v12);
    }
    uint64_t result = v14;
    __int16 v14 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(result);
    }
  }
  return result;
}

void WebKit::WebPageProxy::didCreateSubframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WTF::StringImpl **a7)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v11)
  {
    uint64_t v12 = v11;
    CFRetain(*(CFTypeRef *)(v11 + 8));
    WebKit::WebFrameProxy::didCreateSubframe(v12, a5, a6, a7);
    uint64_t v13 = *(const void **)(v12 + 8);
    CFRelease(v13);
  }
  else
  {
    __int16 v14 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v15 = 136446210;
      uint64_t v16 = "void WebKit::WebPageProxy::didCreateSubframe(IPC::Connection &, FrameIdentifier, FrameIdentifier, const String &)";
      _os_log_fault_impl(&dword_1985F2000, v14, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6051: Invalid message dispatched %{public}s", (uint8_t *)&v15, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::didDestroyFrame(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v21 = a3;
  *((void *)&v21 + 1) = a4;
  uint64_t v8 = a1[39];
  CFRetain(*(CFTypeRef *)(v8 + 8));
  long long v9 = *(WebKit::AuthenticatorManager **)(v8 + 352);
  uint64_t v20 = *(void *)(a1[4] + 1928);
  long long v18 = v21;
  char v19 = 1;
  WebKit::AuthenticatorManager::cancelRequest(v9, (uint64_t)&v20, (uint64_t)&v18);
  CFRelease(*(CFTypeRef *)(v8 + 8));
  uint64_t v10 = *(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(a1[6] + 24))
                  + 320);
  if (v10)
  {
    CFRetain(*(CFTypeRef *)(v10 + 8));
    WebKit::WebAutomationSession::didDestroyFrame(v10, a3, a4);
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  uint64_t v11 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v11)
  {
    uint64_t v12 = (CFTypeRef *)v11;
    CFRetain(*(CFTypeRef *)(v11 + 8));
    WebKit::WebFrameProxy::disconnect((WebKit::WebFrameProxy *)v12);
    CFRelease(v12[1]);
  }
  uint64_t v13 = (void *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1 + 24, &v21);
  uint64_t v14 = a1[24];
  if (v14)
  {
    int v15 = (void *)(v14 + 16 * *(unsigned int *)(v14 - 4));
    if (v15 == v13) {
      goto LABEL_15;
    }
  }
  else
  {
    if (!v13) {
      goto LABEL_15;
    }
    int v15 = 0;
  }
  if (v15 != v13)
  {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(a1 + 24, v13);
    uint64_t v14 = a1[24];
  }
  if (!v14 || !*(_DWORD *)(v14 - 12)) {
    WebKit::WebPageProxy::generatePageLoadingTimingSoon((WebKit::WebPageProxy *)a1);
  }
LABEL_15:
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v16 = &unk_1EE9DAD48;
  v16[1] = a2;
  _DWORD v16[2] = &v21;
  *(void *)&long long v18 = v16;
  WebKit::WebPageProxy::forEachWebContentProcess(a1, &v18);
  uint64_t result = v18;
  *(void *)&long long v18 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::generatePageLoadingTimingSoon(WebKit::WebPageProxy *this)
{
  uint64_t result = WTF::RunLoop::TimerBase::stop((WebKit::WebPageProxy *)((char *)this + 200));
  uint64_t v3 = (double *)*((void *)this + 23);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 24);
    if ((!v4 || !*(_DWORD *)(v4 - 12)) && v3[1] != 0.0 && v3[2] != 0.0 && v3[3] != 0.0 && v3[4] != 0.0)
    {
      return WTF::RunLoop::TimerBase::start();
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didStartProgress(WebKit::WebPageProxy *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 1592))(v3);
  uint64_t v6 = *((void *)this + 4);
  uint64_t v7 = *(void *)(*(void *)(v6 + 992) + 8);
  if (v7)
  {
    uint64_t v8 = v7 - 16;
    CFRetain(*(CFTypeRef *)(v7 - 8));
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *((void *)this + 4);
  v13[0] = v8;
  v13[1] = v6 + 976;
  ++*(_DWORD *)(v6 + 1348);
  *(unsigned char *)(v6 + 1344) = 1;
  *(void *)(v9 + 1312) = 0x3FB999999999999ALL;
  WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(v9 + 976), v4, v5);
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v13, v10, v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 1600))(v3);
}

uint64_t WebKit::WebPageProxy::didChangeProgress(WebKit::WebPageProxy *this, double a2)
{
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
  uint64_t v8 = *((void *)this + 4);
  uint64_t v9 = *(void *)(*(void *)(v8 + 992) + 8);
  if (v9)
  {
    uint64_t v10 = v9 - 16;
    CFRetain(*(CFTypeRef *)(v9 - 8));
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *((void *)this + 4);
  v15[0] = v10;
  v15[1] = v8 + 976;
  ++*(_DWORD *)(v8 + 1348);
  *(unsigned char *)(v8 + 1344) = 1;
  *(double *)(v11 + 1312) = a2;
  WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(v11 + 976), v6, v7);
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v15, v12, v13);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 1600))(v5);
}

uint64_t WebKit::WebPageProxy::didFinishProgress(WebKit::WebPageProxy *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 1592))(v3);
  uint64_t v6 = *((void *)this + 4);
  uint64_t v7 = *(void *)(*(void *)(v6 + 992) + 8);
  if (v7)
  {
    uint64_t v8 = v7 - 16;
    CFRetain(*(CFTypeRef *)(v7 - 8));
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *((void *)this + 4);
  v13[0] = v8;
  v13[1] = v6 + 976;
  ++*(_DWORD *)(v6 + 1348);
  *(unsigned char *)(v6 + 1344) = 1;
  *(void *)(v9 + 1312) = 0x3FF0000000000000;
  WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(v9 + 976), v4, v5);
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v13, v10, v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 1600))(v3);
}

void WebKit::WebPageProxy::setNetworkRequestsInProgress(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  char v3 = a2;
  uint64_t v4 = *((void *)this + 4);
  uint64_t v5 = *(void *)(*(void *)(v4 + 992) + 8);
  if (v5)
  {
    uint64_t v7 = v5 - 16;
    CFRetain(*(CFTypeRef *)(v5 - 8));
    uint64_t v8 = *((void *)this + 4);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = *((void *)this + 4);
  }
  v9[0] = v7;
  v9[1] = v4 + 976;
  ++*(_DWORD *)(v4 + 1348);
  *(unsigned char *)(v4 + 1344) = 1;
  *(unsigned char *)(v8 + 1320) = v3;
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v9, a2, a3);
}

void *WebKit::WebPageProxy::endNetworkRequestsForPageLoadTiming(uint64_t *a1, uint64_t a2, uint64_t a3, double a4)
{
  v11[0] = a2;
  v11[1] = a3;
  uint64_t v6 = a1 + 24;
  uint64_t result = (void *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1 + 24, v11);
  uint64_t v8 = a1[24];
  if (v8)
  {
    uint64_t v9 = (void *)(v8 + 16 * *(unsigned int *)(v8 - 4));
    if (v9 == result) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_8;
    }
    uint64_t v9 = 0;
  }
  if (v9 != result) {
    uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(v6, result);
  }
LABEL_8:
  uint64_t v10 = a1[23];
  if (v10)
  {
    if (a4 > *(double *)(v10 + 32)) {
      *(double *)(v10 + 32) = a4;
    }
    if (!*v6 || !*(_DWORD *)(*v6 - 12)) {
      return (void *)WebKit::WebPageProxy::generatePageLoadingTimingSoon((WebKit::WebPageProxy *)a1);
    }
  }
  return result;
}

void WebKit::WebPageProxy::updateRemoteFrameSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v15[0] = a2;
  v15[1] = a3;
  uint64_t v14 = a4;
  uint64_t v8 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v8)
  {
    uint64_t v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    if (!*(unsigned char *)(v9 + 452)) {
      *(unsigned char *)(v9 + 452) = 1;
    }
    *(void *)(v9 + 444) = a4;
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  v13[0] = v15;
  v13[1] = &v14;
  uint64_t v10 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v10)
  {
    uint64_t v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    uint64_t v12 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v11 + 32) + 16));
    if (v12)
    {
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateFrameSize>(*(void *)(v12 + 24), (uint64_t)v13, *(void *)(v12 + 16), 0);
      CFRelease(*(CFTypeRef *)(v11 + 8));
      return;
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateFrameSize>(*(void *)(a1 + 256), (uint64_t)v13, *(void *)(*(void *)(a1 + 32) + 1928), 0);
}

uint64_t WebKit::WebPageProxy::preconnectTo(uint64_t result, WebCore::ResourceRequestBase *this)
{
  if (*(unsigned char *)(*(void *)(*(void *)(result + 312) + 208) + 416))
  {
    uint64_t v3 = result;
    char v4 = *(unsigned char *)(result + 1336);
    WebCore::ResourceRequestBase::setIsAppInitiated(this);
    WebCore::ResourceRequestBase::httpUserAgent((uint64_t *)&v12, this);
    uint64_t v6 = v12;
    if (v12)
    {
      int v7 = *((_DWORD *)v12 + 1);
      uint64_t v12 = 0;
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v5);
        if (v7) {
          goto LABEL_15;
        }
      }
      else
      {
        *(_DWORD *)v6 -= 2;
        if (v7) {
          goto LABEL_15;
        }
      }
    }
    WebKit::WebPageProxy::predictedUserAgentForRequest(v3, this, &v12);
    uint64_t v9 = v12;
    if (v12)
    {
      if (*((_DWORD *)v12 + 1))
      {
        WebCore::ResourceRequestBase::setHTTPUserAgent(this, (const WTF::String *)&v12);
        uint64_t v9 = v12;
        uint64_t v12 = 0;
        if (!v9) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
LABEL_15:
    uint64_t v10 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
    WebCore::ResourceRequestBase::setFirstPartyForCookies(this, v10);
    WebCore::ResourceRequestBase::setPriority();
    uint64_t v11 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(v3 + 312));
    return WebKit::NetworkProcessProxy::preconnectTo(v11, *(void *)(*(void *)(v3 + 312) + 24), *(void *)(*(void *)(v3 + 32) + 760), *(void *)(*(void *)(v3 + 32) + 1928), this, v4, *(_WORD *)(v3 + 1328));
  }
  return result;
}

void WebKit::WebPageProxy::didDestroyNavigation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
  uint64_t v3 = v2;
  WebKit::WebPageProxy::didDestroyNavigationShared(a1, (uint64_t)&v3, a2);
  if (v2)
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  }
}

void WebKit::WebPageProxy::didDestroyNavigationShared(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a3 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v9 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v11 = 136446210;
      uint64_t v12 = "void WebKit::WebPageProxy::didDestroyNavigationShared(Ref<WebProcessProxy> &&, WebCore::NavigationIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v9, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6207: Invalid message dispatched %{public}s", (uint8_t *)&v11, 0xCu);
    }
    uint64_t v10 = *(void *)(*(void *)a2 + 144);
    if (v10) {
      *(unsigned char *)(v10 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      uint64_t v7 = *(void *)(v6 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
    WebKit::WebNavigationState::didDestroyNavigation(*(void *)(a1 + 160), *(void *)(*(void *)a2 + 176), a3);
    uint64_t v8 = *(void (**)(uint64_t))(*(void *)v7 + 1600);
    v8(v7);
  }
}

unsigned int *WebKit::WebPageProxy::didStartProvisionalLoadForFrame(void *a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6, char a7, const WTF::URL *a8, double a9, WTF::URL *a10, CFTypeRef **a11)
{
  int v11 = (atomic_uint *)a1[32];
  atomic_fetch_add(v11 + 4, 1u);
  uint64_t v13 = v11;
  uint64_t result = (unsigned int *)WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(a1, (WebKit::WebProcessProxy **)&v13, a2, a3, a4, a5, a6, a7, a9, a8, a10, a11);
  if (v11)
  {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v11 + 4);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(void *a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7, char a8, double a9, const WTF::URL *a10, WTF::URL *a11, CFTypeRef **a12)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a1[5];
  if (v21) {
    uint64_t v22 = *(void *)(v21 + 8);
  }
  else {
    uint64_t v22 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v22 + 1592))(v22);
  uint64_t v23 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v23)
  {
    uint64_t v24 = v23;
    CFRetain(*(CFTypeRef *)(v23 + 8));
    if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *a2, a10))
    {
      if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *a2, a11))
      {
        if (*(unsigned char *)(v24 + 441))
        {
          uint64_t v27 = WTF::fastMalloc((WTF *)0x28);
          *(double *)uint64_t v27 = a9;
          *(_OWORD *)(v27 + 8) = 0u;
          *(_OWORD *)(v27 + 24) = 0u;
          uint64_t v28 = (WTF *)a1[23];
          a1[23] = v27;
          if (v28) {
            WTF::fastFree(v28, v26);
          }
          WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(a1 + 25));
        }
        uint64_t v29 = a1[34];
        {
          WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v29 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v25))
        {
          if (*(void *)(WebKit::WebFrameProxy::provisionalLoadProcess((WebKit::WebFrameProxy *)v24) + 176) != *((void *)*a2 + 22))
          {
LABEL_75:
            CFRelease(*(CFTypeRef *)(v24 + 8));
            return (*(uint64_t (**)(uint64_t))(*(void *)v22 + 1600))(v22);
          }
          if (!*(_DWORD *)(v24 + 40)) {
            WebKit::FrameLoadState::didFailProvisionalLoad((WebKit::FrameLoadState *)(v24 + 40));
          }
        }
        uint64_t v82 = a3;
        if (*(unsigned char *)(v24 + 441))
        {
          int v30 = (WTF::StringImpl *)a1[149];
          if (v30)
          {
            if (v24 != *((void *)v30 + 9))
            {
              WebKit::ProvisionalPageProxy::cancel(v30);
              uint64_t v31 = a1[149];
              a1[149] = 0;
              if (v31) {
                (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
              }
            }
          }
        }
        uint64_t v32 = 0;
        if (!*(unsigned char *)(v24 + 441)
          || !a8
          || (v33 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1[20] + 8), a7), (uint64_t v32 = v33) == 0)|| (CFRetain(*(CFTypeRef *)(v33 + 8)), !*(unsigned char *)(v24 + 441))|| (*(unsigned char *)(WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v32 + 232)) + 8) & 1) == 0|| (v34 = (WTF **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v32 + 232)), (WTF::equal(*v34, *(const WTF::StringImpl **)a10, v35) & 1) != 0))
        {
          unint64_t v36 = qword_1EB358050;
          if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v38 = a1[4];
            uint64_t v39 = *(void *)(v38 + 760);
            uint64_t v40 = *(void *)(v38 + 1928);
            uint64_t v41 = *(void *)(a1[32] + 136);
            if (v41) {
              LODWORD(v41) = *(_DWORD *)(v41 + 108);
            }
            int v42 = *(unsigned __int8 *)(v24 + 441);
            *(_DWORD *)long long buf = 134219264;
            *(void *)&uint8_t buf[4] = a1;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v39;
            __int16 v85 = 2048;
            uint64_t v86 = v40;
            __int16 v87 = 1024;
            int v88 = v41;
            __int16 v89 = 2048;
            uint64_t v90 = v82;
            LOWORD(v91) = 1024;
            *(_DWORD *)((char *)&v91 + 2) = v42;
            _os_log_impl(&dword_1985F2000, v36, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didStartProvisionalLoadForFrame: frameID=%llu, isMainFrame=%d", buf, 0x36u);
          }
          uint64_t v43 = a1[4];
          uint64_t v44 = *(void *)(*(void *)(v43 + 992) + 8);
          if (v44)
          {
            uint64_t v45 = v44 - 16;
            CFRetain(*(CFTypeRef *)(v44 - 8));
          }
          else
          {
            uint64_t v45 = 0;
          }
          uint64_t v46 = a1[4];
          v83[0] = v45;
          v83[1] = v43 + 976;
          ++*(_DWORD *)(v43 + 1348);
          *(unsigned char *)(v43 + 1344) = 1;
          *(void *)(v46 + 1176) = 0;
          int v47 = *(WTF::StringImpl **)(v46 + 1184);
          *(void *)(v46 + 1184) = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2) {
              int v47 = (WTF::StringImpl *)WTF::StringImpl::destroy(v47, v37);
            }
            else {
              *(_DWORD *)v47 -= 2;
            }
          }
          if (*(unsigned char *)(v24 + 441))
          {
            if ((int)WTF::numberOfProcessorCores(v47) >= 5) {
              WebKit::WebPageProxy::notifyProcessPoolToPrewarm(*(WebKit::WebPageProxy **)(a1[32] + 512));
            }
            WebKit::WebProcessProxy::didStartProvisionalLoadForMainFrame(*a2, a10);
            *(void *)long long buf = 0;
            *(void *)&buf[8] = 0;
            WTF::URL::invalidate((WTF::URL *)&buf[8]);
            char v91 = 0;
            int v92 = 0;
            __int16 v93 = 3;
            CFTypeRef cf = 0;
            char v95 = 1;
            WebKit::WebPageProxy::reportPageLoadResult((WTF::MonotonicTime *)a1, (const WebCore::ResourceError *)buf);
            CFTypeRef v49 = cf;
            CFTypeRef cf = 0;
            if (v49) {
              CFRelease(v49);
            }
            uint64_t v50 = v91;
            char v91 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2) {
                WTF::StringImpl::destroy(v50, v48);
              }
              else {
                *(_DWORD *)v50 -= 2;
              }
            }
            uint64_t v51 = *(WTF::StringImpl **)&buf[8];
            *(void *)&buf[8] = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2) {
                WTF::StringImpl::destroy(v51, v48);
              }
              else {
                *(_DWORD *)v51 -= 2;
              }
            }
            uint64_t v52 = *(WTF::StringImpl **)buf;
            *(void *)long long buf = 0;
            if (v52)
            {
              if (*(_DWORD *)v52 == 2) {
                uint64_t v52 = (WTF::StringImpl *)WTF::StringImpl::destroy(v52, v48);
              }
              else {
                *(_DWORD *)v52 -= 2;
              }
            }
            WTF::MonotonicTime::now(v52);
            uint64_t v54 = a1[4];
            if (!*(unsigned char *)(v54 + 968)) {
              *(unsigned char *)(v54 + 968) = 1;
            }
            *(void *)(v54 + 960) = v53;
            uint64_t v55 = a1[4] + 976;
            *(unsigned char *)(v43 + 1344) = 1;
            WebKit::PageLoadState::didStartProvisionalLoad(v55, (uint64_t)buf, (WTF::StringImpl **)a10, (WTF::StringImpl **)a11);
            (*(void (**)(uint64_t))(*(void *)v22 + 192))(v22);
            WebKit::WebPageProxy::closeOverlayedViews((WebKit::WebPageProxy *)a1);
          }
          WTF::String::operator=((uint64_t *)(v24 + 168), (WTF::StringImpl **)(v24 + 128));
          long long v56 = *(_OWORD *)(v24 + 152);
          *(_OWORD *)(v24 + 176) = *(_OWORD *)(v24 + 136);
          *(_OWORD *)(v24 + 192) = v56;
          WTF::String::operator=((uint64_t *)(v24 + 128), (WTF::StringImpl **)a11);
          long long v57 = *(_OWORD *)((char *)a11 + 24);
          *(_OWORD *)(v24 + 136) = *(_OWORD *)((char *)a11 + 8);
          *(_OWORD *)(v24 + 152) = v57;
          WebKit::FrameLoadState::didStartProvisionalLoad((WebKit::FrameLoadState *)(v24 + 40), a10);
          WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(a1[4] + 976), v58, v59);
          uint64_t v60 = a1[7];
          if (v60)
          {
            uint64_t v61 = *a2;
            uint64_t v62 = *a12;
            if (*a12) {
              CFRetain(v62[1]);
            }
            WebKit::WebProcessProxy::transformHandlesToObjects(v61, (API::Object *)v62, (uint64_t *)buf);
            (*(void (**)(uint64_t, void *, uint64_t, uint64_t, void))(*(void *)v60 + 16))(v60, a1, v24, v32, *(void *)buf);
            uint64_t v63 = *(void *)buf;
            *(void *)long long buf = 0;
            uint64_t v64 = a4;
            if (v63) {
              CFRelease(*(CFTypeRef *)(v63 + 8));
            }
            if (v62) {
              CFRelease(v62[1]);
            }
          }
          else
          {
            if (*a5)
            {
              uint64_t v65 = a1[9];
              uint64_t v66 = *a2;
              uint64_t v67 = *a12;
              if (*a12) {
                CFRetain(v67[1]);
              }
              WebKit::WebProcessProxy::transformHandlesToObjects(v66, (API::Object *)v67, (uint64_t *)buf);
              (*(void (**)(uint64_t, void *, uint64_t, uint64_t, void))(*(void *)v65 + 16))(v65, a1, a6, v32, *(void *)buf);
              uint64_t v68 = *(void *)buf;
              *(void *)long long buf = 0;
              if (v68) {
                CFRelease(*(CFTypeRef *)(v68 + 8));
              }
              if (v67) {
                CFRelease(v67[1]);
              }
            }
            (*(void (**)(void, void *, uint64_t, unsigned char *))(*(void *)a1[9] + 24))(a1[9], a1, a6, a5);
            uint64_t v64 = a4;
          }
          uint64_t v69 = a1[39];
          CFRetain(*(CFTypeRef *)(v69 + 8));
          uint64_t v70 = *(WebKit::AuthenticatorManager **)(v69 + 352);
          uint64_t v71 = a1[4] + 1928;
          *(void *)long long buf = v82;
          *(void *)&buf[8] = v64;
          uint8_t buf[16] = 1;
          WebKit::AuthenticatorManager::cancelRequest(v70, v71, (uint64_t)buf);
          CFRelease(*(CFTypeRef *)(v69 + 8));
          WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v83, v72, v73);
          if (!v32) {
            goto LABEL_75;
          }
          goto LABEL_74;
        }
        uint64_t v80 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(Ref<WebProcessProxy> &&,"
                               " FrameIdentifier, FrameInfoData &&, ResourceRequest &&, std::optional<WebCore::Navigation"
                               "Identifier>, URL &&, URL &&, const UserData &, WallTime)";
          _os_log_fault_impl(&dword_1985F2000, v80, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6269: Invalid message dispatched %{public}s", buf, 0xCu);
        }
        uint64_t v81 = *((void *)*a2 + 18);
        if (v81)
        {
          *(unsigned char *)(v81 + 98) = 1;
LABEL_74:
          CFRelease(*(CFTypeRef *)(v32 + 8));
          goto LABEL_75;
        }
LABEL_96:
        __break(0xC471u);
        JUMPOUT(0x198E71434);
      }
      uint64_t v79 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(Ref<WebProcessProxy> &&, F"
                             "rameIdentifier, FrameInfoData &&, ResourceRequest &&, std::optional<WebCore::NavigationIden"
                             "tifier>, URL &&, URL &&, const UserData &, WallTime)";
        _os_log_fault_impl(&dword_1985F2000, v79, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6237: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      uint64_t v78 = *((void *)*a2 + 18);
      if (!v78)
      {
        __break(0xC471u);
        JUMPOUT(0x198E71610);
      }
    }
    else
    {
      uint64_t v77 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(Ref<WebProcessProxy> &&, F"
                             "rameIdentifier, FrameInfoData &&, ResourceRequest &&, std::optional<WebCore::NavigationIden"
                             "tifier>, URL &&, URL &&, const UserData &, WallTime)";
        _os_log_fault_impl(&dword_1985F2000, v77, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6236: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      uint64_t v78 = *((void *)*a2 + 18);
      if (!v78) {
        goto LABEL_96;
      }
    }
    *(unsigned char *)(v78 + 98) = 1;
    goto LABEL_75;
  }
  BOOL v75 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(Ref<WebProcessProxy> &&, Frame"
                         "Identifier, FrameInfoData &&, ResourceRequest &&, std::optional<WebCore::NavigationIdentifier>,"
                         " URL &&, URL &&, const UserData &, WallTime)";
    _os_log_fault_impl(&dword_1985F2000, v75, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6235: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  uint64_t v76 = *((void *)*a2 + 18);
  if (!v76)
  {
    __break(0xC471u);
    JUMPOUT(0x198E715F0);
  }
  *(unsigned char *)(v76 + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v22 + 1600))(v22);
}

BOOL WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess(WebKit::WebPageProxy *this, WebKit::WebProcessProxy *a2, const WTF::URL *a3)
{
  if (!WTF::URL::protocolIs() || *((unsigned char *)this + 1189)) {
    return 1;
  }
  WTF::URL::fileSystemPath((uint64_t *)&v18, a3);
  uint64_t v8 = *((void *)this + 147);
  if (v8) {
    uint64_t v9 = (uint64_t *)(v8 + 8 * *(unsigned int *)(v8 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)this + 147);
  if (v9 == v10) {
    goto LABEL_23;
  }
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  while (1)
  {
    uint64_t v14 = *v12;
    if (*v12)
    {
      int v15 = *(WTF::StringImpl **)(v14 + 8);
      int v16 = *(_DWORD *)(v14 + 4);
    }
    else
    {
      int v15 = 0;
      int v16 = 0;
    }
    if (v18) {
      break;
    }
    if (!v16) {
      goto LABEL_21;
    }
LABEL_13:
    while (++v12 != v13)
    {
      if ((unint64_t)(*v12 + 1) > 1) {
        goto LABEL_17;
      }
    }
    uint64_t v12 = v13;
LABEL_17:
    if (v12 == v9) {
      goto LABEL_23;
    }
  }
  if ((WTF::StringImpl::startsWith() & 1) == 0) {
    goto LABEL_13;
  }
LABEL_21:
  if (v12 == v9) {
LABEL_23:
  }
    BOOL v6 = WebKit::WebProcessProxy::checkURLReceivedFromWebProcess((uint64_t)a2, a3, 1);
  else {
    BOOL v6 = 1;
  }
  uint64_t v17 = v18;
  long long v18 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v15);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  return v6;
}

void WebKit::WebPageProxy::didExplicitOpenForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, uint64_t *a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v10)
  {
    uint64_t v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    uint64_t v12 = *(void *)(a1 + 256);
    atomic_fetch_add((atomic_uint *volatile)(v12 + 16), 1u);
    if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, (WebKit::WebProcessProxy *)v12, (const WTF::URL *)a5))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(*(void *)(v13 + 992) + 8);
      if (v14)
      {
        uint64_t v15 = v14 - 16;
        CFRetain(*(CFTypeRef *)(v14 - 8));
      }
      else
      {
        uint64_t v15 = 0;
      }
      *(void *)long long buf = v15;
      *(void *)&buf[8] = v13 + 976;
      ++*(_DWORD *)(v13 + 1348);
      if (*(unsigned char *)(v11 + 441))
      {
        uint64_t v16 = *(void *)(a1 + 32) + 976;
        *(unsigned char *)(v13 + 1344) = 1;
        WebKit::PageLoadState::didExplicitOpen(v16, (uint64_t)&v27, a5);
      }
      WTF::String::operator=((uint64_t *)(v11 + 224), a6);
      WebKit::FrameLoadState::didExplicitOpen((WebKit::FrameLoadState *)(v11 + 40), (const WTF::URL *)a5);
      *(unsigned char *)(a1 + 1121) = 1;
      *(unsigned char *)(v12 + 776) = 1;
      if ((WTF::URL::protocolIs() & 1) == 0) {
        *(unsigned char *)(v12 + 777) = 1;
      }
      WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(void *)(a1 + 32) + 976), v17, v18);
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v19, v20);
    }
    else
    {
      uint64_t v21 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)(a1 + 32);
        uint64_t v23 = *(void *)(v22 + 760);
        uint64_t v24 = *(void *)(v22 + 1928);
        uint64_t v25 = *(void *)(*(void *)(a1 + 256) + 136);
        if (v25) {
          LODWORD(v25) = *(_DWORD *)(v25 + 108);
        }
        *(_DWORD *)long long buf = 134218752;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v23;
        __int16 v29 = 2048;
        uint64_t v30 = v24;
        __int16 v31 = 1024;
        int v32 = v25;
        _os_log_error_impl(&dword_1985F2000, v21, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::Ignoring WebPageProxy::DidExplicitOpenForFrame() IPC from the WebContent process because the file URL is outside the sandbox", buf, 0x26u);
      }
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  else
  {
    uint64_t v26 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didExplicitOpenForFrame(IPC::Connection &, FrameIdentifier, URL &&, String &&)";
      _os_log_fault_impl(&dword_1985F2000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6309: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

unsigned int *WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrame(WebKit::WebPageProxy *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, WebCore::ResourceRequestBase *a6, CFTypeRef **a7)
{
  uint64_t v7 = (atomic_uint *)*((void *)a1 + 32);
  atomic_fetch_add(v7 + 4, 1u);
  uint64_t v9 = v7;
  uint64_t result = (unsigned int *)WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared(a1, (WebKit::WebProcessProxy **)&v9, a2, a3, a4, a5, a6, a7);
  if (v7)
  {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v7 + 4);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared(WebKit::WebPageProxy *a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, WebCore::ResourceRequestBase *a7, CFTypeRef **a8)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = *((void *)a1 + 5);
  if (v16) {
    uint64_t v17 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v17 + 1592))(v17);
  uint64_t v18 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (!v18)
  {
    uint64_t v54 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared(Ref<WebPr"
                           "ocessProxy> &&, FrameIdentifier, std::optional<WebCore::NavigationIdentifier>, ResourceReques"
                           "t &&, const UserData &)";
      _os_log_fault_impl(&dword_1985F2000, v54, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6344: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    uint64_t v55 = *((void *)*a2 + 18);
    if (v55)
    {
      *(unsigned char *)(v55 + 98) = 1;
      return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 1600))(v17);
    }
    goto LABEL_50;
  }
  uint64_t v19 = v18;
  uint64_t v58 = a8;
  CFRetain(*(CFTypeRef *)(v18 + 8));
  uint64_t v20 = *a2;
  uint64_t v21 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a7);
  if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess(a1, v20, v21))
  {
    uint64_t v22 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *((void *)a1 + 4);
      uint64_t v24 = *(void *)(v23 + 760);
      uint64_t v25 = *(void *)(v23 + 1928);
      uint64_t v26 = *(void *)(*((void *)a1 + 32) + 136);
      if (v26) {
        LODWORD(v26) = *(_DWORD *)(v26 + 108);
      }
      int v27 = *(unsigned __int8 *)(v19 + 441);
      *(_DWORD *)long long buf = 134219264;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v24;
      __int16 v61 = 2048;
      uint64_t v62 = v25;
      __int16 v63 = 1024;
      int v64 = v26;
      __int16 v65 = 2048;
      uint64_t v66 = a3;
      __int16 v67 = 1024;
      int v68 = v27;
      _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrame: frameID=%llu, isMainFrame=%d", buf, 0x36u);
    }
    if (a6)
    {
      uint64_t v28 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(*((void *)a1 + 20) + 8), a5);
      __int16 v29 = (CFTypeRef *)v28;
      if (v28)
      {
        CFRetain(*(CFTypeRef *)(v28 + 8));
        uint64_t v30 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a7);
        API::Navigation::appendRedirectionURL((API::Navigation *)v29, v30, v31);
        char v32 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      __int16 v29 = 0;
    }
    char v32 = 1;
LABEL_15:
    uint64_t v33 = *((void *)a1 + 4);
    uint64_t v34 = *(void *)(*(void *)(v33 + 992) + 8);
    if (v34)
    {
      uint64_t v35 = v34 - 16;
      CFRetain(*(CFTypeRef *)(v34 - 8));
    }
    else
    {
      uint64_t v35 = 0;
    }
    *(void *)long long buf = v35;
    *(void *)&buf[8] = v33 + 976;
    ++*(_DWORD *)(v33 + 1348);
    if (*(unsigned char *)(v19 + 441))
    {
      uint64_t v36 = *((void *)a1 + 4);
      *(unsigned char *)(v33 + 1344) = 1;
      int v37 = (WTF::StringImpl **)WebCore::ResourceRequestBase::url(a7);
      WTF::String::operator=((uint64_t *)(v36 + 1192), v37);
      uint64_t v38 = *((void *)a1 + 41);
      if (v19 != v38)
      {
        uint64_t v39 = *(void *)(v38 + 88);
        if (v39)
        {
          if (*(_DWORD *)(v39 + 4))
          {
            uint64_t v40 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a7);
            WebKit::FrameLoadState::didReceiveServerRedirectForProvisionalLoad((WebKit::FrameLoadState *)(v38 + 40), v40);
          }
        }
      }
    }
    uint64_t v41 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a7);
    WebKit::FrameLoadState::didReceiveServerRedirectForProvisionalLoad((WebKit::FrameLoadState *)(v19 + 40), v41);
    WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*((void *)a1 + 4) + 976), v42, v43);
    uint64_t v46 = *((void *)a1 + 7);
    if (v46)
    {
      if (*(unsigned char *)(v19 + 441)) {
        int v47 = v29;
      }
      else {
        int v47 = 0;
      }
      CFTypeRef v48 = *a2;
      CFTypeRef v49 = *v58;
      if (*v58) {
        CFRetain(v49[1]);
      }
      WebKit::WebProcessProxy::transformHandlesToObjects(v48, (API::Object *)v49, &v59);
      (*(void (**)(uint64_t, WebKit::WebPageProxy *, uint64_t, CFTypeRef *, uint64_t))(*(void *)v46 + 24))(v46, a1, v19, v47, v59);
    }
    else
    {
      if (!*(unsigned char *)(v19 + 441))
      {
LABEL_37:
        WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v44, v45);
        if ((v32 & 1) == 0) {
          CFRelease(v29[1]);
        }
        goto LABEL_39;
      }
      uint64_t v50 = *((void *)a1 + 9);
      uint64_t v51 = *a2;
      CFTypeRef v49 = *v58;
      if (*v58) {
        CFRetain(v49[1]);
      }
      WebKit::WebProcessProxy::transformHandlesToObjects(v51, (API::Object *)v49, &v59);
      (*(void (**)(uint64_t, WebKit::WebPageProxy *, CFTypeRef *, uint64_t))(*(void *)v50 + 32))(v50, a1, v29, v59);
    }
    uint64_t v52 = v59;
    uint64_t v59 = 0;
    if (v52) {
      CFRelease(*(CFTypeRef *)(v52 + 8));
    }
    if (v49) {
      CFRelease(v49[1]);
    }
    goto LABEL_37;
  }
  long long v56 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared(Ref<WebProc"
                         "essProxy> &&, FrameIdentifier, std::optional<WebCore::NavigationIdentifier>, ResourceRequest &&"
                         ", const UserData &)";
    _os_log_fault_impl(&dword_1985F2000, v56, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6345: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  uint64_t v57 = *((void *)*a2 + 18);
  if (!v57)
  {
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x198E71F7CLL);
  }
  *(unsigned char *)(v57 + 98) = 1;
LABEL_39:
  CFRelease(*(CFTypeRef *)(v19 + 8));
  return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 1600))(v17);
}

uint64_t WebKit::WebPageProxy::willPerformClientRedirectForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 1592))(v13);
  uint64_t v14 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v14)
  {
    uint64_t v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    uint64_t v16 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      uint64_t v18 = *(void *)(v17 + 760);
      uint64_t v19 = *(void *)(v17 + 1928);
      uint64_t v20 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v20) {
        LODWORD(v20) = *(_DWORD *)(v20 + 108);
      }
      int v21 = *(unsigned __int8 *)(v15 + 441);
      int v24 = 134219264;
      uint64_t v25 = (const char *)a1;
      __int16 v26 = 2048;
      uint64_t v27 = v18;
      __int16 v28 = 2048;
      uint64_t v29 = v19;
      __int16 v30 = 1024;
      int v31 = v20;
      __int16 v32 = 2048;
      uint64_t v33 = a3;
      __int16 v34 = 1024;
      int v35 = v21;
      _os_log_impl(&dword_1985F2000, v16, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::willPerformClientRedirectForFrame: frameID=%llu, isMainFrame=%d", (uint8_t *)&v24, 0x36u);
    }
    if (*(unsigned char *)(v15 + 441)) {
      (*(void (**)(void, uint64_t, uint64_t, double))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72), a1, a5, a6);
    }
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  else
  {
    uint64_t v23 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v24 = 136446210;
      uint64_t v25 = "void WebKit::WebPageProxy::willPerformClientRedirectForFrame(IPC::Connection &, FrameIdentifier, const Strin"
            "g &, double, LockBackForwardList)";
      _os_log_fault_impl(&dword_1985F2000, v23, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6377: Invalid message dispatched %{public}s", (uint8_t *)&v24, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 1600))(v13);
}

uint64_t WebKit::WebPageProxy::didCancelClientRedirectForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 1592))(v9);
  uint64_t v10 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v10)
  {
    uint64_t v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    uint64_t v12 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(v13 + 760);
      uint64_t v15 = *(void *)(v13 + 1928);
      uint64_t v16 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v16) {
        LODWORD(v16) = *(_DWORD *)(v16 + 108);
      }
      int v17 = *(unsigned __int8 *)(v11 + 441);
      int v20 = 134219264;
      int v21 = (const char *)a1;
      __int16 v22 = 2048;
      uint64_t v23 = v14;
      __int16 v24 = 2048;
      uint64_t v25 = v15;
      __int16 v26 = 1024;
      int v27 = v16;
      __int16 v28 = 2048;
      uint64_t v29 = a3;
      __int16 v30 = 1024;
      int v31 = v17;
      _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didCancelClientRedirectForFrame: frameID=%llu, isMainFrame=%d", (uint8_t *)&v20, 0x36u);
    }
    if (*(unsigned char *)(v11 + 441)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72), a1);
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  else
  {
    uint64_t v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v20 = 136446210;
      int v21 = "void WebKit::WebPageProxy::didCancelClientRedirectForFrame(IPC::Connection &, FrameIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6390: Invalid message dispatched %{public}s", (uint8_t *)&v20, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 1600))(v9);
}

unsigned int *WebKit::WebPageProxy::didChangeProvisionalURLForFrame(WebKit::WebPageProxy *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::StringImpl **a6)
{
  BOOL v6 = (atomic_uint *)*((void *)a1 + 32);
  atomic_fetch_add(v6 + 4, 1u);
  uint64_t v8 = v6;
  uint64_t result = (unsigned int *)WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared(a1, (WebKit::WebProcessProxy **)&v8, a2, a3, a5, (uint64_t)a6, a6);
  if (v6)
  {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v6 + 4);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared(WebKit::WebPageProxy *a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WTF::StringImpl **a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *((void *)a1 + 5);
  if (v12) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 1592))(v13);
  uint64_t v14 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v14)
  {
    uint64_t v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    if (*(_DWORD *)(v15 + 40))
    {
      uint64_t v25 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        LODWORD(v28) = 136446210;
        *(void *)((char *)&v28 + 4) = "void WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared(Ref<WebProcessP"
                                        "roxy> &&, FrameIdentifier, std::optional<WebCore::NavigationIdentifier>, URL &&)";
        _os_log_fault_impl(&dword_1985F2000, v25, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6409: Invalid message dispatched %{public}s", (uint8_t *)&v28, 0xCu);
      }
      uint64_t v26 = *((void *)*a2 + 18);
      if (v26) {
        goto LABEL_25;
      }
    }
    else
    {
      if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess(a1, *a2, (const WTF::URL *)a7))
      {
        uint64_t v16 = *((void *)a1 + 4);
        uint64_t v17 = *(void *)(*(void *)(v16 + 992) + 8);
        if (v17)
        {
          uint64_t v18 = v17 - 16;
          CFRetain(*(CFTypeRef *)(v17 - 8));
        }
        else
        {
          uint64_t v18 = 0;
        }
        *(void *)&long long v28 = v18;
        *((void *)&v28 + 1) = v16 + 976;
        ++*(_DWORD *)(v16 + 1348);
        if (*(unsigned char *)(v15 + 441))
        {
          uint64_t v19 = *((void *)a1 + 4);
          *(unsigned char *)(v16 + 1344) = 1;
          WTF::String::operator=((uint64_t *)(v19 + 1192), a7);
        }
        WebKit::FrameLoadState::didReceiveServerRedirectForProvisionalLoad((WebKit::FrameLoadState *)(v15 + 40), (const WTF::URL *)a7);
        WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v28, v20, v21);
        goto LABEL_12;
      }
      int v27 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        LODWORD(v28) = 136446210;
        *(void *)((char *)&v28 + 4) = "void WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared(Ref<WebProcessP"
                                        "roxy> &&, FrameIdentifier, std::optional<WebCore::NavigationIdentifier>, URL &&)";
        _os_log_fault_impl(&dword_1985F2000, v27, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6410: Invalid message dispatched %{public}s", (uint8_t *)&v28, 0xCu);
      }
      uint64_t v26 = *((void *)*a2 + 18);
      if (v26)
      {
LABEL_25:
        *(unsigned char *)(v26 + 98) = 1;
LABEL_12:
        CFRelease(*(CFTypeRef *)(v15 + 8));
        return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 1600))(v13);
      }
    }
    __break(0xC471u);
    JUMPOUT(0x198E726A8);
  }
  uint64_t v23 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    LODWORD(v28) = 136446210;
    *(void *)((char *)&v28 + 4) = "void WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared(Ref<WebProcessProxy"
                                    "> &&, FrameIdentifier, std::optional<WebCore::NavigationIdentifier>, URL &&)";
    _os_log_fault_impl(&dword_1985F2000, v23, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6408: Invalid message dispatched %{public}s", (uint8_t *)&v28, 0xCu);
  }
  uint64_t v24 = *((void *)*a2 + 18);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x198E727C4);
  }
  *(unsigned char *)(v24 + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 1600))(v13);
}

void WebKit::WebPageProxy::didFailProvisionalLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, WTF::StringImpl **a7, uint64_t a8, char a9, uint64_t *a10, unsigned __int8 a11)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = WebKit::WebFrameProxy::webFrame(*(void *)(a3 + 248), *(void *)(a3 + 256));
  if (v17)
  {
    uint64_t v18 = v17;
    CFRetain(*(CFTypeRef *)(v17 + 8));
    if (!*(void *)(a1 + 1192) || !*(unsigned char *)(v18 + 441))
    {
      uint64_t v19 = a7;
      uint64_t v20 = *(void *)(a1 + 256);
      atomic_fetch_add((atomic_uint *volatile)(v20 + 16), 1u);
      *(void *)long long buf = v20;
      WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(a1, (WebKit::WebProcessProxy **)buf, v18, (__int16 *)a3, a4, a5, a6, v19, a8, a9, a10, a11);
      if (v20) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v20 + 16));
      }
    }
    int v21 = *(const void **)(v18 + 8);
    CFRelease(v21);
  }
  else
  {
    __int16 v22 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didFailProvisionalLoadForFrame(IPC::Connection &, FrameInfoData &&"
                           ", ResourceRequest &&, std::optional<WebCore::NavigationIdentifier>, const String &, const Res"
                           "ourceError &, WillContinueLoading, const UserData &, WillInternallyHandleFailure)";
      _os_log_fault_impl(&dword_1985F2000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6425: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t a3, __int16 *a4, uint64_t a5, uint64_t a6, char a7, WTF::StringImpl **a8, uint64_t a9, char a10, uint64_t *a11, unsigned __int8 a12)
{
  uint64_t v12 = a8;
  uint64_t v18 = a2;
  uint64_t v278 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    uint64_t v97 = *(void *)(a1 + 32);
    uint64_t v160 = *(void *)(v97 + 760);
    uint64_t v162 = *(WTF::StringImpl **)(v97 + 1928);
    uint64_t v98 = *(void *)(*(void *)(a1 + 256) + 136);
    int v159 = v98 ? *(_DWORD *)(v98 + 108) : 0;
    uint64_t v99 = *(void *)(a3 + 272);
    int v158 = *(unsigned __int8 *)(a3 + 441);
    MEMORY[0x19973EC60](a9);
    WTF::String::utf8();
    uint64_t v100 = v227 ? (char *)v227 + 16 : 0;
    MEMORY[0x19973EC60](a9);
    int v101 = *(_DWORD *)(a9 + 56);
    int v102 = *(unsigned __int8 *)(a3 + 441);
    *(_DWORD *)long long buf = 134220290;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v160;
    *(_WORD *)&unsigned char buf[22] = 2048;
    uint64_t v173 = v162;
    LOWORD(v174) = 1024;
    *(_DWORD *)((char *)&v174 + 2) = v159;
    WORD3(v174) = 2048;
    *((void *)&v174 + 1) = v99;
    LOWORD(v175) = 1024;
    *(_DWORD *)((char *)&v175 + 2) = v158;
    WORD3(v175) = 2080;
    *((void *)&v175 + 1) = v100;
    LOWORD(v176) = 1024;
    *(_DWORD *)((char *)&v176 + 2) = v101;
    HIWORD(v176) = 1024;
    LODWORD(v177) = v102;
    WORD2(v177) = 1024;
    *(_DWORD *)((char *)&v177 + 6) = a12;
    _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didFailProvisionalLoadForFrame: frameID=%llu, isMainFrame=%d, domain=%s, code=%d, isMainFrame=%d, willInternallyHandleFailure=%d", buf, 0x52u);
    uint64_t v104 = v227;
    v227 = 0;
    uint64_t v12 = a8;
    uint64_t v18 = a2;
    if (v104)
    {
      if (*(_DWORD *)v104 == 1) {
        WTF::fastFree(v104, v103);
      }
      else {
        --*(_DWORD *)v104;
      }
    }
  }
  if (!WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *v18, v12))
  {
    uint64_t v155 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(Ref<WebProcessProxy> &&, WebF"
                           "rameProxy &, FrameInfoData &&, WebCore::ResourceRequest &&, std::optional<WebCore::Navigation"
                           "Identifier>, const String &, const ResourceError &, WillContinueLoading, const UserData &, Wi"
                           "llInternallyHandleFailure)";
      _os_log_fault_impl(&dword_1985F2000, v155, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6440: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    uint64_t v156 = *((void *)*v18 + 18);
    if (!v156)
    {
      __break(0xC471u);
      JUMPOUT(0x198E73AFCLL);
    }
    goto LABEL_159;
  }
  int v21 = *v18;
  MEMORY[0x19973EC60](a9);
  if (!WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, v21, (const WTF::URL *)(a9 + 8)))
  {
    __int16 v157 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(Ref<WebProcessProxy> &&, WebF"
                           "rameProxy &, FrameInfoData &&, WebCore::ResourceRequest &&, std::optional<WebCore::Navigation"
                           "Identifier>, const String &, const ResourceError &, WillContinueLoading, const UserData &, Wi"
                           "llInternallyHandleFailure)";
      _os_log_fault_impl(&dword_1985F2000, v157, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6441: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    uint64_t v156 = *((void *)*v18 + 18);
    if (!v156)
    {
      __break(0xC471u);
      JUMPOUT(0x198E73BD8);
    }
LABEL_159:
    *(unsigned char *)(v156 + 98) = 1;
    return;
  }
  uint64_t v22 = *(void *)(a1 + 40);
  if (v22) {
    uint64_t v23 = *(void *)(v22 + 8);
  }
  else {
    uint64_t v23 = 0;
  }
  __int16 v161 = (WebCore::ResourceRequest *)(a9 + 8);
  (*(void (**)(uint64_t))(*(void *)v23 + 1592))(v23);
  if (*(unsigned char *)(a1 + 898))
  {
    uint64_t v24 = *(void *)(*((void *)*a2 + 64) + 8);
    uint64_t v25 = v24 ? v24 - 16 : 0;
    uint64_t v26 = *(CFTypeRef **)(v25 + 320);
    if (v26)
    {
      CFRetain(v26[1]);
      WebKit::WebAutomationSession::navigationOccurredForFrame((WebKit::WebAutomationSession *)v26, (const WebKit::WebFrameProxy *)a3, v27);
      CFRelease(v26[1]);
    }
  }
  uint64_t v28 = a3;
  uint64_t v29 = 0;
  uint64_t v30 = v28;
  if (*(unsigned char *)(v28 + 441) && a7)
  {
    uint64_t v31 = *(void *)(a1 + 160);
    uint64_t v34 = *(void *)(v31 + 8);
    uint64_t v32 = (uint64_t *)(v31 + 8);
    uint64_t v33 = v34;
    int v35 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v34, a6);
    if (v34) {
      uint64_t v36 = (void *)(v33 + 16 * *(unsigned int *)(v33 - 4));
    }
    else {
      uint64_t v36 = 0;
    }
    if (v36 == v35)
    {
      uint64_t v29 = 0;
      goto LABEL_27;
    }
    uint64_t v29 = v35[1];
    v35[1] = 0;
    if (*v32)
    {
      uint64_t v37 = *v32 + 16 * *(unsigned int *)(*v32 - 4);
      if ((void *)v37 == v35) {
        goto LABEL_27;
      }
    }
    else
    {
      if (!v35) {
        goto LABEL_27;
      }
      uint64_t v37 = 0;
    }
    if ((void *)v37 != v35) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(v32, v35);
    }
  }
LABEL_27:
  uint64_t v38 = *(void *)(a1 + 32);
  uint64_t v39 = *(void *)(*(void *)(v38 + 992) + 8);
  if (v39)
  {
    uint64_t v40 = v39 - 16;
    CFRetain(*(CFTypeRef *)(v39 - 8));
  }
  else
  {
    uint64_t v40 = 0;
  }
  uint64_t v170 = v40;
  uint64_t v171 = v38 + 976;
  ++*(_DWORD *)(v38 + 1348);
  uint64_t v41 = a2;
  if (*(unsigned char *)(v30 + 441))
  {
    WebKit::WebPageProxy::reportPageLoadResult((WTF::MonotonicTime *)a1, (const WebCore::ResourceError *)a9);
    uint64_t v42 = *(void *)(a1 + 32) + 976;
    *(unsigned char *)(v38 + 1344) = 1;
    WebKit::PageLoadState::didFailProvisionalLoad(v42, (WTF::StringImpl *)buf);
    (*(void (**)(uint64_t))(*(void *)v23 + 200))(v23);
    if (v29)
    {
      *(void *)long long buf = 0;
      *(_DWORD *)&buf[8] = 0;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v29 + 3464, (uint64_t)buf);
      WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v29 + 3424));
      if (*(_DWORD *)&buf[8] != -1) {
        ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9D9C18[*(unsigned int *)&buf[8]])(&v227, buf);
      }
    }
    WebKit::WebPageProxy::callLoadCompletionHandlersIfNecessary(a1);
  }
  WebKit::WebFrameProxy::didFailProvisionalLoad((WebKit::WebFrameProxy *)v30);
  WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(void *)(a1 + 32) + 976), v43, v44);
  uint64_t v45 = (WTF::StringImpl **)(a1 + 168);
  WTF::String::operator=((uint64_t *)(a1 + 168), a8);
  if ((a12 & 1) == 0)
  {
    v227 = (WTF::StringImpl *)a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v228 = a1;
    CFRetain(*(CFTypeRef *)(v30 + 8));
    uint64_t v229 = v30;
    if (v29) {
      CFRetain(*(CFTypeRef *)(v29 + 8));
    }
    uint64_t v230 = v29;
    long long v56 = *(_DWORD **)a9;
    if (*(void *)a9) {
      *v56 += 2;
    }
    v231 = v56;
    uint64_t v57 = *(_DWORD **)v161;
    if (*(void *)v161) {
      *v57 += 2;
    }
    v232 = v57;
    long long v58 = *(_OWORD *)(a9 + 32);
    long long v233 = *(_OWORD *)(a9 + 16);
    long long v234 = v58;
    uint64_t v59 = *(_DWORD **)(a9 + 48);
    if (v59) {
      *v59 += 2;
    }
    v235 = v59;
    int v236 = *(_DWORD *)(a9 + 56);
    __int16 v237 = *(_WORD *)(a9 + 60);
    uint64_t v60 = *(const void **)(a9 + 64);
    CFTypeRef cf = v60;
    if (v60) {
      CFRetain(v60);
    }
    char v239 = *(unsigned char *)(a9 + 72);
    __int16 v61 = *a2;
    atomic_fetch_add((atomic_uint *volatile)*a2 + 4, 1u);
    v240 = v61;
    WTF::URL::URL((uint64_t)v241, (uint64_t *)a5);
    WTF::URL::URL((uint64_t)v242, (uint64_t *)(a5 + 40));
    v242[5] = *(void *)(a5 + 80);
    long long v62 = *(_OWORD *)(a5 + 88);
    *(_OWORD *)(a5 + 88) = 0u;
    long long v243 = v62;
    *(void *)&long long v62 = *(void *)(a5 + 104);
    *(void *)(a5 + 104) = 0;
    uint64_t v244 = v62;
    uint64_t v63 = *(void *)(a5 + 112);
    *(void *)(a5 + 112) = 0;
    uint64_t v245 = v63;
    *(void *)&long long v62 = *(void *)(a5 + 120);
    *(void *)(a5 + 120) = 0;
    uint64_t v246 = v62;
    uint64_t v64 = *(void *)(a5 + 128);
    *(void *)(a5 + 128) = 0;
    uint64_t v247 = v64;
    *(void *)&long long v62 = *(void *)(a5 + 136);
    *(void *)(a5 + 136) = 0;
    uint64_t v248 = v62;
    LODWORD(v64) = *(_DWORD *)(a5 + 144);
    char v250 = *(unsigned char *)(a5 + 148);
    int v249 = v64;
    long long v65 = *(_OWORD *)(a5 + 152);
    *(_OWORD *)(a5 + 152) = 0u;
    char v254 = *(unsigned char *)(a5 + 184);
    uint64_t v66 = *(void *)(a5 + 168);
    uint64_t v67 = *(void *)(a5 + 176);
    *(void *)(a5 + 168) = 0;
    uint64_t v252 = v66;
    uint64_t v253 = v67;
    uint64_t v68 = *(void *)(a5 + 192);
    *(void *)(a5 + 192) = 0;
    uint64_t v255 = v68;
    __int16 v256 = *a4;
    long long v251 = v65;
    WTF::URL::URL((uint64_t)v257, (uint64_t *)a4 + 1);
    WTF::URL::URL((uint64_t)v258, (uint64_t *)a4 + 6);
    v258[5] = *((void *)a4 + 11);
    long long v69 = *((_OWORD *)a4 + 6);
    *((_OWORD *)a4 + 6) = 0u;
    long long v259 = v69;
    *(void *)&long long v69 = *((void *)a4 + 14);
    *((void *)a4 + 14) = 0;
    uint64_t v260 = v69;
    uint64_t v70 = *((void *)a4 + 15);
    *((void *)a4 + 15) = 0;
    uint64_t v261 = v70;
    *(void *)&long long v69 = *((void *)a4 + 16);
    *((void *)a4 + 16) = 0;
    uint64_t v262 = v69;
    uint64_t v71 = *((void *)a4 + 17);
    *((void *)a4 + 17) = 0;
    uint64_t v263 = v71;
    *(void *)&long long v69 = *((void *)a4 + 18);
    *((void *)a4 + 18) = 0;
    uint64_t v264 = v69;
    LODWORD(v71) = *((_DWORD *)a4 + 38);
    char v266 = *((unsigned char *)a4 + 156);
    int v265 = v71;
    long long v72 = *((_OWORD *)a4 + 10);
    *((_OWORD *)a4 + 10) = 0u;
    long long v267 = v72;
    char v270 = *((unsigned char *)a4 + 192);
    uint64_t v73 = *((void *)a4 + 22);
    uint64_t v74 = *((void *)a4 + 23);
    *((void *)a4 + 22) = 0;
    uint64_t v268 = v73;
    uint64_t v269 = v74;
    uint64_t v75 = *((void *)a4 + 25);
    *((void *)a4 + 25) = 0;
    uint64_t v271 = v75;
    v272[0] = 0;
    int v273 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v272, (uint64_t)(a4 + 104));
    uint64_t v76 = (_DWORD *)*((void *)a4 + 30);
    *((void *)a4 + 30) = 0;
    v274 = v76;
    long long v275 = *(_OWORD *)(a4 + 124);
    v276[0] = *(_OWORD *)(a4 + 132);
    *(_OWORD *)((char *)v276 + 14) = *(_OWORD *)(a4 + 139);
    uint64_t v77 = *a11;
    if (*a11) {
      CFRetain(*(CFTypeRef *)(v77 + 8));
    }
    uint64_t v277 = v77;
    WTF::URL::URL((uint64_t)&v167, a8);
    uint64_t v47 = v29;
    if (*(unsigned char *)(v30 + 441))
    {
      int v78 = WebCore::ResourceError::errorRecoveryMethod((WebCore::ResourceError *)a9);
      uint64_t v41 = a2;
      if (v78) {
        int v78 = WTF::URL::protocolIs();
      }
    }
    else
    {
      int v78 = 0;
      uint64_t v41 = a2;
    }
    CFTypeRef v49 = (WebKit::ProvisionalFrameProxy **)v30;
    if (!v47) {
      goto LABEL_86;
    }
    uint64_t v79 = *(void *)(v47 + 3488);
    if (!v79) {
      goto LABEL_86;
    }
    __int16 v80 = *(_WORD *)(v79 + 96);
    if ((v80 & 4) != 0)
    {
      if ((v80 & 8) != 0) {
        goto LABEL_86;
      }
    }
    else if ((v80 & 8) != 0 || *(unsigned char *)(v79 + 132) != 2)
    {
      goto LABEL_86;
    }
    if (*(unsigned char *)(*(void *)(a1 + 32) + 1306)) {
      int v81 = 0;
    }
    else {
      int v81 = v78;
    }
    if (v81 == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v23 + 264))(v23);
      char v82 = *(unsigned char *)(v30 + 441);
      *(_DWORD *)&buf[8] = 1;
      uint64_t v83 = WTF::fastMalloc((WTF *)0x60);
      WebKit::BrowsingWarning::BrowsingWarning(v83, (uint64_t)&v167, v82, (uint64_t)buf);
      if (*(_DWORD *)&buf[8] != -1) {
        ((void (*)(uint64_t *, unsigned char *))off_1EE9D9D58[*(unsigned int *)&buf[8]])(&v166, buf);
      }
      uint64_t v84 = *(void *)(a1 + 32);
      *(unsigned char *)(v171 + 368) = 1;
      WTF::String::operator=((uint64_t *)(v84 + 1256), (WTF::StringImpl **)(v83 + 48));
      uint64_t v85 = *(void *)(a1 + 40);
      if (v85) {
        uint64_t v86 = *(void *)(v85 + 8);
      }
      else {
        uint64_t v86 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v86 + 1592))(v86);
      (*(void (**)(uint64_t))(*(void *)v23 + 1600))(v23);
      *(void *)long long buf = a1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      *(void *)&buf[8] = a1;
      (*(void (**)(uint64_t))(*(void *)v86 + 1592))(v86);
      *(void *)&uint8_t buf[16] = v86;
      uint64_t v105 = v167;
      if (v167) {
        *(_DWORD *)v167 += 2;
      }
      uint64_t v173 = v105;
      long long v174 = v168;
      long long v175 = v169;
      uint64_t v106 = v228;
      v176 = v227;
      CFRetain(*(CFTypeRef *)(v228 + 8));
      *(void *)&long long v177 = v106;
      uint64_t v107 = v229;
      CFRetain(*(CFTypeRef *)(v229 + 8));
      *((void *)&v177 + 1) = v107;
      uint64_t v108 = v230;
      if (v230) {
        CFRetain(*(CFTypeRef *)(v230 + 8));
      }
      uint64_t v178 = v108;
      uint64_t v109 = v231;
      if (v231) {
        *v231 += 2;
      }
      v179 = v109;
      char v110 = v232;
      if (v232) {
        *v232 += 2;
      }
      v180 = v110;
      long long v181 = v233;
      long long v182 = v234;
      long long v111 = v235;
      if (v235) {
        *v235 += 2;
      }
      v183 = v111;
      int v184 = v236;
      __int16 v185 = v237;
      CFTypeRef v186 = cf;
      if (cf) {
        CFRetain(cf);
      }
      char v187 = v239;
      char v112 = v240;
      atomic_fetch_add((atomic_uint *volatile)v240 + 4, 1u);
      v188 = v112;
      WebCore::ResourceRequest::ResourceRequest(&v189, v241);
      __int16 v205 = v256;
      WebCore::ResourceRequest::ResourceRequest(v206, v257);
      v221[0] = 0;
      int v222 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v221, (uint64_t)v272);
      uint64_t v113 = v274;
      if (v274) {
        *v274 += 2;
      }
      v223 = v113;
      long long v224 = v275;
      *(_OWORD *)v225 = v276[0];
      *(_OWORD *)&v225[14] = *(_OWORD *)((char *)v276 + 14);
      uint64_t v114 = v277;
      if (v277) {
        CFRetain(*(CFTypeRef *)(v277 + 8));
      }
      uint64_t v226 = v114;
      uint64_t v115 = WTF::fastMalloc((WTF *)0x2B8);
      *(void *)uint64_t v115 = &unk_1EE9DAD70;
      *(void *)(v115 + 8) = *(void *)buf;
      *(void *)(v115 + 16) = *(void *)&buf[8];
      uint64_t v116 = *(void *)&buf[16];
      *(_OWORD *)&buf[8] = 0u;
      *(void *)(v115 + 24) = v116;
      WTF::URL::URL(v115 + 32, (uint64_t *)&v173);
      *(void *)(v115 + 72) = v176;
      *(void *)(v115 + 80) = v177;
      uint64_t v117 = *((void *)&v177 + 1);
      long long v177 = 0u;
      *(void *)(v115 + 88) = v117;
      uint64_t v118 = v178;
      uint64_t v178 = 0;
      *(void *)(v115 + 96) = v118;
      uint64_t v119 = v179;
      if (v179) {
        *v179 += 2;
      }
      *(void *)(v115 + 104) = v119;
      __int16 v120 = v180;
      if (v180) {
        *v180 += 2;
      }
      *(void *)(v115 + 112) = v120;
      long long v121 = v181;
      *(_OWORD *)(v115 + 136) = v182;
      *(_OWORD *)(v115 + 120) = v121;
      __int16 v122 = v183;
      if (v183) {
        *v183 += 2;
      }
      *(void *)(v115 + 152) = v122;
      *(_DWORD *)(v115 + 160) = v184;
      *(_WORD *)(v115 + 164) = v185;
      CFTypeRef v123 = v186;
      *(void *)(v115 + 168) = v186;
      if (v123) {
        CFRetain(v123);
      }
      *(unsigned char *)(v115 + 176) = v187;
      char v124 = v188;
      v188 = 0;
      *(void *)(v115 + 184) = v124;
      WTF::URL::URL(v115 + 192, (uint64_t *)&v189);
      WTF::URL::URL(v115 + 232, v191);
      *(void *)(v115 + 272) = v191[5];
      *(void *)(v115 + 280) = v192;
      uint64_t v125 = *((void *)&v192 + 1);
      long long v192 = 0u;
      *(void *)(v115 + 288) = v125;
      uint64_t v126 = v193;
      uint64_t v193 = 0;
      *(void *)(v115 + 296) = v126;
      uint64_t v127 = v194;
      uint64_t v194 = 0;
      *(void *)(v115 + 304) = v127;
      uint64_t v128 = v195;
      uint64_t v195 = 0;
      *(void *)(v115 + 312) = v128;
      uint64_t v129 = v196;
      uint64_t v196 = 0;
      *(void *)(v115 + 320) = v129;
      uint64_t v130 = v197;
      uint64_t v197 = 0;
      *(void *)(v115 + 328) = v130;
      LODWORD(v129) = v198;
      *(unsigned char *)(v115 + 340) = v199;
      *(_DWORD *)(v115 + 336) = v129;
      *(void *)(v115 + 344) = v200;
      uint64_t v131 = *((void *)&v200 + 1);
      long long v200 = 0u;
      *(void *)(v115 + 352) = v131;
      *(void *)(v115 + 360) = v201;
      uint64_t v132 = v202;
      *(unsigned char *)(v115 + 376) = v203;
      *(void *)(v115 + 368) = v132;
      uint64_t v133 = v204;
      uint64_t v201 = 0;
      uint64_t v204 = 0;
      *(void *)(v115 + 384) = v133;
      *(_WORD *)(v115 + 392) = v205;
      WTF::URL::URL(v115 + 400, (uint64_t *)v206);
      WTF::URL::URL(v115 + 440, v207);
      *(void *)(v115 + 480) = v207[5];
      *(void *)(v115 + 488) = v208;
      uint64_t v134 = *((void *)&v208 + 1);
      long long v208 = 0u;
      *(void *)(v115 + 496) = v134;
      uint64_t v135 = v209;
      uint64_t v209 = 0;
      *(void *)(v115 + 504) = v135;
      uint64_t v136 = v210;
      uint64_t v210 = 0;
      *(void *)(v115 + 512) = v136;
      uint64_t v137 = v211;
      uint64_t v211 = 0;
      *(void *)(v115 + 520) = v137;
      uint64_t v138 = v212;
      uint64_t v212 = 0;
      *(void *)(v115 + 528) = v138;
      uint64_t v139 = v213;
      uint64_t v213 = 0;
      *(void *)(v115 + 536) = v139;
      LODWORD(v138) = v214;
      *(unsigned char *)(v115 + 548) = v215;
      *(_DWORD *)(v115 + 544) = v138;
      *(void *)(v115 + 552) = v216;
      uint64_t v140 = *((void *)&v216 + 1);
      long long v216 = 0u;
      *(void *)(v115 + 560) = v140;
      uint64_t v141 = v217;
      uint64_t v217 = 0;
      *(void *)(v115 + 568) = v141;
      uint64_t v142 = v218;
      *(unsigned char *)(v115 + 584) = v219;
      *(void *)(v115 + 576) = v142;
      uint64_t v143 = v220;
      uint64_t v220 = 0;
      *(void *)(v115 + 592) = v143;
      *(unsigned char *)(v115 + 600) = 0;
      *(_DWORD *)(v115 + 624) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v115 + 600, (uint64_t)v221);
      int v144 = v223;
      v223 = 0;
      *(void *)(v115 + 632) = v144;
      long long v145 = v224;
      long long v146 = *(_OWORD *)v225;
      *(_OWORD *)(v115 + 670) = *(_OWORD *)&v225[14];
      *(_OWORD *)(v115 + 640) = v145;
      *(_OWORD *)(v115 + 656) = v146;
      uint64_t v147 = v226;
      uint64_t v226 = 0;
      *(void *)(v115 + 688) = v147;
      uint64_t v166 = v115;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v86 + 256))(v86, v83, &v166);
      uint64_t v149 = v166;
      uint64_t v166 = 0;
      if (v149) {
        (*(void (**)(uint64_t))(*(void *)v149 + 8))(v149);
      }
      WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WebCore::ResourceRequest &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::FrameInfoData &::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&,WebKit::FrameInfoData &::ResourceError const&,WebKit::FrameInfoData &::WillContinueLoading,WebKit::UserData const&,WebKit::FrameInfoData &::WillInternallyHandleFailure)::$_0::~$_0((uint64_t)&v176, v148);
      unint64_t v151 = v173;
      uint64_t v173 = 0;
      uint64_t v41 = a2;
      if (v151)
      {
        if (*(_DWORD *)v151 == 2) {
          WTF::StringImpl::destroy(v151, v150);
        }
        else {
          *(_DWORD *)v151 -= 2;
        }
      }
      uint64_t v152 = *(void *)&buf[16];
      *(void *)&uint8_t buf[16] = 0;
      if (v152) {
        (*(void (**)(uint64_t))(*(void *)v152 + 1600))(v152);
      }
      uint64_t v153 = *(void *)&buf[8];
      *(void *)&buf[8] = 0;
      if (v153) {
        CFRelease(*(CFTypeRef *)(v153 + 8));
      }
      (*(void (**)(void))(**(void **)(a1 + 104) + 536))(*(void *)(a1 + 104));
      WTF::RefCounted<WebKit::BrowsingWarning>::deref((_DWORD *)v83, v154);
      uint64_t v23 = v86;
      goto LABEL_87;
    }
LABEL_86:
    WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WebCore::ResourceRequest &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::FrameInfoData &::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&,WebKit::FrameInfoData &::ResourceError const&,WebKit::FrameInfoData &::WillContinueLoading,WebKit::UserData const&,WebKit::FrameInfoData &::WillInternallyHandleFailure)::$_0::operator()((uint64_t *)&v227);
LABEL_87:
    int v88 = v167;
    char v167 = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 2) {
        WTF::StringImpl::destroy(v88, v87);
      }
      else {
        *(_DWORD *)v88 -= 2;
      }
    }
    WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WebCore::ResourceRequest &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::FrameInfoData &::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&,WebKit::FrameInfoData &::ResourceError const&,WebKit::FrameInfoData &::WillContinueLoading,WebKit::UserData const&,WebKit::FrameInfoData &::WillInternallyHandleFailure)::$_0::~$_0((uint64_t)&v227, v87);
    goto LABEL_92;
  }
  uint64_t v47 = v29;
  if (v29)
  {
    uint64_t v48 = *(void *)(v29 + 3488);
    CFTypeRef v49 = (WebKit::ProvisionalFrameProxy **)v30;
    if (v48)
    {
      CFRetain(*(CFTypeRef *)(v48 + 8));
      if ((*(_WORD *)(v48 + 96) & 2) != 0 || *(unsigned char *)(v48 + 132) == 1) {
        goto LABEL_42;
      }
      uint64_t v51 = *(void *)(a1 + 272);
      {
        WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v51 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::httpSByDefaultEnabledKey(void)::key, v50))
      {
LABEL_42:
        WTF::URL::URL((uint64_t)&v227, a8);
        if (*(unsigned char *)(v30 + 441)
          && WebCore::ResourceError::errorRecoveryMethod((WebCore::ResourceError *)a9)
          && WTF::URL::protocolIs())
        {
          WTF::URL::setProtocol();
          WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)buf, (const String *)&v227, 0);
          CFTypeRef v190 = 0;
          WebKit::WebPageProxy::loadRequest(a1, (WebCore::ResourceRequestBase *)buf, 1, 1, 0, &v165);
          uint64_t v53 = v165;
          uint64_t v165 = 0;
          if (v53) {
            CFRelease(*(CFTypeRef *)(v53 + 8));
          }
          CFTypeRef v54 = v190;
          CFTypeRef v190 = 0;
          if (v54) {
            CFRelease(v54);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
        }
        uint64_t v55 = v227;
        v227 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2) {
            WTF::StringImpl::destroy(v55, v52);
          }
          else {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v48 + 8));
    }
  }
  else
  {
    CFTypeRef v49 = (WebKit::ProvisionalFrameProxy **)v30;
  }
LABEL_92:
  __int16 v89 = *v45;
  *uint64_t v45 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2) {
      WTF::StringImpl::destroy(v89, v46);
    }
    else {
      *(_DWORD *)v89 -= 2;
    }
  }
  uint64_t v90 = *(void **)(a1 + 1192);
  if (v90 && (WebKit::ProvisionalFrameProxy **)v90[9] == v49 && (a10 & 1) == 0)
  {
    *(void *)(a1 + 1192) = 0;
    (*(void (**)(void *))(*v90 + 8))(v90);
  }
  char v91 = v49[40];
  v49[40] = 0;
  std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100](v49 + 40, 0);
  if (v91)
  {
    WebKit::WebFrameProxy::notifyParentOfLoadCompletion((WebKit::WebFrameProxy *)v49, *v41);
    WebKit::ProvisionalFrameProxy::~ProvisionalFrameProxy(v91, v94);
    WTF::fastFree(v95, v96);
  }
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v170, v92, v93);
  if (v47) {
    CFRelease(*(CFTypeRef *)(v47 + 8));
  }
  (*(void (**)(uint64_t))(*(void *)v23 + 1600))(v23);
}

BOOL WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess(WebKit::WebPageProxy *this, WebKit::WebProcessProxy *a2, WTF::StringImpl **a3)
{
  WTF::URL::URL((uint64_t)v9, a3);
  BOOL v6 = WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess(this, a2, (const WTF::URL *)v9);
  uint64_t v7 = v9[0];
  v9[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return v6;
}

uint64_t WebKit::WebPageProxy::callLoadCompletionHandlersIfNecessary(uint64_t this)
{
  if (*(unsigned char *)(this + 1190))
  {
    uint64_t v1 = *(void *)(this + 32);
    uint64_t v2 = *(void *)(v1 + 2152);
    if (v2)
    {
      *(void *)(v1 + 2152) = 0;
      (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
      uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
      return v3(v2);
    }
  }
  return this;
}

void WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WebCore::ResourceRequest &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::FrameInfoData &::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&,WebKit::FrameInfoData &::ResourceError const&,WebKit::FrameInfoData &::WillContinueLoading,WebKit::UserData const&,WebKit::FrameInfoData &::WillInternallyHandleFailure)::$_0::operator()(uint64_t *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 56);
  if (v3)
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = a1[3];
    WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)a1[14], (API::Object *)a1[77], &v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v3 + 32))(v3, v2, v4, v5, a1 + 4, v20);
    uint64_t v6 = v20;
    uint64_t v20 = 0;
    if (v6) {
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 72);
    LOWORD(v20) = *((_WORD *)a1 + 160);
    WebCore::ResourceRequest::ResourceRequest(v21, (const String *)a1 + 41);
    v23[0] = 0;
    int v24 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v23, (uint64_t)(a1 + 66));
    uint64_t v8 = (WTF::StringImpl *)a1[70];
    if (v8) {
      *(_DWORD *)v8 += 2;
    }
    uint64_t v25 = v8;
    long long v9 = *(_OWORD *)(a1 + 71);
    v27[0] = *(_OWORD *)(a1 + 73);
    *(_OWORD *)((char *)v27 + 14) = *(_OWORD *)((char *)a1 + 598);
    long long v26 = v9;
    uint64_t v10 = a1[3];
    uint64_t v11 = a1 + 15;
    uint64_t v12 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 15));
    uint64_t v13 = a1 + 4;
    WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)a1[14], (API::Object *)a1[77], &v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v7 + 64))(v7, v2, &v20, v10, v12, a1 + 4, v19);
    uint64_t v15 = v19;
    uint64_t v19 = 0;
    if (v15) {
      CFRelease(*(CFTypeRef *)(v15 + 8));
    }
    uint64_t v16 = v25;
    uint64_t v25 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = a1 + 40;
    if (v24 != -1) {
      ((void (*)(uint64_t *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v24])(&v19, v23);
    }
    int v24 = -1;
    CFTypeRef v18 = cf;
    CFTypeRef cf = 0;
    if (v18) {
      CFRelease(v18);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v21);
    (*(void (**)(void, uint64_t, uint64_t *, uint64_t *, uint64_t *))(**(void **)(v2 + 72) + 72))(*(void *)(v2 + 72), v2, v11, v13, v17);
  }
}

uint64_t WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WebCore::ResourceRequest &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::FrameInfoData &::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&,WebKit::FrameInfoData &::ResourceError const&,WebKit::FrameInfoData &::WillContinueLoading,WebKit::UserData const&,WebKit::FrameInfoData &::WillInternallyHandleFailure)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 616);
  *(void *)(a1 + 616) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 560);
  *(void *)(a1 + 560) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(unsigned int *)(a1 + 552);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v5])(&v18, a1 + 528);
  }
  *(_DWORD *)(a1 + 552) = -1;
  uint64_t v6 = *(const void **)(a1 + 520);
  *(void *)(a1 + 520) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 328));
  uint64_t v7 = *(const void **)(a1 + 312);
  *(void *)(a1 + 312) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 120));
  uint64_t v9 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v9) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v9 + 16));
  }
  uint64_t v10 = *(const void **)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(WTF::StringImpl **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = *(WTF::StringImpl **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v8);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = *(WTF::StringImpl **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v8);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v14) {
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v15) {
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  uint64_t v16 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v16) {
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  return a1;
}

uint64_t WebKit::WebPageProxy::didFinishServiceWorkerPageRegistration(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 32);
  uint64_t v2 = *(void *)(v1 + 2152);
  if (v2)
  {
    *(void *)(v1 + 2152) = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
    return v3(v2);
  }
  return this;
}

void std::__optional_destruct_base<WebKit::PrivateClickMeasurementAndMetadata,false>::reset[abi:sn180100](WebCore::PrivateClickMeasurement *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 328))
  {
    uint64_t v3 = (WTF::StringImpl *)*((void *)this + 40);
    *((void *)this + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = (WTF::StringImpl *)*((void *)this + 39);
    *((void *)this + 39) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(this, a2);
    *((unsigned char *)this + 328) = 0;
  }
}

uint64_t WebKit::WebPageProxy::resetRecentGamepadAccessState(WebKit::WebPageProxy *this)
{
  if (*((unsigned char *)this + 1512)
    || WTF::RunLoop::TimerBase::isActive((WebKit::WebPageProxy *)((char *)this + 1480)))
  {
    WebKit::WebPageProxy::recentGamepadAccessStateChanged((uint64_t)this, 1);
  }

  return PAL::HysteresisActivity::cancel((WebKit::WebPageProxy *)((char *)this + 1464));
}

uint64_t WebKit::WebPageProxy::invalidateAllAttachments(WebKit::WebPageProxy *this, WTF::StringImpl *a2)
{
  uint64_t result = *((void *)this + 142);
  if (result)
  {
    uint64_t v4 = *(unsigned int *)(result - 4);
    uint64_t v5 = result + 16 * v4;
    if (*(_DWORD *)(result - 12))
    {
      uint64_t v6 = result;
      if (v4)
      {
        uint64_t v7 = 16 * v4;
        uint64_t v6 = result;
        while ((unint64_t)(*(void *)v6 + 1) <= 1)
        {
          v6 += 16;
          v7 -= 16;
          if (!v7)
          {
            uint64_t v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v6 = result + 16 * v4;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v5 = result + 16 * v4;
  if (result)
  {
LABEL_8:
    uint64_t v8 = result + 16 * *(unsigned int *)(result - 4);
    goto LABEL_13;
  }
  uint64_t v8 = 0;
LABEL_13:
  if (v8 != v6)
  {
    do
    {
      uint64_t v9 = *(void *)(v6 + 8);
      if (*(unsigned char *)(v9 + 64) == 1)
      {
        WebKit::WebPageProxy::didRemoveAttachment(*((WebKit::WebPageProxy **)this + 5), *(Attachment **)(v6 + 8));
        uint64_t v9 = *(void *)(v6 + 8);
      }
      CFRetain(*(CFTypeRef *)(v9 + 8));
      API::Attachment::invalidate((API::Attachment *)v9, v10);
      CFRelease(*(CFTypeRef *)(v9 + 8));
      uint64_t v11 = v6 + 16;
      uint64_t v6 = v5;
      if (v11 != v5)
      {
        uint64_t v6 = v11;
        while ((unint64_t)(*(void *)v6 + 1) <= 1)
        {
          v6 += 16;
          if (v6 == v5)
          {
            uint64_t v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v8);
    uint64_t result = *((void *)this + 142);
  }
  if (result)
  {
    *((void *)this + 142) = 0;
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didFinishDocumentLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, CFTypeRef **a7, double a8)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = *(void *)(a1 + 40);
  if (v16) {
    uint64_t v17 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v17 + 1592))(v17);
  uint64_t v18 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v18)
  {
    uint64_t v19 = v18;
    CFRetain(*(CFTypeRef *)(v18 + 8));
    if (*(void *)(a1 + 184) && *(unsigned char *)(v19 + 441) && (WTF::URL::isAboutBlank((WTF::URL *)(v19 + 48)) & 1) == 0)
    {
      *(double *)(*(void *)(a1 + 184) + 24) = a8;
      WebKit::WebPageProxy::generatePageLoadingTimingSoon((WebKit::WebPageProxy *)a1);
    }
    uint64_t v20 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v22 = *(void *)(v21 + 760);
      uint64_t v23 = *(void *)(v21 + 1928);
      uint64_t v24 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v24) {
        LODWORD(v24) = *(_DWORD *)(v24 + 108);
      }
      int v25 = *(unsigned __int8 *)(v19 + 441);
      *(_DWORD *)uint64_t v38 = 134219264;
      *(void *)&void v38[4] = a1;
      __int16 v39 = 2048;
      uint64_t v40 = v22;
      __int16 v41 = 2048;
      uint64_t v42 = v23;
      __int16 v43 = 1024;
      int v44 = v24;
      __int16 v45 = 2048;
      uint64_t v46 = a3;
      __int16 v47 = 1024;
      int v48 = v25;
      _os_log_impl(&dword_1985F2000, v20, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didFinishDocumentLoadForFrame: frameID=%llu, isMainFrame=%d", v38, 0x36u);
    }
    if (*(unsigned char *)(a1 + 898))
    {
      long long v26 = *(CFTypeRef **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24))
                          + 320);
      if (v26)
      {
        CFRetain(v26[1]);
        WebKit::WebAutomationSession::documentLoadedForFrame((WebKit::WebAutomationSession *)v26, (const WebKit::WebFrameProxy *)v19);
        CFRelease(v26[1]);
      }
    }
    uint64_t v27 = 0;
    int v28 = *(unsigned __int8 *)(v19 + 441);
    if (*(unsigned char *)(v19 + 441) && a6)
    {
      uint64_t v29 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(*(void *)(a1 + 160) + 8), a5);
      uint64_t v27 = v29;
      if (!v29) {
        goto LABEL_21;
      }
      CFRetain(*(CFTypeRef *)(v29 + 8));
      int v28 = *(unsigned __int8 *)(v19 + 441);
    }
    if (!v28)
    {
LABEL_28:
      if (v27) {
        CFRelease(*(CFTypeRef *)(v27 + 8));
      }
      CFRelease(*(CFTypeRef *)(v19 + 8));
      return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 1600))(v17);
    }
LABEL_21:
    uint64_t v30 = *(void *)(a1 + 72);
    uint64_t v31 = *(atomic_uint **)(a1 + 256);
    atomic_fetch_add(v31 + 4, 1u);
    uint64_t v32 = *a7;
    if (v32) {
      CFRetain(v32[1]);
    }
    WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v31, (API::Object *)v32, (uint64_t *)v38);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v30 + 96))(v30, a1, v27, *(void *)v38);
    uint64_t v33 = *(void *)v38;
    *(void *)uint64_t v38 = 0;
    if (v33) {
      CFRelease(*(CFTypeRef *)(v33 + 8));
    }
    if (v32) {
      CFRelease(v32[1]);
    }
    uint64_t v34 = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v31 + 4);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v34);
    *(void *)(*(void *)(a1 + 32) + 2256) = v35;
    goto LABEL_28;
  }
  uint64_t v37 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t v38 = 136446210;
    *(void *)&void v38[4] = "void WebKit::WebPageProxy::didFinishDocumentLoadForFrame(IPC::Connection &, FrameIdentifier, st"
                         "d::optional<WebCore::NavigationIdentifier>, const UserData &, WallTime)";
    _os_log_fault_impl(&dword_1985F2000, v37, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6741: Invalid message dispatched %{public}s", v38, 0xCu);
  }
  *(unsigned char *)(a2 + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 1600))(v17);
}

void WebKit::WebPageProxy::createRemoteSubframesInOtherProcesses(WebKit::WebPageProxy *this, WebKit::WebFrameProxy *a2, const WTF::String *a3)
{
  uint64_t v6 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, a3))
  {
    uint64_t v7 = *((void *)a2 + 39);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        CFRetain(*(CFTypeRef *)(v8 + 8));
        uint64_t v13 = v8;
        uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
        *uint64_t v9 = &unk_1EE9DADC0;
        v9[1] = a2;
        void v9[2] = &v13;
        v9[3] = a3;
        uint64_t v12 = v9;
        WebKit::WebPageProxy::forEachWebContentProcess(this, &v12);
        uint64_t v10 = v12;
        uint64_t v12 = 0;
        if (v10) {
          (*(void (**)(void *))(*v10 + 8))(v10);
        }
        uint64_t v11 = v13;
        uint64_t v13 = 0;
        if (v11) {
          CFRelease(*(CFTypeRef *)(v11 + 8));
        }
      }
    }
  }
}

uint64_t WebKit::WebPageProxy::broadcastMainFrameURLChangeToOtherProcesses(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::URL *a3)
{
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9DADE8;
  v6[1] = a2;
  double v6[2] = a3;
  uint64_t v8 = (uint64_t)v6;
  WebKit::WebPageProxy::forEachWebContentProcess(this, &v8);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didFinishLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7, char a8, CFTypeRef **a9)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = *(void *)(a1 + 40);
  if (v17) {
    uint64_t v18 = *(void *)(v17 + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v18 + 1592))(v18);
  uint64_t v19 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v19)
  {
    uint64_t v20 = v19;
    CFRetain(*(CFTypeRef *)(v19 + 8));
    uint64_t v22 = *(void *)(a1 + 272);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v22 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v21)&& *(void *)(WebKit::WebFrameProxy::provisionalLoadProcess((WebKit::WebFrameProxy *)v20) + 144) != a2)
    {
      goto LABEL_72;
    }
    uint64_t v23 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void *)(a1 + 32);
      uint64_t v25 = *(void *)(v24 + 760);
      uint64_t v26 = *(void *)(v24 + 1928);
      uint64_t v27 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v27) {
        LODWORD(v27) = *(_DWORD *)(v27 + 108);
      }
      int v28 = *(unsigned __int8 *)(v20 + 441);
      *(_DWORD *)long long buf = 134219264;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v25;
      __int16 v67 = 2048;
      uint64_t v68 = v26;
      __int16 v69 = 1024;
      int v70 = v27;
      __int16 v71 = 2048;
      uint64_t v72 = a3;
      LOWORD(v73[0]) = 1024;
      *(_DWORD *)((char *)v73 + 2) = v28;
      _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didFinishLoadForFrame: frameID=%llu, isMainFrame=%d", buf, 0x36u);
    }
    if (!*(unsigned char *)(v20 + 441))
    {
      uint64_t v31 = 0;
LABEL_20:
      uint64_t v32 = *(void *)(a1 + 32);
      uint64_t v33 = *(void *)(*(void *)(v32 + 992) + 8);
      if (v33)
      {
        uint64_t v34 = v33 - 16;
        CFRetain(*(CFTypeRef *)(v33 - 8));
      }
      else
      {
        uint64_t v34 = 0;
      }
      int v64 = 0;
      *(void *)long long buf = v34;
      *(void *)&buf[8] = v32 + 976;
      ++*(_DWORD *)(v32 + 1348);
LABEL_27:
      if (*(unsigned char *)(a1 + 898))
      {
        __int16 v39 = *(CFTypeRef **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24))
                            + 320);
        if (v39)
        {
          CFRetain(v39[1]);
          WebKit::WebAutomationSession::navigationOccurredForFrame((WebKit::WebAutomationSession *)v39, (const WebKit::WebFrameProxy *)v20, v40);
          CFRelease(v39[1]);
        }
      }
      WebKit::WebFrameProxy::didFinishLoad((WebKit::WebFrameProxy *)v20);
      WebKit::WebFrameProxy::notifyParentOfLoadCompletion((WebKit::WebFrameProxy *)v20, *(WebKit::WebProcessProxy **)(*(void *)(v20 + 32) + 16));
      WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(void *)(a1 + 32) + 976), v41, v42);
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v43, v44);
LABEL_31:
      uint64_t v45 = *(void *)(a1 + 56);
      if (v45)
      {
        uint64_t v46 = *(atomic_uint **)(a1 + 256);
        atomic_fetch_add(v46 + 4, 1u);
        __int16 v47 = *a9;
        if (*a9) {
          CFRetain(v47[1]);
        }
        WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v46, (API::Object *)v47, (uint64_t *)buf);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v45 + 40))(v45, a1, v20, v31, *(void *)buf);
        uint64_t v48 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v48) {
          CFRelease(*(CFTypeRef *)(v48 + 8));
        }
        if (v47) {
          CFRelease(v47[1]);
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v46 + 4);
        if (!v64) {
          goto LABEL_70;
        }
      }
      else
      {
        if (*a5)
        {
          uint64_t v63 = a5;
          uint64_t v49 = a6;
          uint64_t v50 = *(void *)(a1 + 72);
          uint64_t v51 = *(atomic_uint **)(a1 + 256);
          uint64_t v52 = (unsigned int *)(v51 + 4);
          atomic_fetch_add(v51 + 4, 1u);
          uint64_t v53 = *a9;
          if (*a9) {
            CFRetain(v53[1]);
          }
          WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v51, (API::Object *)v53, (uint64_t *)buf);
          (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v50 + 104))(v50, a1, v31, *(void *)buf);
          uint64_t v54 = *(void *)buf;
          *(void *)long long buf = 0;
          if (v54) {
            CFRelease(*(CFTypeRef *)(v54 + 8));
          }
          a6 = v49;
          if (v53) {
            CFRelease(v53[1]);
          }
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v52);
          a5 = v63;
        }
        (*(void (**)(void, uint64_t, uint64_t, unsigned char *))(**(void **)(a1 + 72) + 112))(*(void *)(a1 + 72), a1, a6, a5);
        if (!v64) {
          goto LABEL_70;
        }
      }
      *(void *)long long buf = 0;
      *(void *)&buf[8] = 0;
      WTF::URL::invalidate((WTF::URL *)&buf[8]);
      CFTypeRef cf = 0;
      v73[0] = 0;
      *(void *)((char *)v73 + 6) = 0;
      char v75 = 1;
      WebKit::WebPageProxy::reportPageLoadResult((WTF::MonotonicTime *)a1, (const WebCore::ResourceError *)buf);
      CFTypeRef v56 = cf;
      CFTypeRef cf = 0;
      if (v56) {
        CFRelease(v56);
      }
      uint64_t v57 = (WTF::StringImpl *)v73[0];
      v73[0] = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2) {
          WTF::StringImpl::destroy(v57, v55);
        }
        else {
          *(_DWORD *)v57 -= 2;
        }
      }
      long long v58 = *(WTF::StringImpl **)&buf[8];
      *(void *)&buf[8] = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2) {
          WTF::StringImpl::destroy(v58, v55);
        }
        else {
          *(_DWORD *)v58 -= 2;
        }
      }
      uint64_t v59 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2) {
          WTF::StringImpl::destroy(v59, v55);
        }
        else {
          *(_DWORD *)v59 -= 2;
        }
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 1296))(v18, v31);
      if (v31)
      {
        *(void *)long long buf = 0;
        *(_DWORD *)&buf[8] = 0;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v31 + 3464, (uint64_t)buf);
        WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v31 + 3424));
        if (*(_DWORD *)&buf[8] != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9D9C18[*(unsigned int *)&buf[8]])(&v65, buf);
        }
      }
      uint64_t v60 = (WTF *)WTF::RunLoop::TimerBase::start();
      if ((int)WTF::numberOfProcessorCores(v60) <= 4) {
        WebKit::WebPageProxy::notifyProcessPoolToPrewarm(*(WebKit::WebPageProxy **)(*(void *)(a1 + 256) + 512));
      }
LABEL_70:
      *(unsigned char *)(a1 + 176) = 0;
      if (v31) {
        CFRelease(*(CFTypeRef *)(v31 + 8));
      }
LABEL_72:
      CFRelease(*(CFTypeRef *)(v20 + 8));
      return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 1600))(v18);
    }
    if (a8)
    {
      uint64_t v29 = *(void *)(*(void *)(a1 + 160) + 8);
      if (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v29, a7))
      {
        uint64_t v30 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v29, a7);
        uint64_t v31 = v30;
        if (v30)
        {
          CFRetain(*(CFTypeRef *)(v30 + 8));
          if (!*(unsigned char *)(v20 + 441)) {
            goto LABEL_20;
          }
LABEL_24:
          uint64_t v35 = *(void *)(a1 + 32);
          uint64_t v36 = *(void *)(*(void *)(v35 + 992) + 8);
          if (v36)
          {
            uint64_t v37 = v36 - 16;
            CFRetain(*(CFTypeRef *)(v36 - 8));
          }
          else
          {
            uint64_t v37 = 0;
          }
          uint64_t v38 = *(void *)(a1 + 32);
          *(void *)long long buf = v37;
          *(void *)&buf[8] = v35 + 976;
          ++*(_DWORD *)(v35 + 1348);
          int v64 = 1;
          *(unsigned char *)(v35 + 1344) = 1;
          *(unsigned char *)(v38 + 1168) = 2;
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v31 = 0;
      }
      int v64 = 1;
      goto LABEL_31;
    }
    uint64_t v31 = 0;
    goto LABEL_24;
  }
  long long v62 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didFinishLoadForFrame(IPC::Connection &, FrameIdentifier, FrameInfoD"
                         "ata &&, ResourceRequest &&, std::optional<WebCore::NavigationIdentifier>, const UserData &)";
    _os_log_fault_impl(&dword_1985F2000, v62, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6808: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  *(unsigned char *)(a2 + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 1600))(v18);
}

uint64_t WebKit::WebPageProxy::didFailLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, WebCore::ResourceRequestBase *a6, uint64_t a7, char a8, const WebCore::ResourceError *a9, CFTypeRef **a10)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = *(void *)(a1 + 40);
  if (v17) {
    uint64_t v18 = *(void *)(v17 + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v18 + 1592))(v18);
  uint64_t v19 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v19)
  {
    uint64_t v20 = v19;
    CFRetain(*(CFTypeRef *)(v19 + 8));
    uint64_t v21 = qword_1EB358050;
    __int16 v61 = a5;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR))
    {
      uint64_t v49 = *(void *)(a1 + 32);
      uint64_t v58 = *(void *)(v49 + 760);
      uint64_t v60 = *(void *)(v49 + 1928);
      uint64_t v50 = *(void *)(*(void *)(a1 + 256) + 136);
      int v57 = v50 ? *(_DWORD *)(v50 + 108) : 0;
      int v51 = *(unsigned __int8 *)(v20 + 441);
      MEMORY[0x19973EC60](a9);
      WTF::String::utf8();
      uint64_t v52 = v63 ? (char *)v63 + 16 : 0;
      MEMORY[0x19973EC60](a9);
      int v53 = *((_DWORD *)a9 + 14);
      *(_DWORD *)long long buf = 134219778;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v58;
      __int16 v67 = 2048;
      uint64_t v68 = v60;
      __int16 v69 = 1024;
      int v70 = v57;
      __int16 v71 = 2048;
      uint64_t v72 = a3;
      __int16 v73 = 1024;
      int v74 = v51;
      __int16 v75 = 2080;
      uint64_t v76 = v52;
      __int16 v77 = 1024;
      int v78 = v53;
      _os_log_error_impl(&dword_1985F2000, v21, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didFailLoadForFrame: frameID=%llu, isMainFrame=%d, domain=%s, code=%d", buf, 0x46u);
      uint64_t v55 = v63;
      uint64_t v63 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 1) {
          WTF::fastFree(v55, v54);
        }
        else {
          --*(_DWORD *)v55;
        }
      }
    }
    uint64_t v22 = 0;
    if (*(unsigned char *)(v20 + 441))
    {
      if (a8)
      {
        uint64_t v23 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(*(void *)(a1 + 160) + 8), a7);
        uint64_t v22 = v23;
        if (v23) {
          CFRetain(*(CFTypeRef *)(v23 + 8));
        }
      }
    }
    uint64_t v24 = *(void *)(a1 + 32);
    uint64_t v25 = *(void *)(*(void *)(v24 + 992) + 8);
    if (v25)
    {
      uint64_t v26 = v25 - 16;
      CFRetain(*(CFTypeRef *)(v25 - 8));
    }
    else
    {
      uint64_t v26 = 0;
    }
    *(void *)long long buf = v26;
    *(void *)&buf[8] = v24 + 976;
    ++*(_DWORD *)(v24 + 1348);
    int v27 = *(unsigned __int8 *)(v20 + 441);
    if (*(unsigned char *)(v20 + 441))
    {
      uint64_t v28 = *(void *)(a1 + 32);
      *(unsigned char *)(v24 + 1344) = 1;
      *(unsigned char *)(v28 + 1168) = 2;
      std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v28 + 1944), 0);
      std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*(void *)(a1 + 32) + 1952), 0);
    }
    if (*(unsigned char *)(a1 + 898))
    {
      uint64_t v29 = *(CFTypeRef **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24))
                          + 320);
      if (v29)
      {
        CFRetain(v29[1]);
        WebKit::WebAutomationSession::navigationOccurredForFrame((WebKit::WebAutomationSession *)v29, (const WebKit::WebFrameProxy *)v20, v30);
        CFRelease(v29[1]);
      }
    }
    WebKit::WebFrameProxy::didFailLoad(v20);
    WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(void *)(a1 + 32) + 976), v31, v32);
    uint64_t v33 = *(void *)(a1 + 56);
    if (v33)
    {
      uint64_t v34 = *(atomic_uint **)(a1 + 256);
      atomic_fetch_add(v34 + 4, 1u);
      uint64_t v35 = *a10;
      if (*a10) {
        CFRetain(v35[1]);
      }
      WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v34, (API::Object *)v35, (uint64_t *)&v63);
      uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, const WebCore::ResourceError *, WTF *))(*(void *)v33 + 48);
      uint64_t v37 = v33;
      uint64_t v38 = a9;
      v36(v37, a1, v20, v22, a9, v63);
      __int16 v39 = v63;
      uint64_t v63 = 0;
      if (v39) {
        CFRelease(*((CFTypeRef *)v39 + 1));
      }
      if (v35) {
        CFRelease(v35[1]);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v34 + 4);
      if (!v27) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v42 = v61;
      if (*v61)
      {
        uint64_t v43 = *(void *)(a1 + 72);
        uint64_t v59 = WebCore::ResourceRequestBase::url(a6);
        int v44 = *(atomic_uint **)(a1 + 256);
        uint64_t v45 = (unsigned int *)(v44 + 4);
        atomic_fetch_add(v44 + 4, 1u);
        uint64_t v46 = *a10;
        if (*a10) {
          CFRetain(v46[1]);
        }
        WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v44, (API::Object *)v46, (uint64_t *)&v63);
        uint64_t v42 = v61;
        (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, const WebCore::ResourceError *, WTF *))(*(void *)v43 + 128))(v43, a1, v61, v22, v59, a9, v63);
        __int16 v47 = v63;
        uint64_t v63 = 0;
        if (v47) {
          CFRelease(*((CFTypeRef *)v47 + 1));
        }
        if (v46) {
          CFRelease(v46[1]);
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v45);
      }
      uint64_t v38 = a9;
      (*(void (**)(void, uint64_t, WebCore::ResourceRequestBase *, const WebCore::ResourceError *, unsigned char *))(**(void **)(a1 + 72) + 136))(*(void *)(a1 + 72), a1, a6, a9, v42);
      if (!v27) {
        goto LABEL_39;
      }
    }
    WebKit::WebPageProxy::reportPageLoadResult((WTF::MonotonicTime *)a1, v38);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 1304))(v18, v22);
    if (v22)
    {
      uint64_t v63 = 0;
      int v64 = 0;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v22 + 3464, (uint64_t)&v63);
      WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v22 + 3424));
      if (v64 != -1) {
        ((void (*)(char *, WTF **))off_1EE9D9C18[v64])(&v65, &v63);
      }
    }
    WebKit::WebPageProxy::callLoadCompletionHandlersIfNecessary(a1);
LABEL_39:
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v40, v41);
    if (v22) {
      CFRelease(*(CFTypeRef *)(v22 + 8));
    }
    CFRelease(*(CFTypeRef *)(v20 + 8));
    return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 1600))(v18);
  }
  CFTypeRef v56 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didFailLoadForFrame(IPC::Connection &, FrameIdentifier, FrameInfoDat"
                         "a &&, ResourceRequest &&, std::optional<WebCore::NavigationIdentifier>, const ResourceError &, "
                         "const UserData &)";
    _os_log_fault_impl(&dword_1985F2000, v56, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6871: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  *(unsigned char *)(a2 + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 1600))(v18);
}

uint64_t WebKit::WebPageProxy::didSameDocumentNavigationForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, WTF::StringImpl **a8, CFTypeRef **a9)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = *(void *)(a1 + 40);
  if (v17) {
    uint64_t v18 = *(void *)(v17 + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v18 + 1592))(v18);
  uint64_t v19 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (!v19)
  {
    uint64_t v48 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didSameDocumentNavigationForFrame(IPC::Connection &, FrameIdentifi"
                           "er, std::optional<WebCore::NavigationIdentifier>, SameDocumentNavigationType, URL &&, const UserData &)";
      _os_log_fault_impl(&dword_1985F2000, v48, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6921: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
    return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 1600))(v18);
  }
  uint64_t v20 = v19;
  CFRetain(*(CFTypeRef *)(v19 + 8));
  if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *(WebKit::WebProcessProxy **)(a1 + 256), (const WTF::URL *)a8))
  {
    uint64_t v21 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v24 = *(void *)(v23 + 760);
      uint64_t v25 = *(void *)(v23 + 1928);
      uint64_t v26 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v26) {
        LODWORD(v26) = *(_DWORD *)(v26 + 108);
      }
      int v27 = *(unsigned __int8 *)(v20 + 441);
      *(_DWORD *)long long buf = 134219520;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v24;
      __int16 v53 = 2048;
      uint64_t v54 = v25;
      __int16 v55 = 1024;
      int v56 = v26;
      __int16 v57 = 2048;
      uint64_t v58 = a3;
      __int16 v59 = 1024;
      int v60 = v27;
      __int16 v61 = 1024;
      int v62 = a7;
      _os_log_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didSameDocumentNavigationForFrame: frameID=%llu, isMainFrame=%d, type=%u", buf, 0x3Cu);
    }
    uint64_t v28 = 0;
    if (*(unsigned char *)(v20 + 441))
    {
      if (a6)
      {
        uint64_t v29 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(*(void *)(a1 + 160) + 8), a5);
        uint64_t v28 = v29;
        if (v29) {
          CFRetain(*(CFTypeRef *)(v29 + 8));
        }
      }
    }
    uint64_t v30 = *(void *)(a1 + 32);
    uint64_t v31 = *(void *)(*(void *)(v30 + 992) + 8);
    if (v31)
    {
      uint64_t v32 = v31 - 16;
      CFRetain(*(CFTypeRef *)(v31 - 8));
    }
    else
    {
      uint64_t v32 = 0;
    }
    *(void *)long long buf = v32;
    *(void *)&buf[8] = v30 + 976;
    ++*(_DWORD *)(v30 + 1348);
    int v33 = *(unsigned __int8 *)(v20 + 441);
    if (*(unsigned char *)(v20 + 441))
    {
      uint64_t v34 = *(void *)(a1 + 32);
      *(unsigned char *)(v30 + 1344) = 1;
      WTF::String::operator=((uint64_t *)(v34 + 1200), a8);
    }
    if (*(unsigned char *)(a1 + 898))
    {
      uint64_t v35 = *(CFTypeRef **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24))
                          + 320);
      if (v35)
      {
        CFRetain(v35[1]);
        WebKit::WebAutomationSession::navigationOccurredForFrame((WebKit::WebAutomationSession *)v35, (const WebKit::WebFrameProxy *)v20, v36);
        CFRelease(v35[1]);
      }
    }
    uint64_t v37 = *(void *)(a1 + 32);
    *(unsigned char *)(v30 + 1344) = 1;
    *(void *)(v37 + 1176) = 0;
    uint64_t v38 = *(WTF::StringImpl **)(v37 + 1184);
    *(void *)(v37 + 1184) = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        uint64_t v38 = (WTF::StringImpl *)WTF::StringImpl::destroy(v38, v22);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
    if (!*a8) {
      a8 = (WTF::StringImpl **)WTF::aboutBlankURL(v38);
    }
    WebKit::FrameLoadState::setURL((WebKit::FrameLoadState *)(v20 + 40), (const WTF::URL *)a8);
    WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(void *)(a1 + 32) + 976), v39, v40);
    if (v33)
    {
      uint64_t v43 = *(void *)(a1 + 72);
      int v44 = *(atomic_uint **)(a1 + 256);
      atomic_fetch_add(v44 + 4, 1u);
      uint64_t v45 = *a9;
      if (*a9) {
        CFRetain(v45[1]);
      }
      WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v44, (API::Object *)v45, &v51);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v43 + 144))(v43, a1, v28, a7, v51);
      uint64_t v46 = v51;
      uint64_t v51 = 0;
      if (v46) {
        CFRelease(*(CFTypeRef *)(v46 + 8));
      }
      if (v45) {
        CFRelease(v45[1]);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v44 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 1312))(v18, a7);
    }
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v41, v42);
    if (v28) {
      CFRelease(*(CFTypeRef *)(v28 + 8));
    }
    goto LABEL_37;
  }
  uint64_t v49 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didSameDocumentNavigationForFrame(IPC::Connection &, FrameIdentifier"
                         ", std::optional<WebCore::NavigationIdentifier>, SameDocumentNavigationType, URL &&, const UserData &)";
    _os_log_fault_impl(&dword_1985F2000, v49, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6922: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  uint64_t v50 = *(void *)(*(void *)(a1 + 256) + 144);
  if (v50)
  {
    *(unsigned char *)(v50 + 98) = 1;
LABEL_37:
    CFRelease(*(CFTypeRef *)(v20 + 8));
    return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 1600))(v18);
  }
  uint64_t result = 130;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebPageProxy::didSameDocumentNavigationForFrameViaJSHistoryAPI(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, CFTypeRef **a6)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 1592))(v13);
  uint64_t v14 = *(void *)(a5 + 2104);
  uint64_t v15 = WebKit::WebFrameProxy::webFrame(v14, *(void *)(a5 + 2112));
  if (v15)
  {
    uint64_t v16 = v15;
    CFRetain(*(CFTypeRef *)(v15 + 8));
    if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *(WebKit::WebProcessProxy **)(a1 + 256), (const WTF::URL *)a4))
    {
      uint64_t v17 = qword_1EB358050;
      if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void *)(a1 + 32);
        uint64_t v20 = *(void *)(v19 + 760);
        uint64_t v21 = *(void *)(v19 + 1928);
        uint64_t v22 = *(void *)(*(void *)(a1 + 256) + 136);
        if (v22) {
          LODWORD(v22) = *(_DWORD *)(v22 + 108);
        }
        int v23 = *(unsigned __int8 *)(v16 + 441);
        *(_DWORD *)long long buf = 134219520;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v20;
        __int16 v58 = 2048;
        uint64_t v59 = v21;
        __int16 v60 = 1024;
        int v61 = v22;
        __int16 v62 = 2048;
        uint64_t v63 = v14;
        __int16 v64 = 1024;
        int v65 = v23;
        __int16 v66 = 1024;
        int v67 = a3;
        _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didSameDocumentNavigationForFrameViaJSHistoryAPI: frameID=%llu, isMainFrame=%d, type=%u", buf, 0x3Cu);
      }
      if (!*(unsigned char *)(v16 + 441))
      {
        uint64_t v30 = 0;
LABEL_24:
        uint64_t v32 = *(void *)(a1 + 32);
        uint64_t v33 = *(void *)(*(void *)(v32 + 992) + 8);
        if (v33)
        {
          uint64_t v34 = v33 - 16;
          CFRetain(*(CFTypeRef *)(v33 - 8));
        }
        else
        {
          uint64_t v34 = 0;
        }
        *(void *)long long buf = v34;
        *(void *)&buf[8] = v32 + 976;
        ++*(_DWORD *)(v32 + 1348);
        int v35 = *(unsigned __int8 *)(v16 + 441);
        if (*(unsigned char *)(v16 + 441))
        {
          uint64_t v36 = *(void *)(a1 + 32);
          *(unsigned char *)(v32 + 1344) = 1;
          WTF::String::operator=((uint64_t *)(v36 + 1200), a4);
        }
        if (*(unsigned char *)(a1 + 898))
        {
          uint64_t v37 = *(CFTypeRef **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24))
                              + 320);
          if (v37)
          {
            CFRetain(v37[1]);
            WebKit::WebAutomationSession::navigationOccurredForFrame((WebKit::WebAutomationSession *)v37, (const WebKit::WebFrameProxy *)v16, v38);
            CFRelease(v37[1]);
          }
        }
        uint64_t v39 = *(void *)(a1 + 32);
        *(unsigned char *)(v32 + 1344) = 1;
        *(void *)(v39 + 1176) = 0;
        uint64_t v40 = *(WTF::StringImpl **)(v39 + 1184);
        *(void *)(v39 + 1184) = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2) {
            uint64_t v40 = (WTF::StringImpl *)WTF::StringImpl::destroy(v40, v18);
          }
          else {
            *(_DWORD *)v40 -= 2;
          }
        }
        if (!*a4) {
          a4 = (WTF::StringImpl **)WTF::aboutBlankURL(v40);
        }
        WebKit::FrameLoadState::setURL((WebKit::FrameLoadState *)(v16 + 40), (const WTF::URL *)a4);
        WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(void *)(a1 + 32) + 976), v41, v42);
        if (v35)
        {
          uint64_t v45 = *(void *)(a1 + 72);
          uint64_t v46 = *(atomic_uint **)(a1 + 256);
          atomic_fetch_add(v46 + 4, 1u);
          __int16 v47 = *a6;
          if (v47) {
            CFRetain(v47[1]);
          }
          WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v46, (API::Object *)v47, &v56);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v45 + 144))(v45, a1, v30, a3, v56);
          uint64_t v48 = v56;
          uint64_t v56 = 0;
          if (v48) {
            CFRelease(*(CFTypeRef *)(v48 + 8));
          }
          if (v47) {
            CFRelease(v47[1]);
          }
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v46 + 4);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 1312))(v13, a3);
        }
        if (v30)
        {
          WebKit::WebNavigationState::didDestroyNavigation(*(void *)(a1 + 160), *(void *)(v30 + 24), *(void *)(v30 + 16));
          WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v49, v50);
          CFRelease(*(CFTypeRef *)(v30 + 8));
        }
        else
        {
          WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v43, v44);
        }
        goto LABEL_48;
      }
      uint64_t v24 = *(void *)(a1 + 160);
      uint64_t v25 = *(void *)(*(void *)(a1 + 256) + 176);
      WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)buf, (const String *)a4, 0);
      CFTypeRef cf = 0;
      uint64_t v26 = *(void *)(a1 + 664);
      uint64_t v27 = *(void *)(v26 + 16);
      if (!v27 || !*(void *)(v27 + 8) || !*(unsigned char *)(v26 + 48))
      {
        uint64_t v29 = 0;
LABEL_18:
        uint64_t v55 = v29;
        WebKit::WebNavigationState::createLoadRequestNavigation(&v56, v24, v25, (uint64_t)buf, &v55);
        uint64_t v30 = v56;
        if (v55) {
          CFRelease(*(CFTypeRef *)(v55 + 8));
        }
        CFTypeRef v31 = cf;
        CFTypeRef cf = 0;
        if (v31) {
          CFRelease(v31);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
        WebKit::NavigationActionData::operator=(v30 + 512, a5);
        goto LABEL_24;
      }
      unint64_t v28 = *(void *)(v26 + 40);
      if (v28 < *(unsigned int *)(v26 + 36))
      {
        uint64_t v29 = *(void *)(*(void *)(v26 + 24) + 8 * v28);
        if (v29) {
          CFRetain(*(CFTypeRef *)(v29 + 8));
        }
        goto LABEL_18;
      }
    }
    else
    {
      __int16 v53 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didSameDocumentNavigationForFrameViaJSHistoryAPI(IPC::Connection"
                             " &, SameDocumentNavigationType, URL, NavigationActionData &&, const UserData &)";
        _os_log_fault_impl(&dword_1985F2000, v53, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6961: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      uint64_t v54 = *(void *)(*(void *)(a1 + 256) + 144);
      if (v54)
      {
        *(unsigned char *)(v54 + 98) = 1;
LABEL_48:
        CFRelease(*(CFTypeRef *)(v16 + 8));
        return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 1600))(v13);
      }
    }
    __break(0xC471u);
    JUMPOUT(0x198E7604CLL);
  }
  uint64_t v52 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didSameDocumentNavigationForFrameViaJSHistoryAPI(IPC::Connection &, "
                         "SameDocumentNavigationType, URL, NavigationActionData &&, const UserData &)";
    _os_log_fault_impl(&dword_1985F2000, v52, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6960: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  *(unsigned char *)(a2 + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 1600))(v13);
}

uint64_t WebKit::WebPageProxy::didReceiveTitleForFrame(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *((void *)a1 + 5);
  if (v10) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 1592))(v11);
  uint64_t v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    uint64_t v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    uint64_t v14 = *((void *)a1 + 4);
    uint64_t v15 = *(void *)(*(void *)(v14 + 992) + 8);
    if (v15)
    {
      uint64_t v16 = v15 - 16;
      CFRetain(*(CFTypeRef *)(v15 - 8));
    }
    else
    {
      uint64_t v16 = 0;
    }
    v35[0] = v16;
    v35[1] = v14 + 976;
    ++*(_DWORD *)(v14 + 1348);
    if (*(unsigned char *)(v13 + 441))
    {
      uint64_t v17 = *((void *)a1 + 4);
      *(unsigned char *)(v14 + 1344) = 1;
      uint64_t v18 = WTF::String::operator=((uint64_t *)(v17 + 1248), a5);
      if ((PAL::deviceClassIsSmallScreen((PAL *)v18) & 1) == 0 && !*(void *)(*((void *)a1 + 4) + 1944))
      {
        uint64_t v26 = *(WTF **)(v13 + 232);
        if (v26)
        {
          if ((WTF::equal(v26, *a5, v19) & 1) == 0)
          {
            uint64_t v27 = qword_1EB358730;
            if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v28 = *((void *)a1 + 4);
              uint64_t v29 = *(void *)(v28 + 760);
              uint64_t v30 = *(void *)(v28 + 1928);
              uint64_t v31 = *(void *)(*((void *)a1 + 32) + 136);
              if (v31) {
                LODWORD(v31) = *(_DWORD *)(v31 + 108);
              }
              *(_DWORD *)long long buf = 134218752;
              uint64_t v37 = a1;
              __int16 v38 = 2048;
              uint64_t v39 = v29;
              __int16 v40 = 2048;
              uint64_t v41 = v30;
              __int16 v42 = 1024;
              int v43 = v31;
              _os_log_impl(&dword_1985F2000, v27, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didReceiveTitleForFrame: This page updates its title without user interaction and is allowed to run in the background", buf, 0x26u);
            }
            uint64_t v32 = *((void *)a1 + 32) + 200;
            uint64_t v33 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
            WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v33, v32, "Page updates its title", 23, 0, 0);
            std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*((void *)a1 + 4) + 1944), v33);
          }
        }
      }
    }
    WTF::String::operator=((uint64_t *)(v13 + 232), a5);
    WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*((void *)a1 + 4) + 976), v20, v21);
    if (*(unsigned char *)(v13 + 441))
    {
      uint64_t v24 = (Inspector::RemoteControllableTarget *)*((void *)a1 + 144);
      if (v24) {
        Inspector::RemoteControllableTarget::update(v24);
      }
    }
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v35, v22, v23);
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    uint64_t v34 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v37 = "void WebKit::WebPageProxy::didReceiveTitleForFrame(IPC::Connection &, FrameIdentifier, const String &, const UserData &)";
      _os_log_fault_impl(&dword_1985F2000, v34, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7061: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 1600))(v11);
}

uint64_t WebKit::WebPageProxy::didFirstVisuallyNonEmptyLayoutForFrame(WebKit::WebPageProxy *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef **a5, double a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *((void *)a1 + 5);
  if (v12) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 1592))(v13);
  uint64_t v14 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v14)
  {
    uint64_t v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    uint64_t v16 = *((void *)a1 + 7);
    if (v16)
    {
      uint64_t v17 = (atomic_uint *)*((void *)a1 + 32);
      atomic_fetch_add(v17 + 4, 1u);
      uint64_t v18 = *a5;
      if (v18) {
        CFRetain(v18[1]);
      }
      WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v17, (API::Object *)v18, (uint64_t *)v23);
      (*(void (**)(uint64_t, WebKit::WebPageProxy *, uint64_t, void))(*(void *)v16 + 56))(v16, a1, v15, *(void *)v23);
      uint64_t v19 = *(void *)v23;
      *(void *)int v23 = 0;
      if (v19) {
        CFRelease(*(CFTypeRef *)(v19 + 8));
      }
      if (v18) {
        CFRelease(v18[1]);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v17 + 4);
    }
    if (*(unsigned char *)(v15 + 441)) {
      (*(void (**)(uint64_t))(*(void *)v13 + 1288))(v13);
    }
    uint64_t v20 = *((void *)a1 + 23);
    if (v20 && *(double *)(v20 + 8) == 0.0)
    {
      *(double *)(v20 + 8) = a6;
      WebKit::WebPageProxy::generatePageLoadingTimingSoon(a1);
    }
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  else
  {
    uint64_t v22 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int v23 = 136446210;
      *(void *)&v23[4] = "void WebKit::WebPageProxy::didFirstVisuallyNonEmptyLayoutForFrame(IPC::Connection &, FrameIde"
                           "ntifier, const UserData &, WallTime)";
      _os_log_fault_impl(&dword_1985F2000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7110: Invalid message dispatched %{public}s", v23, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 1600))(v13);
}

uint64_t WebKit::WebPageProxy::didDisplayInsecureContentForFrame(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef **a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1[5];
  if (v10) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 1592))(v11);
  uint64_t v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    uint64_t v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    uint64_t v16 = a1[4];
    uint64_t v17 = *(void *)(*(void *)(v16 + 992) + 8);
    if (v17)
    {
      uint64_t v18 = v17 - 16;
      CFRetain(*(CFTypeRef *)(v17 - 8));
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = a1[4];
    *(void *)&long long buf = v18;
    *((void *)&buf + 1) = v16 + 976;
    ++*(_DWORD *)(v16 + 1348);
    *(unsigned char *)(v16 + 1344) = 1;
    *(unsigned char *)(v19 + 1169) = 1;
    WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(v19 + 976), v14, v15);
    uint64_t v20 = a1[9];
    uint64_t v21 = (atomic_uint *)a1[32];
    atomic_fetch_add(v21 + 4, 1u);
    uint64_t v22 = *a5;
    if (v22) {
      CFRetain(v22[1]);
    }
    WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v21, (API::Object *)v22, &v28);
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v20 + 168))(v20, a1, v28);
    uint64_t v23 = v28;
    uint64_t v28 = 0;
    if (v23) {
      CFRelease(*(CFTypeRef *)(v23 + 8));
    }
    if (v22) {
      CFRelease(v22[1]);
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v21 + 4);
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&buf, v24, v25);
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    uint64_t v27 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebPageProxy::didDisplayInsecureContentForFrame(IPC::Connection &, Fr"
                                      "ameIdentifier, const UserData &)";
      _os_log_fault_impl(&dword_1985F2000, v27, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7153: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 1600))(v11);
}

uint64_t WebKit::WebPageProxy::didRunInsecureContentForFrame(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef **a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1[5];
  if (v10) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 1592))(v11);
  uint64_t v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    uint64_t v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    uint64_t v16 = a1[4];
    uint64_t v17 = *(void *)(*(void *)(v16 + 992) + 8);
    if (v17)
    {
      uint64_t v18 = v17 - 16;
      CFRetain(*(CFTypeRef *)(v17 - 8));
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = a1[4];
    *(void *)&long long buf = v18;
    *((void *)&buf + 1) = v16 + 976;
    ++*(_DWORD *)(v16 + 1348);
    *(unsigned char *)(v16 + 1344) = 1;
    *(unsigned char *)(v19 + 1169) = 1;
    WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(v19 + 976), v14, v15);
    uint64_t v20 = a1[9];
    uint64_t v21 = (atomic_uint *)a1[32];
    atomic_fetch_add(v21 + 4, 1u);
    uint64_t v22 = *a5;
    if (v22) {
      CFRetain(v22[1]);
    }
    WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v21, (API::Object *)v22, &v28);
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v20 + 176))(v20, a1, v28);
    uint64_t v23 = v28;
    uint64_t v28 = 0;
    if (v23) {
      CFRelease(*(CFTypeRef *)(v23 + 8));
    }
    if (v22) {
      CFRelease(v22[1]);
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v21 + 4);
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&buf, v24, v25);
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    uint64_t v27 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebPageProxy::didRunInsecureContentForFrame(IPC::Connection &, FrameI"
                                      "dentifier, const UserData &)";
      _os_log_fault_impl(&dword_1985F2000, v27, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7167: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 1600))(v11);
}

uint64_t WebKit::WebPageProxy::mainFramePluginHandlesPageScaleGestureDidChange(uint64_t this, int a2, double a3, double a4)
{
  *(unsigned char *)(this + 929) = a2;
  if (a2)
  {
    *(double *)(this + 728) = a3;
    *(double *)(this + 736) = a4;
  }
  return this;
}

void WebKit::WebPageProxy::decidePolicyForNavigationActionAsync(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(atomic_uint **)(a1 + 256);
  atomic_fetch_add(v3 + 4, 1u);
  uint64_t v4 = v3;
  WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(a1, (WebKit::WebProcessProxy **)&v4, a2, a3);
  if (v3)
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v3 + 4);
  }
}

void WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = WebKit::WebFrameProxy::webFrame(a3[263], a3[264]);
  if (v8)
  {
    uint64_t v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    uint64_t v10 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a3 + 296));
    uint64_t v11 = *(WTF::StringImpl **)v10;
    if (*(void *)v10) {
      *(_DWORD *)v11 += 2;
    }
    uint64_t v12 = *a2;
    long long v13 = *(_OWORD *)(v10 + 8);
    long long v14 = *(_OWORD *)(v10 + 24);
    atomic_fetch_add((atomic_uint *volatile)*a2 + 4, 1u);
    uint64_t v28 = v12;
    uint64_t v15 = *a4;
    *a4 = 0;
    *(void *)&long long buf = v15;
    uint64_t v16 = *a2;
    atomic_fetch_add((atomic_uint *volatile)v16 + 4, 1u);
    uint64_t v30 = v11;
    long long v31 = v13;
    v32[0] = v14;
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x40);
    *uint64_t v17 = &unk_1EE9DAE10;
    v17[1] = buf;
    void v17[2] = v16;
    long long buf = 0uLL;
    WTF::URL::URL((uint64_t)(v17 + 3), (uint64_t *)&v30);
    uint64_t v27 = v17;
    WebKit::WebPageProxy::decidePolicyForNavigationAction(a1, &v28, v9, (uint64_t)a3, (uint64_t *)&v27);
    if (v27) {
      (*(void (**)(void *))(*v27 + 8))(v27);
    }
    uint64_t v19 = v30;
    uint64_t v30 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t v20 = *((void *)&buf + 1);
    *((void *)&buf + 1) = 0;
    if (v20) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v20 + 16));
    }
    uint64_t v21 = buf;
    *(void *)&long long buf = 0;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    if (v28) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v28 + 4);
    }
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  else
  {
    uint64_t v22 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(Ref<WebProce"
                                      "ssProxy> &&, NavigationActionData &&, CompletionHandler<void (PolicyDecision &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7200: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v23 = *((void *)*a2 + 18);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x198E76E48);
    }
    *(unsigned char *)(v23 + 98) = 1;
    LOWORD(buf) = 0;
    BYTE2(buf) = 2;
    BYTE8(buf) = 0;
    LOBYTE(v30) = 0;
    LOBYTE(v31) = 0;
    BYTE8(v31) = 0;
    LOBYTE(v32[0]) = 0;
    char v33 = 0;
    LOBYTE(v34) = 0;
    char v35 = 0;
    char v36 = 0;
    char v38 = 0;
    uint64_t v24 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v24 + 16))(v24, &buf);
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    if (v38)
    {
      uint64_t v26 = v37;
      uint64_t v37 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v25);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
    }
    if (v35) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v34);
    }
    if (v33) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v32, v25);
    }
  }
}

void WebKit::WebPageProxy::decidePolicyForNavigationAction(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v343 = *MEMORY[0x1E4F143B8];
  __int16 v334 = *(_WORD *)(a4 + 1856);
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v335[0].m_impl.m_ptr, (const String *)(a4 + 1864));
  v337[0] = 0;
  int v339 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v337, a4 + 2064);
  uint64_t v7 = *(WTF::StringImpl **)(a4 + 2096);
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  long long v8 = *(_OWORD *)(a4 + 2104);
  v342[0] = *(_OWORD *)(a4 + 2120);
  *(_OWORD *)((char *)v342 + 14) = *(_OWORD *)(a4 + 2134);
  v340 = v7;
  long long v341 = v8;
  uint64_t v9 = *(void *)(a4 + 2152);
  int v10 = *(unsigned __int8 *)(a4 + 2160);
  __int16 v326 = *(_WORD *)(a4 + 1544);
  WebCore::ResourceRequest::ResourceRequest(v327, (const String *)(a4 + 1552));
  v329[0] = 0;
  int v330 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v329, a4 + 1752);
  uint64_t v11 = *(WTF::StringImpl **)(a4 + 1784);
  if (v11) {
    *(_DWORD *)v11 += 2;
  }
  uint64_t v12 = buf;
  v331 = v11;
  *(_OWORD *)v333 = *(_OWORD *)(a4 + 1808);
  *(_OWORD *)&v333[14] = *(_OWORD *)(a4 + 1822);
  long long v332 = *(_OWORD *)(a4 + 1792);
  uint64_t v269 = *(void *)(a4 + 1840);
  int v271 = *(unsigned __int8 *)(a4 + 1848);
  WebCore::ResourceRequest::ResourceRequest(v293, (const String *)(a4 + 2168));
  WebCore::ResourceRequest::ResourceRequest(v291, (const String *)(a4 + 2368));
  long long v13 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void *)(v14 + 760);
    uint64_t v16 = *(void *)(v14 + 1928);
    uint64_t v17 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v17) {
      LODWORD(v17) = *(_DWORD *)(v17 + 108);
    }
    uint64_t v18 = *(void *)(a3 + 272);
    int v19 = *(unsigned __int8 *)(a3 + 441);
    if (v10) {
      uint64_t v20 = v9;
    }
    else {
      uint64_t v20 = 0;
    }
    *(_DWORD *)long long buf = 134219520;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v15;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&long long v303 = v16;
    WORD4(v303) = 1024;
    *(_DWORD *)((char *)&v303 + 10) = v17;
    HIWORD(v303) = 2048;
    *(void *)&long long v304 = v18;
    WORD4(v304) = 1024;
    uint64_t v12 = buf;
    *(_DWORD *)((char *)&v304 + 10) = v19;
    HIWORD(v304) = 2048;
    *(void *)&long long v305 = v20;
    _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::decidePolicyForNavigationAction: frameID=%llu, isMainFrame=%d, navigationID=%llu", buf, 0x40u);
  }
  uint64_t v21 = *(void *)(a1 + 40);
  if (v21) {
    uint64_t v22 = *(void *)(v21 + 8);
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v273 = v22;
  (*(void (**)(void))(*(void *)v22 + 1592))();
  uint64_t v25 = *(void *)(a1 + 32);
  uint64_t v26 = *(void *)(*(void *)(v25 + 992) + 8);
  if (v26)
  {
    uint64_t v27 = v26 - 16;
    CFRetain(*(CFTypeRef *)(v26 - 8));
  }
  else
  {
    uint64_t v27 = 0;
  }
  ++*(_DWORD *)(v25 + 1348);
  uint64_t v288 = v27;
  uint64_t v289 = v25 + 976;
  *(void *)&buf[8] = 0;
  *(void *)long long buf = 0;
  char v290 = 1;
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v23, v24);
  uint64_t v28 = (WTF **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v291);
  char v30 = WTF::equal(*v28, *(const WTF::StringImpl **)(*(void *)(a1 + 32) + 1016), v29);
  char v32 = v30;
  if (v10)
  {
    if ((v30 & 1) == 0)
    {
      uint64_t v33 = *(void *)(a1 + 32);
      *(unsigned char *)(v289 + 368) = 1;
      *(void *)(v33 + 1176) = 0;
      uint64_t v34 = *(WTF::StringImpl **)(v33 + 1184);
      *(void *)(v33 + 1184) = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, v31);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
  }
  char v35 = *a2;
  char v36 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v291);
  if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, v35, v36))
  {
    uint64_t v37 = *a2;
    char v38 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v293);
    if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, v37, v38))
    {
      if (v10)
      {
        uint64_t v39 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(*(void *)(a1 + 160) + 8), v9);
        if (v39)
        {
          __int16 v40 = (WTF::StringImpl *)v39;
          CFRetain(*(CFTypeRef *)(v39 + 8));
          if ((*(unsigned char *)(a4 + 226) & 1) == 0)
          {
            char v41 = *(unsigned char *)(a4 + 64);
            WTF::URL::URL((uint64_t)buf, (uint64_t *)(a4 + 88));
            uint64_t v42 = *(void *)(a4 + 128);
            uint64_t v43 = *(void *)(a4 + 136);
            *(void *)(a4 + 128) = 0;
            *(void *)&long long v304 = v42;
            *((void *)&v304 + 1) = v43;
            long long v44 = *(_OWORD *)(a4 + 160);
            long long v305 = *(_OWORD *)(a4 + 144);
            *(_OWORD *)(a4 + 144) = 0u;
            *(_OWORD *)(a4 + 160) = 0u;
            long long v306 = v44;
            uint64_t v45 = *(const void **)(a4 + 176);
            *(void *)(a4 + 176) = 0;
            v307[0] = v45;
            uint64_t v46 = *(const void **)(a4 + 184);
            *(void *)(a4 + 184) = 0;
            v307[1] = v46;
            __int16 v47 = *(const void **)(a4 + 192);
            *(void *)(a4 + 192) = 0;
            v307[2] = v47;
            uint64_t v48 = *(const void **)(a4 + 200);
            *(void *)(a4 + 200) = 0;
            v307[3] = v48;
            LOBYTE(v308) = 0;
            LOBYTE(v309) = 0;
            if (*(unsigned char *)(a4 + 216))
            {
              uint64_t v237 = *(void *)(a4 + 208);
              *(void *)(a4 + 208) = 0;
              uint64_t v308 = v237;
              LOBYTE(v309) = 1;
            }
            long long v49 = *(_OWORD *)(a4 + 256);
            *(_OWORD *)&v312[16] = *(_OWORD *)(a4 + 272);
            long long v50 = *(_OWORD *)(a4 + 304);
            long long v313 = *(_OWORD *)(a4 + 288);
            *(_OWORD *)v314 = v50;
            long long v51 = *(_OWORD *)(a4 + 240);
            long long v310 = *(_OWORD *)(a4 + 224);
            long long v311 = v51;
            *(_OWORD *)v312 = v49;
            uint64_t v12 = buf;
            *(_DWORD *)&v314[15] = *(_DWORD *)(a4 + 319);
            *(void *)v316 = *(void *)(a4 + 328);
            v316[8] = *(unsigned char *)(a4 + 336);
            *(void *)(a4 + 328) = 0;
            WebKit::NavigationActionData::operator=(a4, (uint64_t)v40 + 512);
            WebCore::ResourceResponseBase::operator=(a4 + 88, (uint64_t)buf);
            uint64_t v52 = *(void *)v316;
            *(void *)v316 = 0;
            __int16 v53 = *(const void **)(a4 + 328);
            *(void *)(a4 + 328) = v52;
            if (v53) {
              CFRelease(v53);
            }
            *(unsigned char *)(a4 + 336) = v316[8];
            *(unsigned char *)(a4 + 64) = v41;
            std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v337, (uint64_t)v40 + 3384);
            uint64_t v55 = *(const void **)v316;
            *(void *)v316 = 0;
            if (v55) {
              CFRelease(v55);
            }
            WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v54);
          }
          goto LABEL_63;
        }
      }
      *(_OWORD *)long long buf = *(_OWORD *)(a4 + 416);
      *(void *)&uint8_t buf[16] = *(void *)(a4 + 432);
      if (!buf[16]) {
        goto LABEL_58;
      }
      uint64_t v61 = WebKit::WebBackForwardList::itemForID(*(WebKit::WebBackForwardListItem **)(a1 + 664), buf);
      if (!v61) {
        goto LABEL_58;
      }
      __int16 v62 = (IPC::Encoder *)v61;
      CFRetain(*(CFTypeRef *)(v61 + 8));
      if (*(unsigned char *)(a4 + 456))
      {
        uint64_t v63 = WebKit::WebBackForwardList::itemForID(*(WebKit::WebBackForwardListItem **)(a1 + 664), (void *)(a4 + 440));
        if (v63) {
          goto LABEL_45;
        }
      }
      uint64_t v64 = *(void *)(a1 + 664);
      uint64_t v65 = *(void *)(v64 + 16);
      if (v65 && *(void *)(v65 + 8) && *(unsigned char *)(v64 + 48))
      {
        unint64_t v66 = *(void *)(v64 + 40);
        if (v66 >= *(unsigned int *)(v64 + 36))
        {
          __break(0xC471u);
          goto LABEL_345;
        }
        uint64_t v63 = *(void *)(*(void *)(v64 + 24) + 8 * v66);
        if (v63) {
LABEL_45:
        }
          CFRetain(*(CFTypeRef *)(v63 + 8));
      }
      else
      {
        uint64_t v63 = 0;
      }
      *(void *)&long long v277 = v63;
      uint64_t v67 = *(void *)(a1 + 160);
      uint64_t v68 = *((void *)*a2 + 22);
      v301 = v62;
      WebKit::WebNavigationState::createBackForwardNavigation((uint64_t *)v299, v67, v68, (uint64_t *)&v301, (uint64_t *)&v277, 3);
      __int16 v40 = v299[0];
      if (v301) {
        CFRelease(*((CFTypeRef *)v301 + 1));
      }
      if ((void)v277) {
        CFRelease(*(CFTypeRef *)(v277 + 8));
      }
      if (v40)
      {
LABEL_63:
        uint64_t v72 = *((void *)v40 + 2);
        uint64_t v73 = *(void *)(a1 + 1192);
        if (v73)
        {
          uint64_t v74 = *(void *)(v73 + 40);
          if (*(WebKit::WebProcessProxy **)(v74 + 16) == *a2 && *(void *)(v73 + 88) != v72)
          {
            *(void *)(v73 + 88) = v72;
            *((void *)v40 + 3) = *(void *)(*(void *)(v74 + 16) + 176);
          }
        }
        uint64_t v263 = v72;
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const String *)v291);
        API::Navigation::setCurrentRequest((uint64_t)v40, (uint64_t)buf, *((void *)*a2 + 22));
        __int16 v75 = *(const void **)&v312[24];
        *(void *)&v312[24] = 0;
        if (v75) {
          CFRelease(v75);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
        WebKit::NavigationActionData::operator=((uint64_t)v40 + 512, a4);
        *((_WORD *)v40 + 1544) = v326;
        WebCore::ResourceRequestBase::operator=((uint64_t)v40 + 3096, (uint64_t)v327);
        CFTypeRef v76 = cf;
        if (cf) {
          CFRetain(cf);
        }
        __int16 v77 = (const void *)*((void *)v40 + 411);
        *((void *)v40 + 411) = v76;
        if (v77) {
          CFRelease(v77);
        }
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v40 + 3296, (uint64_t)v329);
        WTF::String::operator=((uint64_t *)v40 + 416, &v331);
        long long v78 = *(_OWORD *)v333;
        *(_OWORD *)((char *)v40 + 3336) = v332;
        *(_OWORD *)((char *)v40 + 3352) = v78;
        *(_OWORD *)((char *)v40 + 3366) = *(_OWORD *)&v333[14];
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v40 + 3384, (uint64_t)v337);
        if (*(unsigned char *)(a4 + 868))
        {
          __int16 v79 = *(_WORD *)(a4 + 866);
          if (!*((unsigned char *)v40 + 3498)) {
            *((unsigned char *)v40 + 3498) = 1;
          }
          *((_WORD *)v40 + 1748) = v79;
        }
        int v266 = *(unsigned __int8 *)(a3 + 441);
        if (*(unsigned char *)(a3 + 441))
        {
          CFRetain(*((CFTypeRef *)v40 + 1));
          __int16 v80 = v40;
        }
        else
        {
          __int16 v80 = 0;
        }
        uint64_t v268 = (uint64_t)v80;
        if ((void)v332)
        {
          uint64_t v81 = WebKit::WebFrameProxy::webFrame(v332, *((uint64_t *)&v332 + 1));
          uint64_t v82 = v81;
          if (v81)
          {
            CFRetain(*(CFTypeRef *)(v81 + 8));
            char v265 = 0;
            goto LABEL_85;
          }
        }
        else
        {
          uint64_t v82 = 0;
        }
        char v265 = 1;
LABEL_85:
        *(_WORD *)long long buf = v334;
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[8], v335);
        BYTE8(v313) = 0;
        *(_DWORD *)&v314[16] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v313 + 8, (uint64_t)v337);
        uint64_t v83 = v340;
        if (v340) {
          *(_DWORD *)v340 += 2;
        }
        *(void *)v316 = v83;
        *(_OWORD *)v317 = v342[0];
        *(_OWORD *)&v317[14] = *(_OWORD *)((char *)v342 + 14);
        *(_OWORD *)&v316[8] = v341;
        CFRetain(*(CFTypeRef *)(a1 + 8));
        *(void *)&long long v277 = a1;
        uint64_t v84 = API::Object::newObject(0x140uLL, 60);
        API::FrameInfo::FrameInfo(v84, (uint64_t)buf, (uint64_t *)&v277);
        if ((void)v277) {
          CFRelease(*(CFTypeRef *)(v277 + 8));
        }
        uint64_t v86 = *(WTF::StringImpl **)v316;
        *(void *)v316 = 0;
        if (v86)
        {
          if (*(_DWORD *)v86 == 2) {
            WTF::StringImpl::destroy(v86, v85);
          }
          else {
            *(_DWORD *)v86 -= 2;
          }
        }
        if (*(_DWORD *)&v314[16] != -1) {
          ((void (*)(long long *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[*(unsigned int *)&v314[16]])(&v277, (char *)&v313 + 8);
        }
        *(_DWORD *)&v314[16] = -1;
        __int16 v87 = (const void *)v313;
        *(void *)&long long v313 = 0;
        if (v87) {
          CFRelease(v87);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
        if (v32)
        {
          uint64_t v267 = 0;
        }
        else if (v82 == a3)
        {
          CFRetain(*(CFTypeRef *)(v84 + 8));
          uint64_t v267 = v84;
        }
        else
        {
          if (v271) {
            WebKit::WebProcessProxy::webPage(v269, (uint64_t *)buf);
          }
          else {
            *(void *)long long buf = 0;
          }
          uint64_t v267 = API::Object::newObject(0x140uLL, 60);
          API::FrameInfo::FrameInfo(v267, (uint64_t)&v326, (uint64_t *)buf);
          if (*(void *)buf) {
            CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
          }
        }
        char v88 = !*(unsigned char *)(a1 + 808)
           && *(unsigned char *)(v84 + 16)
           && (uint64_t v103 = *(void *)(a1 + 328)) != 0
           && (uint64_t v104 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v103 + 48)),
               uint64_t v106 = v105,
               uint64_t v107 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v291),
               uint64_t v108 = (unsigned __int8 *)WTF::URL::host(v107),
               !WTF::operator==(v104, v106, v108, v109))
           && *(unsigned char *)a4 != 2;
        uint64_t v89 = (uint64_t)*a2;
        long long v285 = *(_OWORD *)(a4 + 8);
        uint64_t v286 = *(void *)(a4 + 24);
        WebKit::WebProcessProxy::userInitiatedActivity(v89, (uint64_t)&v285, &v287);
        uint64_t v270 = v82;
        uint64_t v272 = v84;
        if (*(unsigned char *)(a3 + 441) && (uint64_t v90 = *(void *)(a1 + 328)) != 0)
        {
          uint64_t v91 = *(void *)(v90 + 272);
          uint64_t v12 = *(unsigned char **)(v90 + 280);
          unint64_t v92 = v91 & 0xFFFFFFFFFFFFFF00;
          char v93 = 1;
        }
        else
        {
          unint64_t v92 = 0;
          LOBYTE(v91) = 0;
          char v93 = 0;
        }
        v299[0] = 0;
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const String *)v291);
        uint64_t v94 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v293);
        uint64_t v95 = API::Object::newObject(0xB60uLL, 77);
        *(void *)&long long v277 = v91 | v92;
        *((void *)&v277 + 1) = v12;
        char v278 = v93;
        uint64_t v96 = v268;
        uint64_t v97 = a4;
        uint64_t v98 = v267;
        uint64_t v99 = v272;
        v284 = (const String *)API::NavigationAction::NavigationAction(v95, v97, v267, v272, (_DWORD **)v299, (uint64_t)buf, v94, v88, &v287, v268, &v277);
        uint64_t v100 = *(const void **)&v312[24];
        *(void *)&v312[24] = 0;
        if (v100) {
          CFRelease(v100);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
        uint64_t v102 = v270;
        if (v299[0])
        {
          if (*(_DWORD *)v299[0] == 2) {
            WTF::StringImpl::destroy(v299[0], v101);
          }
          else {
            *(_DWORD *)v299[0] -= 2;
          }
        }
        if (WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation((WebKit::WebFrameProxy *)a3, (const WebCore::ResourceRequest *)v291))
        {
          long long v111 = qword_1EB358960;
          if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
          {
            uint64_t v238 = *(void *)(a1 + 32);
            uint64_t v239 = *(void *)(v238 + 760);
            uint64_t v240 = *(void *)(v238 + 1928);
            uint64_t v241 = *(void *)(*(void *)(a1 + 256) + 136);
            if (v241) {
              LODWORD(v241) = *(_DWORD *)(v241 + 108);
            }
            *(_DWORD *)long long buf = 134218752;
            *(void *)&uint8_t buf[4] = a1;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v239;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&long long v303 = v240;
            WORD4(v303) = 1024;
            *(_DWORD *)((char *)&v303 + 10) = v241;
            _os_log_error_impl(&dword_1985F2000, v111, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::Ignoring request to load this main resource because it was handled by content filter", buf, 0x26u);
          }
          uint64_t v112 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(*(void *)(a1 + 160) + 8), v263);
          uint64_t v113 = v112;
          if (v112) {
            CFRetain(*(CFTypeRef *)(v112 + 8));
          }
          *(void *)&long long v277 = 0;
          v282[0] = 0;
          char v283 = 0;
          buf[0] = 0;
          uint8_t buf[16] = 0;
          WebKit::WebPageProxy::receivedPolicyDecision(a1, (WTF::StringImpl *)2, v113, (API::WebsitePolicies **)&v277, &v284, 0, (uint64_t)v282, (__int16 *)buf, a5);
          if (buf[16] && *(void *)&buf[8])
          {
            if (**(_DWORD **)&buf[8] == 2) {
              WTF::StringImpl::destroy(*(WTF::StringImpl **)&buf[8], v114);
            }
            else {
              **(_DWORD **)&buf[8] -= 2;
            }
            uint64_t v96 = v268;
            uint64_t v102 = v270;
            uint64_t v99 = v272;
            uint64_t v98 = v267;
          }
          if (!v283) {
            goto LABEL_128;
          }
          uint64_t v248 = (const char ***)v282;
LABEL_292:
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v248);
LABEL_128:
          if (v113) {
            CFRelease(*(CFTypeRef *)(v113 + 8));
          }
          goto LABEL_224;
        }
        if (!LOBYTE(v284[46].m_impl.m_ptr))
        {
          uint64_t v115 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v291);
          uint64_t v116 = WTF::URL::protocol(v115);
          uint64_t v118 = *(void *)(a1 + 1128);
          if (v118)
          {
            uint64_t v119 = (unsigned __int8 *)v116;
            uint64_t v120 = v117;
            unsigned int v121 = *(_DWORD *)(v118 - 8);
            int v122 = WTF::StringViewHashTranslator::hash(v116, v117);
            for (int i = 0; ; v122 = i + v124)
            {
              int v124 = v122 & v121;
              uint64_t v125 = (uint64_t *)(v118 + 16 * (v122 & v121));
              if (*v125 != -1)
              {
                if (!*v125) {
                  goto LABEL_137;
                }
                if (WTF::StringViewHashTranslator::equal(v125, v119, v120)) {
                  break;
                }
              }
              ++i;
            }
          }
          else
          {
LABEL_137:
            uint64_t v99 = v272;
            if (!*(unsigned char *)(v272 + 16))
            {
              int m_ptr_low = LOWORD(v284[98].m_impl.m_ptr);
              uint64_t v102 = v270;
              if ((~m_ptr_low & 0x4060) == 0 && ((m_ptr_low & 0x400) != 0 || !LOBYTE(v284[41].m_impl.m_ptr)))
              {
                if (!v267) {
                  goto LABEL_285;
                }
                uint64_t v242 = *(void *)(a1 + 272);
                {
                  WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
                  WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
                }
                if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v242 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key, v110)|| (long long v243 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v291), WTF::URL::protocol(v243), (WebCore::Quirks::shouldAllowNavigationToCustomProtocolWithoutUserGesture() & 1) == 0))
                {
LABEL_285:
                  uint64_t v244 = qword_1EB358960;
                  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v253 = *(void *)(a1 + 32);
                    uint64_t v254 = *(void *)(v253 + 760);
                    uint64_t v255 = *(void *)(v253 + 1928);
                    uint64_t v256 = *(void *)(*(void *)(a1 + 256) + 136);
                    if (v256) {
                      LODWORD(v256) = *(_DWORD *)(v256 + 108);
                    }
                    *(_DWORD *)long long buf = 134218752;
                    *(void *)&uint8_t buf[4] = a1;
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&buf[14] = v254;
                    *(_WORD *)&unsigned char buf[22] = 2048;
                    *(void *)&long long v303 = v255;
                    WORD4(v303) = 1024;
                    *(_DWORD *)((char *)&v303 + 10) = v256;
                    _os_log_error_impl(&dword_1985F2000, v244, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::Ignoring request to load this main resource because it has a custom protocol and comes from a sandboxed iframe", buf, 0x26u);
                  }
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  uint64_t v245 = *(void *)buf;
                  uint64_t v246 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(*(void *)(a1 + 160) + 8), v263);
                  uint64_t v113 = v246;
                  if (v246) {
                    CFRetain(*(CFTypeRef *)(v246 + 8));
                  }
                  *(void *)&long long v277 = 0;
                  v280[0] = 0;
                  char v281 = 0;
                  *(_WORD *)long long buf = 2050;
                  *(void *)&buf[8] = v245;
                  uint8_t buf[16] = 1;
                  WebKit::WebPageProxy::receivedPolicyDecision(a1, (WTF::StringImpl *)2, v113, (API::WebsitePolicies **)&v277, &v284, 0, (uint64_t)v280, (__int16 *)buf, a5);
                  if (buf[16] && *(void *)&buf[8])
                  {
                    if (**(_DWORD **)&buf[8] == 2) {
                      WTF::StringImpl::destroy(*(WTF::StringImpl **)&buf[8], v247);
                    }
                    else {
                      **(_DWORD **)&buf[8] -= 2;
                    }
                    uint64_t v96 = v268;
                    uint64_t v102 = v270;
                    uint64_t v99 = v272;
                    uint64_t v98 = v267;
                  }
                  if (!v281) {
                    goto LABEL_128;
                  }
                  uint64_t v248 = (const char ***)v280;
                  goto LABEL_292;
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                char v128 = 0;
                uint64_t v262 = *(WTF::StringImpl **)buf;
                __int16 v127 = 2049;
LABEL_142:
                uint64_t v129 = *(void *)(a1 + 272);
                {
                  WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
                  WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
                }
                int BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v129 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key, v110);
                {
                  if (dword_1EB35A4E4)
                  {
                    if (*(unsigned char *)(a1 + 1376)) {
                      WebKit::WebPageProxy::sendCachedLinkDecorationFilteringData((WebKit::WebPageProxy *)a1);
                    }
                    int v133 = 0;
                  }
                  else
                  {
                    int v133 = 1;
                  }
                }
                else
                {
                  qword_1EB35A4F0 = 0;
                  WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
                  unk_1EB35A4E0 = 0u;
                  int v133 = 1;
                }
                if (v290)
                {
                  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v288, v130, v131);
                  char v290 = 0;
                }
                *(void *)long long buf = a1;
                CFRetain(*(CFTypeRef *)(a1 + 8));
                *(void *)&buf[8] = a1;
                uint64_t v134 = *a2;
                atomic_fetch_add((atomic_uint *volatile)*a2 + 4, 1u);
                *(void *)&uint8_t buf[16] = v134;
                CFRetain(*(CFTypeRef *)(a3 + 8));
                uint64_t v135 = *a5;
                *a5 = 0;
                *(void *)&long long v303 = a3;
                *((void *)&v303 + 1) = v135;
                CFRetain(*((CFTypeRef *)v40 + 1));
                *(void *)&long long v304 = v40;
                uint64_t v136 = v284;
                CFRetain(v284[1].m_impl.m_ptr);
                *((void *)&v304 + 1) = v136;
                LOBYTE(v305) = 0;
                LOBYTE(v306) = 0;
                char v264 = v128;
                if ((v128 & 1) == 0)
                {
                  LOWORD(v305) = v127;
                  *((void *)&v305 + 1) = v262;
                  LOBYTE(v306) = 1;
                  uint64_t v262 = 0;
                }
                WORD4(v306) = v334;
                WebCore::ResourceRequest::ResourceRequest(v307, v335);
                v317[24] = 0;
                int v318 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v317[24], (uint64_t)v337);
                uint64_t v137 = v340;
                if (v340) {
                  *(_DWORD *)v340 += 2;
                }
                v319 = v137;
                long long v320 = v341;
                v321[0] = v342[0];
                *(_OWORD *)((char *)v321 + 14) = *(_OWORD *)((char *)v342 + 14);
                uint64_t v138 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v291);
                uint64_t v139 = *(_DWORD **)v138;
                if (*(void *)v138) {
                  *v139 += 2;
                }
                v322 = v139;
                long long v140 = *(_OWORD *)(v138 + 24);
                long long v323 = *(_OWORD *)(v138 + 8);
                long long v324 = v140;
                uint64_t v141 = *(void *)(a1 + 40);
                if (v141) {
                  uint64_t v142 = *(void *)(v141 + 8);
                }
                else {
                  uint64_t v142 = 0;
                }
                (*(void (**)(uint64_t))(*(void *)v142 + 1592))(v142);
                uint64_t v325 = v142;
                uint64_t v143 = WTF::fastMalloc((WTF *)0x1B0);
                uint64_t v144 = v143;
                *(void *)uint64_t v143 = &unk_1EE9DAE60;
                *(void *)(v143 + 8) = *(void *)buf;
                *(void *)(v143 + 16) = *(void *)&buf[8];
                uint64_t v145 = *(void *)&buf[16];
                *(_OWORD *)&buf[8] = 0u;
                *(void *)(v143 + 24) = v145;
                *(void *)(v143 + 32) = v303;
                uint64_t v146 = *((void *)&v303 + 1);
                long long v303 = 0u;
                *(void *)(v143 + 40) = v146;
                *(void *)(v143 + 48) = v304;
                uint64_t v147 = *((void *)&v304 + 1);
                long long v304 = 0u;
                *(void *)(v143 + 56) = v147;
                *(unsigned char *)(v143 + 64) = 0;
                *(unsigned char *)(v143 + 80) = 0;
                if ((_BYTE)v306)
                {
                  *(_WORD *)(v143 + 64) = v305;
                  uint64_t v260 = *((void *)&v305 + 1);
                  *((void *)&v305 + 1) = 0;
                  *(void *)(v143 + 72) = v260;
                  *(unsigned char *)(v143 + 80) = 1;
                }
                *(_WORD *)(v143 + 88) = WORD4(v306);
                WTF::URL::URL(v143 + 96, (uint64_t *)v307);
                WTF::URL::URL(v144 + 136, &v309);
                *(void *)(v144 + 176) = *(void *)v312;
                *(void *)(v144 + 184) = *(void *)&v312[8];
                uint64_t v148 = *(void *)&v312[16];
                *(_OWORD *)&v312[8] = 0u;
                *(void *)(v144 + 192) = v148;
                uint64_t v149 = *(void *)&v312[24];
                *(void *)&v312[24] = 0;
                *(void *)(v144 + 200) = v149;
                uint64_t v150 = v313;
                *(void *)&long long v313 = 0;
                *(void *)(v144 + 208) = v150;
                uint64_t v151 = *((void *)&v313 + 1);
                *((void *)&v313 + 1) = 0;
                *(void *)(v144 + 216) = v151;
                uint64_t v152 = *(void *)v314;
                *(void *)v314 = 0;
                *(void *)(v144 + 224) = v152;
                uint64_t v153 = *(void *)&v314[8];
                *(void *)&v314[8] = 0;
                *(void *)(v144 + 232) = v153;
                LODWORD(v152) = *(_DWORD *)&v314[16];
                *(unsigned char *)(v144 + 244) = v315;
                *(_DWORD *)(v144 + 240) = v152;
                *(void *)(v144 + 248) = *(void *)v316;
                uint64_t v154 = *(void *)&v316[8];
                *(_OWORD *)v316 = 0u;
                *(void *)(v144 + 256) = v154;
                *(void *)(v144 + 264) = *(void *)&v316[16];
                uint64_t v155 = *(void *)v317;
                *(unsigned char *)(v144 + 280) = v317[8];
                *(void *)(v144 + 272) = v155;
                uint64_t v156 = *(void *)&v317[16];
                *(void *)&v316[16] = 0;
                *(void *)&v317[16] = 0;
                *(void *)(v144 + 288) = v156;
                *(unsigned char *)(v144 + 296) = 0;
                *(_DWORD *)(v144 + 320) = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v144 + 296, (uint64_t)&v317[24]);
                __int16 v157 = v319;
                v319 = 0;
                *(void *)(v144 + 328) = v157;
                long long v158 = *(_OWORD *)((char *)v321 + 14);
                long long v159 = v321[0];
                *(_OWORD *)(v144 + 336) = v320;
                *(_OWORD *)(v144 + 352) = v159;
                *(_OWORD *)(v144 + 366) = v158;
                WTF::URL::URL(v144 + 384, (uint64_t *)&v322);
                uint64_t v160 = v325;
                uint64_t v325 = 0;
                *(void *)(v144 + 424) = v160;
                *(void *)&long long v277 = v144;
                __int16 v161 = (CFTypeRef *)WebKit::WebFrameProxy::setUpPolicyListenerProxy(a3, (uint64_t *)&v277, BoolValueForKey, 1, v133);
                CFRetain(v161[1]);
                v279 = (WebKit::WebFramePolicyListenerProxy *)v161;
                if ((void)v277) {
                  (*(void (**)(void))(*(void *)v277 + 8))(v277);
                }
                WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0((uint64_t)buf, v162);
                uint64_t v96 = v268;
                uint64_t v102 = v270;
                if (BoolValueForKey)
                {
                  uint64_t v163 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v291);
                  WebKit::WebPageProxy::beginSafeBrowsingCheck((WebKit::WebPageProxy *)a1, v163, *(unsigned char *)(a3 + 441), (CFTypeRef *)v279);
                }
                if (v133)
                {
                  __int16 v164 = v279;
                  {
                    qword_1EB35A4F0 = 0;
                    WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
                    unk_1EB35A4E0 = 0u;
                  }
                  CFRetain(*((CFTypeRef *)v279 + 1));
                  uint64_t v165 = (void *)WTF::fastMalloc((WTF *)0x10);
                  *uint64_t v165 = &unk_1EE9DBBA0;
                  v165[1] = v164;
                  *(void *)long long buf = v165;
                  WebKit::LinkDecorationFilteringController::updateStrings((uint64_t)&WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance, (uint64_t *)buf);
                  uint64_t v166 = *(void *)buf;
                  *(void *)long long buf = 0;
                  if (v166) {
                    (*(void (**)(uint64_t))(*(void *)v166 + 8))(v166);
                  }
                }
                if (*(unsigned char *)(a3 + 441)
                  || (char v167 = (WebKit *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v291),
                      !WebKit::shouldTreatURLProtocolAsAppBound(v167, (const WTF::URL *)*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 312) + 208)+ 472))))
                {
                  uint64_t v178 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v291);
                  WTF::URL::host(v178);
                  unint64_t v173 = v179;
                  v180 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v291);
                  WTF::URL::protocol(v180);
                  unint64_t v177 = v181;
                }
                else
                {
                  if (v339)
                  {
                    if (v339 != 1)
                    {
                      std::__throw_bad_variant_access[abi:sn180100]();
                      goto LABEL_328;
                    }
                    long long v168 = (uint64_t *)MEMORY[0x1E4F30980];
                    uint64_t v96 = v268;
                    uint64_t v102 = v270;
                  }
                  else
                  {
                    long long v168 = &v338;
                  }
                  uint64_t v169 = *v168;
                  if (v169)
                  {
                    unint64_t v170 = *(unsigned int *)(v169 + 16);
                    LODWORD(v169) = *(_DWORD *)(v169 + 4);
                    uint64_t v171 = (v170 >> 2) & 1;
                  }
                  else
                  {
                    uint64_t v171 = 1;
                  }
                  char v172 = (uint64_t *)v337;
                  if (v339) {
                    char v172 = (uint64_t *)MEMORY[0x1E4F30980];
                  }
                  unint64_t v173 = v169 | (unint64_t)(v171 << 32);
                  uint64_t v174 = *v172;
                  if (*v172)
                  {
                    unint64_t v175 = *(unsigned int *)(v174 + 16);
                    LODWORD(v174) = *(_DWORD *)(v174 + 4);
                    uint64_t v176 = (v175 >> 2) & 1;
                  }
                  else
                  {
                    uint64_t v176 = 1;
                  }
                  unint64_t v177 = v174 | (unint64_t)(v176 << 32);
                }
                long long v182 = *(CFTypeRef **)(a1 + 312);
                CFRetain(v182[1]);
                if ((v173 & 0xFF00000000) != 0) {
                  WTF::String::String();
                }
                else {
                  WTF::String::String();
                }
                if ((v177 & 0xFF00000000) != 0) {
                  WTF::String::String();
                }
                else {
                  WTF::String::String();
                }
                uint64_t v98 = v267;
                WebKit::WebsiteDataStore::beginAppBoundDomainCheck((WebKit::WebsiteDataStore *)v182, (const WTF::String *)buf, (const WTF::String *)&v277, (CFTypeRef *)v279);
                int v184 = (WTF::StringImpl *)v277;
                *(void *)&long long v277 = 0;
                if (v184)
                {
                  if (*(_DWORD *)v184 == 2) {
                    WTF::StringImpl::destroy(v184, v183);
                  }
                  else {
                    *(_DWORD *)v184 -= 2;
                  }
                }
                __int16 v185 = *(WTF::StringImpl **)buf;
                *(void *)long long buf = 0;
                if (v185)
                {
                  if (*(_DWORD *)v185 == 2) {
                    WTF::StringImpl::destroy(v185, v183);
                  }
                  else {
                    *(_DWORD *)v185 -= 2;
                  }
                }
                CFRelease(v182[1]);
                if (*((unsigned char *)v40 + 3480)) {
                  BOOL v186 = 1;
                }
                else {
                  BOOL v186 = *((unsigned char *)v40 + 536) != 0;
                }
                if (!WebKit::WebPageProxy::isAlwaysOnLoggingAllowed((WebKit::WebPageProxy *)a1))
                {
LABEL_213:
                  uint64_t v196 = *(void *)(a1 + 64);
                  if (v196)
                  {
                    (*(void (**)(uint64_t, uint64_t, uint64_t, const String **, uint64_t, CFTypeRef *, CFTypeRef *, WebKit::WebFramePolicyListenerProxy **))(*(void *)v196 + 16))(v196, a1, a3, &v284, v102, v293, v291, &v279);
                    uint64_t v99 = v272;
                  }
                  else
                  {
                    uint64_t v99 = v272;
                    if (*(unsigned char *)(a1 + 809)) {
                      goto LABEL_219;
                    }
                    uint64_t v198 = *(void *)(a1 + 272);
                    {
                      WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
                      WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
                    }
                    if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v198 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, v187) & 1) == 0)LABEL_219:BYTE1(v284[35].m_impl.m_ptr) = 0; {
                    (*(void (**)(void, uint64_t, const String **, WebKit::WebFramePolicyListenerProxy **))(**(void **)(a1 + 72) + 296))(*(void *)(a1 + 72), a1, &v284, &v279);
                    }
                  }
                  *(_WORD *)(a1 + 808) = 0;
                  char v199 = v279;
                  v279 = 0;
                  if (v199) {
                    CFRelease(*((CFTypeRef *)v199 + 1));
                  }
                  if ((v264 & 1) != 0 || !v262) {
                    goto LABEL_224;
                  }
                  if (*(_DWORD *)v262 != 2)
                  {
                    *(_DWORD *)v262 -= 2;
LABEL_329:
                    uint64_t v96 = v268;
                    uint64_t v102 = v270;
                    uint64_t v99 = v272;
                    uint64_t v98 = v267;
LABEL_224:
                    long long v200 = v284;
                    v284 = 0;
                    if (v200) {
                      CFRelease(v200[1].m_impl.m_ptr);
                    }
                    uint64_t v201 = v287;
                    uint64_t v287 = 0;
                    uint64_t v60 = v273;
                    if (v201) {
                      CFRelease(*(CFTypeRef *)(v201 + 8));
                    }
                    if (v98) {
                      CFRelease(*(CFTypeRef *)(v98 + 8));
                    }
                    if (v99) {
                      CFRelease(*(CFTypeRef *)(v99 + 8));
                    }
                    if ((v265 & 1) == 0) {
                      CFRelease(*(CFTypeRef *)(v102 + 8));
                    }
                    if (v266) {
                      CFRelease(*(CFTypeRef *)(v96 + 8));
                    }
                    CFRelease(*((CFTypeRef *)v40 + 1));
                    goto LABEL_237;
                  }
LABEL_328:
                  WTF::StringImpl::destroy(v262, v197);
                  goto LABEL_329;
                }
                WTF::URL::URL((uint64_t)&v277, (WTF::StringImpl **)(*(void *)(a1 + 32) + 1032));
                uint64_t v188 = WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)&v284[49]);
                CFTypeRef v189 = (_OWORD *)(v188 + 8);
                CFTypeRef v190 = *(_DWORD **)v188;
                if (*(void *)v188)
                {
                  *v190 += 2;
                  *(void *)long long buf = v190;
                }
                else
                {
                  *(void *)long long buf = 0;
                  long long v261 = *(_OWORD *)(v188 + 24);
                  *(_OWORD *)&buf[8] = *v189;
                  long long v303 = v261;
                  WTF::String::operator=((uint64_t *)buf, (WTF::StringImpl **)(a3 + 48));
                  *(_OWORD *)&buf[8] = *(_OWORD *)(a3 + 56);
                  long long v303 = *(_OWORD *)(a3 + 72);
                  if (*(void *)buf)
                  {
LABEL_203:
                    long long v192 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v291);
                    if ((*((unsigned char *)v192 + 8) & 1) == 0
                      || (BYTE8(v277) & 1) == 0
                      || (uint64_t v210 = v192,
                          uint64_t v211 = (unsigned __int8 *)WTF::URL::host(v192),
                          uint64_t v213 = v212,
                          WTF::URL::host((WTF::URL *)&v277),
                          !v213)
                      || (int v214 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)buf),
                          WTF::operator==(v211, v213, v214, v215)))
                    {
LABEL_205:
                      uint64_t v194 = *(WTF::StringImpl **)buf;
                      *(void *)long long buf = 0;
                      if (v194)
                      {
                        if (*(_DWORD *)v194 == 2) {
                          WTF::StringImpl::destroy(v194, v193);
                        }
                        else {
                          *(_DWORD *)v194 -= 2;
                        }
                      }
                      uint64_t v195 = (WTF::StringImpl *)v277;
                      *(void *)&long long v277 = 0;
                      if (v195)
                      {
                        if (*(_DWORD *)v195 == 2) {
                          WTF::StringImpl::destroy(v195, v193);
                        }
                        else {
                          *(_DWORD *)v195 -= 2;
                        }
                      }
                      goto LABEL_213;
                    }
                    uint64_t v216 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 312));
                    atomic_fetch_add((atomic_uint *volatile)(v216 + 16), 1u);
                    uint64_t v298 = *(void *)(*(void *)(a1 + 312) + 24);
                    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v297, v210);
                    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v296, (const WTF::URL *)&v277);
                    uint64_t v217 = WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v295, (const WTF::URL *)buf);
                    char v218 = *(unsigned char *)(a3 + 441);
                    WTF::MonotonicTime::now(v217);
                    double v220 = v219;
                    double v221 = *(double *)(*(void *)(a1 + 32) + 2256);
                    int v222 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
                    *(_WORD *)int v222 = 425;
                    *((void *)v222 + 1) = 0;
                    *((void *)v222 + 66) = (char *)v222 + 16;
                    *((void *)v222 + 67) = 512;
                    *((void *)v222 + 68) = 0;
                    *((void *)v222 + 70) = 0;
                    *((void *)v222 + 69) = 0;
                    IPC::Encoder::encodeHeader(v222);
                    v301 = v222;
                    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v222, &v298);
                    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v222, (uint64_t *)&v297);
                    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v222, (uint64_t *)&v296);
                    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v222, (uint64_t *)&v295);
                    v223 = (unsigned char *)IPC::Encoder::grow(v222, 1uLL, 1);
                    if (v224)
                    {
                      unsigned char *v223 = v190 != 0;
                      v225 = (unsigned char *)IPC::Encoder::grow(v222, 1uLL, 1);
                      if (!v226)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198E78BF4);
                      }
                      unsigned char *v225 = v218;
                      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v222, v220 - v221);
                      v227 = (unsigned char *)IPC::Encoder::grow(v222, 1uLL, 1);
                      if (!v228)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198E78C14);
                      }
                      unsigned char *v227 = v186;
                      LOBYTE(v299[0]) = 0;
                      char v300 = 0;
                      WebKit::AuxiliaryProcessProxy::sendMessage(v216, &v301, 0, (uint64_t)v299, 1);
                      uint64_t v102 = v270;
                      if (v300)
                      {
                        uint64_t v230 = v299[0];
                        v299[0] = 0;
                        if (v230) {
                          (*(void (**)(WTF::StringImpl *))(*(void *)v230 + 8))(v230);
                        }
                      }
                      v231 = v301;
                      v301 = 0;
                      if (v231)
                      {
                        IPC::Encoder::~Encoder(v231, v229);
                        WTF::fastFree(v251, v252);
                      }
                      v232 = v295;
                      v295 = 0;
                      if (v232)
                      {
                        if (*(_DWORD *)v232 == 2) {
                          WTF::StringImpl::destroy(v232, (WTF::StringImpl *)v229);
                        }
                        else {
                          *(_DWORD *)v232 -= 2;
                        }
                      }
                      int v249 = v296;
                      v296 = 0;
                      if (v249)
                      {
                        if (*(_DWORD *)v249 == 2) {
                          WTF::StringImpl::destroy(v249, (WTF::StringImpl *)v229);
                        }
                        else {
                          *(_DWORD *)v249 -= 2;
                        }
                      }
                      char v250 = v297;
                      v297 = 0;
                      if (v250)
                      {
                        if (*(_DWORD *)v250 == 2) {
                          WTF::StringImpl::destroy(v250, (WTF::StringImpl *)v229);
                        }
                        else {
                          *(_DWORD *)v250 -= 2;
                        }
                      }
                      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v216 + 16));
                      goto LABEL_205;
                    }
                    __break(0xC471u);
LABEL_345:
                    JUMPOUT(0x198E78BD4);
                  }
                  CFTypeRef v189 = (long long *)((char *)&v277 + 8);
                  WTF::String::operator=((uint64_t *)buf, (WTF::StringImpl **)&v277);
                }
                long long v191 = v189[1];
                *(_OWORD *)&buf[8] = *v189;
                long long v303 = v191;
                goto LABEL_203;
              }
            }
          }
        }
        __int16 v127 = 0;
        char v128 = 1;
        goto LABEL_142;
      }
LABEL_58:
      uint64_t v69 = *(void *)(a1 + 160);
      uint64_t v70 = *((void *)*a2 + 22);
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const String *)v291);
      WebKit::WebBackForwardList::protectedCurrentItem(*(void **)(a1 + 664), v299);
      WebKit::WebNavigationState::createLoadRequestNavigation((uint64_t *)&v277, v69, v70, (uint64_t)buf, (uint64_t *)v299);
      __int16 v40 = (WTF::StringImpl *)v277;
      if (v299[0]) {
        CFRelease(*((CFTypeRef *)v299[0] + 1));
      }
      __int16 v71 = *(const void **)&v312[24];
      *(void *)&v312[24] = 0;
      if (v71) {
        CFRelease(v71);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
      goto LABEL_63;
    }
    v257 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::decidePolicyForNavigationAction(Ref<WebProcessProxy> &&, WebFrameP"
                           "roxy &, NavigationActionData &&, CompletionHandler<void (PolicyDecision &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v257, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7248: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    uint64_t v258 = *((void *)*a2 + 18);
    if (!v258)
    {
      __break(0xC471u);
      JUMPOUT(0x198E78CB8);
    }
    *(unsigned char *)(v258 + 98) = 1;
    uint64_t v60 = v273;
  }
  else
  {
    uint64_t v56 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
    {
      uint64_t v233 = *(void *)(a1 + 32);
      uint64_t v234 = *(void *)(v233 + 760);
      uint64_t v235 = *(void *)(v233 + 1928);
      uint64_t v236 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v236) {
        LODWORD(v236) = *(_DWORD *)(v236 + 108);
      }
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v234;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&long long v303 = v235;
      WORD4(v303) = 1024;
      *(_DWORD *)((char *)&v303 + 10) = v236;
      _os_log_error_impl(&dword_1985F2000, v56, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::Ignoring request to load this main resource because it is outside the sandbox", buf, 0x26u);
    }
    *(_WORD *)long long buf = *(_WORD *)(a1 + 1328);
    buf[2] = 2;
    buf[8] = 0;
    uint8_t buf[16] = 0;
    LOBYTE(v303) = 0;
    BYTE8(v303) = 0;
    LOBYTE(v304) = 0;
    BYTE8(v311) = 0;
    v312[0] = 0;
    v312[8] = 0;
    v312[16] = 0;
    LOBYTE(v313) = 0;
    uint64_t v57 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v57 + 16))(v57, buf);
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
    uint64_t v60 = v273;
    if ((_BYTE)v313)
    {
      long long v259 = *(WTF::StringImpl **)&v312[24];
      *(void *)&v312[24] = 0;
      if (v259)
      {
        if (*(_DWORD *)v259 == 2) {
          WTF::StringImpl::destroy(v259, v58);
        }
        else {
          *(_DWORD *)v259 -= 2;
        }
      }
    }
    if (v312[8]) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v312);
    }
    if (BYTE8(v311)) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v304, v58);
    }
  }
LABEL_237:
  if (v290) {
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v288, (uint64_t)v58, v59);
  }
  (*(void (**)(uint64_t))(*(void *)v60 + 1600))(v60);
  CFTypeRef v202 = v292;
  CFTypeRef v292 = 0;
  if (v202) {
    CFRelease(v202);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v291);
  CFTypeRef v203 = v294;
  CFTypeRef v294 = 0;
  if (v203) {
    CFRelease(v203);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v293);
  __int16 v205 = v331;
  v331 = 0;
  if (v205)
  {
    if (*(_DWORD *)v205 == 2) {
      WTF::StringImpl::destroy(v205, v204);
    }
    else {
      *(_DWORD *)v205 -= 2;
    }
  }
  if (v330 != -1) {
    ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v330])(buf, v329);
  }
  int v330 = -1;
  CFTypeRef v206 = cf;
  CFTypeRef cf = 0;
  if (v206) {
    CFRelease(v206);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v327);
  long long v208 = v340;
  v340 = 0;
  if (v208)
  {
    if (*(_DWORD *)v208 == 2) {
      WTF::StringImpl::destroy(v208, v207);
    }
    else {
      *(_DWORD *)v208 -= 2;
    }
  }
  if (v339 != -1) {
    ((void (*)(unsigned char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v339])(buf, v337);
  }
  int v339 = -1;
  CFTypeRef v209 = v336;
  CFTypeRef v336 = 0;
  if (v209) {
    CFRelease(v209);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v335);
}

uint64_t WebKit::NavigationActionData::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  WTF::String::operator=((uint64_t *)(a1 + 72), (WTF::StringImpl **)(a2 + 72));
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  WebCore::ResourceResponseBase::operator=(a1 + 88, a2 + 88);
  uint64_t v7 = *(void *)(a2 + 328);
  if (v7) {
    CFRetain(*(CFTypeRef *)(a2 + 328));
  }
  long long v8 = *(const void **)(a1 + 328);
  *(void *)(a1 + 328) = v7;
  if (v8) {
    CFRelease(v8);
  }
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  int v9 = *(_DWORD *)(a2 + 344);
  *(_WORD *)(a1 + 348) = *(_WORD *)(a2 + 348);
  *(_DWORD *)(a1 + 344) = v9;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 352, a2 + 352);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 384, a2 + 384);
  long long v10 = *(_OWORD *)(a2 + 416);
  long long v11 = *(_OWORD *)(a2 + 432);
  long long v12 = *(_OWORD *)(a2 + 448);
  *(_WORD *)(a1 + 464) = *(_WORD *)(a2 + 464);
  *(_OWORD *)(a1 + 432) = v11;
  *(_OWORD *)(a1 + 448) = v12;
  *(_OWORD *)(a1 + 416) = v10;
  WTF::String::operator=((uint64_t *)(a1 + 472), (WTF::StringImpl **)(a2 + 472));
  *(_WORD *)(a1 + 480) = *(_WORD *)(a2 + 480);
  std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::OwnerPermissionsPolicyData,false> const&>(a1 + 488, a2 + 488);
  std::__optional_storage_base<WebCore::PrivateClickMeasurement,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PrivateClickMeasurement,false> const&>((WebCore::PrivateClickMeasurement *)(a1 + 544), (unsigned __int8 *)(a2 + 544));
  char v13 = *(unsigned char *)(a2 + 868);
  *(_DWORD *)(a1 + 864) = *(_DWORD *)(a2 + 864);
  *(unsigned char *)(a1 + 868) = v13;
  uint64_t v14 = (uint64_t *)(a1 + 872);
  uint64_t v15 = (WTF::StringImpl **)(a2 + 872);
  if (*(unsigned __int8 *)(a1 + 1536) == *(unsigned __int8 *)(a2 + 1536))
  {
    if (*(unsigned char *)(a1 + 1536))
    {
      WTF::String::operator=(v14, v15);
      WTF::String::operator=((uint64_t *)(a1 + 880), (WTF::StringImpl **)(a2 + 880));
      WTF::String::operator=((uint64_t *)(a1 + 888), (WTF::StringImpl **)(a2 + 888));
      WTF::String::operator=((uint64_t *)(a1 + 896), (WTF::StringImpl **)(a2 + 896));
      WTF::String::operator=((uint64_t *)(a1 + 904), (WTF::StringImpl **)(a2 + 904));
      WTF::String::operator=((uint64_t *)(a1 + 912), (WTF::StringImpl **)(a2 + 912));
      WTF::String::operator=((uint64_t *)(a1 + 920), (WTF::StringImpl **)(a2 + 920));
      WTF::String::operator=((uint64_t *)(a1 + 928), (WTF::StringImpl **)(a2 + 928));
      long long v17 = *(_OWORD *)(a2 + 936);
      *(_OWORD *)(a1 + 948) = *(_OWORD *)(a2 + 948);
      *(_OWORD *)(a1 + 936) = v17;
      if (*(unsigned __int8 *)(a1 + 1264) == *(unsigned __int8 *)(a2 + 1264))
      {
        if (*(unsigned char *)(a1 + 1264))
        {
          *(_WORD *)(a1 + 968) = *(_WORD *)(a2 + 968);
          WebCore::ResourceRequestBase::operator=(a1 + 976, a2 + 976);
          uint64_t v18 = *(void *)(a2 + 1168);
          if (v18) {
            CFRetain(*(CFTypeRef *)(a2 + 1168));
          }
          int v19 = *(const void **)(a1 + 1168);
          *(void *)(a1 + 1168) = v18;
          if (v19) {
            CFRelease(v19);
          }
          std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 1176, a2 + 1176);
          WTF::String::operator=((uint64_t *)(a1 + 1208), (WTF::StringImpl **)(a2 + 1208));
          long long v20 = *(_OWORD *)(a2 + 1246);
          long long v21 = *(_OWORD *)(a2 + 1232);
          *(_OWORD *)(a1 + 1216) = *(_OWORD *)(a2 + 1216);
          *(_OWORD *)(a1 + 1232) = v21;
          *(_OWORD *)(a1 + 1246) = v20;
        }
      }
      else
      {
        uint64_t v22 = a1 + 968;
        if (*(unsigned char *)(a1 + 1264))
        {
          std::__optional_destruct_base<WebKit::FrameInfoData,false>::reset[abi:sn180100](v22, v16);
        }
        else
        {
          std::construct_at[abi:sn180100]<WebKit::FrameInfoData,WebKit::FrameInfoData const&,WebKit::FrameInfoData*>(v22, a2 + 968);
          *(unsigned char *)(a1 + 1264) = 1;
        }
      }
      long long v23 = *(_OWORD *)(a2 + 1272);
      *(_OWORD *)(a1 + 1281) = *(_OWORD *)(a2 + 1281);
      *(_OWORD *)(a1 + 1272) = v23;
      WTF::String::operator=((uint64_t *)(a1 + 1304), (WTF::StringImpl **)(a2 + 1304));
      WTF::String::operator=((uint64_t *)(a1 + 1312), (WTF::StringImpl **)(a2 + 1312));
      WTF::String::operator=((uint64_t *)(a1 + 1320), (WTF::StringImpl **)(a2 + 1320));
      uint64_t v25 = *(atomic_uint **)(a2 + 1328);
      if (v25) {
        atomic_fetch_add(v25, 1u);
      }
      uint64_t v26 = *(unsigned int **)(a1 + 1328);
      *(void *)(a1 + 1328) = v25;
      if (v26) {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v26);
      }
      uint64_t v27 = *(atomic_uint **)(a2 + 1336);
      if (v27) {
        atomic_fetch_add(v27, 1u);
      }
      uint64_t v28 = *(void *)(a1 + 1336);
      *(void *)(a1 + 1336) = v27;
      if (v28) {
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v28, v24);
      }
      WTF::String::operator=((uint64_t *)(a1 + 1344), (WTF::StringImpl **)(a2 + 1344));
      WTF::String::operator=((uint64_t *)(a1 + 1352), (WTF::StringImpl **)(a2 + 1352));
      *(_WORD *)(a1 + 1360) = *(_WORD *)(a2 + 1360);
      *(void *)(a1 + 1368) = *(void *)(a2 + 1368);
      WebCore::TextIndicatorData::operator=(a1 + 1376, (long long *)(a2 + 1376));
      WebCore::AttributedString::operator=();
      uint64_t v29 = *(_DWORD **)(a2 + 1528);
      if (v29) {
        ++*v29;
      }
      char v30 = *(WebCore::TextIndicator **)(a1 + 1528);
      *(void *)(a1 + 1528) = v29;
      if (v30) {
        WTF::RefCounted<WebCore::TextIndicator>::deref(v30);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 1536))
  {
    WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v14);
    *(unsigned char *)(a1 + 1536) = 0;
  }
  else
  {
    WebKit::WebHitTestResultData::WebHitTestResultData((WebKit::WebHitTestResultData *)v14, (const WebKit::WebHitTestResultData *)v15);
    *(unsigned char *)(a1 + 1536) = 1;
  }
  *(_WORD *)(a1 + 1544) = *(_WORD *)(a2 + 1544);
  WebCore::ResourceRequestBase::operator=(a1 + 1552, a2 + 1552);
  uint64_t v31 = *(void *)(a2 + 1744);
  if (v31) {
    CFRetain(*(CFTypeRef *)(a2 + 1744));
  }
  char v32 = *(const void **)(a1 + 1744);
  *(void *)(a1 + 1744) = v31;
  if (v32) {
    CFRelease(v32);
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 1752, a2 + 1752);
  WTF::String::operator=((uint64_t *)(a1 + 1784), (WTF::StringImpl **)(a2 + 1784));
  long long v33 = *(_OWORD *)(a2 + 1822);
  long long v34 = *(_OWORD *)(a2 + 1808);
  *(_OWORD *)(a1 + 1792) = *(_OWORD *)(a2 + 1792);
  *(_OWORD *)(a1 + 1808) = v34;
  *(_OWORD *)(a1 + 1822) = v33;
  uint64_t v35 = *(void *)(a2 + 1840);
  *(unsigned char *)(a1 + 1848) = *(unsigned char *)(a2 + 1848);
  *(void *)(a1 + 1840) = v35;
  *(_WORD *)(a1 + 1856) = *(_WORD *)(a2 + 1856);
  WebCore::ResourceRequestBase::operator=(a1 + 1864, a2 + 1864);
  uint64_t v36 = *(void *)(a2 + 2056);
  if (v36) {
    CFRetain(*(CFTypeRef *)(a2 + 2056));
  }
  uint64_t v37 = *(const void **)(a1 + 2056);
  *(void *)(a1 + 2056) = v36;
  if (v37) {
    CFRelease(v37);
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 2064, a2 + 2064);
  WTF::String::operator=((uint64_t *)(a1 + 2096), (WTF::StringImpl **)(a2 + 2096));
  long long v38 = *(_OWORD *)(a2 + 2134);
  long long v39 = *(_OWORD *)(a2 + 2120);
  *(_OWORD *)(a1 + 2104) = *(_OWORD *)(a2 + 2104);
  *(_OWORD *)(a1 + 2120) = v39;
  *(_OWORD *)(a1 + 2134) = v38;
  uint64_t v40 = *(void *)(a2 + 2152);
  *(unsigned char *)(a1 + 2160) = *(unsigned char *)(a2 + 2160);
  *(void *)(a1 + 2152) = v40;
  WebCore::ResourceRequestBase::operator=(a1 + 2168, a2 + 2168);
  uint64_t v41 = *(void *)(a2 + 2360);
  if (v41) {
    CFRetain(*(CFTypeRef *)(a2 + 2360));
  }
  uint64_t v42 = *(const void **)(a1 + 2360);
  *(void *)(a1 + 2360) = v41;
  if (v42) {
    CFRelease(v42);
  }
  WebCore::ResourceRequestBase::operator=(a1 + 2368, a2 + 2368);
  uint64_t v43 = *(const void **)(a2 + 2560);
  if (v43) {
    CFRetain(v43);
  }
  long long v44 = *(const void **)(a1 + 2560);
  *(void *)(a1 + 2560) = v43;
  if (v44) {
    CFRelease(v44);
  }
  return a1;
}

double WebKit::WebPageProxy::sendCachedLinkDecorationFilteringData(WebKit::WebPageProxy *this)
{
  if (!*((unsigned char *)this + 801) && *((unsigned char *)this + 800))
  {
    {
      if (dword_1EB35A4E4)
      {
        *((unsigned char *)this + 1376) = 0;
        uint64_t v1 = *((void *)this + 32);
        uint64_t v2 = *(void *)(*((void *)this + 4) + 1928);
        uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v3 = 2444;
        *((void *)v3 + 1) = v2;
        *((void *)v3 + 66) = (char *)v3 + 16;
        *((void *)v3 + 67) = 512;
        *((void *)v3 + 68) = 0;
        *((void *)v3 + 70) = 0;
        *((void *)v3 + 69) = 0;
        IPC::Encoder::encodeHeader(v3);
        long long v12 = v3;
        IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, (uint64_t)&WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance + 8);
        LOBYTE(v10) = 0;
        char v11 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v1, &v12, 0, (uint64_t)&v10, 1);
        if (v11)
        {
          uint64_t v6 = v10;
          uint64_t v10 = 0;
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
        }
        uint64_t v7 = v12;
        long long v12 = 0;
        if (v7)
        {
          IPC::Encoder::~Encoder(v7, v4);
          WTF::fastFree(v8, v9);
        }
      }
    }
    else
    {
      qword_1EB35A4F0 = 0;
      double result = 0.0;
      WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
      unk_1EB35A4E0 = 0u;
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 416);
  *(void *)(a1 + 416) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 1600))(v3);
  }
  long long v4 = *(WTF::StringImpl **)(a1 + 376);
  *(void *)(a1 + 376) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  long long v5 = *(WTF::StringImpl **)(a1 + 320);
  *(void *)(a1 + 320) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(unsigned int *)(a1 + 312);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v6])(&v17, a1 + 288);
  }
  *(_DWORD *)(a1 + 312) = -1;
  uint64_t v7 = *(const void **)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 88));
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v16 = *(WTF::StringImpl **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v8);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v13) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v13 + 16));
  }
  uint64_t v14 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v14) {
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  return a1;
}

void WebKit::WebPageProxy::decidePolicyForNavigationActionSync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = WebKit::WebFrameProxy::webFrame(*(void *)(a3 + 2104), *(void *)(a3 + 2112));
  uint64_t v9 = v8;
  if (!v8)
  {
    if (*(unsigned char *)(a3 + 2136))
    {
      uint64_t v13 = WebKit::WebFrameProxy::webFrame(*(void *)(a3 + 2120), *(void *)(a3 + 2128));
      if (v13)
      {
        uint64_t v14 = v13;
        CFRetain(*(CFTypeRef *)(v13 + 8));
        WebKit::WebFrameProxy::didCreateSubframe(v14, *(void *)(a3 + 2104), *(void *)(a3 + 2112), (WTF::StringImpl **)(a3 + 2096));
        CFRelease(*(CFTypeRef *)(v14 + 8));
        goto LABEL_3;
      }
      uint64_t v15 = off_1EB358938;
      if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
LABEL_12:
        *(unsigned char *)(a2 + 98) = 1;
        return;
      }
      *(_DWORD *)char v17 = 136446210;
      *(void *)&v17[4] = "void WebKit::WebPageProxy::decidePolicyForNavigationActionSync(IPC::Connection &, NavigationA"
                           "ctionData &&, CompletionHandler<void (PolicyDecision &&)> &&)";
      uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7552: Invalid message "
            "dispatched %{public}s";
    }
    else
    {
      uint64_t v15 = off_1EB358938;
      if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
        goto LABEL_12;
      }
      *(_DWORD *)char v17 = 136446210;
      *(void *)&v17[4] = "void WebKit::WebPageProxy::decidePolicyForNavigationActionSync(IPC::Connection &, NavigationA"
                           "ctionData &&, CompletionHandler<void (PolicyDecision &&)> &&)";
      uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7550: Invalid message "
            "dispatched %{public}s";
    }
    _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, v16, v17, 0xCu);
    goto LABEL_12;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
LABEL_3:
  uint64_t v10 = *(void *)(*(void *)(v9 + 32) + 16);
  uint64_t v11 = (unsigned int *)(v10 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
  *(void *)char v17 = v10;
  WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(a1, (WebKit::WebProcessProxy **)v17, a3, a4);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
  uint64_t v12 = *(const void **)(v9 + 8);

  CFRelease(v12);
}

void WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = WebKit::WebFrameProxy::webFrame(*(void *)(a3 + 2104), *(void *)(a3 + 2112));
  if (v8)
  {
    uint64_t v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    uint64_t v10 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v10 = 1;
    uint64_t v11 = *a4;
    *a4 = 0;
    *((void *)v10 + 1) = v11;
    long long v23 = v10;
    long long v22 = *(_OWORD *)(a3 + 2152);
    *(_DWORD *)uint64_t v10 = 2;
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v12 = &unk_1EE9DAEB0;
    v12[1] = v10;
    long long v21 = 0;
    *(void *)&long long buf = v12;
    WebKit::WebPageProxy::decidePolicyForNavigationAction(a1, a2, v9, a3, (uint64_t *)&buf);
    if ((void)buf) {
      (*(void (**)(void))(*(void *)buf + 8))(buf);
    }
    WTF::Ref<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::PolicyDecisionSender,WTF::RawPtrTraits<void ()(WebKit::PolicyDecision &&)>,WTF::DefaultRefDerefTraits<void ()(WebKit::PolicyDecision &&)>>::~Ref(&v21, v13);
    LOWORD(buf) = *(_WORD *)(a1 + 1328);
    BYTE2(buf) = 0;
    *((void *)&buf + 1) = v22;
    char v25 = BYTE8(v22);
    char v26 = 0;
    char v27 = 0;
    v28[0] = 0;
    char v29 = 0;
    LOBYTE(v30) = 0;
    char v31 = 0;
    char v32 = 0;
    char v34 = 0;
    WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::PolicyDecisionSender::send((uint64_t)v10);
    if (v34)
    {
      int v19 = v33;
      long long v33 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v14);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    if (v31) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v30);
    }
    if (v29) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v28, v14);
    }
    WTF::Ref<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::PolicyDecisionSender,WTF::RawPtrTraits<void ()(WebKit::PolicyDecision &&)>,WTF::DefaultRefDerefTraits<void ()(WebKit::PolicyDecision &&)>>::~Ref(&v23, v14);
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  else
  {
    uint64_t v15 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(Ref<WebProces"
                                      "sProxy> &&, NavigationActionData &&, CompletionHandler<void (PolicyDecision &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7562: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v16 = *((void *)*a2 + 18);
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x198E79A1CLL);
    }
    *(unsigned char *)(v16 + 98) = 1;
    LOWORD(buf) = 0;
    BYTE2(buf) = 2;
    BYTE8(buf) = 0;
    char v25 = 0;
    char v26 = 0;
    char v27 = 0;
    v28[0] = 0;
    char v29 = 0;
    LOBYTE(v30) = 0;
    char v31 = 0;
    char v32 = 0;
    char v34 = 0;
    uint64_t v17 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v17 + 16))(v17, &buf);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    if (v34)
    {
      long long v20 = v33;
      long long v33 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v18);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    if (v31) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v30);
    }
    if (v29) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v28, v18);
    }
  }
}

uint64_t WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::PolicyDecisionSender::send(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v2(v1);
  }
  return result;
}

WTF **WTF::Ref<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::PolicyDecisionSender,WTF::RawPtrTraits<void ()(WebKit::PolicyDecision &&)>,WTF::DefaultRefDerefTraits<void ()(WebKit::PolicyDecision &&)>>::~Ref(WTF **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      uint64_t v4 = *((void *)v3 + 1);
      *((void *)v3 + 1) = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebKit::WebPageProxy::decidePolicyForNewWindowAction(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4, uint64_t *a5)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 1592))(v11);
  __int16 v58 = *(_WORD *)(a3 + 1856);
  WebCore::ResourceRequest::ResourceRequest(v59, (const String *)(a3 + 1864));
  v61[0] = 0;
  int v62 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v61, a3 + 2064);
  uint64_t v12 = *(WTF::StringImpl **)(a3 + 2096);
  if (v12) {
    *(_DWORD *)v12 += 2;
  }
  uint64_t v63 = v12;
  long long v13 = *(_OWORD *)(a3 + 2104);
  v65[0] = *(_OWORD *)(a3 + 2120);
  *(_OWORD *)((char *)v65 + 14) = *(_OWORD *)(a3 + 2134);
  long long v64 = v13;
  WebCore::ResourceRequest::ResourceRequest(v52, (const String *)(a3 + 2368));
  uint64_t v14 = WebKit::WebFrameProxy::webFrame(v64, *((uint64_t *)&v64 + 1));
  if (v14)
  {
    uint64_t v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    uint64_t v16 = *(WebKit::WebProcessProxy **)(a1 + 256);
    uint64_t v17 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v52);
    if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, v16, v17))
    {
      CFRetain(*(CFTypeRef *)(a1 + 8));
      *(void *)long long buf = a1;
      uint64_t v18 = API::Object::newObject(0x140uLL, 60);
      API::FrameInfo::FrameInfo(v18, (uint64_t)&v58, (uint64_t *)buf);
      if (*(void *)buf) {
        CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
      }
      uint64_t v19 = *(void *)(a1 + 256);
      long long v49 = *(_OWORD *)(a3 + 8);
      uint64_t v50 = *(void *)(a3 + 24);
      WebKit::WebProcessProxy::userInitiatedActivity(v19, (uint64_t)&v49, &v51);
      uint64_t v20 = *(void *)(a1 + 328);
      if (v20)
      {
        long long v21 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v20 + 48));
        uint64_t v23 = v22;
        uint64_t v24 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v52);
        char v25 = (unsigned __int8 *)WTF::URL::host(v24);
        char v27 = !WTF::operator==(v21, v23, v25, v26);
      }
      else
      {
        char v27 = 0;
      }
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const String *)v52);
      v48[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v48);
      uint64_t v28 = (CFTypeRef *)API::Object::newObject(0xB60uLL, 77);
      LOBYTE(v54) = 0;
      char v55 = 0;
      API::NavigationAction::NavigationAction((uint64_t)v28, a3, v18, 0, a4, (uint64_t)buf, (uint64_t)v48, v27, &v51, 0, &v54);
      char v30 = v48[0];
      v48[0] = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v29);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
      CFTypeRef v31 = v57;
      CFTypeRef v57 = 0;
      if (v31) {
        CFRelease(v31);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
      CFRetain(*(CFTypeRef *)(a1 + 8));
      uint64_t v32 = *a5;
      *a5 = 0;
      CFRetain(v28[1]);
      long long v33 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
      *(void *)long long v33 = &unk_1EE9DAED8;
      *((void *)v33 + 1) = a1;
      *((void *)v33 + 2) = a1;
      *((void *)v33 + 3) = v32;
      *((void *)v33 + 4) = v28;
      v48[0] = v33;
      uint64_t v34 = WebKit::WebFrameProxy::setUpPolicyListenerProxy(v15, (uint64_t *)v48, 0, 0, 0);
      CFRetain(*(CFTypeRef *)(v34 + 8));
      *(void *)long long buf = v34;
      if (v48[0]) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v48[0] + 8))(v48[0]);
      }
      uint64_t v35 = *(void *)(a1 + 64);
      if (v35)
      {
        CFRetain(v28[1]);
        v48[0] = (WTF::StringImpl *)v28;
        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, CFTypeRef *, _DWORD **, unsigned char *))(*(void *)v35 + 24))(v35, a1, v15, v48, v52, a4, buf);
      }
      else
      {
        uint64_t v36 = *(void *)(a1 + 72);
        CFRetain(v28[1]);
        v48[0] = (WTF::StringImpl *)v28;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, unsigned char *))(*(void *)v36 + 296))(v36, a1, v48, buf);
      }
      uint64_t v37 = v48[0];
      v48[0] = 0;
      if (v37) {
        CFRelease(*((CFTypeRef *)v37 + 1));
      }
      uint64_t v38 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v38) {
        CFRelease(*(CFTypeRef *)(v38 + 8));
      }
      CFRelease(v28[1]);
      uint64_t v39 = v51;
      uint64_t v51 = 0;
      if (v39) {
        CFRelease(*(CFTypeRef *)(v39 + 8));
      }
      if (v18) {
        CFRelease(*(CFTypeRef *)(v18 + 8));
      }
    }
    else
    {
      uint64_t v46 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::decidePolicyForNewWindowAction(IPC::Connection &, NavigationActi"
                             "onData &&, const String &, CompletionHandler<void (PolicyDecision &&)> &&)";
        _os_log_fault_impl(&dword_1985F2000, v46, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7598: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      uint64_t v47 = *(void *)(*(void *)(a1 + 256) + 144);
      if (!v47)
      {
        uint64_t result = 130;
        __break(0xC471u);
        return result;
      }
      *(unsigned char *)(v47 + 98) = 1;
    }
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  else
  {
    uint64_t v45 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::decidePolicyForNewWindowAction(IPC::Connection &, NavigationAction"
                           "Data &&, const String &, CompletionHandler<void (PolicyDecision &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v45, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7597: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
  CFTypeRef v40 = cf;
  CFTypeRef cf = 0;
  if (v40) {
    CFRelease(v40);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v52);
  uint64_t v42 = v63;
  uint64_t v63 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v41);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  if (v62 != -1) {
    ((void (*)(CFTypeRef *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v62])(v52, v61);
  }
  int v62 = -1;
  CFTypeRef v43 = v60;
  CFTypeRef v60 = 0;
  if (v43) {
    CFRelease(v43);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v59);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 1600))(v11);
}

void WebKit::WebPageProxy::decidePolicyForResponse(uint64_t a1, WebKit::AuxiliaryProcessProxy *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, WebCore::ResourceRequestBase *a7, unsigned __int8 a8, _DWORD **a9, __int16 a10, uint64_t *a11)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = WebKit::WebFrameProxy::webFrame(*(void *)(a3 + 248), *(void *)(a3 + 256));
  if (v19)
  {
    uint64_t v20 = v19;
    CFRetain(*(CFTypeRef *)(v19 + 8));
    uint64_t v22 = WebKit::AuxiliaryProcessProxy::fromConnection(a2, v21);
    if (v22 && (uint64_t v23 = v22, (*(unsigned int (**)(uint64_t))(*(void *)v22 + 72))(v22) == 2))
    {
      atomic_fetch_add((atomic_uint *volatile)(v23 + 16), 1u);
      atomic_fetch_add((atomic_uint *volatile)(v23 + 16), 1u);
      *(void *)long long buf = v23;
      LOWORD(v27) = a10;
      WebKit::WebPageProxy::decidePolicyForResponseShared(a1, (WebKit::WebProcessProxy **)buf, v24, a3, a4, a5, a6, a7, a8, a9, v27, a11);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v23 + 16));
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v23 + 16));
    }
    else
    {
      char v25 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::decidePolicyForResponse(IPC::Connection &, FrameInfoData &&, std"
                             "::optional<WebCore::NavigationIdentifier>, const ResourceResponse &, const ResourceRequest "
                             "&, BOOL, const String &, BOOL, WebCore::CrossOriginOpenerPolicyValue, CompletionHandler<voi"
                             "d (PolicyDecision &&)> &&)";
        _os_log_fault_impl(&dword_1985F2000, v25, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7627: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      *((unsigned char *)a2 + 98) = 1;
    }
    CFRelease(*(CFTypeRef *)(v20 + 8));
  }
  else
  {
    uint64_t v26 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::decidePolicyForResponse(IPC::Connection &, FrameInfoData &&, std::"
                           "optional<WebCore::NavigationIdentifier>, const ResourceResponse &, const ResourceRequest &, b"
                           "ool, const String &, BOOL, WebCore::CrossOriginOpenerPolicyValue, CompletionHandler<void (Pol"
                           "icyDecision &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7625: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::decidePolicyForResponseShared(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, WebCore::ResourceRequestBase *a8, unsigned __int8 a9, _DWORD **a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = *(void *)(a1 + 40);
  if (v19) {
    uint64_t v20 = *(void *)(v19 + 8);
  }
  else {
    uint64_t v20 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v20 + 1592))(v20);
  uint64_t v21 = WebKit::WebFrameProxy::webFrame(*(void *)(a4 + 248), *(void *)(a4 + 256));
  if (v21)
  {
    uint64_t v66 = v21;
    CFRetain(*(CFTypeRef *)(v21 + 8));
    uint64_t v22 = *a2;
    uint64_t v23 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a8);
    if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, v22, v23))
    {
      uint64_t v24 = *a2;
      char v25 = (const WTF::URL *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a7);
      if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, v24, v25))
      {
        if (a6)
        {
          uint64_t v26 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(*(void *)(a1 + 160) + 8), a5);
          uint64_t v27 = v26;
          if (v26) {
            CFRetain(*(CFTypeRef *)(v26 + 8));
          }
        }
        else
        {
          uint64_t v27 = 0;
        }
        CFRetain(*(CFTypeRef *)(a1 + 8));
        *(void *)long long buf = a1;
        uint64_t v28 = API::Object::newObject(0x140uLL, 60);
        API::FrameInfo::FrameInfo(v28, a4, (uint64_t *)buf);
        uint64_t v29 = API::Object::newObject(0x1F0uLL, 79);
        *(void *)uint64_t v29 = &unk_1EE9D1E28;
        WebKit::InitializeWebKit2((WebKit *)v29);
        *(void *)uint64_t v29 = &unk_1EE9DAF00;
        CFRetain(*(CFTypeRef *)(v28 + 8));
        *(void *)(v29 + 16) = v28;
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v29 + 24), (const String *)a8);
        WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v29 + 224), (const WebCore::ResourceResponseBase *)a7);
        char v30 = *(const void **)(a7 + 240);
        *(void *)(v29 + 464) = v30;
        if (v30) {
          CFRetain(v30);
        }
        *(unsigned char *)(v29 + 472) = *(unsigned char *)(a7 + 248);
        *(unsigned char *)(v29 + 480) = a9;
        CFTypeRef v31 = *a10;
        if (*a10) {
          *v31 += 2;
        }
        *(void *)(v29 + 488) = v31;
        uint64_t v69 = v29;
        CFRelease(*(CFTypeRef *)(v28 + 8));
        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
        }
        uint64_t v32 = v66;
        if (!*(unsigned char *)a4) {
          goto LABEL_32;
        }
        WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v68, (WebCore::SecurityOriginData *)(a4 + 208));
        WebCore::obtainCrossOriginOpenerPolicy((uint64_t *)buf, (WebCore *)a7, v33);
        uint64_t v34 = (WebCore::SecurityOrigin *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a7);
        WebCore::SecurityOrigin::create((uint64_t *)&v67, v34, v35);
        int v37 = WebCore::coopValuesRequireBrowsingContextGroupSwitch();
        uint64_t v38 = v67;
        uint64_t v67 = 0;
        if (v38) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v38, v36);
        }
        uint64_t v39 = *(WTF::StringImpl **)&buf[16];
        *(void *)&uint8_t buf[16] = 0;
        uint64_t v32 = v66;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2) {
            WTF::StringImpl::destroy(v39, v36);
          }
          else {
            *(_DWORD *)v39 -= 2;
          }
        }
        CFTypeRef v40 = *(WTF::StringImpl **)&buf[8];
        *(void *)&buf[8] = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2) {
            WTF::StringImpl::destroy(v40, v36);
          }
          else {
            *(_DWORD *)v40 -= 2;
          }
        }
        uint64_t v41 = v68;
        uint64_t v68 = 0;
        if (v41)
        {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v41, v36);
          if (v37)
          {
LABEL_30:
            uint64_t v42 = *(void *)(a1 + 336);
            *(void *)(a1 + 336) = 0;
            if (v42) {
              CFRelease(*(CFTypeRef *)(v42 + 8));
            }
          }
        }
        else if (v37)
        {
          goto LABEL_30;
        }
LABEL_32:
        *(void *)long long buf = a1;
        CFRetain(*(CFTypeRef *)(a1 + 8));
        uint64_t v43 = *a12;
        *a12 = 0;
        *(void *)&buf[8] = a1;
        *(void *)&uint8_t buf[16] = v43;
        *(void *)&long long v71 = v27;
        long long v44 = *a2;
        atomic_fetch_add((atomic_uint *volatile)*a2 + 4, 1u);
        *((void *)&v71 + 1) = v44;
        uint64_t v45 = v69;
        CFRetain(*(CFTypeRef *)(v69 + 8));
        uint64_t v72 = v45;
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v73[0].m_impl.m_ptr, (const String *)a8);
        uint64_t v46 = WTF::fastMalloc((WTF *)0x100);
        *(void *)uint64_t v46 = &unk_1EE9DAF28;
        *(void *)(v46 + 8) = *(void *)buf;
        *(void *)(v46 + 16) = *(void *)&buf[8];
        uint64_t v47 = *(void *)&buf[16];
        *(_OWORD *)&buf[8] = 0u;
        *(void *)(v46 + 24) = v47;
        *(void *)(v46 + 32) = v71;
        uint64_t v48 = *((void *)&v71 + 1);
        long long v71 = 0u;
        *(void *)(v46 + 40) = v48;
        uint64_t v49 = v72;
        uint64_t v72 = 0;
        *(void *)(v46 + 48) = v49;
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v46 + 56), v73);
        uint64_t v67 = (WTF *)v46;
        uint64_t v50 = (CFTypeRef *)WebKit::WebFrameProxy::setUpPolicyListenerProxy(v32, (uint64_t *)&v67, 0, 0, 0);
        CFRetain(v50[1]);
        uint64_t v68 = (WTF *)v50;
        if (v67) {
          (*(void (**)(WTF *))(*(void *)v67 + 8))(v67);
        }
        WebKit::WebPageProxy::decidePolicyForResponseShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::FrameInfoData &&,std::optional<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&<WTF::ObjectIdentifierGeneric::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>>,WTF::ObjectIdentifierGeneric::ResourceResponse const&,WTF::ObjectIdentifierGeneric::ResourceRequest const&,BOOL,WTF::String const&,BOOL,WTF::ObjectIdentifierGeneric::CrossOriginOpenerPolicyValue,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0(buf);
        uint64_t v51 = *(void *)(a1 + 64);
        if (v51) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, WebCore::ResourceRequestBase *, void, WTF **))(*(void *)v51 + 32))(v51, a1, v32, a7, a8, a9, &v68);
        }
        else {
          (*(void (**)(void, uint64_t, uint64_t *, WTF **))(**(void **)(a1 + 72) + 304))(*(void *)(a1 + 72), a1, &v69, &v68);
        }
        uint64_t v52 = v68;
        uint64_t v68 = 0;
        if (v52) {
          CFRelease(*((CFTypeRef *)v52 + 1));
        }
        uint64_t v53 = v69;
        uint64_t v69 = 0;
        if (v53) {
          CFRelease(*(CFTypeRef *)(v53 + 8));
        }
LABEL_41:
        CFRelease(*(CFTypeRef *)(v32 + 8));
        return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 1600))(v20);
      }
      uint64_t v61 = off_1EB358938;
      uint64_t v32 = v66;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::decidePolicyForResponseShared(Ref<WebProcessProxy> &&, PageIdent"
                             "ifier, FrameInfoData &&, std::optional<WebCore::NavigationIdentifier>, const ResourceRespon"
                             "se &, const ResourceRequest &, BOOL, const String &, BOOL, WebCore::CrossOriginOpenerPolicy"
                             "Value, CompletionHandler<void (PolicyDecision &&)> &&)";
        _os_log_fault_impl(&dword_1985F2000, v61, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7638: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      uint64_t v60 = *((void *)*a2 + 18);
      if (!v60)
      {
        __break(0xC471u);
        JUMPOUT(0x198E7AC04);
      }
    }
    else
    {
      uint64_t v59 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::decidePolicyForResponseShared(Ref<WebProcessProxy> &&, PageIdent"
                             "ifier, FrameInfoData &&, std::optional<WebCore::NavigationIdentifier>, const ResourceRespon"
                             "se &, const ResourceRequest &, BOOL, const String &, BOOL, WebCore::CrossOriginOpenerPolicy"
                             "Value, CompletionHandler<void (PolicyDecision &&)> &&)";
        _os_log_fault_impl(&dword_1985F2000, v59, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7637: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      uint64_t v60 = *((void *)*a2 + 18);
      uint64_t v32 = v66;
      if (!v60)
      {
        __break(0xC471u);
        JUMPOUT(0x198E7A9FCLL);
      }
    }
    *(unsigned char *)(v60 + 98) = 1;
    *(_WORD *)long long buf = 0;
    buf[2] = 2;
    buf[8] = 0;
    uint8_t buf[16] = 0;
    LOBYTE(v71) = 0;
    BYTE8(v71) = 0;
    LOBYTE(v72) = 0;
    char v74 = 0;
    LOBYTE(v75) = 0;
    char v76 = 0;
    char v77 = 0;
    char v79 = 0;
    uint64_t v62 = *a12;
    *a12 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v62 + 16))(v62, buf);
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
    if (v79)
    {
      long long v64 = v78;
      long long v78 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2) {
          WTF::StringImpl::destroy(v64, v63);
        }
        else {
          *(_DWORD *)v64 -= 2;
        }
        uint64_t v32 = v66;
      }
    }
    if (v76) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v75);
    }
    if (v74) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v72, v63);
    }
    goto LABEL_41;
  }
  char v55 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::decidePolicyForResponseShared(Ref<WebProcessProxy> &&, PageIdentifie"
                         "r, FrameInfoData &&, std::optional<WebCore::NavigationIdentifier>, const ResourceResponse &, co"
                         "nst ResourceRequest &, BOOL, const String &, BOOL, WebCore::CrossOriginOpenerPolicyValue, Compl"
                         "etionHandler<void (PolicyDecision &&)> &&)";
    _os_log_fault_impl(&dword_1985F2000, v55, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7636: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  uint64_t v56 = *((void *)*a2 + 18);
  if (!v56)
  {
    __break(0xC471u);
    JUMPOUT(0x198E7ABE4);
  }
  *(unsigned char *)(v56 + 98) = 1;
  *(_WORD *)long long buf = 0;
  buf[2] = 2;
  buf[8] = 0;
  uint8_t buf[16] = 0;
  LOBYTE(v71) = 0;
  BYTE8(v71) = 0;
  LOBYTE(v72) = 0;
  char v74 = 0;
  LOBYTE(v75) = 0;
  char v76 = 0;
  char v77 = 0;
  char v79 = 0;
  uint64_t v57 = *a12;
  *a12 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v57 + 16))(v57, buf);
  (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  if (v79)
  {
    uint64_t v65 = v78;
    long long v78 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2) {
        WTF::StringImpl::destroy(v65, v58);
      }
      else {
        *(_DWORD *)v65 -= 2;
      }
    }
  }
  if (v76) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v75);
  }
  if (v74) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v72, v58);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 1600))(v20);
}

void *WebKit::WebPageProxy::decidePolicyForResponseShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::FrameInfoData &&,std::optional<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&<WTF::ObjectIdentifierGeneric::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>>,WTF::ObjectIdentifierGeneric::ResourceResponse const&,WTF::ObjectIdentifierGeneric::ResourceRequest const&,BOOL,WTF::String const&,BOOL,WTF::ObjectIdentifierGeneric::CrossOriginOpenerPolicyValue,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (WebCore::ResourceRequestBase *)(a1 + 6);
  uint64_t v3 = (const void *)a1[30];
  a1[30] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  uint64_t v4 = a1[5];
  a1[5] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = a1[4];
  a1[4] = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
  }
  uint64_t v6 = a1[3];
  a1[3] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = a1[2];
  a1[2] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a1[1];
  a1[1] = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  return a1;
}

void WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation(uint64_t a1, uint64_t a2, int a3, WTF::ASCIICaseInsensitiveHash **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(*(void *)(a1 + 160) + 8), a2);
  uint64_t v13 = v12;
  if (v12) {
    CFRetain(*(CFTypeRef *)(v12 + 8));
  }
  uint64_t v14 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(v15 + 760);
    uint64_t v17 = *(void *)(v15 + 1928);
    uint64_t v18 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v18) {
      LODWORD(v18) = *(_DWORD *)(v18 + 108);
    }
    *(_DWORD *)long long buf = 134219520;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v16;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&long long v54 = v17;
    WORD4(v54) = 1024;
    *(_DWORD *)((char *)&v54 + 10) = v18;
    HIWORD(v54) = 1024;
    LODWORD(v55) = a3 == 2;
    WORD2(v55) = 2048;
    *(void *)((char *)&v55 + 6) = v13;
    HIWORD(v55) = 2048;
    uint64_t v56 = a5;
    _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation: Process-swapping due to Cross-Origin-Opener-Policy, newProcessIsCrossOriginIsolated=%d, navigation=%p existingNetworkResourceLoadIdentifierToResume=%llu", buf, 0x40u);
  }
  if (!v13)
  {
    uint64_t v21 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v21 + 16))(v21, 0);
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    return;
  }
  uint64_t v19 = *(void *)(a1 + 1192);
  if (v19) {
    uint64_t v20 = *(void *)(v19 + 40) + 16;
  }
  else {
    uint64_t v20 = a1 + 256;
  }
  int v22 = *(unsigned __int8 *)(*(void *)v20 + 779);
  if (a3 == 2)
  {
    BOOL v23 = v22 != 0;
    uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 256) + 512) + 8);
    if (v24) {
      uint64_t v25 = v24 - 16;
    }
    else {
      uint64_t v25 = 0;
    }
    CFRetain(*(CFTypeRef *)(v25 + 8));
    uint64_t v26 = *(void *)(a1 + 312);
    CFRetain(*(CFTypeRef *)(v26 + 8));
    WebKit::WebProcessPool::createNewWebProcess(v25, v26, v23, 0);
  }
  uint64_t v50 = a5;
  BOOL v27 = v22 != 0;
  uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 256) + 512) + 8);
  if (v28) {
    uint64_t v29 = v28 - 16;
  }
  else {
    uint64_t v29 = 0;
  }
  CFRetain(*(CFTypeRef *)(v29 + 8));
  uint64_t v30 = *(void *)(a1 + 312);
  CFRetain(*(CFTypeRef *)(v30 + 8));
  uint64_t v31 = *(void *)(a1 + 48);
  CFRetain(*(CFTypeRef *)(v31 + 8));
  WebKit::WebProcessPool::processForRegistrableDomain(v29, v30, a4, v27, (WebKit::WebPreferences **)v31, (IPC::Encoder **)buf);
  uint64_t v32 = *(void *)buf;
  *(void *)long long buf = 0;
  CFRelease(*(CFTypeRef *)(v31 + 8));
  CFRelease(*(CFTypeRef *)(v30 + 8));
  if (v28) {
    CFRelease(*(CFTypeRef *)(v29 + 8));
  }
  long long v33 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v13 + 232));
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v52, v33);
  uint64_t v34 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 312));
  atomic_fetch_add((atomic_uint *volatile)(v34 + 16), 1u);
  *(void *)long long buf = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v35 = *a6;
  *a6 = 0;
  *(void *)&buf[8] = a1;
  *(void *)&uint8_t buf[16] = v35;
  if (v32) {
    atomic_fetch_add((atomic_uint *volatile)(v32 + 16), 1u);
  }
  *(void *)&long long v54 = v32;
  WTF::RefCounter<WebKit::WebProcessProxy::ShutdownPreventingScopeType>::count((void *)(v32 + 1008), (void *)&v54 + 1);
  *(void *)&long long v55 = v50;
  *((void *)&v55 + 1) = a2;
  uint64_t v36 = WTF::fastMalloc((WTF *)0x40);
  *(void *)uint64_t v36 = &unk_1EE9DAF50;
  *(void *)(v36 + 8) = *(void *)buf;
  *(void *)(v36 + 16) = *(void *)&buf[8];
  uint64_t v37 = *(void *)&buf[16];
  *(_OWORD *)&buf[8] = 0u;
  *(void *)(v36 + 24) = v37;
  *(void *)(v36 + 32) = v54;
  uint64_t v38 = *((void *)&v54 + 1);
  long long v54 = 0u;
  *(void *)(v36 + 40) = v38;
  *(_OWORD *)(v36 + 48) = v55;
  uint64_t v51 = v36;
  WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(v34, v32, &v52, 0, &v51);
  uint64_t v39 = v51;
  uint64_t v51 = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = *((void *)&v54 + 1);
  *((void *)&v54 + 1) = 0;
  if (v40)
  {
    uint64_t v41 = *(uint64_t **)v40;
    uint64_t v42 = *(void *)(v40 + 8) - 1;
    *(void *)(v40 + 8) = v42;
    if (!v41) {
      goto LABEL_31;
    }
    uint64_t v43 = *v41;
    if (*v41)
    {
      char v44 = *(unsigned char *)(v40 + 16);
      *(unsigned char *)(v40 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v43 + 16))(v43, 0);
      *(unsigned char *)(v40 + 16) = v44;
      if (!*(void *)v40)
      {
        uint64_t v42 = *(void *)(v40 + 8);
LABEL_31:
        if (!v42) {
          MEMORY[0x199740C10](v40, 0x1020C40545B2139);
        }
      }
    }
  }
  uint64_t v45 = v54;
  *(void *)&long long v54 = 0;
  if (v45) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v45 + 16));
  }
  uint64_t v46 = *(void *)&buf[16];
  *(void *)&uint8_t buf[16] = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  uint64_t v47 = *(void *)&buf[8];
  *(void *)&buf[8] = 0;
  if (v47) {
    CFRelease(*(CFTypeRef *)(v47 + 8));
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v34 + 16));
  uint64_t v49 = v52;
  uint64_t v52 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2) {
      WTF::StringImpl::destroy(v49, v48);
    }
    else {
      *(_DWORD *)v49 -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v32 + 16));
  CFRelease(*(CFTypeRef *)(v13 + 8));
}

void WebKit::WebPageProxy::willSubmitForm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, CFTypeRef **a8, uint64_t a9)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v15)
  {
    uint64_t v16 = v15;
    CFRetain(*(CFTypeRef *)(v15 + 8));
    uint64_t v17 = WebKit::WebFrameProxy::webFrame(a5, a6);
    if (v17)
    {
      uint64_t v18 = v17;
      CFRetain(*(CFTypeRef *)(v17 + 8));
      uint64_t v19 = *(unsigned int *)(a7 + 12);
      if (v19)
      {
        uint64_t v20 = *(void **)a7;
        uint64_t v21 = 16 * v19;
        while ((unint64_t)(*v20 + 1) > 1)
        {
          v20 += 2;
          v21 -= 16;
          if (!v21) {
            goto LABEL_7;
          }
        }
        uint64_t v26 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t v29 = 136446210;
          *(void *)&v29[4] = "void WebKit::WebPageProxy::willSubmitForm(IPC::Connection &, FrameIdentifier, FrameIdenti"
                               "fier, const Vector<std::pair<String, String>> &, const UserData &, CompletionHandler<void ()> &&)";
          _os_log_fault_impl(&dword_1985F2000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7725: Invalid message dispatched %{public}s", v29, 0xCu);
        }
        *(unsigned char *)(a2 + 98) = 1;
      }
      else
      {
LABEL_7:
        uint64_t v22 = *(void *)(a1 + 96);
        BOOL v23 = *(atomic_uint **)(a1 + 256);
        atomic_fetch_add(v23 + 4, 1u);
        uint64_t v24 = *a8;
        if (v24) {
          CFRetain(v24[1]);
        }
        WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v23, (API::Object *)v24, (uint64_t *)v29);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v22 + 16))(v22, a1, v16, v18, a7, *(void *)v29, a9);
        uint64_t v25 = *(void *)v29;
        *(void *)uint64_t v29 = 0;
        if (v25) {
          CFRelease(*(CFTypeRef *)(v25 + 8));
        }
        if (v24) {
          CFRelease(v24[1]);
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v23 + 4);
      }
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    else
    {
      uint64_t v28 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t v29 = 136446210;
        *(void *)&v29[4] = "void WebKit::WebPageProxy::willSubmitForm(IPC::Connection &, FrameIdentifier, FrameIdentifi"
                             "er, const Vector<std::pair<String, String>> &, const UserData &, CompletionHandler<void ()> &&)";
        _os_log_fault_impl(&dword_1985F2000, v28, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7722: Invalid message dispatched %{public}s", v29, 0xCu);
      }
      *(unsigned char *)(a2 + 98) = 1;
    }
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  else
  {
    BOOL v27 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v29 = 136446210;
      *(void *)&v29[4] = "void WebKit::WebPageProxy::willSubmitForm(IPC::Connection &, FrameIdentifier, FrameIdentifier"
                           ", const Vector<std::pair<String, String>> &, const UserData &, CompletionHandler<void ()> &&)";
      _os_log_fault_impl(&dword_1985F2000, v27, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7719: Invalid message dispatched %{public}s", v29, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::contentRuleListNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 312))(*(void *)(a1 + 72), a1, a2, a3);
}

unsigned int *WebKit::WebPageProxy::didNavigateWithNavigationData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v6 = v4;
  uint64_t result = (unsigned int *)WebKit::WebPageProxy::didNavigateWithNavigationDataShared(a1, (uint64_t)&v6, a2, a3, a4);
  if (v4)
  {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didNavigateWithNavigationDataShared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(v11 + 760);
    uint64_t v13 = *(void *)(v11 + 1928);
    uint64_t v14 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v14) {
      LODWORD(v14) = *(_DWORD *)(v14 + 108);
    }
    int v29 = 134218752;
    uint64_t v30 = (const char *)a1;
    __int16 v31 = 2048;
    uint64_t v32 = v12;
    __int16 v33 = 2048;
    uint64_t v34 = v13;
    __int16 v35 = 1024;
    int v36 = v14;
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didNavigateWithNavigationDataShared:", (uint8_t *)&v29, 0x26u);
  }
  uint64_t v15 = *(void *)(a1 + 40);
  if (v15) {
    uint64_t v16 = *(void *)(v15 + 8);
  }
  else {
    uint64_t v16 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v16 + 1592))(v16);
  uint64_t v17 = WebKit::WebFrameProxy::webFrame(a4, a5);
  if (!v17)
  {
    uint64_t v25 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v29 = 136446210;
      uint64_t v30 = "void WebKit::WebPageProxy::didNavigateWithNavigationDataShared(Ref<WebProcessProxy> &&, const WebNavigationD"
            "ataStore &, FrameIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v25, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7749: Invalid message dispatched %{public}s", (uint8_t *)&v29, 0xCu);
    }
    uint64_t v26 = *(void *)(*(void *)a2 + 144);
    if (v26)
    {
      *(unsigned char *)(v26 + 98) = 1;
      return (*(uint64_t (**)(uint64_t))(*(void *)v16 + 1600))(v16);
    }
    goto LABEL_31;
  }
  uint64_t v18 = v17;
  CFRetain(*(CFTypeRef *)(v17 + 8));
  uint64_t v19 = *(void *)(v18 + 24);
  if (v19)
  {
    uint64_t v20 = *(void *)(v19 + 8);
    if (v20) {
      uint64_t v19 = v20 - 16;
    }
    else {
      uint64_t v19 = 0;
    }
  }
  if (v19 == a1)
  {
    if (*(unsigned char *)(v18 + 441)) {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), a1, a3);
    }
    uint64_t v21 = *(void *)(*(void *)(*(void *)a2 + 512) + 8);
    if (v21) {
      uint64_t v22 = v21 - 16;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(void *)(v22 + 312);
    CFRetain(*(CFTypeRef *)(v22 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v22, a1, a3, v18);
    if (v21) {
      CFRelease(*(CFTypeRef *)(v22 + 8));
    }
    goto LABEL_21;
  }
  BOOL v27 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    int v29 = 136446210;
    uint64_t v30 = "void WebKit::WebPageProxy::didNavigateWithNavigationDataShared(Ref<WebProcessProxy> &&, const WebNavigationDat"
          "aStore &, FrameIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v27, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7750: Invalid message dispatched %{public}s", (uint8_t *)&v29, 0xCu);
  }
  uint64_t v28 = *(void *)(*(void *)a2 + 144);
  if (!v28)
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x198E7B8ECLL);
  }
  *(unsigned char *)(v28 + 98) = 1;
LABEL_21:
  CFRelease(*(CFTypeRef *)(v18 + 8));
  return (*(uint64_t (**)(uint64_t))(*(void *)v16 + 1600))(v16);
}

unsigned int *WebKit::WebPageProxy::didPerformClientRedirect(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(atomic_uint **)(a1 + 256);
  atomic_fetch_add(v5 + 4, 1u);
  uint64_t v7 = v5;
  uint64_t result = (unsigned int *)WebKit::WebPageProxy::didPerformClientRedirectShared(a1, (WebKit::WebProcessProxy **)&v7, a2, a3, a4, a5);
  if (v5)
  {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v5 + 4);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didPerformClientRedirectShared(uint64_t a1, WebKit::WebProcessProxy **a2, WTF::StringImpl **a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 1592))(v13);
  if (*a3 && *((_DWORD *)*a3 + 1) && *a4 && *((_DWORD *)*a4 + 1))
  {
    uint64_t v14 = WebKit::WebFrameProxy::webFrame(a5, a6);
    if (v14)
    {
      uint64_t v15 = v14;
      CFRetain(*(CFTypeRef *)(v14 + 8));
      uint64_t v16 = *(void *)(v15 + 24);
      if (v16)
      {
        uint64_t v17 = *(void *)(v16 + 8);
        if (v17) {
          uint64_t v16 = v17 - 16;
        }
        else {
          uint64_t v16 = 0;
        }
      }
      if (v16 == a1)
      {
        if (!WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *a2, a3))
        {
          uint64_t v32 = off_1EB358938;
          if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
          {
            int v34 = 136446210;
            __int16 v35 = "void WebKit::WebPageProxy::didPerformClientRedirectShared(Ref<WebProcessProxy> &&, const String &, con"
                  "st String &, FrameIdentifier)";
            _os_log_fault_impl(&dword_1985F2000, v32, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7772: Invalid message dispatched %{public}s", (uint8_t *)&v34, 0xCu);
          }
          uint64_t v31 = *((void *)*a2 + 18);
          if (!v31)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7BD34);
          }
          goto LABEL_45;
        }
        if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *a2, a4))
        {
          uint64_t v18 = qword_1EB358050;
          if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v19 = *(void *)(a1 + 32);
            uint64_t v20 = *(void *)(v19 + 760);
            uint64_t v21 = *(void *)(v19 + 1928);
            uint64_t v22 = *(void *)(*(void *)(a1 + 256) + 136);
            if (v22) {
              LODWORD(v22) = *(_DWORD *)(v22 + 108);
            }
            int v23 = *(unsigned __int8 *)(v15 + 441);
            int v34 = 134219264;
            __int16 v35 = (const char *)a1;
            __int16 v36 = 2048;
            uint64_t v37 = v20;
            __int16 v38 = 2048;
            uint64_t v39 = v21;
            __int16 v40 = 1024;
            int v41 = v22;
            __int16 v42 = 2048;
            uint64_t v43 = a5;
            __int16 v44 = 1024;
            int v45 = v23;
            _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didPerformClientRedirectShared: frameID=%llu, isMainFrame=%d", (uint8_t *)&v34, 0x36u);
          }
          if (*(unsigned char *)(v15 + 441))
          {
            (*(void (**)(void, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(**(void **)(a1 + 80)
                                                                                            + 24))(*(void *)(a1 + 80), a1, a3, a4);
            (*(void (**)(void, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(**(void **)(a1 + 72)
                                                                                            + 48))(*(void *)(a1 + 72), a1, a3, a4);
          }
          uint64_t v24 = *((void *)*a2 + 64);
          if (v24)
          {
            uint64_t v25 = *(void *)(v24 + 8);
            if (v25) {
              uint64_t v26 = v25 - 16;
            }
            else {
              uint64_t v26 = 0;
            }
          }
          else
          {
            uint64_t v26 = 0;
          }
          CFRetain(*(CFTypeRef *)(v26 + 8));
          (*(void (**)(void, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t))(**(void **)(v26 + 312) + 24))(*(void *)(v26 + 312), v26, a1, a3, a4, v15);
          CFRelease(*(CFTypeRef *)(v26 + 8));
          goto LABEL_28;
        }
        __int16 v33 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          int v34 = 136446210;
          __int16 v35 = "void WebKit::WebPageProxy::didPerformClientRedirectShared(Ref<WebProcessProxy> &&, const String &, const"
                " String &, FrameIdentifier)";
          _os_log_fault_impl(&dword_1985F2000, v33, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7773: Invalid message dispatched %{public}s", (uint8_t *)&v34, 0xCu);
        }
        uint64_t v31 = *((void *)*a2 + 18);
        if (v31)
        {
LABEL_45:
          *(unsigned char *)(v31 + 98) = 1;
LABEL_28:
          CFRelease(*(CFTypeRef *)(v15 + 8));
          return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 1600))(v13);
        }
      }
      else
      {
        uint64_t v30 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          int v34 = 136446210;
          __int16 v35 = "void WebKit::WebPageProxy::didPerformClientRedirectShared(Ref<WebProcessProxy> &&, const String &, const"
                " String &, FrameIdentifier)";
          _os_log_fault_impl(&dword_1985F2000, v30, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7771: Invalid message dispatched %{public}s", (uint8_t *)&v34, 0xCu);
        }
        uint64_t v31 = *((void *)*a2 + 18);
        if (v31) {
          goto LABEL_45;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x198E7BCF0);
    }
    uint64_t v28 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v34 = 136446210;
      __int16 v35 = "void WebKit::WebPageProxy::didPerformClientRedirectShared(Ref<WebProcessProxy> &&, const String &, const Str"
            "ing &, FrameIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v28, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7770: Invalid message dispatched %{public}s", (uint8_t *)&v34, 0xCu);
    }
    uint64_t v29 = *((void *)*a2 + 18);
    if (!v29)
    {
      __break(0xC471u);
      JUMPOUT(0x198E7BE88);
    }
    *(unsigned char *)(v29 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 1600))(v13);
}

unsigned int *WebKit::WebPageProxy::didPerformServerRedirect(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(atomic_uint **)(a1 + 256);
  atomic_fetch_add(v5 + 4, 1u);
  uint64_t v7 = v5;
  uint64_t result = (unsigned int *)WebKit::WebPageProxy::didPerformServerRedirectShared(a1, (WebKit::WebProcessProxy **)&v7, a2, a3, a4, a5);
  if (v5)
  {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v5 + 4);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didPerformServerRedirectShared(uint64_t a1, WebKit::WebProcessProxy **a2, WTF::StringImpl **a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 760);
    uint64_t v15 = *(void *)(v13 + 1928);
    uint64_t v16 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v16) {
      LODWORD(v16) = *(_DWORD *)(v16 + 108);
    }
    int v33 = 134218752;
    int v34 = (const char *)a1;
    __int16 v35 = 2048;
    uint64_t v36 = v14;
    __int16 v37 = 2048;
    uint64_t v38 = v15;
    __int16 v39 = 1024;
    int v40 = v16;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didPerformServerRedirect:", (uint8_t *)&v33, 0x26u);
  }
  uint64_t v17 = *(void *)(a1 + 40);
  if (v17) {
    uint64_t v18 = *(void *)(v17 + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v18 + 1592))(v18);
  if (*a3 && *((_DWORD *)*a3 + 1) && *a4 && *((_DWORD *)*a4 + 1))
  {
    uint64_t v19 = WebKit::WebFrameProxy::webFrame(a5, a6);
    if (v19)
    {
      uint64_t v20 = v19;
      CFRetain(*(CFTypeRef *)(v19 + 8));
      uint64_t v21 = *(void *)(v20 + 24);
      if (v21)
      {
        uint64_t v22 = *(void *)(v21 + 8);
        if (v22) {
          uint64_t v21 = v22 - 16;
        }
        else {
          uint64_t v21 = 0;
        }
      }
      if (v21 == a1)
      {
        if (!WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *a2, a3))
        {
          uint64_t v31 = off_1EB358938;
          if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
          {
            int v33 = 136446210;
            int v34 = "void WebKit::WebPageProxy::didPerformServerRedirectShared(Ref<WebProcessProxy> &&, const String &, con"
                  "st String &, FrameIdentifier)";
            _os_log_fault_impl(&dword_1985F2000, v31, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7803: Invalid message dispatched %{public}s", (uint8_t *)&v33, 0xCu);
          }
          uint64_t v30 = *((void *)*a2 + 18);
          if (!v30)
          {
            __break(0xC471u);
            JUMPOUT(0x198E7C284);
          }
          goto LABEL_44;
        }
        if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *a2, a4))
        {
          if (*(unsigned char *)(v20 + 441)) {
            (*(void (**)(void, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(**(void **)(a1 + 80)
          }
                                                                                            + 32))(*(void *)(a1 + 80), a1, a3, a4);
          uint64_t v23 = *(void *)(*((void *)*a2 + 64) + 8);
          if (v23) {
            uint64_t v24 = v23 - 16;
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v25 = *(void *)(v24 + 312);
          CFRetain(*(CFTypeRef *)(v24 + 8));
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t))(*(void *)v25 + 32))(v25, v24, a1, a3, a4, v20);
          if (v23) {
            CFRelease(*(CFTypeRef *)(v24 + 8));
          }
          goto LABEL_27;
        }
        uint64_t v32 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          int v33 = 136446210;
          int v34 = "void WebKit::WebPageProxy::didPerformServerRedirectShared(Ref<WebProcessProxy> &&, const String &, const"
                " String &, FrameIdentifier)";
          _os_log_fault_impl(&dword_1985F2000, v32, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7804: Invalid message dispatched %{public}s", (uint8_t *)&v33, 0xCu);
        }
        uint64_t v30 = *((void *)*a2 + 18);
        if (v30)
        {
LABEL_44:
          *(unsigned char *)(v30 + 98) = 1;
LABEL_27:
          CFRelease(*(CFTypeRef *)(v20 + 8));
          return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 1600))(v18);
        }
      }
      else
      {
        uint64_t v29 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          int v33 = 136446210;
          int v34 = "void WebKit::WebPageProxy::didPerformServerRedirectShared(Ref<WebProcessProxy> &&, const String &, const"
                " String &, FrameIdentifier)";
          _os_log_fault_impl(&dword_1985F2000, v29, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7801: Invalid message dispatched %{public}s", (uint8_t *)&v33, 0xCu);
        }
        uint64_t v30 = *((void *)*a2 + 18);
        if (v30) {
          goto LABEL_44;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x198E7C240);
    }
    BOOL v27 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v33 = 136446210;
      int v34 = "void WebKit::WebPageProxy::didPerformServerRedirectShared(Ref<WebProcessProxy> &&, const String &, const Str"
            "ing &, FrameIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v27, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7800: Invalid message dispatched %{public}s", (uint8_t *)&v33, 0xCu);
    }
    uint64_t v28 = *((void *)*a2 + 18);
    if (!v28)
    {
      __break(0xC471u);
      JUMPOUT(0x198E7C3D8);
    }
    *(unsigned char *)(v28 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 1600))(v18);
}

uint64_t WebKit::WebPageProxy::didUpdateHistoryTitle(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 1592))(v13);
  uint64_t v14 = WebKit::WebFrameProxy::webFrame(a5, a6);
  if (!v14)
  {
    uint64_t v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v24 = 136446210;
      uint64_t v25 = "void WebKit::WebPageProxy::didUpdateHistoryTitle(IPC::Connection &, const String &, const String &, FrameIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7816: Invalid message dispatched %{public}s", (uint8_t *)&v24, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
    return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 1600))(v13);
  }
  uint64_t v15 = v14;
  CFRetain(*(CFTypeRef *)(v14 + 8));
  uint64_t v16 = *(void *)(v15 + 24);
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 8);
    if (v17) {
      uint64_t v16 = v17 - 16;
    }
    else {
      uint64_t v16 = 0;
    }
  }
  if (v16 != a1)
  {
    uint64_t v21 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v24 = 136446210;
      uint64_t v25 = "void WebKit::WebPageProxy::didUpdateHistoryTitle(IPC::Connection &, const String &, const String &, FrameIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v21, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7817: Invalid message dispatched %{public}s", (uint8_t *)&v24, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
    goto LABEL_14;
  }
  if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *(WebKit::WebProcessProxy **)(a1 + 256), a4))
  {
    if (*(unsigned char *)(v15 + 441)) {
      (*(void (**)(void, uint64_t, uint64_t, WTF::StringImpl **))(**(void **)(a1 + 80) + 40))(*(void *)(a1 + 80), a1, a3, a4);
    }
    uint64_t v18 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24));
    CFRetain(*(CFTypeRef *)(v18 + 8));
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, WTF::StringImpl **, uint64_t))(**(void **)(v18 + 312)
                                                                                           + 40))(*(void *)(v18 + 312), v18, a1, a3, a4, v15);
    CFRelease(*(CFTypeRef *)(v18 + 8));
    goto LABEL_14;
  }
  uint64_t v22 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    int v24 = 136446210;
    uint64_t v25 = "void WebKit::WebPageProxy::didUpdateHistoryTitle(IPC::Connection &, const String &, const String &, FrameIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7819: Invalid message dispatched %{public}s", (uint8_t *)&v24, 0xCu);
  }
  uint64_t v23 = *(void *)(*(void *)(a1 + 256) + 144);
  if (v23)
  {
    *(unsigned char *)(v23 + 98) = 1;
LABEL_14:
    CFRelease(*(CFTypeRef *)(v15 + 8));
    return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 1600))(v13);
  }
  uint64_t result = 130;
  __break(0xC471u);
  return result;
}

void WebKit::WebPageProxy::createNewPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a4 + 1848))
  {
    uint64_t v52 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebPageProxy::createNewPage(IPC::Connection &, WindowFeatures &&, Nav"
                                      "igationActionData &&, CompletionHandler<void (std::optional<WebCore::PageIdentifie"
                                      "r>, std::optional<WebKit::WebPageCreationParameters>)> &&)";
      uint64_t v53 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7847: Invalid message "
            "dispatched %{public}s";
      goto LABEL_109;
    }
LABEL_57:
    *(unsigned char *)(a2 + 98) = 1;
    return;
  }
  uint64_t v8 = *(void *)(a4 + 1792);
  if (!v8)
  {
    uint64_t v52 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebPageProxy::createNewPage(IPC::Connection &, WindowFeatures &&, Nav"
                                      "igationActionData &&, CompletionHandler<void (std::optional<WebCore::PageIdentifie"
                                      "r>, std::optional<WebKit::WebPageCreationParameters>)> &&)";
      uint64_t v53 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7848: Invalid message "
            "dispatched %{public}s";
      goto LABEL_109;
    }
    goto LABEL_57;
  }
  uint64_t v11 = *(void *)(a4 + 1840);
  if (!WebKit::WebFrameProxy::webFrame(v8, *(void *)(a4 + 1800)))
  {
    uint64_t v52 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_57;
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = "void WebKit::WebPageProxy::createNewPage(IPC::Connection &, WindowFeatures &&, Navig"
                                    "ationActionData &&, CompletionHandler<void (std::optional<WebCore::PageIdentifier>, "
                                    "std::optional<WebKit::WebPageCreationParameters>)> &&)";
    uint64_t v53 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7849: Invalid message di"
          "spatched %{public}s";
LABEL_109:
    _os_log_fault_impl(&dword_1985F2000, v52, OS_LOG_TYPE_FAULT, v53, (uint8_t *)&buf, 0xCu);
    goto LABEL_57;
  }
  uint64_t v12 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v12 + 16), 1u);
  WebKit::WebProcessProxy::webPage(v11, &v121);
  if (v12) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
  }
  uint64_t v13 = API::Object::newObject(0x140uLL, 60);
  API::FrameInfo::FrameInfo(v13, a4 + 1544, &v121);
  uint64_t v14 = *(void *)(a1 + 328);
  if (v14)
  {
    uint64_t v15 = *(WTF::StringImpl **)(v14 + 48);
    if (v15) {
      *(_DWORD *)v15 += 2;
    }
    uint64_t v118 = v15;
    long long v119 = *(_OWORD *)(v14 + 56);
    long long v120 = *(_OWORD *)(v14 + 72);
  }
  else
  {
    uint64_t v118 = 0;
    WTF::URL::invalidate((WTF::URL *)&v118);
  }
  uint64_t v16 = *(void *)(v13 + 312);
  if (v16)
  {
    CFRetain(*(CFTypeRef *)(v16 + 8));
    __int16 v17 = *(unsigned __int8 *)(v16 + 1360);
    CFRelease(*(CFTypeRef *)(v16 + 8));
    __int16 v18 = 1;
  }
  else
  {
    __int16 v18 = 0;
    __int16 v17 = 0;
  }
  *(void *)&long long buf = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *((void *)&buf + 1) = a1;
  uint64_t v19 = v118;
  if (v118) {
    *(_DWORD *)v118 += 2;
  }
  uint64_t v126 = v19;
  long long v127 = v119;
  long long v128 = v120;
  WebCore::ResourceRequest::ResourceRequest(v129, (const String *)(a4 + 2368));
  uint64_t v20 = *a5;
  *a5 = 0;
  *((void *)&cf + 1) = v20;
  v144[0] = 0;
  char v145 = 0;
  if (*(unsigned char *)(a4 + 856))
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v144, (const WebCore::PrivateClickMeasurement *)(a4 + 544));
    char v145 = 1;
  }
  __int16 v146 = v17 | (v18 << 8);
  if (*(unsigned char *)(a3 + 55) && *(unsigned char *)(a3 + 54))
  {
    char v21 = 1;
  }
  else
  {
    char v21 = *(unsigned char *)(a3 + 57);
    if (v21) {
      char v21 = *(unsigned char *)(a3 + 56) != 0;
    }
  }
  char v147 = v21;
  uint64_t v22 = *(void *)(a1 + 256);
  uint64_t v102 = (unsigned int *)(v22 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v22 + 16), 1u);
  long long v115 = *(_OWORD *)(a4 + 8);
  uint64_t v116 = *(void *)(a4 + 24);
  uint64_t v103 = v22;
  WebKit::WebProcessProxy::userInitiatedActivity(v22, (uint64_t)&v115, &v117);
  if (v117)
  {
    uint64_t v23 = *(void *)(a1 + 272);
    CFRetain(*(CFTypeRef *)(v23 + 8));
    {
      WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl;
    }
    int BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v23 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key, v24);
    CFRelease(*(CFTypeRef *)(v23 + 8));
    if (BoolValueForKey)
    {
      uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 1928);
      long long v27 = *(_OWORD *)(a4 + 48);
      v124[0] = *(_OWORD *)(a4 + 32);
      v124[1] = v27;
      WebKit::WebProcessProxy::consumeIfNotVerifiablyFromUIProcess(v103, v26, v117, (uint64_t)v124);
    }
  }
  uint64_t v28 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v13 + 24));
  uint64_t v29 = (unsigned __int8 *)WTF::URL::host(v28);
  uint64_t v31 = v30;
  uint64_t v32 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a4 + 2368));
  int v33 = (unsigned __int8 *)WTF::URL::host(v32);
  LOBYTE(v29) = !WTF::operator==(v29, v31, v33, v34);
  uint64_t v113 = 0;
  uint64_t v104 = 0;
  WTF::URL::invalidate((WTF::URL *)&v104);
  uint64_t v35 = API::Object::newObject(0xB60uLL, 77);
  LOBYTE(v122) = 0;
  char v123 = 0;
  uint64_t v114 = API::NavigationAction::NavigationAction(v35, a4, v13, 0, (_DWORD **)&v113, a4 + 2368, (uint64_t)&v104, (char)v29, &v117, 0, &v122);
  __int16 v37 = v104;
  uint64_t v104 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v36);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  API::PageConfiguration::copy(*(API::PageConfiguration **)(a1 + 48), (API::PageConfiguration **)&v113);
  uint64_t v38 = v113;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  int v40 = *(atomic_uint **)(a1 + 24);
  if (v40) {
    atomic_fetch_add(v40, 1u);
  }
  uint64_t v41 = (unsigned int *)v38[17];
  v38[17] = v40;
  if (v41 && atomic_fetch_add((atomic_uint *volatile)v41, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v41);
    WTF::fastFree((WTF *)v41, v39);
  }
  uint64_t v42 = WebKit::WebFrameProxy::webFrame(*(void *)(a4 + 1792), *(void *)(a4 + 1800));
  uint64_t v43 = v42;
  if (!v42)
  {
    __int16 v44 = v113;
LABEL_60:
    LOBYTE(v104) = 0;
    v106[24] = 0;
    std::__optional_storage_base<API::PageConfiguration::OpenerInfo,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<API::PageConfiguration::OpenerInfo,false>>((unsigned int *)v44 + 36, (uint64_t *)&v104);
    std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)&v104, v54);
    uint64_t v56 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)uint64_t v56 = 1;
    *(_OWORD *)(v56 + 8) = 0u;
    *(_OWORD *)(v56 + 24) = 0u;
    *(_OWORD *)(v56 + 40) = 0u;
    *(_OWORD *)(v56 + 56) = 0u;
    uint64_t v57 = (WebKit::BrowsingContextGroup *)v44[2];
    v44[2] = (CFTypeRef)v56;
    if (v57) {
      WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v57, v55);
    }
    if (!v43) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  CFRetain(*(CFTypeRef *)(v42 + 8));
  __int16 v44 = v113;
  if (!*(unsigned char *)(a4 + 348)) {
    goto LABEL_60;
  }
  int v45 = *(atomic_uint **)(*(void *)(v43 + 32) + 16);
  atomic_fetch_add(v45 + 4, 1u);
  uint64_t v46 = *(void *)(v43 + 32);
  uint64_t v47 = *(WTF::StringImpl **)(v46 + 32);
  if (v47) {
    *(_DWORD *)v47 += 2;
  }
  uint64_t v48 = (long long *)(a4 + 1792);
  uint64_t v49 = *(WTF::StringImpl **)(v46 + 40);
  if (v49) {
    *(_DWORD *)v49 += 2;
  }
  long long v122 = *v48;
  uint64_t v104 = (WTF::StringImpl *)v45;
  if (v47) {
    *(_DWORD *)v47 += 2;
  }
  uint64_t v105 = (uint64_t)v47;
  if (!v49)
  {
    *(void *)uint64_t v106 = 0;
    *(_OWORD *)&v106[8] = v122;
    v106[24] = 1;
    std::__optional_storage_base<API::PageConfiguration::OpenerInfo,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<API::PageConfiguration::OpenerInfo,false>>((unsigned int *)v44 + 36, (uint64_t *)&v104);
    std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)&v104, v101);
    if (!v47) {
      goto LABEL_63;
    }
    goto LABEL_49;
  }
  *(_DWORD *)v49 += 2;
  *(void *)uint64_t v106 = v49;
  *(_OWORD *)&v106[8] = v122;
  v106[24] = 1;
  std::__optional_storage_base<API::PageConfiguration::OpenerInfo,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<API::PageConfiguration::OpenerInfo,false>>((unsigned int *)v44 + 36, (uint64_t *)&v104);
  std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)&v104, v50);
  if (*(_DWORD *)v49 != 2)
  {
    *(_DWORD *)v49 -= 2;
    if (!v47) {
      goto LABEL_63;
    }
LABEL_49:
    if (*(_DWORD *)v47 == 2) {
      WTF::StringImpl::destroy(v47, v51);
    }
    else {
      *(_DWORD *)v47 -= 2;
    }
    goto LABEL_63;
  }
  WTF::StringImpl::destroy(v49, v51);
  if (v47) {
    goto LABEL_49;
  }
LABEL_63:
  CFRelease(*(CFTypeRef *)(v43 + 8));
LABEL_64:
  __int16 v58 = v113;
  CFRetain(v113[1]);
  *(void *)&long long v122 = v58;
  uint64_t v59 = WTF::fastMalloc((WTF *)0x258);
  *(void *)uint64_t v59 = &unk_1EE9DAF78;
  *(void *)(v59 + 8) = buf;
  uint64_t v60 = *((void *)&buf + 1);
  *((void *)&buf + 1) = 0;
  *(void *)(v59 + 16) = v60;
  WTF::URL::URL(v59 + 24, (uint64_t *)&v126);
  WTF::URL::URL(v59 + 64, (uint64_t *)v129);
  WTF::URL::URL(v59 + 104, v130);
  *(void *)(v59 + 144) = v130[5];
  *(void *)(v59 + 152) = v131;
  uint64_t v61 = *((void *)&v131 + 1);
  long long v131 = 0u;
  *(void *)(v59 + 160) = v61;
  uint64_t v62 = v132;
  uint64_t v132 = 0;
  *(void *)(v59 + 168) = v62;
  uint64_t v63 = v133;
  uint64_t v133 = 0;
  *(void *)(v59 + 176) = v63;
  uint64_t v64 = v134;
  uint64_t v134 = 0;
  *(void *)(v59 + 184) = v64;
  uint64_t v65 = v135;
  uint64_t v135 = 0;
  *(void *)(v59 + 192) = v65;
  uint64_t v66 = v136;
  uint64_t v136 = 0;
  *(void *)(v59 + 200) = v66;
  LODWORD(v65) = v137;
  *(unsigned char *)(v59 + 212) = v138;
  *(_DWORD *)(v59 + 208) = v65;
  *(void *)(v59 + 216) = v139;
  uint64_t v67 = *((void *)&v139 + 1);
  long long v139 = 0u;
  *(void *)(v59 + 224) = v67;
  uint64_t v68 = v140;
  uint64_t v140 = 0;
  *(void *)(v59 + 232) = v68;
  uint64_t v69 = v141;
  *(unsigned char *)(v59 + 248) = v142;
  *(void *)(v59 + 240) = v69;
  *(void *)(v59 + 256) = cf;
  uint64_t v70 = *((void *)&cf + 1);
  long long cf = 0u;
  *(void *)(v59 + 264) = v70;
  *(unsigned char *)(v59 + 272) = 0;
  *(unsigned char *)(v59 + 584) = 0;
  if (v145)
  {
    std::construct_at[abi:sn180100]<WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement*>(v59 + 272, (uint64_t)v144);
    *(unsigned char *)(v59 + 584) = 1;
  }
  *(_WORD *)(v59 + 592) = v146;
  *(unsigned char *)(v59 + 594) = v147;
  uint64_t v112 = v59;
  uint64_t v104 = (WTF::StringImpl *)a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v105 = a1;
  long long v71 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v106 = *(_OWORD *)a3;
  *(_OWORD *)&v106[16] = v71;
  v107[0] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)((char *)v107 + 10) = *(_OWORD *)(a3 + 42);
  uint64_t v72 = *(void *)(a3 + 64);
  *(void *)(a3 + 64) = 0;
  uint64_t v108 = v72;
  uint64_t v73 = *(void *)(a3 + 72);
  *(void *)(a3 + 72) = 0;
  uint64_t v109 = v73;
  char v74 = v113;
  CFRetain(v113[1]);
  char v110 = v74;
  uint64_t v75 = WTF::fastMalloc((WTF *)0x70);
  *(void *)uint64_t v75 = &unk_1EE9DAFA0;
  *(void *)(v75 + 8) = v104;
  *(void *)(v75 + 16) = v105;
  long long v77 = *(_OWORD *)v106;
  long long v78 = *(_OWORD *)&v106[16];
  long long v79 = v107[0];
  *(_OWORD *)(v75 + 66) = *(_OWORD *)((char *)v107 + 10);
  *(_OWORD *)(v75 + 56) = v79;
  *(_OWORD *)(v75 + 40) = v78;
  *(_OWORD *)(v75 + 24) = v77;
  uint64_t v80 = v108;
  uint64_t v105 = 0;
  uint64_t v108 = 0;
  *(void *)(v75 + 88) = v80;
  *(void *)&long long v77 = v109;
  uint64_t v109 = 0;
  *(void *)(v75 + 96) = v77;
  uint64_t v81 = v110;
  char v110 = 0;
  uint64_t v111 = v75;
  *(void *)(v75 + 104) = v81;
  uint64_t v82 = *(void *)(a1 + 272);
  {
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v82 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, v76))
  {
    uint64_t v83 = *(CFTypeRef **)(a1 + 312);
    CFRetain(v83[1]);
    uint64_t v85 = WebKit::WebsiteDataStore::soAuthorizationCoordinator((WebKit::WebsiteDataStore *)v83, (const WebKit::WebPageProxy *)a1, v84);
    WebKit::SOAuthorizationCoordinator::tryAuthorize((uint64_t)v85, (uint64_t *)&v122, &v114, a1, &v112, &v111);
    CFRelease(v83[1]);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v111 + 16))(v111, &v114, &v112);
  }
  uint64_t v87 = v111;
  uint64_t v111 = 0;
  if (v87) {
    (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
  }
  char v88 = v110;
  char v110 = 0;
  if (v88) {
    CFRelease(v88[1]);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v86);
  uint64_t v89 = v105;
  uint64_t v105 = 0;
  if (v89) {
    CFRelease(*(CFTypeRef *)(v89 + 8));
  }
  uint64_t v90 = v112;
  uint64_t v112 = 0;
  if (v90) {
    (*(void (**)(uint64_t))(*(void *)v90 + 8))(v90);
  }
  uint64_t v91 = v122;
  *(void *)&long long v122 = 0;
  if (v91) {
    CFRelease(*(CFTypeRef *)(v91 + 8));
  }
  CFRelease(v74[1]);
  uint64_t v93 = v114;
  uint64_t v114 = 0;
  if (v93) {
    CFRelease(*(CFTypeRef *)(v93 + 8));
  }
  uint64_t v94 = v117;
  uint64_t v117 = 0;
  if (v94) {
    CFRelease(*(CFTypeRef *)(v94 + 8));
  }
  if (v103) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v102);
  }
  if (v145) {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v144, v92);
  }
  uint64_t v95 = *((void *)&cf + 1);
  *((void *)&cf + 1) = 0;
  if (v95) {
    (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
  }
  uint64_t v96 = (const void *)cf;
  *(void *)&long long cf = 0;
  if (v96) {
    CFRelease(v96);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v129);
  uint64_t v98 = v126;
  uint64_t v126 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2) {
      WTF::StringImpl::destroy(v98, v97);
    }
    else {
      *(_DWORD *)v98 -= 2;
    }
  }
  uint64_t v99 = *((void *)&buf + 1);
  *((void *)&buf + 1) = 0;
  if (v99) {
    CFRelease(*(CFTypeRef *)(v99 + 8));
  }
  uint64_t v100 = v118;
  uint64_t v118 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2) {
      WTF::StringImpl::destroy(v100, v97);
    }
    else {
      *(_DWORD *)v100 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v13 + 8));
  if (v121) {
    CFRelease(*(CFTypeRef *)(v121 + 8));
  }
}

void *WebKit::WebPageProxy::exitFullscreenImmediately(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[51];
  if (v2) {
    this = (void *)(*(uint64_t (**)(void))(**(void **)(v2 + 32) + 16))(*(void *)(v2 + 32));
  }
  uint64_t v3 = (WebKit::VideoPresentationManagerProxy *)v1[54];
  if (v3)
  {
    ++*((_DWORD *)v3 + 4);
    this = WebKit::VideoPresentationManagerProxy::requestHideAndExitFullscreen(v3);
    if (*((_DWORD *)v3 + 4) == 1)
    {
      uint64_t v4 = *(uint64_t (**)(WebKit::VideoPresentationManagerProxy *))(*(void *)v3 + 8);
      return (void *)v4(v3);
    }
    else
    {
      --*((_DWORD *)v3 + 4);
    }
  }
  return this;
}

BOOL WebKit::WebPageProxy::canEnterFullscreen(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 53);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 16);
  *(_DWORD *)(v1 + 16) = v2 + 1;
  if (!*(void *)(v1 + 48))
  {
    BOOL v3 = 0;
    if (v2) {
      goto LABEL_4;
    }
LABEL_6:
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    return v3;
  }
  BOOL v3 = *(unsigned char *)(v1 + 56) != 0;
  if (!v2) {
    goto LABEL_6;
  }
LABEL_4:
  *(_DWORD *)(v1 + 16) = v2;
  return v3;
}

void *WebKit::WebPageProxy::enterFullscreen(void *this)
{
  uint64_t v1 = this[53];
  if (v1)
  {
    ++*(_DWORD *)(v1 + 16);
    uint64_t v2 = *(void *)(v1 + 48);
    if (v2)
    {
      BOOL v3 = (WebCore::PlaybackSessionInterfaceIOS *)WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(v1, v2)[1];
      ++*((_DWORD *)v3 + 4);
      this = (void *)WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel(v3);
      if (this)
      {
        uint64_t v4 = this;
        (*(void (**)(void *))(*this + 48))(this);
        (*(void (**)(void *))(*v4 + 200))(v4);
        this = (void *)(*(uint64_t (**)(void *))(*v4 + 56))(v4);
      }
      if (*((_DWORD *)v3 + 4) == 1) {
        this = (void *)(*(uint64_t (**)(WebCore::PlaybackSessionInterfaceIOS *))(*(void *)v3 + 8))(v3);
      }
      else {
        --*((_DWORD *)v3 + 4);
      }
    }
    if (*(_DWORD *)(v1 + 16) == 1)
    {
      uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
      return (void *)v5(v1);
    }
    else
    {
      --*(_DWORD *)(v1 + 16);
    }
  }
  return this;
}

void WebKit::WebPageProxy::didEnterFullscreen(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
  (*(void (**)(uint64_t))(*(void *)v5 + 1848))(v5);
  (*(void (**)(uint64_t))(*(void *)v5 + 1600))(v5);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 104) + 40))(*(void *)(a1 + 104), a1);
  uint64_t v6 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v6 + 2496)) {
    *(unsigned char *)(v6 + 2496) = 1;
  }
  *(void *)(v6 + 2488) = a2;

  WebKit::WebPageProxy::updateFullscreenVideoTextRecognition((WebKit::WebPageProxy *)a1);
}

void WebKit::WebPageProxy::didExitFullscreen(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned char **)(a1 + 1320);
  if (v4) {
    WebKit::WebScreenOrientationManagerProxy::unlockIfNecessary(v4);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  (*(void (**)(uint64_t))(*(void *)v6 + 1856))(v6);
  (*(void (**)(uint64_t))(*(void *)v6 + 1600))(v6);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 104) + 48))(*(void *)(a1 + 104), a1);
  uint64_t v7 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v7 + 2496)) {
    BOOL v8 = *(void *)(v7 + 2488) == a2;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    *(unsigned char *)(v7 + 2496) = 0;
    WebKit::WebPageProxy::updateFullscreenVideoTextRecognition((WebKit::WebPageProxy *)a1);
  }
}

uint64_t WebKit::WebPageProxy::didCleanupFullscreen(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB357E20;
  if (os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = *(void *)(v3 + 760);
    uint64_t v5 = *(void *)(v3 + 1928);
    uint64_t v6 = *(void *)(a1[32] + 136);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    }
    int v10 = 134218752;
    uint64_t v11 = a1;
    __int16 v12 = 2048;
    uint64_t v13 = v4;
    __int16 v14 = 2048;
    uint64_t v15 = v5;
    __int16 v16 = 1024;
    int v17 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didCleanupFullscreen", (uint8_t *)&v10, 0x26u);
  }
  uint64_t v7 = a1[5];
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 1592))(v8);
  (*(void (**)(uint64_t))(*(void *)v8 + 1864))(v8);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 1600))(v8);
}

uint64_t WebKit::WebPageProxy::runModalJavaScriptDialog(uint64_t a1, uint64_t *a2, __int16 *a3, _DWORD **a4, uint64_t *a5)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 1592))(v9);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  int v10 = *(atomic_uint **)(a1 + 24);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  uint64_t v46 = v10;
  __int16 v47 = *a3;
  WTF::URL::URL((uint64_t)v48, (uint64_t *)a3 + 1);
  WTF::URL::URL((uint64_t)v49, (uint64_t *)a3 + 6);
  uint64_t v50 = *((void *)a3 + 11);
  long long v11 = *((_OWORD *)a3 + 6);
  *((_OWORD *)a3 + 6) = 0u;
  long long v51 = v11;
  *(void *)&long long v11 = *((void *)a3 + 14);
  *((void *)a3 + 14) = 0;
  uint64_t v52 = v11;
  uint64_t v12 = *((void *)a3 + 15);
  *((void *)a3 + 15) = 0;
  uint64_t v53 = v12;
  *(void *)&long long v11 = *((void *)a3 + 16);
  *((void *)a3 + 16) = 0;
  uint64_t v54 = v11;
  uint64_t v13 = *((void *)a3 + 17);
  *((void *)a3 + 17) = 0;
  uint64_t v55 = v13;
  *(void *)&long long v11 = *((void *)a3 + 18);
  *((void *)a3 + 18) = 0;
  uint64_t v56 = v11;
  LODWORD(v13) = *((_DWORD *)a3 + 38);
  char v58 = *((unsigned char *)a3 + 156);
  int v57 = v13;
  long long v14 = *((_OWORD *)a3 + 10);
  *((_OWORD *)a3 + 10) = 0u;
  long long v59 = v14;
  uint64_t v15 = *((void *)a3 + 22);
  uint64_t v16 = *((void *)a3 + 23);
  *((void *)a3 + 22) = 0;
  char v62 = *((unsigned char *)a3 + 192);
  uint64_t v60 = v15;
  uint64_t v61 = v16;
  uint64_t v17 = *((void *)a3 + 25);
  *((void *)a3 + 25) = 0;
  uint64_t v63 = v17;
  v64[0] = 0;
  int v65 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v64, (uint64_t)(a3 + 104));
  uint64_t v18 = *((void *)a3 + 30);
  *((void *)a3 + 30) = 0;
  long long v19 = *(_OWORD *)(a3 + 124);
  *(_OWORD *)((char *)v68 + 14) = *(_OWORD *)(a3 + 139);
  long long v20 = *(_OWORD *)(a3 + 132);
  long long v67 = v19;
  v68[0] = v20;
  uint64_t v21 = *a2;
  *a2 = 0;
  uint64_t v66 = v18;
  uint64_t v69 = v21;
  uint64_t v22 = *a4;
  if (*a4) {
    *v22 += 2;
  }
  uint64_t v23 = *a5;
  *a5 = 0;
  uint64_t v70 = v22;
  uint64_t v71 = v23;
  uint64_t v24 = WTF::fastMalloc((WTF *)0x150);
  *(void *)uint64_t v24 = &unk_1EE9DAFC8;
  uint64_t v25 = v46;
  uint64_t v46 = 0;
  *(void *)(v24 + 8) = v25;
  *(_WORD *)(v24 + 16) = v47;
  WTF::URL::URL(v24 + 24, v48);
  WTF::URL::URL(v24 + 64, v49);
  *(void *)(v24 + 104) = v50;
  *(void *)(v24 + 112) = v51;
  uint64_t v26 = *((void *)&v51 + 1);
  long long v51 = 0u;
  *(void *)(v24 + 120) = v26;
  uint64_t v27 = v52;
  uint64_t v52 = 0;
  *(void *)(v24 + 128) = v27;
  uint64_t v28 = v53;
  uint64_t v53 = 0;
  *(void *)(v24 + 136) = v28;
  uint64_t v29 = v54;
  uint64_t v54 = 0;
  *(void *)(v24 + 144) = v29;
  uint64_t v30 = v55;
  uint64_t v55 = 0;
  *(void *)(v24 + 152) = v30;
  uint64_t v31 = v56;
  uint64_t v56 = 0;
  *(void *)(v24 + 160) = v31;
  LODWORD(v30) = v57;
  *(unsigned char *)(v24 + 172) = v58;
  *(_DWORD *)(v24 + 168) = v30;
  *(void *)(v24 + 176) = v59;
  uint64_t v32 = *((void *)&v59 + 1);
  long long v59 = 0u;
  *(void *)(v24 + 184) = v32;
  *(void *)(v24 + 192) = v60;
  uint64_t v33 = v61;
  *(unsigned char *)(v24 + 208) = v62;
  *(void *)(v24 + 200) = v33;
  uint64_t v34 = v63;
  uint64_t v60 = 0;
  uint64_t v63 = 0;
  *(void *)(v24 + 216) = v34;
  *(unsigned char *)(v24 + 224) = 0;
  *(_DWORD *)(v24 + 248) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v24 + 224, (uint64_t)v64);
  *(void *)(v24 + 256) = v66;
  long long v35 = v67;
  long long v36 = v68[0];
  *(_OWORD *)(v24 + 294) = *(_OWORD *)((char *)v68 + 14);
  *(_OWORD *)(v24 + 264) = v35;
  *(_OWORD *)(v24 + 280) = v36;
  uint64_t v37 = v69;
  uint64_t v66 = 0;
  uint64_t v69 = 0;
  *(void *)(v24 + 312) = v37;
  uint64_t v38 = v70;
  if (v70) {
    *v70 += 2;
  }
  *(void *)(v24 + 320) = v38;
  uint64_t v39 = v71;
  uint64_t v71 = 0;
  *(void *)(v24 + 328) = v39;
  uint64_t v45 = v24;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 560))(v9, &v45);
  uint64_t v41 = v45;
  uint64_t v45 = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::~$_0((uint64_t)&v46, v40);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 1600))(v9);
}

uint64_t WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 320);
  *(void *)(a1 + 320) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 312);
  *(void *)(a1 + 312) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 248);
  *(void *)(a1 + 248) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(unsigned int *)(a1 + 240);
  if (v7 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v7])(&v12, a1 + 216);
  }
  *(_DWORD *)(a1 + 240) = -1;
  uint64_t v8 = *(const void **)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v8) {
    CFRelease(v8);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 16));
  int v10 = *(unsigned int **)a1;
  *(void *)a1 = 0;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  return a1;
}

void WebKit::WebPageProxy::runJavaScriptAlert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, _DWORD **a6, uint64_t *a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    uint64_t v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    *(void *)long long buf = v13;
    WebKit::WebPageProxy::exitFullscreenImmediately((void *)a1);
    uint64_t v14 = *(void *)(a1 + 256);
    atomic_fetch_add((atomic_uint *volatile)(v14 + 16), 1u);
    WebKit::ResponsivenessTimer::stop((unsigned char *)(v14 + 56));
    if (v14) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v14 + 16));
    }
    if (*(unsigned char *)(a1 + 898))
    {
      uint64_t v15 = *(CFTypeRef **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24))
                          + 320);
      if (v15)
      {
        CFRetain(v15[1]);
        WebKit::WebAutomationSession::willShowJavaScriptDialog(v15, (CFTypeRef *)a1);
        CFRelease(v15[1]);
      }
    }
    uint64_t v16 = *a7;
    *a7 = 0;
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v17 = &unk_1EE9DB018;
    v17[1] = v16;
    long long v20 = v17;
    WebKit::WebPageProxy::runModalJavaScriptDialog(a1, (uint64_t *)buf, a5, a6, (uint64_t *)&v20);
    if (v20) {
      (*(void (**)(void *))(*v20 + 8))(v20);
    }
    if (*(void *)buf)
    {
      uint64_t v18 = *(const void **)(*(void *)buf + 8);
      CFRelease(v18);
    }
  }
  else
  {
    long long v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &, FrameIdentifier, FrameInfoDa"
                           "ta &&, const String &, CompletionHandler<void ()> &&)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8067: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::runJavaScriptConfirm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, _DWORD **a6, uint64_t *a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    uint64_t v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    *(void *)long long buf = v13;
    WebKit::WebPageProxy::exitFullscreenImmediately((void *)a1);
    uint64_t v14 = *(void *)(a1 + 256);
    atomic_fetch_add((atomic_uint *volatile)(v14 + 16), 1u);
    WebKit::ResponsivenessTimer::stop((unsigned char *)(v14 + 56));
    if (v14) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v14 + 16));
    }
    if (*(unsigned char *)(a1 + 898))
    {
      uint64_t v15 = *(CFTypeRef **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24))
                          + 320);
      if (v15)
      {
        CFRetain(v15[1]);
        WebKit::WebAutomationSession::willShowJavaScriptDialog(v15, (CFTypeRef *)a1);
        CFRelease(v15[1]);
      }
    }
    uint64_t v16 = *a7;
    *a7 = 0;
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v17 = &unk_1EE9DB068;
    v17[1] = v16;
    long long v20 = v17;
    WebKit::WebPageProxy::runModalJavaScriptDialog(a1, (uint64_t *)buf, a5, a6, (uint64_t *)&v20);
    if (v20) {
      (*(void (**)(void *))(*v20 + 8))(v20);
    }
    if (*(void *)buf)
    {
      uint64_t v18 = *(const void **)(*(void *)buf + 8);
      CFRelease(v18);
    }
  }
  else
  {
    long long v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &, FrameIdentifier, FrameInfo"
                           "Data &&, const String &, CompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8090: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::runJavaScriptPrompt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, _DWORD **a6, WTF::StringImpl **a7, uint64_t *a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v14)
  {
    uint64_t v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    *(void *)long long buf = v15;
    WebKit::WebPageProxy::exitFullscreenImmediately((void *)a1);
    uint64_t v16 = *(void *)(a1 + 256);
    atomic_fetch_add((atomic_uint *volatile)(v16 + 16), 1u);
    WebKit::ResponsivenessTimer::stop((unsigned char *)(v16 + 56));
    if (v16) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v16 + 16));
    }
    if (*(unsigned char *)(a1 + 898))
    {
      uint64_t v17 = *(CFTypeRef **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24))
                          + 320);
      if (v17)
      {
        CFRetain(v17[1]);
        WebKit::WebAutomationSession::willShowJavaScriptDialog(v17, (CFTypeRef *)a1);
        CFRelease(v17[1]);
      }
    }
    uint64_t v18 = *a8;
    *a8 = 0;
    long long v19 = *a7;
    if (v19) {
      *(_DWORD *)v19 += 2;
    }
    long long v20 = (void *)WTF::fastMalloc((WTF *)0x18);
    *long long v20 = &unk_1EE9DB0B8;
    v20[1] = v18;
    if (v19) {
      *(_DWORD *)v19 += 2;
    }
    v20[2] = v19;
    uint64_t v24 = v20;
    WebKit::WebPageProxy::runModalJavaScriptDialog(a1, (uint64_t *)buf, a5, a6, (uint64_t *)&v24);
    if (v24) {
      (*(void (**)(void *))(*v24 + 8))(v24);
    }
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v21);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (*(void *)buf)
    {
      uint64_t v22 = *(const void **)(*(void *)buf + 8);
      CFRelease(v22);
    }
  }
  else
  {
    uint64_t v23 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::runJavaScriptPrompt(IPC::Connection &, FrameIdentifier, FrameInfoD"
                           "ata &&, const String &, const String &, CompletionHandler<void (const String &)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v23, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8113: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::mouseDidMoveOverElement(uint64_t a1, uint64_t a2, unsigned __int8 a3, CFTypeRef **a4)
{
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(atomic_uint **)(a1 + 256);
  atomic_fetch_add(v8 + 4, 1u);
  uint64_t v9 = *a4;
  if (*a4) {
    CFRetain(v9[1]);
  }
  WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v8, (API::Object *)v9, &v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v7 + 136))(v7, a1, a2, a3, v13);
  uint64_t v10 = v13;
  uint64_t v13 = 0;
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  if (v9) {
    CFRelease(v9[1]);
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v8 + 4);
  return WebKit::WebPageProxy::setToolTip((WTF **)a1, (const WTF::StringImpl **)(a2 + 440), v11);
}

uint64_t WebKit::WebPageProxy::setToolbarsAreVisible(WebKit::WebPageProxy *this, uint64_t a2)
{
  return (*(uint64_t (**)(void, WebKit::WebPageProxy *, uint64_t))(**((void **)this + 13) + 168))(*((void *)this + 13), this, a2);
}

uint64_t WebKit::WebPageProxy::getToolbarsAreVisible(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 104);
  WTF::Function<void ()(BOOL)>::Function<WTF::CompletionHandler<void ()(BOOL)>,void>(&v5, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 160))(v3, a1, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setMenuBarIsVisible(WebKit::WebPageProxy *this, uint64_t a2)
{
  return (*(uint64_t (**)(void, WebKit::WebPageProxy *, uint64_t))(**((void **)this + 13) + 184))(*((void *)this + 13), this, a2);
}

uint64_t WebKit::WebPageProxy::getMenuBarIsVisible(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 104);
  WTF::Function<void ()(BOOL)>::Function<WTF::CompletionHandler<void ()(BOOL)>,void>(&v5, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 176))(v3, a1, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setStatusBarIsVisible(WebKit::WebPageProxy *this, uint64_t a2)
{
  return (*(uint64_t (**)(void, WebKit::WebPageProxy *, uint64_t))(**((void **)this + 13) + 200))(*((void *)this + 13), this, a2);
}

uint64_t WebKit::WebPageProxy::getStatusBarIsVisible(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 104);
  WTF::Function<void ()(BOOL)>::Function<WTF::CompletionHandler<void ()(BOOL)>,void>(&v5, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 192))(v3, a1, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setIsResizable(WebKit::WebPageProxy *this, uint64_t a2)
{
  return (*(uint64_t (**)(void, WebKit::WebPageProxy *, uint64_t))(**((void **)this + 13) + 208))(*((void *)this + 13), this, a2);
}

uint64_t WebKit::WebPageProxy::setWindowFrame(WebKit::WebPageProxy *this, const FloatRect *a2)
{
  uint64_t v4 = *((void *)this + 13);
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  v11[0] = (*(float (**)(uint64_t, const FloatRect *))(*(void *)v6 + 464))(v6, a2);
  v11[1] = v7;
  void v11[2] = v8;
  v11[3] = v9;
  (*(void (**)(uint64_t, WebKit::WebPageProxy *, _DWORD *))(*(void *)v4 + 216))(v4, this, v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 1600))(v6);
}

uint64_t WebKit::WebPageProxy::getWindowFrame(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 104);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v6 = &unk_1EE9DB108;
  v6[1] = a1;
  double v6[2] = a1;
  v6[3] = v5;
  int v8 = v6;
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v4 + 224))(v4, a1, &v8);
  uint64_t result = (uint64_t)v8;
  int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::getWindowFrameWithCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 104);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v6 = &unk_1EE9DB130;
  v6[1] = a1;
  double v6[2] = a1;
  v6[3] = v5;
  int v8 = v6;
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v4 + 224))(v4, a1, &v8);
  uint64_t result = (uint64_t)v8;
  int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::screenToRootView(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 480))(v6, a2);
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, &v9);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 1600))(v6);
}

uint64_t WebKit::WebPageProxy::rootViewToScreen(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  v10[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 504))(v6, a2);
  v10[1] = v7;
  uint64_t v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v8 + 16))(v8, v10);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 1600))(v6);
}

uint64_t WebKit::WebPageProxy::syncRootViewToScreen(WebKit::WebPageProxy *this, const IntRect *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, const IntRect *))(*(void *)v4 + 504))(v4, a2);
  (*(void (**)(uint64_t))(*(void *)v4 + 1600))(v4);
  return v5;
}

uint64_t WebKit::WebPageProxy::accessibilityScreenToRootView(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 512))(v6, a2);
  uint64_t v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v7);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 1600);

  return v9(v6);
}

uint64_t WebKit::WebPageProxy::rootViewToAccessibilityScreen(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 520))(v6, a2);
  uint64_t v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v7, v9);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 1600);

  return v10(v6);
}

void WebKit::WebPageProxy::runBeforeUnloadConfirmPanel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    uint64_t v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    if (*(unsigned char *)(a1 + 898)
      && *(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24))
                   + 320))
    {
      uint64_t v14 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, 1);
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 256);
      atomic_fetch_add((atomic_uint *volatile)(v15 + 16), 1u);
      WebKit::ResponsivenessTimer::stop((unsigned char *)(v15 + 56));
      if (v15) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v15 + 16));
      }
      char isActive = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(*(void *)(a1 + 32) + 1784));
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*(void *)(a1 + 32) + 1784));
      uint64_t v17 = *(void *)(a1 + 104);
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
      uint64_t v18 = *(atomic_uint **)(a1 + 24);
      if (v18) {
        atomic_fetch_add(v18, 1u);
      }
      uint64_t v19 = *a7;
      *a7 = 0;
      uint64_t v20 = WTF::fastMalloc((WTF *)0x28);
      *(void *)uint64_t v20 = &unk_1EE9DB158;
      *(void *)(v20 + 8) = a1;
      *(void *)(v20 + 16) = v18;
      *(void *)(v20 + 24) = v19;
      *(unsigned char *)(v20 + 32) = isActive;
      *(void *)uint64_t v23 = v20;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *))(*(void *)v17 + 240))(v17, a1, a6, v13, a5, v23);
      uint64_t v21 = *(void *)v23;
      *(void *)uint64_t v23 = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
    }
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    uint64_t v22 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v23 = 136446210;
      *(void *)&v23[4] = "void WebKit::WebPageProxy::runBeforeUnloadConfirmPanel(IPC::Connection &, FrameIdentifier, Fr"
                           "ameInfoData &&, const String &, CompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8229: Invalid message dispatched %{public}s", v23, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::didChangeViewportProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 328))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

uint64_t WebKit::WebPageProxy::pageDidScroll(WebKit::WebPageProxy *this, const IntPoint *a2)
{
  (*(void (**)(void, WebKit::WebPageProxy *))(**((void **)this + 13) + 248))(*((void *)this + 13), this);
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
  (*(void (**)(uint64_t, const IntPoint *))(*(void *)v5 + 1608))(v5, a2);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 1600);

  return v6(v5);
}

uint64_t WebKit::WebPageProxy::setHasActiveAnimatedScrolls(uint64_t this, char a2)
{
  *(unsigned char *)(this + 806) = a2;
  return this;
}

void WebKit::WebPageProxy::runOpenPanel(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(CFTypeRef **)(a1 + 552);
  *(void *)(a1 + 552) = 0;
  if (v12)
  {
    WebKit::WebOpenPanelResultListenerProxy::invalidate((WebKit::WebOpenPanelResultListenerProxy *)v12, a2);
    CFRelease(v12[1]);
  }
  uint64_t v13 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v13)
  {
    uint64_t v14 = v13;
    CFRetain(*(CFTypeRef *)(v13 + 8));
    uint64_t v15 = (CFTypeRef *)API::Object::newObject(0x50uLL, 83);
    API::OpenPanelParameters::OpenPanelParameters((uint64_t)v15, a6);
    uint64_t v16 = *(void *)(*(void *)(v14 + 32) + 16);
    uint64_t v17 = API::Object::newObject(0x20uLL, 61);
    *(void *)uint64_t v17 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v17);
    *(void *)uint64_t v17 = &unk_1EE9D9768;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    *(void *)(v17 + 16) = a1;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v16 + 8), v16);
    uint64_t v18 = *(atomic_uint **)(v16 + 8);
    if (v18) {
      atomic_fetch_add(v18, 1u);
    }
    *(void *)(v17 + 24) = v18;
    CFRetain(*(CFTypeRef *)(v17 + 8));
    uint64_t v19 = *(void *)(a1 + 552);
    *(void *)(a1 + 552) = v17;
    if (v19) {
      CFRelease(*(CFTypeRef *)(v19 + 8));
    }
    if (*(unsigned char *)(a1 + 898))
    {
      uint64_t v20 = *(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24))
                      + 320);
      if (v20)
      {
        CFRetain(*(CFTypeRef *)(v20 + 8));
        WebKit::WebAutomationSession::handleRunOpenPanel((WTF::JSONImpl::Object **)v20, (const WebKit::WebPageProxy *)a1, (const WebKit::WebFrameProxy *)v14, (const API::OpenPanelParameters *)v15, (WebKit::WebOpenPanelResultListenerProxy *)v17);
        CFRelease(*(CFTypeRef *)(v20 + 8));
      }
    }
    else
    {
      WebKit::ResponsivenessTimer::stop((unsigned char *)(*(void *)(a1 + 256) + 56));
      *(_WORD *)long long buf = *(_WORD *)a5;
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)((char *)v31 + 4), (const String *)(a5 + 8));
      v33[0] = 0;
      int v34 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v33, a5 + 208);
      uint64_t v21 = *(WTF::StringImpl **)(a5 + 240);
      if (v21) {
        *(_DWORD *)v21 += 2;
      }
      long long v35 = v21;
      v37[0] = *(_OWORD *)(a5 + 264);
      *(_OWORD *)((char *)v37 + 14) = *(_OWORD *)(a5 + 278);
      long long v36 = *(_OWORD *)(a5 + 248);
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 104) + 296))() & 1) == 0)
      {
        uint64_t v23 = *(void *)(a1 + 40);
        uint64_t v24 = v23 ? *(void *)(v23 + 8) : 0;
        (*(void (**)(uint64_t))(*(void *)v24 + 1592))(v24);
        char v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint8_t *, CFTypeRef *, uint64_t))(*(void *)v24 + 216))(v24, a1, v14, buf, v15, v17);
        (*(void (**)(uint64_t))(*(void *)v24 + 1600))(v24);
        if ((v25 & 1) == 0) {
          WebKit::WebPageProxy::didCancelForOpenPanel((WebKit::WebPageProxy *)a1, v22);
        }
      }
      uint64_t v26 = v35;
      long long v35 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
      if (v34 != -1) {
        ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v34])(&v29, v33);
      }
      int v34 = -1;
      uint64_t v27 = v32;
      uint64_t v32 = 0;
      if (v27) {
        CFRelease(v27);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)((char *)v31 + 4));
    }
    CFRelease(*(CFTypeRef *)(v17 + 8));
    if (v15) {
      CFRelease(v15[1]);
    }
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  else
  {
    uint64_t v28 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      v31[0] = "void WebKit::WebPageProxy::runOpenPanel(IPC::Connection &, FrameIdentifier, FrameInfoData &&, const FileC"
               "hooserSettings &)";
      _os_log_fault_impl(&dword_1985F2000, v28, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8290: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    a2[98] = 1;
  }
}

void WebKit::WebPageProxy::showShareSheet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a3 + 80) && (*(unsigned char *)(a3 + 48) & 2) == 0 && (WTF::URL::protocolIs() & 1) == 0)
  {
    uint64_t v12 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v14 = 136446210;
      uint64_t v15 = "void WebKit::WebPageProxy::showShareSheet(IPC::Connection &, const ShareDataWithParsedURL &, CompletionHandl"
            "er<void (BOOL)> &&)";
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8317: Invalid message "
            "dispatched %{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  if (*(_DWORD *)(a3 + 100))
  {
    uint64_t v8 = *(void *)(a1 + 272);
    {
      WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v8 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key, (const WTF::StringImpl *)a3) & 1) == 0)
    {
      uint64_t v12 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        int v14 = 136446210;
        uint64_t v15 = "void WebKit::WebPageProxy::showShareSheet(IPC::Connection &, const ShareDataWithParsedURL &, CompletionHan"
              "dler<void (BOOL)> &&)";
        uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8318: Invalid messag"
              "e dispatched %{public}s";
        goto LABEL_21;
      }
LABEL_22:
      *(unsigned char *)(a2 + 98) = 1;
      return;
    }
  }
  if (*(unsigned char *)(a3 + 104))
  {
    uint64_t v12 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v14 = 136446210;
      uint64_t v15 = "void WebKit::WebPageProxy::showShareSheet(IPC::Connection &, const ShareDataWithParsedURL &, CompletionHandl"
            "er<void (BOOL)> &&)";
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8319: Invalid message "
            "dispatched %{public}s";
LABEL_21:
      _os_log_fault_impl(&dword_1985F2000, v12, OS_LOG_TYPE_FAULT, v13, (uint8_t *)&v14, 0xCu);
      goto LABEL_22;
    }
    goto LABEL_22;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 1592))(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 224))(v10, a3, a4);
  long long v11 = *(void (**)(uint64_t))(*(void *)v10 + 1600);

  v11(v10);
}

void WebKit::WebPageProxy::showContactPicker(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 272);
  {
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v8 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key, a3))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9) {
      uint64_t v10 = *(void *)(v9 + 8);
    }
    else {
      uint64_t v10 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v10 + 1592))(v10);
    (*(void (**)(uint64_t, const WTF::StringImpl *, uint64_t))(*(void *)v10 + 232))(v10, a3, a4);
    long long v11 = *(void (**)(uint64_t))(*(void *)v10 + 1600);
    v11(v10);
  }
  else
  {
    uint64_t v12 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v13 = 136446210;
      int v14 = "void WebKit::WebPageProxy::showContactPicker(IPC::Connection &, const ContactsRequestData &, CompletionHandl"
            "er<void (std::optional<Vector<ContactInfo>> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8325: Invalid message dispatched %{public}s", (uint8_t *)&v13, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::printFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 804) = 1;
  uint64_t v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    uint64_t v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    WTF::String::operator=((uint64_t *)(v13 + 232), a5);
    uint64_t v14 = *(void *)(a1 + 104);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v15 = *a7;
    *a7 = 0;
    uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v16 = &unk_1EE9DB180;
    v16[1] = a1;
    _DWORD v16[2] = a1;
    void v16[3] = v15;
    *(void *)uint64_t v19 = v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *))(*(void *)v14 + 384))(v14, a1, v13, a6, v19);
    uint64_t v17 = *(void *)v19;
    *(void *)uint64_t v19 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    uint64_t v18 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v19 = 136446210;
      *(void *)&v19[4] = "void WebKit::WebPageProxy::printFrame(IPC::Connection &, FrameIdentifier, const String &, con"
                           "st FloatSize &, CompletionHandler<void ()> &&)";
      _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8335: Invalid message dispatched %{public}s", v19, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::setMediaVolume(uint64_t this, float a2)
{
  if (*(float *)(this + 956) != a2)
  {
    *(float *)(this + 956) = a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        float v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMediaVolume>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setMuted(uint64_t a1, unsigned __int8 a2, uint64_t *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(*(void *)(a1 + 32) + 904) = a2;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if ((*(_DWORD *)(v10 + 824) & 0x2486000) != 0 && (a2 & 0x1E) == 0) {
      WebKit::WebProcessProxy::muteCaptureInPagesExcept(*(void *)(v10 + 1928));
    }
    uint64_t v12 = *(void *)(a1 + 256);
    atomic_fetch_add((atomic_uint *volatile)(v12 + 16), 1u);
    WebKit::WebProcessProxy::pageMutedStateChanged((uint64_t *)v12, *(void *)(*(void *)(a1 + 32) + 1928), a2);
    if (v12) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
    }
    uint64_t v13 = qword_1EB358078;
    if (os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(v14 + 760);
      uint64_t v16 = *(void *)(v14 + 1928);
      uint64_t v17 = *(void *)(*(void *)(a1 + 256) + 136);
      if (v17) {
        LODWORD(v17) = *(_DWORD *)(v17 + 108);
      }
      *(_DWORD *)long long buf = 134219008;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v15;
      __int16 v33 = 2048;
      uint64_t v34 = v16;
      __int16 v35 = 1024;
      int v36 = v17;
      __int16 v37 = 1024;
      int v38 = a2;
      _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::setMuted: %d", buf, 0x2Cu);
    }
    uint64_t v18 = *(void *)(a1 + 256);
    uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v20 = 2452;
    *((void *)v20 + 1) = v19;
    *((void *)v20 + 66) = (char *)v20 + 16;
    *((void *)v20 + 67) = 512;
    *((void *)v20 + 68) = 0;
    *((void *)v20 + 70) = 0;
    *((void *)v20 + 69) = 0;
    IPC::Encoder::encodeHeader(v20);
    uint64_t v31 = v20;
    uint64_t v21 = (unsigned char *)IPC::Encoder::grow(v20, 1uLL, 1);
    if (!v22)
    {
      __break(0xC471u);
      JUMPOUT(0x198E80480);
    }
    *uint64_t v21 = a2;
    uint64_t v23 = *a3;
    *a3 = 0;
    uint64_t v24 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v24 = &unk_1EE9DB1A8;
    v24[1] = v23;
    uint64_t v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    *(void *)long long buf = v24;
    *(void *)&buf[8] = v25;
    uint8_t buf[16] = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v18, &v31, 0, (uint64_t)buf, 1);
    if (buf[16])
    {
      uint64_t v27 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
    uint64_t v28 = v31;
    uint64_t v31 = 0;
    if (v28)
    {
      IPC::Encoder::~Encoder(v28, v26);
      WTF::fastFree(v29, v30);
    }
    return WebKit::WebPageProxy::activityStateDidChange(a1, 320, 0, 0);
  }
}

unsigned char *WebKit::WebPageProxy::setMediaCaptureEnabled(unsigned char *this, char a2)
{
  this[962] = a2;
  if (!this[801] && this[800])
  {
    {
      qword_1E93CFBE0 = 0;
      unk_1E93CFBE8 = 0;
      WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&unk_1EE9D78F0;
      qword_1E93CFBF0 = 0;
      word_1E93CFBF8 = 1;
    }
    return (unsigned char *)WebKit::UserMediaProcessManager::setCaptureEnabled((uint64_t)&WebKit::UserMediaProcessManager::singleton(void)::manager, a2);
  }
  return this;
}

uint64_t WebKit::WebPageProxy::stopMediaCapture(uint64_t a1, char a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 560);
    if (v9)
    {
      v11[0] = 0;
      v11[16] = 0;
      WebKit::UserMediaPermissionRequestManagerProxy::resetAccess(v9, (uint64_t)v11);
    }
    char v10 = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::StopMediaCapture,WTF::CompletionHandler<void ()(void)>>(*(void *)(a1 + 256), &v10, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::stopMediaCapture(uint64_t a1, char a2)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9DB220;
  uint64_t v6 = v4;
  WebKit::WebPageProxy::stopMediaCapture(a1, a2, (uint64_t *)&v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::requestMediaPlaybackState(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
    return v3(v2);
  }
  else
  {
    char v5 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestMediaPlaybackState,WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)>>(*(void *)(a1 + 256), (uint64_t)&v5, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::pauseAllMediaPlayback(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
    return v3(v2);
  }
  else
  {
    char v5 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PauseAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(*(void *)(a1 + 256), (uint64_t)&v5, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::suspendAllMediaPlayback(uint64_t a1, uint64_t *a2)
{
  ++*(void *)(a1 + 1344);
  if (*(unsigned char *)(a1 + 961) || (*(unsigned char *)(a1 + 961) = 1, *(unsigned char *)(a1 + 801)) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
    return v3(v2);
  }
  else
  {
    char v5 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SuspendAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(*(void *)(a1 + 256), (uint64_t)&v5, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::resumeAllMediaPlayback(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 1344);
  if (v2)
  {
    uint64_t v3 = v2 - 1;
    *(void *)(a1 + 1344) = v3;
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = *(unsigned char *)(a1 + 961) == 0;
    }
    if (v4) {
      goto LABEL_10;
    }
  }
  else if (!*(unsigned char *)(a1 + 961))
  {
    goto LABEL_10;
  }
  *(unsigned char *)(a1 + 961) = 0;
  if (!*(unsigned char *)(a1 + 801) && *(unsigned char *)(a1 + 800))
  {
    char v8 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ResumeAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(*(void *)(a1 + 256), (uint64_t)&v8, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
LABEL_10:
  uint64_t v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t WebKit::WebPageProxy::setMayStartMediaWhenInWindow(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 960) != a2)
  {
    *(unsigned char *)(this + 960) = a2;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        char v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMayStartMediaWhenInWindow>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
  }
  return this;
}

void WebKit::WebPageProxy::resumeDownload(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  char v8 = (WebKit::WebProcessPool *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24));
  WebKit::WebProcessPool::resumeDownload(v8, *(WebKit::WebsiteDataStore **)(a1 + 312), (WebKit::WebPageProxy *)a1, a2, (uint64_t)a3, 1, &v12);
  WTF::String::operator=((uint64_t *)(v12 + 280), a3);
  uint64_t v9 = v12;
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v11 = *(void *)(v9 + 328);
  *(void *)(v9 + 328) = v10;
  if (!v11)
  {
    uint64_t v12 = 0;
    goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  uint64_t v9 = v12;
  uint64_t v12 = 0;
  if (v9) {
LABEL_5:
  }
    CFRelease(*(CFTypeRef *)(v9 + 8));
}

void WebKit::WebPageProxy::downloadRequest(WebKit::WebPageProxy *a1, const String *a2, StringImpl **a3)
{
  uint64_t v6 = (WebKit::WebProcessPool *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*((void *)a1 + 6) + 24));
  uint64_t v7 = (WebKit::WebsiteDataStore *)*((void *)a1 + 39);
  uint64_t v13 = 0;
  WebKit::WebProcessPool::download(v6, v7, a1, a2, (const WTF::String *)&v13, &v14);
  uint64_t v9 = v13;
  uint64_t v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v14;
  uint64_t v11 = *a3;
  *a3 = 0;
  m_ptr = v10[41].m_impl.m_ptr;
  v10[41].m_impl.m_ptr = v11;
  if (!m_ptr)
  {
    uint64_t v14 = 0;
    goto LABEL_9;
  }
  (*(void (**)(StringImpl *))(*(void *)m_ptr + 8))(m_ptr);
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10) {
LABEL_9:
  }
    CFRelease(v10[1].m_impl.m_ptr);
}

unsigned int *WebKit::WebPageProxy::dataTaskWithRequest(uint64_t a1, WebCore::ResourceRequestBase *a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v10 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 312));
  uint64_t v11 = (unsigned int *)(v10 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
  WebKit::NetworkProcessProxy::dataTaskWithRequest(v10, a1, *(void *)(*(void *)(a1 + 312) + 24), a2, a3, a4, a5);

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
}

unsigned int *WebKit::WebPageProxy::loadAndDecodeImage(uint64_t a1, WebCore::ResourceRequest *a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v33 = a3;
  int v34 = a4;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v10 = (const WTF::URL *)WTF::aboutBlankURL((WTF *)a1);
    WebKit::Site::Site((WebKit::Site *)&v35, v10);
    WebKit::WebPageProxy::launchProcess(a1, &v35, 0);
    uint64_t v12 = v36;
    int v36 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v35;
    __int16 v35 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v14 + 16), 1u);
  WTF::RefCounter<WebKit::WebProcessProxy::ShutdownPreventingScopeType>::count((void *)(v14 + 1008), &v32);
  uint64_t v15 = *a6;
  *a6 = 0;
  *((void *)&v32 + 1) = v15;
  uint64_t v16 = *(void *)(a1 + 256);
  uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 1928);
  uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v18 = 2308;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 68) = 0;
  *((void *)v18 + 70) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  int v38 = v18;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v18, a2);
  IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize> const&>(v18, (uint64_t)&v33);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v18, a5);
  long long v31 = v32;
  long long v32 = 0uLL;
  uint64_t v19 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v19 = &unk_1EE9DB2E8;
  *(_OWORD *)(v19 + 8) = v31;
  uint64_t v20 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  __int16 v35 = (WTF::StringImpl *)v19;
  int v36 = v20;
  char v37 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v16, &v38, 0, (uint64_t)&v35, 1);
  if (v37)
  {
    uint64_t v22 = v35;
    __int16 v35 = 0;
    if (v22) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v22 + 8))(v22);
    }
  }
  uint64_t v23 = v38;
  int v38 = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, v21);
    WTF::fastFree(v29, v30);
  }
  uint64_t result = (unsigned int *)*((void *)&v32 + 1);
  *((void *)&v32 + 1) = 0;
  if (result) {
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
  }
  uint64_t v25 = v32;
  *(void *)&long long v32 = 0;
  if (v25)
  {
    uint64_t v26 = *(unsigned int ***)v25;
    uint64_t v27 = *(void *)(v25 + 8) - 1;
    *(void *)(v25 + 8) = v27;
    if (v26)
    {
      uint64_t result = *v26;
      if (!*v26) {
        goto LABEL_26;
      }
      char v28 = *(unsigned char *)(v25 + 16);
      *(unsigned char *)(v25 + 16) = 1;
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void))(*(void *)result + 16))(result, 0);
      *(unsigned char *)(v25 + 16) = v28;
      if (*(void *)v25) {
        goto LABEL_26;
      }
      uint64_t v27 = *(void *)(v25 + 8);
    }
    if (!v27) {
      uint64_t result = (unsigned int *)MEMORY[0x199740C10](v25, 0x1020C40545B2139);
    }
  }
LABEL_26:
  if (v14) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v14 + 16));
  }
  return result;
}

uint64_t WebKit::WebPageProxy::showColorPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 1592))(v9);
  (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 656))(&v15, v9, a1, a2, a3, a4);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = v15;
  uint64_t v15 = 0;
  uint64_t v12 = *(_DWORD **)(v10 + 2080);
  *(void *)(v10 + 2080) = v11;
  if (v12)
  {
    if (v12[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
      uint64_t v13 = v15;
      uint64_t v15 = 0;
      if (v13)
      {
        if (v13[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
        }
        else {
          --v13[2];
        }
      }
    }
    else
    {
      --v12[2];
      uint64_t v15 = 0;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 1600))(v9);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 32) + 2080) + 32))(*(void *)(*(void *)(a1 + 32) + 2080), a2);
}

uint64_t WebKit::WebPageProxy::setColorPickerColor(uint64_t this, const Color *a2)
{
  char v2 = *(_DWORD **)(*(void *)(this + 32) + 2080);
  if (v2)
  {
    ++v2[2];
    this = (*(uint64_t (**)(_DWORD *, const Color *))(*(void *)v2 + 24))(v2, a2);
    if (v2[2] == 1)
    {
      uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v2 + 8);
      return v3(v2);
    }
    else
    {
      --v2[2];
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::endColorPicker(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 32);
  char v2 = *(_DWORD **)(v1 + 2080);
  *(void *)(v1 + 2080) = 0;
  if (v2)
  {
    this = (*(uint64_t (**)(_DWORD *))(*(void *)v2 + 16))(v2);
    if (v2[2] == 1)
    {
      uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v2 + 8);
      return v3(v2);
    }
    else
    {
      --v2[2];
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::Internals::didChooseColor(uint64_t this, const WebCore::Color *a2)
{
  uint64_t v2 = *(void *)(this + 56);
  if (!*(unsigned char *)(v2 + 801))
  {
    if (*(unsigned char *)(v2 + 800))
    {
      uint64_t v3 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidChooseColor>(*(void *)(v2 + 256), &v3, *(void *)(*(void *)(v2 + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t non-virtual thunk to'WebKit::WebPageProxy::Internals::didChooseColor(WebKit::WebPageProxy::Internals *this, const WebCore::Color *a2)
{
  return WebKit::WebPageProxy::Internals::didChooseColor((uint64_t)this - 24, a2);
}

_DWORD *WebKit::WebPageProxy::Internals::didEndColorPicker(WebKit::WebPageProxy::Internals *this)
{
  uint64_t result = (_DWORD *)*((void *)this + 260);
  *((void *)this + 260) = 0;
  if (result)
  {
    if (result[2] == 1) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
    uint64_t v3 = *((void *)this + 7);
    if (!*(unsigned char *)(v3 + 801))
    {
      if (*(unsigned char *)(v3 + 800))
      {
        char v4 = 0;
        return (_DWORD *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidEndColorPicker>(*(void *)(v3 + 256), (uint64_t)&v4, *(void *)(*(void *)(v3 + 32) + 1928), 0);
      }
    }
  }
  return result;
}

_DWORD *non-virtual thunk to'WebKit::WebPageProxy::Internals::didEndColorPicker(WebKit::WebPageProxy::Internals *this)
{
  return WebKit::WebPageProxy::Internals::didEndColorPicker((WebKit::WebPageProxy::Internals *)((char *)this - 24));
}

uint64_t WebKit::WebPageProxy::showDataListSuggestions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_DWORD **)(*(void *)(a1 + 32) + 2032);
  if (!v3)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      uint64_t v6 = *(void *)(v5 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
    (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t))(*(void *)v6 + 664))(&v12, v6, a1);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    uint64_t v9 = *(_DWORD **)(v7 + 2032);
    *(void *)(v7 + 2032) = v8;
    if (v9)
    {
      if (v9[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
        uint64_t v10 = v12;
        uint64_t v12 = 0;
        if (v10)
        {
          if (v10[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
          }
          else {
            --v10[2];
          }
        }
      }
      else
      {
        --v9[2];
        uint64_t v12 = 0;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v6 + 1600))(v6);
    uint64_t v3 = *(_DWORD **)(*(void *)(a1 + 32) + 2032);
  }
  ++v3[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v3 + 16))(v3, a2);
  if (v3[2] == 1) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  }
  --v3[2];
  return result;
}

uint64_t WebKit::WebPageProxy::handleKeydownInDataList(uint64_t this, const WTF::String *a2)
{
  uint64_t v2 = *(_DWORD **)(*(void *)(this + 32) + 2032);
  if (v2)
  {
    ++v2[2];
    this = (*(uint64_t (**)(_DWORD *, const WTF::String *))(*(void *)v2 + 24))(v2, a2);
    if (v2[2] == 1)
    {
      uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v2 + 8);
      return v3(v2);
    }
    else
    {
      --v2[2];
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::endDataListSuggestions(uint64_t this)
{
  uint64_t v1 = *(_DWORD **)(*(void *)(this + 32) + 2032);
  if (v1)
  {
    ++v1[2];
    this = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 32))(v1);
    if (v1[2] == 1)
    {
      uint64_t v2 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
      return v2(v1);
    }
    else
    {
      --v1[2];
    }
  }
  return this;
}

_DWORD *WebKit::WebPageProxy::didCloseSuggestions(WebKit::WebPageProxy *this)
{
  uint64_t v2 = *((void *)this + 4);
  uint64_t result = *(_DWORD **)(v2 + 2032);
  if (result)
  {
    *(void *)(v2 + 2032) = 0;
    if (result[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
    char v4 = 0;
    return (_DWORD *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidCloseSuggestions>(*((void *)this + 32), (uint64_t)&v4, *(void *)(*((void *)this + 4) + 1928), 0);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didSelectOption(uint64_t this, const WTF::String *a2)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      uint64_t v2 = (uint64_t *)a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidSelectDataListOption>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::showDateTimePicker(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_DWORD **)(a1 + 880);
  if (!v3)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      uint64_t v6 = *(void *)(v5 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
    (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t))(*(void *)v6 + 672))(&v11, v6, a1);
    uint64_t v7 = v11;
    uint64_t v11 = 0;
    uint64_t v8 = *(_DWORD **)(a1 + 880);
    *(void *)(a1 + 880) = v7;
    if (v8)
    {
      if (v8[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
        uint64_t v9 = v11;
        uint64_t v11 = 0;
        if (v9)
        {
          if (v9[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
          }
          else {
            --v9[2];
          }
        }
      }
      else
      {
        --v8[2];
        uint64_t v11 = 0;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v6 + 1600))(v6);
    uint64_t v3 = *(_DWORD **)(a1 + 880);
  }
  ++v3[2];
  uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v3 + 24))(v3, a2);
  if (v3[2] == 1) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  }
  --v3[2];
  return result;
}

uint64_t WebKit::WebPageProxy::endDateTimePicker(uint64_t this)
{
  uint64_t v1 = *(_DWORD **)(this + 880);
  if (v1)
  {
    ++v1[2];
    this = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 16))(v1);
    if (v1[2] == 1)
    {
      uint64_t v2 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
      return v2(v1);
    }
    else
    {
      --v1[2];
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::resourceLoadDidSendRequest(void *a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3)
{
  uint64_t v6 = a1[36];
  if (v6) {
    goto LABEL_5;
  }
  uint64_t v7 = a1[37];
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v6 = v8 - 16;
LABEL_5:
      CFRetain(*(CFTypeRef *)(v6 + 8));
      WebKit::WebExtensionController::resourceLoadDidSendRequest(v6, *(void *)(a1[4] + 760), a2, a3);
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t result = a1[17];
  if (result)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v10();
  }
  return result;
}

uint64_t WebKit::WebPageProxy::resourceLoadDidPerformHTTPRedirection(void *a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1[36];
  if (v8) {
    goto LABEL_5;
  }
  uint64_t v9 = a1[37];
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 8);
    if (v10)
    {
      uint64_t v8 = v10 - 16;
LABEL_5:
      CFRetain(*(CFTypeRef *)(v8 + 8));
      WebKit::WebExtensionController::resourceLoadDidPerformHTTPRedirection(v8, *(void *)(a1[4] + 760), a2, a3, a4);
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
  }
  uint64_t result = a1[17];
  if (result)
  {
    uint64_t v12 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v12();
  }
  return result;
}

uint64_t WebKit::WebPageProxy::resourceLoadDidReceiveChallenge(void *a1, const WebKit::ResourceLoadInfo *a2, id *a3)
{
  uint64_t v6 = a1[36];
  if (v6) {
    goto LABEL_5;
  }
  uint64_t v7 = a1[37];
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v6 = v8 - 16;
LABEL_5:
      CFRetain(*(CFTypeRef *)(v6 + 8));
      WebKit::WebExtensionController::resourceLoadDidReceiveChallenge(v6, *(void *)(a1[4] + 760), a2, a3);
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t result = a1[17];
  if (result)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v10();
  }
  return result;
}

uint64_t WebKit::WebPageProxy::resourceLoadDidReceiveResponse(void *a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3)
{
  uint64_t v6 = a1[36];
  if (v6) {
    goto LABEL_5;
  }
  uint64_t v7 = a1[37];
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v6 = v8 - 16;
LABEL_5:
      CFRetain(*(CFTypeRef *)(v6 + 8));
      WebKit::WebExtensionController::resourceLoadDidReceiveResponse(v6, *(void *)(a1[4] + 760), a2, a3);
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t result = a1[17];
  if (result)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v10();
  }
  return result;
}

uint64_t WebKit::WebPageProxy::resourceLoadDidCompleteWithError(void *a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1[36];
  if (v8) {
    goto LABEL_5;
  }
  uint64_t v9 = a1[37];
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 8);
    if (v10)
    {
      uint64_t v8 = v10 - 16;
LABEL_5:
      CFRetain(*(CFTypeRef *)(v8 + 8));
      WebKit::WebExtensionController::resourceLoadDidCompleteWithError(v8, *(void *)(a1[4] + 760), a2, a3, a4);
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
  }
  uint64_t result = a1[17];
  if (result)
  {
    uint64_t v12 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v12();
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setMockVideoPresentationModeEnabled(WebKit::WebPageProxy *this, char a2)
{
  *((unsigned char *)this + 440) = a2;
  uint64_t result = *((void *)this + 54);
  if (result)
  {
    int v3 = *(_DWORD *)(result + 16);
    *(_DWORD *)(result + 16) = v3 + 1;
    *(unsigned char *)(result + 32) = a2;
    if (v3) {
      *(_DWORD *)(result + 16) = v3;
    }
    else {
      return (*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setAllowsMediaDocumentInlinePlayback(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 585) != a2)
  {
    *(unsigned char *)(this + 585) = a2;
    char v2 = a2;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetAllowsMediaDocumentInlinePlayback>(*(void *)(this + 256), &v2, *(void *)(*(void *)(this + 32) + 1928), 0);
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setHasHadSelectionChangesFromUserInteraction(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1076) = a2;
  return this;
}

uint64_t WebKit::WebPageProxy::requestDOMPasteAccess(uint64_t a1, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::SecurityOrigin *this, void *a7)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (!*(void *)this || !*(_DWORD *)(*(void *)this + 4))
  {
    uint64_t v42 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebPageProxy::requestDOMPasteAccess(DOMPasteAccessCategory, FrameIden"
                                      "tifier, const IntRect &, const String &, CompletionHandler<void (DOMPasteAccessResponse)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v42, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8808: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v43 = *(void *)(*(void *)(a1 + 256) + 144);
    if (v43)
    {
      *(unsigned char *)(v43 + 98) = 1;
      uint64_t v44 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v44 + 16))(v44, 0);
      return (*(uint64_t (**)(uint64_t))(*(void *)v44 + 8))(v44);
    }
    __break(0xC471u);
    goto LABEL_68;
  }
  uint64_t v13 = a2;
  WebCore::SecurityOrigin::createFromString((uint64_t *)&v62, this, a2);
  if (*((_DWORD *)v62 + 8) == 1)
  {
    uint64_t v15 = 1;
LABEL_55:
    int v55 = 1;
    goto LABEL_56;
  }
  uint64_t v16 = WebKit::WebFrameProxy::webFrame(a3, a4);
  uint64_t v17 = v16;
  if (!v16) {
    goto LABEL_62;
  }
  CFRetain(*(CFTypeRef *)(v16 + 8));
  uint64_t v18 = *(void *)(v17 + 24);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 8);
    if (v19) {
      uint64_t v18 = v19 - 16;
    }
    else {
      uint64_t v18 = 0;
    }
  }
  if (v18 != a1)
  {
LABEL_62:
    uint64_t v56 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebPageProxy::requestDOMPasteAccess(DOMPasteAccessCategory, FrameIden"
                                      "tifier, const IntRect &, const String &, CompletionHandler<void (DOMPasteAccessResponse)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v56, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8813: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v57 = *(void *)(*(void *)(a1 + 256) + 144);
    if (v57)
    {
      uint64_t v15 = 1;
      *(unsigned char *)(v57 + 98) = 1;
LABEL_50:
      uint64_t v54 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v54 + 16))(v54, 0);
      (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
      int v55 = 0;
      goto LABEL_52;
    }
    __break(0xC471u);
LABEL_68:
    JUMPOUT(0x198E8244CLL);
  }
  CFRetain(*(CFTypeRef *)(v17 + 8));
  for (uint64_t i = v17; ; uint64_t i = v27)
  {
    uint64_t v22 = v62;
    WebCore::SecurityOrigin::create((uint64_t *)&buf, (WebCore::SecurityOrigin *)(i + 48), v20);
    int isSameOriginDomain = WebCore::SecurityOrigin::isSameOriginDomain(v22, (const WebCore::SecurityOrigin *)buf);
    uint64_t v25 = buf;
    *(void *)&long long buf = 0;
    if (v25)
    {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v25, v23);
      if (isSameOriginDomain) {
        break;
      }
    }
    else if (isSameOriginDomain)
    {
      break;
    }
    uint64_t v26 = *(void *)(i + 312);
    if (!v26) {
      break;
    }
    uint64_t v27 = *(void *)(v26 + 8);
    if (!v27) {
      break;
    }
    CFRetain(*(CFTypeRef *)(v27 + 8));
    CFRelease(*(CFTypeRef *)(i + 8));
  }
  uint64_t v59 = v17;
  unsigned int v60 = v13;
  uint64_t v61 = a5;
  CFRelease(*(CFTypeRef *)(i + 8));
  WTF::ApproximateTime::now(v28);
  double v31 = v30;
  long long v32 = *(double **)(a1 + 536);
  uint64_t v33 = *(unsigned int *)(a1 + 548);
  int v34 = (WTF::StringImpl **)&v32[2 * v33];
  if (v33)
  {
    char v58 = a7;
    int v35 = 0;
    uint64_t v36 = *(void *)(a1 + 536);
    char v37 = (WTF::StringImpl *)&v32[2 * v33];
    int v38 = (WTF::StringImpl **)v37;
    do
    {
      if ((WTF::equal(*(WTF **)v32, *(const WTF::StringImpl **)this, v29) & 1) != 0 || v31 - v32[1] > 1.0)
      {
        int v40 = (WTF::StringImpl **)v32;
        if (v38 != (WTF::StringImpl **)(*(void *)(a1 + 536) + 16 * *(unsigned int *)(a1 + 548)))
        {
          if (v32 == (double *)v37)
          {
            int v40 = v38;
          }
          else
          {
            WTF::VectorMover<false,std::pair<WTF::String,WTF::ApproximateTime>>::moveOverlapping(v37, (WTF::StringImpl *)v32, v38);
            int v40 = (WTF::StringImpl **)((char *)v38 + v36 - (void)v37);
          }
        }
        uint64_t v41 = *(WTF::StringImpl **)v32;
        *long long v32 = 0.0;
        char v37 = (WTF::StringImpl *)(v32 + 2);
        if (v41)
        {
          if (*(_DWORD *)v41 == 2) {
            WTF::StringImpl::destroy(v41, v39);
          }
          else {
            *(_DWORD *)v41 -= 2;
          }
        }
        ++v35;
        int v38 = v40;
      }
      else
      {
        int v40 = v38;
      }
      v32 += 2;
      v36 += 16;
    }
    while (v32 < (double *)v34);
    long long v32 = *(double **)(a1 + 536);
    LODWORD(v33) = *(_DWORD *)(a1 + 548);
    int v34 = v40;
    a7 = v58;
  }
  else
  {
    int v35 = 0;
    char v37 = (WTF::StringImpl *)&v32[2 * v33];
  }
  uint64_t v14 = (WTF::StringImpl *)&v32[2 * v33];
  if (v37 != v14)
  {
    WTF::VectorMover<false,std::pair<WTF::String,WTF::ApproximateTime>>::moveOverlapping(v37, v14, v34);
    LODWORD(v33) = *(_DWORD *)(a1 + 548);
  }
  uint64_t v46 = (v33 - v35);
  *(_DWORD *)(a1 + 548) = v46;
  __int16 v47 = *(_DWORD **)this;
  uint64_t v13 = (const WTF::String *)v60;
  if (*(void *)this) {
    *v47 += 2;
  }
  uint64_t v15 = isSameOriginDomain ^ 1u;
  *(void *)&long long buf = v47;
  *((double *)&buf + 1) = v31;
  a5 = v61;
  uint64_t v17 = v59;
  if (v46 == *(_DWORD *)(a1 + 544))
  {
    uint64_t v48 = (uint64_t *)WTF::Vector<std::pair<WTF::String,WTF::ApproximateTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 536), v46 + 1, (unint64_t)&buf);
    uint64_t v49 = (void *)(*(void *)(a1 + 536) + 16 * *(unsigned int *)(a1 + 548));
    uint64_t v50 = *v48;
    uint64_t *v48 = 0;
    *uint64_t v49 = v50;
    v49[1] = v48[1];
    unsigned int v51 = *(_DWORD *)(a1 + 548) + 1;
    *(_DWORD *)(a1 + 548) = v51;
    uint64_t v52 = (WTF::StringImpl *)buf;
    *(void *)&long long buf = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::destroy(v52, v14);
        unsigned int v51 = *(_DWORD *)(a1 + 548);
      }
      else
      {
        *(_DWORD *)v52 -= 2;
      }
    }
  }
  else
  {
    uint64_t v53 = *(void *)(a1 + 536) + 16 * v46;
    *(void *)uint64_t v53 = v47;
    *(double *)(v53 + 8) = v31;
    unsigned int v51 = *(_DWORD *)(a1 + 548) + 1;
    *(_DWORD *)(a1 + 548) = v51;
  }
  if (v51 >= 0xB) {
    goto LABEL_50;
  }
  int v55 = 1;
LABEL_52:
  if (v17) {
    CFRelease(*(CFTypeRef *)(v17 + 8));
  }
  if (v55) {
    goto LABEL_55;
  }
LABEL_56:
  uint64_t result = (uint64_t)v62;
  char v62 = 0;
  if (!result)
  {
    if (!v55) {
      return result;
    }
    return (*(uint64_t (**)(void, const WTF::String *, uint64_t, uint64_t, WebCore::SecurityOrigin *, void *))(**(void **)(*(void *)(a1 + 40) + 8) + 1680))(*(void *)(*(void *)(a1 + 40) + 8), v13, v15, a5, this, a7);
  }
  uint64_t result = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, v14);
  if (v55) {
    return (*(uint64_t (**)(void, const WTF::String *, uint64_t, uint64_t, WebCore::SecurityOrigin *, void *))(**(void **)(*(void *)(a1 + 40) + 8) + 1680))(*(void *)(*(void *)(a1 + 40) + 8), v13, v15, a5, this, a7);
  }
  return result;
}

unsigned int *WebKit::WebPageProxy::backForwardAddItem(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4)
{
  char v4 = *(atomic_uint **)(a1 + 256);
  atomic_fetch_add(v4 + 4, 1u);
  uint64_t v6 = v4;
  uint64_t result = (unsigned int *)WebKit::WebPageProxy::backForwardAddItemShared(a1, (WebKit::WebProcessProxy **)&v6, a2, a3, a4, *(void *)(a1 + 320) != 0);
  if (v4)
  {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v4 + 4);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::backForwardAddItemShared(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, int a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  WTF::URL::URL((uint64_t)v27, a5 + 3);
  WTF::URL::URL((uint64_t)v26, a5 + 4);
  if (!WTF::linkedOnOrAfterSDKWithBehavior()) {
    goto LABEL_6;
  }
  if (WTF::URL::protocolIs()
    && (WebKit::WebProcessProxy::wasPreviouslyApprovedFileURL(*a2, (const WTF::URL *)v27) & 1) == 0)
  {
    uint64_t v22 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::backForwardAddItemShared(Ref<WebProcessProxy> &&, FrameIdentifier,"
                           " BackForwardListItemState &&, LoadedWebArchive)";
      _os_log_fault_impl(&dword_1985F2000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8861: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    uint64_t v23 = *((void *)*a2 + 18);
    if (v23) {
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (WTF::URL::protocolIs()
    && (WebKit::WebProcessProxy::wasPreviouslyApprovedFileURL(*a2, (const WTF::URL *)v26) & 1) == 0)
  {
    uint64_t v24 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::backForwardAddItemShared(Ref<WebProcessProxy> &&, FrameIdentifier,"
                           " BackForwardListItemState &&, LoadedWebArchive)";
      _os_log_fault_impl(&dword_1985F2000, v24, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8862: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    uint64_t v23 = *((void *)*a2 + 18);
    if (v23)
    {
LABEL_37:
      *(unsigned char *)(v23 + 98) = 1;
      goto LABEL_21;
    }
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x198E82784);
  }
LABEL_6:
  WebKit::WebBackForwardListItem::create((WTF::RunLoop *)a5, *(void *)(*(void *)(a1 + 32) + 760), (uint64_t *)&v25);
  uint64_t v12 = v25;
  WebKit::WebPageProxy::currentResourceDirectoryURL((WebKit::WebPageProxy *)a1, (uint64_t)buf);
  WTF::URL::operator=((uint64_t)v12 + 344, (uint64_t)buf);
  uint64_t v14 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  *((void *)v12 + 50) = a3;
  *((void *)v12 + 51) = a4;
  if (a6)
  {
    uint64_t v15 = *((void *)*a2 + 94);
    if (v15) {
      CFRetain(*(CFTypeRef *)(v15 + 8));
    }
    uint64_t v16 = *((void *)v12 + 3);
    *((void *)v12 + 3) = v15;
    if (v16) {
      CFRelease(*(CFTypeRef *)(v16 + 8));
    }
  }
  uint64_t v17 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v17 && *(unsigned char *)(v17 + 440))
  {
    *(unsigned char *)(v17 + 440) = 0;
    WebKit::WebBackForwardList::addRootChildFrameItem(*(uint64_t **)(a1 + 664), &v25);
  }
  else
  {
    WebKit::WebBackForwardList::addItem(*(void *)(a1 + 664), (uint64_t *)&v25);
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19) {
    CFRelease(*((CFTypeRef *)v19 + 1));
  }
LABEL_21:
  uint64_t v20 = v26[0];
  v26[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v18);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t result = v27[0];
  v27[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebPageProxy::backForwardGoToItem(uint64_t a1, void *a2, uint64_t *a3)
{
  if (*(void *)(a1 + 1192))
  {
    uint64_t v3 = *(void *)(a1 + 664);
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4)
      {
        if (*(unsigned char *)(v3 + 48))
        {
          uint64_t v4 = *(void *)(v3 + 40);
          unint64_t v5 = (unint64_t)(*(_DWORD *)(v3 + 36) + ~*(_DWORD *)(v3 + 40)) << 32;
LABEL_11:
          unint64_t v7 = v5 | v4;
          uint64_t v6 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, unint64_t *))(*(void *)v6 + 16))(v6, &v7);
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          return;
        }
        uint64_t v4 = 0;
      }
    }
    unint64_t v5 = 0;
    goto LABEL_11;
  }

  WebKit::WebPageProxy::backForwardGoToItemShared(a1, a2, a3);
}

void WebKit::WebPageProxy::backForwardGoToItemShared(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  {
    WebKit::pageLevelMap(void)::map = 0;
  }
  *(void *)uint64_t v21 = a1;
  if (!WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::WebPageProxy *>>,WebKit::WebPageProxy *>(&WebKit::pageLevelMap(void)::map, v21))
  {
    uint64_t v6 = *(void *)(a1 + 664);
    CFRetain(*(CFTypeRef *)(v6 + 8));
    uint64_t v7 = WebKit::WebBackForwardList::itemForID((WebKit::WebBackForwardListItem *)v6, a2);
    if (v7)
    {
      uint64_t v8 = (CFTypeRef *)v7;
      CFRetain(*(CFTypeRef *)(v7 + 8));
      WebKit::WebBackForwardList::goToItem((WebKit::WebBackForwardList *)v6, (WebKit::WebBackForwardListItem *)v8);
      uint64_t v9 = *(void *)(v6 + 16);
      if (v9)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        if (v9)
        {
          if (*(unsigned char *)(v6 + 48))
          {
            uint64_t v9 = *(void *)(v6 + 40);
            unint64_t v10 = (unint64_t)(*(_DWORD *)(v6 + 36) + ~*(void *)(v6 + 40)) << 32;
LABEL_11:
            *(void *)uint64_t v21 = v10 | v9;
            uint64_t v11 = *a3;
            *a3 = 0;
            (*(void (**)(uint64_t, uint8_t *))(*(void *)v11 + 16))(v11, v21);
            (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
            CFRelease(v8[1]);
LABEL_12:
            CFRelease(*(CFTypeRef *)(v6 + 8));
            return;
          }
          uint64_t v9 = 0;
        }
      }
      unint64_t v10 = 0;
      goto LABEL_11;
    }
    uint64_t v17 = *(void *)(v6 + 16);
    if (v17)
    {
      uint64_t v17 = *(void *)(v17 + 8);
      if (v17)
      {
        if (*(unsigned char *)(v6 + 48))
        {
          uint64_t v17 = *(void *)(v6 + 40);
          unint64_t v18 = (unint64_t)(*(_DWORD *)(v6 + 36) + ~*(void *)(v6 + 40)) << 32;
LABEL_29:
          *(void *)uint64_t v21 = v18 | v17;
          uint64_t v20 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, uint8_t *))(*(void *)v20 + 16))(v20, v21);
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          goto LABEL_12;
        }
        uint64_t v17 = 0;
      }
    }
    unint64_t v18 = 0;
    goto LABEL_29;
  }
  uint64_t v12 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t v21 = 136446210;
    *(void *)&v21[4] = "void WebKit::WebPageProxy::backForwardGoToItemShared(const BackForwardItemIdentifier &, Complet"
                         "ionHandler<void (const WebBackForwardListCounts &)> &&)";
    _os_log_fault_impl(&dword_1985F2000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8898: Invalid message dispatched %{public}s", v21, 0xCu);
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 256) + 144);
  if (v13)
  {
    *(unsigned char *)(v13 + 98) = 1;
    uint64_t v14 = *(void *)(a1 + 664);
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v15 = *(void *)(v15 + 8);
      if (v15)
      {
        if (*(unsigned char *)(v14 + 48))
        {
          uint64_t v15 = *(void *)(v14 + 40);
          unint64_t v16 = (unint64_t)(*(_DWORD *)(v14 + 36) + ~*(_DWORD *)(v14 + 40)) << 32;
LABEL_26:
          *(void *)uint64_t v21 = v16 | v15;
          uint64_t v19 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, uint8_t *))(*(void *)v19 + 16))(v19, v21);
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          return;
        }
        uint64_t v15 = 0;
      }
    }
    unint64_t v16 = 0;
    goto LABEL_26;
  }
  __break(0xC471u);
}

void WebKit::WebPageProxy::backForwardListContainsItem(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *(CFTypeRef **)(a1 + 664);
  CFRetain(v5[1]);
  BOOL v6 = WebKit::WebBackForwardList::itemForID((WebKit::WebBackForwardListItem *)v5, a2) != 0;
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, BOOL))(*(void *)v7 + 16))(v7, v6);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  CFTypeRef v8 = v5[1];

  CFRelease(v8);
}

void WebKit::WebPageProxy::backForwardItemAtIndex(uint64_t a1, WebKit::AuxiliaryProcessProxy *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v6 = WebKit::WebBackForwardList::itemAtIndex(*(void *)(a1 + 664), a3);
  if (v6)
  {
    uint64_t v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    uint64_t v9 = WebKit::AuxiliaryProcessProxy::fromConnection(a2, v8);
    if (v9 && (uint64_t v10 = *(unsigned int *)(v7 + 444), v10))
    {
      uint64_t v11 = *(void *)(v7 + 432);
      uint64_t v12 = 8 * v10;
      while (*(void *)(*(void *)v11 + 392) != *(void *)(v9 + 176))
      {
        v11 += 8;
        v12 -= 8;
        if (!v12) {
          goto LABEL_7;
        }
      }
      long long v13 = *(_OWORD *)(*(void *)v11 + 32);
    }
    else
    {
LABEL_7:
      long long v13 = *(_OWORD *)(v7 + 32);
    }
    long long v16 = v13;
    char v17 = 1;
    uint64_t v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v14 + 16))(v14, &v16);
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  else
  {
    LOBYTE(v16) = 0;
    char v17 = 0;
    uint64_t v15 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v15 + 16))(v15, &v16);
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
}

uint64_t WebKit::WebPageProxy::backForwardListCounts(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 664);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(v3 + 8);
  if (!v3) {
    goto LABEL_6;
  }
  if (!*(unsigned char *)(v2 + 48))
  {
    uint64_t v3 = 0;
LABEL_6:
    unint64_t v4 = 0;
    goto LABEL_7;
  }
  uint64_t v3 = *(void *)(v2 + 40);
  unint64_t v4 = (unint64_t)(*(_DWORD *)(v2 + 36) + ~*(_DWORD *)(v2 + 40)) << 32;
LABEL_7:
  unint64_t v7 = v4 | v3;
  uint64_t v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, unint64_t *))(*(void *)v5 + 16))(v5, &v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

uint64_t WebKit::WebPageProxy::compositionWasCanceled(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 408))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void WebKit::WebPageProxy::registerEditCommandForUndo(WebKit::WebPageProxy *this, IPC::Connection *a2, uint64_t a3, const WTF::String *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFTypeRef v8 = (CFTypeRef *)API::Object::newObject(0x30uLL, 145);
  uint64_t v10 = WebKit::WebEditCommandProxy::WebEditCommandProxy((WebKit::WebEditCommandProxy *)v8, a3, a4, this);
  if (*((void *)v10 + 3))
  {
    WebKit::WebPageProxy::registerEditCommand((uint64_t)this, (uint64_t)&v10, 0);
    CFTypeRef v8 = (CFTypeRef *)v10;
    uint64_t v10 = 0;
    if (!v8) {
      return;
    }
  }
  else
  {
    uint64_t v9 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v12 = "void WebKit::WebPageProxy::registerEditCommandForUndo(IPC::Connection &, WebUndoStepID, const String &)";
      _os_log_fault_impl(&dword_1985F2000, v9, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8939: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
    uint64_t v10 = 0;
  }
  CFRelease(v8[1]);
}

uint64_t WebKit::WebPageProxy::registerEditCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 336))(v6, a2, a3);
  unint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 1600);

  return v7(v6);
}

uint64_t WebKit::WebPageProxy::canUndoRedo(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 352))(v6, a2);
  uint64_t v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v7);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 1600);

  return v9(v6);
}

uint64_t WebKit::WebPageProxy::executeUndoRedo(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 360))(v6, a2);
  (*(void (**)(uint64_t))(*(void *)v6 + 1600))(v6);
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

uint64_t WebKit::WebPageProxy::clearAllEditCommands(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 344))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void WebKit::WebPageProxy::didGetImageForFindMatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  unint64_t v4 = *(const void **)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  CFTypeRef v9 = v4;
  __int16 v10 = *(_WORD *)(a2 + 24);
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v11, a3);
  uint64_t v14 = v7;
  int v15 = v8;
  CFTypeRef v16 = v9;
  __int16 v17 = v10;
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v18, (uint64_t)v11);
  v18[64] = 1;
  WebKit::WebImage::create(&v14, &v19);
  std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14);
  if (v13)
  {
    CFTypeRef v5 = cf;
    CFTypeRef cf = 0;
    if (v5) {
      CFRelease(v5);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
  uint64_t v6 = v19;
  if (*((void *)v19 + 2))
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), a1);
    uint64_t v6 = v19;
    uint64_t v19 = 0;
    if (!v6) {
      return;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  CFRelease(*((CFTypeRef *)v6 + 1));
}

void WebKit::WebPageProxy::setTextIndicatorFromFrame(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  v47[0] = a2;
  v47[1] = a3;
  uint64_t v8 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v8)
  {
    CFTypeRef v9 = (CFTypeRef *)v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    __int16 v10 = WebKit::WebFrameProxy::rootFrame(v9)[39];
    if (!v10 || (uint64_t v11 = v10[1]) == 0)
    {
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21) {
        uint64_t v22 = *(void *)(v21 + 8);
      }
      else {
        uint64_t v22 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v22 + 1592))(v22);
      WebCore::TextIndicator::create((uint64_t *)&v32, (WebCore::TextIndicator *)a4, v29);
      (*(void (**)(uint64_t, WebCore::TextIndicator **, void))(*(void *)v22 + 688))(v22, &v32, a5);
      double v30 = v32;
      long long v32 = 0;
      if (v30) {
        WTF::RefCounted<WebCore::TextIndicator>::deref(v30);
      }
      (*(void (**)(uint64_t))(*(void *)v22 + 1600))(v22);
      goto LABEL_34;
    }
    CFRetain(*(CFTypeRef *)(v11 + 8));
    uint64_t v12 = *(void *)(v11 + 272);
    uint64_t v13 = *(void *)(v11 + 280);
    long long v46 = a4[1];
    v45[0] = v47;
    v45[1] = &v46;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    long long v14 = a4[1];
    long long v33 = *a4;
    long long v34 = v14;
    long long v32 = (WebCore::TextIndicator *)a1;
    long long v35 = a4[2];
    uint64_t v36 = (WTF *)*((void *)a4 + 6);
    uint64_t v15 = *((void *)a4 + 7);
    *((void *)a4 + 6) = 0;
    *((void *)a4 + 7) = 0;
    uint64_t v37 = v15;
    int v38 = *((_DWORD *)a4 + 16);
    long long v16 = *(long long *)((char *)a4 + 72);
    *((void *)a4 + 9) = 0;
    *((void *)a4 + 10) = 0;
    long long v39 = v16;
    int v40 = (_DWORD *)*((void *)a4 + 11);
    *((void *)a4 + 11) = 0;
    WebCore::Color::Color();
    int v42 = *((_DWORD *)a4 + 26);
    uint64_t v43 = v11;
    uint64_t v44 = a5;
    uint64_t v17 = WebKit::WebFrameProxy::webFrame(v12, v13);
    if (v17)
    {
      uint64_t v18 = v17;
      CFRetain(*(CFTypeRef *)(v17 + 8));
      uint64_t v19 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v18 + 32) + 16));
      if (v19)
      {
        WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0,unsigned long long>(*(void *)(v19 + 24), (uint64_t)v45, (uint64_t)&v32, *(void *)(v19 + 16));
        CFRelease(*(CFTypeRef *)(v18 + 8));
LABEL_11:
        uint64_t v23 = v43;
        uint64_t v43 = 0;
        if (v23) {
          CFRelease(*(CFTypeRef *)(v23 + 8));
        }
        if ((v41 & 0x8000000000000) != 0)
        {
          double v31 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v31);
            WTF::fastFree((WTF *)v31, v20);
          }
        }
        uint64_t v24 = v40;
        int v40 = 0;
        if (v24)
        {
          if (v24[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
          }
          else {
            --v24[2];
          }
        }
        uint64_t v25 = (_DWORD *)*((void *)&v39 + 1);
        *((void *)&v39 + 1) = 0;
        if (v25)
        {
          if (v25[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v25 + 8))(v25);
          }
          else {
            --v25[2];
          }
        }
        uint64_t v26 = (_DWORD *)v39;
        *(void *)&long long v39 = 0;
        if (v26)
        {
          if (v26[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
          }
          else {
            --v26[2];
          }
        }
        uint64_t v27 = v36;
        if (v36)
        {
          uint64_t v36 = 0;
          LODWORD(v37) = 0;
          WTF::fastFree(v27, v20);
        }
        uint64_t v28 = (uint64_t)v32;
        long long v32 = 0;
        if (v28) {
          CFRelease(*(CFTypeRef *)(v28 + 8));
        }
LABEL_34:
        CFRelease(v9[1]);
        return;
      }
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0,unsigned long long>(*(void *)(a1 + 256), (uint64_t)v45, (uint64_t)&v32, *(void *)(*(void *)(a1 + 32) + 1928));
    goto LABEL_11;
  }
}

uint64_t WebKit::WebPageProxy::clearTextIndicator(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 696))(v2, 1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void WebKit::WebPageProxy::Internals::valueChangedForPopupMenu(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v5 = *(void *)(v4 + 344);
  if (v5 || (uint64_t v5 = *(void *)(v4 + 328)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 + 8));
    uint64_t v6 = *(void *)(v5 + 272);
    uint64_t v7 = *(void *)(v5 + 280);
    int v11 = a3;
    uint64_t v8 = WebKit::WebFrameProxy::webFrame(v6, v7);
    if (v8)
    {
      uint64_t v9 = v8;
      CFRetain(*(CFTypeRef *)(v8 + 8));
      uint64_t v10 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(v4 + 1416), (const WebKit::WebPageProxy *)v4, *(const WebKit::WebProcessProxy **)(*(void *)(v9 + 32) + 16));
      if (v10)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidChangeSelectedIndexForActivePopupMenu>(*(void *)(v10 + 24), &v11, *(void *)(v10 + 16), 0);
        CFRelease(*(CFTypeRef *)(v9 + 8));
LABEL_8:
        CFRelease(*(CFTypeRef *)(v5 + 8));
        goto LABEL_9;
      }
      CFRelease(*(CFTypeRef *)(v9 + 8));
    }
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidChangeSelectedIndexForActivePopupMenu>(*(void *)(v4 + 256), &v11, *(void *)(*(void *)(v4 + 32) + 1928), 0);
    goto LABEL_8;
  }
LABEL_9:
  CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WebKit::WebPageProxy::Internals::setTextFromItemForPopupMenu(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  int v13 = a3;
  uint64_t v5 = *(void *)(v4 + 256);
  uint64_t v6 = *(void *)(*(void *)(v4 + 32) + 1928);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2474;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  long long v16 = v7;
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(v7, &v13);
  LOBYTE(v14) = 0;
  char v15 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v16, 0, (uint64_t)&v14, 1);
  if (v15)
  {
    uint64_t v9 = v14;
    uint64_t v14 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  uint64_t v10 = v16;
  long long v16 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  CFRelease(*(CFTypeRef *)(v4 + 8));
}

uint64_t WebKit::WebPageProxy::Internals::currentlyProcessedMouseDownEvent(WebKit::WebPageProxy::Internals *this)
{
  uint64_t v1 = *((void *)this + 107);
  if (v1 == *((void *)this + 108)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 109) + 160 * v1;
  if (*(unsigned char *)(v3 + 4)) {
    return 0;
  }
  else {
    return v3;
  }
}

void WebKit::WebPageProxy::postMessageToInjectedBundle(WebKit::WebPageProxy *this, WTF::StringImpl **a2, CFTypeRef *a3)
{
  if (*((unsigned char *)this + 801) || !*((unsigned char *)this + 800))
  {
    uint64_t v6 = *a2;
    if (*a2) {
      *(_DWORD *)v6 += 2;
    }
    uint64_t v25 = v6;
    if (a3) {
      CFRetain(a3[1]);
    }
    uint64_t v26 = a3;
    uint64_t v7 = *((unsigned int *)this + 327);
    if (v7 == *((_DWORD *)this + 326))
    {
      uint64_t v8 = (uint64_t *)WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)this + 324, v7 + 1, (unint64_t)&v25);
      uint64_t v9 = *((unsigned int *)this + 327);
      int v10 = v9 + 1;
      int v11 = (void *)(*((void *)this + 162) + 16 * v9);
      uint64_t v12 = *v8;
      *uint64_t v8 = 0;
      void *v11 = v12;
      uint64_t v13 = v8[1];
      v8[1] = 0;
      v11[1] = v13;
      *((_DWORD *)this + 327) = v10;
      uint64_t v14 = v26;
      uint64_t v26 = 0;
      if (v14) {
        CFRelease(v14[1]);
      }
    }
    else
    {
      int v19 = v7 + 1;
      uint64_t v20 = *((void *)this + 162);
      uint64_t v25 = 0;
      uint64_t v21 = (WTF::StringImpl **)(v20 + 16 * v7);
      *uint64_t v21 = v6;
      v21[1] = (WTF::StringImpl *)a3;
      *((_DWORD *)this + 327) = v19;
      uint64_t v26 = 0;
    }
    uint64_t v22 = v25;
    uint64_t v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  else
  {
    uint64_t v15 = *((void *)this + 32);
    atomic_fetch_add((atomic_uint *volatile)(v15 + 16), 1u);
    uint64_t v25 = (WTF::StringImpl *)&unk_1EE9DCAF8;
    WebKit::UserData::transform(a3, (uint64_t)&v25, &v23);
    uint64_t v16 = v23;
    if (v23) {
      CFRetain(*(CFTypeRef *)(v23 + 8));
    }
    uint64_t v24 = v16;
    uint64_t v25 = (WTF::StringImpl *)a2;
    uint64_t v26 = (CFTypeRef *)&v24;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::PostInjectedBundleMessage>(*((void *)this + 32), (uint64_t **)&v25, *(void *)(*((void *)this + 4) + 1928));
    uint64_t v17 = v24;
    uint64_t v24 = 0;
    if (v17) {
      CFRelease(*(CFTypeRef *)(v17 + 8));
    }
    uint64_t v18 = v23;
    uint64_t v23 = 0;
    if (v18) {
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    if (v15) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v15 + 16));
    }
  }
}

void WebKit::WebPageProxy::showPopupMenuFromFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const WebCore::IntRect *a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  v52[3] = *MEMORY[0x1E4F143B8];
  v45[0] = a3;
  v45[1] = a4;
  uint64_t v15 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v15)
  {
    uint64_t v16 = (CFTypeRef *)v15;
    CFRetain(*(CFTypeRef *)(v15 + 8));
    uint64_t v17 = WebKit::WebFrameProxy::rootFrame(v16)[39];
    if (v17)
    {
      uint64_t v18 = v17[1];
      if (v18)
      {
        CFRetain(*(CFTypeRef *)(v18 + 8));
        uint64_t v19 = *(void *)(v18 + 272);
        uint64_t v20 = *(void *)(v18 + 280);
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v43, a5);
        v44[0] = v45;
        v44[1] = v43;
        CFRetain(*(CFTypeRef *)(a1 + 8));
        *(void *)&long long buf = a1;
        *((void *)&buf + 1) = v18;
        uint64_t v47 = a6;
        unsigned int v48 = a8;
        uint64_t v21 = *(const void **)a9;
        CFTypeRef cf = v21;
        if (v21) {
          CFRetain(v21);
        }
        __int16 v50 = *(_WORD *)(a9 + 8);
        char v51 = *(unsigned char *)(a9 + 10);
        v52[0] = *(void *)a7;
        uint64_t v22 = *(void *)(a7 + 8);
        *(void *)a7 = 0;
        *(void *)(a7 + 8) = 0;
        v52[1] = v22;
        uint64_t v23 = WebKit::WebFrameProxy::webFrame(v19, v20);
        if (v23)
        {
          uint64_t v24 = v23;
          CFRetain(*(CFTypeRef *)(v23 + 8));
          uint64_t v25 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v24 + 32) + 16));
          if (v25)
          {
            WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0,unsigned long long>(*(void *)(v25 + 24), (uint64_t)v44, &buf, *(void *)(v25 + 16));
            CFRelease(*(CFTypeRef *)(v24 + 8));
LABEL_19:
            WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v52, v26);
            CFTypeRef v30 = cf;
            CFTypeRef cf = 0;
            if (v30) {
              CFRelease(v30);
            }
            uint64_t v31 = *((void *)&buf + 1);
            *((void *)&buf + 1) = 0;
            if (v31) {
              CFRelease(*(CFTypeRef *)(v31 + 8));
            }
            uint64_t v32 = buf;
            *(void *)&long long buf = 0;
            if (!v32) {
              goto LABEL_33;
            }
            long long v33 = *(const void **)(v32 + 8);
            goto LABEL_32;
          }
          CFRelease(*(CFTypeRef *)(v24 + 8));
        }
        WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0,unsigned long long>(*(void *)(a1 + 256), (uint64_t)v44, &buf, *(void *)(*(void *)(a1 + 32) + 1928));
        goto LABEL_19;
      }
    }
    if (a8 != -1 && *(_DWORD *)(a7 + 12) <= a8)
    {
      int v42 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = "void WebKit::WebPageProxy::showPopupMenu(IPC::Connection &, const IntRect &, uin"
                                        "t64_t, const Vector<WebPopupItem> &, int32_t, const PlatformPopupMenuData &)";
        _os_log_fault_impl(&dword_1985F2000, v42, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9139: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
      }
      *(unsigned char *)(a2 + 98) = 1;
      goto LABEL_33;
    }
    uint64_t v27 = *(_DWORD **)(a1 + 528);
    *(void *)(a1 + 528) = 0;
    if (v27)
    {
      (*(void (**)(_DWORD *))(*(void *)v27 + 24))(v27);
      uint64_t v28 = *((void *)v27 + 2);
      if (v28)
      {
        int v29 = *(_DWORD *)(v28 + 8);
        if (!v29)
        {
          __break(0xC471u);
          JUMPOUT(0x198E8444CLL);
        }
        *(_DWORD *)(v28 + 8) = v29 - 1;
      }
      *((void *)v27 + 2) = 0;
      if (v27[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
      }
      else {
        --v27[2];
      }
    }
    uint64_t v34 = *(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24))
                    + 320);
    if (v34)
    {
      CFRetain(*(CFTypeRef *)(v34 + 8));
      if (*(unsigned char *)(a1 + 898))
      {
        if ((uint64_t v35 = *(void *)(v34 + 176)) != 0 && *(_DWORD *)(v35 - 12) || *(unsigned char *)(v34 + 300))
        {
          long long v33 = *(const void **)(v34 + 8);
LABEL_32:
          CFRelease(v33);
LABEL_33:
          CFRelease(v16[1]);
          return;
        }
      }
      CFRelease(*(CFTypeRef *)(v34 + 8));
    }
    uint64_t v36 = *(void *)(a1 + 40);
    if (v36) {
      uint64_t v37 = *(void *)(v36 + 8);
    }
    else {
      uint64_t v37 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v37 + 1592))(v37);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v37 + 648))(&buf, v37, a1);
    (*(void (**)(uint64_t))(*(void *)v37 + 1600))(v37);
    uint64_t v38 = buf;
    if ((void)buf) {
      ++*(_DWORD *)(buf + 8);
    }
    long long v39 = *(_DWORD **)(a1 + 528);
    *(void *)(a1 + 528) = v38;
    if (v39)
    {
      if (v39[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v39 + 8))(v39);
        if (!(void)buf) {
          goto LABEL_33;
        }
LABEL_47:
        uint64_t v40 = *(void *)(a1 + 256);
        atomic_fetch_add((atomic_uint *volatile)(v40 + 16), 1u);
        WebKit::ResponsivenessTimer::stop((unsigned char *)(v40 + 56));
        if (v40) {
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v40 + 16));
        }
        CFRetain(*(CFTypeRef *)(a1 + 8));
        (*(void (**)(double))(*(void *)buf + 16))(*(double *)(a1 + 712));
        CFRelease(*(CFTypeRef *)(a1 + 8));
        uint64_t v41 = (_DWORD *)buf;
        *(void *)&long long buf = 0;
        if (v41)
        {
          if (v41[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v41 + 8))(v41);
          }
          else {
            --v41[2];
          }
        }
        goto LABEL_33;
      }
      --v39[2];
    }
    if (!v38) {
      goto LABEL_33;
    }
    goto LABEL_47;
  }
}

uint64_t WebKit::WebPageProxy::hidePopupMenu(uint64_t this)
{
  uint64_t v1 = *(_DWORD **)(this + 528);
  *(void *)(this + 528) = 0;
  if (v1)
  {
    this = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 24))(v1);
    uint64_t v2 = *((void *)v1 + 2);
    if (v2)
    {
      int v3 = *(_DWORD *)(v2 + 8);
      if (!v3)
      {
        this = 286;
        __break(0xC471u);
        return this;
      }
      *(_DWORD *)(v2 + 8) = v3 - 1;
    }
    *((void *)v1 + 2) = 0;
    if (v1[2] == 1)
    {
      uint64_t v4 = *(uint64_t (**)(_DWORD *))(*(void *)v1 + 8);
      return v4(v1);
    }
    else
    {
      --v1[2];
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::dispatchAfterCurrentContextMenuEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 852);
  if (v3 == *(_DWORD *)(a1 + 848))
  {
    WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::CompletionHandler<void ()(BOOL)>>(a1 + 840, (unint64_t)a2);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 840);
    uint64_t v5 = *a2;
    *a2 = 0;
    *(void *)(v4 + 8 * v3) = v5;
    *(_DWORD *)(a1 + 852) = v3 + 1;
  }

  return WebKit::WebPageProxy::processContextMenuCallbacks(a1, a2);
}

uint64_t WebKit::WebPageProxy::processContextMenuCallbacks(uint64_t this, void *a2)
{
  int v2 = *(unsigned __int8 *)(this + 832);
  if (v2 != 1)
  {
    uint64_t v3 = *(void **)(this + 840);
    uint64_t v9 = v3;
    uint64_t v4 = *(unsigned int *)(this + 852);
    int v10 = *(_DWORD *)(this + 848);
    int v11 = v4;
    v8[0] = 0;
    *(void *)(this + 840) = 0;
    v8[1] = 0;
    *(void *)(this + 848) = 0;
    WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, a2);
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *v3;
        *v3++ = 0;
        (*(void (**)(uint64_t, BOOL))(*(void *)v7 + 16))(v7, v2 == 2);
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        v6 -= 8;
      }
      while (v6);
    }
    return WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v5);
  }
  return this;
}

unsigned int *WTF::WeakHashSet<WebKit::WebEditCommandProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebEditCommandProxy>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          *(void *)(v8 + 8 * v11) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *(void *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *(void *)a1;
        if (*(void *)a1) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - 12) = v15 - v10;
        uint64_t v8 = *(void *)a1;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v8 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 12) = 2 * v19;
          goto LABEL_28;
        }
LABEL_26:
        int v19 = v18;
        goto LABEL_27;
      }
    }
    unsigned int v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v20 = a2[2];
  if (!v20)
  {
    uint64_t v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v20 = 1;
    *(void *)(v20 + 8) = a2;
    uint64_t v22 = (unsigned int *)a2[2];
    a2[2] = v20;
    if (v22)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
      uint64_t v20 = a2[2];
    }
  }
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  uint64_t v25 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v25, a3);
  uint64_t result = (unsigned int *)v25;
  uint64_t v25 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
  }
  if (v20)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v23);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::removeEditCommand(WebKit::WebPageProxy *this, WebKit::WebEditCommandProxy *a2)
{
  uint64_t result = WTF::WeakHashSet<WebKit::WebEditCommandProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebEditCommandProxy>((uint64_t)this + 504, a2);
  if (!*((unsigned char *)this + 801))
  {
    if (*((unsigned char *)this + 800))
    {
      uint64_t v5 = *((void *)a2 + 3);
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidRemoveEditCommand>(*((void *)this + 32), &v5, *(void *)(*((void *)this + 4) + 1928), 0);
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::WebEditCommandProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebEditCommandProxy>(uint64_t a1, void *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  unsigned int v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    uint64_t v6 = *(void *)a1;
    if (*(void *)a1)
    {
      int v7 = *(_DWORD *)(v6 - 4);
      if (!v7) {
        goto LABEL_22;
      }
      int v8 = 0;
      unsigned int v9 = v7 - 1;
      do
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)(v6 + 8 * v9);
        if ((unint64_t)(v11 + 1) >= 2 && !*(void *)(v11 + 8))
        {
          *(void *)(v6 + 8 * v9) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v11);
            WTF::fastFree((WTF *)v11, a2);
          }
          *(void *)(v6 + 8 * v9) = -1;
          ++v8;
        }
        --v9;
      }
      while (v10);
      uint64_t v6 = *(void *)a1;
      if (v8)
      {
        *(_DWORD *)(v6 - 16) += v8;
        uint64_t v12 = *(void *)a1;
        if (*(void *)a1) {
          int v13 = *(_DWORD *)(v12 - 12);
        }
        else {
          int v13 = 0;
        }
        *(_DWORD *)(v12 - 12) = v13 - v8;
        uint64_t v6 = *(void *)a1;
      }
      if (v6)
      {
        unsigned int v14 = *(_DWORD *)(v6 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v14)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v6 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v6)
          {
            unsigned int v16 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v16 = *(_DWORD *)(v6 - 12);
        int v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 12) = 2 * v17;
          goto LABEL_28;
        }
LABEL_26:
        int v17 = v16;
        goto LABEL_27;
      }
    }
    unsigned int v16 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v18 = a2[2];
  if (!v18 || !*(void *)(v18 + 8)) {
    return 0;
  }
  uint64_t v22 = a2[2];
  int v19 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v22);
  if (*(void *)a1)
  {
    uint64_t v20 = *(void *)a1 + 8 * *(unsigned int *)(*(void *)a1 - 4);
    if ((unsigned int **)v20 == v19) {
      return 0;
    }
  }
  else
  {
    if (!v19) {
      return 0;
    }
    uint64_t v20 = 0;
  }
  if ((unsigned int **)v20 != v19) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, v19);
  }
  return 1;
}

uint64_t WebKit::WebPageProxy::checkTextOfParagraph(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t *a5)
{
  if (*(unsigned char *)(a1 + 1168))
  {
    uint64_t v6 = *(void *)(a1 + 1160);
  }
  else
  {
    uint64_t v6 = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
    *(void *)(a1 + 1160) = WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
    *(unsigned char *)(a1 + 1168) = 1;
  }
  uint64_t v7 = *a2;
  if (*a2)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    unint64_t v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0x100000000;
  }
  WebKit::TextChecker::checkTextOfParagraph(v6, v8, v9, a4, a3, (uint64_t)v13);
  uint64_t v10 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 16))(v10, v13);
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  return WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v11);
}

uint64_t WebKit::WebPageProxy::checkSpellingOfString(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!*(unsigned char *)(a1 + 1168))
  {
    *(void *)(a1 + 1160) = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
    *(unsigned char *)(a1 + 1168) = 1;
  }
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void, void))(*(void *)v3 + 16))(v3, 0, 0);
  unsigned int v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::WebPageProxy::checkGrammarOfString(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v6[0] = 0;
  v6[1] = 0;
  if (!*(unsigned char *)(a1 + 1168))
  {
    *(void *)(a1 + 1160) = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
    *(unsigned char *)(a1 + 1168) = 1;
  }
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void *, void, void))(*(void *)v3 + 16))(v3, v6, 0, 0);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  return WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
}

uint64_t WebKit::WebPageProxy::spellingUIIsShowing(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WebKit::WebPageProxy::updateSpellingUIWithMisspelledWord(uint64_t this, const WTF::String *a2)
{
  if (!*(unsigned char *)(this + 1168))
  {
    *(void *)(this + 1160) = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
    *(unsigned char *)(this + 1168) = 1;
  }
  return this;
}

uint64_t WebKit::WebPageProxy::getGuessesForWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v8[0] = 0;
  v8[1] = 0;
  if (!*(unsigned char *)(a1 + 1168))
  {
    *(void *)(a1 + 1160) = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
    *(unsigned char *)(a1 + 1168) = 1;
  }
  uint64_t v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 16))(v5, v8);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
}

void WebKit::WebPageProxy::learnWord(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 227);
  if (v3)
  {
    *((_DWORD *)this + 227) = v3 - 1;
    if (!*((unsigned char *)this + 1168))
    {
      *((void *)this + 145) = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
      *((unsigned char *)this + 1168) = 1;
    }
  }
  else
  {
    uint64_t v5 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v6 = 136446210;
      uint64_t v7 = "void WebKit::WebPageProxy::learnWord(IPC::Connection &, const String &)";
      _os_log_fault_impl(&dword_1985F2000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9635: Invalid message dispatched %{public}s", (uint8_t *)&v6, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::ignoreWord(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 227);
  if (v3)
  {
    *((_DWORD *)this + 227) = v3 - 1;
    if (!*((unsigned char *)this + 1168))
    {
      *((void *)this + 145) = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
      *((unsigned char *)this + 1168) = 1;
    }
  }
  else
  {
    uint64_t v5 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v6 = 136446210;
      uint64_t v7 = "void WebKit::WebPageProxy::ignoreWord(IPC::Connection &, const String &)";
      _os_log_fault_impl(&dword_1985F2000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9643: Invalid message dispatched %{public}s", (uint8_t *)&v6, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::requestCheckingOfString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(v7 + 8) = a2;
  uint64_t v8 = *(WTF::StringImpl **)a3;
  if (*(void *)a3)
  {
    *(_DWORD *)v8 += 2;
    *(void *)(v7 + 16) = v8;
    long long v9 = *(_OWORD *)(a3 + 8);
    *(_WORD *)(v7 + 40) = *(_WORD *)(a3 + 24);
    *(_OWORD *)(v7 + 24) = v9;
    *(void *)(v7 + 48) = a1;
    *(void *)(v7 + 16) = 0;
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  else
  {
    *(void *)(v7 + 16) = 0;
    long long v11 = *(_OWORD *)(a3 + 8);
    *(_WORD *)(v7 + 40) = *(_WORD *)(a3 + 24);
    *(_OWORD *)(v7 + 24) = v11;
    *(void *)(v7 + 48) = a1;
    *(void *)(v7 + 16) = 0;
  }

  return WTF::fastFree((WTF *)v7, v6);
}

unint64_t WebKit::WebPageProxy::focusFromServiceWorker(unint64_t a1, uint64_t *a2)
{
  if (((*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 104) + 96))(*(void *)(a1 + 104), a1) & 1) == 0|| (*(_WORD *)(*(void *)(a1 + 32) + 64) & 4) != 0)
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    int v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
  else
  {
    return WebKit::WebPageProxy::installActivityStateChangeCompletionHandler(a1, a2);
  }
}

unint64_t WebKit::WebPageProxy::installActivityStateChangeCompletionHandler(unint64_t result, uint64_t *a2)
{
  if (*(unsigned char *)(result + 801) || (unint64_t v4 = result, !*(unsigned char *)(result + 800)))
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    int v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
    return v3(v2);
  }
  else
  {
    uint64_t v5 = *(unsigned int *)(result + 1052);
    if (v5 == *(_DWORD *)(result + 1048))
    {
      uint64_t result = WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 1040, v5 + 1, (unint64_t)a2);
      uint64_t v5 = *(unsigned int *)(v4 + 1052);
      int v6 = v5 + 1;
      uint64_t v7 = *(void *)(v4 + 1040);
      uint64_t v8 = *(void *)result;
      *(void *)uint64_t result = 0;
    }
    else
    {
      int v6 = v5 + 1;
      uint64_t v7 = *(void *)(result + 1040);
      uint64_t v8 = *a2;
      *a2 = 0;
    }
    *(void *)(v7 + 8 * v5) = v8;
    *(_DWORD *)(v4 + 1052) = v6;
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setFocus(WebKit::WebPageProxy *this, int a2)
{
  uint64_t v2 = **((void **)this + 13);
  if (a2) {
    return (*(uint64_t (**)(void))(v2 + 80))();
  }
  else {
    return (*(uint64_t (**)(void))(v2 + 88))();
  }
}

uint64_t WebKit::WebPageProxy::takeFocus(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, BOOL))(**(void **)(a1 + 104) + 72))(*(void *)(a1 + 104), a1, a2 == 1);
  if ((result & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      uint64_t v6 = *(void *)(v5 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 768))(v6, a2);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 1600);
    return v7(v6);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setCursor(WebKit::WebPageProxy *this, const Cursor *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, const Cursor *))(*(void *)v4 + 312))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

uint64_t WebKit::WebPageProxy::setCursorHiddenUntilMouseMoves(WebKit::WebPageProxy *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 320))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

uint64_t WebKit::WebPageProxy::editorStateChanged(WebKit::WebPageProxy *a1, char *a2)
{
  uint64_t result = WebKit::WebPageProxy::updateEditorState(a1, a2, 1);
  if (result)
  {
    return WebKit::WebPageProxy::dispatchDidUpdateEditorState((uint64_t)a1);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::updateEditorState(WebKit::WebPageProxy *a1, char *a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a3 == 2)
  {
    uint64_t v5 = *((void *)a1 + 29);
    if (v5) {
      a3 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 216))(v5) ^ 1;
    }
    else {
      a3 = 1;
    }
  }
  uint64_t v6 = *((void *)a1 + 4);
  unint64_t v7 = *(void *)a2;
  if (a3 == 1)
  {
    BOOL v9 = 0;
    BOOL v8 = a2[464] != 0;
  }
  else if (a3)
  {
    BOOL v9 = 0;
    BOOL v8 = 0;
  }
  else
  {
    BOOL v8 = 0;
    BOOL v9 = *(unsigned char *)(v6 + 704) != 0;
  }
  long long v11 = (_OWORD *)(v6 + 240);
  unint64_t v10 = *(void *)(v6 + 240);
  v21[0] = 0;
  char v25 = 0;
  if (v7 < v10)
  {
    if (!v8)
    {
LABEL_27:
      uint64_t v15 = 0;
      goto LABEL_28;
    }
    *(_OWORD *)uint64_t v21 = *v11;
    *(_DWORD *)&v21[15] = *(_DWORD *)(v6 + 255);
    v22[0] = 0;
    char v23 = 0;
    if (*(unsigned char *)(v6 + 576))
    {
      std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData const&,WebKit::EditorState::PostLayoutData*>((uint64_t)v22, (long long *)(v6 + 272));
      char v23 = 1;
    }
    std::__optional_move_base<WebKit::EditorState::VisualData,false>::__optional_move_base[abi:sn180100]((uint64_t)v24, (uint64_t *)(v6 + 592));
    char v25 = 1;
    uint64_t v12 = (uint64_t *)a2;
    goto LABEL_24;
  }
  v17[0] = *v11;
  *(_DWORD *)((char *)v17 + 15) = *(_DWORD *)(v6 + 255);
  v18[0] = 0;
  char v19 = 0;
  if (*(unsigned char *)(v6 + 576))
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData*>((uint64_t)v18, (long long *)(v6 + 272));
    char v19 = 1;
  }
  std::__optional_move_base<WebKit::EditorState::VisualData,false>::__optional_move_base[abi:sn180100]((uint64_t)v20, (long long *)(v6 + 592));
  long long v13 = *(_OWORD *)a2;
  *(_DWORD *)(v6 + 255) = *(_DWORD *)(a2 + 15);
  _OWORD *v11 = v13;
  std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::PostLayoutData,false> const&>((WebKit::EditorState::PostLayoutData *)(v6 + 272), (unsigned __int8 *)a2 + 32);
  std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::VisualData,false> const&>(v6 + 592, (uint64_t *)a2 + 44);
  if (v25)
  {
    *(_OWORD *)uint64_t v21 = v17[0];
    *(_DWORD *)&v21[15] = *(_DWORD *)((char *)v17 + 15);
    std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::PostLayoutData,false>>((WebKit::EditorState::PostLayoutData *)v22, v18);
    std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::VisualData,false>>((uint64_t)v24, v20);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState,WebKit::EditorState,WebKit::EditorState*>((uint64_t)v21, v17);
    char v25 = 1;
  }
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v14);
  if (v19) {
    goto LABEL_30;
  }
  if (v9)
  {
    while (!v25)
    {
      __break(1u);
LABEL_30:
      WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v18, a2);
      if (!v9) {
        goto LABEL_25;
      }
    }
    uint64_t v12 = (uint64_t *)v21;
LABEL_24:
    std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::VisualData,false> const&>(*((void *)a1 + 4) + 592, v12 + 44);
  }
LABEL_25:
  if (!v25) {
    goto LABEL_27;
  }
  WebKit::WebPageProxy::didUpdateEditorState(a1, v21, a2);
  uint64_t v15 = 1;
LABEL_28:
  std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](v21, a2);
  return v15;
}

WTF *WebKit::WebPageProxy::logDiagnosticMessage(WebKit::WebPageProxy *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = (WTF *)WebKit::WebPageProxy::isAlwaysOnLoggingAllowed(a1);
  if (result)
  {
    if (!a4 || (uint64_t result = (WTF *)WTF::cryptographicallyRandomUnitInterval(result), v7 <= 0.05))
    {
      uint64_t result = (WTF *)*((void *)a1 + 16);
      if (result)
      {
        BOOL v8 = *(uint64_t (**)(void))(*(void *)result + 16);
        return (WTF *)v8();
      }
    }
  }
  return result;
}

void WebKit::WebPageProxy::logDiagnosticMessageFromWebProcess(WebKit::WebPageProxy *a1, uint64_t a2, WTF::String *this, uint64_t a4, int a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (WTF::String::containsOnlyASCII(this))
  {
    WebKit::WebPageProxy::logDiagnosticMessage(a1, (uint64_t)this, a4, a5);
  }
  else
  {
    unint64_t v10 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v11 = 136446210;
      uint64_t v12 = "void WebKit::WebPageProxy::logDiagnosticMessageFromWebProcess(IPC::Connection &, const String &, const Strin"
            "g &, WebCore::ShouldSample)";
      _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9950: Invalid message dispatched %{public}s", (uint8_t *)&v11, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

WTF *WebKit::WebPageProxy::logDiagnosticMessageWithResult(WebKit::WebPageProxy *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result = (WTF *)WebKit::WebPageProxy::isAlwaysOnLoggingAllowed(a1);
  if (result)
  {
    if (!a5 || (uint64_t result = (WTF *)WTF::cryptographicallyRandomUnitInterval(result), v8 <= 0.05))
    {
      uint64_t result = (WTF *)*((void *)a1 + 16);
      if (result)
      {
        BOOL v9 = *(uint64_t (**)(void))(*(void *)result + 24);
        return (WTF *)v9();
      }
    }
  }
  return result;
}

void WebKit::WebPageProxy::logDiagnosticMessageWithResultFromWebProcess(WebKit::WebPageProxy *a1, uint64_t a2, WTF::String *this, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (WTF::String::containsOnlyASCII(this))
  {
    WebKit::WebPageProxy::logDiagnosticMessageWithResult(a1, (uint64_t)this, a4, a5, a6);
  }
  else
  {
    uint64_t v12 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v13 = 136446210;
      unsigned int v14 = "void WebKit::WebPageProxy::logDiagnosticMessageWithResultFromWebProcess(IPC::Connection &, const String &, c"
            "onst String &, uint32_t, WebCore::ShouldSample)";
      _os_log_fault_impl(&dword_1985F2000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9966: Invalid message dispatched %{public}s", (uint8_t *)&v13, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

WTF::StringImpl *WebKit::WebPageProxy::logDiagnosticMessageWithValue(WebKit::WebPageProxy *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result = (WTF::StringImpl *)WebKit::WebPageProxy::isAlwaysOnLoggingAllowed(a1);
  if (result)
  {
    if (!a5 || (uint64_t result = (WTF::StringImpl *)WTF::cryptographicallyRandomUnitInterval(result), v10 <= 0.05))
    {
      uint64_t v11 = *((void *)a1 + 16);
      if (v11)
      {
        WTF::String::numberToStringFixedPrecision();
        (*(void (**)(uint64_t, WebKit::WebPageProxy *, uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v11 + 32))(v11, a1, a2, a3, &v13);
        uint64_t result = v13;
        int v13 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

void WebKit::WebPageProxy::logDiagnosticMessageWithValueFromWebProcess(WebKit::WebPageProxy *a1, uint64_t a2, WTF::String *this, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (WTF::String::containsOnlyASCII(this))
  {
    WebKit::WebPageProxy::logDiagnosticMessageWithValue(a1, (uint64_t)this, a4, a5, a6);
  }
  else
  {
    uint64_t v12 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v13 = 136446210;
      unsigned int v14 = "void WebKit::WebPageProxy::logDiagnosticMessageWithValueFromWebProcess(IPC::Connection &, const String &, co"
            "nst String &, double, unsigned int, ShouldSample)";
      _os_log_fault_impl(&dword_1985F2000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9982: Invalid message dispatched %{public}s", (uint8_t *)&v13, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

WTF *WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacy(WebKit::WebPageProxy *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = (WTF *)WebKit::WebPageProxy::isAlwaysOnLoggingAllowed(a1);
  if (result)
  {
    if (!a4 || (uint64_t result = (WTF *)WTF::cryptographicallyRandomUnitInterval(result), v7 <= 0.05))
    {
      uint64_t result = (WTF *)*((void *)a1 + 16);
      if (result)
      {
        double v8 = *(uint64_t (**)(void))(*(void *)result + 40);
        return (WTF *)v8();
      }
    }
  }
  return result;
}

void WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacyFromWebProcess(WebKit::WebPageProxy *a1, uint64_t a2, WTF::String *this, uint64_t a4, int a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (WTF::String::containsOnlyASCII(this))
  {
    WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacy(a1, (uint64_t)this, a4, a5);
  }
  else
  {
    double v10 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v11 = 136446210;
      uint64_t v12 = "void WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacyFromWebProcess(IPC::Connection &, const St"
            "ring &, const String &, WebCore::ShouldSample)";
      _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9998: Invalid message dispatched %{public}s", (uint8_t *)&v11, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionaryFromWebProcess(int a1, uint64_t a2, WTF::String *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (WTF::String::containsOnlyASCII(this))
  {
    JUMPOUT(0x198E8618CLL);
  }
  uint64_t v4 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    int v5 = 136446210;
    uint64_t v6 = "void WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionaryFromWebProcess(IPC::Connection &, const Strin"
         "g &, const String &, const WebCore::DiagnosticLoggingClient::ValueDictionary &, WebCore::ShouldSample)";
    _os_log_fault_impl(&dword_1985F2000, v4, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 10026: Invalid message dispatched %{public}s", (uint8_t *)&v5, 0xCu);
  }
  *(unsigned char *)(a2 + 98) = 1;
}

void WebKit::WebPageProxy::logDiagnosticMessageWithDomainFromWebProcess(WebKit::WebPageProxy *a1, uint64_t a2, WTF::String *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (WTF::String::containsOnlyASCII(this))
  {
    if (WebKit::WebPageProxy::isAlwaysOnLoggingAllowed(a1))
    {
      uint64_t v5 = *((void *)a1 + 16);
      if (v5)
      {
        uint64_t v6 = *(void (**)(void))(*(void *)v5 + 56);
        v6();
      }
    }
  }
  else
  {
    uint64_t v7 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v8 = 136446210;
      BOOL v9 = "void WebKit::WebPageProxy::logDiagnosticMessageWithDomainFromWebProcess(IPC::Connection &, const String &, We"
           "bCore::DiagnosticLoggingDomain)";
      _os_log_fault_impl(&dword_1985F2000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 10042: Invalid message dispatched %{public}s", (uint8_t *)&v8, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::logScrollingEvent(uint64_t a1, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 0:
    case 4:
      WTFLogAlways();
      break;
    case 1:
    case 2:
      goto LABEL_9;
    case 3:
      if (a3)
      {
        WebCore::PerformanceLoggingClient::synchronousScrollingReasonsAsString();
        WTF::String::utf8();
        WTFLogAlways();
        if (v5)
        {
          if (*(_DWORD *)v5 == 1) {
            WTF::fastFree(v5, v3);
          }
          else {
            --*(_DWORD *)v5;
          }
        }
        if (v4)
        {
          if (*(_DWORD *)v4 == 2) {
            WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v3);
          }
          else {
            *(_DWORD *)v4 -= 2;
          }
        }
      }
      else
      {
LABEL_9:
        WTFLogAlways();
      }
      break;
    default:
      return;
  }
}

void WebKit::WebPageProxy::focusedFrameChanged(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a3 + 16))
  {
    uint64_t v4 = a3;
    uint64_t v6 = WebKit::WebFrameProxy::webFrame(*a3, a3[1]);
    if (v6)
    {
      uint64_t v7 = v6;
      CFRetain(*(CFTypeRef *)(v6 + 8));
      uint64_t v8 = a1[43];
      a1[43] = v7;
      if (v8) {
        CFRelease(*(CFTypeRef *)(v8 + 8));
      }
      if (*((unsigned char *)v4 + 16))
      {
        WebKit::WebPageProxy::broadcastFocusedFrameToOtherProcesses(a1, a2, v4);
        return;
      }
      __break(1u);
    }
    else
    {
      uint64_t v4 = (uint64_t *)off_1EB358938;
      if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
LABEL_14:
        *(unsigned char *)(a2 + 98) = 1;
        return;
      }
    }
    int v11 = 136446210;
    uint64_t v12 = "void WebKit::WebPageProxy::focusedFrameChanged(IPC::Connection &, const std::optional<FrameIdentifier> &)";
    _os_log_fault_impl(&dword_1985F2000, (os_log_t)v4, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 10081: Invalid message dispatched %{public}s", (uint8_t *)&v11, 0xCu);
    goto LABEL_14;
  }
  uint64_t v9 = a1[43];
  a1[43] = 0;
  if (v9)
  {
    uint64_t v10 = *(const void **)(v9 + 8);
    CFRelease(v10);
  }
}

void WebKit::WebPageProxy::broadcastFocusedFrameToOtherProcesses(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebFrameProxy::webFrame(*a3, a3[1]);
  if (v6)
  {
    uint64_t v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v8 = &unk_1EE9DBC18;
    v8[1] = a2;
    void v8[2] = a3;
    uint64_t v10 = v8;
    WebKit::WebPageProxy::forEachWebContentProcess(a1, &v10);
    uint64_t v9 = v10;
    uint64_t v10 = 0;
    if (v9) {
      (*(void (**)(void *))(*v9 + 8))(v9);
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::WebPageProxy::processDidBecomeUnresponsive(WebKit::WebPageProxy *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *(void *)(v3 + 760);
    uint64_t v5 = *(void *)(v3 + 1928);
    uint64_t v6 = *(void *)(*((void *)this + 32) + 136);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    }
    int v7 = 134218752;
    uint64_t v8 = this;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    __int16 v11 = 2048;
    uint64_t v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::processDidBecomeUnresponsive:", (uint8_t *)&v7, 0x26u);
  }
  if (!*((unsigned char *)this + 801))
  {
    if (*((unsigned char *)this + 800))
    {
      WebKit::WebPageProxy::updateBackingStoreDiscardableState(this);
      (*(void (**)(void, WebKit::WebPageProxy *))(**((void **)this + 9) + 264))(*((void *)this + 9), this);
    }
  }
}

void WebKit::WebPageProxy::processDidBecomeResponsive(WebKit::WebPageProxy *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *(void *)(v3 + 760);
    uint64_t v5 = *(void *)(v3 + 1928);
    uint64_t v6 = *(void *)(*((void *)this + 32) + 136);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    }
    int v7 = 134218752;
    uint64_t v8 = this;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    __int16 v11 = 2048;
    uint64_t v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::processDidBecomeResponsive:", (uint8_t *)&v7, 0x26u);
  }
  if (!*((unsigned char *)this + 801))
  {
    if (*((unsigned char *)this + 800))
    {
      WebKit::WebPageProxy::updateBackingStoreDiscardableState(this);
      (*(void (**)(void, WebKit::WebPageProxy *))(**((void **)this + 9) + 256))(*((void *)this + 9), this);
    }
  }
}

void WebKit::WebPageProxy::dispatchProcessDidTerminate(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 760);
    uint64_t v10 = *(void *)(v8 + 1928);
    uint64_t v11 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v11) {
      int v12 = *(_DWORD *)(v11 + 108);
    }
    else {
      int v12 = 0;
    }
    int v16 = 134219010;
    uint64_t v17 = a1;
    __int16 v18 = 2048;
    uint64_t v19 = v9;
    __int16 v20 = 2048;
    uint64_t v21 = v10;
    __int16 v22 = 1024;
    int v23 = v12;
    __int16 v24 = 2082;
    char v25 = WebKit::processTerminationReasonToString();
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::dispatchProcessDidTerminate: reason=%{public}s", (uint8_t *)&v16, 0x30u);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    if a2 == 2 || ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 80))(v5, a1)) {
      return;
    }
  }
  else if ((*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 248))(*(void *)(a1 + 72), a1, a2))
  {
    return;
  }
  if (a2 <= 0xA && ((1 << a2) & 0x733) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if ((*(_WORD *)(v6 + 64) & 4) != 0)
    {
      WebKit::WebPageProxy::tryReloadAfterProcessTermination((WebKit::WebPageProxy *)a1);
    }
    else
    {
      int v7 = qword_1EB358050;
      if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *(void *)(v6 + 760);
        uint64_t v14 = *(void *)(v6 + 1928);
        uint64_t v15 = *(void *)(*(void *)(a1 + 256) + 136);
        if (v15) {
          LODWORD(v15) = *(_DWORD *)(v15 + 108);
        }
        int v16 = 134218752;
        uint64_t v17 = a1;
        __int16 v18 = 2048;
        uint64_t v19 = v13;
        __int16 v20 = 2048;
        uint64_t v21 = v14;
        __int16 v22 = 1024;
        int v23 = v15;
        _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::dispatchProcessDidTerminate: Not eagerly reloading the view because it is not currently visible", (uint8_t *)&v16, 0x26u);
      }
      *(unsigned char *)(a1 + 930) = 1;
    }
  }
}

void WebKit::WebPageProxy::tryReloadAfterProcessTermination(WebKit::WebPageProxy *this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*((void *)this + 4) + 1712));
  unsigned int v2 = *((_DWORD *)this + 296) + 1;
  *((_DWORD *)this + 296) = v2;
  if (v2 < 2)
  {
    WTF::URL::URL((uint64_t)&v24, (WTF::StringImpl **)(*((void *)this + 4) + 1016));
    char v4 = v25;
    uint64_t v5 = qword_1EB358960;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        uint64_t v12 = *((void *)this + 4);
        uint64_t v13 = *(void *)(v12 + 760);
        uint64_t v14 = *(void *)(v12 + 1928);
        uint64_t v15 = *(void *)(*((void *)this + 32) + 136);
        if (v15) {
          LODWORD(v15) = *(_DWORD *)(v15 + 108);
        }
        *(_DWORD *)long long buf = 134218752;
        uint64_t v27 = this;
        __int16 v28 = 2048;
        uint64_t v29 = v13;
        __int16 v30 = 2048;
        uint64_t v31 = v14;
        __int16 v32 = 1024;
        int v33 = v15;
        _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryReloadAfterProcessTermination: process crashed and the client did not handle it, loading the pending API request URL again", buf, 0x26u);
      }
      WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)buf, (const String *)&v24, 0);
      CFTypeRef cf = 0;
      WebKit::WebPageProxy::loadRequest((uint64_t)this, (WebCore::ResourceRequestBase *)buf, 1, 0, 0, &v23);
      if (v23) {
        CFRelease(*(CFTypeRef *)(v23 + 8));
      }
      CFTypeRef v16 = cf;
      CFTypeRef cf = 0;
      if (v16) {
        CFRelease(v16);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    }
    else
    {
      if (v6)
      {
        uint64_t v7 = *((void *)this + 4);
        uint64_t v8 = *(void *)(v7 + 760);
        uint64_t v9 = *(void *)(v7 + 1928);
        uint64_t v10 = *(void *)(*((void *)this + 32) + 136);
        if (v10) {
          LODWORD(v10) = *(_DWORD *)(v10 + 108);
        }
        *(_DWORD *)long long buf = 134218752;
        uint64_t v27 = this;
        __int16 v28 = 2048;
        uint64_t v29 = v8;
        __int16 v30 = 2048;
        uint64_t v31 = v9;
        __int16 v32 = 1024;
        int v33 = v10;
        _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryReloadAfterProcessTermination: process crashed and the client did not handle it, reloading the page", buf, 0x26u);
      }
      WebKit::WebPageProxy::reload(&v22, this, 1);
      if (v22) {
        CFRelease(*(CFTypeRef *)(v22 + 8));
      }
    }
    uint64_t v17 = v24;
    __int16 v24 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v11);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  else
  {
    uint64_t v3 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *((void *)this + 4);
      uint64_t v19 = *(void *)(v18 + 760);
      uint64_t v20 = *(void *)(v18 + 1928);
      uint64_t v21 = *(void *)(*((void *)this + 32) + 136);
      if (v21) {
        LODWORD(v21) = *(_DWORD *)(v21 + 108);
      }
      *(_DWORD *)long long buf = 134218752;
      uint64_t v27 = this;
      __int16 v28 = 2048;
      uint64_t v29 = v19;
      __int16 v30 = 2048;
      uint64_t v31 = v20;
      __int16 v32 = 1024;
      int v33 = v21;
      _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryReloadAfterProcessTermination: process crashed and the client did not handle it, not reloading the page because we reached the maximum number of attempts", buf, 0x26u);
    }
    *((_DWORD *)this + 296) = 0;
  }
}

uint64_t WebKit::WebPageProxy::resetSpeechSynthesizer(uint64_t this)
{
  if (*(unsigned char *)(this + 2208))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void *)(this + 2184);
    *(void *)(v1 + 2184) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *(void *)(v1 + 2176);
    *(void *)(v1 + 2176) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *(void *)(v1 + 2192);
    *(void *)(v1 + 2192) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *(void *)(v1 + 2200);
    *(void *)(v1 + 2200) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    BOOL v6 = *(uint64_t (**)(void))(**(void **)(v1 + 2160) + 48);
    return v6();
  }
  return this;
}

void WebKit::WebPageProxy::creationParametersForProvisionalPage(void *a1@<X0>, WebKit::WebProcessProxy *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  LOBYTE(v11) = 0;
  char v15 = 0;
  WebKit::WebPageProxy::creationParameters(a1, a2, a3, a5, a6, (uint64_t)&v11, 1, a4, a7);
  if (v15)
  {
    if (v14[120]) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v14, v7);
    }
    WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v7);
    uint64_t v9 = v12;
    uint64_t v12 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v11;
    uint64_t v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
}

void WebKit::WebPageProxy::creationParametersForRemotePage(void *a1@<X0>, WebKit::WebProcessProxy *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1[41];
  uint64_t v10 = *(void *)(v9 + 272);
  uint64_t v11 = *(void *)(v9 + 280);
  std::__optional_destruct_base<WebKit::RemotePageParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::RemotePageParameters>((uint64_t)v17, a4);
  uint64_t v16 = 0;
  WebKit::WebPageProxy::creationParameters(a1, a2, a3, v10, v11, (uint64_t)v17, 1, (uint64_t)&v16, a5);
  if (v20[128])
  {
    if (v20[120]) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v20, v12);
    }
    WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v12);
    uint64_t v14 = v18;
    uint64_t v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    char v15 = v17[0];
    v17[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebProcess::IsJITEnabled,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2643;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  __int16 v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DB3D0;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  __int16 v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebPageProxy::enterAcceleratedCompositingMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 736))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

uint64_t WebKit::WebPageProxy::exitAcceleratedCompositingMode(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 744))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

uint64_t WebKit::WebPageProxy::updateAcceleratedCompositingMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 752))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

void WebKit::WebPageProxy::backForwardClear(WebKit::WebPageProxy *this)
{
  uint64_t v1 = (CFTypeRef *)*((void *)this + 83);
  CFRetain(v1[1]);
  WebKit::WebBackForwardList::clear((WebKit::WebBackForwardList *)v1);
  CFTypeRef v2 = v1[1];

  CFRelease(v2);
}

uint64_t WebKit::WebPageProxy::recentGamepadAccessStateChanged(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
    }
    if (a2) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a2)
    {
LABEL_5:
      if (v5) {
        (*(void (**)(uint64_t, void))(*(void *)v5 + 1880))(v5, 0);
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 104) + 656))(*(void *)(a1 + 104), a1);
      goto LABEL_12;
    }
  }
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 1880))(v5, 1);
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 104) + 648))(*(void *)(a1 + 104), a1);
LABEL_12:
  if (v5)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 1600);
    return v7(v5);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *a2;
  if (a3)
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v7 = *a2;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v8 = &unk_1EE9DB3F8;
    v8[1] = a1;
    void v8[2] = a1;
    void v8[3] = v7;
    uint64_t v12 = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v4 + 224))(v4, a1, v5, &v12);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 216);
    uint64_t v11 = *(void *)(a1 + 72);
    return v10(v11, a1, v5);
  }
  return result;
}

void WebKit::WebPageProxy::negotiatedLegacyTLS(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *((void *)this + 4);
  uint64_t v4 = *(void *)(*(void *)(v3 + 992) + 8);
  if (v4)
  {
    uint64_t v6 = v4 - 16;
    CFRetain(*(CFTypeRef *)(v4 - 8));
    uint64_t v7 = *((void *)this + 4);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)this + 4);
  }
  v8[0] = v6;
  v8[1] = v3 + 976;
  ++*(_DWORD *)(v3 + 1348);
  *(unsigned char *)(v3 + 1344) = 1;
  *(unsigned char *)(v7 + 1170) = 1;
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v8, a2, a3);
}

uint64_t WebKit::WebPageProxy::didApplyLinkDecorationFiltering(WebKit::WebPageProxy *this, const URL *a2, const URL *a3)
{
  return (*(uint64_t (**)(void, WebKit::WebPageProxy *, const URL *, const URL *))(**((void **)this + 9)
                                                                                             + 152))(*((void *)this + 9), this, a2, a3);
}

uint64_t WebKit::WebPageProxy::exceededDatabaseQuota(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD **a4, _DWORD **a5, _DWORD **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v18 = *a11;
  *a11 = 0;
  uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v19 = &unk_1EE9DB420;
  v19[1] = v18;
  char v23 = v19;
  WebKit::WebPageProxy::requestStorageSpace(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t *)&v23);
  uint64_t result = (uint64_t)v23;
  if (v23)
  {
    uint64_t v21 = *(uint64_t (**)(void))(*v23 + 8);
    return v21();
  }
  return result;
}

void *WebKit::WebPageProxy::requestStorageSpace(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD **a4, _DWORD **a5, _DWORD **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v20 = *(void *)(v19 + 760);
    uint64_t v21 = *(void *)(v19 + 1928);
    uint64_t v22 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v22) {
      LODWORD(v22) = *(_DWORD *)(v22 + 108);
    }
    *(_DWORD *)long long buf = 134219776;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v20;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&long long v64 = v21;
    WORD4(v64) = 1024;
    *(_DWORD *)((char *)&v64 + 10) = v22;
    HIWORD(v64) = 2048;
    int v65 = a2;
    *(_WORD *)uint64_t v66 = 2048;
    *(void *)&v66[2] = a7;
    *(_WORD *)&v66[10] = 2048;
    *(void *)&v66[12] = a9;
    *(_WORD *)&v66[20] = 2048;
    *(void *)&v66[22] = a10;
    _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::requestStorageSpace for frame %llu, current quota %llu current usage %llu expected usage %llu", buf, 0x4Eu);
  }
  if ((_MergedGlobals_94 & 1) == 0)
  {
    byte_1EB359CB8 = 0;
    *(_OWORD *)&qword_1EB359CA8 = 0u;
    *(_OWORD *)&qword_1EB359C98 = 0u;
    _MergedGlobals_94 = 1;
  }
  *(void *)long long buf = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *(void *)&buf[8] = a1;
  WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)a1, (uint64_t *)&buf[16]);
  *(void *)&long long v64 = a2;
  *((void *)&v64 + 1) = a3;
  char v23 = *a4;
  if (*a4) {
    *v23 += 2;
  }
  int v65 = v23;
  __int16 v24 = *a5;
  if (*a5) {
    *v24 += 2;
  }
  *(void *)uint64_t v66 = v24;
  int v25 = *a6;
  if (*a6) {
    *v25 += 2;
  }
  *(void *)&v66[8] = v25;
  *(void *)&v66[16] = a7;
  *(void *)&v66[24] = a8;
  *(void *)&long long v67 = a9;
  uint64_t v26 = *a11;
  *a11 = 0;
  *((void *)&v67 + 1) = a10;
  uint64_t v68 = v26;
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x70);
  uint64_t v29 = result;
  *uint64_t result = &unk_1EE9DB448;
  result[1] = *(void *)buf;
  result[2] = *(void *)&buf[8];
  uint64_t v30 = *(void *)&buf[16];
  *(_OWORD *)&buf[8] = 0uLL;
  result[3] = v30;
  *((_OWORD *)result + 2) = v64;
  uint64_t v31 = v65;
  if (v65) {
    *v65 += 2;
  }
  result[6] = v31;
  uint64_t v32 = *(void *)v66;
  if (*(void *)v66) {
    **(_DWORD **)v66 += 2;
  }
  result[7] = v32;
  uint64_t v33 = *(void *)&v66[8];
  if (*(void *)&v66[8]) {
    **(_DWORD **)&v66[8] += 2;
  }
  result[8] = v33;
  long long v34 = *(_OWORD *)&v66[16];
  *(_OWORD *)(result + 11) = v67;
  *(_OWORD *)(result + 9) = v34;
  uint64_t v35 = v68;
  uint64_t v68 = 0;
  result[13] = v35;
  if (!byte_1EB359CB8)
  {
    byte_1EB359CB8 = 1;
    WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void>::call((uint64_t)result);
    (*(void (**)(void *))(*v29 + 8))(v29);
    return WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0::~$_0(buf, v28);
  }
  uint64_t v36 = qword_1EB359CA0;
  if (qword_1EB359C98)
  {
    unsigned int v37 = dword_1EB359CB0;
    if (qword_1EB359CA0 + 1 != qword_1EB359C98) {
      goto LABEL_52;
    }
  }
  else
  {
    unsigned int v37 = dword_1EB359CB0;
    if (qword_1EB359CA0)
    {
      if (qword_1EB359CA0 != dword_1EB359CB0 - 1) {
        goto LABEL_52;
      }
    }
    else if (dword_1EB359CB0)
    {
      uint64_t v36 = 0;
LABEL_52:
      *(void *)(qword_1EB359CA8 + 8 * v36) = v29;
      if (v36 == v37 - 1) {
        uint64_t v55 = 0;
      }
      else {
        uint64_t v55 = v36 + 1;
      }
      qword_1EB359CA0 = v55;
      return WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0::~$_0(buf, v28);
    }
  }
  uint64_t v38 = v37;
  unint64_t v39 = ((unint64_t)v37 >> 2) + v37;
  if (v39 <= 0xF) {
    unint64_t v39 = 15;
  }
  if (v39 < 0x1FFFFFFF)
  {
    uint64_t v40 = (WTF *)qword_1EB359CA8;
    unsigned int v41 = v39 + 1;
    uint64_t v42 = WTF::fastMalloc((WTF *)(8 * (v39 + 1)));
    uint64_t v43 = (void *)v42;
    dword_1EB359CB0 = v41;
    qword_1EB359CA8 = v42;
    uint64_t v44 = qword_1EB359C98;
    if (qword_1EB359C98 <= (unint64_t)qword_1EB359CA0)
    {
      if (qword_1EB359C98 != qword_1EB359CA0)
      {
        uint64_t v49 = (void *)(v42 + 8 * qword_1EB359C98);
        __int16 v50 = (uint64_t *)((char *)v40 + 8 * qword_1EB359C98);
        uint64_t v51 = 8 * qword_1EB359CA0 - 8 * qword_1EB359C98;
        do
        {
          uint64_t v52 = *v50;
          *__int16 v50 = 0;
          *uint64_t v49 = v52;
          uint64_t v53 = *v50;
          *__int16 v50 = 0;
          if (v53) {
            (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
          }
          ++v49;
          ++v50;
          v51 -= 8;
        }
        while (v51);
      }
    }
    else
    {
      if (qword_1EB359CA0)
      {
        uint64_t v45 = 8 * qword_1EB359CA0;
        long long v46 = v40;
        do
        {
          uint64_t v47 = *(void *)v46;
          *(void *)long long v46 = 0;
          *uint64_t v43 = v47;
          uint64_t v48 = *(void *)v46;
          *(void *)long long v46 = 0;
          if (v48) {
            (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
          }
          ++v43;
          long long v46 = (WTF *)((char *)v46 + 8);
          v45 -= 8;
        }
        while (v45);
        unsigned int v41 = dword_1EB359CB0;
        uint64_t v44 = qword_1EB359C98;
        uint64_t v43 = (void *)qword_1EB359CA8;
      }
      uint64_t v54 = v44 - v38 + v41;
      if (v44 != v38)
      {
        uint64_t v56 = v41;
        uint64_t v57 = (uint64_t *)((char *)v40 + 8 * v44);
        char v58 = &v43[v56];
        uint64_t v59 = 8 * v44 - 8 * v38;
        do
        {
          uint64_t v60 = *v57;
          *uint64_t v57 = 0;
          *(void *)((char *)v58 + v59) = v60;
          uint64_t v61 = *v57;
          *uint64_t v57 = 0;
          if (v61) {
            (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
          }
          ++v57;
          v59 += 8;
        }
        while (v59);
      }
      qword_1EB359C98 = v54;
    }
    if (v40)
    {
      if ((WTF *)qword_1EB359CA8 == v40)
      {
        qword_1EB359CA8 = 0;
        dword_1EB359CB0 = 0;
      }
      WTF::fastFree(v40, v28);
    }
    uint64_t v36 = qword_1EB359CA0;
    unsigned int v37 = dword_1EB359CB0;
    goto LABEL_52;
  }
  __break(0xC471u);
  return result;
}

void *WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[12];
  a1[12] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = a1[1];
  a1[1] = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  return a1;
}

void WebKit::WebPageProxy::requestGeolocationPermissionForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a4 + 248);
  if (!v6)
  {
    uint64_t v18 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_17:
      *(unsigned char *)(a2 + 98) = 1;
      return;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::requestGeolocationPermissionForFrame(IPC::Connection &, GeolocationI"
                         "dentifier, FrameInfoData &&)";
    uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 11075: Invalid message d"
          "ispatched %{public}s";
LABEL_19:
    _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, v19, buf, 0xCu);
    goto LABEL_17;
  }
  uint64_t v9 = WebKit::WebFrameProxy::webFrame(v6, *(void *)(a4 + 256));
  if (!v9)
  {
    uint64_t v18 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_17;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::requestGeolocationPermissionForFrame(IPC::Connection &, GeolocationI"
                         "dentifier, FrameInfoData &&)";
    uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 11077: Invalid message d"
          "ispatched %{public}s";
    goto LABEL_19;
  }
  uint64_t v10 = v9;
  CFRetain(*(CFTypeRef *)(v9 + 8));
  WebKit::GeolocationPermissionRequestManagerProxy::createRequest((uint64_t *)(*(void *)(a1 + 32) + 728), a3, *(void *)(*(void *)(v10 + 32) + 16), (uint64_t *)buf);
  uint64_t v11 = *(void *)buf;
  *(void *)long long buf = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v12 = &unk_1EE9DB4C0;
  v12[1] = v11;
  uint64_t v20 = v12;
  (*(void (**)(void))(**(void **)(a1 + 104) + 304))();
  if (v20)
  {
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = v14 ? *(void *)(v14 + 8) : 0;
    (*(void (**)(uint64_t))(*(void *)v15 + 1592))(v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v15 + 184))(v15, v10, a4, &v20);
    (*(void (**)(uint64_t))(*(void *)v15 + 1600))(v15);
    if (v20)
    {
      (*(void (**)(void *, void))(*v20 + 16))(v20, 0);
      int v16 = v20;
      uint64_t v20 = 0;
      if (v16) {
        (*(void (**)(void *))(*v16 + 8))(v16);
      }
    }
  }
  uint64_t v17 = *(unsigned int ***)buf;
  *(void *)long long buf = 0;
  if (v17) {
    WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v17, v13);
  }
  CFRelease(*(CFTypeRef *)(v10 + 8));
}

WTF::StringImpl **WebKit::WebPageProxy::revokeGeolocationAuthorizationToken(WebKit::WebPageProxy *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  return WebKit::GeolocationPermissionRequestManagerProxy::revokeAuthorizationToken((WebKit::GeolocationPermissionRequestManagerProxy *)(*((void *)this + 4) + 728), a2, a3);
}

void WebKit::WebPageProxy::queryPermission(uint64_t a1, const WebCore::ClientOrigin *a2, unsigned char *a3, uint64_t *a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 320))
  {
    uint64_t v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 257);
    uint64_t v6 = *(void (**)(uint64_t))(*(void *)v5 + 8);
    v6(v5);
    return;
  }
  switch(*a3)
  {
    case 3:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v10 = (WTF::StringImpl *)v43[0];
      unsigned int v41 = (WTF::StringImpl *)v43[0];
      uint64_t v15 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)a1);
      BOOL v19 = (WebKit::UserMediaPermissionRequestManagerProxy::mockCaptureDevicesEnabled(v15, v16, v17) & 1) != 0
         || WebKit::checkUsageDescriptionStringForType((WebKit *)2, v18);
      uint64_t v32 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)a1);
      int v12 = WebKit::UserMediaPermissionRequestManagerProxy::shouldChangeDeniedToPromptForCamera(v32, a2);
      uint64_t v33 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)a1);
      BOOL v34 = WebKit::UserMediaPermissionRequestManagerProxy::shouldChangePromptToGrantForCamera(v33, a2);
      goto LABEL_41;
    case 5:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      BOOL v14 = 0;
      uint64_t v10 = (WTF::StringImpl *)v43[0];
      unsigned int v41 = (WTF::StringImpl *)v43[0];
      int v12 = 1;
      goto LABEL_14;
    case 8:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v10 = (WTF::StringImpl *)v43[0];
      unsigned int v41 = (WTF::StringImpl *)v43[0];
      uint64_t v20 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)a1);
      BOOL v19 = (WebKit::UserMediaPermissionRequestManagerProxy::mockCaptureDevicesEnabled(v20, v21, v22) & 1) != 0
         || WebKit::checkUsageDescriptionStringForType((WebKit *)1, v23);
      uint64_t v35 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)a1);
      int v12 = WebKit::UserMediaPermissionRequestManagerProxy::shouldChangeDeniedToPromptForMicrophone(v35, a2);
      uint64_t v36 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)a1);
      BOOL v34 = WebKit::UserMediaPermissionRequestManagerProxy::shouldChangePromptToGrantForMicrophone(v36, a2);
LABEL_41:
      BOOL v14 = v34;
      if (!v10) {
        goto LABEL_42;
      }
      goto LABEL_15;
    case 0xB:
    case 0xC:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v10 = (WTF::StringImpl *)v43[0];
      unsigned int v41 = (WTF::StringImpl *)v43[0];
      int v11 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)(*(void *)(a1 + 32) + 2144), (uint64_t)a2);
      int v12 = v11 ^ 1;
      uint64_t v13 = *(void *)(*(void *)(a1 + 312) + 24);
      if ((v13 & 0x8000000000000000) == 0 || v13 == -1)
      {
        BOOL v14 = 0;
LABEL_14:
        BOOL v19 = 1;
        if (!v10)
        {
LABEL_42:
          uint64_t v37 = *a4;
          *a4 = 0;
          (*(void (**)(uint64_t, void))(*(void *)v37 + 16))(v37, 0);
          (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
          return;
        }
LABEL_15:
        if (!v19)
        {
          if (v12) {
            uint64_t v28 = 258;
          }
          else {
            uint64_t v28 = 257;
          }
          uint64_t v29 = *a4;
          *a4 = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v28);
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
          unsigned int v41 = 0;
          goto LABEL_34;
        }
        BOOL v24 = *a3 == 11;
        LOBYTE(v43[0]) = 0;
        int v44 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v43, (uint64_t)a2);
        v45[0] = 0;
        int v46 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v45, (uint64_t)a2 + 32);
        LOBYTE(v47) = v12;
        HIBYTE(v47) = v14;
        BOOL v48 = v24;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
        int v25 = *(atomic_uint **)(a1 + 24);
        if (v25) {
          atomic_fetch_add(v25, 1u);
        }
        uint64_t v26 = *a4;
        *a4 = 0;
        uint64_t v49 = v25;
        uint64_t v50 = v26;
        uint64_t v27 = WTF::fastMalloc((WTF *)0x60);
        *(void *)uint64_t v27 = &unk_1EE9DB4E8;
        *(unsigned char *)(v27 + 8) = 0;
        *(_DWORD *)(v27 + 32) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v27 + 8, (uint64_t)v43);
        *(unsigned char *)(v27 + 40) = 0;
        *(_DWORD *)(v27 + 64) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v27 + 40, (uint64_t)v45);
        *(unsigned char *)(v27 + 74) = v48;
        *(_WORD *)(v27 + 72) = v47;
        *(void *)(v27 + 80) = v49;
        *(void *)(v27 + 88) = v50;
        uint64_t v40 = v27;
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        if (v46 != -1) {
          ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v46])(&v42, v45);
        }
        int v46 = -1;
        if (v44 != -1) {
          ((void (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v44])(&v42, v43);
        }
        if (*((_DWORD *)a2 + 6) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, 258);
        }
        else
        {
          API::SecurityOrigin::create(v43);
          (*(void (**)(void, WTF::StringImpl **, void, uint64_t *))(**(void **)(a1 + 104) + 616))(*(void *)(a1 + 104), &v41, v43[0], &v40);
          uint64_t v31 = v43[0];
          v43[0] = 0;
          if (v31) {
            CFRelease(*(CFTypeRef *)(v31 + 8));
          }
          uint64_t v27 = v40;
          uint64_t v40 = 0;
          if (!v27) {
            goto LABEL_32;
          }
        }
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
LABEL_32:
        uint64_t v10 = v41;
        goto LABEL_33;
      }
      if (v11) {
        uint64_t v38 = 257;
      }
      else {
        uint64_t v38 = 258;
      }
      uint64_t v39 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v38);
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
LABEL_33:
      unsigned int v41 = 0;
      if (!v10) {
        return;
      }
LABEL_34:
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v30);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
      return;
    case 0xD:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      BOOL v14 = 0;
      int v12 = 0;
      uint64_t v10 = (WTF::StringImpl *)v43[0];
      unsigned int v41 = (WTF::StringImpl *)v43[0];
      goto LABEL_14;
    default:
      goto LABEL_42;
  }
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::WebPageProxy::userMediaPermissionRequestManager(WebKit::WebPageProxy *this)
{
  uint64_t result = (WebKit::UserMediaPermissionRequestManagerProxy *)*((void *)this + 70);
  if (!result)
  {
    uint64_t v3 = (WebKit::UserMediaPermissionRequestManagerProxy *)WTF::fastMalloc((WTF *)0x130);
    uint64_t result = WebKit::UserMediaPermissionRequestManagerProxy::UserMediaPermissionRequestManagerProxy(v3, this);
    uint64_t v4 = *((void *)this + 70);
    *((void *)this + 70) = result;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      return (WebKit::UserMediaPermissionRequestManagerProxy *)*((void *)this + 70);
    }
  }
  return result;
}

unsigned int *WebKit::WebPageProxy::willStartCapture(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::WebProcessProxy::muteCaptureInPagesExcept(*(void *)(*(void *)(a1 + 32) + 1928));
  WebKit::WebPageProxy::setMuted(a1, *(unsigned char *)(*(void *)(a1 + 32) + 904) & 0xE1);
  uint64_t v7 = *(void *)(a1 + 272);
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v6))goto LABEL_7; {
  uint64_t v9 = *(void *)(a1 + 272);
  }
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v9 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v8))
  {
LABEL_7:
    uint64_t v10 = (WebKit::WebProcessPool *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get(*(void *)(a1 + 48) + 24);
    uint64_t v11 = WebKit::WebProcessPool::ensureGPUProcess(v10);
    uint64_t v12 = v11;
    uint64_t v13 = (unsigned int *)(v11 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 1u);
    unsigned int v14 = *(unsigned __int8 *)(a2 + 112) - 1;
    BOOL v16 = v14 > 1 && *(_DWORD *)(a2 + 92) != 0;
    WebKit::GPUProcessProxy::updateCaptureAccess((unsigned char *)v11, (void *)(*(_DWORD *)(a2 + 108) != 0), v16, v14 < 2, *(void *)(*(void *)(a1 + 256) + 176), a3);
    uint64_t v17 = *(void *)(*(void *)(a1 + 256) + 176);
    v21[0] = *(void *)(a2 + 72) + 8;
    v21[1] = &v22;
    uint64_t v22 = v17;
    WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateCaptureOrigin>(v12, (uint64_t)v21, 0, 0);
    WebKit::GPUProcessProxy::setOrientationForMediaCapture(v12, *(_DWORD *)(a1 + 1072));
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
  }
  else
  {
    uint64_t v19 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
    uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)v19 + 8);
    return (unsigned int *)v20(v19);
  }
}

void WebKit::WebPageProxy::requestUserMediaPermissionForFrame(WebKit::WebPageProxy *a1, uint64_t a2, WTF::String *a3, uint64_t a4, uint64_t a5, WebCore::SecurityOriginData *a6, WebCore::SecurityOriginData *a7, uint64_t a8)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (WebKit::WebFrameProxy::webFrame(a4, a5))
  {
    BOOL v16 = (uint64_t *)WebKit::WebPageProxy::userMediaPermissionRequestManager(a1);
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)buf, a6);
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v21, a7);
    WebKit::UserMediaPermissionRequestManagerProxy::requestUserMediaPermissionForFrame(v16, a3, a4, a5, (uint64_t *)buf, (uint64_t *)&v21, a8);
    BOOL v18 = v21;
    uint64_t v21 = 0;
    if (v18) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v18, v17);
    }
    uint64_t v19 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v19) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v19, v17);
    }
  }
  else
  {
    uint64_t v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::requestUserMediaPermissionForFrame(IPC::Connection &, UserMediaReq"
                           "uestIdentifier, FrameIdentifier, const SecurityOriginData &, const SecurityOriginData &, Medi"
                           "aStreamRequest &&)";
      _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 11238: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::enumerateMediaDevicesForFrame(WebKit::WebPageProxy *a1, uint64_t a2, uint64_t a3, uint64_t a4, WebCore::SecurityOriginData *a5, WebCore::SecurityOriginData *a6, uint64_t *a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v14)
  {
    uint64_t v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    BOOL v16 = WebKit::WebPageProxy::userMediaPermissionRequestManager(a1);
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)buf, a5);
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v21, a6);
    WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(v16, a3, a4, (atomic_uint *volatile *)buf, (atomic_uint *volatile *)&v21, a7);
    BOOL v18 = v21;
    uint64_t v21 = 0;
    if (v18) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v18, v17);
    }
    uint64_t v19 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v19) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v19, v17);
    }
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  else
  {
    uint64_t v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::enumerateMediaDevicesForFrame(IPC::Connection &, FrameIdentifier, "
                           "const SecurityOriginData &, const SecurityOriginData &, CompletionHandler<void (const Vector<"
                           "CaptureDeviceWithCapabilities> &, MediaDeviceHashSalts &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 11248: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::beginMonitoringCaptureDevices(WebKit::WebPageProxy *this)
{
  uint64_t v1 = WebKit::WebPageProxy::userMediaPermissionRequestManager(this);
  WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs(v1);
  {
    qword_1E93CFBE0 = 0;
    unk_1E93CFBE8 = 0;
    WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&unk_1EE9D78F0;
    qword_1E93CFBF0 = 0;
    word_1E93CFBF8 = 1;
  }

  WebKit::UserMediaProcessManager::beginMonitoringCaptureDevices((WebKit::UserMediaProcessManager *)&WebKit::UserMediaProcessManager::singleton(void)::manager);
}

void WebKit::WebPageProxy::validateCaptureStateUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7, uint64_t *a8)
{
  v38[1] = a5;
  uint64_t v39 = a2;
  v38[0] = a4;
  uint64_t v13 = WebKit::WebFrameProxy::webFrame(a4, a5);
  if (v13)
  {
    uint64_t v14 = v13;
    CFRetain(*(CFTypeRef *)(v13 + 8));
    uint64_t v37 = v14;
    if ((a6 & 1) == 0)
    {
      LOBYTE(v32) = 0;
      LOBYTE(v34) = 0;
      uint64_t v17 = *a8;
      *a8 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v17 + 16))(v17, &v32);
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      if ((_BYTE)v34)
      {
        uint64_t v19 = v33;
        uint64_t v33 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v18);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
      }
      uint64_t v37 = 0;
LABEL_27:
      CFRelease(*(CFTypeRef *)(v14 + 8));
      return;
    }
    uint64_t v32 = a1;
    uint64_t v33 = (WTF::StringImpl *)&v39;
    BOOL v34 = v38;
    uint64_t v35 = a3;
    uint64_t v36 = &v37;
    if (a7 == 2)
    {
      if ((*(unsigned char *)(*(void *)(a1 + 32) + 904) & 0x18) != 0)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v27[0] = 31;
        char v29 = 1;
LABEL_17:
        uint64_t v20 = *a8;
        *a8 = 0;
        (*(void (**)(uint64_t, char *))(*(void *)v20 + 16))(v20, v27);
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        if (v29)
        {
          uint64_t v22 = v28;
          uint64_t v28 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v21);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
        }
LABEL_26:
        uint64_t v14 = v37;
        uint64_t v37 = 0;
        if (!v14) {
          return;
        }
        goto LABEL_27;
      }
    }
    else if (a7 == 1)
    {
      if ((*(unsigned char *)(*(void *)(a1 + 32) + 904) & 4) != 0)
      {
        uint64_t v23 = *a8;
        *a8 = 0;
        uint64_t v30 = v23;
        WebKit::WebPageProxy::validateCaptureStateUpdate(WTF::ObjectIdentifierGeneric<WebCore::UserMediaRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::Exception> &&>((uint64_t)&v32, 1, &v30);
        uint64_t v16 = v30;
        if (!v30) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
    }
    else if (!a7 && (*(unsigned char *)(*(void *)(a1 + 32) + 904) & 2) != 0)
    {
      uint64_t v15 = *a8;
      *a8 = 0;
      uint64_t v31 = v15;
      WebKit::WebPageProxy::validateCaptureStateUpdate(WTF::ObjectIdentifierGeneric<WebCore::UserMediaRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::Exception> &&>((uint64_t)&v32, 0, &v31);
      uint64_t v16 = v31;
      if (!v31) {
        goto LABEL_26;
      }
LABEL_25:
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      goto LABEL_26;
    }
    v27[0] = 0;
    char v29 = 0;
    goto LABEL_17;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v32) = 8;
  LOBYTE(v34) = 1;
  uint64_t v24 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v24 + 16))(v24, &v32);
  (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  if ((_BYTE)v34)
  {
    uint64_t v26 = v33;
    uint64_t v33 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
}

uint64_t WebKit::WebPageProxy::validateCaptureStateUpdate(WTF::ObjectIdentifierGeneric<WebCore::UserMediaRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL,WebCore::MediaProducerMediaCaptureKind,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&)::$_0::operator()<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::Exception> &&>(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = *(WebKit::WebPageProxy **)a1;
  v79[0] = 0;
  v79[1] = 0;
  v78[0] = 0;
  v78[1] = 0;
  uint64_t v6 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton((WebCore::RealtimeMediaSourceCenter *)a1);
  if (a2 == 1)
  {
    uint64_t v7 = WebCore::RealtimeMediaSourceCenter::videoCaptureFactory(v6);
    uint64_t v8 = (uint64_t (***)(void))(*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
    uint64_t v9 = v78;
  }
  else
  {
    uint64_t v10 = WebCore::RealtimeMediaSourceCenter::audioCaptureFactory(v6);
    uint64_t v8 = (uint64_t (***)(void))(*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
    uint64_t v9 = v79;
  }
  uint64_t v11 = (**v8)(v8);
  if ((uint64_t *)v11 != v9)
  {
    uint64_t v13 = v11;
    unsigned int v14 = *((_DWORD *)v9 + 3);
    unsigned int v15 = *(_DWORD *)(v11 + 12);
    if (v14 <= v15)
    {
      unsigned int v16 = *((_DWORD *)v9 + 2);
      if (v15 > v16)
      {
        if (v16)
        {
          if (v14)
          {
            WTF::VectorDestructor<true,WebCore::CaptureDevice>::destruct((WTF::StringImpl *)*v9, (WTF::StringImpl *)(*v9 + 40 * v14));
            *((_DWORD *)v9 + 3) = 0;
          }
          uint64_t v17 = (WTF *)*v9;
          if (*v9)
          {
            *uint64_t v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            WTF::fastFree(v17, v12);
          }
        }
        WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v9, *(unsigned int *)(v13 + 12));
        unsigned int v14 = *((_DWORD *)v9 + 3);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::CaptureDevice>::destruct((WTF::StringImpl *)(*v9 + 40 * v15), (WTF::StringImpl *)(*v9 + 40 * v14));
      *((_DWORD *)v9 + 3) = v15;
      unsigned int v14 = v15;
    }
    uint64_t v18 = *(void *)v13;
    uint64_t v19 = (WTF::StringImpl *)*v9;
    if (v14)
    {
      uint64_t v20 = v18 + 40 * v14;
      do
      {
        WTF::String::operator=((uint64_t *)v19, (WTF::StringImpl **)v18);
        *((unsigned char *)v19 + 8) = *(unsigned char *)(v18 + 8);
        WTF::String::operator=((uint64_t *)v19 + 2, (WTF::StringImpl **)(v18 + 16));
        WTF::String::operator=((uint64_t *)v19 + 3, (WTF::StringImpl **)(v18 + 24));
        *((_DWORD *)v19 + 8) = *(_DWORD *)(v18 + 32);
        v18 += 40;
        uint64_t v19 = (WTF::StringImpl *)((char *)v19 + 40);
      }
      while (v18 != v20);
      uint64_t v18 = *(void *)v13;
      uint64_t v21 = *((unsigned int *)v9 + 3);
      uint64_t v19 = (WTF::StringImpl *)*v9;
    }
    else
    {
      uint64_t v21 = 0;
    }
    WTF::VectorCopier<false,WebCore::CaptureDevice>::uninitializedCopy<WebCore::CaptureDevice>(v18 + 40 * v21, v18 + 40 * *(unsigned int *)(v13 + 12), (uint64_t)v19 + 40 * v21);
    *((_DWORD *)v9 + 3) = *(_DWORD *)(v13 + 12);
  }
  uint64_t v22 = WebKit::WebPageProxy::userMediaPermissionRequestManager(v5);
  uint64_t v23 = *(uint64_t **)(a1 + 16);
  uint64_t v24 = **(void **)(a1 + 8);
  uint64_t v25 = *((void *)v5 + 41);
  uint64_t v26 = *(void *)(v25 + 272);
  uint64_t v27 = *(void *)(v25 + 280);
  uint64_t v28 = *v23;
  uint64_t v29 = v23[1];
  WebCore::SecurityOriginData::securityOrigin(&v76, (WebCore::SecurityOriginData *)(*(void *)(a1 + 24) + 32));
  WebCore::SecurityOriginData::securityOrigin(&v75, *(WebCore::SecurityOriginData **)(a1 + 24));
  uint64_t v30 = *(void *)(*((void *)v5 + 4) + 1928);
  char v58 = v5;
  if (a2 == 1)
  {
    LOBYTE(v60) = 0;
    bzero(v61, 0x3C1uLL);
    bzero(v67, 0x3C0uLL);
    v72[16] = 1;
    char v73 = 1;
    goto LABEL_24;
  }
  if (!a2)
  {
    LOBYTE(v60) = 0;
    bzero(v61, 0x3C0uLL);
    v66[16] = 1;
    bzero(v67, 0x3C1uLL);
    char v73 = 1;
LABEL_24:
    uint64_t v74 = v30;
    goto LABEL_26;
  }
  LOBYTE(v60) = 0;
  char v73 = 0;
  uint64_t v74 = 0;
  bzero(v61, 0x3C1uLL);
  bzero(v67, 0x3C1uLL);
LABEL_26:
  uint64_t v31 = *a3;
  *a3 = 0;
  uint64_t v32 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v32 = &unk_1EE9D9D98;
  v32[1] = v31;
  uint64_t v59 = v32;
  WebKit::UserMediaPermissionRequestProxy::create((uint64_t)v22, v24, v26, v27, v28, v29, &v76, &v75, &v77, v79, v78, (uint64_t)&v60, (uint64_t *)&v59);
  uint64_t v34 = (uint64_t)v59;
  uint64_t v59 = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v72, v33);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v71, v35);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v70, v36);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, v37);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v68, v38);
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v39);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v40);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v41);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63, v42);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v43);
  uint64_t v45 = v75;
  uint64_t v75 = 0;
  if (v45) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v45, v44);
  }
  uint64_t v46 = v76;
  uint64_t v76 = 0;
  if (v46) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v46, v44);
  }
  __int16 v47 = *(atomic_uint **)(v77 + 64);
  atomic_fetch_add(v47, 1u);
  API::SecurityOrigin::create(&v60);
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v47, v48);
  uint64_t v49 = *(atomic_uint **)(v77 + 72);
  atomic_fetch_add(v49, 1u);
  API::SecurityOrigin::create(&v76);
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v49, v50);
  uint64_t v51 = v77;
  (*(void (**)(void))(**((void **)v58 + 13) + 312))();
  uint64_t v53 = v76;
  uint64_t v76 = 0;
  if (v53) {
    CFRelease(*(CFTypeRef *)(v53 + 8));
  }
  uint64_t v54 = v60;
  uint64_t v60 = 0;
  if (v54) {
    CFRelease(*(CFTypeRef *)(v54 + 8));
  }
  if (v51) {
    CFRelease(*(CFTypeRef *)(v51 + 8));
  }
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v78, v52);
  return WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v79, v55);
}

unsigned int *WebKit::WebPageProxy::setShouldListenToVoiceActivity(unsigned int *this, char a2, const WTF::StringImpl *a3)
{
  *((unsigned char *)this + 568) = a2;
  uint64_t v3 = *(void *)(*(void *)(*((void *)this + 32) + 512) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(atomic_uint **)(v4 + 176);
  if (v5)
  {
    uint64_t v6 = (unsigned __int8 *)this;
    atomic_fetch_add(v5 + 4, 1u);
    uint64_t v7 = *((void *)this + 34);
    {
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, a3))WebKit::GPUProcessProxy::setShouldListenToVoiceActivity((WebKit::GPUProcessProxy *)v5, (const WebKit::WebPageProxy *)v6, v6[568]); {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v5 + 4);
    }
  }
  return this;
}

void WebKit::WebPageProxy::startMonitoringCaptureDeviceRotation(WebKit::WebPageProxy *this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key, a3))
  {
    uint64_t v6 = WebKit::WebPageProxy::userMediaPermissionRequestManager(this);
    WebKit::UserMediaPermissionRequestManagerProxy::startMonitoringCaptureDeviceRotation(v6, a2);
  }
}

uint64_t WebKit::WebPageProxy::stopMonitoringCaptureDeviceRotation(WebKit::WebPageProxy *this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key, a3);
  if (result)
  {
    uint64_t v7 = (void *)*((void *)WebKit::WebPageProxy::userMediaPermissionRequestManager(this) + 37);
    return [v7 stop:a2];
  }
  return result;
}

unsigned int *WebKit::WebPageProxy::rotationAngleForCaptureDeviceChanged(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v6 = *(void *)(a1 + 272);
  {
    WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (unsigned int *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useAVCaptureDeviceRotationCoordinatorAPIKey(void)::key, a3);
  if (result)
  {
    uint64_t v9 = *(void *)(a1 + 272);
    {
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t result = (unsigned int *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v9 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v8);
    if (result)
    {
      {
        if (WebKit::singleton(void)::singleton)
        {
          uint64_t result = *(unsigned int **)(WebKit::singleton(void)::singleton + 8);
          if (result)
          {
            uint64_t v10 = result + 4;
            atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
            uint64_t v17 = a2;
            __int16 v18 = (__int16)a3;
            WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::RotationAngleForCaptureDeviceChanged>((uint64_t)result, (uint64_t)&v17, 0, 0);
            return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
          }
        }
      }
      else
      {
        WebKit::singleton(void)::singleton = 0;
      }
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 256);
      atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 1u);
      uint64_t v12 = *(void *)(v11 + 768);
      uint64_t result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
      if (v12)
      {
        uint64_t v13 = *(unsigned int *)(v12 + 52);
        if (v13)
        {
          unsigned int v14 = *(uint64_t **)(v12 + 40);
          uint64_t v15 = 8 * v13;
          do
          {
            uint64_t v16 = *v14++;
            uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const WTF::StringImpl *))(*(void *)v16 + 24))(v16, a2, a3);
            v15 -= 8;
          }
          while (v15);
        }
      }
    }
  }
  return result;
}

void WebKit::WebPageProxy::requestMediaKeySystemPermissionForFrame(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, WebCore::SecurityOriginData *a6, _DWORD **a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (WebKit::WebFrameProxy::webFrame(a4, a5))
  {
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v29, a6);
    API::SecurityOrigin::create(buf);
    uint64_t v15 = v29;
    uint64_t v29 = 0;
    if (v15) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v15, v14);
    }
    uint64_t v16 = *(void *)(a1 + 576);
    if (!v16)
    {
      uint64_t v17 = (WebKit::MediaKeySystemPermissionRequestManagerProxy *)WTF::fastMalloc((WTF *)0x28);
      *(void *)uint64_t v17 = 0;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
      __int16 v18 = *(atomic_uint **)(a1 + 24);
      atomic_fetch_add(v18, 1u);
      *((void *)v17 + 2) = 0;
      *((void *)v17 + 3) = 0;
      *((void *)v17 + 1) = v18;
      *((void *)v17 + 4) = WTF::cryptographicallyRandomNumber<unsigned long long>();
      std::unique_ptr<WebKit::MediaKeySystemPermissionRequestManagerProxy>::reset[abi:sn180100]((WebKit::MediaKeySystemPermissionRequestManagerProxy **)(a1 + 576), v17);
      uint64_t v16 = *(void *)(a1 + 576);
    }
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v28, a6);
    WebKit::MediaKeySystemPermissionRequestManagerProxy::createRequestForFrame(v16, a3, a4, a5, (uint64_t *)&v28, a7, &v29);
    uint64_t v20 = v28;
    uint64_t v28 = 0;
    if (v20) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v20, v19);
    }
    uint64_t v21 = *(void *)(a1 + 104);
    uint64_t v23 = v29;
    uint64_t v22 = *(void *)buf;
    uint64_t v24 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v24 = &unk_1EE9DB510;
    *((void *)v24 + 1) = v23;
    uint64_t v28 = v24;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _DWORD **, WTF **))(*(void *)v21 + 608))(v21, a1, v22, a7, &v28);
    uint64_t v25 = v28;
    uint64_t v28 = 0;
    if (v25) {
      (*(void (**)(WTF *))(*(void *)v25 + 8))(v25);
    }
    uint64_t v26 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v26) {
      CFRelease(*(CFTypeRef *)(v26 + 8));
    }
  }
  else
  {
    uint64_t v27 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::requestMediaKeySystemPermissionForFrame(IPC::Connection &, MediaKe"
                           "ySystemRequestIdentifier, FrameIdentifier, const SecurityOriginData &, const String &)";
      _os_log_fault_impl(&dword_1985F2000, v27, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 11408: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, unsigned int *a7)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    uint64_t v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    uint64_t v14 = *(void *)(a1 + 312);
    CFRetain(*(CFTypeRef *)(v14 + 8));
    WebKit::WebDeviceOrientationAndMotionAccessController::shouldAllowAccess((uint64_t *)(v14 + 360), a1, v13, a5, a6, a7);
    CFRelease(*(CFTypeRef *)(v14 + 8));
    uint64_t v15 = *(const void **)(v13 + 8);
    CFRelease(v15);
  }
  else
  {
    uint64_t v16 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v17 = 136446210;
      __int16 v18 = "void WebKit::WebPageProxy::shouldAllowDeviceOrientationAndMotionAccess(IPC::Connection &, FrameIdentifier, F"
            "rameInfoData &&, BOOL, CompletionHandler<void (DeviceOrientationOrMotionPermissionState)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 11430: Invalid message dispatched %{public}s", (uint8_t *)&v17, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::requestTextRecognition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    uint64_t v12 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v12 + 1592))(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 1480))(v12, a2, a3, a4, a5, a6);
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 1600);

  return v13(v12);
}

uint64_t WebKit::WebPageProxy::updateWithTextRecognitionResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v5 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
  else
  {
    v8[0] = a2;
    v8[1] = a3;
    void v8[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateWithTextRecognitionResult,WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)>>(*(void *)(a1 + 256), v8, a5, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::startVisualTranslation(uint64_t this, const WTF::String *a2, const WTF::String *a3)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      v3[0] = (uint64_t *)a2;
      v3[1] = (uint64_t *)a3;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartVisualTranslation>(*(void *)(this + 256), v3, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

WTF::MachSendRight *WebKit::WebPageProxy::requestImageBitmap(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    LOBYTE(v8[0]) = 0;
    char v9 = 0;
    uint64_t v7 = 0;
    uint64_t v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(void *)v3 + 16))(v3, v8, &v7);
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    uint64_t v5 = v7;
    uint64_t v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v8);
  }
  else
  {
    v8[0] = a2;
    return (WTF::MachSendRight *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(*(void *)(a1 + 256), v8, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::showMediaControlsContextMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 1592))(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 1496))(v8, a2, a3, a4);
  char v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 1600);

  return v9(v8);
}

IPC::Encoder *WebKit::WebPageProxy::clearNotificationPermissionState(WebKit::WebPageProxy *this, void *a2)
{
  uint64_t v3 = *((void *)this + 4);
  uint64_t v4 = *(void *)(v3 + 2144);
  if (v4)
  {
    *(void *)(v3 + 2144) = 0;
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v4, a2);
  }
  uint64_t result = (IPC::Encoder *)*((void *)this + 190);
  if (result)
  {
    return WebKit::WebPageProxyTesting::clearNotificationPermissionState(result);
  }
  return result;
}

void WebKit::WebPageProxy::requestNotificationPermission(uint64_t a1, WTF::StringImpl **this, uint64_t *a3)
{
  API::SecurityOrigin::createFromString(this, &v13);
  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)(*(void *)(a1 + 32) + 2144), v13 + 16, (uint64_t)v12);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = v13;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  uint64_t v7 = *(atomic_uint **)(a1 + 24);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  uint64_t v8 = *a3;
  *a3 = 0;
  char v9 = (void *)WTF::fastMalloc((WTF *)0x18);
  *char v9 = &unk_1EE9DB588;
  v9[1] = v7;
  void v9[2] = v8;
  v12[0] = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v5 + 328))(v5, a1, v6, v12);
  uint64_t v10 = v12[0];
  v12[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
}

WTF::StringImpl *API::SecurityOrigin::createFromString@<X0>(WTF::StringImpl **this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = API::Object::newObject(0x30uLL, 18);
  WTF::URL::URL((uint64_t)v10, this);
  uint64_t v7 = (WebKit *)WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v12, (WebCore::SecurityOriginData *)v10, v6);
  *(void *)uint64_t v5 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v7);
  *(void *)uint64_t v5 = &unk_1EE9C2E10;
  *(unsigned char *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v5 + 16, (uint64_t)v12);
  *a2 = v5;
  if (v13 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v13])(&v11, v12);
  }
  int v13 = -1;
  uint64_t result = v10[0];
  v10[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebPageProxy::pageWillLikelyUseNotifications(WebKit::WebPageProxy *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFTypeRef v2 = qword_1EB358730;
  if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *(void *)(v3 + 760);
    uint64_t v5 = *(void *)(v3 + 1928);
    uint64_t v6 = *(void *)(*((void *)this + 32) + 136);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    }
    int v9 = 134218752;
    uint64_t v10 = this;
    __int16 v11 = 2048;
    uint64_t v12 = v4;
    __int16 v13 = 2048;
    uint64_t v14 = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::pageWillLikelyUseNotifications: This page is likely to use notifications and is allowed to run in the background", (uint8_t *)&v9, 0x26u);
  }
  if (!*(void *)(*((void *)this + 4) + 1952))
  {
    uint64_t v7 = *((void *)this + 32) + 200;
    uint64_t v8 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v8, v7, "Page is likely to show notifications", 37, 0, 0);
    std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*((void *)this + 4) + 1952), v8);
  }
}

void WebKit::WebPageProxy::showNotification(uint64_t a1, atomic_uchar **a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(*(void *)(a1 + 256) + 512);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9) {
      uint64_t v8 = v9 - 16;
    }
    else {
      uint64_t v8 = 0;
    }
  }
  *(void *)uint64_t v19 = "WebNotificationManagerProxy";
  *(void *)&v19[8] = 28;
  uint64_t v10 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v8 + 456), (WTF::ASCIILiteralHash *)v19);
  if (v10) {
    uint64_t v11 = (uint64_t)(v10 - 16);
  }
  else {
    uint64_t v11 = 0;
  }
  WebKit::WebNotificationManagerProxy::show(v11, a1, a2, a3, a4);
  uint64_t v12 = qword_1EB358730;
  if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 760);
    uint64_t v15 = *(void *)(v13 + 1928);
    uint64_t v16 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v16) {
      LODWORD(v16) = *(_DWORD *)(v16 + 108);
    }
    *(_DWORD *)uint64_t v19 = 134218752;
    *(void *)&v19[4] = a1;
    *(_WORD *)&v19[12] = 2048;
    *(void *)&v19[14] = v14;
    __int16 v20 = 2048;
    uint64_t v21 = v15;
    __int16 v22 = 1024;
    int v23 = v16;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::showNotification: This page shows notifications and is allowed to run in the background", v19, 0x26u);
  }
  if (!*(void *)(*(void *)(a1 + 32) + 1952))
  {
    uint64_t v17 = *(void *)(a1 + 256) + 200;
    __int16 v18 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v18, v17, "Page has shown notification", 28, 0, 0);
    std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*(void *)(a1 + 32) + 1952), v18);
  }
}

void WebKit::WebPageProxy::cancelNotification(WebKit::WebPageProxy *this, const WTF::UUID *a2)
{
  uint64_t v4 = *(void *)(*(void *)(*((void *)this + 32) + 512) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v8[0] = "WebNotificationManagerProxy";
  v8[1] = 28;
  uint64_t v6 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v5 + 456), (WTF::ASCIILiteralHash *)v8);
  if (v6) {
    uint64_t v7 = (WebKit::WebNotificationManagerProxy *)(v6 - 16);
  }
  else {
    uint64_t v7 = 0;
  }
  WebKit::WebNotificationManagerProxy::cancel(v7, this, a2);
  if (v4) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebPageProxy::clearNotifications(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 256) + 512) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v8[0] = "WebNotificationManagerProxy";
  v8[1] = 28;
  uint64_t v6 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v5 + 456), (WTF::ASCIILiteralHash *)v8);
  if (v6) {
    uint64_t v7 = (WTF *)(v6 - 16);
  }
  else {
    uint64_t v7 = 0;
  }
  WebKit::WebNotificationManagerProxy::clearNotifications(v7, a1, a2);
  if (v4) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebPageProxy::didDestroyNotification(WebKit::WebPageProxy *this, const WTF::UUID *a2)
{
  uint64_t v4 = *(void *)(*(void *)(*((void *)this + 32) + 512) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v8[0] = "WebNotificationManagerProxy";
  v8[1] = 28;
  uint64_t v6 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v5 + 456), (WTF::ASCIILiteralHash *)v8);
  if (v6) {
    uint64_t v7 = (WebKit::WebNotificationManagerProxy *)(v6 - 16);
  }
  else {
    uint64_t v7 = 0;
  }
  WebKit::WebNotificationManagerProxy::didDestroyNotification(v7, this, a2);
  if (v4) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

unsigned int *WebKit::WebPageProxy::runModal(WebKit::WebPageProxy *this)
{
  uint64_t v2 = *((void *)this + 32);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
  WebKit::ResponsivenessTimer::stop((unsigned char *)(v2 + 56));
  WebKit::AuxiliaryProcessProxy::protectedConnection((WebKit::AuxiliaryProcessProxy *)v2, (atomic_uchar *volatile **)&v4);
  IPC::Connection::wakeUpRunLoop((unsigned int *)v4);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v4);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(void))(**((void **)this + 13) + 400))();
  if (v2) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didChangeScrollOffsetPinningForMainFrame(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
  (*(void (**)(uint64_t))(*(void *)v5 + 1408))(v5);
  (*(void (**)(uint64_t))(*(void *)v5 + 1600))(v5);
  *(_DWORD *)(*(void *)(a1 + 32) + 801) = a2;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
  (*(void (**)(uint64_t))(*(void *)v7 + 1416))(v7);
  (*(void (**)(uint64_t))(*(void *)v7 + 1600))(v7);
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 104) + 416);

  return v8();
}

uint64_t WebKit::WebPageProxy::updateWebsitePolicies(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9DB5B0;
  v4[1] = a2;
  uint64_t v6 = v4;
  WebKit::WebPageProxy::forEachWebContentProcess(a1, &v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didFinishLoadingDataForCustomContentProvider(uint64_t a1, WebCore::ResourceResponseBase *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 1592))(v8);
  WebCore::ResourceResponseBase::sanitizeSuggestedFilename((uint64_t *)&v13, a2, v9);
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, uint64_t))(*(void *)v8 + 1216))(v8, &v13, a3, a4);
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 1600))(v8);
}

void WebKit::WebPageProxy::beginPrinting(WebKit::WebPageProxy *this, WebKit::WebFrameProxy *a2, const PrintInfo *a3)
{
  if (!*((unsigned char *)this + 803))
  {
    *((unsigned char *)this + 803) = 1;
    long long v5 = *((_OWORD *)a2 + 17);
    if (*((unsigned char *)this + 804))
    {
      long long v8 = v5;
      uint64_t v3 = &v5;
      uint64_t v4 = a3;
      char v9 = 1;
      uint64_t v6 = &v3;
      char v7 = 2;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::BeginPrintingDuringDOMPrintOperation>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::BeginPrintingDuringDOMPrintOperation &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::BeginPrintingDuringDOMPrintOperation&)#1}>((uint64_t)this, (uint64_t)&v8, (uint64_t)&v6);
    }
    else
    {
      long long v8 = v5;
      uint64_t v3 = &v5;
      uint64_t v4 = a3;
      char v9 = 1;
      uint64_t v6 = &v3;
      char v7 = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::BeginPrinting>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::BeginPrinting &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::BeginPrinting&)#1}>((uint64_t)this, (uint64_t)&v8, (uint64_t)&v6);
    }
  }
}

uint64_t WebKit::WebPageProxy::endPrinting(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 803))
  {
    *(unsigned char *)(a1 + 803) = 0;
    if (*(unsigned char *)(a1 + 804))
    {
      uint64_t v2 = *(void *)(a1 + 256);
      char v7 = 0;
      return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::EndPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(void)>>(v2, (uint64_t)&v7, a2, *(void *)(*(void *)(a1 + 32) + 1928), 2, 1);
    }
    else
    {
      char v6 = 0;
      return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::EndPrinting,WTF::CompletionHandler<void ()(void)>>(*(void *)(a1 + 256), (uint64_t)&v6, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
    }
  }
  else
  {
    uint64_t v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
}

uint64_t WebKit::WebPageProxy::computePagesForPrinting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&long long v8 = a2;
  *((void *)&v8 + 1) = a3;
  *(unsigned char *)(a1 + 803) = 1;
  if (*(unsigned char *)(a1 + 804))
  {
    long long v12 = v8;
    char v6 = &v8;
    uint64_t v7 = a4;
    char v13 = 1;
    char v9 = &v6;
    uint64_t v10 = a5;
    char v11 = 2;
    return WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation&)#1}>(a1, (uint64_t)&v12, (uint64_t)&v9);
  }
  else
  {
    long long v12 = v8;
    char v6 = &v8;
    uint64_t v7 = a4;
    char v13 = 1;
    char v9 = &v6;
    uint64_t v10 = a5;
    char v11 = 0;
    return WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::ComputePagesForPrinting &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ComputePagesForPrinting&)#1}>(a1, (uint64_t)&v12, (uint64_t)&v9);
  }
}

uint64_t WebKit::WebPageProxy::drawPagesToPDF(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t *a6)
{
  uint64_t v7 = *(void *)(a2 + 272);
  uint64_t v8 = *(void *)(a2 + 280);
  v27[0] = v7;
  v27[1] = v8;
  if (*(unsigned char *)(a1 + 804))
  {
    int v23 = v27;
    uint64_t v24 = a3;
    int v25 = a4;
    int v26 = a5;
    uint64_t v9 = *a6;
    *a6 = 0;
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v10 = &unk_1EE9DAAE0;
    v10[1] = v9;
    __int16 v22 = v10;
    uint64_t v11 = WebKit::WebFrameProxy::webFrame(v7, v8);
    if (v11)
    {
      uint64_t v12 = v11;
      CFRetain(*(CFTypeRef *)(v11 + 8));
      uint64_t v13 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v12 + 32) + 16));
      if (v13)
      {
        uint64_t v14 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(*(void *)(v13 + 24), (uint64_t)&v23, (uint64_t *)&v22, *(void *)(v13 + 16), 2);
LABEL_8:
        uint64_t v19 = v14;
        CFRelease(*(CFTypeRef *)(v12 + 8));
        goto LABEL_14;
      }
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    uint64_t v20 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(*(void *)(a1 + 256), (uint64_t)&v23, (uint64_t *)&v22, *(void *)(*(void *)(a1 + 32) + 1928), 2);
  }
  else
  {
    int v23 = v27;
    uint64_t v24 = a3;
    int v25 = a4;
    int v26 = a5;
    uint64_t v15 = *a6;
    *a6 = 0;
    uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v16 = &unk_1EE9DAAE0;
    v16[1] = v15;
    __int16 v22 = v16;
    uint64_t v17 = WebKit::WebFrameProxy::webFrame(v7, v8);
    if (v17)
    {
      uint64_t v12 = v17;
      CFRetain(*(CFTypeRef *)(v17 + 8));
      uint64_t v18 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v12 + 32) + 16));
      if (v18)
      {
        uint64_t v14 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(*(void *)(v18 + 24), (uint64_t)&v23, (uint64_t *)&v22, *(void *)(v18 + 16), 0);
        goto LABEL_8;
      }
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    uint64_t v20 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(*(void *)(a1 + 256), (uint64_t)&v23, (uint64_t *)&v22, *(void *)(*(void *)(a1 + 32) + 1928), 0);
  }
  uint64_t v19 = v20;
LABEL_14:
  if (v22) {
    (*(void (**)(void *))(*v22 + 8))(v22);
  }
  return v19;
}

unsigned int *WebKit::WebPageProxy::drawToPDF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  v11[0] = a2;
  v11[1] = a3;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    v9[0] = 0;
    uint64_t v6 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 16))(v6, v9);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t result = (unsigned int *)v9[0];
    v9[0] = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v7);
    }
  }
  else
  {
    v9[0] = v11;
    v9[1] = a4;
    char v10 = a5;
    return (unsigned int *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(*(void *)(a1 + 256), (uint64_t)v9, a6, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setViewportSizeForCSSViewportUnits(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v2 = *(void *)(this + 32);
  if (!*(unsigned char *)(v2 + 1900))
  {
    uint64_t v4 = *(void *)a2;
    *(unsigned char *)(v2 + 1900) = 1;
LABEL_8:
    *(void *)(v2 + 1892) = v4;
    if (!*(unsigned char *)(this + 801))
    {
      if (*(unsigned char *)(this + 800))
      {
        uint64_t v5 = *(void *)a2;
        char v6 = 1;
        uint64_t v7 = &v5;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetViewportSizeForCSSViewportUnits>(*(void *)(this + 256), (uint64_t *)&v7, *(void *)(*(void *)(this + 32) + 1928), 0);
      }
    }
    return this;
  }
  if (*(float *)(v2 + 1892) != *(float *)a2 || *(float *)(v2 + 1896) != *((float *)a2 + 1))
  {
    uint64_t v4 = *(void *)a2;
    goto LABEL_8;
  }
  return this;
}

uint64_t WebKit::WebPageProxy::showDictationAlternativeUI(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 808))(v6, a2, a3);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 1600);

  return v7(v6);
}

uint64_t WebKit::WebPageProxy::removeDictationAlternatives(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 800))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

uint64_t WebKit::WebPageProxy::dictationAlternatives(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v6 + 816))(v10, v6, a2);
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v10);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v8);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 1600))(v6);
}

uint64_t WebKit::WebPageProxy::takeViewSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 456))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

uint64_t WebKit::WebPageProxy::setScrollPinningBehavior(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 32);
  if (*(unsigned __int8 *)(v2 + 1760) != a2)
  {
    *(unsigned char *)(v2 + 1760) = a2;
    if (!*(unsigned char *)(result + 801))
    {
      if (*(unsigned char *)(result + 800))
      {
        char v3 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetScrollPinningBehavior>(*(void *)(result + 256), &v3, *(void *)(v2 + 1928), 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::getWebCryptoMasterKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 312) + 384);
  uint64_t v4 = *a2;
  *a2 = 0;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v5 = &unk_1EE9DB718;
  v5[1] = v4;
  uint64_t v5[2] = a1;
  uint64_t v7 = v5;
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 136))(v3, &v7);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::wrapCryptoKey(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v7 = &unk_1EE9DB740;
  v7[1] = v4;
  float v7[2] = v6;
  v7[3] = v5;
  char v10 = v7;
  WebKit::WebPageProxy::getWebCryptoMasterKey(a1, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  if (v10)
  {
    uint64_t v9 = *(uint64_t (**)(void))(*v10 + 8);
    return v9();
  }
  return result;
}

uint64_t WebKit::WebPageProxy::unwrapCryptoKey(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v4 = *a2;
  uint64_t v5 = *((void *)a2 + 3);
  uint64_t v14 = *((void *)a2 + 2);
  *((void *)a2 + 3) = 0;
  long long v12 = *(long long *)((char *)a2 + 40);
  long long v13 = v4;
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v8 = &unk_1EE9DB768;
  *(_OWORD *)(v8 + 8) = v13;
  *(void *)(v8 + 24) = v14;
  *(void *)(v8 + 32) = v5;
  *(void *)(v8 + 40) = v7;
  *(_OWORD *)(v8 + 48) = v12;
  *(void *)(v8 + 64) = v6;
  uint64_t v11 = v8;
  WebKit::WebPageProxy::getWebCryptoMasterKey(a1, &v11);
  uint64_t result = v11;
  if (v11)
  {
    char v10 = *(uint64_t (**)(void))(*(void *)v11 + 8);
    return v10();
  }
  return result;
}

uint64_t WebKit::WebPageProxy::changeFont(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 801))
  {
    if (*(unsigned char *)(result + 800))
    {
      uint64_t v2 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ChangeFont>(*(void *)(result + 256), &v2, *(void *)(*(void *)(result + 32) + 1928), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::insertTextAsync(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(result + 801))
  {
    if (*(unsigned char *)(result + 800))
    {
      v4[0] = a2;
      v4[1] = a3;
      v4[2] = a4;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InsertTextAsync>(*(void *)(result + 256), (uint64_t)v4, *(void *)(*(void *)(result + 32) + 1928), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setCompositionAsync(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!*(unsigned char *)(result + 801))
  {
    if (*(unsigned char *)(result + 800))
    {
      v7[0] = a2;
      v7[1] = a3;
      float v7[2] = a4;
      v7[3] = a5;
      void v7[4] = a6;
      v7[5] = a7;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCompositionAsync>(*(void *)(result + 256), (uint64_t)v7, *(void *)(*(void *)(result + 32) + 1928), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setWritingSuggestion(uint64_t this, const WTF::String *a2, const EditingRange *a3)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      v3[0] = (uint64_t *)a2;
      v3[1] = (uint64_t *)a3;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetWritingSuggestion>(*(void *)(this + 256), v3, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::confirmCompositionAsync(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      char v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ConfirmCompositionAsync>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setScrollPerformanceDataCollectionEnabled(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 992) != a2)
  {
    *(unsigned char *)(this + 992) = a2;
    uint64_t v2 = (WebKit::RemoteLayerTreeScrollingPerformanceData **)(this + 984);
    if (a2)
    {
      if (*v2) {
        return this;
      }
      uint64_t v5 = *(void *)(this + 232);
      if (*(unsigned char *)(v5 + 36))
      {
        this = 96;
        __break(0xC471u);
        return this;
      }
      long long v4 = (WebKit::RemoteLayerTreeScrollingPerformanceData *)WTF::fastMalloc((WTF *)0x18);
      ++*(_DWORD *)(v5 + 32);
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
      *(void *)long long v4 = v5;
      uint64_t v3 = v2;
    }
    else
    {
      uint64_t v3 = (WebKit::RemoteLayerTreeScrollingPerformanceData **)(this + 984);
      long long v4 = 0;
    }
    return (uint64_t)std::unique_ptr<WebKit::RemoteLayerTreeScrollingPerformanceData>::reset[abi:sn180100](v3, v4);
  }
  return this;
}

uint64_t WebKit::WebPageProxy::takeSnapshot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t *a6)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v9 = a4;
  __int16 v8 = a5;
  v7[0] = v10;
  v7[1] = &v9;
  float v7[2] = &v8;
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::TakeSnapshot,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(*(void *)(a1 + 256), (uint64_t)v7, a6, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
}

uint64_t WebKit::WebPageProxy::navigationGestureDidBegin(WebKit::WebPageProxy *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 1592))(v3);
  *((unsigned char *)this + 928) = 1;
  (*(void (**)(uint64_t))(*(void *)v3 + 1224))(v3);
  (*(void (**)(void))(**((void **)this + 9) + 328))();
  long long v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 1600);

  return v4(v3);
}

uint64_t WebKit::WebPageProxy::navigationGestureWillEnd(WebKit::WebPageProxy *this, uint64_t a2, WebKit::WebBackForwardListItem *a3)
{
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
  if (a2)
  {
    *((unsigned char *)this + 1266) = 1;
    char v9 = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SwipeAnimationDidStart>(*((void *)this + 32), (uint64_t)&v9, *(void *)(*((void *)this + 4) + 1928), 0);
  }
  (*(void (**)(uint64_t, uint64_t, WebKit::WebBackForwardListItem *))(*(void *)v7 + 1232))(v7, a2, a3);
  (*(void (**)(void))(**((void **)this + 9) + 336))();
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 1600))(v7);
}

uint64_t WebKit::WebPageProxy::navigationGestureDidEnd(WebKit::WebPageProxy *this, uint64_t a2, WebKit::WebBackForwardListItem *a3)
{
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
  (*(void (**)(uint64_t, uint64_t, WebKit::WebBackForwardListItem *))(*(void *)v7 + 1240))(v7, a2, a3);
  (*(void (**)(void))(**((void **)this + 9) + 344))();
  if (*((unsigned char *)this + 1266))
  {
    *((unsigned char *)this + 1266) = 0;
    char v10 = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SwipeAnimationDidEnd>(*((void *)this + 32), (uint64_t)&v10, *(void *)(*((void *)this + 4) + 1928), 0);
    __int16 v8 = (WebKit::ProvisionalPageProxy *)*((void *)this + 149);
    if (v8) {
      WebKit::ProvisionalPageProxy::swipeAnimationDidEnd(v8);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 1600))(v7);
}

uint64_t WebKit::WebPageProxy::navigationGestureDidEnd(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1248))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

uint64_t WebKit::WebPageProxy::willRecordNavigationSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 1256))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

uint64_t WebKit::WebPageProxy::navigationGestureSnapshotWasRemoved(uint64_t this)
{
  *(unsigned char *)(this + 928) = 0;
  if (!*(unsigned char *)(this + 801))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void *)(this + 40);
    if (v2) {
      uint64_t v3 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v3 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 1592))(v3);
    (*(void (**)(uint64_t))(*(void *)v3 + 1264))(v3);
    (*(void (**)(uint64_t))(*(void *)v3 + 1600))(v3);
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v1 + 72) + 352);
    return v4();
  }
  return this;
}

uint64_t WebKit::WebPageProxy::willBeginViewGesture(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1272))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

uint64_t WebKit::WebPageProxy::didEndViewGesture(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1280))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void WebKit::WebPageProxy::isPlayingMediaDidChange(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  if ((!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(v4 + 336))
     || !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(v4 + 352)))
    && !*(unsigned char *)(a1 + 801))
  {
    WebKit::WebPageProxy::updatePlayingMediaDidChange((WebKit::WebPageProxy *)a1, a2, 1);
  }
}

uint64_t WebKit::WebPageProxy::videoControlsManagerDidChange(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1584))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

BOOL WebKit::WebPageProxy::hasActiveVideoForControlsManager(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 53);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 48);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (_DWORD *)WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(v1, v2)[1];
  int v4 = v3[4];
  v3[4] = v4 + 1;
  BOOL v5 = v3 != 0;
  if (v4) {
    v3[4] = v4;
  }
  else {
    (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  }
  return v5;
}

unsigned int *WebKit::WebPageProxy::handleAutoFillButtonClick(uint64_t a1, CFTypeRef **a2)
{
  uint64_t v3 = *(void *)(a1 + 104);
  int v4 = *(atomic_uint **)(a1 + 256);
  atomic_fetch_add(v4 + 4, 1u);
  BOOL v5 = *a2;
  if (*a2) {
    CFRetain(v5[1]);
  }
  WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v4, (API::Object *)v5, &v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 512))(v3, a1, v8);
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  if (v5) {
    CFRelease(v5[1]);
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v4 + 4);
}

unsigned int *WebKit::WebPageProxy::didResignInputElementStrongPasswordAppearance(uint64_t a1, CFTypeRef **a2)
{
  uint64_t v3 = *(void *)(a1 + 104);
  int v4 = *(atomic_uint **)(a1 + 256);
  atomic_fetch_add(v4 + 4, 1u);
  BOOL v5 = *a2;
  if (*a2) {
    CFRetain(v5[1]);
  }
  WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v4, (API::Object *)v5, &v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 520))(v3, a1, v8);
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  if (v5) {
    CFRelease(v5[1]);
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v4 + 4);
}

uint64_t WebKit::WebPageProxy::performSwitchHapticFeedback(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 776))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

uint64_t WebKit::WebPageProxy::didChangeBackgroundColor(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1384))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

unsigned int *WebKit::WebPageProxy::callAfterNextPresentationUpdate(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(a1 + 801) && *(unsigned char *)(a1 + 800) && *(void *)(a1 + 232))
  {
    uint64_t v7 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v7 = 1;
    uint64_t v8 = *a2;
    *a2 = 0;
    *(void *)(v7 + 8) = v8;
    uint64_t v12 = *(void *)(*(void *)(a1 + 232) + 24);
    long long v13 = (unsigned int *)v7;
    char v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *char v9 = &unk_1EE9DB7B8;
    v9[1] = &v13;
    void v9[2] = &v12;
    uint64_t v11 = v9;
    WebKit::WebPageProxy::forEachWebContentProcess((void *)a1, &v11);
    char v10 = v11;
    uint64_t v11 = 0;
    if (v10) {
      (*(void (**)(void *))(*v10 + 8))(v10);
    }
    uint64_t result = v13;
    long long v13 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(result);
    }
  }
  else
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    int v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return (unsigned int *)v4(v3);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didRestoreScrollPosition(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1616))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

uint64_t WebKit::WebPageProxy::getLoadDecisionForIcon(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 88);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v7 = *a3;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v8 = &unk_1EE9DB808;
  v8[1] = a1;
  void v8[2] = a1;
  uint64_t v8[3] = v7;
  char v10 = v8;
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v6 + 16))(v6, a2, &v10);
  uint64_t result = (uint64_t)v10;
  char v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::userInterfaceLayoutDirection(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 1632))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1600))(v2);
  return v3;
}

uint64_t WebKit::WebPageProxy::setUserInterfaceLayoutDirection(uint64_t result, int a2)
{
  if (!*(unsigned char *)(result + 801))
  {
    if (*(unsigned char *)(result + 800))
    {
      int v2 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetUserInterfaceLayoutDirection>(*(void *)(result + 256), &v2, *(void *)(*(void *)(result + 32) + 1928), 0);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::setURLSchemeHandlerForScheme(void *a1, const WTF::StringImpl **a2)
{
  while (1)
  {
    WTF::URLParser::maybeCanonicalizeScheme();
    if (v11)
    {
      WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::add<WebKit::WebURLSchemeHandler&>(a1 + 141, &v10, *a2, (uint64_t)v9);
      uint64_t v8 = *((void *)*a2 + 2);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>((uint64_t *)(a1[4] + 1864), &v8, (uint64_t *)a2, (uint64_t)v7);
      if (v11) {
        break;
      }
    }
    std::__throw_bad_optional_access[abi:sn180100]();
  }
  v6[0] = &v8;
  v6[1] = (uint64_t *)&v10;
  uint64_t result = (WTF::StringImpl *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RegisterURLSchemeHandler>(a1[32], v6, *(void *)(a1[4] + 1928), 0);
  if (v11)
  {
    uint64_t result = v10;
    char v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::add<WebKit::WebURLSchemeHandler&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v9;
    uint64_t v15 = (uint64_t *)(v8 + 16 * (v11 & v9));
    uint64_t v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    uint64_t v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *uint64_t v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v15 = v12;
    }
    WTF::String::operator=(v15, a2);
    ++*((_DWORD *)a3 + 2);
    uint64_t result = (uint64_t *)v15[1];
    v15[1] = (uint64_t)a3;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1) {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
      else {
        --*((_DWORD *)result + 2);
      }
    }
    uint64_t v22 = *a1;
    if (*a1) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 12) = v23;
    uint64_t v24 = *a1;
    if (*a1) {
      int v25 = *(_DWORD *)(v24 - 12);
    }
    else {
      int v25 = 0;
    }
    uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
    unint64_t v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
      {
LABEL_33:
        uint64_t result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (uint64_t)v15);
        uint64_t v15 = result;
        uint64_t v24 = *a1;
        if (*a1) {
          unint64_t v27 = *(unsigned int *)(v24 - 4);
        }
        else {
          unint64_t v27 = 0;
        }
      }
    }
    else if (3 * v27 <= 4 * v26)
    {
      goto LABEL_33;
    }
    uint64_t v21 = v24 + 16 * v27;
    char v20 = 1;
    goto LABEL_37;
  }
  uint64_t result = (uint64_t *)WTF::equal(v16, *a2, a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v18 = *a1;
  if (*a1) {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
  }
  else {
    uint64_t v19 = 0;
  }
  char v20 = 0;
  uint64_t v21 = v18 + 16 * v19;
LABEL_37:
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v21;
  *(unsigned char *)(a4 + 16) = v20;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = *(unsigned int *)(v8 - 4);
        }
        char v22 = 0;
        uint64_t v23 = v8 + 16 * v21;
        goto LABEL_33;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  *uint64_t v16 = v11;
  uint64_t v20 = *a3;
  *a3 = 0;
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1) {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
    else {
      --*((_DWORD *)result + 2);
    }
  }
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12) + 1;
  }
  else {
    int v25 = 1;
  }
  *(_DWORD *)(v24 - 12) = v25;
  uint64_t v26 = *v6;
  if (*v6) {
    int v27 = *(_DWORD *)(v26 - 12);
  }
  else {
    int v27 = 0;
  }
  uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
  unint64_t v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
    {
LABEL_28:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v26 = *v6;
      if (*v6) {
        unint64_t v29 = *(unsigned int *)(v26 - 4);
      }
      else {
        unint64_t v29 = 0;
      }
    }
  }
  else if (3 * v29 <= 4 * v28)
  {
    goto LABEL_28;
  }
  uint64_t v23 = v26 + 16 * v29;
  char v22 = 1;
LABEL_33:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = v22;
  return result;
}

void WebKit::WebPageProxy::startURLSchemeTask(uint64_t a1, WebKit::AuxiliaryProcessProxy *this, uint64_t *a3)
{
  uint64_t v6 = WebKit::AuxiliaryProcessProxy::fromConnection(this, this);
  uint64_t v7 = v6;
  if (v6)
  {
    int v8 = 1;
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 72))(v6) == 2)
    {
      atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
      int v8 = 0;
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  else
  {
    int v8 = 1;
  }
  atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
  uint64_t v9 = v7;
  WebKit::WebPageProxy::startURLSchemeTaskShared(a1, (uint64_t)this, &v9, *(void *)(*(void *)(a1 + 32) + 1928), a3);
  if (!v8)
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  }
}

void WebKit::WebPageProxy::startURLSchemeTaskShared(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(*a5 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v16 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int v19 = 136446210;
      *(void *)&v19[4] = "void WebKit::WebPageProxy::startURLSchemeTaskShared(IPC::Connection &, Ref<WebProcessProxy> &"
                           "&, PageIdentifier, URLSchemeTaskParameters &&)";
      _os_log_fault_impl(&dword_1985F2000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12960: Invalid message dispatched %{public}s", v19, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
  else
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 1864);
    uint64_t v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10, *a5);
    if (v10) {
      uint64_t v12 = v10 + 16 * *(unsigned int *)(v10 - 4);
    }
    else {
      uint64_t v12 = 0;
    }
    if (v12 == v11)
    {
      uint64_t v17 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int v19 = 136446210;
        *(void *)&v19[4] = "void WebKit::WebPageProxy::startURLSchemeTaskShared(IPC::Connection &, Ref<WebProcessProxy>"
                             " &&, PageIdentifier, URLSchemeTaskParameters &&)";
        _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12962: Invalid message dispatched %{public}s", v19, 0xCu);
      }
      uint64_t v18 = *(void *)(*a3 + 144);
      if (v18) {
        *(unsigned char *)(v18 + 98) = 1;
      }
      else {
        __break(0xC471u);
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v11 + 8);
      ++*(_DWORD *)(v13 + 8);
      uint64_t v14 = *a3;
      *(void *)int v19 = 0;
      WebKit::WebURLSchemeHandler::startTask((uint64_t *)v13, a1, v14, a4, (uint64_t)a5, (uint64_t *)v19);
      if (*(void *)v19) {
        (*(void (**)(void))(**(void **)v19 + 8))(*(void *)v19);
      }
      if (*(_DWORD *)(v13 + 8) == 1)
      {
        unsigned int v15 = *(void (**)(uint64_t))(*(void *)v13 + 8);
        v15(v13);
      }
      else
      {
        --*(_DWORD *)(v13 + 8);
      }
    }
  }
}

void WebKit::WebPageProxy::stopURLSchemeTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a3 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v12 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_15:
      *(unsigned char *)(a2 + 98) = 1;
      return;
    }
    int v14 = 136446210;
    unsigned int v15 = "void WebKit::WebPageProxy::stopURLSchemeTask(IPC::Connection &, WebURLSchemeHandlerIdentifier, WebCore::Resour"
          "ceLoaderIdentifier)";
    uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12969: Invalid message d"
          "ispatched %{public}s";
LABEL_17:
    _os_log_fault_impl(&dword_1985F2000, v12, OS_LOG_TYPE_FAULT, v13, (uint8_t *)&v14, 0xCu);
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 1864);
  uint64_t v8 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v7, a3);
  if (v7) {
    uint64_t v9 = v7 + 16 * *(unsigned int *)(v7 - 4);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 == v8)
  {
    uint64_t v12 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_15;
    }
    int v14 = 136446210;
    unsigned int v15 = "void WebKit::WebPageProxy::stopURLSchemeTask(IPC::Connection &, WebURLSchemeHandlerIdentifier, WebCore::Resour"
          "ceLoaderIdentifier)";
    uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12971: Invalid message d"
          "ispatched %{public}s";
    goto LABEL_17;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  ++*(_DWORD *)(v10 + 8);
  WebKit::WebURLSchemeHandler::stopTask((uint64_t *)v10, a1, a4);
  if (*(_DWORD *)(v10 + 8) == 1)
  {
    uint64_t v11 = *(void (**)(uint64_t))(*(void *)v10 + 8);
    v11(v10);
  }
  else
  {
    --*(_DWORD *)(v10 + 8);
  }
}

void WebKit::WebPageProxy::loadSynchronousURLSchemeTask(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(*a3 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    int v14 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_15:
      *(unsigned char *)(a2 + 98) = 1;
      return;
    }
    int v16 = 136446210;
    uint64_t v17 = "void WebKit::WebPageProxy::loadSynchronousURLSchemeTask(IPC::Connection &, URLSchemeTaskParameters &&, Complet"
          "ionHandler<void (const WebCore::ResourceResponse &, const WebCore::ResourceError &, Vector<uint8_t> &&)> &&)";
    unsigned int v15 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12978: Invalid message d"
          "ispatched %{public}s";
LABEL_17:
    _os_log_fault_impl(&dword_1985F2000, v14, OS_LOG_TYPE_FAULT, v15, (uint8_t *)&v16, 0xCu);
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 + 1864);
  uint64_t v10 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9, *a3);
  if (v9) {
    uint64_t v11 = v9 + 16 * *(unsigned int *)(v9 - 4);
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11 == v10)
  {
    int v14 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_15;
    }
    int v16 = 136446210;
    uint64_t v17 = "void WebKit::WebPageProxy::loadSynchronousURLSchemeTask(IPC::Connection &, URLSchemeTaskParameters &&, Complet"
          "ionHandler<void (const WebCore::ResourceResponse &, const WebCore::ResourceError &, Vector<uint8_t> &&)> &&)";
    unsigned int v15 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12980: Invalid message d"
          "ispatched %{public}s";
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(v10 + 8);
  ++*(_DWORD *)(v12 + 8);
  WebKit::WebURLSchemeHandler::startTask((uint64_t *)v12, a1, *(void *)(a1 + 256), *(void *)(v8 + 1928), (uint64_t)a3, a4);
  if (*(_DWORD *)(v12 + 8) == 1)
  {
    uint64_t v13 = *(void (**)(uint64_t))(*(void *)v12 + 8);
    v13(v12);
  }
  else
  {
    --*(_DWORD *)(v12 + 8);
  }
}

uint64_t WebKit::WebPageProxy::requestStorageAccessConfirm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = WebKit::WebFrameProxy::webFrame(a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 336))(v12, a1, v13, a2, a3, a6, a7);
  int v14 = *(uint64_t (**)(void))(**(void **)(a1 + 72) + 160);

  return v14();
}

uint64_t WebKit::WebPageProxy::didCommitCrossSiteLoadWithDataTransferFromPrevalentResource(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      char v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WasLoadedWithDataTransferFromPrevalentResource>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

WebKit::WebPageProxy *WebKit::WebPageProxy::effectiveAppearanceDidChange(WebKit::WebPageProxy *this)
{
  if (!*((unsigned char *)this + 801))
  {
    char v1 = this;
    if (*((unsigned char *)this + 800))
    {
      v2[0] = WebKit::WebPageProxy::useDarkAppearance(this);
      v2[1] = WebKit::WebPageProxy::useElevatedUserInterfaceLevel(v1);
      return (WebKit::WebPageProxy *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::EffectiveAppearanceDidChange>(*((void *)v1 + 32), v2, *(void *)(*((void *)v1 + 4) + 1928), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::dataOwnerForPasteboard(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 1464))(v4, a2);
  (*(void (**)(uint64_t))(*(void *)v4 + 1600))(v4);
  return v5;
}

void WebKit::WebPageProxy::writePromisedAttachmentToPasteboard(WebKit::WebPageProxy *a1, uint64_t a2, const WTF::StringImpl *a3, const WTF::StringImpl **a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (WebKit::WebPageProxy::isValidPerformActionOnElementAuthorizationToken(a1, a4, a3))
  {
    uint64_t v7 = *((void *)a1 + 5);
    if (v7) {
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v8 + 1592))(v8);
    (*(void (**)(uint64_t, const WTF::StringImpl *))(*(void *)v8 + 1712))(v8, a3);
    uint64_t v9 = *(void (**)(uint64_t))(*(void *)v8 + 1600);
    v9(v8);
  }
  else
  {
    uint64_t v10 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v11 = 136446210;
      uint64_t v12 = "void WebKit::WebPageProxy::writePromisedAttachmentToPasteboard(IPC::Connection &, PromisedAttachmentInfo &&,"
            " const String &)";
      _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13027: Invalid message dispatched %{public}s", (uint8_t *)&v11, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::requestAttachmentIcon(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5, const WTF::String *a6, CFTypeRef *a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v14 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3))
  {
    CFTypeRef v29 = *a7;
    buf[0] = 0;
    char v33 = 0;
    WebKit::WebPageProxy::iconForAttachment(a5, a4, a6, &v29, &v30);
    if (v30)
    {
      WebCore::ShareableBitmap::createHandle();
      if (v28)
      {
        if (v33)
        {
          WebCore::ShareableBitmapHandle::operator=((uint64_t)buf, (uint64_t)v26);
        }
        else
        {
          WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)buf, (uint64_t)v26);
          char v33 = 1;
        }
      }
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v26);
      int v16 = v30;
      uint64_t v30 = 0;
      if (v16) {
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v16, v15);
      }
    }
    uint64_t v17 = *((void *)this + 32);
    uint64_t v18 = *(void *)(*((void *)this + 4) + 1928);
    int v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v19 = 2524;
    *((void *)v19 + 1) = v18;
    *((void *)v19 + 66) = (char *)v19 + 16;
    *((void *)v19 + 67) = 512;
    *((void *)v19 + 68) = 0;
    *((void *)v19 + 70) = 0;
    *((void *)v19 + 69) = 0;
    IPC::Encoder::encodeHeader(v19);
    uint64_t v30 = v19;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v19, (uint64_t *)a3);
    IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(v19, (unint64_t)buf);
    IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v19, (float *)&v29);
    LOBYTE(v26[0]) = 0;
    char v27 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v17, &v30, 0, (uint64_t)v26, 1);
    if (v27)
    {
      uint64_t v21 = v26[0];
      v26[0] = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
    }
    char v22 = v30;
    uint64_t v30 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v20);
      WTF::fastFree(v23, v24);
    }
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)buf);
  }
  else
  {
    int v25 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v32 = "void WebKit::WebPageProxy::requestAttachmentIcon(IPC::Connection &, const String &, const String &, const St"
            "ring &, const String &, const FloatSize &)";
      _os_log_fault_impl(&dword_1985F2000, v25, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13035: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
}

void *WebKit::WebPageProxy::attachmentForIdentifier@<X0>(void *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, void *a4@<X8>)
{
  if (*a2 && *((_DWORD *)*a2 + 1))
  {
    this = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 142, a2, a3);
    uint64_t v5 = this;
    if (this) {
      this = (void *)CFRetain(*((CFTypeRef *)this + 1));
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a4 = v5;
  return this;
}

WTF::StringImpl *WebKit::WebPageProxy::insertAttachment(void *a1, API::Attachment **a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = (WTF::StringImpl *)*((void *)*a2 + 4);
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v17 = v7;
  v15[0] = API::Attachment::fileSizeForDisplay(v6);
  v15[1] = v8;
  API::Attachment::fileName(*a2, (uint64_t)&v14);
  uint64_t v9 = (uint64_t)*a2 + 48;
  v16[0] = &v17;
  v16[1] = v15;
  _DWORD v16[2] = &v14;
  void v16[3] = v9;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::InsertAttachment,WTF::CompletionHandler<void ()(void)>>(a1[32], (uint64_t)v16, a3, *(void *)(a1[4] + 1928), 0, 1);
  int v11 = v14;
  uint64_t v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>(a1 + 142, &v17, (const WTF::StringImpl *)a2, (uint64_t)v16);
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::updateAttachmentAttributes(uint64_t a1, API::Attachment *this, uint64_t *a3)
{
  uint64_t v6 = (char *)this + 32;
  v18[0] = API::Attachment::fileSizeForDisplay(this);
  v18[1] = v7;
  API::Attachment::fileName(this, (uint64_t)&v17);
  API::Attachment::associatedElementData((uint64_t)this, &v13);
  if (v13) {
    uint64_t v8 = *(void *)(v13 + 48);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v14 = v8;
  unsigned int v15 = (unsigned int *)v13;
  int v16 = 0;
  v19[0] = v6;
  v19[1] = v18;
  void v19[2] = (char *)this + 48;
  void v19[3] = &v17;
  v19[4] = &v14;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateAttachmentAttributes,WTF::CompletionHandler<void ()(void)>>(*(void *)(a1 + 256), (uint64_t)v19, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  uint64_t v10 = v16;
  int v16 = 0;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v10);
  }
  int v11 = v15;
  unsigned int v15 = 0;
  if (v11) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, v9);
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebPageProxy::registerAttachmentIdentifierFromData(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3, WTF::StringImpl **a4, const WTF::String *a5, const IPC::SharedBufferReference *a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v12 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) == 0)
  {
    uint64_t v14 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_6;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::registerAttachmentIdentifierFromData(IPC::Connection &, const String"
                         " &, const String &, const String &, const IPC::SharedBufferReference &)";
    int v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13106: Invalid message d"
          "ispatched %{public}s";
    goto LABEL_10;
  }
  if ((unint64_t)(*(void *)a3 + 1) <= 1)
  {
    uint64_t v14 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_6:
      *((unsigned char *)a2 + 98) = 1;
      return;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::registerAttachmentIdentifierFromData(IPC::Connection &, const String"
                         " &, const String &, const String &, const IPC::SharedBufferReference &)";
    int v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13107: Invalid message d"
          "ispatched %{public}s";
LABEL_10:
    _os_log_fault_impl(&dword_1985F2000, v14, OS_LOG_TYPE_FAULT, v16, buf, 0xCu);
    goto LABEL_6;
  }
  WebKit::WebPageProxy::attachmentForIdentifier(this, (WTF::StringImpl **)a3, v13, buf);
  unsigned int v15 = *(atomic_uchar **)buf;
  if (*(void *)buf) {
    goto LABEL_8;
  }
  WebKit::WebPageProxy::ensureAttachment((WebKit::WebPageProxy *)&v20, this, (WTF::StringImpl **)a3);
  uint64_t v17 = v20;
  WTF::String::operator=((uint64_t *)v20 + 6, a4);
  CFRetain(*((CFTypeRef *)v17 + 1));
  int v19 = v17;
  WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>((uint64_t *)this + 142, (WTF::StringImpl **)a3, (const WTF::StringImpl *)&v19, (uint64_t)buf);
  uint64_t v18 = v19;
  int v19 = 0;
  if (v18) {
    CFRelease(*((CFTypeRef *)v18 + 1));
  }
  WebKit::WebPageProxy::platformRegisterAttachment((uint64_t)this, &v20, a5, (unsigned int *)a6);
  unsigned int v15 = v20;
  uint64_t v20 = 0;
  if (v15) {
LABEL_8:
  }
    CFRelease(*((CFTypeRef *)v15 + 1));
}

void WebKit::WebPageProxy::ensureAttachment(WebKit::WebPageProxy *this, const WTF::String *a2, WTF::StringImpl **a3)
{
  WebKit::WebPageProxy::attachmentForIdentifier(a2, a3, (const WTF::StringImpl *)a3, v9);
  if (v9[0])
  {
    *(void *)this = v9[0];
  }
  else
  {
    uint64_t v6 = (API::Attachment *)API::Object::newObject(0x48uLL, 41);
    uint64_t v7 = API::Attachment::Attachment(v6, (const WTF::String *)a3, a2);
    *(void *)this = v7;
    CFRetain(*((CFTypeRef *)v7 + 1));
    uint64_t v10 = v6;
    WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>((uint64_t *)a2 + 142, a3, (const WTF::StringImpl *)&v10, (uint64_t)v9);
    uint64_t v8 = v10;
    uint64_t v10 = 0;
    if (v8) {
      CFRelease(*((CFTypeRef *)v8 + 1));
    }
  }
}

void WebKit::WebPageProxy::registerAttachmentIdentifierFromFilePath(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3, WTF::StringImpl **a4, WTF::StringImpl **a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v10 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) == 0)
  {
    uint64_t v12 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_6;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::registerAttachmentIdentifierFromFilePath(IPC::Connection &, const St"
                         "ring &, const String &, const String &)";
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13121: Invalid message d"
          "ispatched %{public}s";
    goto LABEL_10;
  }
  if ((unint64_t)(*(void *)a3 + 1) <= 1)
  {
    uint64_t v12 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_6:
      *((unsigned char *)a2 + 98) = 1;
      return;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::registerAttachmentIdentifierFromFilePath(IPC::Connection &, const St"
                         "ring &, const String &, const String &)";
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13122: Invalid message d"
          "ispatched %{public}s";
LABEL_10:
    _os_log_fault_impl(&dword_1985F2000, v12, OS_LOG_TYPE_FAULT, v14, buf, 0xCu);
    goto LABEL_6;
  }
  WebKit::WebPageProxy::attachmentForIdentifier(this, (WTF::StringImpl **)a3, v11, buf);
  uint64_t v13 = *(atomic_uchar **)buf;
  if (*(void *)buf) {
    goto LABEL_8;
  }
  WebKit::WebPageProxy::ensureAttachment((WebKit::WebPageProxy *)&v18, this, (WTF::StringImpl **)a3);
  unsigned int v15 = v18;
  WTF::String::operator=((uint64_t *)v18 + 6, a4);
  WTF::String::operator=((uint64_t *)v15 + 5, a5);
  CFRetain(*((CFTypeRef *)v15 + 1));
  uint64_t v17 = v15;
  WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>((uint64_t *)this + 142, (WTF::StringImpl **)a3, (const WTF::StringImpl *)&v17, (uint64_t)buf);
  int v16 = v17;
  uint64_t v17 = 0;
  if (v16) {
    CFRelease(*((CFTypeRef *)v16 + 1));
  }
  WebKit::WebPageProxy::platformRegisterAttachment((uint64_t)this, &v18, a5);
  uint64_t v13 = v18;
  uint64_t v18 = 0;
  if (v13) {
LABEL_8:
  }
    CFRelease(*((CFTypeRef *)v13 + 1));
}

void WebKit::WebPageProxy::registerAttachmentIdentifier(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) == 0)
  {
    uint64_t v8 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_6;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::registerAttachmentIdentifier(IPC::Connection &, const String &)";
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13139: Invalid message d"
          "ispatched %{public}s";
    goto LABEL_10;
  }
  if ((unint64_t)(*(void *)a3 + 1) <= 1)
  {
    uint64_t v8 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_6:
      *((unsigned char *)a2 + 98) = 1;
      return;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::registerAttachmentIdentifier(IPC::Connection &, const String &)";
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13140: Invalid message d"
          "ispatched %{public}s";
LABEL_10:
    _os_log_fault_impl(&dword_1985F2000, v8, OS_LOG_TYPE_FAULT, v10, buf, 0xCu);
    goto LABEL_6;
  }
  WebKit::WebPageProxy::attachmentForIdentifier(this, (WTF::StringImpl **)a3, v7, buf);
  uint64_t v9 = *(void *)buf;
  if (*(void *)buf
    || (WebKit::WebPageProxy::ensureAttachment((WebKit::WebPageProxy *)&v11, this, (WTF::StringImpl **)a3),
        WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>((uint64_t *)this + 142, (WTF::StringImpl **)a3, (const WTF::StringImpl *)&v11, (uint64_t)buf), uint64_t v9 = v11, v11 = 0, v9))
  {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

void WebKit::WebPageProxy::registerAttachmentsFromSerializedData(void *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[34];
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, (const WTF::StringImpl *)a3))
  {
    uint64_t v8 = a3[3];
    if (v8)
    {
      uint64_t v9 = *(void *)a3;
      uint64_t v10 = 24 * v8;
      uint64_t v11 = v9 + 8;
      do
      {
        uint64_t v12 = *(void *)(v11 - 8);
        *(void *)(v11 - 8) = 0;
        *(void *)long long buf = v12;
        WebKit::WebPageProxy::attachmentForIdentifier(a1, (WTF::StringImpl **)buf, v7, &v17);
        uint64_t v13 = v17;
        if (v17
          || (WebKit::WebPageProxy::ensureAttachment((WebKit::WebPageProxy *)&v17, (const WTF::String *)a1, (WTF::StringImpl **)buf), API::Attachment::updateFromSerializedRepresentation(v17, (WebCore::SharedBuffer **)(v11 + 8), (void *)v11), (uint64_t v13 = v17) != 0))
        {
          CFRelease(*(CFTypeRef *)(v13 + 8));
        }
        unsigned int v15 = *(WTF::StringImpl **)buf;
        *(void *)long long buf = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v14);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        v11 += 24;
        v10 -= 24;
      }
      while (v10);
    }
  }
  else
  {
    int v16 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::registerAttachmentsFromSerializedData(IPC::Connection &, Vector<Se"
                           "rializedAttachmentData> &&)";
      _os_log_fault_impl(&dword_1985F2000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13148: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::cloneAttachmentData(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3, WTF::StringImpl **a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v8 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) == 0)
  {
    uint64_t v9 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_11;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::cloneAttachmentData(IPC::Connection &, const String &, const String &)";
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13164: Invalid message d"
          "ispatched %{public}s";
    goto LABEL_10;
  }
  if ((unint64_t)(*(void *)a3 + 1) <= 1)
  {
    uint64_t v9 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::cloneAttachmentData(IPC::Connection &, const String &, const String &)";
      uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13165: Invalid message"
            " dispatched %{public}s";
LABEL_10:
      _os_log_fault_impl(&dword_1985F2000, v9, OS_LOG_TYPE_FAULT, v10, buf, 0xCu);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  if ((unint64_t)*a4 + 1 <= 1)
  {
    uint64_t v9 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::cloneAttachmentData(IPC::Connection &, const String &, const String &)";
      uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13166: Invalid message"
            " dispatched %{public}s";
      goto LABEL_10;
    }
LABEL_11:
    *((unsigned char *)a2 + 98) = 1;
    return;
  }
  WebKit::WebPageProxy::ensureAttachment((WebKit::WebPageProxy *)buf, this, a4);
  WebKit::WebPageProxy::attachmentForIdentifier(this, (WTF::StringImpl **)a3, v11, &v14);
  uint64_t v13 = v14;
  uint64_t v12 = *(void *)buf;
  if (v14)
  {
    WTF::String::operator=((uint64_t *)(*(void *)buf + 48), (WTF::StringImpl **)(v14 + 48));
    WTF::String::operator=((uint64_t *)(v12 + 40), (WTF::StringImpl **)(v13 + 40));
    API::Attachment::cloneFileWrapperTo((API::Attachment *)v13, (API::Attachment *)v12);
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
}

uint64_t WebKit::WebPageProxy::didRemoveAttachment(WebKit::WebPageProxy *this, Attachment *a2)
{
  *((unsigned char *)a2 + 64) = 0;
  if (this) {
    uint64_t v3 = *((void *)this + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 1592))(v3);
  (*(void (**)(uint64_t, Attachment *))(*(void *)v3 + 1696))(v3, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 1600);

  return v4(v3);
}

uint64_t WebKit::WebPageProxy::serializedAttachmentDataForIdentifiers(void *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v6 = a1[34];
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) == 0)
  {
    uint64_t v30 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebPageProxy::serializedAttachmentDataForIdentifiers(const Vector<Str"
                                      "ing> &, CompletionHandler<void (Vector<WebCore::SerializedAttachmentData> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v30, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13195: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v26 = *(void *)(a1[32] + 144);
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x198E8F918);
    }
LABEL_33:
    *(unsigned char *)(v26 + 98) = 1;
    goto LABEL_34;
  }
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  if (v8)
  {
    uint64_t v9 = *(WTF::StringImpl ***)a2;
    uint64_t v10 = 8 * v8;
    uint64_t v11 = 8 * v8;
    uint64_t v12 = v9;
    while ((unint64_t)*v12 + 1 > 1)
    {
      ++v12;
      v11 -= 8;
      if (!v11)
      {
        do
        {
          WebKit::WebPageProxy::attachmentForIdentifier(a1, v9, v7, &v32);
          uint64_t v13 = (CFTypeRef *)v32;
          if (v32)
          {
            API::Attachment::createSerializedRepresentation((atomic_uchar *)v32, &v31);
            if (v31)
            {
              uint64_t v14 = *v9;
              if (*v9) {
                *(_DWORD *)v14 += 2;
              }
              *(void *)&long long buf = v14;
              API::Attachment::mimeType((API::Attachment *)v13, (void *)&buf + 1);
              uint64_t v36 = v31;
              uint64_t v31 = 0;
              if (HIDWORD(v34) == v34)
              {
                WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SerializedAttachmentData>((uint64_t)&v33, (unint64_t)&buf);
              }
              else
              {
                int v16 = HIDWORD(v34) + 1;
                uint64_t v17 = (void *)(v33 + 24 * HIDWORD(v34));
                uint64_t v18 = buf;
                *(void *)&long long buf = 0;
                *uint64_t v17 = v18;
                uint64_t v19 = *((void *)&buf + 1);
                *((void *)&buf + 1) = 0;
                v17[1] = v19;
                uint64_t v20 = v36;
                uint64_t v36 = 0;
                long long v17[2] = v20;
                HIDWORD(v34) = v16;
              }
              uint64_t v21 = v36;
              uint64_t v36 = 0;
              if (v21) {
                WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v21, v15);
              }
              uint64_t v22 = (WTF::StringImpl *)*((void *)&buf + 1);
              *((void *)&buf + 1) = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2) {
                  WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v15);
                }
                else {
                  *(_DWORD *)v22 -= 2;
                }
              }
              uint64_t v23 = (WTF::StringImpl *)buf;
              *(void *)&long long buf = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2) {
                  WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v15);
                }
                else {
                  *(_DWORD *)v23 -= 2;
                }
              }
              uint64_t v24 = v31;
              uint64_t v31 = 0;
              if (v24) {
                WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v24, v15);
              }
            }
            CFRelease(v13[1]);
          }
          ++v9;
          v10 -= 8;
        }
        while (v10);
        goto LABEL_34;
      }
    }
    int v25 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::WebPageProxy::serializedAttachmentDataForIdentifiers(const Vector<Str"
                                      "ing> &, CompletionHandler<void (Vector<WebCore::SerializedAttachmentData> &&)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v25, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13198: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v26 = *(void *)(a1[32] + 144);
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x198E8F938);
    }
    goto LABEL_33;
  }
LABEL_34:
  uint64_t v27 = *(void *)a3;
  *(void *)a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v27 + 16))(v27, &v33);
  (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  return WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v28);
}

void WebKit::WebPageProxy::didInsertAttachmentWithIdentifier(const WTF::String *a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, int a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *((void *)a1 + 34);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v10 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) == 0)
  {
    uint64_t v11 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_6;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didInsertAttachmentWithIdentifier(IPC::Connection &, const String &,"
                         " const String &, WebCore::AttachmentAssociatedElementType)";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13242: Invalid message d"
          "ispatched %{public}s";
    goto LABEL_16;
  }
  if ((unint64_t)(*(void *)a3 + 1) <= 1)
  {
    uint64_t v11 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_6:
      *(unsigned char *)(a2 + 98) = 1;
      return;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didInsertAttachmentWithIdentifier(IPC::Connection &, const String &,"
                         " const String &, WebCore::AttachmentAssociatedElementType)";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13243: Invalid message d"
          "ispatched %{public}s";
LABEL_16:
    _os_log_fault_impl(&dword_1985F2000, v11, OS_LOG_TYPE_FAULT, v18, buf, 0xCu);
    goto LABEL_6;
  }
  WebKit::WebPageProxy::ensureAttachment((WebKit::WebPageProxy *)buf, a1, (WTF::StringImpl **)a3);
  uint64_t v12 = *(void *)buf;
  *(unsigned char *)(*(void *)buf + 65) = a5;
  *(unsigned char *)(v12 + 64) = 1;
  uint64_t v13 = *((void *)a1 + 5);
  if (v13) {
    uint64_t v14 = *(void *)(v13 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v14 + 1592))(v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 1688))(v14, v12, a4);
  (*(void (**)(uint64_t))(*(void *)v14 + 1600))(v14);
  BOOL isEmpty = API::Attachment::isEmpty((atomic_uchar *)v12);
  if (a5 && !isEmpty)
  {
    int v16 = (void *)WTF::fastMalloc((WTF *)0x10);
    *int v16 = &unk_1EE9DB8D0;
    uint64_t v19 = v16;
    WebKit::WebPageProxy::updateAttachmentAttributes((uint64_t)a1, (API::Attachment *)v12, (uint64_t *)&v19);
    uint64_t v17 = (uint64_t)v19;
    uint64_t v19 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  CFRelease(*(CFTypeRef *)(v12 + 8));
}

void WebKit::WebPageProxy::didRemoveAttachmentWithIdentifier(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) == 0)
  {
    uint64_t v8 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_6;
    }
    *(_DWORD *)uint64_t v11 = 136446210;
    *(void *)&_DWORD v11[4] = "void WebKit::WebPageProxy::didRemoveAttachmentWithIdentifier(IPC::Connection &, const String &)";
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13256: Invalid message d"
          "ispatched %{public}s";
    goto LABEL_11;
  }
  if ((unint64_t)(*(void *)a3 + 1) <= 1)
  {
    uint64_t v8 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_6:
      *((unsigned char *)a2 + 98) = 1;
      return;
    }
    *(_DWORD *)uint64_t v11 = 136446210;
    *(void *)&_DWORD v11[4] = "void WebKit::WebPageProxy::didRemoveAttachmentWithIdentifier(IPC::Connection &, const String &)";
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13257: Invalid message d"
          "ispatched %{public}s";
LABEL_11:
    _os_log_fault_impl(&dword_1985F2000, v8, OS_LOG_TYPE_FAULT, v10, v11, 0xCu);
    goto LABEL_6;
  }
  WebKit::WebPageProxy::attachmentForIdentifier(this, (WTF::StringImpl **)a3, v7, v11);
  uint64_t v9 = *(void *)v11;
  if (*(void *)v11)
  {
    WebKit::WebPageProxy::didRemoveAttachment(*((WebKit::WebPageProxy **)this + 5), *(Attachment **)v11);
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

uint64_t WebKit::WebPageProxy::insertTextPlaceholder(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    LOBYTE(v5[0]) = 0;
    char v6 = 0;
    uint64_t v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, int **))(*(void *)v3 + 16))(v3, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else
  {
    v5[0] = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::InsertTextPlaceholder,WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)>>(*(void *)(a1 + 256), v5, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::removeTextPlaceholder(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return v4(v3);
  }
  else
  {
    uint64_t v6 = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoveTextPlaceholder,WTF::CompletionHandler<void ()(void)>>(*(void *)(a1 + 256), &v6, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

void WebKit::WebPageProxy::detectDataInAllFrames(uint64_t a1, char a2, uint64_t *a3)
{
  char v6 = a2;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    CFTypeRef cf = 0;
    uint64_t v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v3 + 16))(v3, &cf);
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    CFTypeRef v4 = cf;
    CFTypeRef cf = 0;
    if (v4) {
      CFRelease(v4);
    }
  }
  else
  {
    CFTypeRef cf = &v6;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(*(void *)(a1 + 256), (char **)&cf, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

void WebKit::WebPageProxy::removeDataDetectedLinks(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    CFTypeRef cf = 0;
    uint64_t v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v2 + 16))(v2, &cf);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    CFTypeRef v3 = cf;
    CFTypeRef cf = 0;
    if (v3) {
      CFRelease(v3);
    }
  }
  else
  {
    char v4 = 0;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoveDataDetectedLinks,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(*(void *)(a1 + 256), (uint64_t)&v4, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

void WebKit::WebPageProxy::setPrivateClickMeasurement(uint64_t a1, char *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  char v28 = *a2;
  long long v8 = *(_OWORD *)(a2 + 8);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  long long v9 = *(_OWORD *)(a2 + 24);
  long long v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(a2 + 33);
  v31[0] = 0;
  char v32 = 0;
  if (a2[184])
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v31, (uint64_t)(a2 + 56));
    char v32 = 1;
  }
  long long v10 = *((_OWORD *)a2 + 13);
  long long v33 = *((_OWORD *)a2 + 12);
  long long v34 = v10;
  LOBYTE(v35) = 0;
  char v36 = 0;
  if (a2[232])
  {
    uint64_t v11 = *((void *)a2 + 28);
    *((void *)a2 + 28) = 0;
    uint64_t v35 = v11;
    char v36 = 1;
  }
  long long v12 = *((_OWORD *)a2 + 15);
  long long v13 = *((_OWORD *)a2 + 16);
  *((_OWORD *)a2 + 15) = 0u;
  *((_OWORD *)a2 + 16) = 0u;
  long long v37 = v12;
  long long v38 = v13;
  LOBYTE(v39) = 0;
  char v41 = 0;
  if (a2[296])
  {
    long long v14 = *((_OWORD *)a2 + 17);
    *((void *)a2 + 34) = 0;
    *((void *)a2 + 35) = 0;
    long long v39 = v14;
    uint64_t v15 = *((void *)a2 + 36);
    *((void *)a2 + 36) = 0;
    uint64_t v40 = v15;
    char v41 = 1;
  }
  uint64_t v16 = *((void *)a2 + 38);
  *((void *)a2 + 38) = 0;
  uint64_t v17 = *a3;
  *a3 = 0;
  uint64_t v42 = v16;
  uint64_t v43 = v17;
  uint64_t v18 = *a4;
  *a4 = 0;
  int v44 = v18;
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = v19 + 1368;
  if (!*(unsigned char *)(v19 + 1696))
  {
    std::construct_at[abi:sn180100]<WebKit::PrivateClickMeasurementAndMetadata,WebKit::PrivateClickMeasurementAndMetadata,WebKit::PrivateClickMeasurementAndMetadata*>(v20, (uint64_t)&v28);
    *(unsigned char *)(v19 + 1696) = 1;
    goto LABEL_17;
  }
  WebCore::PrivateClickMeasurement::operator=(v20, (uint64_t)&v28);
  uint64_t v22 = v43;
  uint64_t v43 = 0;
  uint64_t v23 = *(WTF::StringImpl **)(v19 + 1680);
  *(void *)(v19 + 1680) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v21);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t v24 = v44;
  int v44 = 0;
  int v25 = *(WTF::StringImpl **)(v19 + 1688);
  *(void *)(v19 + 1688) = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v21);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
LABEL_17:
    uint64_t v26 = v44;
    int v44 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v21);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  uint64_t v27 = v43;
  uint64_t v43 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v21);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v28, v21);
}

WTF::StringImpl *WebKit::WebPageProxy::setPrivateClickMeasurement(uint64_t a1, char *a2)
{
  char v4 = 0;
  uint64_t v5 = 0;
  WebKit::WebPageProxy::setPrivateClickMeasurement(a1, a2, &v5, &v4);
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::privateClickMeasurementEventAttribution@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  char v3 = *(unsigned char *)(v2 + 1696);
  if (v3)
  {
    char v4 = *(unsigned char *)(v2 + 1368);
    uint64_t v5 = *(_DWORD **)(v2 + 1384);
    if (v5) {
      *v5 += 2;
    }
    char v6 = *(_DWORD **)(v2 + 1680);
    if (v6) {
      *v6 += 2;
    }
    uint64_t v7 = *(_DWORD **)(v2 + 1688);
    if (v7) {
      *v7 += 2;
    }
    *(unsigned char *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    char v3 = 1;
    *(void *)(a2 + 24) = v7;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 32) = v3;
  return this;
}

_DWORD **WebKit::WebPageProxy::Internals::speechSynthesisData(WebKit::WebPageProxy::Internals *this)
{
  char v1 = (_DWORD **)((char *)this + 2160);
  if (*((unsigned char *)this + 2208)) {
    return v1;
  }
  WebCore::PlatformSpeechSynthesizer::create();
  long long v14 = 0u;
  *(_OWORD *)long long v13 = 0u;
  if (*((unsigned char *)this + 2208))
  {
    char v4 = *v1;
    *char v1 = v12;
    if (v4)
    {
      int v5 = v4[2];
      if (v5 == 1) {
        (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
      }
      else {
        v4[2] = v5 - 1;
      }
    }
    v13[0] = 0;
    char v6 = (WTF *)*((void *)this + 271);
    *((void *)this + 271) = 0;
    if (v6) {
      WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v6, v3);
    }
    v13[1] = 0;
    uint64_t v7 = *((void *)this + 272);
    *((void *)this + 272) = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    *(void *)&long long v14 = 0;
    uint64_t v8 = *((void *)this + 273);
    *((void *)this + 273) = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    *((void *)&v14 + 1) = 0;
    uint64_t v9 = *((void *)this + 274);
    *((void *)this + 274) = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = *((void *)this + 275);
    *((void *)this + 275) = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  else
  {
    *((void *)this + 270) = v12;
    *((void *)this + 271) = 0;
    *((_OWORD *)this + 136) = 0uLL;
    *((_OWORD *)this + 137) = 0uLL;
    *((unsigned char *)this + 2208) = 1;
  }
  if (*((void *)&v14 + 1)) {
    (*(void (**)(void))(**((void **)&v14 + 1) + 8))(*((void *)&v14 + 1));
  }
  if ((void)v14) {
    (*(void (**)(void))(*(void *)v14 + 8))(v14);
  }
  if (v13[1]) {
    (*(void (**)(WTF *))(*(void *)v13[1] + 8))(v13[1]);
  }
  if (v13[0]) {
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v13[0], v3);
  }
  uint64_t result = 0;
  if (*((unsigned char *)this + 2208)) {
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::WebPageProxy::speechSynthesisVoiceList(uint64_t a1, uint64_t *a2)
{
  char v3 = (WebCore::PlatformSpeechSynthesizer **)WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  uint64_t result = WebCore::PlatformSpeechSynthesizer::voiceList(*v3);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v5 = *(unsigned int *)(result + 12);
  if (!v5)
  {
LABEL_13:
    uint64_t v15 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 16))(v15, &v17);
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    return WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v16);
  }
  if (!(v5 >> 27))
  {
    uint64_t v6 = result;
    uint64_t v7 = WTF::fastMalloc((WTF *)(32 * v5));
    LODWORD(v18) = v5;
    uint64_t v17 = v7;
    if (*(_DWORD *)(v6 + 12))
    {
      unint64_t v8 = 0;
      uint64_t v9 = v7 + 16;
      do
      {
        uint64_t v10 = *(void *)(*(void *)v6 + 8 * v8);
        uint64_t v11 = *(_DWORD **)(v10 + 8);
        if (v11) {
          *v11 += 2;
        }
        long long v12 = *(_DWORD **)(v10 + 16);
        if (v12) {
          *v12 += 2;
        }
        long long v13 = *(_DWORD **)(v10 + 24);
        if (v13) {
          *v13 += 2;
        }
        __int16 v14 = *(_WORD *)(v10 + 32);
        *(void *)(v9 - 16) = v11;
        *(void *)(v9 - 8) = v12;
        *(void *)uint64_t v9 = v13;
        *(_WORD *)(v9 + 8) = v14;
        ++v8;
        v9 += 32;
      }
      while (v8 < *(unsigned int *)(v6 + 12));
      HIDWORD(v18) = v8;
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebPageProxy::speechSynthesisSetFinishedCallback(uint64_t a1, void *a2)
{
  char v3 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  char v4 = (_DWORD *)*a2;
  *a2 = 0;
  uint64_t result = (uint64_t)v3[3];
  v3[3] = v4;
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v6();
  }
  return result;
}

WTF::StringImpl **WebKit::WebPageProxy::speechSynthesisSpeak(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, WebCore::PlatformSpeechSynthesisVoice *this, WTF::String *a5, WTF::String *a6, WTF::String *a7, BOOL a8, float a9, float a10, float a11, void *a12)
{
  WebCore::PlatformSpeechSynthesisVoice::create(this, a5, a6, a7);
  WebCore::PlatformSpeechSynthesisUtterance::create();
  WTF::String::operator=((uint64_t *)v38 + 2, a2);
  WTF::String::operator=((uint64_t *)v38 + 3, a3);
  uint64_t v17 = v38;
  float32x2_t v18 = vminnm_f32((float32x2_t)__PAIR64__(LODWORD(a10), LODWORD(a9)), (float32x2_t)0x412000003F800000);
  *((int8x8_t *)v38 + 5) = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)0x3DCCCCCD00000000, v18), (int8x8_t)0x3DCCCCCD00000000, (int8x8_t)v18);
  float v19 = fminf(a11, 2.0);
  if (v19 < 0.0) {
    float v19 = 0.0;
  }
  *((float *)v17 + 12) = v19;
  uint64_t v20 = v39;
  if (v39) {
    ++*(_DWORD *)v39;
  }
  uint64_t v21 = (WTF::StringImpl **)*((void *)v17 + 4);
  *((void *)v17 + 4) = v20;
  if (v21) {
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v21, v16);
  }
  uint64_t v22 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  uint64_t v23 = (_DWORD *)*a12;
  *a12 = 0;
  uint64_t v24 = v22[2];
  void v22[2] = v23;
  if (v24) {
    (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
  }
  uint64_t v26 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  uint64_t v27 = v38;
  long long v38 = 0;
  char v28 = (WTF *)v26[1];
  v26[1] = v27;
  if (v28) {
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v28, v25);
  }
  long long v29 = *WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  uint64_t v30 = (WTF *)WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32))[1];
  if (v30) {
    ++*(_DWORD *)v30;
  }
  long long v37 = v30;
  (*(void (**)(_DWORD *, WTF **))(*(void *)v29 + 16))(v29, &v37);
  char v32 = v37;
  long long v37 = 0;
  if (v32) {
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v32, v31);
  }
  long long v33 = v38;
  long long v38 = 0;
  if (v33) {
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v33, v31);
  }
  uint64_t result = (WTF::StringImpl **)v39;
  long long v39 = 0;
  if (result) {
    return WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(result, v31);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::speechSynthesisPause(uint64_t a1, void *a2)
{
  char v4 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  uint64_t v5 = (_DWORD *)*a2;
  *a2 = 0;
  uint64_t v6 = v4[4];
  v4[4] = v5;
  if (v6) {
    (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)*WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32))
                           + 24);

  return v7();
}

uint64_t WebKit::WebPageProxy::speechSynthesisResume(uint64_t a1, void *a2)
{
  char v4 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  uint64_t v5 = (_DWORD *)*a2;
  *a2 = 0;
  uint64_t v6 = v4[5];
  v4[5] = v5;
  if (v6) {
    (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)*WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32))
                           + 32);

  return v7();
}

uint64_t WebKit::WebPageProxy::setCanShowPlaceholder(uint64_t this, const WebCore::ElementContext *a2, char a3)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      char v3 = a2;
      char v4 = a3;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCanShowPlaceholder>(*(void *)(this + 256), (uint64_t)&v3, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

unsigned char *WebKit::WebPageProxy::configureLoggingChannel(int a1, WebKit *this, char a3, char a4)
{
  uint64_t result = (unsigned char *)WebKit::getLogChannel(this, this);
  if (result)
  {
    *uint64_t result = a3;
    result[16] = a4;
  }
  return result;
}

void WebKit::WebPageProxy::setMockWebAuthenticationConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 312);
  CFRetain(*(CFTypeRef *)(v3 + 8));
  WebKit::WebsiteDataStore::setMockWebAuthenticationConfiguration(v3, a2);
  char v4 = *(const void **)(v3 + 8);

  CFRelease(v4);
}

uint64_t WebKit::WebPageProxy::startTextManipulations(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, uint64_t *a5)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v6 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
  else
  {
    uint64_t v12 = *a4;
    *a4 = 0;
    uint64_t v13 = *(void *)(a1 + 1216);
    *(void *)(a1 + 1216) = v12;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t v14 = a2;
    char v15 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::StartTextManipulations,WTF::CompletionHandler<void ()(void)>>(*(void *)(a1 + 256), (uint64_t)&v14, a5, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::didFindTextManipulationItems(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 1216);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

WTF *WebKit::WebPageProxy::completeTextManipulation(uint64_t a1, WTF *a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF **))(*(void *)*a3 + 16))(*a3, 1, &v5);
    uint64_t result = v5;
    if (v5)
    {
      uint64_t v5 = 0;
      LODWORD(v6) = 0;
      return (WTF *)WTF::fastFree(result, v3);
    }
  }
  else
  {
    uint64_t v5 = a2;
    return (WTF *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(*(void *)(a1 + 256), (uint64_t *)&v5, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setOverriddenMediaType(WebKit::WebPageProxy *this, WTF::StringImpl **a2)
{
  WTF::String::operator=((uint64_t *)this + 159, a2);
  uint64_t v5 = a2;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetOverriddenMediaType>(*((void *)this + 32), (uint64_t **)&v5, *(void *)(*((void *)this + 4) + 1928), 0);
}

unsigned int *WebKit::WebPageProxy::loadServiceWorker(uint64_t a1, WTF::URL *a2, int a3, uint64_t *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 801))
  {
    uint64_t v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return (unsigned int *)v6(v5);
  }
  uint64_t v11 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(v12 + 760);
    uint64_t v14 = *(void *)(v12 + 1928);
    uint64_t v15 = *(void *)(*(void *)(a1 + 256) + 136);
    if (v15) {
      LODWORD(v15) = *(_DWORD *)(v15 + 108);
    }
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v13;
    __int16 v41 = 2048;
    uint64_t v42 = v14;
    __int16 v43 = 1024;
    int v44 = v15;
    _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadServiceWorker:", buf, 0x26u);
  }
  uint64_t v16 = *(void *)(a1 + 32);
  if (*(void *)(v16 + 2152))
  {
    uint64_t v17 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v17 + 16))(v17, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  *(unsigned char *)(a1 + 1190) = 1;
  uint64_t v18 = *a4;
  *a4 = 0;
  uint64_t v19 = *(void *)(v16 + 2152);
  *(void *)(v16 + 2152) = v18;
  if (!v19)
  {
    if (a3) {
      goto LABEL_13;
    }
LABEL_19:
    uint64_t v24 = *(WTF::StringImpl **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v24 += 2;
    }
    long long v37 = v24;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"<script>navigator.serviceWorker.register('", 43, (uint64_t *)&v37, (uint64_t)"');</script>",
      13,
      &v39);
    WTF::String::utf8();
    int v25 = v39;
    uint64_t v23 = *(WTF **)buf;
    long long v39 = 0;
    *(void *)long long buf = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v21);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    uint64_t v26 = v37;
    long long v37 = 0;
    if (!v26) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }
  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  if (!a3) {
    goto LABEL_19;
  }
LABEL_13:
  uint64_t v20 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v20 += 2;
  }
  long long v38 = v20;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"<script>navigator.serviceWorker.register('", 43, (uint64_t *)&v38, (uint64_t)"', { type: 'module' });</script>",
    33,
    &v39);
  WTF::String::utf8();
  uint64_t v22 = v39;
  uint64_t v23 = *(WTF **)buf;
  long long v39 = 0;
  *(void *)long long buf = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v21);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  uint64_t v26 = v38;
  long long v38 = 0;
  if (!v26) {
    goto LABEL_31;
  }
LABEL_29:
  if (*(_DWORD *)v26 == 2)
  {
    WTF::StringImpl::destroy(v26, v21);
    if (v23) {
      goto LABEL_32;
    }
LABEL_51:
    uint64_t v28 = 0;
    uint64_t v27 = 0;
    goto LABEL_33;
  }
  *(_DWORD *)v26 -= 2;
LABEL_31:
  if (!v23) {
    goto LABEL_51;
  }
LABEL_32:
  uint64_t v27 = (void *)((char *)v23 + 16);
  uint64_t v28 = *((void *)v23 + 1);
LABEL_33:
  *(void *)long long buf = v27;
  *(void *)&buf[8] = v28;
  WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v39);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::URL::protocolHostAndPort((uint64_t *)&v33, a2);
  WebKit::WebPageProxy::loadData(a1, &v39, &v35, &v34, &v33, 0, 0, &v36);
  if (v36) {
    CFRelease(*(CFTypeRef *)(v36 + 8));
  }
  uint64_t v30 = v33;
  long long v33 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v29);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  uint64_t v31 = v34;
  long long v34 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v29);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  char v32 = v35;
  uint64_t v35 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v29);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  uint64_t result = (unsigned int *)v39;
  long long v39 = 0;
  if (result)
  {
    uint64_t result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v29);
    if (!v23) {
      return result;
    }
  }
  else if (!v23)
  {
    return result;
  }
  if (*(_DWORD *)v23 == 1) {
    return (unsigned int *)WTF::fastFree(v23, v29);
  }
  --*(_DWORD *)v23;
  return result;
}

uint64_t WebKit::WebPageProxy::gpuProcessExited(uint64_t a1)
{
  *(_DWORD *)(a1 + 1228) = 0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 1592))(v3);
  (*(void (**)(uint64_t))(*(void *)v3 + 600))(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 1600))(v3);
  int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 824);
  if ((v6 & 0x700A800) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 272);
    {
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v5);
    unint64_t v8 = (void *)result;
    int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 824);
  }
  else
  {
    unint64_t v8 = 0;
  }
  if ((v6 & 0x6D5000) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 272);
    {
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v9 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v5);
    int v10 = result;
  }
  else
  {
    int v10 = 0;
  }
  if ((v8 | v10) == 1)
  {
    uint64_t v11 = (WebKit::WebProcessPool *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(a1 + 48) + 24));
    uint64_t v12 = (unsigned char *)WebKit::WebProcessPool::ensureGPUProcess(v11);
    uint64_t v13 = *(void *)(*(void *)(a1 + 256) + 176);
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v14 = &unk_1EE9DBAB0;
    uint64_t v16 = v14;
    WebKit::GPUProcessProxy::updateCaptureAccess(v12, v8, v10, 0, v13, (uint64_t *)&v16);
    uint64_t v15 = (uint64_t)v16;
    uint64_t v16 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    return WebKit::GPUProcessProxy::setOrientationForMediaCapture((uint64_t)v12, *(_DWORD *)(a1 + 1072));
  }
  return result;
}

void WebKit::WebPageProxy::requestSpeechRecognitionPermission(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 1256);
  if (!v6)
  {
    uint64_t v7 = WTF::fastMalloc((WTF *)0x40);
    *(void *)uint64_t v7 = 0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
    unint64_t v8 = *(atomic_uint **)(a1 + 24);
    atomic_fetch_add(v8, 1u);
    *(void *)(v7 + 8) = v8;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(void *)(v7 + 48) = 0x200000002;
    *(_DWORD *)(v7 + 56) = 2;
    std::unique_ptr<WebKit::SpeechRecognitionPermissionManager>::reset[abi:sn180100]((WebKit::SpeechRecognitionPermissionManager **)(a1 + 1256), (WTF::StringImpl *)v7);
    uint64_t v6 = *(void *)(a1 + 1256);
  }

  WebKit::SpeechRecognitionPermissionManager::request(v6, a2, a3);
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::WebPageProxy::requestUserMediaPermissionForSpeechRecognition(WebCore::SpeechRecognitionCaptureSource *a1, uint64_t a2, uint64_t a3, WebCore::SecurityOrigin *a4, uint64_t a5, uint64_t *a6)
{
  WebCore::SpeechRecognitionCaptureSource::findCaptureDevice(v15, a1);
  if (!v16)
  {
    uint64_t v14 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v14 + 16))(v14, 0);
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    return (WebKit::UserMediaPermissionRequestManagerProxy *)std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v13);
  }
  uint64_t result = WebKit::WebPageProxy::userMediaPermissionRequestManager(a1);
  if (v16)
  {
    WebKit::UserMediaPermissionRequestManagerProxy::checkUserMediaPermissionForSpeechRecognition((uint64_t)result, a2, a3, a4, a5, (uint64_t)v15, a6);
    return (WebKit::UserMediaPermissionRequestManagerProxy *)std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v13);
  }
  __break(1u);
  return result;
}

uint64_t WebKit::WebPageProxy::createRealtimeMediaSourceForSpeechRecognition@<X0>(WebKit::WebProcessProxy **this@<X0>, uint64_t a2@<X8>)
{
  WebCore::SpeechRecognitionCaptureSource::findCaptureDevice(v12, (WebCore::SpeechRecognitionCaptureSource *)this);
  if (v13)
  {
    unint64_t v5 = (unint64_t)this[34];
    uint64_t v6 = &WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key;
      goto LABEL_8;
    while (1)
    {
      WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v4);
      uint64_t v7 = WebKit::WebProcessProxy::ensureSpeechRecognitionRemoteRealtimeMediaSourceManager(this[32]);
      unint64_t v5 = v13;
      if (v13) {
        break;
      }
      __break(1u);
LABEL_8:
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
      *((unsigned char *)v6 + 4056) = 1;
    }
    uint64_t v8 = WTF::fastMalloc((WTF *)0x2D8);
    uint64_t v9 = WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    WebKit::SpeechRecognitionRemoteRealtimeMediaSource::SpeechRecognitionRemoteRealtimeMediaSource(v8, v9, v7, (uint64_t)v12);
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 16) = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(void *)a2 = 0;
    *(_WORD *)(a2 + 16) = 6;
  }
  return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v10);
}

void WebKit::WebPageProxy::modelElementGetCamera(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  char v4 = *(unsigned int **)(a1 + 464);
  if (v4) {
    WebKit::ModelElementController::getCameraForModelElement(v4, a2, a3, a4);
  }
}

uint64_t WebKit::WebPageProxy::modelElementSetCamera(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4, float64_t a5, float64_t a6)
{
  uint64_t result = *(void *)(a1 + 464);
  if (result) {
    return WebKit::ModelElementController::setCameraForModelElement(result, a2, a3, a4, a5, a6);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::modelElementIsPlayingAnimation(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t result = *(WTF::StringImpl **)(a1 + 464);
  if (result) {
    return WebKit::ModelElementController::isPlayingAnimationForModelElement((uint64_t)result, a2, a3, a4);
  }
  return result;
}

void WebKit::WebPageProxy::modelElementSetAnimationIsPlaying(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v5 = *(unsigned int **)(a1 + 464);
  if (v5) {
    WebKit::ModelElementController::setAnimationIsPlayingForModelElement(v5, a2, a3, a4, a5);
  }
}

WTF::StringImpl *WebKit::WebPageProxy::modelElementIsLoopingAnimation(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t result = *(WTF::StringImpl **)(a1 + 464);
  if (result) {
    return WebKit::ModelElementController::isLoopingAnimationForModelElement((uint64_t)result, a2, a3, a4);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::modelElementSetIsLoopingAnimation(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result = *(void *)(a1 + 464);
  if (result) {
    return WebKit::ModelElementController::setIsLoopingAnimationForModelElement(result, a2, a3, a4, a5);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::modelElementAnimationDuration(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t result = *(WTF::StringImpl **)(a1 + 464);
  if (result) {
    return WebKit::ModelElementController::animationDurationForModelElement((uint64_t)result, a2, a3, a4);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::modelElementAnimationCurrentTime(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t result = *(WTF::StringImpl **)(a1 + 464);
  if (result) {
    return WebKit::ModelElementController::animationCurrentTimeForModelElement((uint64_t)result, a2, a3, a4);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::modelElementSetAnimationCurrentTime(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4, double a5)
{
  uint64_t result = *(void *)(a1 + 464);
  if (result) {
    return WebKit::ModelElementController::setAnimationCurrentTimeForModelElement(result, a2, a3, a4, a5);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::modelElementHasAudio(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t result = *(WTF::StringImpl **)(a1 + 464);
  if (result) {
    return WebKit::ModelElementController::hasAudioForModelElement((uint64_t)result, a2, a3, a4);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::modelElementIsMuted(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t result = *(WTF::StringImpl **)(a1 + 464);
  if (result) {
    return WebKit::ModelElementController::isMutedForModelElement((uint64_t)result, a2, a3, a4);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::modelElementSetIsMuted(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result = *(void *)(a1 + 464);
  if (result) {
    return WebKit::ModelElementController::setIsMutedForModelElement(result, a2, a3, a4, a5);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::takeModelElementFullscreen(WTF::StringImpl *result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *((void *)result + 58);
  if (v3)
  {
    WebKit::WebPageProxy::currentURL(result, (uint64_t *)&v8);
    MEMORY[0x19972E890](v9, &v8, 0);
    WebKit::ModelElementController::takeModelElementFullscreen(v3, a2, a3, (WTF::URL *)v9);
    uint64_t v7 = v9[0];
    v9[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WebKit::WebPageProxy::modelElementSetInteractionEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4)
{
  uint64_t result = *(void **)(a1 + 464);
  if (result)
  {
    uint64_t result = (void *)WebKit::ModelElementController::modelViewForModelIdentifier((uint64_t)result, a2, a3);
    if (result)
    {
      return (void *)[result setUserInteractionEnabled:a4];
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::requestScrollToRect(WebKit::WebPageProxy *this, const FloatRect *a2, const FloatPoint *a3)
{
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  (*(void (**)(uint64_t, const FloatRect *, const FloatPoint *))(*(void *)v6 + 1744))(v6, a2, a3);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 1600);

  return v7(v6);
}

unsigned int *WebKit::WebPageProxy::appPrivacyReportTestingData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 312));
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v7 = *(void *)(*(void *)(a1 + 312) + 24);
  uint64_t v8 = &v7;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::AppPrivacyReportTestingData,WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)>>(v4, &v8, a2, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::AppPrivacyReportTestingData,WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 369;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  int v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DBAD8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  int v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

unsigned int *WebKit::WebPageProxy::clearAppPrivacyReportTestingData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 312));
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v7 = *(void *)(*(void *)(a1 + 312) + 24);
  uint64_t v8 = &v7;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearAppPrivacyReportTestingData,WTF::CompletionHandler<void ()(void)>>(v4, &v8, a2, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearAppPrivacyReportTestingData,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 375;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  int v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DBB00;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  int v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebPageProxy::requestCookieConsent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 344))();
}

unsigned int *WebKit::WebPageProxy::beginTextRecognitionForVideoInElementFullScreen(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 1592))(v13);
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 1184))(v13);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 1600))(v13);
  if (v14)
  {
    {
      if (WebKit::singleton(void)::singleton)
      {
        uint64_t v16 = *(void *)(WebKit::singleton(void)::singleton + 8);
        if (v16)
        {
          atomic_fetch_add((atomic_uint *volatile)(v16 + 16), 1u);
          *(unsigned char *)(a1 + 1392) = 1;
          uint64_t v17 = *(void *)(*(void *)(a1 + 256) + 176);
          WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
          uint64_t v18 = *(atomic_uint **)(a1 + 24);
          if (v18) {
            atomic_fetch_add(v18, 1u);
          }
          uint64_t v19 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v19 = &unk_1EE9DBB28;
          *(void *)(v19 + 8) = v18;
          *(float *)(v19 + 16) = a3;
          *(float *)(v19 + 20) = a4;
          *(float *)(v19 + 24) = a5;
          *(float *)(v19 + 28) = a6;
          uint64_t v23 = a2;
          uint64_t v24 = v17;
          uint64_t v21 = v19;
          v22[0] = &v24;
          v22[1] = &v23;
          WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::RequestBitmapImageForCurrentTime,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(v16, v22, &v21, 0, 0, 1);
          uint64_t v20 = v21;
          uint64_t v21 = 0;
          if (v20) {
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v16 + 16));
        }
      }
    }
    else
    {
      WebKit::singleton(void)::singleton = 0;
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::cancelTextRecognitionForVideoInElementFullScreen(WebKit::WebPageProxy *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 1592))(v3);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 1184))(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 1600))(v3);
  if (v4)
  {
    *((unsigned char *)this + 1392) = 0;
    uint64_t v6 = *((void *)this + 5);
    if (v6) {
      uint64_t v7 = *(void *)(v6 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
    (*(void (**)(uint64_t))(*(void *)v7 + 1200))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 1600);
    return v8(v7);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::shouldAvoidSynchronouslyWaitingToPreventDeadlock(WebKit::WebPageProxy *this)
{
  if (*((unsigned char *)this + 1361)) {
    return 1;
  }
  uint64_t result = WebKit::WebPageProxy::useGPUProcessForDOMRenderingEnabled(this);
  if (result)
  {
    {
      if (WebKit::singleton(void)::singleton)
      {
        uint64_t v2 = *(void *)(WebKit::singleton(void)::singleton + 8);
        if (v2)
        {
          atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
          uint64_t v3 = *(void *)(v2 + 144);
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
          if (v3) {
            return 0;
          }
        }
      }
    }
    else
    {
      WebKit::singleton(void)::singleton = 0;
    }
    return 1;
  }
  return result;
}

uint64_t WebKit::WebPageProxy::pauseAllAnimations(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
    return v3(v2);
  }
  else
  {
    char v5 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PauseAllAnimations,WTF::CompletionHandler<void ()(void)>>(*(void *)(a1 + 256), (uint64_t)&v5, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::playAllAnimations(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
    return v3(v2);
  }
  else
  {
    char v5 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PlayAllAnimations,WTF::CompletionHandler<void ()(void)>>(*(void *)(a1 + 256), (uint64_t)&v5, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

void WebKit::WebPageProxy::didCreateSleepDisabler(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*a4)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 1928);
    int v10 = (WebCore::SleepDisabler *)WTF::fastMalloc((WTF *)0x28);
    MEMORY[0x199731700](v10, a4, a5, v9, 1);
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 32) + 2000);
    uint64_t v12 = *v11;
    if (*v11
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(*(void *)(a1 + 32) + 2000), 0), (uint64_t v12 = *v11) != 0))
    {
      int v13 = *(_DWORD *)(v12 - 8);
    }
    else
    {
      int v13 = 0;
    }
    unint64_t v14 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
    uint64_t v18 = (void *)(v12 + 16 * v17);
    uint64_t v19 = *v18;
    if (*v18)
    {
      uint64_t v20 = 0;
      int v21 = 1;
      while (v19 != a3)
      {
        if (v19 == -1) {
          uint64_t v20 = v18;
        }
        unsigned int v17 = (v17 + v21) & v13;
        uint64_t v18 = (void *)(v12 + 16 * v17);
        uint64_t v19 = *v18;
        ++v21;
        if (!*v18)
        {
          if (v20)
          {
            *uint64_t v20 = 0;
            v20[1] = 0;
            --*(_DWORD *)(*v11 - 16);
            uint64_t v18 = v20;
          }
          goto LABEL_13;
        }
      }
      WebCore::SleepDisabler::~SleepDisabler(v10);
      WTF::fastFree(v10, v24);
    }
    else
    {
LABEL_13:
      *uint64_t v18 = a3;
      std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100]((WebCore::SleepDisabler **)v18 + 1, v10);
      uint64_t v22 = *v11;
      if (*v11) {
        int v23 = *(_DWORD *)(v22 - 12) + 1;
      }
      else {
        int v23 = 1;
      }
      *(_DWORD *)(v22 - 12) = v23;
      uint64_t v25 = *v11;
      if (*v11) {
        int v26 = *(_DWORD *)(v25 - 12);
      }
      else {
        int v26 = 0;
      }
      uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
      unint64_t v28 = *(unsigned int *)(v25 - 4);
      if (v28 > 0x400)
      {
        if (v28 > 2 * v27) {
          return;
        }
      }
      else if (3 * v28 > 4 * v27)
      {
        return;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v11, v18);
    }
  }
  else
  {
    uint64_t v30 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v31 = 136446210;
      char v32 = "void WebKit::WebPageProxy::didCreateSleepDisabler(IPC::Connection &, SleepDisablerIdentifier, const String &, BOOL)";
      _os_log_fault_impl(&dword_1985F2000, v30, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 14396: Invalid message dispatched %{public}s", (uint8_t *)&v31, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
  }
}

WebCore::SleepDisabler *WebKit::WebPageProxy::didDestroySleepDisabler(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t result = (WebCore::SleepDisabler *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(v2 + 2000), &v6);
  uint64_t v4 = *(void *)(v2 + 2000);
  if (v4)
  {
    char v5 = (WebCore::SleepDisabler *)(v4 + 16 * *(unsigned int *)(v4 - 4));
    if (v5 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    char v5 = 0;
  }
  if (v5 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove((uint64_t *)(v2 + 2000), (uint64_t)result);
  }
  return result;
}

void WebKit::WebPageProxy::beginSystemPreview(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *(void *)(a1 + 456);
  if (v5)
  {
    WebKit::SystemPreviewController::begin(v5, a2, a3, a4, a5);
  }
  else
  {
    uint64_t v6 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(void (**)(uint64_t))(*(void *)v6 + 8);
    v7(v6);
  }
}

void WebKit::WebPageProxy::didAccessWindowProxyPropertyViaOpenerForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const WebCore::SecurityOriginData *a5, uint64_t a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(a1 + 32) + 2592))
  {
    uint64_t v10 = WebKit::WebFrameProxy::webFrame(a3, a4);
    if (v10)
    {
      uint64_t v32 = v10;
      CFRetain(*(CFTypeRef *)(v10 + 8));
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, a5);
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 2592) + 40);
      if (v12)
      {
        char v33 = 1;
        while (1)
        {
          uint64_t v13 = *(void *)(a1 + 32);
          unint64_t v14 = (uint64_t *)(v13 + 2600);
          uint64_t v15 = *(void *)(v13 + 2600);
          if (v15
            || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::OptionSet<WebCore::WindowProxyProperty>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(v13 + 2600), 0), (uint64_t v15 = *v14) != 0))
          {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else
          {
            int v16 = 0;
          }
          unsigned int v17 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)v12, v11) & v16;
          uint64_t v18 = v15 + 16 * v17;
          if ((WTF::equal(*(WTF **)v18, 0, v19) & 1) == 0)
          {
            uint64_t v21 = 0;
            int v22 = 1;
            do
            {
              if (*(void *)v18 == -1)
              {
                uint64_t v21 = v18;
              }
              else if (WTF::equalIgnoringASCIICase(*(WTF **)v18, *(const WTF::StringImpl **)v12, v20))
              {
                goto LABEL_26;
              }
              unsigned int v17 = (v17 + v22) & v16;
              uint64_t v18 = v15 + 16 * v17;
              ++v22;
            }
            while (!WTF::equal(*(WTF **)v18, 0, v20));
            if (v21)
            {
              *(void *)uint64_t v21 = 0;
              *(unsigned char *)(v21 + 8) = 0;
              --*(_DWORD *)(*v14 - 16);
              uint64_t v18 = v21;
            }
          }
          WTF::String::operator=((uint64_t *)v18, (WTF::StringImpl **)v12);
          *(unsigned char *)(v18 + 8) = 0;
          uint64_t v23 = *v14;
          int v24 = *v14 ? *(_DWORD *)(v23 - 12) + 1 : 1;
          *(_DWORD *)(v23 - 12) = v24;
          uint64_t v25 = *v14;
          int v26 = *v14 ? *(_DWORD *)(v25 - 12) : 0;
          uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
          unint64_t v28 = *(unsigned int *)(v25 - 4);
          if (v28 > 0x400) {
            break;
          }
          if (3 * v28 <= 4 * v27) {
            goto LABEL_25;
          }
LABEL_26:
          int v29 = *(unsigned __int8 *)(v18 + 8);
          if ((v29 & a6) == 0)
          {
            *(unsigned char *)(v18 + 8) = v29 | a6;
            (*(void (**)(void, uint8_t *, uint64_t, uint64_t, void))(**(void **)(*(void *)(a1 + 312)
                                                                                              + 384)
                                                                                + 112))(*(void *)(*(void *)(a1 + 312) + 384), buf, v12, a6, v33 & 1);
            char v33 = 0;
          }
          uint64_t v12 = *(void *)(v12 + 16);
          if (!v12) {
            goto LABEL_33;
          }
        }
        if (v28 > 2 * v27) {
          goto LABEL_26;
        }
LABEL_25:
        uint64_t v18 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::OptionSet<WebCore::WindowProxyProperty>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v14, (WTF::ASCIICaseInsensitiveHash **)v18);
        goto LABEL_26;
      }
LABEL_33:
      uint64_t v30 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v11);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
      CFRelease(*(CFTypeRef *)(v32 + 8));
    }
    else
    {
      int v31 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "void WebKit::WebPageProxy::didAccessWindowProxyPropertyViaOpenerForFrame(IPC::Connection &,"
                             " FrameIdentifier, const SecurityOriginData &, WindowProxyProperty)";
        _os_log_fault_impl(&dword_1985F2000, v31, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 14440: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      *(unsigned char *)(a2 + 98) = 1;
    }
  }
}

void WebKit::WebPageProxy::dispatchLoadEventToFrameOwnerElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[0] = a2;
  v9[1] = a3;
  uint64_t v4 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v4)
  {
    uint64_t v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    uint64_t v6 = *(void *)(v5 + 312);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7)
      {
        CFRetain(*(CFTypeRef *)(v7 + 8));
        uint64_t v8 = v9;
        long long v12 = *(_OWORD *)(v7 + 272);
        char v13 = 1;
        uint64_t v10 = &v8;
        char v11 = 0;
        WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::DispatchLoadEventToFrameOwnerElement>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::DispatchLoadEventToFrameOwnerElement &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::DispatchLoadEventToFrameOwnerElement&)#1}>(a1, (uint64_t)&v12, (uint64_t)&v10);
        CFRelease(*(CFTypeRef *)(v7 + 8));
      }
    }
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebPageProxy::focusRemoteFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t v6 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v6)
  {
    uint64_t v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    if (*(unsigned char *)(v7 + 441))
    {
      WebKit::WebPageProxy::broadcastFocusedFrameToOtherProcesses((void *)a1, a2, v8);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 104) + 80))(*(void *)(a1 + 104), a1);
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::WebPageProxy::postMessageToRemote(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v14[0] = a2;
  v14[1] = a3;
  v13[0] = a5;
  v13[1] = a6;
  v12[0] = v14;
  v12[1] = a4;
  void v12[2] = v13;
  uint64_t v12[3] = a7;
  _DWORD v12[4] = a8;
  uint64_t v9 = WebKit::WebFrameProxy::webFrame(a5, a6);
  if (v9)
  {
    uint64_t v10 = v9;
    CFRetain(*(CFTypeRef *)(v9 + 8));
    uint64_t v11 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v10 + 32) + 16));
    if (v11)
    {
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RemotePostMessage>(*(void *)(v11 + 24), (uint64_t)v12, *(void *)(v11 + 16), 0);
      CFRelease(*(CFTypeRef *)(v10 + 8));
      return;
    }
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RemotePostMessage>(*(void *)(a1 + 256), (uint64_t)v12, *(void *)(*(void *)(a1 + 32) + 1928), 0);
}

WTF::StringImpl *WebKit::WebPageProxy::renderTreeAsTextForTesting(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl *a4, __int16 a5, uint64_t *a6)
{
  v28[0] = a2;
  v28[1] = a3;
  __int16 v27 = a5;
  v23[0] = (WTF::StringImpl *)v28;
  v23[1] = a4;
  void v23[2] = (WTF::StringImpl *)&v27;
  WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
  double v11 = v10 + 1.0;
  uint64_t v12 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v12)
  {
    uint64_t v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    uint64_t v14 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v13 + 32) + 16));
    if (v14)
    {
      WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::RenderTreeAsTextForTesting>((IPC::Decoder *)v24, *(void *)(v14 + 24), (uint64_t)v23, *(void *)(v14 + 16), v11);
      CFRelease(*(CFTypeRef *)(v13 + 8));
      goto LABEL_6;
    }
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::RenderTreeAsTextForTesting>((IPC::Decoder *)v24, *(void *)(a1 + 256), (uint64_t)v23, *(void *)(*(void *)(a1 + 32) + 1928), v11);
LABEL_6:
  uint64_t v15 = v26;
  if (!v26)
  {
    uint64_t v19 = v25;
    uint64_t v25 = 0;
    v23[0] = v19;
    uint64_t v20 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v20 + 16))(v20, v23);
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    int v22 = v23[0];
    v23[0] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v21);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1EE9D9DB0[v15])(v23, v24);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v16 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v16 + 16))(v16, v23);
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  uint64_t result = v23[0];
  v23[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v15 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1EE9D9DB0[v15])(v23, v24);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::frameTextForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v25[0] = a2;
  v25[1] = a3;
  uint64_t v21 = (WTF::StringImpl *)v25;
  WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
  double v9 = v8 + 1.0;
  uint64_t v10 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v10)
  {
    uint64_t v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    uint64_t v12 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v11 + 32) + 16));
    if (v12)
    {
      WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::FrameTextForTesting>((uint64_t)v22, *(void *)(v12 + 24), (uint64_t **)&v21, *(void *)(v12 + 16), v9);
      CFRelease(*(CFTypeRef *)(v11 + 8));
      goto LABEL_6;
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::FrameTextForTesting>((uint64_t)v22, *(void *)(a1 + 256), (uint64_t **)&v21, *(void *)(*(void *)(a1 + 32) + 1928), v9);
LABEL_6:
  uint64_t v13 = v24;
  if (!v24)
  {
    unsigned int v17 = v23;
    uint64_t v23 = 0;
    uint64_t v21 = v17;
    uint64_t v18 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v18 + 16))(v18, &v21);
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    uint64_t v20 = v21;
    uint64_t v21 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v19);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1EE9D9DC0[v13])(&v21, v22);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v14 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v14 + 16))(v14, &v21);
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  uint64_t result = v21;
  uint64_t v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v13 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1EE9D9DC0[v13])(&v21, v22);
  }
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::requestTargetedElement(WebKit::WebPageProxy *a1, API::TargetedElementRequest *this, uint64_t *a3)
{
  if (*((unsigned char *)a1 + 801) || !*((unsigned char *)a1 + 800))
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v19);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    return (IPC::Encoder *)WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v5);
  }
  else
  {
    API::TargetedElementRequest::makeRequest(this, a1, (uint64_t)v19);
    uint64_t v8 = *a3;
    *a3 = 0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1 + 6, (uint64_t)a1 + 16);
    double v9 = (atomic_uint *)*((void *)a1 + 3);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
    uint64_t v10 = *((void *)a1 + 32);
    uint64_t v11 = *(void *)(*((void *)a1 + 4) + 1928);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 2377;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v23 = v12;
    IPC::ArgumentCoder<WebCore::TargetedElementRequest,void>::encode(v12, (uint64_t)v19);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v13 = &unk_1EE9DBC40;
    v13[1] = v8;
    void v13[2] = v9;
    uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v21[0] = v13;
    v21[1] = v14;
    char v22 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v23, 0, (uint64_t)v21, 1);
    if (v22)
    {
      uint64_t v16 = v21[0];
      v21[0] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    uint64_t result = v23;
    uint64_t v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      uint64_t result = (IPC::Encoder *)WTF::fastFree(v17, v18);
    }
    if (v20 != -1) {
      return (IPC::Encoder *)((uint64_t (*)(void *, void *))off_1EE9D9DD0[v20])(v21, v19);
    }
  }
  return result;
}

WTF::MachSendRight *WebKit::WebPageProxy::takeSnapshotForTargetedElement(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    LOBYTE(v9[0]) = 0;
    char v10 = 0;
    uint64_t v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v3 + 16))(v3, v9);
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v9);
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 16);
    long long v6 = *(_OWORD *)(a2 + 48);
    v9[0] = *(_OWORD *)(a2 + 32);
    v9[1] = v6;
    uint64_t v7 = v5;
    v8[0] = &v7;
    v8[1] = (uint64_t *)v9;
    return (WTF::MachSendRight *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::TakeSnapshotForTargetedElement,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(*(void *)(a1 + 256), v8, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::requestTextExtraction(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    LOBYTE(v6[0]) = 0;
    int v7 = 0;
    long long v9 = 0u;
    long long v8 = 0u;
    uint64_t v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, v6);
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    uint64_t result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
    if (v7 != -1) {
      return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v7])(&v10, v6);
    }
  }
  else
  {
    v6[0] = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(*(void *)(a1 + 256), v6, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
  return result;
}

unsigned int *WebKit::WebPageProxy::sendScrollPositionChangedForNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8, char a9)
{
  v28[0] = a3;
  v28[1] = a4;
  uint64_t v26 = a6;
  int v27 = a7;
  uint64_t v10 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  int v12 = *(unsigned __int8 *)(a2 + 16);
  v24[0] = v28;
  v24[1] = a5;
  void v24[2] = &v26;
  uint64_t v13 = *(void *)(a1 + 248);
  char v25 = a8;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v13 + 8), v13);
  uint64_t v14 = *(atomic_uint **)(v13 + 8);
  if (v14) {
    atomic_fetch_add(v14, 1u);
  }
  char v22 = (WTF *)v14;
  char v23 = a9;
  if (v12)
  {
    uint64_t v15 = WebKit::WebFrameProxy::webFrame(v10, v11);
    if (v15)
    {
      uint64_t v16 = v15;
      CFRetain(*(CFTypeRef *)(v15 + 8));
      uint64_t v17 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v16 + 32) + 16));
      if (v17)
      {
        uint64_t v18 = *(void *)(v17 + 24);
        uint64_t v29 = *(void *)(v17 + 16);
        WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0,unsigned long long>(v18, (uint64_t)v24, (uint64_t *)&v22, &v29, 0);
        CFRelease(*(CFTypeRef *)(v16 + 8));
        goto LABEL_9;
      }
      CFRelease(*(CFTypeRef *)(v16 + 8));
    }
  }
  uint64_t v20 = *(void *)(a1 + 256);
  uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 1928);
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0,unsigned long long>(v20, (uint64_t)v24, (uint64_t *)&v22, &v29, 0);
LABEL_9:
  uint64_t result = (unsigned int *)v22;
  char v22 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v19);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::bindRemoteAccessibilityFrames(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  v32[0] = a3;
  v32[1] = a4;
  int v31 = a2;
  v26[0] = &v31;
  v26[1] = v32;
  void v26[2] = a5;
  WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
  double v11 = v10 + 1.0;
  uint64_t v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    uint64_t v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    uint64_t v14 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v13 + 32) + 16));
    if (v14)
    {
      WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::BindRemoteAccessibilityFrames>((IPC::Decoder *)v27, *(void *)(v14 + 24), (uint64_t)v26, *(void *)(v14 + 16), v11);
      CFRelease(*(CFTypeRef *)(v13 + 8));
      goto LABEL_6;
    }
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::BindRemoteAccessibilityFrames>((IPC::Decoder *)v27, *(void *)(a1 + 256), (uint64_t)v26, *(void *)(*(void *)(a1 + 32) + 1928), v11);
LABEL_6:
  uint64_t v15 = v30;
  if (v30)
  {
    unsigned int v24 = 0;
    uint64_t v25 = 0;
    uint64_t result = WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v24);
    uint64_t v18 = v24;
    if (!v24) {
      goto LABEL_15;
    }
    unsigned int v24 = 0;
    LODWORD(v25) = 0;
LABEL_14:
    uint64_t result = WTF::fastFree(v18, v17);
LABEL_15:
    if (v15 == -1) {
      return result;
    }
    return ((uint64_t (*)(void *, unsigned char *))off_1EE9D9E08[v15])(v26, v27);
  }
  uint64_t v18 = v28;
  size_t v19 = HIDWORD(v29);
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  int v23 = v19;
  if (v19)
  {
    int v22 = v19;
    uint64_t v21 = (WTF *)WTF::fastMalloc((WTF *)v19);
    memcpy(v21, v18, v19);
  }
  WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v21);
  uint64_t v20 = v21;
  if (v21)
  {
    uint64_t v21 = 0;
    int v22 = 0;
    WTF::fastFree(v20, v17);
  }
  if (v18) {
    goto LABEL_14;
  }
  return ((uint64_t (*)(void *, unsigned char *))off_1EE9D9E08[v15])(v26, v27);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v8 = *a1;
  *a1 = 0;
  long long v6 = *(WTF **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = v2;
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(&v8, (uint64_t)&v6);
  uint64_t v4 = v6;
  if (v6)
  {
    long long v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void WebKit::WebPageProxy::updateRemoteFrameAccessibilityOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[0] = a2;
  v10[1] = a3;
  v8[0] = v10;
  v8[1] = &v9;
  uint64_t v9 = a4;
  uint64_t v5 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
    if (v7)
    {
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateRemotePageAccessibilityOffset>(*(void *)(v7 + 24), (uint64_t)v8, *(void *)(v7 + 16), 0);
      CFRelease(*(CFTypeRef *)(v6 + 8));
      return;
    }
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateRemotePageAccessibilityOffset>(*(void *)(a1 + 256), (uint64_t)v8, *(void *)(*(void *)(a1 + 32) + 1928), 0);
}

void WebKit::WebPageProxy::documentURLForConsoleLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v6 + 48);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v8 = *(const void **)(v6 + 8);
    CFRelease(v8);
  }
  else
  {
    v12[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v12);
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v9 + 16))(v9, v12);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    double v11 = v12[0];
    v12[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
}

IPC::Encoder *WebKit::WebPageProxy::resetVisibilityAdjustmentsForTargetedElements(IPC::Encoder *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)result + 801) || (uint64_t v6 = result, !*((unsigned char *)result + 800)))
  {
    uint64_t v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return (IPC::Encoder *)v5(v4);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  if (v8)
  {
    if (v8 >= 0x5555556)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v9 = WTF::fastMalloc((WTF *)(48 * v8));
    double v10 = (WTF *)v9;
    if (*(_DWORD *)(a2 + 12))
    {
      unint64_t v11 = 0;
      uint64_t v12 = v9 + 8;
      do
      {
        uint64_t v13 = *(void *)(*(void *)a2 + 8 * v11);
        uint64_t v14 = *(void *)(v13 + 16);
        long long v15 = *(_OWORD *)(v13 + 48);
        *(_OWORD *)&v28[8] = *(_OWORD *)(v13 + 32);
        *(_OWORD *)&v28[24] = v15;
        *(void *)(v12 - 8) = v14;
        *(_OWORD *)uint64_t v12 = *(_OWORD *)v28;
        *(_OWORD *)(v12 + 16) = *(_OWORD *)&v28[16];
        *(void *)(v12 + 32) = *(void *)&v28[32];
        ++v11;
        v12 += 48;
      }
      while (v11 < *(unsigned int *)(a2 + 12));
      goto LABEL_14;
    }
  }
  else
  {
    double v10 = 0;
  }
  LODWORD(v11) = 0;
LABEL_14:
  uint64_t v16 = *((void *)v6 + 32);
  uint64_t v17 = *(void *)(*((void *)v6 + 4) + 1928);
  uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v18 = 2380;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 68) = 0;
  *((void *)v18 + 70) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  int v27 = v18;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v18, v11);
  if (v11)
  {
    size_t v19 = (uint64_t *)((char *)v10 + 48 * v11);
    uint64_t v20 = (uint64_t *)v10;
    do
    {
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, v20);
      IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v18, v20 + 2);
      v20 += 6;
    }
    while (v20 != v19);
  }
  uint64_t v21 = *a3;
  *a3 = 0;
  int v22 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v22 = &unk_1EE9DBCE0;
  v22[1] = v21;
  *(void *)unint64_t v28 = v22;
  *(void *)&v28[8] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unsigned char v28[16] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v16, &v27, 0, (uint64_t)v28, 1);
  if (v28[16])
  {
    uint64_t v24 = *(void *)v28;
    *(void *)unint64_t v28 = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
  }
  uint64_t result = v27;
  int v27 = 0;
  if (!result)
  {
    if (!v10) {
      return result;
    }
    return (IPC::Encoder *)WTF::fastFree(v10, v23);
  }
  IPC::Encoder::~Encoder(result, v23);
  uint64_t result = (IPC::Encoder *)WTF::fastFree(v25, v26);
  if (v10) {
    return (IPC::Encoder *)WTF::fastFree(v10, v23);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::adjustVisibilityForTargetedElements(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 801) || (uint64_t v7 = a1, !*(unsigned char *)(a1 + 800)))
  {
    uint64_t v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
  else
  {
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v9 = *(unsigned int *)(a2 + 12);
    if (v9)
    {
      if (v9 >> 26)
      {
        __break(0xC471u);
LABEL_40:
        JUMPOUT(0x198E9434CLL);
      }
      unint64_t v11 = (uint64_t *)WTF::fastMalloc((WTF *)(v9 << 6));
      LODWORD(v46) = v9;
      uint64_t v45 = v11;
      if (*(_DWORD *)(a2 + 12))
      {
        uint64_t v43 = v7;
        int v44 = v3;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *(void *)(*(void *)a2 + 8 * v12);
          uint64_t v14 = *(void *)(v13 + 16);
          long long v15 = *(_OWORD *)(v13 + 48);
          long long v50 = *(_OWORD *)(v13 + 32);
          long long v51 = v15;
          *(void *)&long long v49 = v14;
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          uint64_t v16 = *(unsigned int *)(v13 + 108);
          if (v16)
          {
            if (v16 >> 29)
            {
              __break(0xC471u);
              goto LABEL_40;
            }
            uint64_t v17 = WTF::fastMalloc((WTF *)(8 * v16));
            LODWORD(v53) = v16;
            uint64_t v52 = v17;
            if (*(_DWORD *)(v13 + 108))
            {
              unint64_t v18 = 0;
              do
              {
                uint64_t v19 = *(void *)(v13 + 96) + 16 * v18;
                unsigned int v20 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::computeBestTableSize(*(_DWORD *)(v19 + 12));
                if (v20 <= 8) {
                  unsigned int v21 = 8;
                }
                else {
                  unsigned int v21 = v20;
                }
                uint64_t v22 = WTF::fastZeroedMalloc((WTF *)(8 * v21 + 16));
                uint64_t v24 = v22 + 16;
                uint64_t v47 = v22 + 16;
                *(_DWORD *)(v22 + 8) = v21 - 1;
                *(_DWORD *)(v22 + 12) = v21;
                *(void *)uint64_t v22 = 0;
                uint64_t v25 = *(unsigned int *)(v19 + 12);
                if (v25)
                {
                  uint64_t v26 = *(WTF::StringImpl ***)v19;
                  uint64_t v27 = 8 * v25;
                  do
                  {
                    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&v47, v26++, v23, (uint64_t)v48);
                    v27 -= 8;
                  }
                  while (v27);
                  uint64_t v24 = v47;
                }
                *(void *)(v17 + 8 * v18++) = v24;
              }
              while (v18 < *(unsigned int *)(v13 + 108));
              uint64_t v17 = v52;
              LODWORD(v16) = v53;
            }
            else
            {
              LODWORD(v18) = HIDWORD(v53);
            }
          }
          else
          {
            LODWORD(v18) = 0;
            uint64_t v17 = 0;
          }
          long long v28 = v49;
          uint64_t v29 = &v11[8 * v12];
          long long v30 = v51;
          *((_OWORD *)v29 + 1) = v50;
          *((_OWORD *)v29 + 2) = v30;
          *(_OWORD *)uint64_t v29 = v28;
          v29[7] = 0;
          uint64_t v52 = 0;
          v29[6] = v17;
          LODWORD(v53) = 0;
          *((_DWORD *)v29 + 14) = v16;
          HIDWORD(v53) = 0;
          ++v12;
          *((_DWORD *)v29 + 15) = v18;
          WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v10);
          if (v12 >= *(unsigned int *)(a2 + 12))
          {
            HIDWORD(v46) = v12;
            uint64_t v7 = v43;
            uint64_t v3 = v44;
            goto LABEL_29;
          }
        }
      }
    }
    else
    {
      unint64_t v11 = 0;
    }
    LODWORD(v12) = 0;
LABEL_29:
    uint64_t v31 = *(void *)(v7 + 256);
    uint64_t v32 = *(void *)(*(void *)(v7 + 32) + 1928);
    char v33 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v33 = 2138;
    *((void *)v33 + 1) = v32;
    *((void *)v33 + 66) = (char *)v33 + 16;
    *((void *)v33 + 67) = 512;
    *((void *)v33 + 68) = 0;
    *((void *)v33 + 70) = 0;
    *((void *)v33 + 69) = 0;
    IPC::Encoder::encodeHeader(v33);
    v48[0] = v33;
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v33, v12);
    if (v12)
    {
      long long v34 = &v11[8 * (unint64_t)v12];
      do
      {
        IPC::ArgumentCoder<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::UUID>> const&>(v33, v11);
        IPC::VectorArgumentCoder<false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v33, (uint64_t)(v11 + 6));
        v11 += 8;
      }
      while (v11 != v34);
    }
    uint64_t v35 = *v3;
    *uint64_t v3 = 0;
    uint64_t v36 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v36 = &unk_1EE9DBD08;
    v36[1] = v35;
    uint64_t v37 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    *(void *)&long long v49 = v36;
    *((void *)&v49 + 1) = v37;
    LOBYTE(v50) = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v31, v48, 0, (uint64_t)&v49, 1);
    if ((_BYTE)v50)
    {
      uint64_t v39 = v49;
      *(void *)&long long v49 = 0;
      if (v39) {
        (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
      }
    }
    uint64_t v40 = v48[0];
    v48[0] = 0;
    if (v40)
    {
      IPC::Encoder::~Encoder(v40, v38);
      WTF::fastFree(v41, v42);
    }
    return WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, (WTF::StringImpl *)v38);
  }
}

uint64_t WebKit::WebPageProxy::numberOfVisibilityAdjustmentRects(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
    return v3(v2);
  }
  else
  {
    char v5 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::NumberOfVisibilityAdjustmentRects,WTF::CompletionHandler<void ()(unsigned long long)>>(*(void *)(a1 + 256), (uint64_t)&v5, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

unsigned int *WebKit::WebPageProxy::addNowPlayingMetadataObserver(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 1432;
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(a1 + 1432)))
  {
    v6[0] = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartObservingNowPlayingMetadata>(*(void *)(a1 + 256), (uint64_t)v6, *(void *)(*(void *)(a1 + 32) + 1928), 0);
  }
  return WTF::WeakHashSet<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>(v4, a2, (uint64_t)v6);
}

unsigned int *WTF::WeakHashSet<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          *(void *)(v8 + 8 * v11) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *(void *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *(void *)a1;
        if (*(void *)a1) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - 12) = v15 - v10;
        uint64_t v8 = *(void *)a1;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v8 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 12) = 2 * v19;
          goto LABEL_28;
        }
LABEL_26:
        int v19 = v18;
        goto LABEL_27;
      }
    }
    unsigned int v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2, (uint64_t)a2);
  unsigned int v20 = (atomic_uint *)*a2;
  atomic_fetch_add(v20, 1u);
  atomic_fetch_add(v20, 1u);
  int v23 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v23, a3);
  uint64_t result = (unsigned int *)v23;
  int v23 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v21);
  }
  if (v20)
  {
    if (atomic_fetch_add(v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v21);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::removeNowPlayingMetadataObserver(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void **)(a1 + 1432);
  WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::ProcessThrottlerActivity>(a1 + 1432, a2);
  uint64_t result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v3);
  if (result)
  {
    char v5 = 0;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StopObservingNowPlayingMetadata>(*(void *)(a1 + 256), (uint64_t)&v5, *(void *)(*(void *)(a1 + 32) + 1928), 0);
  }
  return result;
}

void WebKit::WebPageProxy::setNowPlayingMetadataObserverForTesting(uint64_t a1, void **a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 1448);
  char v5 = *(uint64_t **)(a1 + 1448);
  *(void *)(a1 + 1448) = 0;
  if (v5)
  {
    WebKit::WebPageProxy::removeNowPlayingMetadataObserver(a1, v5);
    uint64_t v8 = 0;
    std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100]((uint64_t)&v8, (uint64_t)v5);
  }
  unsigned int v6 = *a2;
  *a2 = 0;
  uint64_t v7 = *v4;
  *uint64_t v4 = (uint64_t)v6;
  if (v7)
  {
    std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100]((uint64_t)v4, v7);
    unsigned int v6 = (void *)*v4;
  }
  if (v6) {
    WebKit::WebPageProxy::addNowPlayingMetadataObserver(a1, v6);
  }
}

void *WebKit::WebPageProxy::nowPlayingMetadataChanged(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
  char v5 = result;
  *uint64_t result = &unk_1EE9DBD58;
  result[1] = a2;
  uint64_t v6 = *(void *)(a1 + 1432);
  if (v6 && (uint64_t v7 = *(unsigned int *)(v6 - 12), v7))
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
  }
  else
  {
    uint64_t v8 = 0;
  }
  int v9 = (uint64_t *)(a1 + 1432);
  int v10 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)v9);
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  if (*v9) {
    uint64_t v14 = *v9 + 8 * *(unsigned int *)(*v9 - 4);
  }
  else {
    uint64_t v14 = 0;
  }
  if ((void *)v14 != v10)
  {
    unsigned int v15 = 0;
    int v16 = 1;
    do
    {
      unsigned int v17 = v16;
      unsigned int v18 = *(atomic_uint ***)(*v12 + 8);
      if (v18)
      {
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(*(unsigned int **)(*v12 + 8), *(void *)(*v12 + 8));
        int v19 = *v18;
        if (*v18) {
          atomic_fetch_add(v19, 1u);
        }
      }
      else
      {
        int v19 = 0;
      }
      *((void *)v8 + v15) = v19;
      while (++v12 != v13)
      {
        if ((unint64_t)(*v12 + 1) > 1) {
          goto LABEL_20;
        }
      }
      uint64_t v12 = v13;
LABEL_20:
      ++v15;
      int v16 = v17 + 1;
    }
    while (v12 != (void *)v14);
    if (v15)
    {
      uint64_t v20 = 8 * v17;
      unsigned int v21 = v8;
      do
      {
        if (*(void *)v21)
        {
          if (*(void *)(*(void *)v21 + 8))
          {
            uint64_t v26 = *(void *)v21;
            if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v9, &v26))
            {
              if (*(void *)v21) {
                uint64_t v22 = *(void *)(*(void *)v21 + 8);
              }
              else {
                uint64_t v22 = 0;
              }
              (*(void (**)(void *, uint64_t))(*v5 + 16))(v5, v22);
            }
          }
        }
        unsigned int v21 = (WTF *)((char *)v21 + 8);
        v20 -= 8;
      }
      while (v20);
      uint64_t v23 = 8 * v17;
      uint64_t v24 = (unsigned int **)v8;
      do
      {
        uint64_t v25 = *v24;
        *uint64_t v24 = 0;
        if (v25 && atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v25);
          WTF::fastFree((WTF *)v25, v11);
        }
        ++v24;
        v23 -= 8;
      }
      while (v23);
    }
  }
  if (v8) {
    WTF::fastFree(v8, v11);
  }
  return (void *)(*(uint64_t (**)(void *))(*v5 + 8))(v5);
}

uint64_t WebKit::WebPageProxy::didAdjustVisibilityWithSelectors(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 104) + 640))(*(void *)(a1 + 104), a1, a2);
}

uint64_t WebKit::WebPageProxy::frameNameChanged(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v8 = &unk_1EE9DBDA8;
  v8[1] = a2;
  void v8[2] = v11;
  uint64_t v8[3] = a5;
  int v10 = v8;
  WebKit::WebPageProxy::forEachWebContentProcess(a1, &v10);
  uint64_t result = (uint64_t)v10;
  int v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::hasActiveNowPlayingSessionChanged(WebKit::WebPageProxy *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 1888))(v4, a2);
  char v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

uint64_t WebKit::WebPageProxy::setAllowsLayoutViewportHeightExpansion(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 32);
  if (*(unsigned __int8 *)(v2 + 2608) != a2)
  {
    *(unsigned char *)(v2 + 2608) = a2;
    return (*(uint64_t (**)(void))(**(void **)(*(void *)(this + 40) + 8) + 1896))();
  }
  return this;
}

uint64_t WebKit::WebPageProxy::closeCurrentTypingCommand(uint64_t this)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      char v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CloseCurrentTypingCommand>(*(void *)(this + 256), (uint64_t)&v1, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

uint64_t API::ObjectImpl<(API::Object::Type)88>::type()
{
  return 88;
}

__n128 WebKit::WebPageProxyFrameLoadStateObserver::didReceiveProvisionalURL(WebKit::WebPageProxyFrameLoadStateObserver *this, const WTF::URL *a2)
{
  unsigned int v2 = *((_DWORD *)this + 7);
  if (v2 == *((_DWORD *)this + 6))
  {
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL const&>((uint64_t)this + 16, (unint64_t)a2);
  }
  else
  {
    uint64_t v4 = *((void *)this + 2);
    char v5 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v5 += 2;
    }
    *(void *)(v4 + 40 * v2) = v5;
    uint64_t v6 = v4 + 40 * v2;
    __n128 result = *(__n128 *)((char *)a2 + 8);
    *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)a2 + 24);
    *(__n128 *)(v6 + 8) = result;
    ++*((_DWORD *)this + 7);
  }
  return result;
}

unsigned int *WebKit::WebPageProxyFrameLoadStateObserver::didCancelProvisionalLoad(WebKit::WebPageProxyFrameLoadStateObserver *this)
{
  return WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 4, 0);
}

WTF::StringImpl *WebKit::WebPageProxyFrameLoadStateObserver::didCommitProvisionalLoad(WTF::StringImpl *this)
{
  uint64_t v52 = this;
  unsigned int v1 = *((_DWORD *)this + 7);
  if (!v1) {
    return this;
  }
  unsigned int v2 = (const WTF::URL *)*((void *)this + 2);
  uint64_t v3 = (const WTF::URL *)((char *)v2 + 40 * v1);
  uint64_t v4 = (uint64_t *)((char *)this + 32);
  char v5 = (WTF::ASCIICaseInsensitiveHash ***)((char *)this + 48);
  long long v51 = v3;
  do
  {
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v53, v2);
    this = v53;
    if (!v53) {
      goto LABEL_78;
    }
    if (!*((_DWORD *)v53 + 1) || (MEMORY[0x19972E990]() & 1) != 0) {
      goto LABEL_74;
    }
    uint64_t v7 = *v4;
    if (*v4
      || (WTF::HashTable<WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::RegistrableDomain>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>>::expand(v4, 0), (uint64_t v7 = *v4) != 0))
    {
      int v8 = *(_DWORD *)(v7 - 8);
    }
    else
    {
      int v8 = 0;
    }
    unsigned int v9 = WTF::ASCIICaseInsensitiveHash::hash(v53, v6);
    unsigned int v11 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v13 = v9 & v8;
      uint64_t v14 = (WTF::ASCIICaseInsensitiveHash ***)(v7 + 8 * (v9 & v8));
      unsigned int v15 = *v14;
      if (*v14 == (WTF::ASCIICaseInsensitiveHash **)-1)
      {
        unsigned int v11 = (WTF::ASCIICaseInsensitiveHash ***)(v7 + 8 * v13);
        goto LABEL_15;
      }
      if (!v15) {
        break;
      }
      if (WTF::equalIgnoringASCIICase(*v15, v53, v10))
      {
        int v16 = *v14;
        uint64_t v20 = (*v14)[1];
        unsigned int v21 = (*v14)[2];
        if (v20)
        {
          *((void *)v20 + 2) = v21;
          unsigned int v21 = v16[2];
        }
        else
        {
          *((void *)v52 + 5) = v21;
        }
        uint64_t v3 = v51;
        if (v21) {
          uint64_t v26 = (WTF::ASCIICaseInsensitiveHash ***)((char *)v21 + 8);
        }
        else {
          uint64_t v26 = v5;
        }
        *uint64_t v26 = (WTF::ASCIICaseInsensitiveHash **)v20;
        goto LABEL_34;
      }
LABEL_15:
      unsigned int v9 = i + v13;
    }
    if (v11)
    {
      void *v11 = 0;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v14 = v11;
    }
    int v16 = (WTF::ASCIICaseInsensitiveHash **)WTF::fastMalloc((WTF *)0x18);
    unsigned int v17 = v53;
    uint64_t v53 = 0;
    v16[1] = 0;
    _DWORD v16[2] = 0;
    *int v16 = v17;
    *uint64_t v14 = v16;
    uint64_t v18 = *v4;
    if (*v4) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    uint64_t v3 = v51;
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v22 = *v4;
    if (*v4) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 <= 0x400)
    {
      if (3 * v25 > 4 * v24) {
        goto LABEL_34;
      }
      goto LABEL_28;
    }
    if (v25 <= 2 * v24) {
LABEL_28:
    }
      int v16 = *(WTF::ASCIICaseInsensitiveHash ***)WTF::HashTable<WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::RegistrableDomain>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>>::expand(v4, v14);
LABEL_34:
    uint64_t v27 = (WTF::ASCIICaseInsensitiveHash ***)*((void *)v52 + 5);
    v16[1] = 0;
    _DWORD v16[2] = (WTF::ASCIICaseInsensitiveHash *)v27;
    if (v27) {
      long long v28 = v27 + 1;
    }
    else {
      long long v28 = v5;
    }
    WTF *v28 = v16;
    *((void *)v52 + 5) = v16;
    uint64_t v29 = *((void *)v52 + 4);
    if (v29 && *(_DWORD *)(v29 - 12) >= 7u)
    {
      unsigned int v30 = *(_DWORD *)(v29 - 8);
      int v31 = WTF::ASCIICaseInsensitiveHash::hash(**v5, v6);
      for (j = 0; ; int v31 = j + v35)
      {
        uint64_t v35 = v31 & v30;
        uint64_t v36 = *(WTF ***)(v29 + 8 * v35);
        if (v36 != (WTF **)-1)
        {
          if (!v36)
          {
            uint64_t v37 = (WTF::StringImpl ***)(*v4 + 8 * *(unsigned int *)(*v4 - 4));
            goto LABEL_46;
          }
          if (WTF::equalIgnoringASCIICase(*v36, **v5, v33)) {
            break;
          }
        }
        ++j;
      }
      uint64_t v37 = (WTF::StringImpl ***)(v29 + 8 * v35);
LABEL_46:
      long long v38 = **v37;
      *WTF::StringImpl *v37 = 0;
      uint64_t v39 = *v4;
      if (*v4) {
        v39 += 8 * *(unsigned int *)(v39 - 4);
      }
      if ((WTF::StringImpl ***)v39 != v37)
      {
        WTF::StringImpl *v37 = (WTF::StringImpl **)-1;
        ++*(_DWORD *)(*v4 - 16);
        uint64_t v40 = *v4;
        int v41 = *v4 ? *(_DWORD *)(v40 - 12) - 1 : -1;
        *(_DWORD *)(v40 - 12) = v41;
        uint64_t v42 = *v4;
        if (*v4)
        {
          unsigned int v43 = 6 * *(_DWORD *)(v42 - 12);
          unsigned int v44 = *(_DWORD *)(v42 - 4);
          if (v43 < v44 && v44 >= 9) {
            WTF::HashTable<WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::RegistrableDomain>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>>::rehash(v4, v44 >> 1, 0);
          }
        }
      }
      uint64_t v46 = *v5;
      uint64_t v47 = (*v5)[1];
      BOOL v48 = (*v5)[2];
      if (v47)
      {
        *((void *)v47 + 2) = v48;
        BOOL v48 = v46[2];
      }
      else
      {
        *((void *)v52 + 5) = v48;
      }
      if (v48) {
        long long v49 = (WTF::ASCIICaseInsensitiveHash ***)((char *)v48 + 8);
      }
      else {
        long long v49 = v5;
      }
      *long long v49 = (WTF::ASCIICaseInsensitiveHash **)v47;
      long long v50 = *v46;
      *uint64_t v46 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2) {
          WTF::StringImpl::destroy(v50, v32);
        }
        else {
          *(_DWORD *)v50 -= 2;
        }
      }
      WTF::fastFree((WTF *)v46, v32);
      if (v38)
      {
        if (*(_DWORD *)v38 == 2) {
          WTF::StringImpl::destroy(v38, v6);
        }
        else {
          *(_DWORD *)v38 -= 2;
        }
      }
    }
LABEL_74:
    this = v53;
    uint64_t v53 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v6);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
LABEL_78:
    unsigned int v2 = (const WTF::URL *)((char *)v2 + 40);
  }
  while (v2 != v3);
  return this;
}

uint64_t API::ObjectImpl<(API::Object::Type)86>::type()
{
  return 86;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          CFRelease(*(CFTypeRef *)(v5 + 8));
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(WTF::StringImpl **a1)
{
  uint64_t v2 = qword_1EB359C50;
  if (qword_1EB359C50)
  {
    int v3 = *(_DWORD *)(qword_1EB359C50 - 4);
    int v4 = *(_DWORD *)(qword_1EB359C50 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  qword_1EB359C50 = (uint64_t)(v6 + 4);
  void v6[2] = v5 - 1;
  v6[3] = v5;
  _DWORD *v6 = 0;
  *(_DWORD *)(qword_1EB359C50 - 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    do
    {
      int v10 = (WTF::StringImpl **)(v2 + 16 * v8);
      unsigned int v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          uint64_t v12 = qword_1EB359C50;
          if (qword_1EB359C50) {
            int v13 = *(_DWORD *)(qword_1EB359C50 - 8);
          }
          else {
            int v13 = 0;
          }
          unsigned int v14 = *((_DWORD *)v11 + 4);
          if (v14 >= 0x100) {
            unsigned int v15 = v14 >> 8;
          }
          else {
            unsigned int v15 = WTF::StringImpl::hashSlowCase(v11);
          }
          int v16 = 0;
          do
          {
            uint64_t v17 = v15 & v13;
            unsigned int v15 = ++v16 + v17;
          }
          while (*(void *)(v12 + 16 * v17));
          uint64_t v18 = (WTF::StringImpl **)(v12 + 16 * v17);
          *uint64_t v18 = 0;
          int v19 = *v10;
          const WTF::StringImpl *v10 = 0;
          *uint64_t v18 = v19;
          v18[1] = *(WTF::StringImpl **)(v2 + 16 * v8 + 8);
          uint64_t v20 = *v10;
          const WTF::StringImpl *v10 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy(v20, v7);
            }
            else {
              *(_DWORD *)v20 -= 2;
            }
          }
          if (v10 == a1) {
            unsigned int v9 = v18;
          }
        }
        else
        {
          const WTF::StringImpl *v10 = 0;
        }
      }
      ++v8;
    }
    while (v8 != v3);
  }
  else
  {
    unsigned int v9 = 0;
    __n128 result = 0;
    if (!v2) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v9;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>>(char *result, int8x16_t *a2, int a3, unint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v4 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    unsigned int v5 = &result[2 * (a3 & 0xFFFFFFC0)];
    long long v6 = 0uLL;
    do
    {
      v19.val[0] = *a2;
      int8x16_t v7 = a2[1];
      v20.val[0] = a2[2];
      int8x16_t v8 = a2[3];
      a2 += 4;
      int8x16_t v9 = v8;
      v20.val[1] = 0uLL;
      v21.val[0] = v7;
      v19.val[1] = 0uLL;
      int v10 = result;
      vst2q_s8(v10, v19);
      v10 += 32;
      v21.val[1] = 0uLL;
      vst2q_s8(v10, v21);
      unsigned int v11 = result + 64;
      vst2q_s8(v11, v20);
      uint64_t v12 = result + 96;
      vst2q_s8(v12, *(int8x16x2_t *)(&v6 - 1));
      result += 128;
    }
    while (result != v5);
    __n128 result = v5;
  }
  while (result != v4)
  {
    __int16 v13 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)__n128 result = v13;
    result += 2;
  }
  uint64_t v14 = 0;
  do
  {
    v17[v14-- + 24] = (a4 % 0xA) | 0x30;
    BOOL v15 = a4 > 9;
    a4 /= 0xAuLL;
  }
  while (v15);
  if (v14 + 26 <= 25)
  {
    do
    {
      *(_WORD *)int v4 = *((unsigned __int8 *)&v18 + v14);
      v4 += 2;
    }
    while (!__CFADD__(v14++, 1));
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebAutomationSessionProxy::TakeScreenshot>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int8x16_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int8x16_t v8 = 1574;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&,BOOL,BOOL,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&,BOOL,BOOL,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&,BOOL,BOOL,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&,BOOL,BOOL,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  char v4 = *(unsigned char *)(a2 + 24);
  unsigned int v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_7;
  }
  *unsigned int v5 = v4;
  char v7 = *(unsigned char *)(a2 + 25);
  int8x16_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198E95568);
  }
  *int8x16_t v8 = v7;
  uint64_t v10 = *(void *)(a2 + 32);
  __n128 result = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v12 <= 7)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x198E95548);
  }
  *__n128 result = v10;
  return result;
}

unint64_t IPC::ArgumentCoder<unsigned long long,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 8uLL, 8);
  if (v4 <= 7)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(void *)unint64_t result = a2;
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int8x16_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int8x16_t v8 = 1563;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,std::optional<double> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,std::optional<double> const&,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,std::optional<double> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,std::optional<double> const&,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, *(void *)(a2 + 24));
  char v4 = *(unsigned char *)(a2 + 32);
  unsigned int v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_7;
  }
  *unsigned int v5 = v4;
  char v7 = *(unsigned char *)(a2 + 33);
  int8x16_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198E957E4);
  }
  *int8x16_t v8 = v7;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, *(void *)(a2 + 40));
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t result = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v12 <= 7)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x198E957C4);
  }
  *unint64_t result = v10;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowMainResourceForFrame>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  int8x16_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int8x16_t v8 = 1849;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadURLInFrame>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  int8x16_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int8x16_t v8 = 2315;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[1]);
  char v4 = a2[2];

  return IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadDataInFrame>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int8x16_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int8x16_t v8 = 2310;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WTF::String const&,WTF::String const&,WTF::URL const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WTF::String const&,WTF::String const&,WTF::URL const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul,3ul,4ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unint64_t IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WTF::String const&,WTF::String const&,WTF::URL const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WTF::String const&,WTF::String const&,WTF::URL const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, **(const void ***)a2, *(void *)(*(void *)a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 24));
  char v4 = *(uint64_t **)(a2 + 32);

  return IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  unint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v12 = 1561;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  int v31 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v12, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, *(uint64_t **)(a2 + 16));
  char v13 = *(unsigned char *)(a2 + 24);
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
  if (!v15 || (*uint64_t v14 = v13, v16 = *(unsigned char *)(a2 + 25), v17 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1), !v18))
  {
    __break(0xC471u);
    JUMPOUT(0x198E95DA0);
  }
  *char v17 = v16;
  uint64_t v19 = *a3;
  *a3 = 0;
  int8x16x2_t v20 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int8x16x2_t v20 = &unk_1EE9D98D0;
  v20[1] = v19;
  uint64_t v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v29[0] = v20;
  v29[1] = v21;
  char v30 = 1;
  int v23 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v31, a5, (uint64_t)v29, a6);
  if (v30)
  {
    uint64_t v24 = v29[0];
    v29[0] = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
  }
  unint64_t v25 = v31;
  int v31 = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, v22);
    WTF::fastFree(v27, v28);
  }
  if (v23) {
    return v21;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL))#1},void,void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D98D0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL))#1},void,void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D98D0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL))#1},void,void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v43);
    if (!v45)
    {
      int v15 = 0;
      LOBYTE(v36) = 0;
      char v42 = 0;
      goto LABEL_15;
    }
    IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a2, (uint64_t)&v46);
    if (!v47) {
      goto LABEL_49;
    }
    unint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *(WTF::StringImpl **)a2;
    unint64_t v7 = *((void *)a2 + 2) - *(void *)a2;
    if (v5 <= v7)
    {
      unint64_t v27 = 0;
      long long v28 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v29 = *((void *)a2 + 3);
      if (v29)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
          long long v28 = *(WTF::StringImpl **)a2;
          unint64_t v27 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v27 = 0;
          long long v28 = 0;
        }
      }
    }
    else
    {
      int8x16_t v8 = (unsigned __int8 *)v6 + v7;
      uint64_t v9 = v8 + 1;
      *((void *)a2 + 2) = v8 + 1;
      if (v6)
      {
        unsigned int v10 = *v8;
        if (v10 < 2)
        {
          if (!v10)
          {
            uint64_t v11 = 0;
            goto LABEL_19;
          }
          uint64_t v11 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a2);
          if (v12)
          {
            unint64_t v5 = *((void *)a2 + 1);
            uint64_t v9 = (unsigned __int8 *)*((void *)a2 + 2);
            unsigned int v10 = 1;
            uint64_t v6 = *(WTF::StringImpl **)a2;
LABEL_19:
            unint64_t v19 = v9 - (unsigned __int8 *)v6;
            if (v5 <= v19)
            {
              unint64_t v32 = 0;
              char v33 = 0;
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v34 = *((void *)a2 + 3);
              if (v34)
              {
                if (v5)
                {
                  (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
                  char v33 = *(WTF::StringImpl **)a2;
                  unint64_t v32 = *((void *)a2 + 1);
                }
                else
                {
                  unint64_t v32 = 0;
                  char v33 = 0;
                }
              }
            }
            else
            {
              int8x16x2_t v20 = (unsigned __int8 *)v6 + v19;
              *((void *)a2 + 2) = v20 + 1;
              if (v6)
              {
                unsigned int v21 = *v20;
                if (v21 < 2)
                {
                  BOOL v2 = v21 != 0;
                  if (v45)
                  {
                    LOBYTE(v36) = 0;
                    char v37 = 0;
                    if (v44)
                    {
                      uint64_t v22 = v43;
                      unsigned int v43 = 0;
                      uint64_t v36 = v22;
                      char v37 = 1;
                    }
                    int v23 = 0;
                    long long v38 = v46;
                    uint64_t v39 = v11;
                    unsigned int v40 = v10;
                    BOOL v41 = v2;
                    int v15 = 1;
LABEL_26:
                    char v42 = v15;
                    if (v45)
                    {
                      if (v44)
                      {
                        uint64_t v24 = v43;
                        unsigned int v43 = 0;
                        if (v24)
                        {
                          if (*(_DWORD *)v24 == 2)
                          {
                            WTF::StringImpl::destroy(v24, v6);
                            if (!v23)
                            {
LABEL_32:
                              if (!v15) {
                                return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(v3);
                              }
                              uint64_t v25 = *v3;
                              *uint64_t v3 = 0;
                              (*(void (**)(uint64_t, WTF::StringImpl **, long long *, unint64_t **, BOOL))(*(void *)v25 + 16))(v25, &v36, &v38, &v39, v2);
                              unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 8))(v25);
                              if (v42)
                              {
                                if (v37)
                                {
                                  unint64_t result = v36;
                                  uint64_t v36 = 0;
                                  if (result)
                                  {
                                    if (*(_DWORD *)result == 2) {
                                      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
                                    }
                                    else {
                                      *(_DWORD *)result -= 2;
                                    }
                                  }
                                }
                              }
                              return result;
                            }
LABEL_15:
                            char v16 = *(WTF::StringImpl **)a2;
                            uint64_t v17 = *((void *)a2 + 1);
                            *(void *)a2 = 0;
                            *((void *)a2 + 1) = 0;
                            uint64_t v18 = *((void *)a2 + 3);
                            if (v18 && v17) {
                              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v18 + 16))(v18, v16);
                            }
                            goto LABEL_32;
                          }
                          *(_DWORD *)v24 -= 2;
                        }
                      }
                    }
                    if (!v23) {
                      goto LABEL_32;
                    }
                    goto LABEL_15;
                  }
                  __break(1u);
                  goto LABEL_55;
                }
LABEL_52:
                *(void *)a2 = 0;
                *((void *)a2 + 1) = 0;
                uint64_t v11 = (unint64_t *)*((void *)a2 + 3);
                if (!v11)
                {
LABEL_53:
                  int v15 = 0;
                  LOBYTE(v36) = 0;
                  int v23 = 1;
                  goto LABEL_26;
                }
LABEL_55:
                if (v5) {
                  (*(void (**)(unint64_t *, WTF::StringImpl *))(*v11 + 16))(v11, v6);
                }
                goto LABEL_53;
              }
              unint64_t v32 = v5;
              char v33 = 0;
            }
            unint64_t v5 = 0;
            uint64_t v6 = 0;
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v35 = *((void *)a2 + 3);
            if (!v35) {
              goto LABEL_52;
            }
            if (!v32)
            {
              unint64_t v5 = 0;
              uint64_t v6 = 0;
              goto LABEL_52;
            }
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v35 + 16))(v35, v33, v32);
LABEL_49:
            uint64_t v6 = *(WTF::StringImpl **)a2;
            unint64_t v5 = *((void *)a2 + 1);
            goto LABEL_52;
          }
LABEL_47:
          uint64_t v6 = *(WTF::StringImpl **)a2;
          unint64_t v5 = *((void *)a2 + 1);
          goto LABEL_48;
        }
        goto LABEL_48;
      }
      unint64_t v27 = v5;
      long long v28 = 0;
    }
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v30 = *((void *)a2 + 3);
    if (v30)
    {
      if (!v27)
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
        goto LABEL_48;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
      goto LABEL_47;
    }
LABEL_48:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v31 = *((void *)a2 + 3);
    if (v31 && v5) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v31 + 16))(v31, v6);
    }
    goto LABEL_49;
  }
  char v13 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(v13);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(uint64_t *a1)
{
  LOBYTE(v7) = 0;
  char v8 = 0;
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, void *, uint64_t *, void))(*(void *)v1 + 16))(v1, &v7, v6, &v4, 0);
  unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v8)
  {
    unint64_t result = v7;
    unint64_t v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v12 = 1565;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D98F8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

_DWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, *(void *)(a2 + 8));
  uint64_t v4 = *(uint64_t **)(a2 + 16);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D98F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D98F8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>>(v6, a2);
    if (v7[16])
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)v3 + 16))(v3, v6, v7);
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
      return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(v2);
    }
  }
  else
  {
    int v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(v5);
  }
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(uint64_t *a1)
{
  LOBYTE(v6) = 0;
  char v7 = 0;
  LOBYTE(v4) = 0;
  char v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v1 + 16))(v1, &v6, &v4);
  unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v5)
  {
    unint64_t result = v4;
    uint64_t v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v7)
  {
    unint64_t result = v6;
    uint64_t v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v14);
  if (v16)
  {
    unint64_t result = IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v17);
    int v6 = v19;
    if (v19)
    {
      if (!v16)
      {
        __break(1u);
        return result;
      }
      *a1 = 0;
      a1[8] = 0;
      int v7 = v15;
      if (v15)
      {
        char v8 = v14;
        uint64_t v14 = 0;
        *(void *)a1 = v8;
        a1[8] = 1;
      }
      a1[16] = 0;
      a1[24] = 0;
      char v9 = 1;
      BOOL v10 = v18;
      if (v18)
      {
        BOOL v10 = 0;
        *((void *)a1 + 2) = v17;
        a1[24] = 1;
      }
    }
    else
    {
      char v9 = 0;
      *a1 = 0;
      int v7 = v15;
      BOOL v10 = v16 == 0;
    }
    a1[32] = v9;
    if (!v10)
    {
      if (v7)
      {
        unint64_t result = v14;
        uint64_t v14 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
            if (v6) {
              return result;
            }
            goto LABEL_9;
          }
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (v6) {
      return result;
    }
  }
  else
  {
    *a1 = 0;
    a1[32] = 0;
  }
LABEL_9:
  uint64_t v11 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    uint64_t v13 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v13();
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 16);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1);
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  BOOL v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v12 = 1564;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D9920;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned __int8 v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D9920;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D9920;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>>(v6, a2);
    if (v7[16])
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)v3 + 16))(v3, v6, v7);
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
      return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(v2);
    }
  }
  else
  {
    char v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  BOOL v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v12 = 1570;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v12, *(void *)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D9948;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned __int8 v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D9948;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D9948;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>((uint64_t)&v6, a2), v9))
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *))(*(void *)v3 + 16))(v3, &v6, &v8);
    unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if (v9)
    {
      if (v7)
      {
        unint64_t result = v6;
        int v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(v2);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(uint64_t *a1)
{
  LOBYTE(v5) = 0;
  char v6 = 0;
  v4[0] = 0;
  v4[16] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, unsigned char *))(*(void *)v1 + 16))(v1, &v5, v4);
  unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v6)
  {
    unint64_t result = v5;
    char v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v14);
  if (v16)
  {
    unint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a2, (uint64_t)&v17);
    int v6 = v19;
    if (v19)
    {
      if (!v16)
      {
        __break(1u);
        return result;
      }
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
      int v7 = v15;
      if (v15)
      {
        uint64_t v8 = v14;
        uint64_t v14 = 0;
        *(void *)a1 = v8;
        *(unsigned char *)(a1 + 8) = 1;
      }
      BOOL v9 = 0;
      *(_OWORD *)(a1 + 16) = v17;
      *(void *)(a1 + 32) = v18;
      char v10 = 1;
    }
    else
    {
      char v10 = 0;
      *(unsigned char *)a1 = 0;
      int v7 = v15;
      BOOL v9 = v16 == 0;
    }
    *(unsigned char *)(a1 + 40) = v10;
    if (!v9)
    {
      if (v7)
      {
        unint64_t result = v14;
        uint64_t v14 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
            if (v6) {
              return result;
            }
            goto LABEL_8;
          }
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (v6) {
      return result;
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 40) = 0;
  }
LABEL_8:
  uint64_t v11 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    uint64_t v13 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v13();
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  BOOL v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v12 = 1571;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D9970;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned __int8 v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D9970;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D9970;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WTF::String>>>(a2, &v7);
    if (v9)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v9)
      {
        if (v8)
        {
          unint64_t result = v7;
          int v7 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(v2);
    }
  }
  else
  {
    int v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(v6);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(uint64_t *a1)
{
  LOBYTE(v4) = 0;
  char v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v1 + 16))(v1, &v4);
  unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v5)
  {
    unint64_t result = v4;
    uint64_t v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<std::optional<WTF::String>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<std::optional<WTF::String>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v7();
    }
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<std::optional<WTF::String>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v5);
  char v4 = v7;
  if (v7)
  {
    *a2 = 0;
    a2[8] = 0;
    char v4 = 1;
    if (v6)
    {
      *(void *)a2 = v5;
      a2[8] = 1;
    }
  }
  else
  {
    *a2 = 0;
  }
  a2[16] = v4;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  BOOL v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v12 = 1567;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D9998;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned __int8 v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D9998;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D9998;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>((uint64_t)&v6, a2), v9))
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *))(*(void *)v3 + 16))(v3, &v6, &v8);
    unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if (v9)
    {
      if (v7)
      {
        unint64_t result = v6;
        char v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(v2);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  BOOL v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v12 = 1573;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v31 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v12, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, *(uint64_t **)(a2 + 16));
  char v13 = *(unsigned char *)(a2 + 24);
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
  if (!v15 || (*uint64_t v14 = v13, v16 = *(unsigned char *)(a2 + 25), v17 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1), !v18))
  {
    __break(0xC471u);
    JUMPOUT(0x198E97C8CLL);
  }
  *int v17 = v16;
  uint64_t v19 = *a3;
  *a3 = 0;
  int8x16x2_t v20 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int8x16x2_t v20 = &unk_1EE9D99C0;
  v20[1] = v19;
  uint64_t v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v29[0] = v20;
  v29[1] = v21;
  char v30 = 1;
  int v23 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v31, a5, (uint64_t)v29, a6);
  if (v30)
  {
    uint64_t v24 = v29[0];
    v29[0] = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
  }
  uint64_t v25 = v31;
  uint64_t v31 = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, v22);
    WTF::fastFree(v27, v28);
  }
  if (v23) {
    return v21;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D99C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D99C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v22);
    if (!v24)
    {
      int v10 = 0;
      LOBYTE(v18) = 0;
      char v21 = 0;
      goto LABEL_13;
    }
    unint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a2, (uint64_t)&v25);
    int v6 = v26;
    if (v26)
    {
      if (!v24)
      {
        __break(1u);
        return result;
      }
      LOBYTE(v18) = 0;
      char v19 = 0;
      int v7 = v23;
      if (v23)
      {
        uint64_t v8 = v22;
        uint64_t v22 = 0;
        uint64_t v18 = v8;
        char v19 = 1;
      }
      BOOL v9 = 0;
      long long v20 = v25;
      int v10 = 1;
    }
    else
    {
      int v10 = 0;
      LOBYTE(v18) = 0;
      int v7 = v23;
      BOOL v9 = v24 == 0;
    }
    char v21 = v10;
    if (!v9)
    {
      if (v7)
      {
        uint64_t v15 = v22;
        uint64_t v22 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
          {
            WTF::StringImpl::destroy(v15, v5);
            if (v6)
            {
LABEL_23:
              if (!v10) {
                return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(v2);
              }
              uint64_t v16 = *v2;
              *uint64_t v2 = 0;
              (*(void (**)(uint64_t, WTF::StringImpl **, long long *))(*(void *)v16 + 16))(v16, &v18, &v20);
              unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16);
              if (v21)
              {
                if (v19)
                {
                  unint64_t result = v18;
                  uint64_t v18 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2) {
                      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
                    }
                    else {
                      *(_DWORD *)result -= 2;
                    }
                  }
                }
              }
              return result;
            }
LABEL_13:
            uint64_t v12 = *(void *)a2;
            uint64_t v13 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v14 = *((void *)a2 + 3);
            if (v14 && v13) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
            }
            goto LABEL_23;
          }
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    if (v6) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  uint64_t v11 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(v11);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(uint64_t *a1)
{
  LOBYTE(v5) = 0;
  char v6 = 0;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, void *))(*(void *)v1 + 16))(v1, &v5, v4);
  unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v6)
  {
    unint64_t result = v5;
    uint64_t v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 1572;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  long long v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v12, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, *(uint64_t **)(a2 + 16));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v12, *(void *)(a2 + 24));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D99E8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  long long v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D99E8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D99E8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WTF::String>>>(a2, &v7);
    if (v9)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v9)
      {
        if (v8)
        {
          unint64_t result = v7;
          int v7 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(v2);
    }
  }
  else
  {
    char v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(v6);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 1569;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  long long v28 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v12, *(void *)(a2 + 8));
  int v13 = *(_DWORD *)(a2 + 16);
  uint64_t v14 = (_DWORD *)IPC::Encoder::grow(v12, 4uLL, 4);
  if (v15 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v14 = v13;
    uint64_t v16 = *a3;
    *a3 = 0;
    int v17 = (void *)WTF::fastMalloc((WTF *)0x10);
    *int v17 = &unk_1EE9D9A10;
    v17[1] = v16;
    uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v26[0] = v17;
    v26[1] = v18;
    char v27 = 1;
    int v20 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a5, (uint64_t)v26, a6);
    if (v27)
    {
      uint64_t v21 = v26[0];
      v26[0] = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
    }
    uint64_t v22 = v28;
    long long v28 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v19);
      WTF::fastFree(v24, v25);
    }
    if (v20) {
      return v18;
    }
    else {
      return 0;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D9A10;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D9A10;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>((uint64_t)&v6, a2), v9))
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *))(*(void *)v3 + 16))(v3, &v6, &v8);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if (v9)
    {
      if (v7)
      {
        uint64_t result = v6;
        char v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(v2);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 1568;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  long long v25 = v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D9A38;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  long long v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D9A38;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D9A38;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>((uint64_t)&v6, a2), v9))
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *))(*(void *)v3 + 16))(v3, &v6, &v8);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if (v9)
    {
      if (v7)
      {
        uint64_t result = v6;
        char v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(v2);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2324;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  long long v25 = v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D9A60;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  long long v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D9A60;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D9A60;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      unint64_t v6 = a2[1];
      if (v6 <= a2[2] - v5)
      {
        a3 = 0;
        uint64_t v9 = 0;
        *a2 = 0;
        a2[1] = 0;
        uint64_t v11 = a2[3];
        if (v11)
        {
          if (v6)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v5, v6);
            a3 = 0;
            uint64_t v17 = *a2;
            uint64_t v18 = a2[1];
            uint64_t v19 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            uint64_t v9 = 0;
            if (v19 && v18)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17, v18);
              uint64_t v9 = *a2;
              a3 = a2[1];
            }
          }
          else
          {
            a3 = 0;
            uint64_t v9 = 0;
          }
        }
      }
      else
      {
        char v7 = (unsigned __int8 *)a2[2];
        a2[2] = (uint64_t)(v7 + 1);
        uint64_t v8 = *v7;
        a3 = v6;
        uint64_t v9 = v5;
        if (v8 < 3)
        {
          uint64_t v10 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v8, v6);
          goto LABEL_9;
        }
      }
      *a2 = 0;
      a2[1] = 0;
      uint64_t v12 = a2[3];
      if (v12)
      {
        if (a3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v9);
          uint64_t v15 = *a2;
          a3 = a2[1];
          uint64_t v16 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v16)
          {
            if (a3) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v15);
            }
          }
        }
      }
    }
  }
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void, unint64_t))(*(void *)v10 + 16))(v10, 0, a3);
LABEL_9:
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);

  return v13(v10);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2226;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  long long v25 = v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode(v12, *(void *)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D9A88;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  long long v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D9A88;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D9A88;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::MachSendRight *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(a2, v6);
    if (v7)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
      uint64_t result = (WTF::MachSendRight *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v7) {
        return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(v5);
  }
  return result;
}

WTF::MachSendRight *IPC::Connection::cancelReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(uint64_t *a1)
{
  v3[0] = 0;
  v3[64] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v3);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v3);
}

void IPC::Decoder::decode<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[72])
  {
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      char v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebCore::ShareableBitmapHandle>>(a1, v3);
  if (v4)
  {
    IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,void>::decode<IPC::Decoder,std::optional<WebCore::ShareableBitmapHandle>>((uint64_t)v3, a2);
    if (v4) {
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v3);
    }
  }
  else
  {
    *a2 = 0;
    a2[72] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,void>::decode<IPC::Decoder,std::optional<WebCore::ShareableBitmapHandle>>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v2 = a2;
  if (*(unsigned char *)(a1 + 72))
  {
    *a2 = 0;
    a2[64] = 0;
    if (*(unsigned char *)(a1 + 64))
    {
      WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a2, a1);
      v2[64] = 1;
    }
    v2[72] = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2228;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  long long v25 = v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode(v12, *(void *)(a2 + 8));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v12, *(void *)(a2 + 16));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D9AB0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  long long v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D9AB0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D9AB0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned int **))(*(void *)v3 + 16))(v3, &v7);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        uint64_t result = v7;
        char v7 = 0;
        if (result) {
          return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(v2);
    }
  }
  else
  {
    unint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(v6);
  }
  return result;
}

unsigned int *IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(uint64_t *a1)
{
  char v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(void *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = v4;
  char v4 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v2);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPageTesting::IsEditingCommandEnabled>@<X0>(uint64_t result@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (*(void *)(result + 144))
  {
    uint64_t v11 = result;
    kdebug_trace();
    uint64_t v12 = *(void *)(v11 + 144);
    if (v12)
    {
      IPC::Connection::sendSync<Messages::WebPageTesting::IsEditingCommandEnabled>(v12, a2, a3, a4, a5, a6);
      return kdebug_trace();
    }
    else
    {
      uint64_t result = 130;
      __break(0xC471u);
    }
  }
  else
  {
    *(unsigned char *)a5 = 1;
    *(_DWORD *)(a5 + 16) = 1;
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageTesting::IsEditingCommandEnabled>@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v24 = 0;
  IPC::Connection::createSyncMessageEncoder(3782, a3, &v24, &v23);
  uint64_t v11 = v23;
  if (a4)
  {
    **((unsigned char **)v23 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, *a2);
  IPC::Connection::sendSyncMessage(a1, v24, (uint64_t *)&v23, a4, (uint64_t)&v21, a6);
  if (!v22)
  {
    __int16 v20 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v21, &v20);
    if (!HIBYTE(v20))
    {
      *(unsigned char *)a5 = 13;
      *(_DWORD *)(a5 + 16) = 1;
      int v12 = v22;
      if (v22 == -1) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    int v12 = v22;
    if (!v22)
    {
      uint64_t v14 = v21;
      uint64_t v21 = 0;
      char v15 = v20;
      *(void *)a5 = v14;
      *(unsigned char *)(a5 + 8) = v15;
      *(_DWORD *)(a5 + 16) = 0;
      goto LABEL_10;
    }
LABEL_14:
    uint64_t v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::ComputePagesForPrintingiOS>(v19);
  }
  if (v22 != 1) {
    goto LABEL_14;
  }
  *(unsigned char *)a5 = (_BYTE)v21;
  int v12 = 1;
  *(_DWORD *)(a5 + 16) = 1;
LABEL_10:
  ((void (*)(__int16 *, uint64_t **))off_1EE9D9AC8[v12])(&v20, &v21);
LABEL_11:
  uint64_t result = v23;
  unsigned __int8 v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::ComputePagesForPrintingiOS>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (*(void *)(result + 144))
  {
    uint64_t v11 = result;
    kdebug_trace();
    uint64_t v12 = *(void *)(v11 + 144);
    if (v12)
    {
      IPC::Connection::sendSync<Messages::WebPage::ComputePagesForPrintingiOS>(v12, a2, a3, a4, a5, a6);
      return kdebug_trace();
    }
    else
    {
      uint64_t result = 130;
      __break(0xC471u);
    }
  }
  else
  {
    *(unsigned char *)a5 = 1;
    *(_DWORD *)(a5 + 16) = 1;
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPage::ComputePagesForPrintingiOS>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v22 = 0;
  IPC::Connection::createSyncMessageEncoder(3784, a3, &v22, &v21);
  uint64_t v11 = v21;
  if (a4)
  {
    **((unsigned char **)v21 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v11, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode(v11, *(void *)(a2 + 8));
  IPC::Connection::sendSyncMessage(a1, v22, (uint64_t *)&v21, a4, (uint64_t)&v19, a6);
  int v12 = v20;
  if (v20)
  {
    if (v20 == 1)
    {
      *(unsigned char *)a5 = (_BYTE)v19;
LABEL_9:
      *(_DWORD *)(a5 + 16) = v12;
LABEL_10:
      ((void (*)(char *, uint64_t **))off_1EE9D9AC8[v12])(&v23, &v19);
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  unint64_t v13 = IPC::Decoder::decode<std::tuple<double>>(v19);
  if ((_BYTE)v14)
  {
    if (!v20)
    {
      char v15 = v19;
      uint64_t v19 = 0;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v13;
      goto LABEL_9;
    }
LABEL_16:
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x198E99C64);
  }
  *(unsigned char *)a5 = 13;
  *(_DWORD *)(a5 + 16) = 1;
  int v12 = v20;
  if (v20 != -1) {
    goto LABEL_10;
  }
LABEL_11:
  uint64_t result = v21;
  uint64_t v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t API::IconLoadingClient::getLoadDecisionForIcon(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, &v5);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t API::FormClient::willSubmitForm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  char v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

BOOL API::FullscreenClient::isType(uint64_t a1, int a2)
{
  return a2 == 0;
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::WebPageProxy(WebKit::PageClient &,WebKit::WebProcessProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  CFRetain(*(CFTypeRef *)(v1 + 8));
  WebKit::WebPageProxy::dispatchActivityStateChange((WebCore::RunLoopObserver **)v1);
  uint64_t v2 = *(const void **)(v1 + 8);

  CFRelease(v2);
}

WebKit::NetworkIssueReporter *std::unique_ptr<WebKit::NetworkIssueReporter>::reset[abi:sn180100](WebKit::NetworkIssueReporter **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkIssueReporter::~NetworkIssueReporter(result, a2);
    return (WebKit::NetworkIssueReporter *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    char v4 = (WebKit::InspectorTargetProxy **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::InspectorTargetProxy *)-1)
      {
        std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100](v4, 0);
        uint64_t v5 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebKit::InspectorTargetProxy::~InspectorTargetProxy(WebKit::InspectorTargetProxy *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  char v4 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }

  Inspector::InspectorTarget::~InspectorTarget(this, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::InspectorTargetProxy::~InspectorTargetProxy(this, a2);

  WTF::fastFree(v2, v3);
}

void Inspector::InspectorTarget::~InspectorTarget(Inspector::InspectorTarget *this, void *a2)
{
  *(void *)this = &unk_1EE9DBDD0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

uint64_t Inspector::InspectorTarget::isProvisional(Inspector::InspectorTarget *this)
{
  return 0;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(WTF::StringImpl **)v4;
      if (*(void *)v4 != -1)
      {
        uint64_t v6 = *(void *)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v6)
        {
          CFRelease(*(CFTypeRef *)(v6 + 8));
          uint64_t v5 = *(WTF::StringImpl **)v4;
        }
        *(void *)uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(WTF::StringImpl **)v4;
      if (*(void *)v4 != -1)
      {
        uint64_t v6 = *(_DWORD **)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v6)
        {
          if (v6[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
            uint64_t v5 = *(WTF::StringImpl **)v4;
          }
          else
          {
            --v6[2];
          }
        }
        *(void *)uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::RemoteLayerTreeScrollingPerformanceData *std::unique_ptr<WebKit::RemoteLayerTreeScrollingPerformanceData>::reset[abi:sn180100](WebKit::RemoteLayerTreeScrollingPerformanceData **a1, WebKit::RemoteLayerTreeScrollingPerformanceData *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteLayerTreeScrollingPerformanceData::~RemoteLayerTreeScrollingPerformanceData(result, a2);
    return (WebKit::RemoteLayerTreeScrollingPerformanceData *)WTF::fastFree(v4, v5);
  }
  return result;
}

WTF ***std::unique_ptr<WebKit::WebWheelEventCoalescer>::reset[abi:sn180100](WTF ***result, WTF **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (!v2) {
    return result;
  }
  unint64_t v3 = (unint64_t)v2[32];
  unint64_t v4 = (unint64_t)v2[33];
  uint64_t v5 = v2[34];
  if (v3 > v4)
  {
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      do
      {
        a2 = *(WTF ***)v5;
        *(void *)uint64_t v5 = 0;
        if (a2) {
          std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v5, a2);
        }
        uint64_t v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      uint64_t v5 = v2[34];
      unint64_t v3 = (unint64_t)v2[32];
    }
    uint64_t v7 = *((unsigned int *)v2 + 70);
    if (v3 != v7)
    {
      char v8 = (WTF ***)((char *)v5 + 8 * v3);
      uint64_t v9 = 8 * v7 - 8 * v3;
      do
      {
        a2 = *v8;
        *char v8 = 0;
        if (a2) {
          std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v8, a2);
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
LABEL_21:
    uint64_t v5 = v2[34];
    goto LABEL_22;
  }
  if (v3 != v4)
  {
    uint64_t v10 = (WTF ***)((char *)v5 + 8 * v3);
    uint64_t v11 = 8 * v4 - 8 * v3;
    do
    {
      a2 = *v10;
      char *v10 = 0;
      if (a2) {
        std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v10, a2);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    goto LABEL_21;
  }
LABEL_22:
  if (v5)
  {
    v2[34] = 0;
    *((_DWORD *)v2 + 70) = 0;
    WTF::fastFree(v5, a2);
  }
  int v12 = v2[2];
  if (v2 + 4 != (WTF **)v12 && v12 != 0)
  {
    char v2[2] = 0;
    *((_DWORD *)v2 + 6) = 0;
    WTF::fastFree(v12, a2);
  }

  return (WTF ***)WTF::fastFree((WTF *)v2, a2);
}

WebKit::MediaKeySystemPermissionRequestManagerProxy *std::unique_ptr<WebKit::MediaKeySystemPermissionRequestManagerProxy>::reset[abi:sn180100](WebKit::MediaKeySystemPermissionRequestManagerProxy **a1, WebKit::MediaKeySystemPermissionRequestManagerProxy *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::MediaKeySystemPermissionRequestManagerProxy::~MediaKeySystemPermissionRequestManagerProxy(result, a2);
    return (WebKit::MediaKeySystemPermissionRequestManagerProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t std::default_delete<WebKit::ModelElementController>::operator()[abi:sn180100](WTF *this, void *a2)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  if (*(void *)this)
  {
    *(void *)(*(void *)this + 8) = 0;
    unint64_t v4 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  else
  {
    *(void *)this = 0;
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

void std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>(WebKit::WebsitePoliciesData *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 120) == *(unsigned __int8 *)(a2 + 120))
  {
    if (*((unsigned char *)this + 120))
    {
      WebKit::WebsitePoliciesData::operator=((uint64_t)this, (uint64_t *)a2);
    }
  }
  else if (*((unsigned char *)this + 120))
  {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData(this, (WTF::StringImpl *)a2);
    *((unsigned char *)this + 120) = 0;
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData*>((uint64_t)this, (uint64_t *)a2);
    *((unsigned char *)this + 120) = 1;
  }
}

uint64_t std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OwnerPermissionsPolicyData,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned __int8 *)(result + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(unsigned char *)(result + 48))
    {
      return WebCore::OwnerPermissionsPolicyData::operator=(result, a2);
    }
  }
  else if (*(unsigned char *)(result + 48))
  {
    return std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::reset[abi:sn180100](result, (void *)a2);
  }
  else
  {
    *(unsigned char *)uint64_t result = 0;
    *(_DWORD *)(result + 24) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(result, a2);
    *(void *)(v3 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = 0;
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    *(void *)(v3 + 40) = v5;
    *(unsigned char *)(v3 + 48) = 1;
  }
  return result;
}

uint64_t WebCore::OwnerPermissionsPolicyData::operator=(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 16), v4);
  }
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  if (v8) {
    WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::deallocateTable(v8, v4);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::reset[abi:sn180100](uint64_t result, void *a2)
{
  if (*(unsigned char *)(result + 48))
  {
    uint64_t v2 = result;
    uint64_t result = *(void *)(result + 40);
    if (result) {
      uint64_t result = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::deallocateTable(result, a2);
    }
    uint64_t v3 = *(void *)(v2 + 32);
    if (v3) {
      uint64_t result = WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    uint64_t v4 = *(unsigned int *)(v2 + 24);
    if (v4 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v4])(&v5, v2);
    }
    *(_DWORD *)(v2 + 24) = -1;
    *(unsigned char *)(v2 + 48) = 0;
  }
  return result;
}

uint64_t API::SubstituteData::SubstituteData(uint64_t a1, uint64_t *a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, uint64_t a6, char a7)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *a2;
  *a2 = 0;
  *(void *)a1 = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v10;
  uint64_t v11 = *a3;
  if (*a3) {
    *v11 += 2;
  }
  *(void *)(a1 + 16) = v11;
  int v12 = *a4;
  if (*a4) {
    *v12 += 2;
  }
  *(void *)(a1 + 24) = v12;
  unint64_t v13 = *a5;
  if (*a5) {
    *v13 += 2;
  }
  *(void *)(a1 + 32) = v13;
  if (a6) {
    CFRetain(*(CFTypeRef *)(a6 + 8));
  }
  *(void *)(a1 + 40) = a6;
  *(unsigned char *)(a1 + 48) = a7;
  return a1;
}

void std::default_delete<API::SubstituteData>::operator()[abi:sn180100](int a1, WTF *this)
{
  if (this)
  {
    uint64_t v3 = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v3) {
      CFRelease(*(CFTypeRef *)(v3 + 8));
    }
    uint64_t v4 = (WTF::StringImpl *)*((void *)this + 4);
    *((void *)this + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, this);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    char v5 = (WTF::StringImpl *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, this);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = (WTF::StringImpl *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, this);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = *(WTF **)this;
    if (*(void *)this)
    {
      *(void *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v7, this);
    }
    WTF::fastFree(this, this);
  }
}

void *std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes const&,WebCore::FontAttributes*>(void *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(_DWORD **)a2;
    if (*(void *)a2) {
      ++*v4;
    }
    *uint64_t result = v4;
    WebCore::Color::Color((WebCore::Color *)(result + 1), (const Color *)(a2 + 8));
    WebCore::Color::Color((WebCore::Color *)(v3 + 2), (const Color *)(a2 + 16));
    WebCore::Color::Color((WebCore::Color *)(v3 + 3), (const Color *)(a2 + 24));
    *((_OWORD *)v3 + 2) = *(_OWORD *)(a2 + 32);
    *((_WORD *)v3 + 24) = *(_WORD *)(a2 + 48);
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v3 + 7), (uint64_t *)(a2 + 56));
    __int16 v5 = *(_WORD *)(a2 + 72);
    *((unsigned char *)v3 + 74) = *(unsigned char *)(a2 + 74);
    *((_WORD *)v3 + 36) = v5;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0xAAAAAAB)
  {
    int v5 = 24 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)uint64_t v2 = v6;
    unsigned int v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = *a2 + 24 * v7;
      do
      {
        *(unsigned char *)uint64_t v6 = *(unsigned char *)v8;
        uint64_t v10 = *(_DWORD **)(v8 + 8);
        if (v10) {
          *v10 += 2;
        }
        *(void *)(v6 + 8) = v10;
        int v11 = *(_DWORD *)(v8 + 16);
        *(unsigned char *)(v6 + 20) = *(unsigned char *)(v8 + 20);
        *(_DWORD *)(v6 + 16) = v11;
        v8 += 24;
        v6 += 24;
      }
      while (v8 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void *std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes,WebCore::FontAttributes*>(void *result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    *a2 = 0;
    *uint64_t result = v4;
    WebCore::Color::Color();
    WebCore::Color::Color();
    WebCore::Color::Color();
    *((_OWORD *)v3 + 2) = *((_OWORD *)a2 + 2);
    *((_WORD *)v3 + 24) = *((_WORD *)a2 + 24);
    v3[7] = 0;
    v3[8] = 0;
    uint64_t v5 = a2[7];
    a2[7] = 0;
    v3[7] = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = 0;
    *((_DWORD *)v3 + 16) = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = 0;
    *((_DWORD *)v3 + 17) = v5;
    LOWORD(v5) = *((_WORD *)a2 + 36);
    *((unsigned char *)v3 + 74) = *((unsigned char *)a2 + 74);
    *((_WORD *)v3 + 36) = v5;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>::KeyValuePair<WTF::ASCIILiteral,WebCore::DOMPasteAccessCategory>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v6 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v6 = v8;
    }
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)a1 = 0;
  }
  *(unsigned char *)(a1 + 8) = *a4;
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::DOMPasteAccessCategory,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::DOMPasteAccessCategory>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::allocateTable(v5);
  *a1 = result;
  *(_DWORD *)(result - 4) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v9 = (WTF::ASCIICaseInsensitiveHash **)(v2 + 16 * i);
      uint64_t v10 = *v9;
      if (*v9 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (v10)
        {
          uint64_t v11 = *a1;
          if (*a1) {
            unsigned int v12 = *(_DWORD *)(v11 - 8);
          }
          else {
            unsigned int v12 = 0;
          }
          int v13 = WTF::ASCIICaseInsensitiveHash::hash(v10, v7);
          int v14 = 0;
          do
          {
            uint64_t v15 = v13 & v12;
            int v13 = ++v14 + v15;
          }
          while (*(void *)(v11 + 16 * v15));
          uint64_t v16 = v11 + 16 * v15;
          *(void *)uint64_t v16 = 0;
          int v17 = *v9;
          *uint64_t v9 = 0;
          *(void *)uint64_t v16 = v17;
          *(unsigned char *)(v16 + 8) = *(unsigned char *)(v2 + 16 * i + 8);
          uint64_t v18 = *v9;
          *uint64_t v9 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v7);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
        }
        else
        {
          *uint64_t v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ExecuteEditCommandWithCallback,WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},unsigned long long>(uint64_t a1, uint64_t **a2, long long *a3, uint64_t a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2237;
  *((void *)v8 + 1) = a4;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  long long v15 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v9 = &unk_1EE9D9C68;
  *(_OWORD *)(v9 + 8) = v15;
  v16[0] = v9;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v17 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, 0, (uint64_t)v16, 1);
  if (v17)
  {
    uint64_t v11 = v16[0];
    v16[0] = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExecuteEditCommandWithCallback,WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D9C68;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9D9C68;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  int v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExecuteEditCommandWithCallback,WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::ExecuteEditCommand>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::ExecuteEditCommand &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ExecuteEditCommand&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ExecuteEditCommand>(*(void *)(v7 + 24), *(uint64_t ***)a3, *(void *)(v7 + 16), *(unsigned char *)(a3 + 8));
        uint64_t v8 = *(const void **)(v6 + 8);
        CFRelease(v8);
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(uint64_t ***)a3;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v12 = *(unsigned char *)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ExecuteEditCommand>(v9, v10, v11, v12);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ExecuteEditCommand>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2236;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v16 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v14) = 0;
  char v15 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v16, a4, (uint64_t)&v14, 1);
  if (v15)
  {
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0,unsigned long long>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2335;
  *((void *)v8 + 1) = a4;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  long long v28 = v8;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v8, *(void *)a2);
  char v9 = *(unsigned char *)(a2 + 8);
  uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (v11)
  {
    unsigned char *v10 = v9;
    IPC::ArgumentCoder<WebCore::DragData,void>::encode(v8, *(void *)(a2 + 16));
    char v31 = *((unsigned char *)a3 + 16);
    char v12 = v31;
    v32[0] = *(long long *)((char *)a3 + 24);
    *(_OWORD *)((char *)v32 + 10) = *(long long *)((char *)a3 + 34);
    uint64_t v13 = *((void *)a3 + 7);
    *((void *)a3 + 7) = 0;
    long long v34 = *(long long *)((char *)a3 + 72);
    char v35 = *((unsigned char *)a3 + 88);
    uint64_t v14 = *((void *)a3 + 12);
    *((void *)a3 + 12) = 0;
    char v37 = *((unsigned char *)a3 + 104);
    char v15 = v37;
    uint64_t v16 = *((void *)a3 + 8);
    *((void *)a3 + 8) = 0;
    long long v27 = *a3;
    uint64_t v29 = *(void *)a3;
    *((void *)a3 + 1) = 0;
    uint64_t v17 = WTF::fastMalloc((WTF *)0x78);
    *(void *)uint64_t v17 = &unk_1EE9D9C90;
    *(_OWORD *)(v17 + 8) = v27;
    *(unsigned char *)(v17 + 24) = v12;
    long long v18 = v32[0];
    *(_OWORD *)(v17 + 42) = *(_OWORD *)((char *)v32 + 10);
    *(_OWORD *)(v17 + 32) = v18;
    uint64_t v30 = 0;
    v33[0] = 0;
    *(void *)(v17 + 64) = v13;
    v33[1] = 0;
    *(void *)(v17 + 72) = v16;
    long long v19 = v34;
    *(unsigned char *)(v17 + 96) = v35;
    *(_OWORD *)(v17 + 80) = v19;
    *(void *)(v17 + 104) = v14;
    *(unsigned char *)(v17 + 112) = v15;
    uint64_t v36 = 0;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v20);
    uint64_t v21 = v30;
    uint64_t v30 = 0;
    if (v21) {
      CFRelease(*(CFTypeRef *)(v21 + 8));
    }
    uint64_t v29 = v17;
    uint64_t v30 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    char v31 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, 0, (uint64_t)&v29, 1);
    if (v31)
    {
      uint64_t v23 = v29;
      uint64_t v29 = 0;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
    }
    uint64_t result = (uint64_t)v28;
    long long v28 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v22);
      return WTF::fastFree(v25, v26);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0>(WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D9C90;
  int v3 = (WTF::StringImpl *)a1[13];
  a1[13] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 8), a2);
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0>(WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9D9C90;
  int v3 = (WTF::StringImpl *)*((void *)a1 + 13);
  *((void *)a1 + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 64, a2);
  uint64_t v5 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(a1, v4);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0>(WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  if (!a2 || (unint64_t v4 = *a2) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    IPC::Connection::cancelReply<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0>(v10);
    return;
  }
  unint64_t v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    unint64_t v23 = 0;
    unint64_t v22 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v31 = a2[3];
    if (v31)
    {
      if (v5)
      {
        (*(void (**)(unint64_t))(*(void *)v31 + 16))(v31);
        unint64_t v23 = 0;
        unint64_t v49 = *a2;
        unint64_t v50 = a2[1];
        unint64_t v51 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        unint64_t v22 = 0;
        if (v51 && v50)
        {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v51 + 16))(v51, v49);
          unint64_t v22 = *a2;
          unint64_t v23 = a2[1];
        }
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v22 = 0;
      }
    }
LABEL_39:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v21 = (unint64_t *)a2[3];
    if (v21) {
      goto LABEL_67;
    }
    goto LABEL_40;
  }
  uint64_t v6 = (unsigned __int8 *)a2[2];
  a2[2] = (unint64_t)(v6 + 1);
  if (*v6 >= 2u)
  {
    unint64_t v23 = v5;
    unint64_t v22 = v4;
    goto LABEL_39;
  }
  if (!*v6)
  {
    LOWORD(v7) = 0;
    __int16 i = 0;
    goto LABEL_16;
  }
  if (v5 <= (unint64_t)&v6[-v4 + 1])
  {
    unint64_t v28 = 0;
    unint64_t v29 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v40 = a2[3];
    if (v40)
    {
      (*(void (**)(unint64_t))(*(void *)v40 + 16))(v40);
      unint64_t v28 = 0;
      unint64_t v41 = *a2;
      unint64_t v42 = a2[1];
      unint64_t v43 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v29 = 0;
      if (v43)
      {
        if (v42)
        {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v43 + 16))(v43, v41);
          unint64_t v29 = *a2;
          unint64_t v28 = a2[1];
        }
      }
    }
  }
  else
  {
    a2[2] = (unint64_t)(v6 + 2);
    unsigned int v7 = v6[1];
    if (v7 <= 0x20 && ((1 << v7) & 0x100010116) != 0)
    {
      __int16 i = 256;
LABEL_16:
      unsigned int v11 = 0x10000;
      goto LABEL_17;
    }
    unint64_t v28 = v5;
    unint64_t v29 = v4;
  }
  *a2 = 0;
  a2[1] = 0;
  unint64_t v30 = a2[3];
  if (v30 && v28) {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v30 + 16))(v30, v29, v28);
  }
  unsigned int v11 = 0;
  LOWORD(v7) = 0;
  for (__int16 i = 256; ; __int16 i = 0)
  {
LABEL_17:
    if (!HIWORD(v11)) {
      goto LABEL_45;
    }
    unint64_t v12 = a2[1];
    unint64_t v13 = *a2;
    unint64_t v14 = a2[2] - *a2;
    if (v12 <= v14)
    {
      unint64_t v32 = 0;
      unint64_t v33 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v34 = a2[3];
      if (v34)
      {
        if (v12)
        {
          (*(void (**)(unint64_t))(*(void *)v34 + 16))(v34);
          unint64_t v33 = *a2;
          unint64_t v32 = a2[1];
        }
        else
        {
          unint64_t v32 = 0;
          unint64_t v33 = 0;
        }
      }
      goto LABEL_42;
    }
    char v15 = (unsigned __int8 *)(v13 + v14);
    a2[2] = (unint64_t)(v15 + 1);
    if (!v13)
    {
      unint64_t v32 = v12;
      unint64_t v33 = 0;
LABEL_42:
      unint64_t v12 = 0;
      unint64_t v13 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v35 = a2[3];
      if (v35)
      {
        if (v32)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v35 + 16))(v35, v33, v32);
LABEL_45:
          unint64_t v13 = *a2;
          unint64_t v12 = a2[1];
        }
        else
        {
          unint64_t v12 = 0;
          unint64_t v13 = 0;
        }
      }
LABEL_46:
      *a2 = 0;
      a2[1] = 0;
      unint64_t v36 = a2[3];
      if (!v36) {
        goto LABEL_47;
      }
LABEL_62:
      if (v12) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v36 + 16))(v36, v13);
      }
      goto LABEL_47;
    }
    unsigned int v16 = *v15;
    if (v16 >= 7) {
      goto LABEL_46;
    }
    if (v12 <= (unint64_t)&v15[-v13 + 1])
    {
      unint64_t v44 = 0;
      unint64_t v45 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v46 = a2[3];
      if (v46)
      {
        (*(void (**)(unint64_t))(*(void *)v46 + 16))(v46);
        unint64_t v44 = 0;
        unint64_t v52 = *a2;
        unint64_t v53 = a2[1];
        unint64_t v54 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        unint64_t v45 = 0;
        if (v54)
        {
          if (v53)
          {
            (*(void (**)(unint64_t, unint64_t))(*(void *)v54 + 16))(v54, v52);
            unint64_t v45 = *a2;
            unint64_t v44 = a2[1];
          }
        }
      }
      goto LABEL_57;
    }
    a2[2] = (unint64_t)(v15 + 2);
    unsigned int v17 = v15[1];
    if (v17 >= 2) {
      break;
    }
    unint64_t v18 = ((unint64_t)(v15 + 5) & 0xFFFFFFFFFFFFFFFCLL) - v13;
    if (v12 < v18 || v12 - v18 <= 3)
    {
      *a2 = 0;
      a2[1] = 0;
      unint64_t v48 = a2[3];
      if (!v48) {
        goto LABEL_47;
      }
      (*(void (**)(unint64_t))(*(void *)v48 + 16))(v48);
      unint64_t v13 = *a2;
      unint64_t v12 = a2[1];
      unint64_t v36 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (!v36) {
        goto LABEL_47;
      }
      goto LABEL_62;
    }
    long long v19 = (int *)(v13 + v18);
    int v20 = *v19;
    a2[2] = (unint64_t)(v19 + 1);
    IPC::Decoder::decode<WebCore::IntRect>(a2, (uint64_t)&v60);
    if (!v61) {
      goto LABEL_47;
    }
    IPC::Decoder::decode<WebCore::IntRect>(a2, (uint64_t)&v62);
    if (!v63) {
      goto LABEL_47;
    }
    uint64_t v21 = IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>(a2, (uint64_t)&v64);
    if (!v66) {
      goto LABEL_47;
    }
    unint64_t v23 = v61;
    if (v61)
    {
      unint64_t v23 = v63;
      if (v63)
      {
        IntRect v55 = v60;
        long long v56 = v62;
        long long v57 = v64;
        long long v58 = v65;
        char v59 = 1;
        uint64_t v24 = *(void *)(a1 + 8);
        uint64_t v25 = *(void *)(v24 + 40);
        if (v25 && *(void *)(v25 + 8))
        {
          if (BYTE8(v58))
          {
            *(void *)(a1 + 32) = v58;
            uint64_t v26 = a1 + 32;
            char v27 = *(unsigned char *)(v26 - 8);
            long long v64 = v57;
            LOBYTE(v65) = 1;
            WebKit::WebPageProxy::performDragControllerAction(v24, v27, v26, (uint64_t)&v64);
          }
          else
          {
            WebKit::WebPageProxy::didPerformDragControllerAction(v24, v7 | v11 | i, v16, v17 != 0, v20, &v55, &v56);
          }
        }
        return;
      }
    }
    __break(1u);
LABEL_67:
    if (v23) {
      (*(void (**)(unint64_t *, unint64_t, unint64_t))(*v21 + 16))(v21, v22, v23);
    }
LABEL_40:
    unsigned int v11 = 0;
    LOWORD(v7) = 0;
  }
  unint64_t v44 = v12;
  unint64_t v45 = v13;
LABEL_57:
  *a2 = 0;
  a2[1] = 0;
  unint64_t v47 = a2[3];
  if (v47 && v44) {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v47 + 16))(v47, v45, v44);
  }
LABEL_47:
  unint64_t v37 = *a2;
  unint64_t v38 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t v39 = a2[3];
  if (v39 && v38) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v39 + 16))(v39, v37);
  }
  IPC::Connection::cancelReply<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0>(*(void *)(a1 + 8));
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0>(uint64_t result)
{
  v3.m_location = 0;
  v3.uint64_t m_size = 0;
  long long v2 = 0uLL;
  uint64_t v1 = *(void *)(result + 40);
  if (v1)
  {
    if (*(void *)(v1 + 8)) {
      return WebKit::WebPageProxy::didPerformDragControllerAction(result, 0, 0, 0, 0, &v3, &v2);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, unint64_t a3)
{
  unint64_t v4 = result;
  if ((unint64_t)result <= a3)
  {
    if (a2 != result)
    {
      uint64_t v5 = 0;
      unint64_t v6 = a3 + a2 - result;
      do
      {
        uint64_t v7 = v6 + v5;
        *(_DWORD *)(v7 - 160) = 0;
        uint64_t v8 = (char *)a2 + v5;
        long long v9 = *(_OWORD *)((char *)a2 + v5 - 156);
        *(_OWORD *)(v7 - 144) = *(_OWORD *)((char *)a2 + v5 - 144);
        *(_OWORD *)(v7 - 156) = v9;
        long long v10 = *(_OWORD *)((char *)a2 + v5 - 128);
        long long v11 = *(_OWORD *)((char *)a2 + v5 - 112);
        long long v12 = *(_OWORD *)((char *)a2 + v5 - 80);
        *(_OWORD *)(v7 - 96) = *(_OWORD *)((char *)a2 + v5 - 96);
        *(_OWORD *)(v7 - 80) = v12;
        *(_OWORD *)(v7 - 128) = v10;
        *(_OWORD *)(v7 - 112) = v11;
        uint64_t v13 = *(void *)((char *)a2 + v5 - 64);
        *((void *)v8 - 8) = 0;
        *(void *)(v7 - 64) = v13;
        *(unsigned char *)(v7 - 56) = *((unsigned char *)a2 + v5 - 56);
        *(void *)(v7 - 48) = 0;
        *(void *)(v7 - 40) = 0;
        uint64_t v14 = *(void *)((char *)a2 + v5 - 48);
        *(void *)((char *)a2 + v5 - 48) = 0;
        *(void *)(v7 - 48) = v14;
        LODWORD(v14) = *(_DWORD *)((char *)a2 + v5 - 40);
        *((_DWORD *)v8 - 10) = 0;
        *(_DWORD *)(v7 - 40) = v14;
        LODWORD(v14) = *(_DWORD *)((char *)a2 + v5 - 36);
        *((_DWORD *)v8 - 9) = 0;
        *(_DWORD *)(v7 - 36) = v14;
        *(void *)(v7 - 32) = 0;
        *(void *)(v7 - 24) = 0;
        uint64_t v15 = *(void *)((char *)a2 + v5 - 32);
        *(void *)((char *)a2 + v5 - 32) = 0;
        *(void *)(v7 - 32) = v15;
        LODWORD(v15) = *(_DWORD *)((char *)a2 + v5 - 24);
        *((_DWORD *)v8 - 6) = 0;
        *(_DWORD *)(v7 - 24) = v15;
        LODWORD(v15) = *(_DWORD *)((char *)a2 + v5 - 20);
        *((_DWORD *)v8 - 5) = 0;
        *(_DWORD *)(v7 - 20) = v15;
        uint64_t v16 = *(void *)((char *)a2 + v5 - 16);
        *((void *)v8 - 2) = 0;
        *(void *)(v7 - 16) = v16;
        unsigned int v17 = *(const void **)((char *)a2 + v5 - 16);
        *((void *)v8 - 2) = 0;
        if (v17) {
          CFRelease(v17);
        }
        WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + v5 - 32, a2);
        WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + v5 - 48, v18);
        uint64_t result = (WTF::StringImpl *)*((void *)v8 - 8);
        *((void *)v8 - 8) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        v5 -= 160;
      }
      while ((WTF::StringImpl *)((char *)a2 + v5) != v4);
    }
  }
  else
  {
    return WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::move(result, a2, a3);
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      *(_DWORD *)uint64_t v7 = 0;
      uint64_t v8 = (char *)v5 + v6;
      long long v9 = *(_OWORD *)((char *)v5 + v6 + 4);
      *(_OWORD *)(v7 + 16) = *(_OWORD *)((char *)v5 + v6 + 16);
      *(_OWORD *)(v7 + 4) = v9;
      long long v10 = *(_OWORD *)((char *)v5 + v6 + 32);
      long long v11 = *(_OWORD *)((char *)v5 + v6 + 48);
      long long v12 = *(_OWORD *)((char *)v5 + v6 + 80);
      *(_OWORD *)(v7 + 64) = *(_OWORD *)((char *)v5 + v6 + 64);
      *(_OWORD *)(v7 + 80) = v12;
      *(_OWORD *)(v7 + 32) = v10;
      *(_OWORD *)(v7 + 48) = v11;
      uint64_t v13 = *(void *)((char *)v5 + v6 + 96);
      *((void *)v8 + 12) = 0;
      *(void *)(v7 + 96) = v13;
      *(unsigned char *)(v7 + 104) = *((unsigned char *)v5 + v6 + 104);
      *(void *)(v7 + 112) = 0;
      *(void *)(v7 + 120) = 0;
      uint64_t v14 = *(void *)((char *)v5 + v6 + 112);
      *(void *)((char *)v5 + v6 + 112) = 0;
      *(void *)(v7 + 112) = v14;
      LODWORD(v14) = *(_DWORD *)((char *)v5 + v6 + 120);
      *((_DWORD *)v8 + 30) = 0;
      *(_DWORD *)(v7 + 120) = v14;
      LODWORD(v14) = *(_DWORD *)((char *)v5 + v6 + 124);
      *((_DWORD *)v8 + 31) = 0;
      *(_DWORD *)(v7 + 124) = v14;
      *(void *)(v7 + 128) = 0;
      *(void *)(v7 + 136) = 0;
      uint64_t v15 = *(void *)((char *)v5 + v6 + 128);
      *(void *)((char *)v5 + v6 + 128) = 0;
      *(void *)(v7 + 128) = v15;
      LODWORD(v15) = *(_DWORD *)((char *)v5 + v6 + 136);
      *((_DWORD *)v8 + 34) = 0;
      *(_DWORD *)(v7 + 136) = v15;
      LODWORD(v15) = *(_DWORD *)((char *)v5 + v6 + 140);
      *((_DWORD *)v8 + 35) = 0;
      *(_DWORD *)(v7 + 140) = v15;
      uint64_t v16 = *(void *)((char *)v5 + v6 + 144);
      *((void *)v8 + 18) = 0;
      *(void *)(v7 + 144) = v16;
      unsigned int v17 = *(const void **)((char *)v5 + v6 + 144);
      *((void *)v8 + 18) = 0;
      if (v17) {
        CFRelease(v17);
      }
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6 + 128, a2);
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6 + 112, v18);
      uint64_t result = (WTF::StringImpl *)*((void *)v8 + 12);
      *((void *)v8 + 12) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v6 += 160;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

uint64_t WTF::VectorCopier<false,WebKit::WebMouseEvent>::uninitializedCopy<WebKit::WebMouseEvent>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      *(_DWORD *)uint64_t v7 = 0;
      uint64_t v8 = v5 + v6;
      long long v9 = *(_OWORD *)(v5 + v6 + 4);
      *(_OWORD *)(v7 + 16) = *(_OWORD *)(v5 + v6 + 16);
      *(_OWORD *)(v7 + 4) = v9;
      long long v10 = *(_OWORD *)(v5 + v6 + 32);
      long long v11 = *(_OWORD *)(v5 + v6 + 48);
      long long v12 = *(_OWORD *)(v5 + v6 + 80);
      *(_OWORD *)(v7 + 64) = *(_OWORD *)(v5 + v6 + 64);
      *(_OWORD *)(v7 + 80) = v12;
      *(_OWORD *)(v7 + 32) = v10;
      *(_OWORD *)(v7 + 48) = v11;
      uint64_t v13 = *(_DWORD **)(v5 + v6 + 96);
      if (v13) {
        *v13 += 2;
      }
      *(void *)(v7 + 96) = v13;
      *(unsigned char *)(v7 + 104) = *(unsigned char *)(v8 + 104);
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7 + 112, (uint64_t *)(v8 + 112));
      uint64_t result = WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7 + 128, (uint64_t *)(v8 + 128));
      v6 += 144;
    }
    while (v5 + v6 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  if ((unsigned int *)a2 != a1)
  {
    unsigned int v4 = a1[3];
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
        unsigned int v4 = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebKit::WebMouseEvent>::destruct((WTF::StringImpl *)(*(void *)a1 + 144 * v5), (WTF::StringImpl *)(*(void *)a1 + 144 * v4));
      a1[3] = v5;
      unsigned int v4 = v5;
    }
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebKit::WebMouseEvent const*,WebKit::WebMouseEvent const*,WebKit::WebMouseEvent*>((uint64_t)&v7, *(void *)a2, *(void *)a2 + 144 * v4, *(void *)a1);
    WTF::VectorCopier<false,WebKit::WebMouseEvent>::uninitializedCopy<WebKit::WebMouseEvent>(*(void *)a2 + 144 * a1[3], *(void *)a2 + 144 * *(unsigned int *)(a2 + 12), *(void *)a1 + 144 * a1[3]);
    a1[3] = *(_DWORD *)(a2 + 12);
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebKit::WebMouseEvent const*,WebKit::WebMouseEvent const*,WebKit::WebMouseEvent*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    long long v9 = *(_OWORD *)(a2 + v7 + 4);
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + v7 + 16);
    *(_OWORD *)(v8 + 4) = v9;
    long long v10 = *(_OWORD *)(a2 + v7 + 32);
    long long v11 = *(_OWORD *)(a2 + v7 + 48);
    long long v12 = *(_OWORD *)(a2 + v7 + 80);
    *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + v7 + 64);
    *(_OWORD *)(v8 + 80) = v12;
    *(_OWORD *)(v8 + 32) = v10;
    *(_OWORD *)(v8 + 48) = v11;
    WTF::String::operator=((uint64_t *)(a4 + v7 + 96), (WTF::StringImpl **)(a2 + v7 + 96));
    *(unsigned char *)(v8 + 104) = *(unsigned char *)(a2 + v7 + 104);
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a4 + v7 + 112);
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a4 + v7 + 128);
    v7 += 144;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::OwnerPermissionsPolicyData,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned __int8 *)(result + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(unsigned char *)(result + 48))
    {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(result, a2);
      WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(&v7, (unsigned __int8 **)(a2 + 32));
      uint64_t v5 = *(void *)(v3 + 32);
      *(void *)(v3 + 32) = v7;
      uint64_t v7 = v5;
      if (v5) {
        WTF::fastFree((WTF *)(v5 - 16), v4);
      }
      WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(&v7, (unsigned __int8 **)(a2 + 40));
      uint64_t result = *(void *)(v3 + 40);
      *(void *)(v3 + 40) = v7;
      uint64_t v7 = result;
      if (result) {
        return WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::deallocateTable(result, v6);
      }
    }
  }
  else if (*(unsigned char *)(result + 48))
  {
    return std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::reset[abi:sn180100](result, (void *)a2);
  }
  else
  {
    uint64_t result = std::construct_at[abi:sn180100]<WebCore::OwnerPermissionsPolicyData,WebCore::OwnerPermissionsPolicyData const&,WebCore::OwnerPermissionsPolicyData*>(result, a2);
    *(unsigned char *)(v3 + 48) = 1;
  }
  return result;
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS2_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIN8Messages7WebPage25FindStringIncludingImagesEEEDaOT_SD_EUlRSK_T0_E_vJRNS2_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEE4callESQ_SX_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = **(_DWORD ***)(a1 + 8);
  ++*v6;
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2243;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v16 = v7;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v7, v5);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9D9CE0;
  v8[1] = v6;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v15 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v16, 0, (uint64_t)v14, 1);
  if (v15)
  {
    uint64_t v10 = v14[0];
    v14[0] = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage25FindStringIncludingImagesEZZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS8_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIS7_EEDaOT_SJ_ENKUlRSN_T0_E_clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEESM_SP_SQ_EUlNSt3__18optionalINSV_16ProcessQualifiedINSU_INSV_19FrameIdentifierTypeESY_yLSZ_1EEEEEEEONS_6VectorINSV_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibE_EENSG_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlS1G_E_vJS1G_EED1Ev(void *a1)
{
  long long v2 = (WebKit::FindStringCallbackAggregator *)a1[1];
  *a1 = &unk_1EE9D9CE0;
  a1[1] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage25FindStringIncludingImagesEZZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS8_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIS7_EEDaOT_SJ_ENKUlRSN_T0_E_clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEESM_SP_SQ_EUlNSt3__18optionalINSV_16ProcessQualifiedINSU_INSV_19FrameIdentifierTypeESY_yLSZ_1EEEEEEEONS_6VectorINSV_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibE_EENSG_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlS1G_E_vJS1G_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (WebKit::FindStringCallbackAggregator *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D9CE0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage25FindStringIncludingImagesEZZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS8_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIS7_EEDaOT_SJ_ENKUlRSN_T0_E_clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEESM_SP_SQ_EUlNSt3__18optionalINSV_16ProcessQualifiedINSU_INSV_19FrameIdentifierTypeESY_yLSZ_1EEEEEEEONS_6VectorINSV_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibE_EENSG_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlS1G_E_vJS1G_EE4callES1G_(uint64_t a1, IPC::Decoder *a2)
{
  if (a2)
  {
    if (*(void *)a2)
    {
      IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>>(a2, &v5);
      if (v11)
      {
        long long v12 = v5;
        uint64_t v13 = v6;
        WebKit::FindStringCallbackAggregator::foundString(*(void *)(a1 + 8), (uint64_t)&v12, v9, v10);
        if (v11)
        {
          unsigned int v4 = v7;
          if (v7)
          {
            uint64_t v7 = 0;
            int v8 = 0;
            WTF::fastFree(v4, v3);
          }
        }
      }
    }
  }
}

WebKit::FindStringCallbackAggregator *WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(WebKit::FindStringCallbackAggregator *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator(result);
    return (WebKit::FindStringCallbackAggregator *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS2_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIN8Messages7WebPage10FindStringEEEDaOT_SD_EUlRSK_T0_E_vJRNS2_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEE4callESQ_SX_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = **(_DWORD ***)(a1 + 8);
  ++*v6;
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2242;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v16 = v7;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v7, v5);
  int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v8 = &unk_1EE9D9D30;
  v8[1] = v6;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v15 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v16, 0, (uint64_t)v14, 1);
  if (v15)
  {
    uint64_t v10 = v14[0];
    v14[0] = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage10FindStringEZZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS8_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIS7_EEDaOT_SJ_ENKUlRSN_T0_E_clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEESM_SP_SQ_EUlNSt3__18optionalINSV_16ProcessQualifiedINSU_INSV_19FrameIdentifierTypeESY_yLSZ_1EEEEEEEONS_6VectorINSV_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibE_EENSG_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlS1G_E_vJS1G_EED1Ev(void *a1)
{
  long long v2 = (WebKit::FindStringCallbackAggregator *)a1[1];
  *a1 = &unk_1EE9D9D30;
  a1[1] = 0;
  if (v2) {
    WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage10FindStringEZZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS8_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIS7_EEDaOT_SJ_ENKUlRSN_T0_E_clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEESM_SP_SQ_EUlNSt3__18optionalINSV_16ProcessQualifiedINSU_INSV_19FrameIdentifierTypeESY_yLSZ_1EEEEEEEONS_6VectorINSV_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibE_EENSG_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlS1G_E_vJS1G_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (WebKit::FindStringCallbackAggregator *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D9D30;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage10FindStringEZZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS8_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIS7_EEDaOT_SJ_ENKUlRSN_T0_E_clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEESM_SP_SQ_EUlNSt3__18optionalINSV_16ProcessQualifiedINSU_INSV_19FrameIdentifierTypeESY_yLSZ_1EEEEEEEONS_6VectorINSV_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibE_EENSG_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlS1G_E_vJS1G_EE4callES1G_(uint64_t a1, IPC::Decoder *a2)
{
  if (a2)
  {
    if (*(void *)a2)
    {
      IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>>(a2, &v5);
      if (v11)
      {
        long long v12 = v5;
        uint64_t v13 = v6;
        WebKit::FindStringCallbackAggregator::foundString(*(void *)(a1 + 8), (uint64_t)&v12, v9, v10);
        if (v11)
        {
          unsigned int v4 = v7;
          if (v7)
          {
            uint64_t v7 = 0;
            int v8 = 0;
            WTF::fastFree(v4, v3);
          }
        }
      }
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3API21SerializedScriptValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSG_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3API21SerializedScriptValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSG_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}