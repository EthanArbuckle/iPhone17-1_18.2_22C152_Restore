uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RequestPushPermission,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  IPC::Encoder *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v15;
  void *v16;
  void *v17;
  IPC::Encoder *v18;

  v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)v7 = 680;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  v18 = v7;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v7, *a2);
  v8 = *a3;
  *a3 = 0;
  v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &unk_1EE9C9338;
  v9[1] = v8;
  v17 = v9;
  v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  v12 = v17;
  v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

IPC::Encoder *WebKit::NetworkNotificationManager::setAppBadge(IPC::Encoder *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  uint64_t v4 = *((void *)result + 2);
  if (v4)
  {
    uint64_t v7 = *(void *)(v4 + 32);
    uint64_t v6 = v4 + 32;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
    v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)v9 = 681;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    v14 = v9;
    IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v9, a2);
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v9, (uint64_t)v13);
    (*(void (**)(uint64_t, IPC::Encoder **))(*(void *)v6 + 16))(v6, &v14);
    result = v14;
    v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (IPC::Encoder *)WTF::fastFree(v11, v12);
    }
  }
  return result;
}

uint64_t WebKit::NetworkNotificationManager::subscribeToPushService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    v8[0] = a2;
    v8[1] = a3;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(v5 + 32, (uint64_t)v8, a4);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v8[0]) = 16;
    int v9 = 1;
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v8);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    if (v9 != -1) {
      return ((uint64_t (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS6_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v9])(&v10, v8);
    }
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 685;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  v18 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, **(const void ***)(a2 + 8), *(unsigned int *)(*(void *)(a2 + 8) + 12));
  uint64_t v8 = *a3;
  *a3 = 0;
  int v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9C9360;
  v9[1] = v8;
  v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  v12 = v17;
  v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

uint64_t WebKit::NetworkNotificationManager::unsubscribeFromPushService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    v9[0] = a2;
    v9[1] = v11;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(v6 + 32, (uint64_t)v9, a5);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v9[0]) = 16;
    int v10 = 1;
    uint64_t v8 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v8 + 16))(v8, v9);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    if (v10 != -1) {
      return ((uint64_t (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v10])(&v12, v9);
    }
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 686;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  v18 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v7, *(void *)(a2 + 8));
  uint64_t v8 = *a3;
  *a3 = 0;
  int v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9C9388;
  v9[1] = v8;
  v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  char v12 = v17;
  v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

uint64_t WebKit::NetworkNotificationManager::getPushSubscription(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v9 = a2;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(v3 + 32, &v9, a3);
  }
  else
  {
    v7[0] = 0;
    v7[80] = 0;
    v10[0] = 0;
    v10[80] = 0;
    int v11 = 0;
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v5 + 16))(v5, &v9);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    if (v11 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS7_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v11])(&v8, v10);
    }
    int v11 = -1;
    return std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v6);
  }
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 672;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  v18 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *a2);
  uint64_t v8 = *a3;
  *a3 = 0;
  int v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9C93C0;
  v9[1] = v8;
  v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  uint64_t v12 = v17;
  v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

uint64_t WebKit::NetworkNotificationManager::incrementSilentPushCount(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v7 = a2;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::IncrementSilentPushCount,WTF::CompletionHandler<void ()>>(v3 + 32, &v7, a3);
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::IncrementSilentPushCount,WTF::CompletionHandler<void ()(unsigned int)>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 674;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  v18 = v7;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v7, *a2);
  uint64_t v8 = *a3;
  *a3 = 0;
  int v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9C93F8;
  v9[1] = v8;
  v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  uint64_t v12 = v17;
  v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

uint64_t WebKit::NetworkNotificationManager::removeAllPushSubscriptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    char v6 = 0;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemoveAllPushSubscriptions,WTF::CompletionHandler<void ()>>(v2 + 32, (uint64_t)&v6, a2);
  }
  else
  {
    uint64_t v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemoveAllPushSubscriptions,WTF::CompletionHandler<void ()(unsigned int)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 678;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  v17 = v6;
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9C9420;
  v8[1] = v7;
  v16 = v8;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v17, &v16);
  uint64_t v11 = v16;
  v16 = 0;
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  uint64_t v12 = v17;
  v17 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::NetworkNotificationManager::removePushSubscriptionsForOrigin(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v7 = a2;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()>>(v3 + 32, &v7, a3);
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    char v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 679;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  v18 = v7;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v7, *a2);
  uint64_t v8 = *a3;
  *a3 = 0;
  int v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9C9448;
  v9[1] = v8;
  v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  uint64_t v12 = v17;
  v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

uint64_t WebKit::NetworkNotificationManager::getAppBadgeForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    char v6 = 0;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetAppBadgeForTesting,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>>(v2 + 32, (uint64_t)&v6, a2);
  }
  else
  {
    uint64_t v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, 0, 0);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetAppBadgeForTesting,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 667;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  v17 = v6;
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9C9470;
  v8[1] = v7;
  v16 = v8;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v17, &v16);
  uint64_t v11 = v16;
  v16 = 0;
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  uint64_t v12 = v17;
  v17 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::NetworkNotificationManager::getPermissionState(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebKit::getPushPermissionStateImpl(*(void *)(a1 + 16), a2, a3);
}

uint64_t WebKit::getPushPermissionStateImpl(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a1)
  {
    uint64_t v6 = a2;
    return IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>>(a1 + 32, &v6, a3);
  }
  else
  {
    uint64_t v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
}

uint64_t WebKit::NetworkNotificationManager::getPermissionStateSync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebKit::getPushPermissionStateImpl(*(void *)(a1 + 16), a2, a3);
}

WebKit::PCM::ClientImpl *WebKit::PCM::ClientImpl::ClientImpl(WebKit::PCM::ClientImpl *this, WebKit::NetworkSession *a2, atomic_uint *a3)
{
  *(void *)this = &unk_1EE9C90A0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v6 = (atomic_uint *)*((void *)a2 + 1);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *((void *)this + 1) = v6;
  atomic_fetch_add(a3 + 32, 1u);
  *((void *)this + 2) = a3;
  return this;
}

void *WebKit::PCM::ClientImpl::broadcastConsoleMessage(void *result, char a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t result = (void *)result[2];
      if (*((unsigned char *)result + 408)) {
        return WebKit::NetworkProcess::broadcastConsoleMessage((uint64_t)result, *(void *)(v4 + 24), 14, a2, a3);
      }
    }
  }
  return result;
}

BOOL WebKit::PCM::ClientImpl::featureEnabled(WebKit::PCM::ClientImpl *this)
{
  uint64_t v1 = *((void *)this + 1);
  return v1 && *(void *)(v1 + 8) && *(unsigned char *)(*((void *)this + 2) + 408) != 0;
}

BOOL WebKit::PCM::ClientImpl::debugModeEnabled(WebKit::PCM::ClientImpl *this)
{
  uint64_t v1 = *((void *)this + 1);
  return v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0 && *(unsigned char *)(v2 + 168) != 0;
}

BOOL WebKit::PCM::ClientImpl::usesEphemeralDataStore(WebKit::PCM::ClientImpl *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1 && (v2 = *(void *)(v1 + 8)) != 0 && (uint64_t v3 = *(void *)(v2 + 24), v3 < 0)) {
    return v3 != -1;
  }
  else {
    return 0;
  }
}

void WebKit::PCM::DaemonClient::broadcastConsoleMessage(uint64_t a1, unsigned int a2)
{
  {
    WebKit::PCM::DaemonConnectionSet::singleton(void)::set = 0;
    qword_1E93CFAC8 = 0;
  }
  WebKit::PCM::DaemonConnectionSet::broadcastConsoleMessage((void **)&WebKit::PCM::DaemonConnectionSet::singleton(void)::set, a2);
}

uint64_t WebKit::PCM::DaemonClient::featureEnabled(WebKit::PCM::DaemonClient *this)
{
  return 1;
}

BOOL WebKit::PCM::DaemonClient::debugModeEnabled(WebKit::PCM::DaemonClient *this)
{
    return qword_1E93CFAC8 != 0;
  BOOL result = 0;
  WebKit::PCM::DaemonConnectionSet::singleton(void)::set = 0;
  qword_1E93CFAC8 = 0;
  return result;
}

uint64_t WebKit::PendingDownload::isSynchronous(WebKit::PendingDownload *this)
{
  return 0;
}

uint64_t WebKit::PendingDownload::isAllowedToAskUserForCredentials(WebKit::PendingDownload *this)
{
  return *((unsigned __int8 *)this + 40);
}

void WebKit::NetworkNotificationManager::~NetworkNotificationManager(WebKit::NetworkNotificationManager *this, void *a2)
{
  *(void *)this = &unk_1EE9C9498;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9C9498;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(this, v4);
}

void WebKit::PCM::ClientImpl::~ClientImpl(WebKit::PCM::ClientImpl *this, void *a2)
{
  *(void *)this = &unk_1EE9C90A0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 32);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9C90A0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 32);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::PCM::ClientImpl::runningInDaemon(WebKit::PCM::ClientImpl *this)
{
  return 0;
}

void WebKit::PCM::DaemonClient::~DaemonClient(unsigned int **this, void *a2)
{
}

{
  void *v3;
  uint64_t vars8;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);

  WTF::fastFree((WTF *)this, v3);
}

uint64_t WebKit::PCM::DaemonClient::usesEphemeralDataStore(WebKit::PCM::DaemonClient *this)
{
  return 0;
}

uint64_t WebKit::PCM::DaemonClient::runningInDaemon(WebKit::PCM::DaemonClient *this)
{
  return 1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  BOOL result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 671;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  v18 = v7;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v7, *a2);
  uint64_t v8 = *a3;
  *a3 = 0;
  int v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9C9170;
  v9[1] = v8;
  v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  uint64_t v12 = v17;
  v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>>(Messages::PushClientConnection::GetPushPermissionState &&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9170;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>>(Messages::PushClientConnection::GetPushPermissionState &&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9170;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>>(Messages::PushClientConnection::GetPushPermissionState &&,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    return IPC::Connection::callReply<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>>(a2, v3);
  }
  else
  {
    uint64_t v5 = *v3;
    *uint64_t v3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
}

uint64_t IPC::Connection::callReply<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>>(uint64_t *a1, uint64_t *a2)
{
  unsigned __int16 v3 = IPC::Decoder::decode<std::tuple<WebCore::InspectorFrontendClientAppearance>>(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  if (v3 >= 0x100u) {
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, v3);
  }
  else {
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::DownloadMonitor::*&)(void),WebKit::DownloadMonitor*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  unsigned __int16 v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::Deque<WebKit::DownloadMonitor::Timestamp,10ul>::expandCapacity(uint64_t result)
{
  unint64_t v1 = *(unsigned int *)(result + 24);
  unint64_t v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF) {
    unint64_t v2 = 15;
  }
  if (v2 >= 0xFFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)(result + 16);
    unsigned int v5 = v2 + 1;
    BOOL result = WTF::fastMalloc((WTF *)(16 * (v2 + 1)));
    *(_DWORD *)(v3 + 24) = v5;
    *(void *)(v3 + 16) = result;
    uint64_t v7 = *(void *)v3;
    unint64_t v8 = *(void *)(v3 + 8);
    if (*(void *)v3 <= v8)
    {
      if (*(void *)v3 != v8)
      {
        v15 = (_OWORD *)(result + 16 * v7);
        v16 = (long long *)((char *)v4 + 16 * v7);
        uint64_t v17 = 16 * v8 - 16 * v7;
        do
        {
          long long v18 = *v16++;
          *v15++ = v18;
          v17 -= 16;
        }
        while (v17);
      }
    }
    else
    {
      if (v8)
      {
        uint64_t v9 = 16 * v8;
        uint64_t v10 = v4;
        do
        {
          long long v11 = *(_OWORD *)v10;
          uint64_t v10 = (WTF *)((char *)v10 + 16);
          *(_OWORD *)BOOL result = v11;
          result += 16;
          v9 -= 16;
        }
        while (v9);
        unsigned int v5 = *(_DWORD *)(v3 + 24);
        uint64_t v7 = *(void *)v3;
        BOOL result = *(void *)(v3 + 16);
      }
      if (v7 != v1)
      {
        uint64_t v12 = (long long *)((char *)v4 + 16 * v7);
        uint64_t v13 = 16 * v7 - 16 * v1;
        do
        {
          long long v14 = *v12++;
          *(_OWORD *)(result + 16 * v5 + v13) = v14;
          v13 += 16;
        }
        while (v13);
      }
      *(void *)uint64_t v3 = v7 - v1 + v5;
    }
    if ((WTF *)(v3 + 32) != v4 && v4)
    {
      if (*(WTF **)(v3 + 16) == v4)
      {
        *(void *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      return WTF::fastFree(v4, v6);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C91E8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C91E8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::ResourceRequest>>(a2, v5);
    if (v5[200])
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v5);
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v5);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v5);
      IPC::Connection::cancelReply<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(v2);
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    IPC::Connection::cancelReply<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(v4);
  }
}

void IPC::Connection::cancelReply<Messages::DownloadProxy::WillSendRequest,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>>(uint64_t *a1)
{
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)v4);
  uint64_t v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v4);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v4);
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<std::tuple<WebCore::ResourceRequest>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = IPC::ArgumentCoder<std::tuple<WebCore::ResourceRequest>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[200])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    BOOL result = (WebCore::ResourceRequestBase *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WebCore::ResourceRequestBase *)v7();
    }
  }
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebCore::ResourceRequest>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v5);
  char v3 = v6;
  if (v6)
  {
    std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)a2, (uint64_t)v5);
    char v3 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[200] = v3;
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v5);
}

WebCore::ResourceRequestBase *std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest>,false>::~__optional_destruct_base[abi:sn180100](WebCore::ResourceRequestBase *this)
{
  if (*((unsigned char *)this + 200))
  {
    uint64_t v2 = (const void *)*((void *)this + 24);
    *((void *)this + 24) = 0;
    if (v2) {
      CFRelease(v2);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase(this);
  }
  return this;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,BOOL>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9210;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9210;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(Messages::PushClientConnection::SetPushAndNotificationsEnabledForOrigin &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(void)> &&>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkNotificationManager::getPendingPushMessage(WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)> &&)::$_0,void,std::optional<WebKit::WebPushMessage>&&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9238;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkNotificationManager::getPendingPushMessage(WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)> &&)::$_0,void,std::optional<WebKit::WebPushMessage>&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9238;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkNotificationManager::getPendingPushMessage(WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)> &&)::$_0,void,std::optional<WebKit::WebPushMessage>&&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  char v4 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a2 + 216);
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "Done getting %u push messages", (uint8_t *)v8, 8u);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)>>(Messages::PushClientConnection::GetPendingPushMessage &&,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9260;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)>>(Messages::PushClientConnection::GetPendingPushMessage &&,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9260;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)>>(Messages::PushClientConnection::GetPendingPushMessage &&,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebKit::WebPushMessage>>>(a2, v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)>>(v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[216] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebKit::WebPushMessage>>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::optional<WebKit::WebPushMessage>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[224])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::optional<WebKit::WebPushMessage>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebKit::WebPushMessage>>(a1, v5);
  if (v6)
  {
    uint64_t result = IPC::ArgumentCoder<std::tuple<std::optional<WebKit::WebPushMessage>>,void>::decode<IPC::Decoder,std::optional<WebKit::WebPushMessage>>((uint64_t)v5, a2);
    if (v6) {
      return std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[224] = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::WebPushMessage>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::WebPushMessage>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[224])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::optional<WebKit::WebPushMessage>>,void>::decode<IPC::Decoder,std::optional<WebKit::WebPushMessage>>@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 224))
  {
    *a2 = 0;
    a2[216] = 0;
    if (*(unsigned char *)(a1 + 216))
    {
      uint64_t result = std::construct_at[abi:sn180100]<WebKit::WebPushMessage,WebKit::WebPushMessage,WebKit::WebPushMessage*>((uint64_t)a2, (uint64_t *)a1);
      a2[216] = 1;
    }
    a2[224] = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::WebPushMessage>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = a1[1];
  char v4 = (WTF::StringImpl *)*a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      v15 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        a1 = v15;
        uint64_t v11 = *v15;
        unint64_t v10 = v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_13;
  }
  char v6 = (unsigned __int8 *)v4 + v5;
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_13:
    unint64_t v3 = 0;
    char v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      long long v14 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v14;
        char v4 = (WTF::StringImpl *)*v14;
        unint64_t v3 = v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        char v4 = 0;
      }
    }
    goto LABEL_14;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebKit::WebPushMessage>(a1, v16);
      char v8 = v17;
      if (!v17)
      {
        *a2 = 0;
        goto LABEL_10;
      }
      std::__optional_destruct_base<WebKit::WebPushMessage,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebPushMessage>((uint64_t)a2, v16);
    }
    else
    {
      LOBYTE(v16[0]) = 0;
      char v17 = 0;
      *a2 = 0;
      a2[216] = 0;
    }
    char v8 = 1;
LABEL_10:
    a2[224] = v8;
    return std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16, v4);
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v3) {
      uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v4);
    }
  }
  *a2 = 0;
  a2[224] = 0;
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebPushMessage,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebPushMessage>(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v4 = *a2;
    *a2 = 0;
    *(void *)a1 = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(a1 + 8) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(a1 + 12) = v4;
    *(unsigned char *)(a1 + 16) = 1;
  }
  uint64_t v5 = a2[3];
  a2[3] = 0;
  *(void *)(a1 + 24) = v5;
  WTF::URL::URL(a1 + 32, a2 + 4);
  std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](a1 + 72, (uint64_t)(a2 + 9));
  *(unsigned char *)(a1 + 216) = 1;
  return a1;
}

uint64_t std::construct_at[abi:sn180100]<WebKit::WebPushMessage,WebKit::WebPushMessage,WebKit::WebPushMessage*>(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    *(unsigned char *)uint64_t result = 0;
    *(unsigned char *)(result + 16) = 0;
    if (*((unsigned char *)a2 + 16))
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      uint64_t v4 = *a2;
      *a2 = 0;
      *(void *)uint64_t result = v4;
      LODWORD(v4) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(result + 8) = v4;
      LODWORD(v4) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *(_DWORD *)(result + 12) = v4;
      *(unsigned char *)(result + 16) = 1;
    }
    uint64_t v5 = a2[3];
    a2[3] = 0;
    *(void *)(result + 24) = v5;
    WTF::URL::URL(result + 32, a2 + 4);
    std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v3 + 72, (uint64_t)(a2 + 9));
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkNotificationManager::getPendingPushMessages(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0,void,WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9288;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkNotificationManager::getPendingPushMessages(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0,void,WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9288;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkNotificationManager::getPendingPushMessages(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0,void,WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(Messages::PushClientConnection::GetPendingPushMessages &&,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C92B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(Messages::PushClientConnection::GetPendingPushMessages &&,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C92B0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(Messages::PushClientConnection::GetPendingPushMessages &&,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
  }
  else
  {
    char v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v6 != 0)
    {
      char v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  char v6 = v10;
  if (v10)
  {
    *(void *)a3 = v8;
    uint64_t v7 = v9;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    *(void *)(a3 + 8) = v7;
    uint64_t result = WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    char v6 = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v6;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v6 != 0)
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v23 = a1[3];
    if (v23)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v23 + 16))(v23, v6, v5);
        uint64_t v22 = *a1;
        uint64_t v21 = a1[1];
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
    }
    goto LABEL_22;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    if (v10 >> 1 >= 0x97B)
    {
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebPushMessage>(a1, &v33);
        if (!v40) {
          break;
        }
        unsigned int v25 = HIDWORD(v42);
        if (HIDWORD(v42) == v42)
        {
          WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPushMessage>((uint64_t)&v41, (unint64_t)&v33);
        }
        else
        {
          uint64_t v27 = v41;
          uint64_t v28 = v41 + 216 * HIDWORD(v42);
          *(unsigned char *)uint64_t v28 = 0;
          *(unsigned char *)(v28 + 16) = 0;
          if (v36)
          {
            *(void *)uint64_t v28 = 0;
            *(void *)(v28 + 8) = 0;
            uint64_t v29 = v33;
            uint64_t v33 = 0;
            *(void *)uint64_t v28 = v29;
            LODWORD(v29) = v34;
            int v34 = 0;
            *(_DWORD *)(v28 + 8) = v29;
            LODWORD(v29) = v35;
            int v35 = 0;
            *(_DWORD *)(v28 + 12) = v29;
            *(unsigned char *)(v28 + 16) = 1;
          }
          uint64_t v30 = v37;
          uint64_t v31 = v27 + 216 * v25;
          uint64_t v37 = 0;
          *(void *)(v31 + 24) = v30;
          WTF::URL::URL(v31 + 32, v38);
          std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v31 + 72, (uint64_t)v39);
          ++HIDWORD(v42);
        }
        std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v26);
        if (!--v10)
        {
          WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v41, HIDWORD(v42));
          *(void *)a3 = v41;
          uint64_t v32 = v42;
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          *(void *)(a3 + 8) = v32;
          goto LABEL_20;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
LABEL_19:
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        *(void *)a3 = v19;
        *(void *)(a3 + 8) = v20;
LABEL_20:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, a2);
      }
      LODWORD(v42) = 216 * (int)v10 / 0xD8u;
      uint64_t v41 = WTF::fastMalloc((WTF *)(216 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebPushMessage>(a1, &v33);
        if (!v40) {
          break;
        }
        unsigned int v12 = HIDWORD(v42);
        if (HIDWORD(v42) == v42)
        {
          WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPushMessage>((uint64_t)&v41, (unint64_t)&v33);
        }
        else
        {
          uint64_t v14 = v41;
          uint64_t v15 = v41 + 216 * HIDWORD(v42);
          *(unsigned char *)uint64_t v15 = 0;
          *(unsigned char *)(v15 + 16) = 0;
          if (v36)
          {
            *(void *)uint64_t v15 = 0;
            *(void *)(v15 + 8) = 0;
            uint64_t v16 = v33;
            uint64_t v33 = 0;
            *(void *)uint64_t v15 = v16;
            LODWORD(v16) = v34;
            int v34 = 0;
            *(_DWORD *)(v15 + 8) = v16;
            LODWORD(v16) = v35;
            int v35 = 0;
            *(_DWORD *)(v15 + 12) = v16;
            *(unsigned char *)(v15 + 16) = 1;
          }
          uint64_t v17 = v37;
          uint64_t v18 = v14 + 216 * v12;
          uint64_t v37 = 0;
          *(void *)(v18 + 24) = v17;
          WTF::URL::URL(v18 + 32, v38);
          std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v18 + 72, (uint64_t)v39);
          ++HIDWORD(v42);
        }
        std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v13);
        if (!--v10)
        {
          uint64_t v19 = v41;
          uint64_t v20 = v42;
          goto LABEL_19;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v11);
    return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, a2);
  }
  uint64_t v21 = v5;
  uint64_t v22 = 0;
LABEL_22:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v21) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v22);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPushMessage>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unint64_t v4 = v3;
  unsigned int v5 = *(_DWORD *)(a1 + 12);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)a1 + 216 * v5;
  *(unsigned char *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 16) = 0;
  if (*(unsigned char *)(v3 + 16))
  {
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    uint64_t v8 = *(void *)v3;
    *(void *)unint64_t v3 = 0;
    *(void *)uint64_t v7 = v8;
    LODWORD(v8) = *(_DWORD *)(v3 + 8);
    *(_DWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v7 + 8) = v8;
    LODWORD(v8) = *(_DWORD *)(v3 + 12);
    *(_DWORD *)(v3 + 12) = 0;
    *(_DWORD *)(v7 + 12) = v8;
    *(unsigned char *)(v7 + 16) = 1;
  }
  uint64_t v9 = *(void *)(v3 + 24);
  uint64_t v10 = v6 + 216 * v5;
  *(void *)(v3 + 24) = 0;
  *(void *)(v10 + 24) = v9;
  WTF::URL::URL(v10 + 32, (uint64_t *)(v3 + 32));
  std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v10 + 72, v4 + 72);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 216 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x12F684C)
    {
      __break(0xC471u);
      JUMPOUT(0x198C12374);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    unint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 216 * *(unsigned int *)(a1 + 12));
    unsigned int v5 = 216 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(216 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0xD8;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebPushMessage>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebPushMessage>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    unsigned int v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      unint64_t v8 = (char *)v5 + v6;
      *(unsigned char *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 16) = 0;
      if (*((unsigned char *)v5 + v6 + 16))
      {
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        unint64_t v9 = *(WTF::StringImpl **)v8;
        *(void *)unint64_t v8 = 0;
        *(void *)uint64_t v7 = v9;
        LODWORD(v9) = *((_DWORD *)v8 + 2);
        *((_DWORD *)v8 + 2) = 0;
        *(_DWORD *)(v7 + 8) = v9;
        LODWORD(v9) = *((_DWORD *)v8 + 3);
        *((_DWORD *)v8 + 3) = 0;
        *(_DWORD *)(v7 + 12) = v9;
        *(unsigned char *)(v7 + 16) = 1;
      }
      uint64_t v10 = *((void *)v8 + 3);
      *((void *)v8 + 3) = 0;
      *(void *)(v7 + 24) = v10;
      WTF::URL::URL(v7 + 32, (uint64_t *)v8 + 4);
      std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v7 + 72, (uint64_t)(v8 + 72));
      std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v8 + 72), v11);
      uint64_t v13 = (WTF::StringImpl *)*((void *)v8 + 4);
      *((void *)v8 + 4) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      uint64_t result = (WTF::StringImpl *)*((void *)v8 + 3);
      *((void *)v8 + 3) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (v8[16])
      {
        uint64_t result = *(WTF::StringImpl **)v8;
        if (*(void *)v8)
        {
          uint64_t v14 = (char *)v5 + v6;
          *(void *)uint64_t v14 = 0;
          *((_DWORD *)v14 + 2) = 0;
          uint64_t result = (WTF::StringImpl *)WTF::fastFree(result, v12);
        }
      }
      v6 += 216;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct((WTF::StringImpl *)(*(void *)result + 216 * a2), (WTF::StringImpl *)(*(void *)result + 216 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    unsigned int v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >= 0x12F684C)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(216 * a2);
      uint64_t result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = v6 / 0xD8;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WebKit::WebPushMessage>::move(v5, (WTF::StringImpl *)((char *)v5 + 216 * v4), result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WTF *IPC::ArgumentCoder<WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,void>::encode<IPC::Encoder,WebCore::NotificationResources>(IPC::Encoder *a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t result = (WTF *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (v6)
    {
      *(unsigned char *)uint64_t result = 0;
      return result;
    }
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198C12660);
  }
  if (!v6) {
    goto LABEL_8;
  }
  *(unsigned char *)uint64_t result = 1;
  uint64_t v7 = (WebCore::Image **)(*a2 + 8);

  return IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::encode<IPC::Encoder,WebCore::Image>(a1, v7);
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::ShowNotification,WTF::CompletionHandler<void ()(void)>>(Messages::PushClientConnection::ShowNotification &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C92D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::ShowNotification,WTF::CompletionHandler<void ()(void)>>(Messages::PushClientConnection::ShowNotification &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C92D8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::ShowNotification,WTF::CompletionHandler<void ()(void)>>(Messages::PushClientConnection::ShowNotification &&,WTF::CompletionHandler<void ()(void)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(void)> &&>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::GetNotifications &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9300;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::GetNotifications &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9300;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::GetNotifications &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &>::call(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>>(a2, (uint64_t)v6);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        if (v7 != -1) {
          return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v7])(&v9, v6);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)>>(v2);
    }
  }
  else
  {
    unsigned int v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)>>(v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)>>(uint64_t *a1)
{
  v3[0] = 0;
  v3[1] = 0;
  int v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v5, v3);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>(a1, (uint64_t)v6);
  int v4 = v8;
  *(unsigned char *)a2 = 0;
  if (v4)
  {
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v6);
    int v5 = v8;
    *(unsigned char *)(a2 + 24) = 1;
    if (v5)
    {
      if (v7 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v7])(&v9, v6);
      }
    }
  }
  else
  {
    *(unsigned char *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>,void>::decode<IPC::Decoder>((char **)a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t result = *(void *)(a1 + 24);
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>,void>::decode<IPC::Decoder>@<X0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (unint64_t)a1[1];
  int v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      uint64_t v19 = a1;
      if (v3)
      {
        (*(void (**)(char *))(*(void *)v16 + 16))(v16);
        a1 = v19;
        uint64_t v15 = *v19;
        unint64_t v14 = (unint64_t)v19[1];
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_15;
  }
  uint64_t v6 = &v4[v5];
  a1[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v14 = v3;
    uint64_t v15 = 0;
LABEL_15:
    unint64_t v3 = 0;
    int v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v17 = a1[3];
    if (v17)
    {
      uint64_t v18 = a1;
      if (v14)
      {
        (*(void (**)(char *, char *, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        a1 = v18;
        int v4 = *v18;
        unint64_t v3 = (unint64_t)v18[1];
      }
      else
      {
        unint64_t v3 = 0;
        int v4 = 0;
      }
    }
    goto LABEL_16;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, v4, (uint64_t)&v20);
      char v10 = v22;
      if (v22)
      {
        *(void *)a2 = v20;
        uint64_t v11 = v21;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        *(void *)(a2 + 8) = v11;
        *(_DWORD *)(a2 + 16) = 0;
        uint64_t result = WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v9);
        char v10 = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
      *(unsigned char *)(a2 + 24) = v10;
    }
    else
    {
      uint64_t result = (uint64_t)IPC::Decoder::decode<WebCore::ExceptionData>((uint64_t *)a1, (uint64_t)&v20);
      char v12 = v22;
      if (v22)
      {
        char v12 = v20;
        *(void *)(a2 + 8) = v21;
        char v13 = 1;
        *(_DWORD *)(a2 + 16) = 1;
      }
      else
      {
        char v13 = 0;
      }
      *(unsigned char *)a2 = v12;
      *(unsigned char *)(a2 + 24) = v13;
    }
    return result;
  }
LABEL_16:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (uint64_t)a1[3];
  if (result && v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      unsigned __int8 v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ExceptionData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::Exception,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v26 = *((void *)a1 + 3);
    if (v26)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v6, v5);
        uint64_t v25 = *(void *)a1;
        unint64_t v24 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
    goto LABEL_22;
  }
  char v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    if (v10 >= 0x1000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::NotificationData>(a1, v43);
        if (!v61) {
          break;
        }
        if (HIDWORD(v42) == v42)
        {
          WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NotificationData>((uint64_t)&v41, (unint64_t)v43);
        }
        else
        {
          uint64_t v29 = v41 + ((unint64_t)HIDWORD(v42) << 8);
          WTF::URL::URL(v29, v43);
          uint64_t v30 = v44;
          uint64_t v44 = 0;
          *(void *)(v29 + 40) = v30;
          uint64_t v31 = v45;
          uint64_t v45 = 0;
          *(void *)(v29 + 48) = v31;
          uint64_t v32 = v46;
          uint64_t v46 = 0;
          *(void *)(v29 + 56) = v32;
          uint64_t v33 = v47;
          uint64_t v47 = 0;
          *(void *)(v29 + 64) = v33;
          uint64_t v34 = v48;
          uint64_t v48 = 0;
          *(void *)(v29 + 72) = v34;
          *(unsigned char *)(v29 + 80) = v49;
          uint64_t v35 = v50;
          uint64_t v50 = 0;
          *(void *)(v29 + 88) = v35;
          WTF::URL::URL(v29 + 96, v51);
          *(_OWORD *)(v29 + 144) = v52;
          long long v36 = v53;
          long long v37 = v54;
          long long v38 = v56;
          *(_OWORD *)(v29 + 192) = v55;
          *(_OWORD *)(v29 + 208) = v38;
          *(_OWORD *)(v29 + 160) = v36;
          *(_OWORD *)(v29 + 176) = v37;
          *(void *)(v29 + 224) = 0;
          *(void *)(v29 + 232) = 0;
          uint64_t v39 = v57;
          uint64_t v57 = 0;
          *(void *)(v29 + 224) = v39;
          LODWORD(v39) = v58;
          int v58 = 0;
          *(_DWORD *)(v29 + 232) = v39;
          LODWORD(v39) = v59;
          int v59 = 0;
          *(_DWORD *)(v29 + 236) = v39;
          *(_WORD *)(v29 + 240) = v60;
          ++HIDWORD(v42);
        }
        if (v61) {
          WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v43, v28);
        }
        if (!--v10)
        {
          WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v41, HIDWORD(v42));
          *(void *)a3 = v41;
          uint64_t v40 = v42;
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          *(void *)(a3 + 8) = v40;
          goto LABEL_20;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
LABEL_19:
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        *(void *)a3 = v22;
        *(void *)(a3 + 8) = v23;
LABEL_20:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, a2);
      }
      LODWORD(v42) = v10;
      uint64_t v41 = WTF::fastMalloc((WTF *)(v10 << 8));
      while (1)
      {
        IPC::Decoder::decode<WebCore::NotificationData>(a1, v43);
        if (!v61) {
          break;
        }
        if (HIDWORD(v42) == v42)
        {
          WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NotificationData>((uint64_t)&v41, (unint64_t)v43);
        }
        else
        {
          uint64_t v11 = v41 + ((unint64_t)HIDWORD(v42) << 8);
          WTF::URL::URL(v11, v43);
          uint64_t v12 = v44;
          uint64_t v44 = 0;
          *(void *)(v11 + 40) = v12;
          uint64_t v13 = v45;
          uint64_t v45 = 0;
          *(void *)(v11 + 48) = v13;
          uint64_t v14 = v46;
          uint64_t v46 = 0;
          *(void *)(v11 + 56) = v14;
          uint64_t v15 = v47;
          uint64_t v47 = 0;
          *(void *)(v11 + 64) = v15;
          uint64_t v16 = v48;
          uint64_t v48 = 0;
          *(void *)(v11 + 72) = v16;
          *(unsigned char *)(v11 + 80) = v49;
          uint64_t v17 = v50;
          uint64_t v50 = 0;
          *(void *)(v11 + 88) = v17;
          WTF::URL::URL(v11 + 96, v51);
          *(_OWORD *)(v11 + 144) = v52;
          long long v18 = v53;
          long long v19 = v54;
          long long v20 = v56;
          *(_OWORD *)(v11 + 192) = v55;
          *(_OWORD *)(v11 + 208) = v20;
          *(_OWORD *)(v11 + 160) = v18;
          *(_OWORD *)(v11 + 176) = v19;
          *(void *)(v11 + 224) = 0;
          *(void *)(v11 + 232) = 0;
          uint64_t v21 = v57;
          uint64_t v57 = 0;
          *(void *)(v11 + 224) = v21;
          LODWORD(v21) = v58;
          int v58 = 0;
          *(_DWORD *)(v11 + 232) = v21;
          LODWORD(v21) = v59;
          int v59 = 0;
          *(_DWORD *)(v11 + 236) = v21;
          *(_WORD *)(v11 + 240) = v60;
          ++HIDWORD(v42);
        }
        if (v61) {
          WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v43, a2);
        }
        if (!--v10)
        {
          uint64_t v22 = v41;
          uint64_t v23 = v42;
          goto LABEL_19;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, a2);
  }
  unint64_t v24 = v5;
  uint64_t v25 = 0;
LABEL_22:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v24) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v25);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NotificationData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 8);
  WTF::URL::URL(v4, (uint64_t *)v3);
  uint64_t v5 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = 0;
  *(void *)(v4 + 40) = v5;
  uint64_t v6 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = 0;
  *(void *)(v4 + 48) = v6;
  uint64_t v7 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = 0;
  *(void *)(v4 + 56) = v7;
  uint64_t v8 = *(void *)(v3 + 64);
  *(void *)(v3 + 64) = 0;
  *(void *)(v4 + 64) = v8;
  uint64_t v9 = *(void *)(v3 + 72);
  *(void *)(v3 + 72) = 0;
  *(void *)(v4 + 72) = v9;
  *(unsigned char *)(v4 + 80) = *(unsigned char *)(v3 + 80);
  uint64_t v10 = *(void *)(v3 + 88);
  *(void *)(v3 + 88) = 0;
  *(void *)(v4 + 88) = v10;
  WTF::URL::URL(v4 + 96, (uint64_t *)(v3 + 96));
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(v3 + 144);
  long long v11 = *(_OWORD *)(v3 + 160);
  long long v12 = *(_OWORD *)(v3 + 176);
  long long v13 = *(_OWORD *)(v3 + 208);
  *(_OWORD *)(v4 + 192) = *(_OWORD *)(v3 + 192);
  *(_OWORD *)(v4 + 208) = v13;
  *(_OWORD *)(v4 + 160) = v11;
  *(_OWORD *)(v4 + 176) = v12;
  *(void *)(v4 + 224) = 0;
  *(void *)(v4 + 232) = 0;
  uint64_t v14 = *(void *)(v3 + 224);
  *(void *)(v3 + 224) = 0;
  *(void *)(v4 + 224) = v14;
  LODWORD(v14) = *(_DWORD *)(v3 + 232);
  *(_DWORD *)(v3 + 232) = 0;
  *(_DWORD *)(v4 + 232) = v14;
  LODWORD(v14) = *(_DWORD *)(v3 + 236);
  *(_DWORD *)(v3 + 236) = 0;
  *(_DWORD *)(v4 + 236) = v14;
  *(_WORD *)(v4 + 240) = *(_WORD *)(v3 + 240);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) > a2)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      uint64_t v5 = (WebCore::NotificationData *)(*(void *)a1 + (a2 << 8));
      unint64_t v6 = (v4 << 8) - (a2 << 8);
      do
      {
        WebCore::NotificationData::~NotificationData(v5, (void *)a2);
        uint64_t v5 = (WebCore::NotificationData *)(v7 + 256);
        v6 -= 256;
      }
      while (v6);
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v8 = *(WebCore::NotificationData **)a1;
    if (a2)
    {
      if (a2 >> 24)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v9 = WTF::fastMalloc((WTF *)(a2 << 8));
      *(_DWORD *)(a1 + 8) = a2;
      *(void *)a1 = v9;
      if ((WebCore::NotificationData *)v9 != v8) {
        WTF::VectorMover<false,WebCore::NotificationData>::move(v8, (WebCore::NotificationData *)((char *)v8 + 256 * (unint64_t)v4), v9);
      }
    }
    if (v8)
    {
      if (*(WebCore::NotificationData **)a1 == v8)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v8, (void *)a2);
    }
  }
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9C9318[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a2 + 8) = v3;
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RequestPushPermission,WTF::CompletionHandler<void ()(BOOL)>>(Messages::PushClientConnection::RequestPushPermission &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9338;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RequestPushPermission,WTF::CompletionHandler<void ()(BOOL)>>(Messages::PushClientConnection::RequestPushPermission &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(BOOL)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9338;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RequestPushPermission,WTF::CompletionHandler<void ()(BOOL)>>(Messages::PushClientConnection::RequestPushPermission &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(BOOL)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    return IPC::Connection::callReply<Messages::PushClientConnection::RequestPushPermission,WTF::CompletionHandler<void ()(BOOL)>>(a2, v3);
  }
  else
  {
    uint64_t v5 = *v3;
    *uint64_t v3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    char v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
}

uint64_t IPC::Connection::callReply<Messages::PushClientConnection::RequestPushPermission,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t *a1, uint64_t *a2)
{
  unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a1);
  if (v4 <= 0xFFu)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    }
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
  }
  else
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
  }
  char v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::SubscribeToPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9360;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::SubscribeToPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9360;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::SubscribeToPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>>(a2, (uint64_t)v6);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        if (v7 != -1) {
          return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS6_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v7])(&v9, v6);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)>>(uint64_t *a1)
{
  int v4 = 0;
  memset(v3, 0, sizeof(v3));
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS6_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v4])(&v5, v3);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 88))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>(a1, (uint64_t)v6);
  int v4 = v8;
  *(unsigned char *)a2 = 0;
  if (v4)
  {
    *(_DWORD *)(a2 + 80) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v6);
    int v5 = v8;
    *(unsigned char *)(a2 + 88) = 1;
    if (v5)
    {
      if (v7 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS6_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v7])(&v9, v6);
      }
    }
  }
  else
  {
    *(unsigned char *)(a2 + 88) = 0;
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 88))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v22 = a1[3];
    if (v22)
    {
      uint64_t v25 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
        a1 = v25;
        uint64_t v21 = *v25;
        unint64_t v20 = v25[1];
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
    goto LABEL_15;
  }
  char v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v20 = v3;
    uint64_t v21 = 0;
LABEL_15:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v23 = a1[3];
    if (v23)
    {
      unint64_t v24 = a1;
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v23 + 16))(v23, v21, v20);
        a1 = v24;
        uint64_t v4 = *v24;
        unint64_t v3 = v24[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_16;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebCore::PushSubscriptionData>(a1, (uint64_t)&v26);
      char v9 = v35;
      if (v35)
      {
        uint64_t v10 = v27;
        *(void *)a2 = v26;
        *(void *)(a2 + 8) = v10;
        *(_OWORD *)(a2 + 16) = v28;
        uint64_t v11 = v29;
        uint64_t v27 = 0;
        uint64_t v29 = 0;
        *(void *)(a2 + 32) = v11;
        uint64_t v12 = v30;
        uint64_t v30 = 0;
        *(void *)(a2 + 40) = v12;
        uint64_t v13 = v31;
        uint64_t v31 = 0;
        *(void *)(a2 + 48) = v13;
        uint64_t v14 = v32;
        uint64_t v32 = 0;
        *(void *)(a2 + 56) = v14;
        uint64_t v15 = v33;
        uint64_t v33 = 0;
        *(void *)(a2 + 64) = v15;
        uint64_t v16 = v34;
        uint64_t v34 = 0;
        *(void *)(a2 + 72) = v16;
        char v9 = 1;
        *(_DWORD *)(a2 + 80) = 0;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
      *(unsigned char *)(a2 + 88) = v9;
      return (WTF::StringImpl *)std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26, v8);
    }
    else
    {
      uint64_t result = IPC::Decoder::decode<WebCore::ExceptionData>(a1, (uint64_t)&v26);
      char v18 = v28;
      if ((_BYTE)v28)
      {
        char v18 = v26;
        *(void *)(a2 + 8) = v27;
        char v19 = 1;
        *(_DWORD *)(a2 + 80) = 1;
      }
      else
      {
        char v19 = 0;
      }
      *(unsigned char *)a2 = v18;
      *(unsigned char *)(a2 + 88) = v19;
    }
    return result;
  }
LABEL_16:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (WTF::StringImpl *)a1[3];
  if (result && v3) {
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 88) = 0;
  return result;
}

WTF *IPC::Decoder::decode<WebCore::PushSubscriptionData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 80))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF *)a1[3];
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = (void *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198C1401CLL);
    }
    *(unsigned char *)uint64_t result = 1;
    if (*(unsigned char *)(a2 + 8))
    {
      return (void *)IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      unsigned int v7 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::UnsubscribeFromPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &>::~CallableWrapper(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198C1403CLL);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::UnsubscribeFromPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9388;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::UnsubscribeFromPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9388;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::UnsubscribeFromPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>>(a2, (uint64_t)v6);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        if (v7 != -1) {
          return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v7])(&v9, v6);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>(uint64_t *a1)
{
  v3[0] = 0;
  int v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v4])(&v5, v3);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>(a1, (uint64_t)v6);
  int v4 = v8;
  *(unsigned char *)a2 = 0;
  if (v4)
  {
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<BOOL,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v6);
    int v5 = v8;
    *(unsigned char *)(a2 + 24) = 1;
    if (v5)
    {
      if (v7 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v7])(&v9, v6);
      }
    }
  }
  else
  {
    *(unsigned char *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v22 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t result = v22;
        uint64_t v11 = *v22;
        unint64_t v10 = v22[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_14;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_14:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v13 = result[3];
    if (v13)
    {
      uint64_t v21 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t result = v21;
        uint64_t v4 = *v21;
        unint64_t v3 = v21[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_15;
  }
  if (*v6 >= 2u)
  {
LABEL_15:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t result = (uint64_t *)result[3];
    if (result && v3) {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
    }
LABEL_20:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return result;
  }
  if (*v6)
  {
    if (v3 <= (unint64_t)&v6[-v4 + 1])
    {
      unint64_t v14 = 0;
      uint64_t v15 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v16 = result[3];
      if (v16)
      {
        uint64_t v17 = result;
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(result[3]);
        unint64_t v14 = 0;
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        uint64_t v20 = v17[3];
        uint64_t *v17 = 0;
        v17[1] = 0;
        uint64_t v15 = 0;
        if (v20)
        {
          uint64_t result = v17;
          if (v19)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
            uint64_t result = v17;
            uint64_t v15 = *v17;
            unint64_t v14 = v17[1];
          }
        }
        else
        {
          uint64_t result = v17;
        }
      }
    }
    else
    {
      result[2] = (uint64_t)(v6 + 2);
      unsigned int v7 = v6[1];
      if (v7 < 2)
      {
        *(unsigned char *)a2 = v7 != 0;
        *(_DWORD *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 1;
        return result;
      }
      unint64_t v14 = v3;
      uint64_t v15 = v4;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t result = (uint64_t *)result[3];
    if (result)
    {
      if (v14) {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(*result + 16))(result, v15, v14);
      }
    }
    goto LABEL_20;
  }
  uint64_t result = (uint64_t *)IPC::Decoder::decode<WebCore::ExceptionData>(result, (uint64_t)v23);
  char v8 = v25;
  if (v25)
  {
    char v8 = v23[0];
    *(void *)(a2 + 8) = v24;
    char v9 = 1;
    *(_DWORD *)(a2 + 16) = 1;
  }
  else
  {
    char v9 = 0;
  }
  *(unsigned char *)a2 = v8;
  *(unsigned char *)(a2 + 24) = v9;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<BOOL,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9C93A0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a2 + 8) = v3;
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::GetPushSubscription &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C93C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::GetPushSubscription &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C93C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(Messages::PushClientConnection::GetPushSubscription &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>>(a2, v7);
    if (v10)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v10)
      {
        if (v9 != -1) {
          return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS7_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v9])(&v6, &v8);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)>>(uint64_t *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  v5[80] = 0;
  int v6 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v6 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS7_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v6])(&v3, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[104])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(a1, (uint64_t)v7);
  if (v10)
  {
    a2[8] = 0;
    uint64_t v4 = (uint64_t)(a2 + 8);
    *(_DWORD *)(v4 + 88) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(v4, (uint64_t)v8);
    int v5 = v10;
    *(unsigned char *)(v4 + 96) = 1;
    if (v5)
    {
      if (v9 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS7_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v9])(&v6, v8);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[104] = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 104))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v21 = a1[3];
    if (v21)
    {
      uint64_t v24 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
        a1 = v24;
        uint64_t v20 = *v24;
        unint64_t v19 = v24[1];
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
    goto LABEL_14;
  }
  char v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v19 = v3;
    uint64_t v20 = 0;
LABEL_14:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v22 = a1[3];
    if (v22)
    {
      uint64_t v23 = a1;
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v20, v19);
        a1 = v23;
        uint64_t v4 = *v23;
        unint64_t v3 = v23[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_15;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v3) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t result = IPC::Decoder::decode<std::optional<WebCore::PushSubscriptionData>>(a1, (uint64_t)&v25);
    if (v35)
    {
      *(unsigned char *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 88) = 0;
      if (v34)
      {
        uint64_t v10 = v26;
        *(void *)(a2 + 8) = v25;
        *(void *)(a2 + 16) = v10;
        *(_OWORD *)(a2 + 24) = v27;
        uint64_t v11 = v28;
        uint64_t v26 = 0;
        uint64_t v28 = 0;
        *(void *)(a2 + 40) = v11;
        uint64_t v12 = v29;
        uint64_t v29 = 0;
        *(void *)(a2 + 48) = v12;
        uint64_t v13 = v30;
        uint64_t v30 = 0;
        *(void *)(a2 + 56) = v13;
        uint64_t v14 = v31;
        uint64_t v31 = 0;
        *(void *)(a2 + 64) = v14;
        uint64_t v15 = v32;
        uint64_t v32 = 0;
        *(void *)(a2 + 72) = v15;
        uint64_t v16 = v33;
        uint64_t v33 = 0;
        *(void *)(a2 + 80) = v16;
        *(unsigned char *)(a2 + 88) = 1;
      }
      *(_DWORD *)(a2 + 96) = 0;
      *(unsigned char *)(a2 + 104) = 1;
      return std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v9);
    }
LABEL_16:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 104) = 0;
    return result;
  }
  uint64_t result = (uint64_t)IPC::Decoder::decode<WebCore::ExceptionData>(a1, (uint64_t)&v25);
  char v17 = v27;
  if ((_BYTE)v27)
  {
    uint64_t v18 = v26;
    *(unsigned char *)(a2 + 8) = v25;
    *(void *)(a2 + 16) = v18;
    char v17 = 1;
    *(_DWORD *)(a2 + 96) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 104) = v17;
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::PushSubscriptionData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::PushSubscriptionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 88))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::PushSubscriptionData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = (char *)*a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v19 = a1[3];
    if (v19)
    {
      uint64_t v22 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        a1 = v22;
        uint64_t v18 = *v22;
        unint64_t v17 = v22[1];
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    goto LABEL_12;
  }
  char v6 = &v4[v5];
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v17 = v3;
    uint64_t v18 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v20 = a1[3];
    if (v20)
    {
      uint64_t v21 = a1;
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        a1 = v21;
        uint64_t v4 = (char *)*v21;
        unint64_t v3 = v21[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebCore::PushSubscriptionData>(a1, (uint64_t)&v23);
      char v8 = v32;
      if (v32)
      {
        uint64_t v9 = v24;
        *(void *)a2 = v23;
        *(void *)(a2 + 8) = v9;
        *(_OWORD *)(a2 + 16) = v25;
        uint64_t v10 = v26;
        uint64_t v24 = 0;
        uint64_t v26 = 0;
        *(void *)(a2 + 32) = v10;
        uint64_t v11 = v27;
        uint64_t v27 = 0;
        *(void *)(a2 + 40) = v11;
        uint64_t v12 = v28;
        uint64_t v28 = 0;
        *(void *)(a2 + 48) = v12;
        uint64_t v13 = v29;
        uint64_t v29 = 0;
        *(void *)(a2 + 56) = v13;
        uint64_t v14 = v30;
        uint64_t v30 = 0;
        *(void *)(a2 + 64) = v14;
        uint64_t v15 = v31;
        uint64_t v31 = 0;
        *(void *)(a2 + 72) = v15;
        char v8 = 1;
        *(unsigned char *)(a2 + 80) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      LOBYTE(v23) = 0;
      char v32 = 0;
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 80) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 88) = v8;
    return std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v4);
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result && v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 88) = 0;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 88);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS7_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 88) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 88);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9C93D8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 88) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *a2 = 0;
  a2[80] = 0;
  if (*(unsigned char *)(a3 + 80))
  {
    uint64_t result = std::construct_at[abi:sn180100]<WebCore::PushSubscriptionData,WebCore::PushSubscriptionData,WebCore::PushSubscriptionData*>((uint64_t)a2, a3);
    a2[80] = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a2 + 8) = v3;
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::IncrementSilentPushCount,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::IncrementSilentPushCount &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C93F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::IncrementSilentPushCount,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::IncrementSilentPushCount &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C93F8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::IncrementSilentPushCount,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::IncrementSilentPushCount &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2 && (uint64_t v3 = IPC::Decoder::decode<std::tuple<float>>(a2), (v3 & 0xFF00000000) != 0))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v3);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemoveAllPushSubscriptions,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::RemoveAllPushSubscriptions &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9420;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemoveAllPushSubscriptions,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::RemoveAllPushSubscriptions &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9420;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemoveAllPushSubscriptions,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::RemoveAllPushSubscriptions &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2 && (uint64_t v3 = IPC::Decoder::decode<std::tuple<float>>(a2), (v3 & 0xFF00000000) != 0))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v3);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::RemovePushSubscriptionsForOrigin &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9448;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::RemovePushSubscriptionsForOrigin &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9448;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(Messages::PushClientConnection::RemovePushSubscriptionsForOrigin &&,WTF::CompletionHandler<void ()(unsigned int)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(unsigned int)> &&>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2 && (uint64_t v3 = IPC::Decoder::decode<std::tuple<float>>(a2), (v3 & 0xFF00000000) != 0))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v3);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetAppBadgeForTesting,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>>(Messages::PushClientConnection::GetAppBadgeForTesting &&,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9470;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetAppBadgeForTesting,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>>(Messages::PushClientConnection::GetAppBadgeForTesting &&,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9470;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetAppBadgeForTesting,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>>(Messages::PushClientConnection::GetAppBadgeForTesting &&,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<unsigned long long>>>(a2, (uint64_t)v9);
    if (v10)
    {
      uint64_t v3 = v9[0];
      uint64_t v4 = v9[1];
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3, v4);
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, void, void))(*(void *)v5 + 16))(v5, 0, 0);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v6 + 16))(v6, 0, 0);
    char v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

void *IPC::Decoder::decode<std::tuple<std::optional<unsigned long long>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (void *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198C15D0C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198C15EC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t downloadWrapperMap(void)
{
  if (_MergedGlobals_72)
  {
    uint64_t result = qword_1EB3598B0;
    if (qword_1EB3598B0) {
      return result;
    }
  }
  else
  {
    qword_1EB3598B0 = 0;
    _MergedGlobals_72 = 1;
  }
  WTF::RetainPtr<NSURLSession>::operator=((const void **)&qword_1EB3598B0, (CFTypeRef)[MEMORY[0x1E4F28E10] weakToWeakObjectsMapTable]);
  return qword_1EB3598B0;
}

void sub_198C15FFC(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  CFRelease(*(CFTypeRef *)(v2 + 16));
  _Unwind_Resume(a1);
}

void sub_198C1607C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C161B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C16AF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl **)(v2 - 72);
  *(void *)(v2 - 72) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C16DA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C16E6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

__CFString *elementActionTypeToUIActionIdentifier(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xF) {
    return @"WKElementActionTypeCustom";
  }
  else {
    return off_1E5812810[a1 - 1];
  }
}

void sub_198C173A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, CFTypeRef a14)
{
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v15);
  if (v14) {
    CFRelease(v14);
  }
  _Unwind_Resume(a1);
}

void sub_198C17424(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (!a13) {
    JUMPOUT(0x198C17404);
  }
  JUMPOUT(0x198C173FCLL);
}

CFTypeRef __copy_helper_block_e8_32c56_ZTSKZ43___WKElementAction_uiActionForElementInfo__E3__2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_198C17554(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c56_ZTSKZ43___WKElementAction_uiActionForElementInfo__E3__2(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_198C177B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198C1786C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198C17AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CFTypeRef cf,uint64_t a37,uint64_t a38,uint64_t a39,int a40,WTF::StringImpl *a41)
{
  CFRelease(*(CFTypeRef *)(v41 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  uint64_t v44 = a41;
  a41 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2) {
      WTF::StringImpl::destroy(v44, v43);
    }
    else {
      *(_DWORD *)v44 -= 2;
    }
  }
  if (a40 != -1) {
    ((void (*)(uint64_t *, uint64_t *))off_1EE9C9600[a40])(&a10, &a37);
  }
  a40 = -1;
  CFTypeRef v45 = cf;
  CFTypeRef cf = 0;
  if (v45) {
    CFRelease(v45);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a12);
  _Unwind_Resume(a1);
}

void sub_198C17D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,CFTypeRef cf,uint64_t a41,uint64_t a42,uint64_t a43,int a44,WTF::StringImpl *a45)
{
}

void sub_198C17ED0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WKDataTaskClient::~WKDataTaskClient(id *this)
{
}

{
  void *v2;
  uint64_t vars8;

  objc_destroyWeak(this + 2);

  WTF::fastFree((WTF *)this, v2);
}

void WKDataTaskClient::didReceiveChallenge(uint64_t a1, uint64_t a2, WebCore *a3, uint64_t *a4)
{
  long long v8 = (id *)(a1 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained && (CFRelease(WeakRetained), (*(unsigned char *)(a1 + 24) & 1) != 0))
  {
    uint64_t v13 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v8);
    WebKit::CompletionHandlerCallChecker::create(v13, (objc_object *)sel_dataTask_didReceiveAuthenticationChallenge_completionHandler_, (uint64_t *)&v22);
    if (v13) {
      CFRelease(v13);
    }
    id Weak = objc_loadWeak(v8);
    uint64_t v15 = *(void *)(a2 + 8);
    uint64_t v17 = WebCore::mac(a3, v16);
    uint64_t v18 = v22;
    uint64_t v19 = *a4;
    *a4 = 0;
    uint64_t v20 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v20 = MEMORY[0x1E4F14398];
    v20[1] = 50331650;
    v20[2] = WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke;
    v20[3] = &WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::descriptor;
    v20[4] = v18;
    v20[5] = v19;
    [Weak dataTask:v15 didReceiveAuthenticationChallenge:v17 completionHandler:v20];
    _Block_release(v20);
  }
  else
  {
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v22);
    CFTypeRef cf = 0;
    WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)>::operator()(a4);
    CFTypeRef v11 = cf;
    CFTypeRef cf = 0;
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = v23;
    uint64_t v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v21 = v22;
    uint64_t v22 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v10);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
}

void sub_198C18184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, CFTypeRef cf)
{
  uint64_t v13 = v12;
  _Block_release(v13);
  _Unwind_Resume(a1);
}

void WKDataTaskClient::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, WebCore::ResourceResponse *a3, uint64_t a4, uint64_t *a5)
{
  char v9 = (id *)(a1 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained && (CFRelease(WeakRetained), (*(unsigned char *)(a1 + 24) & 2) != 0))
  {
    CFTypeRef v11 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v9);
    WebKit::CompletionHandlerCallChecker::create(v11, (objc_object *)sel_dataTask_willPerformHTTPRedirection_newRequest_decisionHandler_, &v19);
    if (v11) {
      CFRelease(v11);
    }
    id Weak = objc_loadWeak(v9);
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v14 = WebCore::ResourceResponse::nsURLResponse(a3);
    uint64_t v15 = WebCore::ResourceRequest::nsURLRequest();
    uint64_t v16 = v19;
    uint64_t v17 = *a5;
    *a5 = 0;
    uint64_t v18 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v18 = MEMORY[0x1E4F14398];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtr<void ()(_WKDataTaskRedirectPolicy)>::fromCallable<WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1}>(WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1})::{lambda(void *,_WKDataTaskRedirectPolicy)#1}::__invoke;
    v18[3] = &WTF::BlockPtr<void ()(_WKDataTaskRedirectPolicy)>::fromCallable<WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1}>(WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1})::descriptor;
    v18[4] = v16;
    v18[5] = v17;
    [Weak dataTask:v13 willPerformHTTPRedirection:v14 newRequest:v15 decisionHandler:v18];
    _Block_release(v18);
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a5);
  }
}

void sub_198C183F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  CFTypeRef v11 = v10;
  _Block_release(v11);
  _Unwind_Resume(a1);
}

void WKDataTaskClient::didReceiveResponse(uint64_t a1, uint64_t a2, WebCore::ResourceResponse *a3, uint64_t *a4)
{
  long long v8 = (id *)(a1 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained && (CFRelease(WeakRetained), (*(unsigned char *)(a1 + 24) & 4) != 0))
  {
    char v10 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v8);
    WebKit::CompletionHandlerCallChecker::create(v10, (objc_object *)sel_dataTask_didReceiveResponse_decisionHandler_, &v17);
    if (v10) {
      CFRelease(v10);
    }
    id Weak = objc_loadWeak(v8);
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = WebCore::ResourceResponse::nsURLResponse(a3);
    uint64_t v14 = v17;
    uint64_t v15 = *a4;
    *a4 = 0;
    uint64_t v16 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v16 = MEMORY[0x1E4F14398];
    v16[1] = 50331650;
    v16[2] = WTF::BlockPtr<void ()(_WKDataTaskResponsePolicy)>::fromCallable<WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1}>(WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1})::{lambda(void *,_WKDataTaskResponsePolicy)#1}::__invoke;
    v16[3] = &WTF::BlockPtr<void ()(_WKDataTaskResponsePolicy)>::fromCallable<WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1}>(WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1})::descriptor;
    v16[4] = v14;
    v16[5] = v15;
    [Weak dataTask:v12 didReceiveResponse:v13 decisionHandler:v16];
    _Block_release(v16);
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
  }
}

void sub_198C185DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  CFTypeRef v11 = v10;
  _Block_release(v11);
  _Unwind_Resume(a1);
}

void WKDataTaskClient::didReceiveData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v8 = (id *)(a1 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
    if ((*(unsigned char *)(a1 + 24) & 8) != 0)
    {
      id Weak = objc_loadWeak(v8);
      uint64_t v11 = *(void *)(a2 + 8);
      uint64_t v12 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a3 length:a4];
      [Weak dataTask:v11 didReceiveData:v12];
      if (v12)
      {
        CFRelease(v12);
      }
    }
  }
}

void sub_198C18720(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WKDataTaskClient::didCompleteWithError(uint64_t a1, uint64_t a2, WebCore::ResourceError *a3)
{
  uint64_t v6 = (id *)(a1 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
    if ((*(unsigned char *)(a1 + 24) & 0x10) != 0)
    {
      id Weak = objc_loadWeak(v6);
      [Weak dataTask:*(void *)(a2 + 8) didCompleteWithError:WebCore::ResourceError::nsError(a3)];
      uint64_t v9 = *(void *)(a2 + 8);
      char v10 = *(const void **)(v9 + 120);
      *(void *)(v9 + 120) = 0;
      if (v10)
      {
        CFRelease(v10);
      }
    }
  }
}

uint64_t WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198C1885C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  CFTypeRef result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(WKDataTaskClient::didReceiveChallenge(API::DataTask &,WebCore::AuthenticationChallenge &&,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)> &&)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  CFTypeRef result = (WTF::StringImpl *)WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
    WebKit::toAuthenticationChallengeDisposition(a2, v7);
    MEMORY[0x19972F4E0](&v11, a3);
    WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)>::operator()((uint64_t *)(a1 + 40));
    CFTypeRef v9 = cf;
    CFTypeRef cf = 0;
    if (v9) {
      CFRelease(v9);
    }
    char v10 = v12;
    uint64_t v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    CFTypeRef result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198C189E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::BlockPtr<void ()(_WKDataTaskRedirectPolicy)>::fromCallable<WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1}>(WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  CFTypeRef result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKDataTaskRedirectPolicy)>::fromCallable<WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1}>(WKDataTaskClient::willPerformHTTPRedirection(API::DataTask &,WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskRedirectPolicy)#1})::{lambda(void *,_WKDataTaskRedirectPolicy)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
    return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 40));
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(_WKDataTaskResponsePolicy)>::fromCallable<WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1}>(WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKDataTaskResponsePolicy)>::fromCallable<WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1}>(WKDataTaskClient::didReceiveResponse(API::DataTask &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(_WKDataTaskResponsePolicy)#1})::{lambda(void *,_WKDataTaskResponsePolicy)#1}::__invoke(uint64_t a1)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 32));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
    return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 40));
  }
  return result;
}

Class initSSReadingList(void)
{
  if ((byte_1EB3598A9 & 1) == 0)
  {
    uint64_t v1 = dlopen("/System/Library/Frameworks/SafariServices.framework/SafariServices", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x198C18C70);
    }
    unk_1EB3598C0 = v1;
    byte_1EB3598A9 = 1;
  }
  Class result = objc_getClass("SSReadingList");
  qword_1EB3598B8 = (uint64_t)result;
  if (!result) {
    goto LABEL_7;
  }
  getSSReadingListClass = SSReadingListFunction;
  return result;
}

{
  Class result;
  void *v1;

  if ((byte_1E93CF7C2 & 1) == 0)
  {
    uint64_t v1 = dlopen("/System/Library/Frameworks/SafariServices.framework/SafariServices", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x198D9C030);
    }
    unk_1E93CF7D0 = v1;
    byte_1E93CF7C2 = 1;
  }
  Class result = objc_getClass("SSReadingList");
  qword_1E93CF7C8 = (uint64_t)result;
  if (!result) {
    goto LABEL_7;
  }
  getSSReadingListClass = SSReadingListFunction;
  return result;
}

uint64_t SSReadingListFunction(void)
{
  return qword_1EB3598B8;
}

{
  return qword_1E93CF7C8;
}

void API::Feature::~Feature(API::Feature *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

{
  uint64_t vars8;

  API::Feature::~Feature(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  unsigned int v3 = *((_DWORD *)a2 + 3);
  *(void *)Class result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0xD20D21)
  {
    unsigned int v5 = 312 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(312 * v3));
    *(_DWORD *)(v2 + 8) = v5 / 0x138;
    *(void *)uint64_t v2 = v6;
    unsigned int v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = v6;
      uint64_t v9 = 0;
      uint64_t v10 = *a2;
      uint64_t v11 = 312 * v7;
      do
      {
        uint64_t v12 = WebKit::FrameInfoData::FrameInfoData((CFTypeRef *)(v8 + v9), (const String *)(v10 + v9));
        WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v12 + 37, v10 + v9 + 296);
        v9 += 312;
      }
      while (v11 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198C18F10(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(WTF **)v13;
  if (*(void *)v13)
  {
    *(void *)uint64_t v13 = 0;
    *(_DWORD *)(v13 + 8) = 0;
    WTF::fastFree(v15, a2);
  }
  _Unwind_Resume(exception_object);
}

WebKit::PCM::Database *WebKit::PCM::Database::Database(WebKit::PCM::Database *this, const WTF::String *a2)
{
  WTF::FileSystemImpl::pathByAppendingComponent();
  WebKit::DatabaseUtilities::DatabaseUtilities(this, (uint64_t *)v6);
  uint64_t v4 = v6[0];
  v6[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  *((void *)this + 1objc_destroyWeak(this + 2) = 0;
  *(void *)this = &unk_1EE9C9648;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 15objc_destroyWeak(this + 2) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  WebKit::DatabaseUtilities::openDatabaseAndCreateSchemaIfNecessary(this, v3);
  WebKit::DatabaseUtilities::enableForeignKeys(this);
  WebKit::PCM::Database::addDestinationTokenColumnsIfNecessary(this);
  if ((byte_1EB3598C9 & 1) == 0)
  {
    *(void *)&dword_1EB3598D8 = 0;
    qword_1EB3598D0 = 0;
    byte_1EB3598C9 = 1;
  }
  WTF::WeakHashSet<WebKit::PCM::Database,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::PCM::Database>((uint64_t)v6, (unsigned int *)this);
  return this;
}

uint64_t WebKit::PCM::Database::addDestinationTokenColumnsIfNecessary(WebKit::PCM::Database *this)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v2 = v7;
  WebKit::DatabaseUtilities::columnsForTable((uint64_t)this, "AttributedPrivateClickMeasurement", 34, (uint64_t)&v7);
  if (!v8 || (WTF::equal(*((WTF **)v7 + v8 - 1), v2, v3) & 1) == 0)
  {
    WebKit::DatabaseUtilities::addMissingColumnToTable((uint64_t)this, "AttributedPrivateClickMeasurement", 34, "destinationToken TEXT", 22);
    WebKit::DatabaseUtilities::addMissingColumnToTable((uint64_t)this, "AttributedPrivateClickMeasurement", 34, "destinationSignature TEXT", 26);
    WebKit::DatabaseUtilities::addMissingColumnToTable((uint64_t)this, "AttributedPrivateClickMeasurement", 34, "destinationKeyID TEXT", 22);
  }
  uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v4);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      return WTF::StringImpl::destroy(v2, v6);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebKit::PCM::Database,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::PCM::Database>(uint64_t a1, unsigned int *a2)
{
  if (++dword_1EB3598D8 > dword_1EB3598DC)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit3PCM8DatabaseES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSL_(a1, a2);
    dword_1EB3598D8 = 0;
    unsigned int v4 = qword_1EB3598D0;
    if (qword_1EB3598D0)
    {
      unsigned int v4 = *(_DWORD *)(qword_1EB3598D0 - 12);
      if (v4 > 0x7FFFFFFE) {
        unsigned int v4 = 0x7FFFFFFF;
      }
    }
    dword_1EB3598DC = 2 * v4;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 24, (uint64_t)a2);
  unsigned int v5 = (atomic_uint *)*((void *)a2 + 12);
  atomic_fetch_add(v5, 1u);
  atomic_fetch_add(v5, 1u);
  unsigned int v8 = (WTF *)v5;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(&qword_1EB3598D0, &v8, a1);
  uint64_t result = (unsigned int *)v8;
  unsigned int v8 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
  }
  if (v5)
  {
    if (atomic_fetch_add(v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v5);
      return (unsigned int *)WTF::fastFree((WTF *)v5, v6);
    }
  }
  return result;
}

void WebKit::PCM::Database::~Database(WebKit::PCM::Database *this)
{
  *(void *)this = &unk_1EE9C9648;
  uint64_t v2 = WebKit::DatabaseUtilities::close(this);
  if (byte_1EB3598C9 == 1)
  {
    int v5 = dword_1EB3598D8;
    unsigned int v4 = dword_1EB3598DC;
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
    *(void *)&dword_1EB3598D8 = 0;
    qword_1EB3598D0 = 0;
    byte_1EB3598C9 = 1;
  }
  dword_1EB3598D8 = v5 + 1;
  if (v5 + 1 > v4)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit3PCM8DatabaseES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSL_(v2, v3);
    dword_1EB3598D8 = 0;
    unsigned int v6 = qword_1EB3598D0;
    if (qword_1EB3598D0)
    {
      unsigned int v6 = *(_DWORD *)(qword_1EB3598D0 - 12);
      if (v6 > 0x7FFFFFFE) {
        unsigned int v6 = 0x7FFFFFFF;
      }
    }
    dword_1EB3598DC = 2 * v6;
  }
  uint64_t v7 = *((void *)this + 12);
  if (v7 && *(void *)(v7 + 8))
  {
    uint64_t v26 = *((void *)this + 12);
    unsigned int v8 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&qword_1EB3598D0, &v26);
    unsigned int v3 = v8;
    if (qword_1EB3598D0)
    {
      uint64_t v9 = qword_1EB3598D0 + 8 * *(unsigned int *)(qword_1EB3598D0 - 4);
      if ((unsigned int **)v9 == v8) {
        goto LABEL_17;
      }
    }
    else
    {
      if (!v8) {
        goto LABEL_17;
      }
      uint64_t v9 = 0;
    }
    if ((unsigned int **)v9 != v8) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&qword_1EB3598D0, v8);
    }
  }
LABEL_17:
  uint64_t v10 = (WebCore::SQLiteStatement *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v10) {
    WebCore::SQLiteStatement::operator delete(v10, 0x18uLL);
  }
  uint64_t v11 = (WebCore::SQLiteStatement *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v11) {
    WebCore::SQLiteStatement::operator delete(v11, 0x18uLL);
  }
  uint64_t v12 = (WebCore::SQLiteStatement *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v12) {
    WebCore::SQLiteStatement::operator delete(v12, 0x18uLL);
  }
  uint64_t v13 = (WebCore::SQLiteStatement *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v13) {
    WebCore::SQLiteStatement::operator delete(v13, 0x18uLL);
  }
  uint64_t v14 = (WebCore::SQLiteStatement *)*((void *)this + 22);
  *((void *)this + 2objc_destroyWeak(this + 2) = 0;
  if (v14) {
    WebCore::SQLiteStatement::operator delete(v14, 0x18uLL);
  }
  uint64_t v15 = (WebCore::SQLiteStatement *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v15) {
    WebCore::SQLiteStatement::operator delete(v15, 0x18uLL);
  }
  uint64_t v16 = (WebCore::SQLiteStatement *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v16) {
    WebCore::SQLiteStatement::operator delete(v16, 0x18uLL);
  }
  uint64_t v17 = (WebCore::SQLiteStatement *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v17) {
    WebCore::SQLiteStatement::operator delete(v17, 0x18uLL);
  }
  uint64_t v18 = (WebCore::SQLiteStatement *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v18) {
    WebCore::SQLiteStatement::operator delete(v18, 0x18uLL);
  }
  uint64_t v19 = (WebCore::SQLiteStatement *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v19) {
    WebCore::SQLiteStatement::operator delete(v19, 0x18uLL);
  }
  uint64_t v20 = (WebCore::SQLiteStatement *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v20) {
    WebCore::SQLiteStatement::operator delete(v20, 0x18uLL);
  }
  uint64_t v21 = (WebCore::SQLiteStatement *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v21) {
    WebCore::SQLiteStatement::operator delete(v21, 0x18uLL);
  }
  uint64_t v22 = (WebCore::SQLiteStatement *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v22) {
    WebCore::SQLiteStatement::operator delete(v22, 0x18uLL);
  }
  uint64_t v23 = (WebCore::SQLiteStatement *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v23) {
    WebCore::SQLiteStatement::operator delete(v23, 0x18uLL);
  }
  uint64_t v24 = *((void *)this + 12);
  if (v24)
  {
    *(void *)(v24 + 8) = 0;
    long long v25 = (unsigned int *)*((void *)this + 12);
    *((void *)this + 1objc_destroyWeak(this + 2) = 0;
    if (v25 && atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v3);
    }
  }
  else
  {
    *((void *)this + 1objc_destroyWeak(this + 2) = 0;
  }

  WebKit::DatabaseUtilities::~DatabaseUtilities(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::PCM::Database::~Database(this);

  WTF::fastFree(v1, v2);
}

uint64_t *WebKit::PCM::Database::expectedTableAndIndexQueries(WebKit::PCM::Database *this)
{
  v40[4] = *MEMORY[0x1E4F143B8];
  if ((_MergedGlobals_73 & 1) == 0)
  {
    v33[0] = "PCMObservedDomains";
    v33[1] = 19;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v30 = (WTF::StringImpl *)v38[0];
    LOBYTE(v31) = 0;
    char v32 = 0;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)v38, (uint64_t)v33, (uint64_t *)&v30);
    v29[0] = "UnattributedPrivateClickMeasurement";
    v29[1] = 36;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v2 = (WTF::StringImpl *)v34;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS UnattributedPrivateClickMeasurement_sourceSiteDomainID_destinationSiteDomainID_sourceApplicationBundleID on UnattributedPrivateClickMeasurement(sourceSiteDomainID, destinationSiteDomainID, sourceApplicationBundleID)", &v25);
    unsigned int v3 = v25;
    long long v25 = 0;
    uint64_t v26 = v2;
    uint64_t v27 = v3;
    char v28 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v39, (uint64_t)v29, (uint64_t *)&v26);
    v24[0] = "AttributedPrivateClickMeasurement";
    v24[1] = 34;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned int v4 = (WTF::StringImpl *)v34;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS AttributedPrivateClickMeasurement_sourceSiteDomainID_destinationSiteDomainID_sourceApplicationBundleID on AttributedPrivateClickMeasurement(sourceSiteDomainID, destinationSiteDomainID, sourceApplicationBundleID)", &v20);
    int v5 = v20;
    uint64_t v20 = 0;
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    char v23 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)v40, (uint64_t)v24, (uint64_t *)&v21);
    WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::HashMap(&v34, (uint64_t)v38, 3);
    uint64_t v6 = 0;
    qword_1EB3598E0 = v34;
    dword_1EB3598F0 = v36;
    byte_1EB3598F4 = v37;
    uint64_t v7 = v35;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    qword_1EB3598E8 = v7;
    int v36 = 0;
    char v37 = 0;
    do
    {
      unsigned int v8 = &v38[v6];
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v40[v6 + 2]);
      uint64_t v10 = (WTF::StringImpl *)v40[v6 + 1];
      v40[v6 + 1] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t v11 = (WTF::StringImpl *)v8[8];
      v8[8] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v9);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      v6 -= 4;
    }
    while (v6 != -12);
    if (v23)
    {
      uint64_t v12 = v22;
      uint64_t v22 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v9);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    uint64_t v13 = v21;
    uint64_t v21 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v9);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v20;
    uint64_t v20 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v9);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    if (v28)
    {
      uint64_t v15 = v27;
      uint64_t v27 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v9);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    uint64_t v16 = v26;
    uint64_t v26 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v9);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v25;
    long long v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v9);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v32)
    {
      uint64_t v18 = v31;
      uint64_t v31 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v9);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
    }
    uint64_t v19 = v30;
    uint64_t v30 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v9);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    _MergedGlobals_73 = 1;
  }
  return &qword_1EB3598E0;
}

char **WebKit::PCM::Database::sortedTables(WebKit::PCM::Database *this)
{
  return &WebKit::PCM::Database::sortedTables(void)::sortedTables;
}

void *WebKit::PCM::Database::interruptAllDatabases(WebKit::PCM::Database *this)
{
  if ((byte_1EB3598C9 & 1) == 0)
  {
    *(void *)&dword_1EB3598D8 = 0;
    qword_1EB3598D0 = 0;
    byte_1EB3598C9 = 1;
  }
  uint64_t v14 = &qword_1EB3598D0;
  uint64_t v15 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)&qword_1EB3598D0);
  uint64_t v16 = v1;
  uint64_t v2 = qword_1EB3598D0;
  if (qword_1EB3598D0)
  {
    uint64_t v3 = *(unsigned int *)(qword_1EB3598D0 - 4);
    uint64_t v4 = qword_1EB3598D0 + 8 * v3;
    uint64_t v17 = v4;
    uint64_t v18 = v4;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v9 = &qword_1EB3598D0;
  uint64_t v10 = v4;
  uint64_t v11 = v4;
  uint64_t v12 = v4;
  uint64_t v13 = v2 + 8 * v3;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  uint64_t v6 = v15;
  uint64_t v7 = (void *)v10;
  while (v6 != v7)
  {
    if (*(void *)(*(void *)(*v6 + 8) + 24)) {
      WebCore::SQLiteDatabase::interrupt();
    }
    unsigned int v8 = v6 + 1;
    uint64_t v15 = v6 + 1;
    if (v6 + 1 != v16)
    {
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        if (++v8 == v16)
        {
          unsigned int v8 = v16;
          break;
        }
      }
      uint64_t v15 = v8;
    }
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
    uint64_t v6 = v15;
    ++*((_DWORD *)v14 + 2);
  }
  return result;
}

uint64_t WebKit::PCM::Database::createUniqueIndices(WebKit::PCM::Database *this)
{
  uint64_t result = WebCore::SQLiteDatabase::executeCommand();
  if (result)
  {
    return WebCore::SQLiteDatabase::executeCommand();
  }
  return result;
}

uint64_t WebKit::PCM::Database::createSchema(WebKit::PCM::Database *this)
{
  if (!WebCore::SQLiteDatabase::executeCommand()
    || !WebCore::SQLiteDatabase::executeCommand()
    || !WebCore::SQLiteDatabase::executeCommand()
    || !WebCore::SQLiteDatabase::executeCommand())
  {
    return 0;
  }

  return WebCore::SQLiteDatabase::executeCommand();
}

unsigned char *WebKit::PCM::Database::insertPrivateClickMeasurement(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a1, (uint64_t)v20);
  unint64_t v6 = WebKit::PCM::Database::ensureDomainID((WebCore::SQLiteStatement **)a1, (const WebCore::RegistrableDomain *)(a2 + 8));
  unint64_t v7 = WebKit::PCM::Database::ensureDomainID((WebCore::SQLiteStatement **)a1, (const WebCore::RegistrableDomain *)(a2 + 16));
  if (!HIDWORD(v6) || !HIDWORD(v7)) {
    return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v20);
  }
  if (a3)
  {
    int v8 = *(unsigned __int8 *)(a2 + 184);
    double v9 = -1.0;
    if (*(unsigned char *)(a2 + 200)) {
      double v10 = *(double *)(a2 + 192);
    }
    else {
      double v10 = -1.0;
    }
    LOBYTE(v18[0]) = 0;
    LOBYTE(v19) = 0;
    if (v8 && *(unsigned char *)(a2 + 176))
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::DestinationSecretToken,WebCore::PCM::DestinationSecretToken const&,WebCore::PCM::DestinationSecretToken*>(v18, a2 + 152);
      LOBYTE(v19) = 1;
    }
    if (*(unsigned char *)(a2 + 216)) {
      double v9 = *(double *)(a2 + 208);
    }
    uint64_t v11 = (WebCore::SQLiteDatabase *)(a1 + 16);
    WebCore::SQLiteDatabase::prepareStatement();
    if (v29 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v25))
    {
LABEL_44:
      uint64_t v13 = qword_1EB3582F8;
      if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
        *(_DWORD *)buf = 134218243;
        uint64_t v22 = a1;
        __int16 v23 = 2081;
        uint64_t v24 = ErrorMsg;
        _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "%p - Database::insertPrivateClickMeasurement insertAttributedPrivateClickMeasurementQuery, error message: %{private}s", buf, 0x16u);
      }
LABEL_46:
      if (v29 != -1) {
        (*(&off_1EE9C98E0 + v29))((int)buf, (WebCore::SQLiteStatement *)v25);
      }
      std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v12);
      return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v20);
    }
    if (!v29)
    {
      if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v25))
      {
        if (v29) {
          goto LABEL_72;
        }
        if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v25))
        {
          if (v29) {
            goto LABEL_72;
          }
          if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v25))
          {
            if (v29) {
              goto LABEL_72;
            }
            if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v25))
            {
              if (v29) {
                goto LABEL_72;
              }
              if (!WebCore::SQLiteStatement::bindDouble((WebCore::SQLiteStatement *)v25, *(double *)(a2 + 24)))
              {
                if (v29) {
                  goto LABEL_72;
                }
                if (!WebCore::SQLiteStatement::bindDouble((WebCore::SQLiteStatement *)v25, v10))
                {
                  if (v29) {
                    goto LABEL_72;
                  }
                  if (!WebCore::SQLiteStatement::bindText())
                  {
                    if (v29) {
                      goto LABEL_72;
                    }
                    if (!WebCore::SQLiteStatement::bindText())
                    {
                      if (v29) {
                        goto LABEL_72;
                      }
                      if (!WebCore::SQLiteStatement::bindText())
                      {
                        if (v29) {
                          goto LABEL_72;
                        }
                        if (!WebCore::SQLiteStatement::bindDouble((WebCore::SQLiteStatement *)v25, v9))
                        {
                          if (v29) {
                            goto LABEL_72;
                          }
                          if (!WebCore::SQLiteStatement::bindText())
                          {
                            if (v29) {
                              goto LABEL_72;
                            }
                            if (!WebCore::SQLiteStatement::bindText())
                            {
                              if (v29) {
                                goto LABEL_72;
                              }
                              if (!WebCore::SQLiteStatement::bindText())
                              {
                                if (v29) {
                                  goto LABEL_72;
                                }
                                if (!WebCore::SQLiteStatement::bindText())
                                {
                                  if (v29) {
                                    goto LABEL_72;
                                  }
                                  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v25) == 101) {
                                    goto LABEL_46;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      goto LABEL_44;
    }
LABEL_72:
    while (1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_58:
      if (WebCore::SQLiteStatement::bindText()) {
        break;
      }
      if (!v19)
      {
        if (WebCore::SQLiteStatement::bindText()) {
          break;
        }
        if (!v19)
        {
          if (WebCore::SQLiteStatement::bindText()) {
            break;
          }
          if (!v19)
          {
            if (WebCore::SQLiteStatement::bindText()) {
              break;
            }
            if (!v19)
            {
              if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v18) == 101) {
                goto LABEL_69;
              }
              break;
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v11 = (WebCore::SQLiteDatabase *)(a1 + 16);
    WebCore::SQLiteDatabase::prepareStatement();
    if (!v19 && !WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v18))
    {
      if (v19) {
        goto LABEL_72;
      }
      if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v18))
      {
        if (v19) {
          goto LABEL_72;
        }
        if (!WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v18))
        {
          if (v19) {
            goto LABEL_72;
          }
          if (!WebCore::SQLiteStatement::bindDouble((WebCore::SQLiteStatement *)v18, *(double *)(a2 + 24)))
          {
            if (!v19) {
              goto LABEL_58;
            }
            goto LABEL_72;
          }
        }
      }
    }
  }
  uint64_t v14 = qword_1EB3582F8;
  if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = WebCore::SQLiteDatabase::lastErrorMsg(v11);
    *(_DWORD *)long long v25 = 134218243;
    uint64_t v26 = a1;
    __int16 v27 = 2081;
    uint64_t v28 = v17;
    _os_log_error_impl(&dword_1985F2000, v14, OS_LOG_TYPE_ERROR, "%p - Database::insertPrivateClickMeasurement insertUnattributedPrivateClickMeasurementQuery, error message: %{private}s", v25, 0x16u);
  }
LABEL_69:
  if (v19 != -1) {
    (*(&off_1EE9C98E0 + v19))((int)v25, (WebCore::SQLiteStatement *)v18);
  }
  return WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v20);
}

uint64_t WebKit::PCM::Database::ensureDomainID(WebCore::SQLiteStatement **this, const WebCore::RegistrableDomain *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = WebKit::PCM::Database::domainID(this, a2);
  unint64_t v5 = v4 >> 8;
  if (HIDWORD(v4))
  {
    unsigned __int8 v8 = v4;
    uint64_t v7 = v4 & 0x100000000;
    return v7 & 0x100000000 | v8 | (v5 << 8);
  }
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 26, (uint64_t)"insertObservedDomain", (WebCore::SQLiteStatementAutoResetScope *)&v14);
  if (!v14 || WebCore::SQLiteStatement::bindText())
  {
    unint64_t v6 = qword_1EB3582F8;
    if (!os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
    *(_DWORD *)buf = 134218243;
    uint64_t v16 = this;
    __int16 v17 = 2081;
    uint64_t v18 = ErrorMsg;
    uint64_t v12 = "%p - Database::ensureDomainID failed to bind, error message: %{private}s";
LABEL_14:
    _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, v12, buf, 0x16u);
    goto LABEL_5;
  }
  if (WebCore::SQLiteStatement::step(v14) == 101)
  {
    unint64_t v10 = WebKit::PCM::Database::domainID(this, a2);
    unsigned __int8 v8 = v10;
    unint64_t v5 = v10 >> 8;
    uint64_t v7 = v10 & 0x100000000;
    goto LABEL_6;
  }
  unint64_t v6 = qword_1EB3582F8;
  if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
    *(_DWORD *)buf = 134218243;
    uint64_t v16 = this;
    __int16 v17 = 2081;
    uint64_t v18 = v11;
    uint64_t v12 = "%p - Database::ensureDomainID failed to commit, error message: %{private}s";
    goto LABEL_14;
  }
LABEL_5:
  uint64_t v7 = 0;
  unsigned __int8 v8 = 0;
LABEL_6:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v14);
  return v7 & 0x100000000 | v8 | (v5 << 8);
}

uint64_t WebKit::PCM::Database::domainID(WebCore::SQLiteStatement **this, const WebCore::RegistrableDomain *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 24, (uint64_t)"domainID", (WebCore::SQLiteStatementAutoResetScope *)&v10);
  if (v10 && !WebCore::SQLiteStatement::bindText())
  {
    if (WebCore::SQLiteStatement::step(v10) == 100)
    {
      int v8 = WebCore::SQLiteStatement::columnInt(v10);
      unsigned int v6 = v8 & 0xFFFFFF00;
      int v5 = v8;
      uint64_t v4 = 0x100000000;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v3 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)buf = 134218243;
      uint64_t v12 = this;
      __int16 v13 = 2081;
      uint64_t v14 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "%p - Database::domainIDFromString failed. Error message: %{private}s", buf, 0x16u);
    }
  }
  uint64_t v4 = 0;
  int v5 = 0;
  unsigned int v6 = 0;
LABEL_6:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v10);
  return v4 | v6 | v5;
}

void WebKit::PCM::Database::clearExpiredPrivateClickMeasurement(WebCore::SQLiteStatement **this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (WebCore::PrivateClickMeasurement *)WTF::WallTime::now((WTF::WallTime *)this);
  double v4 = v3;
  WebCore::PrivateClickMeasurement::maxAge(v2);
  double v6 = v5;
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 20, (uint64_t)"clearExpiredPrivateClickMeasurement", (WebCore::SQLiteStatementAutoResetScope *)&v9);
  if (!v9
    || WebCore::SQLiteStatement::bindDouble(v9, v4 - v6)
    || WebCore::SQLiteStatement::step(v9) != 101)
  {
    uint64_t v7 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)buf = 134218243;
      uint64_t v11 = this;
      __int16 v12 = 2081;
      uint64_t v13 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "%p - Database::clearExpiredPrivateClickMeasurement, error message: %{private}s", buf, 0x16u);
    }
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v9);
}

char *WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(char *result, unsigned char *a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5, char *a6, uint64_t a7)
{
  if (a3) {
    size_t v7 = a3 - 1;
  }
  else {
    size_t v7 = 0;
  }
  if (v7 >> 31)
  {
    __break(0xC471u);
    goto LABEL_54;
  }
  if (a7) {
    unint64_t v8 = a7 - 1;
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v9 = v8 >> 31;
  if (v8 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198C1AA68);
  }
  unsigned __int8 v11 = a5;
  unsigned __int8 v12 = a4;
  uint64_t v14 = result;
  unsigned __int8 v15 = a4;
  do
  {
    LODWORD(v9) = v9 + 1;
    unsigned int v16 = v15;
    v15 /= 0xAu;
  }
  while (v16 > 9);
  int v17 = 0;
  unsigned __int8 v18 = a5;
  do
  {
    ++v17;
    unsigned int v19 = v18;
    v18 /= 0xAu;
  }
  while (v19 > 9);
  if (((v17 | v8) & 0x80000000) != 0) {
    goto LABEL_53;
  }
  BOOL v20 = __OFADD__(v17, v8);
  int v21 = v17 + v8;
  if (v20) {
    goto LABEL_53;
  }
  BOOL v20 = __OFADD__(v21, 17);
  int v22 = v21 + 17;
  BOOL v23 = v20;
  if ((v9 & 0x80000000) != 0 || v23) {
    goto LABEL_53;
  }
  BOOL v20 = __OFADD__(v9, v22);
  int v24 = v9 + v22;
  BOOL v25 = v20;
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_53;
  }
  if (v25) {
    goto LABEL_53;
  }
  uint64_t v26 = (v7 + v24);
  if (__OFADD__(v7, v24)) {
    goto LABEL_53;
  }
  if (!v26)
  {
    __int16 v27 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_47;
  }
  if ((v26 & 0x80000000) != 0 || (uint64_t result = (char *)WTF::tryFastCompactMalloc((WTF *)(v26 + 20)), (v27 = v42) == 0))
  {
LABEL_53:
    *(void *)uint64_t v14 = 0;
    __break(0xC471u);
LABEL_54:
    JUMPOUT(0x198C1AA48);
  }
  uint64_t v28 = v42 + 5;
  *uint64_t v42 = 2;
  v27[1] = v26;
  *((void *)v27 + 1) = v27 + 5;
  v27[4] = 4;
  if (v7)
  {
    if (v7 == 1) {
      *uint64_t v28 = *a2;
    }
    else {
      uint64_t result = (char *)memcpy(v27 + 5, a2, v7);
    }
  }
  uint64_t v29 = 0;
  unsigned __int8 v30 = v12;
  do
  {
    unsigned int v31 = v30;
    *((unsigned char *)&v42 + v29-- + 3) = (v30 % 0xAu) | 0x30;
    v30 /= 0xAu;
  }
  while (v31 > 9);
  char v32 = &v28[v7];
  if (v29 + 5 <= 4) {
    uint64_t result = (char *)memcpy(v32, (char *)&v42 + v29 + 4, -v29);
  }
  int v33 = 0;
  do
  {
    ++v33;
    unsigned int v34 = v12;
    v12 /= 0xAu;
  }
  while (v34 > 9);
  uint64_t v35 = 0;
  int v36 = &v32[v33];
  *(_OWORD *)int v36 = *(_OWORD *)"' and priority: '";
  v36[16] = 39;
  unsigned __int8 v37 = v11;
  do
  {
    unsigned int v38 = v37;
    *((unsigned char *)&v42 + v35-- + 3) = (v37 % 0xAu) | 0x30;
    v37 /= 0xAu;
  }
  while (v38 > 9);
  uint64_t v39 = v36 + 17;
  if (v35 + 5 <= 4) {
    uint64_t result = (char *)memcpy(v39, (char *)&v42 + v35 + 4, -v35);
  }
  int v40 = 0;
  do
  {
    ++v40;
    unsigned int v41 = v11;
    v11 /= 0xAu;
  }
  while (v41 > 9);
  if (v8)
  {
    uint64_t result = &v39[v40];
    if (v8 == 1) {
      *uint64_t result = *a6;
    }
    else {
      uint64_t result = (char *)memcpy(result, a6, v8);
    }
  }
LABEL_47:
  *(void *)uint64_t v14 = v27;
  return result;
}

void WebKit::PCM::Database::allAttributedPrivateClickMeasurement(WebKit::PCM::Database *this, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  WebKit::DatabaseUtilities::scopedStatement(a2, (WebCore::SQLiteStatement **)(a2 + 136), (uint64_t)"allAttributedPrivateClickMeasurement", (WebCore::SQLiteStatementAutoResetScope *)&v9);
  double v4 = v9;
  if (v9)
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    if (WebCore::SQLiteStatement::step(v4) == 100)
    {
      do
      {
        WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase(v9, a2, 1, (uint64_t)buf);
        unsigned int v6 = *((_DWORD *)this + 3);
        if (v6 == *((_DWORD *)this + 2))
        {
          WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PrivateClickMeasurement>((uint64_t)this, (unint64_t)buf);
        }
        else
        {
          WebCore::PrivateClickMeasurement::PrivateClickMeasurement(*(void *)this + 312 * v6, (uint64_t)buf);
          ++*((_DWORD *)this + 3);
        }
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v7);
      }
      while (WebCore::SQLiteStatement::step(v9) == 100);
    }
  }
  else
  {
    double v5 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a2 + 16));
      *(_DWORD *)buf = 134218243;
      uint64_t v11 = a2;
      __int16 v12 = 2081;
      uint64_t v13 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%p - Database::allAttributedPrivateClickMeasurement, error message: %{private}s", buf, 0x16u);
    }
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v9);
}

WTF::StringImpl *WebKit::PCM::Database::attributionToStringForTesting(WebKit::PCM::Database *this, const WebCore::PrivateClickMeasurement *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  unsigned __int8 v6 = *(unsigned char *)a2;
  v109 = 0;
  v110 = 0;
  int v111 = 0;
  char v112 = 1;
  if (!v4) {
    goto LABEL_155;
  }
  int v7 = *(_DWORD *)(v4 + 4);
  if (!v5) {
    goto LABEL_156;
  }
LABEL_7:
  for (int i = *(_DWORD *)(v5 + 4); ; int i = 0)
  {
    unsigned int v9 = 12;
    unsigned __int8 v10 = v6;
    do
    {
      unsigned int v11 = v9;
      unsigned int v12 = v10;
      v10 /= 0xAu;
      ++v9;
    }
    while (v12 > 9);
    int v13 = v9 > 0xB ? v11 + 1 : -1;
    BOOL v14 = __CFADD__(v13, i);
    unsigned int v15 = v13 + i;
    if (v14 || v15 >= 0xFFFFFFEC) {
      int v16 = -1;
    }
    else {
      int v16 = v15 + 20;
    }
    BOOL v14 = __CFADD__(v16, v7);
    unsigned int v17 = v16 + v7;
    if (v14 || v17 >= 0xFFFFFFF3)
    {
      uint64_t v18 = 0xFFFFFFFFLL;
      if (!v4) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v18 = v17 + 13;
      if (!v4) {
        goto LABEL_20;
      }
    }
    if ((*(unsigned char *)(v4 + 16) & 4) == 0) {
      goto LABEL_22;
    }
LABEL_20:
    if (v5 && (*(unsigned char *)(v5 + 16) & 4) == 0)
    {
LABEL_22:
      uint64_t v19 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v109);
      if (v19)
      {
        uint64_t v20 = v19;
        for (uint64_t j = 0; j != 13; ++j)
          *(_WORD *)(v19 + 2 * j) = aSourceSite[j];
        uint64_t v114 = v4;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v114, (char *)(v19 + 26));
        uint64_t v22 = v114 ? *(unsigned int *)(v114 + 4) : 0;
        uint64_t v23 = 0;
        uint64_t v24 = v20 + 26 + 2 * v22;
        do
        {
          *(_WORD *)(v24 + 2 * v23) = aAttributeOnSit[v23];
          ++v23;
        }
        while (v23 != 20);
        uint64_t v25 = v24 + 40;
        v108[0] = v5;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v108, (char *)(v24 + 40));
        uint64_t v26 = v108[0] ? *(unsigned int *)(v108[0] + 4) : 0;
        uint64_t v27 = 0;
        uint64_t v28 = v25 + 2 * v26;
        uint64_t v29 = 2 * v22 + 2 * v26 + v20 + 66;
        do
        {
          *(_WORD *)(v29 + 2 * v27) = aSourceId[v27];
          ++v27;
        }
        while (v27 != 12);
        uint64_t v30 = 0;
        do
        {
          unsigned int v31 = v6;
          *((unsigned char *)&v113 + v30-- + 3) = (v6 % 0xAu) | 0x30;
          v6 /= 0xAu;
        }
        while (v31 > 9);
        if (v30 + 5 <= 4)
        {
          char v32 = (_WORD *)(v28 + 24);
          do
          {
            *v32++ = *((unsigned __int8 *)&v113 + v30 + 4);
            BOOL v14 = __CFADD__(v30++, 1);
          }
          while (!v14);
        }
      }
      goto LABEL_49;
    }
    int v33 = (char *)MEMORY[0x19972DE60](&v109, v18);
    if (v33)
    {
      qmemcpy(v33, "Source site: ", 13);
      unsigned int v34 = v33 + 13;
      uint64_t v114 = v4;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v114, v33 + 13);
      uint64_t v35 = v114;
      if (v114) {
        uint64_t v35 = *(unsigned int *)(v114 + 4);
      }
      int v36 = &v34[v35];
      *(_OWORD *)int v36 = *(_OWORD *)"\nAttribute on site: ";
      *((_DWORD *)v36 + 4) = 540697972;
      unsigned __int8 v37 = v36 + 20;
      v108[0] = v5;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v108, v36 + 20);
      uint64_t v38 = v108[0];
      if (v108[0]) {
        uint64_t v38 = *(unsigned int *)(v108[0] + 4);
      }
      uint64_t v39 = 0;
      int v40 = &v37[v38];
      *(void *)int v40 = *(void *)"\nSource ID: ";
      *((_DWORD *)v40 + objc_destroyWeak(this + 2) = 540689481;
      do
      {
        unsigned int v41 = v6;
        *((unsigned char *)&v113 + v39-- + 3) = (v6 % 0xAu) | 0x30;
        v6 /= 0xAu;
      }
      while (v41 > 9);
      if (v39 + 5 <= 4) {
        memcpy(v40 + 12, (char *)&v113 + v39 + 4, -v39);
      }
    }
LABEL_49:
    if (!*((unsigned char *)a2 + 184)) {
      goto LABEL_120;
    }
    int v42 = 0;
    unsigned __int8 v43 = *((unsigned char *)a2 + 56);
    unsigned __int8 v6 = *((unsigned char *)a2 + 57);
    int v44 = *((unsigned __int8 *)a2 + 200);
    unsigned __int8 v45 = v43;
    do
    {
      ++v42;
      unsigned int v46 = v45;
      v45 /= 0xAu;
    }
    while (v46 > 9);
    int v47 = 59;
    unsigned __int8 v48 = *((unsigned char *)a2 + 57);
    do
    {
      unsigned int v49 = v48;
      v48 /= 0xAu;
      ++v47;
    }
    while (v49 > 9);
    uint64_t v50 = v110;
    if (!v110)
    {
      uint64_t v50 = v109;
      if (!v109) {
        goto LABEL_82;
      }
    }
    if ((*((unsigned char *)v50 + 16) & 4) == 0)
    {
      uint64_t v51 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v109);
      if (v51)
      {
        for (uint64_t k = 0; k != 27; ++k)
          *(_WORD *)(v51 + 2 * k) = aAttributionTri[k];
        uint64_t v53 = 0;
        unsigned __int8 v54 = v43;
        do
        {
          unsigned int v55 = v54;
          *((unsigned char *)v108 + v53-- + 3) = (v54 % 0xAu) | 0x30;
          v54 /= 0xAu;
        }
        while (v55 > 9);
        if (v53 + 5 <= 4)
        {
          long long v56 = (_WORD *)(v51 + 54);
          do
          {
            *v56++ = *((unsigned __int8 *)v108 + v53 + 4);
            BOOL v14 = __CFADD__(v53++, 1);
          }
          while (!v14);
        }
        unsigned int v57 = 0;
        do
        {
          ++v57;
          unsigned int v58 = v43;
          v43 /= 0xAu;
        }
        while (v58 > 9);
        uint64_t v59 = 0;
        uint64_t v60 = v51 + 54 + 2 * v57;
        uint64_t v61 = v51 + 2 * v57;
        do
        {
          *(_WORD *)(v61 + 54 + 2 * v59) = aAttributionPri[v59];
          ++v59;
        }
        while (v59 != 23);
        uint64_t v62 = 0;
        unsigned __int8 v63 = v6;
        do
        {
          unsigned int v64 = v63;
          *((unsigned char *)v108 + v62-- + 3) = (v63 % 0xAu) | 0x30;
          v63 /= 0xAu;
        }
        while (v64 > 9);
        if (v62 + 5 <= 4)
        {
          v65 = (_WORD *)(v60 + 46);
          do
          {
            *v65++ = *((unsigned __int8 *)v108 + v62 + 4);
            BOOL v14 = __CFADD__(v62++, 1);
          }
          while (!v14);
        }
        unsigned int v66 = 0;
        do
        {
          ++v66;
          unsigned int v67 = v6;
          v6 /= 0xAu;
        }
        while (v67 > 9);
        uint64_t v68 = 0;
        uint64_t v69 = v61 + 2 * v66 + 100;
        do
        {
          *(_WORD *)(v69 + 2 * v68) = aAttributionEar[v68];
          ++v68;
        }
        while (v68 != 36);
      }
    }
    else
    {
LABEL_82:
      uint64_t v51 = MEMORY[0x19972DE60](&v109);
      if (v51)
      {
        uint64_t v70 = 0;
        qmemcpy((void *)v51, "\nAttribution trigger data: ", 27);
        unsigned __int8 v71 = v43;
        do
        {
          unsigned int v72 = v71;
          *((unsigned char *)v108 + v70-- + 3) = (v71 % 0xAu) | 0x30;
          v71 /= 0xAu;
        }
        while (v72 > 9);
        uint64_t v73 = v51 + 27;
        if (v70 + 5 <= 4) {
          uint64_t v51 = (uint64_t)memcpy((void *)(v51 + 27), (char *)v108 + v70 + 4, -v70);
        }
        unsigned int v74 = 0;
        do
        {
          ++v74;
          unsigned int v75 = v43;
          v43 /= 0xAu;
        }
        while (v75 > 9);
        uint64_t v76 = 0;
        v77 = (char *)(v73 + v74);
        qmemcpy(v77, "\nAttribution priority: ", 23);
        unsigned __int8 v78 = v6;
        do
        {
          unsigned int v79 = v78;
          *((unsigned char *)v108 + v76-- + 3) = (v78 % 0xAu) | 0x30;
          v78 /= 0xAu;
        }
        while (v79 > 9);
        v80 = v77 + 23;
        if (v76 + 5 <= 4) {
          uint64_t v51 = (uint64_t)memcpy(v80, (char *)v108 + v76 + 4, -v76);
        }
        int v81 = 0;
        do
        {
          ++v81;
          unsigned int v82 = v6;
          v6 /= 0xAu;
        }
        while (v82 > 9);
        qmemcpy(&v80[v81], "\nAttribution earliest time to send: ", 36);
      }
    }
    if (v44) {
      WTF::WallTime::now((WTF::WallTime *)v51);
    }
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    if (*((unsigned char *)a2 + 184)) {
      break;
    }
    __break(1u);
LABEL_155:
    int v7 = 0;
    if (v5) {
      goto LABEL_7;
    }
LABEL_156:
    ;
  }
  if (!*((unsigned char *)a2 + 176))
  {
LABEL_120:
    WTF::StringBuilder::append();
    goto LABEL_121;
  }
  uint64_t v84 = *((void *)a2 + 19);
  uint64_t v83 = *((void *)a2 + 20);
  uint64_t v85 = *((void *)a2 + 21);
  v86 = v110;
  if ((v110 || (v86 = v109) != 0) && (*((unsigned char *)v86 + 16) & 4) == 0
    || v84 && (*(unsigned char *)(v84 + 16) & 4) == 0
    || v83 && (*(unsigned char *)(v83 + 16) & 4) == 0
    || v85 && (*(unsigned char *)(v85 + 16) & 4) == 0)
  {
    uint64_t v87 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v109);
    if (v87)
    {
      uint64_t v88 = v87;
      for (uint64_t m = 0; m != 8; ++m)
        *(_WORD *)(v87 + 2 * m) = aToken[m];
      uint64_t v113 = v84;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v113, (char *)(v87 + 16));
      if (v113) {
        uint64_t v90 = *(unsigned int *)(v113 + 4);
      }
      else {
        uint64_t v90 = 0;
      }
      uint64_t v91 = 0;
      uint64_t v92 = v88 + 16 + 2 * v90;
      do
      {
        *(_WORD *)(v92 + 2 * v91) = aSignature[v91];
        ++v91;
      }
      while (v91 != 12);
      uint64_t v93 = v92 + 24;
      uint64_t v114 = v83;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v114, (char *)(v92 + 24));
      if (v114) {
        uint64_t v94 = *(unsigned int *)(v114 + 4);
      }
      else {
        uint64_t v94 = 0;
      }
      uint64_t v95 = 0;
      uint64_t v96 = v93 + 2 * v94;
      uint64_t v97 = 2 * v90 + 2 * v94 + v88 + 40;
      do
      {
        *(_WORD *)(v97 + 2 * v95) = aKey_0[v95];
        ++v95;
      }
      while (v95 != 6);
      v108[0] = v85;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v108, (char *)(v96 + 12));
    }
  }
  else
  {
    uint64_t v101 = MEMORY[0x19972DE60](&v109);
    if (v101)
    {
      *(void *)uint64_t v101 = 0x203A6E656B6F740ALL;
      uint64_t v102 = v101 + 8;
      uint64_t v113 = v84;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v113, (char *)(v101 + 8));
      uint64_t v103 = v113;
      if (v113) {
        uint64_t v103 = *(unsigned int *)(v113 + 4);
      }
      uint64_t v104 = v102 + v103;
      *(void *)uint64_t v104 = *(void *)"\nsignature: ";
      *(_DWORD *)(v104 + 8) = 540697970;
      uint64_t v105 = v104 + 12;
      uint64_t v114 = v83;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v114, (char *)(v104 + 12));
      uint64_t v106 = v114;
      if (v114) {
        uint64_t v106 = *(unsigned int *)(v114 + 4);
      }
      uint64_t v107 = v105 + v106;
      *(_WORD *)(v107 + 4) = 8250;
      *(_DWORD *)uint64_t v107 = 2036689674;
      v108[0] = v85;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v108, (char *)(v107 + 6));
    }
  }
LABEL_121:
  v108[0] = (uint64_t)"\nApplication bundle identifier: ";
  v108[1] = 33;
  LOBYTE(v114) = 10;
  WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>((WTF::StringBuilder *)&v109, (uint64_t)v108, (uint64_t *)a2 + 38, (char *)&v114);
  uint64_t result = v109;
  if (v109
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v109),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v109),
        (uint64_t result = v109) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *(void *)this = result;
  v100 = v110;
  v110 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::destroy(v100, v98);
      uint64_t result = v109;
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v109 = 0;
  if (!result)
  {
LABEL_131:
    if (v5) {
      goto LABEL_134;
    }
LABEL_136:
    if (v4) {
      goto LABEL_139;
    }
    return result;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_131;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v98);
  if (!v5) {
    goto LABEL_136;
  }
LABEL_134:
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
    goto LABEL_136;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v5, v98);
  if (v4)
  {
LABEL_139:
    if (*(_DWORD *)v4 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v4, v98);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::StringBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL v4 = v3 != 0;
  unint64_t v5 = v3 - 1;
  if (!v4) {
    unint64_t v5 = 0;
  }
  unsigned int v11 = *(int8x16_t **)a2;
  if (v5 >> 31) {
    goto LABEL_8;
  }
  int v12 = v5;
  uint64_t v6 = *(void *)(a3 + 8);
  BOOL v4 = v6 != 0;
  unint64_t v7 = v6 - 1;
  if (!v4) {
    unint64_t v7 = 0;
  }
  unsigned int v9 = *(int8x16_t **)a3;
  if (v7 >> 31)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198C1B830);
  }
  int v10 = v7;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, &v11, &v9);
}

unint64_t WebKit::PCM::Database::clearPrivateClickMeasurement(WebCore::SQLiteStatement **this, const WebCore::RegistrableDomain *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a2 + 8))
  {
    unint64_t result = WebKit::PCM::Database::domainID(this, a2);
    if (!HIDWORD(result)) {
      return result;
    }
    WTF::String::number((WTF::String *)result);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  BOOL v4 = *(WTF::StringImpl **)buf;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)this, (uint64_t)v9);
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 19, (uint64_t)"clearPrivateClickMeasurement", (WebCore::SQLiteStatementAutoResetScope *)&v8);
  if (!v8
    || WebCore::SQLiteStatement::bindText()
    || WebCore::SQLiteStatement::step(v8) != 101)
  {
    unint64_t v5 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)buf = 134218243;
      *(void *)&uint8_t buf[4] = this;
      __int16 v11 = 2081;
      uint64_t v12 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%p - ResourceLoadStatisticsStore::clearPrivateClickMeasurement clearAllPrivateClickMeasurementScopedStatement, error message: %{private}s", buf, 0x16u);
    }
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v8);
  unint64_t result = (unint64_t)WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v9);
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      return WTF::StringImpl::destroy(v4, v6);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

void WebKit::PCM::Database::getDomainStringFromDomainID(WebCore::SQLiteStatement **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  BOOL v4 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *(_DWORD *)v4 += 2;
  }
  *a2 = v4;
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 25, (uint64_t)"getDomainStringFromDomainID", (WebCore::SQLiteStatementAutoResetScope *)&v11);
  if (v11 && !WebCore::SQLiteStatement::bindInt(v11))
  {
    if (WebCore::SQLiteStatement::step(v11) == 100)
    {
      WebCore::SQLiteStatement::columnText(this[25]);
      unint64_t v7 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      *a2 = v7;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
        {
          WTF::StringImpl::destroy(v4, v6);
          int v10 = *(WTF::StringImpl **)buf;
          *(void *)buf = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, v9);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
        }
        else
        {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
  }
  else
  {
    unint64_t v5 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
      *(_DWORD *)buf = 134218243;
      *(void *)&uint8_t buf[4] = this;
      __int16 v13 = 2081;
      uint64_t v14 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%p - Database::getDomainStringFromDomainID. Statement failed to prepare or bind, error message: %{private}s", buf, 0x16u);
    }
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v11);
}

void WebKit::PCM::Database::destroyStatements(WebKit::PCM::Database *this)
{
  uint64_t v2 = (WebCore::SQLiteStatement *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    WebCore::SQLiteStatement::operator delete(v2, 0x18uLL);
  }
  uint64_t v3 = (WebCore::SQLiteStatement *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    WebCore::SQLiteStatement::operator delete(v3, 0x18uLL);
  }
  BOOL v4 = (WebCore::SQLiteStatement *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v4) {
    WebCore::SQLiteStatement::operator delete(v4, 0x18uLL);
  }
  unint64_t v5 = (WebCore::SQLiteStatement *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v5) {
    WebCore::SQLiteStatement::operator delete(v5, 0x18uLL);
  }
  uint64_t v6 = (WebCore::SQLiteStatement *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v6) {
    WebCore::SQLiteStatement::operator delete(v6, 0x18uLL);
  }
  unint64_t v7 = (WebCore::SQLiteStatement *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v7) {
    WebCore::SQLiteStatement::operator delete(v7, 0x18uLL);
  }
  unint64_t v8 = (WebCore::SQLiteStatement *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v8) {
    WebCore::SQLiteStatement::operator delete(v8, 0x18uLL);
  }
  unsigned int v9 = (WebCore::SQLiteStatement *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v9) {
    WebCore::SQLiteStatement::operator delete(v9, 0x18uLL);
  }
  int v10 = (WebCore::SQLiteStatement *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v10) {
    WebCore::SQLiteStatement::operator delete(v10, 0x18uLL);
  }
  __int16 v11 = (WebCore::SQLiteStatement *)*((void *)this + 22);
  *((void *)this + 2objc_destroyWeak(this + 2) = 0;
  if (v11) {
    WebCore::SQLiteStatement::operator delete(v11, 0x18uLL);
  }
  uint64_t v12 = (WebCore::SQLiteStatement *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v12) {
    WebCore::SQLiteStatement::operator delete(v12, 0x18uLL);
  }
  __int16 v13 = (WebCore::SQLiteStatement *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v13) {
    WebCore::SQLiteStatement::operator delete(v13, 0x18uLL);
  }
  uint64_t v14 = (WebCore::SQLiteStatement *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v14) {
    WebCore::SQLiteStatement::operator delete(v14, 0x18uLL);
  }
  uint64_t v15 = (WebCore::SQLiteStatement *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v15)
  {
    WebCore::SQLiteStatement::operator delete(v15, 0x18uLL);
  }
}

void WebKit::PCM::EphemeralStore::~EphemeralStore(WebKit::PCM::EphemeralStore *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C96A0;
  if (*((unsigned char *)this + 328)) {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebKit::PCM::EphemeralStore *)((char *)this + 16), a2);
  }
}

{
  WebKit::PCM::EphemeralStore *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE9C96A0;
  if (*((unsigned char *)this + 328))
  {
    uint64_t v2 = this;
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebKit::PCM::EphemeralStore *)((char *)this + 16), a2);
    this = v2;
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::PCM::EphemeralStore::insertPrivateClickMeasurement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  std::optional<WebCore::PrivateClickMeasurement>::operator=[abi:sn180100]<WebCore::PrivateClickMeasurement,void>(a1 + 16, a2);
  uint64_t v5 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

void WebKit::PCM::EphemeralStore::markAllUnattributedPrivateClickMeasurementAsExpiredForTesting(WebKit::PCM::EphemeralStore *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 328))
  {
    if (!*((unsigned char *)this + 200))
    {
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebKit::PCM::EphemeralStore *)((char *)this + 16), a2);
      *((unsigned char *)this + 328) = 0;
    }
  }
}

uint64_t WebKit::PCM::EphemeralStore::attributePrivateClickMeasurement(uint64_t a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3, const WTF::StringImpl **a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  v21[0] = 0;
  v21[1] = 0;
  if (!*(unsigned char *)(a1 + 328)) {
    goto LABEL_11;
  }
  uint64_t result = WTF::equal(*(WTF **)(a1 + 24), *a2, a3);
  if (!result) {
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a1 + 328)) {
    goto LABEL_13;
  }
  uint64_t result = WTF::equal(*(WTF **)(a1 + 32), *(const WTF::StringImpl **)a3, v12);
  if ((result & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v14 = *a4;
  if (*a4 && *((_DWORD *)v14 + 1))
  {
    if (!*(unsigned char *)(a1 + 328)) {
      goto LABEL_13;
    }
    uint64_t result = WTF::equal(*(WTF **)(a1 + 320), v14, v13);
    if ((result & 1) == 0)
    {
LABEL_11:
      LOBYTE(v19[0]) = 0;
      char v20 = 0;
      goto LABEL_12;
    }
  }
  if (*(unsigned char *)(a1 + 328))
  {
    WebCore::PrivateClickMeasurement::attributeAndGetEarliestTimeToSend();
    v19[0] = v17;
    v19[1] = v18;
    char v20 = 1;
LABEL_12:
    uint64_t v15 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _OWORD *, void *))(*(void *)v15 + 16))(v15, v19, v21);
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    return (uint64_t)WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v21, v16);
  }
LABEL_13:
  __break(1u);
  return result;
}

WTF::StringImpl *WebKit::PCM::EphemeralStore::privateClickMeasurementToStringForTesting(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(a1 + 328))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::CompletionHandler<void ()(WTF::String)>::operator()(a2, &v20);
    uint64_t result = v20;
    char v20 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_23;
  }
  int v16 = 0;
  long long v17 = 0;
  int v18 = 0;
  char v19 = 1;
  uint64_t result = (WTF::StringImpl *)WTF::StringBuilder::append();
  __int16 v11 = "SourceSite: ";
  uint64_t v12 = 13;
  if (!*(unsigned char *)(a1 + 328)) {
    goto LABEL_27;
  }
  uint64_t v14 = "\n";
  uint64_t v15 = 2;
  uint64_t result = (WTF::StringImpl *)WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v16, (uint64_t)&v11, (uint64_t *)(a1 + 24), (uint64_t)&v14);
  __int16 v11 = "DestinationSite: ";
  uint64_t v12 = 18;
  if (!*(unsigned char *)(a1 + 328)) {
    goto LABEL_27;
  }
  uint64_t v14 = "\n";
  uint64_t v15 = 2;
  uint64_t result = (WTF::StringImpl *)WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v16, (uint64_t)&v11, (uint64_t *)(a1 + 32), (uint64_t)&v14);
  if (!*(unsigned char *)(a1 + 328)) {
    goto LABEL_27;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>((WTF::StringBuilder *)&v16, (int8x16_t *)"SourceID: ", 11, *(unsigned char *)(a1 + 16), (int8x16_t *)"\n", 2);
  if (!*(unsigned char *)(a1 + 328)) {
    goto LABEL_27;
  }
  LOBYTE(v11) = 0;
  char v13 = 0;
  if (*(unsigned char *)(a1 + 200))
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData const&,WebCore::PCM::AttributionTriggerData*>((uint64_t)&v11, a1 + 72);
    char v13 = 1;
    uint64_t result = (WTF::StringImpl *)WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>((WTF::StringBuilder *)&v16, (int8x16_t *)"Trigger data: ", 15, v11, (int8x16_t *)"\n", 2);
    if (v13)
    {
      WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>((WTF::StringBuilder *)&v16, (int8x16_t *)"Trigger priority: ", 19, BYTE1(v11), (int8x16_t *)"\n", 2);
      goto LABEL_9;
    }
LABEL_27:
    __break(1u);
    return result;
  }
LABEL_9:
  std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11, v5);
  uint64_t v6 = v16;
  if (v16
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v16),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v16),
        (uint64_t v6 = v16) != 0))
  {
    *(_DWORD *)v6 += 2;
  }
  int v10 = v6;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(a2, &v10);
  unint64_t v8 = v10;
  int v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned int v9 = v17;
  long long v17 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t result = v16;
  int v16 = 0;
  if (result)
  {
LABEL_23:
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(WTF::StringBuilder *a1, int8x16_t *a2, uint64_t a3, unsigned __int8 a4, int8x16_t *a5, uint64_t a6)
{
  if (a3) {
    size_t v6 = a3 - 1;
  }
  else {
    size_t v6 = 0;
  }
  if (v6 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198C1C590);
  }
  if (a6) {
    unint64_t v7 = a6 - 1;
  }
  else {
    unint64_t v7 = 0;
  }
  if (v7 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198C1C5B0);
  }
  unsigned __int8 v9 = a4;
  int v11 = 0;
  unsigned __int8 v12 = a4;
  do
  {
    ++v11;
    unsigned int v13 = v12;
    v12 /= 0xAu;
  }
  while (v13 > 9);
  uint64_t v14 = *((void *)a1 + 1);
  if ((v14 || (uint64_t v14 = *(void *)a1) != 0) && (*(unsigned char *)(v14 + 16) & 4) == 0)
  {
    uint64_t result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      int v16 = &result[2 * v6];
      if ((v6 & 0xFFFFFFC0) != 0)
      {
        long long v17 = &result[2 * (v6 & 0xFFFFFFC0)];
        long long v18 = 0uLL;
        do
        {
          v52.val[0] = *a2;
          int8x16_t v19 = a2[1];
          v54.val[0] = a2[2];
          int8x16_t v20 = a2[3];
          a2 += 4;
          int8x16_t v21 = v20;
          v54.val[1] = 0uLL;
          v56.val[0] = v19;
          v52.val[1] = 0uLL;
          uint64_t v22 = result;
          vst2q_s8(v22, v52);
          v22 += 32;
          v56.val[1] = 0uLL;
          vst2q_s8(v22, v56);
          uint64_t v23 = result + 64;
          vst2q_s8(v23, v54);
          uint64_t v24 = result + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
          result += 128;
        }
        while (result != v17);
        uint64_t result = v17;
      }
      while (result != v16)
      {
        __int16 v25 = a2->u8[0];
        a2 = (int8x16_t *)((char *)a2 + 1);
        *(_WORD *)uint64_t result = v25;
        result += 2;
      }
      uint64_t v26 = 0;
      unsigned __int8 v27 = v9;
      do
      {
        unsigned int v28 = v27;
        v50[v26-- + 7] = (v27 % 0xAu) | 0x30;
        v27 /= 0xAu;
      }
      while (v28 > 9);
      if (v26 + 5 <= 4)
      {
        uint64_t v29 = v16;
        do
        {
          *(_WORD *)uint64_t v29 = v50[v26 + 8];
          v29 += 2;
        }
        while (!__CFADD__(v26++, 1));
      }
      int v31 = 0;
      do
      {
        ++v31;
        unsigned int v32 = v9;
        v9 /= 0xAu;
      }
      while (v32 > 9);
      int v33 = &v16[2 * v31];
      unsigned int v34 = &v33[2 * v7];
      if ((v7 & 0xFFFFFFC0) != 0)
      {
        uint64_t v35 = &v33[2 * (v7 & 0xFFFFFFC0)];
        long long v36 = 0uLL;
        do
        {
          v53.val[0] = *a5;
          int8x16_t v37 = a5[1];
          v55.val[0] = a5[2];
          int8x16_t v38 = a5[3];
          a5 += 4;
          int8x16_t v39 = v38;
          v55.val[1] = 0uLL;
          v57.val[0] = v37;
          v53.val[1] = 0uLL;
          int v40 = v33;
          vst2q_s8(v40, v53);
          v40 += 32;
          v57.val[1] = 0uLL;
          vst2q_s8(v40, v57);
          unsigned int v41 = v33 + 64;
          vst2q_s8(v41, v55);
          int v42 = v33 + 96;
          vst2q_s8(v42, *(int8x16x2_t *)(&v36 - 1));
          v33 += 128;
        }
        while (v33 != v35);
        int v33 = v35;
      }
      while (v33 != v34)
      {
        __int16 v43 = a5->u8[0];
        a5 = (int8x16_t *)((char *)a5 + 1);
        *(_WORD *)int v33 = v43;
        v33 += 2;
      }
    }
  }
  else
  {
    uint64_t result = (char *)MEMORY[0x19972DE60]();
    if (result)
    {
      int v44 = result;
      if (v6)
      {
        if (v6 == 1) {
          *uint64_t result = a2->i8[0];
        }
        else {
          uint64_t result = (char *)memcpy(result, a2, v6);
        }
      }
      uint64_t v45 = 0;
      unsigned __int8 v46 = v9;
      do
      {
        unsigned int v47 = v46;
        v50[v45-- + 3] = (v46 % 0xAu) | 0x30;
        v46 /= 0xAu;
      }
      while (v47 > 9);
      if (v45 + 5 <= 4) {
        uint64_t result = (char *)memcpy(&v44[v6], &v50[v45 + 4], -v45);
      }
      unsigned int v48 = 0;
      do
      {
        ++v48;
        unsigned int v49 = v9;
        v9 /= 0xAu;
      }
      while (v49 > 9);
      if (v7)
      {
        uint64_t result = &v44[v6 + v48];
        if (v7 == 1)
        {
          *uint64_t result = a5->i8[0];
        }
        else
        {
          return (char *)memcpy(result, a5, v7);
        }
      }
    }
  }
  return result;
}

void WebKit::PCM::EphemeralStore::allAttributedPrivateClickMeasurement(unsigned char *a1, uint64_t *a2)
{
  v11[39] = *MEMORY[0x1E4F143B8];
  if (a1[328] && a1[200])
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v11, (const WebCore::PrivateClickMeasurement *)(a1 + 16));
    int v9 = 1;
    unint64_t v8 = (WebCore::PrivateClickMeasurement *)WTF::fastMalloc((WTF *)0x138);
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement(v8, (const WebCore::PrivateClickMeasurement *)v11);
    int v10 = 1;
    uint64_t v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WebCore::PrivateClickMeasurement **))(*(void *)v3 + 16))(v3, &v8);
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v4);
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v11, v5);
  }
  else
  {
    v11[0] = 0;
    v11[1] = 0;
    uint64_t v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 16))(v6, v11);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v7);
  }
}

uint64_t WebKit::PCM::EphemeralStore::markAttributedPrivateClickMeasurementsAsExpiredForTesting(unsigned char *a1, WTF::StringImpl *a2)
{
  if (a1[328] && a1[200])
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 16), a2);
    a1[328] = 0;
  }
  uint64_t v4 = *(void *)a2;
  *(void *)a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void WebKit::PCM::EphemeralStore::clearExpiredPrivateClickMeasurement(WebKit::PCM::EphemeralStore *this)
{
  if (*((unsigned char *)this + 328))
  {
    uint64_t v2 = (WebCore::PrivateClickMeasurement *)WTF::WallTime::now(this);
    if (*((unsigned char *)this + 328))
    {
      double v4 = v3 - *((double *)this + 5);
      WebCore::PrivateClickMeasurement::maxAge(v2);
      if (v4 > v6)
      {
        if (*((unsigned char *)this + 328))
        {
          WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebKit::PCM::EphemeralStore *)((char *)this + 16), v5);
          *((unsigned char *)this + 328) = 0;
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t WebKit::PCM::EphemeralStore::clearPrivateClickMeasurement(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 328))
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 16), a2);
    *(unsigned char *)(a1 + 328) = 0;
  }
  uint64_t v4 = *(void *)a2;
  *(void *)a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WebKit::PCM::EphemeralStore::clearPrivateClickMeasurementForRegistrableDomain(uint64_t a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  if (*(unsigned char *)(a1 + 328))
  {
    uint64_t result = WTF::equal(*(WTF **)(a1 + 24), *a2, a3);
    if (result) {
      goto LABEL_13;
    }
    if (!*(unsigned char *)(a1 + 328))
    {
      __break(1u);
      return result;
    }
    if (WTF::equal(*(WTF **)(a1 + 32), *a2, v8))
    {
LABEL_13:
      if (*(unsigned char *)(a1 + 328))
      {
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 16), v7);
        *(unsigned char *)(a1 + 328) = 0;
      }
    }
  }
  uint64_t v9 = *(void *)a3;
  *(void *)a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  int v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);

  return v10(v9);
}

void WebKit::PCM::EphemeralStore::clearSentAttribution(uint64_t a1, WTF::StringImpl *a2, char a3)
{
  if (a3)
  {
    char v4 = *((unsigned char *)a2 + 200);
    if (v4)
    {
      char v5 = 0;
LABEL_6:
      *((unsigned char *)a2 + 200) = v4;
      *((unsigned char *)a2 + 216) = v5;
      uint64_t v6 = a1 + 16;
      std::optional<WebCore::PrivateClickMeasurement>::operator=[abi:sn180100]<WebCore::PrivateClickMeasurement,void>(v6, (uint64_t)a2);
      return;
    }
  }
  else
  {
    char v5 = *((unsigned char *)a2 + 216);
    if (v5)
    {
      char v4 = 0;
      goto LABEL_6;
    }
  }
  if (*(unsigned char *)(a1 + 328))
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 16), a2);
    *(unsigned char *)(a1 + 328) = 0;
  }
}

uint64_t WebKit::PCM::EphemeralStore::close(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 328))
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 16), a2);
    *(unsigned char *)(a1 + 328) = 0;
  }
  uint64_t v4 = *(void *)a2;
  *(void *)a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  char v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WebKit::PrivateClickMeasurementManager::PrivateClickMeasurementManager(uint64_t a1, uint64_t *a2, _DWORD **a3)
{
  *(void *)a1 = &unk_1EE9C9718;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = (WTF::RunLoop::TimerBase *)(a1 + 16);
  unint64_t v7 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  WTF::RunLoop::Timer::Timer<WebKit::PrivateClickMeasurementManager>(v6, v7, a1);
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 15objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  unint64_t v8 = *a3;
  if (*a3) {
    *v8 += 2;
  }
  *(void *)(a1 + 176) = v8;
  uint64_t v9 = *a2;
  *a2 = 0;
  *(void *)(a1 + 184) = v9;
  *(unsigned char *)(a1 + 19objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(a1 + 27objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  if (((*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9) & 1) == 0) {
    WTF::RunLoop::TimerBase::start();
  }
  return a1;
}

uint64_t WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests(WebKit::PrivateClickMeasurementManager *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 23) + 24))(*((void *)this + 23));
  if (result)
  {
    WebKit::PrivateClickMeasurementManager::initializeStore((uint64_t)this);
    uint64_t v3 = *((void *)this + 21);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    uint64_t v4 = (atomic_uint *)*((void *)this + 1);
    if (v4) {
      atomic_fetch_add(v4, 1u);
    }
    char v5 = (void *)WTF::fastMalloc((WTF *)0x18);
    *char v5 = &unk_1EE9C9B78;
    v5[1] = this;
    v5[2] = v4;
    uint64_t v6 = (uint64_t)v5;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 56))(v3, &v6);
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::RunLoop::Timer::Timer<WebKit::PrivateClickMeasurementManager>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3)
{
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9C9900;
  v6[1] = WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests;
  v6[2] = 0;
  v6[3] = a3;
  uint64_t result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(void *)a1 = &unk_1EE9B3390;
  *((void *)a1 + 3) = v6;
  return result;
}

void WebKit::PrivateClickMeasurementManager::~PrivateClickMeasurementManager(WebKit::PrivateClickMeasurementManager *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C9718;
  uint64_t v3 = *((void *)this + 21);
  if (v3)
  {
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v4 = &unk_1EE9C9928;
    long long v17 = v4;
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 96))(v3, &v17);
    char v5 = v17;
    long long v17 = 0;
    if (v5) {
      (*(void (**)(void *))(*v5 + 8))(v5);
    }
  }
  if (*((unsigned char *)this + 344)) {
    WebKit::PrivateClickMeasurementManager::TestingFraudPreventionValues::~TestingFraudPreventionValues((WebKit::PrivateClickMeasurementManager *)((char *)this + 280), a2);
  }
  if (*((unsigned char *)this + 272))
  {
    uint64_t v6 = (WTF::StringImpl *)*((void *)this + 29);
    *((void *)this + 29) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    unint64_t v7 = (WTF::StringImpl *)*((void *)this + 24);
    *((void *)this + 24) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, a2);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  uint64_t v8 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 22);
  *((void *)this + 2objc_destroyWeak(this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  int v10 = (unsigned int *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 152);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 104, v11);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 56, v12);
  *((void *)this + objc_destroyWeak(this + 2) = &unk_1EE9B3390;
  uint64_t v13 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::PrivateClickMeasurementManager *)((char *)this + 16));
  uint64_t v15 = *((void *)this + 1);
  if (v15)
  {
    *(void *)(v15 + 8) = 0;
    int v16 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v16)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v14);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::PrivateClickMeasurementManager::~PrivateClickMeasurementManager(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::PrivateClickMeasurementManager::storeUnattributed(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184)))
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184)))
    {
      WebKit::PrivateClickMeasurementManager::initializeStore(a1);
      (*(void (**)(void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168));
    }
    if (*(unsigned char *)(a1 + 160)) {
      WebCore::PrivateClickMeasurement::setSourceApplicationBundleIDForTesting((WebCore::PrivateClickMeasurement *)a2, (const WTF::String *)(a1 + 152));
    }
    if (*(unsigned char *)(a2 + 232))
    {
      unint64_t v7 = *(WTF::StringImpl **)(a2 + 224);
      if (v7)
      {
        int v8 = *(_DWORD *)v7;
        *(_DWORD *)v7 += 2;
        if (v8) {
          *(_DWORD *)unint64_t v7 = v8;
        }
        else {
          WTF::StringImpl::destroy(v7, v6);
        }
      }
      WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v19, (const WebCore::PrivateClickMeasurement *)a2);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
      unsigned __int8 v12 = *(atomic_uint **)(a1 + 8);
      if (v12) {
        atomic_fetch_add(v12, 1u);
      }
      uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v13 = &unk_1EE9C9950;
      v13[1] = v12;
      void v13[2] = a1;
      long long v18 = v13;
      WebKit::PrivateClickMeasurementManager::getTokenPublicKey(a1, (uint64_t)v19, 0, 1, (uint64_t *)&v18);
      if (v18) {
        (*(void (**)(void *))(*v18 + 8))(v18);
      }
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v19, v14);
    }
    uint64_t v15 = *(void *)(a1 + 184);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, void, WTF::StringImpl **))(*(void *)v15 + 16))(v15, 0, v19);
    long long v17 = v19[0];
    v19[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    WebKit::PrivateClickMeasurementManager::initializeStore(a1);
    return (*(uint64_t (**)(void, uint64_t, void, uint64_t *))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168), a2, 0, a3);
  }
  else
  {
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    int v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);
    return v10(v9);
  }
}

uint64_t *WebKit::PrivateClickMeasurementManager::getTokenPublicKey(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t *a5)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184));
  if (!result) {
    return result;
  }
  uint64_t v60 = 0;
  WTF::URL::invalidate((WTF::URL *)&v60);
  if (*(unsigned char *)(a1 + 96))
  {
    if ((a3 & 1) == 0)
    {
      uint64_t result = WTF::String::operator=(&v60, (WTF::StringImpl **)(a1 + 56));
      a4 = 0;
      long long v12 = *(_OWORD *)(a1 + 80);
      long long v61 = *(_OWORD *)(a1 + 64);
      long long v62 = v12;
LABEL_11:
      if (!v60) {
        return result;
      }
      if (*(_DWORD *)(v60 + 4) && (v61 & 1) != 0)
      {
        int v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184));
        uint64_t v14 = qword_1EB3582F8;
        if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v42 = 0;
          _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_INFO, "About to fire a token public key request.", v42, 2u);
        }
        uint64_t v15 = *(void *)(a1 + 184);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v59 = *(WTF::JSONImpl::Value **)v42;
        (*(void (**)(uint64_t, void, WTF::JSONImpl::Value **))(*(void *)v15 + 16))(v15, 0, &v59);
        long long v17 = v59;
        uint64_t v59 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v16);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
        uint64_t v59 = 0;
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
        long long v18 = *(atomic_uint **)(a1 + 8);
        if (v18) {
          atomic_fetch_add(v18, 1u);
        }
        *(void *)int v42 = v18;
        *(void *)&v42[8] = a1;
        v42[16] = *(unsigned char *)a2;
        long long v19 = *(_OWORD *)(a2 + 8);
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        long long v43 = v19;
        v44[0] = *(_OWORD *)(a2 + 24);
        *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)(a2 + 33);
        v45[0] = 0;
        char v46 = 0;
        if (*(unsigned char *)(a2 + 184))
        {
          std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v45, a2 + 56);
          char v46 = 1;
        }
        long long v20 = *(_OWORD *)(a2 + 208);
        long long v47 = *(_OWORD *)(a2 + 192);
        long long v48 = v20;
        LOBYTE(v49) = 0;
        char v50 = 0;
        if (*(unsigned char *)(a2 + 232))
        {
          uint64_t v21 = *(void *)(a2 + 224);
          *(void *)(a2 + 224) = 0;
          uint64_t v49 = v21;
          char v50 = 1;
        }
        long long v22 = *(_OWORD *)(a2 + 240);
        long long v23 = *(_OWORD *)(a2 + 256);
        *(_OWORD *)(a2 + 240) = 0u;
        *(_OWORD *)(a2 + 256) = 0u;
        long long v51 = v22;
        long long v52 = v23;
        LOBYTE(v53) = 0;
        char v55 = 0;
        if (*(unsigned char *)(a2 + 296))
        {
          long long v24 = *(_OWORD *)(a2 + 272);
          *(void *)(a2 + 27objc_destroyWeak(this + 2) = 0;
          *(void *)(a2 + 280) = 0;
          long long v53 = v24;
          uint64_t v25 = *(void *)(a2 + 288);
          *(void *)(a2 + 288) = 0;
          uint64_t v54 = v25;
          char v55 = 1;
        }
        uint64_t v26 = *(void *)(a2 + 304);
        *(void *)(a2 + 304) = 0;
        uint64_t v27 = *a5;
        *a5 = 0;
        uint64_t v56 = v26;
        uint64_t v57 = v27;
        uint64_t v28 = WTF::fastMalloc((WTF *)0x158);
        *(void *)uint64_t v28 = &unk_1EE9C9978;
        *(_OWORD *)(v28 + 8) = *(_OWORD *)v42;
        *(unsigned char *)(v28 + 24) = v42[16];
        *(void *)(v28 + 3objc_destroyWeak(this + 2) = v43;
        uint64_t v29 = *((void *)&v43 + 1);
        *(void *)int v42 = 0;
        long long v43 = 0uLL;
        *(void *)(v28 + 40) = v29;
        long long v30 = v44[0];
        *(_OWORD *)(v28 + 57) = *(_OWORD *)((char *)v44 + 9);
        *(_OWORD *)(v28 + 48) = v30;
        *(unsigned char *)(v28 + 80) = 0;
        *(unsigned char *)(v28 + 208) = 0;
        if (v46)
        {
          std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v28 + 80, (uint64_t)v45);
          *(unsigned char *)(v28 + 208) = 1;
        }
        long long v31 = v47;
        *(_OWORD *)(v28 + 23objc_destroyWeak(this + 2) = v48;
        *(_OWORD *)(v28 + 216) = v31;
        *(unsigned char *)(v28 + 248) = 0;
        *(unsigned char *)(v28 + 256) = 0;
        if (v50)
        {
          uint64_t v32 = v49;
          uint64_t v49 = 0;
          *(void *)(v28 + 248) = v32;
          *(unsigned char *)(v28 + 256) = 1;
        }
        *(_OWORD *)(v28 + 264) = v51;
        *(void *)(v28 + 280) = v52;
        uint64_t v33 = *((void *)&v52 + 1);
        long long v51 = 0u;
        long long v52 = 0u;
        *(void *)(v28 + 288) = v33;
        *(unsigned char *)(v28 + 296) = 0;
        *(unsigned char *)(v28 + 320) = 0;
        if (v55)
        {
          *(void *)(v28 + 296) = v53;
          uint64_t v34 = *((void *)&v53 + 1);
          long long v53 = 0uLL;
          *(void *)(v28 + 304) = v34;
          uint64_t v35 = v54;
          uint64_t v54 = 0;
          *(void *)(v28 + 31objc_destroyWeak(this + 2) = v35;
          *(unsigned char *)(v28 + 320) = 1;
        }
        *(void *)(v28 + 328) = v56;
        uint64_t v36 = v57;
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        *(void *)(v28 + 336) = v36;
        uint64_t v58 = v28;
        WebKit::PCM::NetworkLoader::start((WTF::URL *)&v60, &v59, a4 | v13, &v58);
        uint64_t v38 = v58;
        uint64_t v58 = 0;
        if (v38) {
          (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
        }
        uint64_t v39 = v57;
        uint64_t v57 = 0;
        if (v39) {
          (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
        }
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v42[16], v37);
        int v40 = *(unsigned int **)v42;
        *(void *)int v42 = 0;
        if (v40 && atomic_fetch_add((atomic_uint *volatile)v40, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v40);
          WTF::fastFree((WTF *)v40, v11);
        }
        unsigned int v41 = v59;
        uint64_t v59 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 1) {
            WTF::JSONImpl::Value::operator delete();
          }
          else {
            --*(_DWORD *)v41;
          }
        }
      }
    }
  }
  else
  {
    WebCore::PrivateClickMeasurement::tokenPublicKeyURL((uint64_t *)v42, (WebCore::PrivateClickMeasurement *)a2);
    if (LOBYTE(v44[0]))
    {
      uint64_t result = WTF::String::operator=(&v60, (WTF::StringImpl **)v42);
      long long v61 = *(_OWORD *)&v42[8];
      long long v62 = v43;
      if (LOBYTE(v44[0]))
      {
        uint64_t result = *(uint64_t **)v42;
        *(void *)int v42 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v11);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (uint64_t *)v60;
  uint64_t v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

__n128 WebKit::PrivateClickMeasurementManager::configureForTokenSigning(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  *a2 = 1;
  if (*(unsigned char *)(a1 + 144))
  {
    WTF::String::operator=((uint64_t *)a3, (WTF::StringImpl **)(a1 + 104));
    long long v7 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(a3 + 8) = v7;
    if (((*(uint64_t (**)(void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184)) & 1) == 0) {
      *a2 = 0;
    }
  }
  else if (*(unsigned char *)(a4 + 40))
  {
    WTF::String::operator=((uint64_t *)a3, (WTF::StringImpl **)a4);
    __n128 result = *(__n128 *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(__n128 *)(a3 + 24) = result;
  }
  return result;
}

WTF::StringImpl *WebKit::PrivateClickMeasurementManager::getSignatureBase64URLFromTokenSignatureResponse(unsigned char *a1, uint64_t a2, WTF::StringImpl *a3, WTF::JSONImpl::ObjectBase *a4)
{
  if (a3)
  {
    uint64_t v6 = *(void *)(a2 + 184);
    *(_DWORD *)a3 += 2;
    long long v17 = a3;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[Private Click Measurement] Received error: '", 46, (uint64_t *)&v17, (uint64_t)"' for token signing request.", 29, &v18);
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v6 + 16))(v6, 2, &v18);
    int v8 = v18;
    long long v18 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    __n128 result = v17;
    long long v17 = 0;
    if (!result) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  if (!a4)
  {
    uint64_t v12 = *(void *)(a2 + 184);
    WTF::tryMakeString<WTF::ASCIILiteral>(&v18, "[Private Click Measurement] JSON response is empty for token signing request.", 78);
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v12 + 16))(v12, 2, &v18);
      __n128 result = v18;
      long long v18 = 0;
      if (!result)
      {
LABEL_14:
        *a1 = 0;
        a1[8] = 0;
        return result;
      }
LABEL_11:
      if (*(_DWORD *)result == 2) {
        __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
      goto LABEL_14;
    }
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x198C1DB58);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v18, a4, (const WTF::String *)&v16);
  __n128 result = v16;
  int v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v18 && *((_DWORD *)v18 + 1))
  {
    *(void *)a1 = v18;
    a1[8] = 1;
    return result;
  }
  uint64_t v13 = *(void *)(a2 + 184);
  WTF::tryMakeString<WTF::ASCIILiteral>(&v16, "[Private Click Measurement] JSON response doesn't have the key 'unlinkable_token' for token signing request.", 109);
  if (!v16)
  {
    __break(0xC471u);
    goto LABEL_34;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v13 + 16))(v13, 2, &v16);
  uint64_t v15 = v16;
  int v16 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  *a1 = 0;
  a1[8] = 0;
  __n128 result = v18;
  long long v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100](a1 + 128, a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100](a1 + 88, v4);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100](a1 + 72, v5);
  std::optional<WebCore::PublicSuffix>::~optional(a1 + 56, v6);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100](a1 + 40, v7);
  uint64_t v9 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  int v10 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  int v11 = *(unsigned int **)a1;
  *(void *)a1 = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v8);
  }
  return a1;
}

uint64_t WebKit::PrivateClickMeasurementManager::migratePrivateClickMeasurementFromLegacyStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::PrivateClickMeasurementManager::initializeStore(a1);
  uint64_t v6 = *(void *)(a1 + 168);
  long long v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *long long v7 = &unk_1EE9C9A50;
  uint64_t v9 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v6 + 16))(v6, a2, a3, &v9);
  uint64_t result = (uint64_t)v9;
  uint64_t v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::PrivateClickMeasurementManager::setDebugModeIsEnabled(WebKit::PrivateClickMeasurementManager *this)
{
  uint64_t v1 = *((void *)this + 23);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4[0] = v4[1];
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v1 + 16))(v1, 4, v4);
  uint64_t result = v4[0];
  v4[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::PrivateClickMeasurementManager::handleAttribution(uint64_t a1, uint64_t a2, WTF::URL *a3, WTF::StringImpl **a4, WTF::URL *a5, uint64_t a6)
{
  uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184));
  if (result)
  {
    uint64_t v13 = WTF::URL::host(a3);
    if ((WebCore::RegistrableDomain::matches(a4, v13, v14) & 1) == 0)
    {
      uint64_t v17 = *(void *)(a1 + 184);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v17 + 16))(v17, 1, buf);
      uint64_t result = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (!result) {
        return result;
      }
LABEL_121:
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      }
      *(_DWORD *)result -= 2;
      return result;
    }
    v98 = 0;
    uint64_t v15 = WTF::URL::host(a5);
    if (WebCore::RegistrableDomain::matches(a4, v15, v16))
    {
      if (*(unsigned char *)(a2 + 16))
      {
        WTF::String::operator=((uint64_t *)&v98, (WTF::StringImpl **)(a2 + 8));
LABEL_13:
        uint64_t v21 = *(void *)(a1 + 184);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v85 = *(WTF::StringImpl **)buf;
        (*(void (**)(uint64_t, void, WTF::StringImpl **))(*(void *)v21 + 16))(v21, 0, &v85);
        long long v23 = v85;
        uint64_t v85 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v22);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
        if (*(unsigned char *)(a2 + 32))
        {
          LOWORD(v85) = *(_WORD *)a2;
          BYTE2(v85) = *(unsigned char *)(a2 + 2);
          LOBYTE(v86) = 0;
          unsigned __int8 v87 = 0;
          if (*(unsigned char *)(a2 + 16))
          {
            uint64_t v73 = *(WTF::StringImpl **)(a2 + 8);
            if (v73) {
              *(_DWORD *)v73 += 2;
            }
            v86 = v73;
            unsigned __int8 v87 = 1;
          }
          LOBYTE(v88) = 0;
          long long v24 = *(WTF::StringImpl **)(a2 + 24);
          if (v24) {
            *(_DWORD *)v24 += 2;
          }
          uint64_t v88 = v24;
          unsigned __int8 v89 = 1;
          LOBYTE(v90) = 0;
          unsigned __int8 v91 = 0;
          if (*(unsigned char *)(a2 + 48))
          {
            unsigned int v74 = *(WTF::StringImpl **)(a2 + 40);
            if (v74) {
              *(_DWORD *)v74 += 2;
            }
            uint64_t v90 = v74;
            unsigned __int8 v91 = 1;
          }
          LOBYTE(v9objc_destroyWeak(this + 2) = 0;
          unsigned __int8 v94 = 0;
          if (*(unsigned char *)(a2 + 88))
          {
            std::construct_at[abi:sn180100]<WebCore::PCM::DestinationUnlinkableToken,WebCore::PCM::DestinationUnlinkableToken const&,WebCore::PCM::DestinationUnlinkableToken*>(&v92, a2 + 56);
            unsigned __int8 v94 = 1;
          }
          LOBYTE(v95) = 0;
          unsigned __int8 v97 = 0;
          if (*(unsigned char *)(a2 + 120))
          {
            std::construct_at[abi:sn180100]<WebCore::PCM::DestinationSecretToken,WebCore::PCM::DestinationSecretToken const&,WebCore::PCM::DestinationSecretToken*>(&v95, a2 + 96);
            unsigned __int8 v97 = 1;
          }
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
          uint64_t v25 = *(atomic_uint **)(a1 + 8);
          if (v25) {
            atomic_fetch_add(v25, 1u);
          }
          v81[0] = (WTF *)v25;
          v81[1] = (WTF *)a1;
          uint64_t v26 = v98;
          v98 = 0;
          unsigned int v82 = v26;
          WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v83, a5);
          WTF::String::isolatedCopy();
          uint64_t v27 = WTF::fastMalloc((WTF *)0x30);
          *(void *)uint64_t v27 = &unk_1EE9C9A78;
          *(_OWORD *)(v27 + 8) = *(_OWORD *)v81;
          *(void *)(v27 + 24) = v82;
          uint64_t v28 = v83;
          uint64_t v83 = 0;
          *(void *)(v27 + 3objc_destroyWeak(this + 2) = v28;
          uint64_t v29 = v84;
          uint64_t v84 = 0;
          *(void *)(v27 + 40) = v29;
          if (!(*(unsigned int (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184))) {
            goto LABEL_104;
          }
          v115 = 0;
          WTF::URL::invalidate((WTF::URL *)&v115);
          int v30 = *(unsigned __int8 *)(a1 + 96);
          if (*(unsigned char *)(a1 + 96))
          {
            WTF::String::operator=((uint64_t *)&v115, (WTF::StringImpl **)(a1 + 56));
            long long v32 = *(_OWORD *)(a1 + 80);
            long long v116 = *(_OWORD *)(a1 + 64);
            long long v117 = v32;
          }
          else
          {
            WebCore::PCM::AttributionTriggerData::tokenPublicKeyURL((uint64_t *)buf, (WebCore::PCM::AttributionTriggerData *)&v85);
            if (!(_BYTE)v102) {
              goto LABEL_99;
            }
            WTF::String::operator=((uint64_t *)&v115, (WTF::StringImpl **)buf);
            long long v116 = v100;
            long long v117 = v101;
            if ((_BYTE)v102)
            {
              int v42 = *(WTF::StringImpl **)buf;
              *(void *)buf = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2) {
                  WTF::StringImpl::destroy(v42, v31);
                }
                else {
                  *(_DWORD *)v42 -= 2;
                }
              }
            }
          }
          if (!v115) {
            goto LABEL_104;
          }
          if (*((_DWORD *)v115 + 1) && (v116 & 1) != 0)
          {
            int v33 = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184));
            if (v30) {
              int v34 = v33;
            }
            else {
              int v34 = 1;
            }
            int v80 = v34;
            uint64_t v35 = qword_1EB3582F8;
            if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1985F2000, v35, OS_LOG_TYPE_INFO, "About to fire a token public key request.", buf, 2u);
            }
            uint64_t v36 = *(void *)(a1 + 184);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            uint64_t v114 = *(WTF::JSONImpl::Value **)buf;
            (*(void (**)(uint64_t, void, WTF::JSONImpl::Value **))(*(void *)v36 + 16))(v36, 0, &v114);
            uint64_t v38 = v114;
            uint64_t v114 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2) {
                WTF::StringImpl::destroy(v38, v37);
              }
              else {
                *(_DWORD *)v38 -= 2;
              }
            }
            uint64_t v114 = 0;
            WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
            int v44 = *(atomic_uint **)(a1 + 8);
            if (v44) {
              atomic_fetch_add(v44, 1u);
            }
            *(void *)buf = v44;
            *(void *)&long long v100 = a1;
            WORD4(v100) = (_WORD)v85;
            BYTE10(v100) = BYTE2(v85);
            LOBYTE(v101) = 0;
            BYTE8(v101) = 0;
            int v45 = v87;
            if (v87)
            {
              unsigned int v75 = v86;
              v86 = 0;
              *(void *)&long long v101 = v75;
              BYTE8(v101) = 1;
            }
            LOBYTE(v10objc_destroyWeak(this + 2) = 0;
            char v103 = 0;
            int v46 = v89;
            if (v89)
            {
              long long v47 = v88;
              uint64_t v88 = 0;
              uint64_t v102 = v47;
              char v103 = 1;
            }
            LOBYTE(v104) = 0;
            char v105 = 0;
            int v48 = v91;
            if (v91)
            {
              uint64_t v76 = v90;
              uint64_t v90 = 0;
              uint64_t v104 = v76;
              char v105 = 1;
            }
            LOBYTE(v106) = 0;
            char v108 = 0;
            int v49 = v94;
            if (v94)
            {
              long long v50 = v92;
              long long v51 = v93;
              long long v92 = 0u;
              long long v93 = 0u;
              long long v106 = v50;
              long long v107 = v51;
              char v108 = 1;
            }
            LOBYTE(v109) = 0;
            char v111 = 0;
            int v79 = v97;
            if (v97)
            {
              long long v52 = v95;
              long long v95 = 0uLL;
              long long v109 = v52;
              uint64_t v53 = v96;
              uint64_t v96 = 0;
              uint64_t v110 = v53;
              char v111 = 1;
            }
            uint64_t v112 = v27;
            uint64_t v54 = WTF::fastMalloc((WTF *)0xA0);
            *(void *)uint64_t v54 = &unk_1EE9C99A0;
            *(void *)(v54 + 8) = v44;
            *(void *)buf = 0;
            *(void *)(v54 + 16) = a1;
            *(_WORD *)(v54 + 24) = WORD4(v100);
            *(unsigned char *)(v54 + 26) = BYTE10(v100);
            *(unsigned char *)(v54 + 3objc_destroyWeak(this + 2) = 0;
            *(unsigned char *)(v54 + 40) = 0;
            if (v45)
            {
              uint64_t v77 = v101;
              *(void *)&long long v101 = 0;
              *(void *)(v54 + 3objc_destroyWeak(this + 2) = v77;
              *(unsigned char *)(v54 + 40) = 1;
            }
            *(unsigned char *)(v54 + 48) = 0;
            *(unsigned char *)(v54 + 56) = 0;
            if (v46)
            {
              char v55 = v102;
              uint64_t v102 = 0;
              *(void *)(v54 + 48) = v55;
              *(unsigned char *)(v54 + 56) = 1;
            }
            *(unsigned char *)(v54 + 64) = 0;
            *(unsigned char *)(v54 + 7objc_destroyWeak(this + 2) = 0;
            if (v48)
            {
              unsigned __int8 v78 = v104;
              uint64_t v104 = 0;
              *(void *)(v54 + 64) = v78;
              *(unsigned char *)(v54 + 7objc_destroyWeak(this + 2) = 1;
            }
            *(unsigned char *)(v54 + 80) = 0;
            *(unsigned char *)(v54 + 11objc_destroyWeak(this + 2) = 0;
            if (v49)
            {
              *(_OWORD *)(v54 + 80) = v106;
              *(void *)(v54 + 96) = v107;
              uint64_t v56 = *((void *)&v107 + 1);
              long long v106 = 0u;
              long long v107 = 0u;
              *(void *)(v54 + 104) = v56;
              *(unsigned char *)(v54 + 11objc_destroyWeak(this + 2) = 1;
            }
            *(unsigned char *)(v54 + 120) = 0;
            *(unsigned char *)(v54 + 144) = 0;
            if (v79)
            {
              *(void *)(v54 + 120) = v109;
              uint64_t v57 = *((void *)&v109 + 1);
              long long v109 = 0uLL;
              *(void *)(v54 + 128) = v57;
              uint64_t v58 = v110;
              uint64_t v110 = 0;
              *(void *)(v54 + 136) = v58;
              *(unsigned char *)(v54 + 144) = 1;
            }
            *(void *)(v54 + 15objc_destroyWeak(this + 2) = v27;
            uint64_t v113 = v54;
            WebKit::PCM::NetworkLoader::start((WTF::URL *)&v115, &v114, v80, &v113);
            uint64_t v60 = v113;
            uint64_t v113 = 0;
            if (v60) {
              (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
            }
            uint64_t v112 = 0;
            std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v109, v59);
            std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v106, v61);
            if (v105)
            {
              unsigned __int8 v71 = v104;
              uint64_t v104 = 0;
              if (v71)
              {
                if (*(_DWORD *)v71 == 2) {
                  WTF::StringImpl::destroy(v71, v31);
                }
                else {
                  *(_DWORD *)v71 -= 2;
                }
              }
            }
            if (v103)
            {
              long long v62 = v102;
              uint64_t v102 = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2) {
                  WTF::StringImpl::destroy(v62, v31);
                }
                else {
                  *(_DWORD *)v62 -= 2;
                }
              }
            }
            if (BYTE8(v101))
            {
              unsigned int v72 = (WTF::StringImpl *)v101;
              *(void *)&long long v101 = 0;
              if (v72)
              {
                if (*(_DWORD *)v72 == 2) {
                  WTF::StringImpl::destroy(v72, v31);
                }
                else {
                  *(_DWORD *)v72 -= 2;
                }
              }
            }
            unsigned __int8 v63 = *(WTF::StringImpl **)buf;
            *(void *)buf = 0;
            if (v63 && atomic_fetch_add((atomic_uint *volatile)v63, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, (unsigned int *)v63);
              WTF::fastFree(v63, v31);
            }
            unsigned int v64 = v114;
            uint64_t v114 = 0;
            if (v64)
            {
              if (*(_DWORD *)v64 == 1) {
                WTF::JSONImpl::Value::operator delete();
              }
              else {
                --*(_DWORD *)v64;
              }
            }
            uint64_t v27 = 0;
          }
LABEL_99:
          v65 = v115;
          v115 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2) {
              WTF::StringImpl::destroy(v65, v31);
            }
            else {
              *(_DWORD *)v65 -= 2;
            }
          }
          if (!v27)
          {
LABEL_105:
            unsigned int v66 = v84;
            uint64_t v84 = 0;
            if (v66)
            {
              if (*(_DWORD *)v66 == 2) {
                WTF::StringImpl::destroy(v66, v31);
              }
              else {
                *(_DWORD *)v66 -= 2;
              }
            }
            unsigned int v67 = v83;
            uint64_t v83 = 0;
            if (v67)
            {
              if (*(_DWORD *)v67 == 2) {
                WTF::StringImpl::destroy(v67, v31);
              }
              else {
                *(_DWORD *)v67 -= 2;
              }
            }
            std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v95, v31);
            std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v92, v68);
            if (v91)
            {
              uint64_t v70 = v90;
              uint64_t v90 = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2) {
                  WTF::StringImpl::destroy(v70, v18);
                }
                else {
                  *(_DWORD *)v70 -= 2;
                }
              }
            }
            if (v89)
            {
              uint64_t v69 = v88;
              uint64_t v88 = 0;
              if (v69)
              {
                if (*(_DWORD *)v69 == 2) {
                  WTF::StringImpl::destroy(v69, v18);
                }
                else {
                  *(_DWORD *)v69 -= 2;
                }
              }
            }
            if (!v87 || (long long v43 = v86, v86 = 0, !v43))
            {
LABEL_120:
              uint64_t result = v98;
              v98 = 0;
              if (!result) {
                return result;
              }
              goto LABEL_121;
            }
LABEL_55:
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v18);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
            goto LABEL_120;
          }
LABEL_104:
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          goto LABEL_105;
        }
        uint64_t v39 = v98;
        v98 = 0;
        *(void *)buf = v39;
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v85, a5);
        if (*(unsigned char *)(a1 + 160)) {
          uint64_t v40 = a1 + 152;
        }
        else {
          uint64_t v40 = a6;
        }
        WebKit::PrivateClickMeasurementManager::attribute(a1, (uint64_t)buf, (uint64_t)&v85, a2, v40);
        unsigned int v41 = v85;
        uint64_t v85 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2) {
            WTF::StringImpl::destroy(v41, v18);
          }
          else {
            *(_DWORD *)v41 -= 2;
          }
        }
LABEL_54:
        long long v43 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (!v43) {
          goto LABEL_120;
        }
        goto LABEL_55;
      }
      uint64_t v19 = *(void *)(a1 + 184);
    }
    else
    {
      if (!*(unsigned char *)(a2 + 16))
      {
        long long v20 = *a4;
        *a4 = 0;
        v98 = v20;
        goto LABEL_13;
      }
      uint64_t v19 = *(void *)(a1 + 184);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v19 + 16))(v19, 1, buf);
    goto LABEL_54;
  }
  return result;
}

uint64_t WebKit::PrivateClickMeasurementManager::attribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184));
  if (result)
  {
    WebKit::PrivateClickMeasurementManager::initializeStore(a1);
    uint64_t v11 = *(void *)(a1 + 168);
    int v12 = *(unsigned __int8 *)(a1 + 48);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    uint64_t v13 = *(atomic_uint **)(a1 + 8);
    if (v13) {
      atomic_fetch_add(v13, 1u);
    }
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v14 = &unk_1EE9C9AB0;
    v14[1] = a1;
    v14[2] = v13;
    uint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, void **))(*(void *)v11 + 24))(v11, a2, a3, a5, a4, v12 != 0, &v15);
    uint64_t result = (uint64_t)v15;
    uint64_t v15 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::PrivateClickMeasurementManager::startTimerImmediatelyForTesting(WebKit::PrivateClickMeasurementManager *this)
{
  return WTF::RunLoop::TimerBase::start();
}

uint64_t *WebKit::PrivateClickMeasurementManager::setPrivateClickMeasurementAppBundleIDForTesting(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2 || !*(_DWORD *)(v2 + 4)) {
    return (uint64_t *)std::__optional_destruct_base<WTF::String,false>::reset[abi:sn180100]((uint64_t)(result + 19));
  }
  if (*((unsigned char *)result + 160)) {
    return WTF::String::operator=(result + 19, a2);
  }
  *a2 = 0;
  result[19] = v2;
  *((unsigned char *)result + 160) = 1;
  return result;
}

void WebKit::PrivateClickMeasurementManager::fireConversionRequest(uint64_t a1, unsigned __int8 *a2, char a3)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184))) {
    BOOL v6 = a2[184] == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (a2[296] | a2[176])
    {
      WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v13, (const WebCore::PrivateClickMeasurement *)a2);
      long long v7 = (unsigned int *)(a1 + 8);
      if (a2[296])
      {
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7, a1);
        int v8 = *(atomic_uint **)(a1 + 8);
        if (v8) {
          atomic_fetch_add(v8, 1u);
        }
        uint64_t v9 = WTF::fastMalloc((WTF *)0x20);
        int v10 = &unk_1EE9C9AD8;
      }
      else
      {
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7, a1);
        int v8 = *(atomic_uint **)(a1 + 8);
        if (v8) {
          atomic_fetch_add(v8, 1u);
        }
        uint64_t v9 = WTF::fastMalloc((WTF *)0x20);
        int v10 = &unk_1EE9C9B28;
      }
      *(void *)uint64_t v9 = v10;
      *(void *)(v9 + 8) = v8;
      *(void *)(v9 + 16) = a1;
      *(unsigned char *)(v9 + 24) = a3;
      uint64_t v12 = v9;
      WebKit::PrivateClickMeasurementManager::getTokenPublicKey(a1, (uint64_t)v13, a3, 0, &v12);
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v13, v11);
    }
    else
    {
      WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(a1, (WebCore::PrivateClickMeasurement *)a2, a3);
    }
  }
}

WTF::StringImpl *WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(uint64_t a1, WebCore::PrivateClickMeasurement *a2, char a3)
{
  uint64_t v28 = 0;
  WTF::URL::invalidate((WTF::URL *)&v28);
  if (a3)
  {
    if (*(unsigned char *)(a1 + 272))
    {
      BOOL v6 = *(_DWORD **)(a1 + 232);
      if (v6) {
        *v6 += 2;
      }
      *(void *)buf = v6;
      long long v7 = *(_OWORD *)(a1 + 256);
      long long v26 = *(_OWORD *)(a1 + 240);
      long long v27 = v7;
    }
    else
    {
      WebCore::PrivateClickMeasurement::attributionReportClickDestinationURL((uint64_t *)buf, a2);
    }
  }
  else if (*(unsigned char *)(a1 + 272))
  {
    int v8 = *(_DWORD **)(a1 + 192);
    if (v8) {
      *v8 += 2;
    }
    *(void *)buf = v8;
    long long v26 = *(_OWORD *)(a1 + 200);
    long long v27 = *(_OWORD *)(a1 + 216);
  }
  else
  {
    WebCore::PrivateClickMeasurement::attributionReportClickSourceURL((uint64_t *)buf, a2);
  }
  WTF::URL::operator=((uint64_t)&v28, (uint64_t)buf);
  int v10 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t result = v28;
  if (v28)
  {
    if (!*((_DWORD *)v28 + 1) || (v29 & 1) == 0)
    {
      uint64_t v28 = 0;
LABEL_39:
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      *(_DWORD *)result -= 2;
      return result;
    }
    int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184));
    uint64_t v13 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_INFO, "About to fire an attribution request.", buf, 2u);
    }
    uint64_t v14 = *(void *)(a1 + 184);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, void, uint8_t *))(*(void *)v14 + 16))(v14, 0, buf);
    uint64_t v16 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    WebCore::PrivateClickMeasurement::attributionReportJSON((uint64_t *)&v24, a2);
    uint64_t v17 = (uint64_t)v24;
    long long v24 = 0;
    *(void *)buf = v17;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    long long v18 = *(atomic_uint **)(a1 + 8);
    if (v18) {
      atomic_fetch_add(v18, 1u);
    }
    uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v19 = &unk_1EE9C9B50;
    v19[1] = v18;
    _OWORD v19[2] = a1;
    long long v23 = v19;
    WebKit::PCM::NetworkLoader::start((WTF::URL *)&v28, (WTF::JSONImpl::Value **)buf, v12, (uint64_t *)&v23);
    uint64_t v20 = (uint64_t)v23;
    long long v23 = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    uint64_t v21 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v21;
      }
    }
    long long v22 = v24;
    long long v24 = 0;
    if (v22)
    {
      if (*v22 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v22;
      }
    }
    uint64_t result = v28;
    uint64_t v28 = 0;
    if (result) {
      goto LABEL_39;
    }
  }
  return result;
}

uint64_t WebKit::PrivateClickMeasurementManager::clearSentAttribution(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184));
  if (result)
  {
    WebKit::PrivateClickMeasurementManager::initializeStore(a1);
    uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 168) + 88);
    return v3();
  }
  return result;
}

double WebKit::PrivateClickMeasurementManager::randomlyBetweenFifteenAndThirtyMinutes(WebKit::PrivateClickMeasurementManager *this)
{
  double result = 0.0;
  if (!*((unsigned char *)this + 48))
  {
    char v2 = (*(uint64_t (**)(void, double))(**((void **)this + 23) + 32))(*((void *)this + 23), 0.0);
    double result = 10.0;
    if ((v2 & 1) == 0) {
      return (double)(WTF::cryptographicallyRandomNumber<unsigned int>() % 0x384) + 900.0;
    }
  }
  return result;
}

uint64_t WebKit::PrivateClickMeasurementManager::clear(void **a1, uint64_t *a2)
{
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(a1 + 2));
  std::__optional_destruct_base<WTF::String,false>::reset[abi:sn180100]((uint64_t)(a1 + 19));
  if ((*(uint64_t (**)(void *))(*a1[23] + 24))(a1[23]))
  {
    WebKit::PrivateClickMeasurementManager::initializeStore((uint64_t)a1);
    uint64_t v4 = *(uint64_t (**)(void))(*a1[21] + 72);
    return v4();
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    long long v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::PrivateClickMeasurementManager::clearForRegistrableDomain(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184)))
  {
    WebKit::PrivateClickMeasurementManager::initializeStore(a1);
    char v5 = *(uint64_t (**)(void))(**(void **)(a1 + 168) + 80);
    return v5();
  }
  else
  {
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    int v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

WTF::StringImpl *WebKit::PrivateClickMeasurementManager::toStringForTesting(uint64_t a1, uint64_t *a2)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184)))
  {
    WebKit::PrivateClickMeasurementManager::initializeStore(a1);
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 168) + 32);
    return (WTF::StringImpl *)v4();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::CompletionHandler<void ()(WTF::String)>::operator()(a2, &v7);
    double result = v7;
    uint64_t v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::PrivateClickMeasurementManager::setTokenPublicKeyURLForTesting(uint64_t result, uint64_t *a2)
{
  if (*a2)
  {
    if (*(_DWORD *)(*a2 + 4)) {
      return std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL,void>(result + 56, a2);
    }
  }
  return result;
}

uint64_t std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL,void>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    WTF::URL::operator=(a1, (uint64_t)a2);
  }
  else
  {
    WTF::URL::URL(a1, a2);
    *(unsigned char *)(a1 + 40) = 1;
  }
  return a1;
}

void WebKit::PrivateClickMeasurementManager::setTokenSignatureURLForTesting(uint64_t a1, uint64_t *a2)
{
  if (*a2 && *(_DWORD *)(*a2 + 4))
  {
    uint64_t v2 = a1 + 104;
    std::optional<WTF::URL>::operator=[abi:sn180100]<WTF::URL,void>(v2, a2);
  }
  else
  {
    LOBYTE(v5) = 0;
    char v6 = 0;
    std::__optional_storage_base<WTF::URL,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::URL,false>>((WTF::StringImpl *)(a1 + 104), (unsigned __int8 *)&v5);
    if (v6)
    {
      uint64_t v4 = v5;
      char v5 = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, v3);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
  }
}

WTF::StringImpl *WebKit::PrivateClickMeasurementManager::setAttributionReportURLsForTesting(WTF::StringImpl *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = result;
  if (*a2 && *(_DWORD *)(*a2 + 4) && *a3 && *(_DWORD *)(*a3 + 4))
  {
    WTF::URL::URL((uint64_t)v9, a2);
    WTF::URL::URL((uint64_t)v10, a3);
    uint64_t v5 = (uint64_t)v3 + 192;
    if (*((unsigned char *)v3 + 272))
    {
      WTF::URL::operator=(v5, (uint64_t)v9);
      WTF::URL::operator=((uint64_t)v3 + 232, (uint64_t)v10);
    }
    else
    {
      WTF::URL::URL(v5, (uint64_t *)v9);
      WTF::URL::URL((uint64_t)v3 + 232, (uint64_t *)v10);
      *((unsigned char *)v3 + 27objc_destroyWeak(this + 2) = 1;
    }
    int v8 = v10[0];
    v10[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    double result = v9[0];
    v9[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else if (*((unsigned char *)result + 272))
  {
    uint64_t v7 = (WTF::StringImpl *)*((void *)result + 29);
    *((void *)v3 + 29) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    double result = (WTF::StringImpl *)*((void *)v3 + 24);
    *((void *)v3 + 24) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        double result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *((unsigned char *)v3 + 27objc_destroyWeak(this + 2) = 0;
  }
  return result;
}

uint64_t WebKit::PrivateClickMeasurementManager::markAllUnattributedAsExpiredForTesting(WebKit::PrivateClickMeasurementManager *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 23) + 24))(*((void *)this + 23));
  if (result)
  {
    WebKit::PrivateClickMeasurementManager::initializeStore((uint64_t)this);
    uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 21) + 40);
    return v3();
  }
  return result;
}

void WebKit::PrivateClickMeasurementManager::setPCMFraudPreventionValuesForTesting(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *(void *)a2;
  if (*(void *)a2
    && *(_DWORD *)(v5 + 4)
    && *a3
    && *(_DWORD *)(*a3 + 4)
    && *a4
    && *(_DWORD *)(*a4 + 4)
    && *a5
    && *(_DWORD *)(*a5 + 4))
  {
    *(void *)a2 = 0;
    uint64_t v7 = *a3;
    *a3 = 0;
    uint64_t v8 = *a4;
    *a4 = 0;
    uint64_t v9 = *a5;
    *a5 = 0;
    int v10 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v10 += 8;
    }
    int v11 = *(unsigned __int8 *)(a1 + 344);
    long long v24 = v10;
    uint64_t v20 = 0;
    if (v11)
    {
      int v12 = *(WTF::StringImpl **)(a1 + 280);
      *(void *)(a1 + 280) = v5;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, a2);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      *(void *)&long long v21 = 0;
      uint64_t v13 = *(WTF::StringImpl **)(a1 + 288);
      *(void *)(a1 + 288) = v7;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, a2);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      *((void *)&v21 + 1) = 0;
      uint64_t v14 = *(WTF::StringImpl **)(a1 + 296);
      *(void *)(a1 + 296) = v8;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, a2);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      *(void *)&long long v22 = 0;
      uint64_t v15 = *(WTF::StringImpl **)(a1 + 304);
      *(void *)(a1 + 304) = v9;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, a2);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      *((void *)&v22 + 1) = 0;
      uint64_t v16 = *(WTF::StringImpl **)(a1 + 312);
      *(void *)(a1 + 31objc_destroyWeak(this + 2) = v10;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, a2);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      *(void *)&long long v23 = 0;
      uint64_t v17 = *(WTF::StringImpl **)(a1 + 320);
      *(void *)(a1 + 320) = v10;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, a2);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      *((void *)&v23 + 1) = 0;
      long long v18 = *(WTF::StringImpl **)(a1 + 328);
      *(void *)(a1 + 328) = v10;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, a2);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      long long v24 = 0;
      uint64_t v19 = *(WTF::StringImpl **)(a1 + 336);
      *(void *)(a1 + 336) = v10;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, a2);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    else
    {
      *(void *)(a1 + 280) = v5;
      *(void *)(a1 + 288) = v7;
      long long v21 = 0u;
      *(void *)(a1 + 296) = v8;
      *(void *)(a1 + 304) = v9;
      long long v22 = 0u;
      *(void *)(a1 + 31objc_destroyWeak(this + 2) = v10;
      *(void *)(a1 + 320) = v10;
      long long v23 = 0u;
      long long v24 = 0;
      *(void *)(a1 + 328) = v10;
      *(void *)(a1 + 336) = v10;
      *(unsigned char *)(a1 + 344) = 1;
    }
    WebKit::PrivateClickMeasurementManager::TestingFraudPreventionValues::~TestingFraudPreventionValues((WebKit::PrivateClickMeasurementManager::TestingFraudPreventionValues *)&v20, a2);
  }
}

uint64_t WebKit::PrivateClickMeasurementManager::markAttributedPrivateClickMeasurementsAsExpiredForTesting(uint64_t a1, uint64_t *a2)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184)))
  {
    WebKit::PrivateClickMeasurementManager::initializeStore(a1);
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 168) + 48);
    return v4();
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::PrivateClickMeasurementManager::initializeStore(uint64_t this)
{
  if (!*(void *)(this + 168))
  {
    uint64_t v1 = this;
    if ((*(unsigned int (**)(void))(**(void **)(this + 184) + 40))(*(void *)(this + 184)))
    {
      uint64_t v3 = WTF::fastMalloc((WTF *)0x150);
      *(_DWORD *)(v3 + 8) = 1;
      *(void *)uint64_t v3 = &unk_1EE9C96A0;
      *(unsigned char *)(v3 + 16) = 0;
      *(unsigned char *)(v3 + 328) = 0;
      this = *(void *)(v1 + 168);
      *(void *)(v1 + 168) = v3;
      if (!this) {
        return this;
      }
    }
    else
    {
      uint64_t v2 = (WebKit::PCM::PersistentStore *)WTF::fastMalloc((WTF *)0x20);
      WebKit::PCM::PersistentStore::PersistentStore(v2, (const WTF::String *)(v1 + 176));
      this = *(void *)(v1 + 168);
      *(void *)(v1 + 168) = v2;
      if (!this) {
        return this;
      }
    }
    if (atomic_fetch_add((atomic_uint *volatile)(this + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(this + 8));
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)this + 8);
      return v4();
    }
  }
  return this;
}

uint64_t WebKit::PrivateClickMeasurementManager::destroyStoreForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 168);
  if (v3)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    uint64_t v5 = *(atomic_uint **)(a1 + 8);
    if (v5) {
      atomic_fetch_add(v5, 1u);
    }
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v7 = &unk_1EE9C9BA0;
    v7[1] = v5;
    v7[2] = v6;
    int v11 = v7;
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 96))(v3, &v11);
    uint64_t result = (uint64_t)v11;
    int v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    int v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);
    return v10(v9);
  }
  return result;
}

void WebKit::PrivateClickMeasurementManager::allowTLSCertificateChainForLocalPCMTesting(uint64_t a1, const void **a2)
{
}

void *WebKit::PCM::initializePCMStorageInDirectory(WebKit::PCM *this, const WTF::String *a2)
{
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v3 = &unk_1EE9C90E8;
  v3[1] = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x160);
  uint64_t v7 = v3;
  WebKit::PrivateClickMeasurementManager::PrivateClickMeasurementManager(v4, (uint64_t *)&v7, (_DWORD **)this);
  uint64_t result = v7;
  if (v7) {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  {
    uint64_t result = (void *)WebKit::PCM::managerPointer(void)::manager;
    WebKit::PCM::managerPointer(void)::manager = v4;
    if (result)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v6();
    }
  }
  else
  {
    WebKit::PCM::managerPointer(void)::manager = v4;
  }
  return result;
}

void WebKit::PCM::decodeMessageAndSendToManager(WebKit::Daemon::Connection *a1, int a2, unsigned __int8 **a3, uint64_t a4, unsigned __int8 **a5)
{
  switch(a2)
  {
    case 0:
      WebKit::PCM::handlePCMMessageWithReply<WebKit::PCM::MessageInfo::storeUnattributed>((uint64_t)a3, a4, a5);
      break;
    case 1:
      WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::handleAttribution>((uint64_t)a3, a4, a3);
      break;
    case 2:
      WebKit::PCM::handlePCMMessageWithReply<WebKit::PCM::MessageInfo::clear>((uint64_t)a3, a4, (uint64_t *)a5);
      break;
    case 3:
      WebKit::PCM::handlePCMMessageWithReply<WebKit::PCM::MessageInfo::clearForRegistrableDomain>((uint64_t)a3, a4, a5);
      break;
    case 4:
      WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::migratePrivateClickMeasurementFromLegacyStorage>((uint64_t)a3, a4, a3);
      break;
    case 5:
      if (a4)
      {
        int v5 = *(unsigned __int8 *)a3;
        {
          BOOL v6 = qword_1E93CFAC8 != 0;
        }
        else
        {
          BOOL v6 = 0;
          WebKit::PCM::DaemonConnectionSet::singleton(void)::set = 0;
          qword_1E93CFAC8 = 0;
        }
        WebKit::PCM::DaemonConnectionSet::setConnectedNetworkProcessHasDebugModeEnabled((WebKit::PCM::DaemonConnectionSet *)&WebKit::PCM::DaemonConnectionSet::singleton(void)::set, a1, v5 != 0);
        if (v6 != (qword_1E93CFAC8 != 0))
        {
          uint64_t v7 = (WebKit::PrivateClickMeasurementManager *)WebKit::PCM::managerPointer(void)::manager;
          WebKit::PrivateClickMeasurementManager::setDebugModeIsEnabled(v7);
        }
      }
      break;
    case 6:
      WebKit::PCM::handlePCMMessageWithReply<WebKit::PCM::MessageInfo::toStringForTesting>((uint64_t)a3, a4, (uint64_t *)a5);
      break;
    case 7:
      WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::setOverrideTimerForTesting>((unsigned __int8 *)a3, a4);
      break;
    case 8:
      WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::setTokenPublicKeyURLForTesting>((uint64_t)a3, a4, a3);
      break;
    case 9:
      WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::setTokenSignatureURLForTesting>((uint64_t)a3, a4, a3);
      break;
    case 10:
      WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::setAttributionReportURLsForTesting>((uint64_t)a3, a4, a3);
      break;
    case 11:
      {
        uint64_t v8 = WebKit::PCM::managerPointer(void)::manager;
      }
      else
      {
        uint64_t v8 = 0;
        WebKit::PCM::managerPointer(void)::manager = 0;
      }
      uint64_t v9 = *(void (**)(void))(*(void *)v8 + 104);
      goto LABEL_44;
    case 12:
      WebKit::PCM::handlePCMMessageWithReply<WebKit::PCM::MessageInfo::markAttributedPrivateClickMeasurementsAsExpiredForTesting>((uint64_t)a3, a4, (uint64_t *)a5);
      break;
    case 13:
      WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::setPCMFraudPreventionValuesForTesting>((uint64_t)a3, a4, a3);
      break;
    case 14:
      {
        uint64_t v10 = WebKit::PCM::managerPointer(void)::manager;
      }
      else
      {
        uint64_t v10 = 0;
        WebKit::PCM::managerPointer(void)::manager = 0;
      }
      uint64_t v9 = *(void (**)(void))(*(void *)v10 + 128);
LABEL_44:
      v9();
      break;
    case 15:
      WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::setPrivateClickMeasurementAppBundleIDForTesting>((uint64_t)a3, a4, a3);
      break;
    case 16:
      WebKit::PCM::handlePCMMessageWithReply<WebKit::PCM::MessageInfo::destroyStoreForTesting>((uint64_t)a3, a4, (uint64_t *)a5);
      break;
    case 17:
      WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::allowTLSCertificateChainForLocalPCMTesting>((uint64_t)a3, a4);
      break;
    default:
      return;
  }
}

void WebKit::PCM::handlePCMMessageWithReply<WebKit::PCM::MessageInfo::storeUnattributed>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  v13[0] = a1;
  v13[1] = a2;
  void v13[2] = 0;
  v11[0] = 0;
  char v12 = 0;
  WebKit::Daemon::Coder<WebCore::PrivateClickMeasurement,void>::decode(v13, a3, (uint64_t)v16);
  if (v17)
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)v14, (uint64_t)v16);
    char v15 = 1;
    if (v17) {
      goto LABEL_14;
    }
    do
    {
      WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)v11, (uint64_t)v14);
      char v12 = 1;
      if (v15)
      {
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v14, v5);
        if (!v12) {
          break;
        }
      }
      BOOL v6 = *a3;
      *a3 = 0;
      uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v7 = &unk_1EE9C9BC8;
      v7[1] = v6;
      v16[0] = v7;
      {
        uint64_t v8 = WebKit::PCM::managerPointer(void)::manager;
      }
      else
      {
        uint64_t v8 = 0;
        WebKit::PCM::managerPointer(void)::manager = 0;
      }
      if (v12)
      {
        (*(void (**)(uint64_t, unsigned char *, void *))(*(void *)v8 + 16))(v8, v11, v16);
        uint64_t v10 = v16[0];
        v16[0] = 0;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
        if (v12) {
          WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v11, v9);
        }
        return;
      }
      __break(1u);
LABEL_14:
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v16, v4);
    }
    while (v15);
  }
}

uint64_t *WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::handleAttribution>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  v12[0] = a1;
  v12[1] = a2;
  v12[2] = 0;
  LOBYTE(v6[0]) = 0;
  char v11 = 0;
  uint64_t result = WebKit::Daemon::Decoder::operator>><std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>>(v12, v6, a3);
  if (v11)
  {
    {
      uint64_t v4 = WebKit::PCM::managerPointer(void)::manager;
    }
    else
    {
      uint64_t v4 = 0;
      WebKit::PCM::managerPointer(void)::manager = 0;
    }
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v4 + 24))(v4, v6, &v7, &v8, &v9, &v10);
    if (v11) {
      return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>::~__tuple_impl(v6, v5);
    }
  }
  return result;
}

uint64_t WebKit::PCM::handlePCMMessageWithReply<WebKit::PCM::MessageInfo::clear>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9C9BF0;
  v4[1] = v3;
  uint64_t v7 = v4;
  {
    uint64_t v5 = WebKit::PCM::managerPointer(void)::manager;
  }
  else
  {
    uint64_t v5 = 0;
    WebKit::PCM::managerPointer(void)::manager = 0;
  }
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, &v7);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::PCM::handlePCMMessageWithReply<WebKit::PCM::MessageInfo::clearForRegistrableDomain>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  v10[0] = a1;
  v10[1] = a2;
  v10[2] = 0;
  uint64_t result = WebKit::Daemon::Coder<WebCore::RegistrableDomain,void>::decode(v10, a3, (uint64_t)&v11);
  if (v12)
  {
    char v12 = 1;
    uint64_t v5 = *a3;
    *a3 = 0;
    BOOL v6 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)BOOL v6 = &unk_1EE9C9C18;
    *((void *)v6 + 1) = v5;
    uint64_t v9 = v6;
    {
      uint64_t v7 = WebKit::PCM::managerPointer(void)::manager;
    }
    else
    {
      uint64_t v7 = 0;
      WebKit::PCM::managerPointer(void)::manager = 0;
    }
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v7 + 40))(v7, &v11, &v9);
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    if (v12)
    {
      uint64_t result = v11;
      char v11 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::migratePrivateClickMeasurementFromLegacyStorage>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = 0;
  v5[0] = 0;
  char v6 = 0;
  WebKit::Daemon::Decoder::operator>><std::tuple<WebCore::PrivateClickMeasurement,WebKit::PrivateClickMeasurementAttributionType>>(v7, (WebCore::PrivateClickMeasurement *)v5, a3);
  if (v6)
  {
    {
      uint64_t v3 = WebKit::PCM::managerPointer(void)::manager;
    }
    else
    {
      uint64_t v3 = 0;
      WebKit::PCM::managerPointer(void)::manager = 0;
    }
    (*(void (**)(uint64_t, unsigned char *, void))(*(void *)v3 + 48))(v3, v5, v5[312]);
    if (v6) {
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v5, v4);
    }
  }
}

uint64_t WebKit::PCM::handlePCMMessageWithReply<WebKit::PCM::MessageInfo::toStringForTesting>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9C9C40;
  v4[1] = v3;
  uint64_t v7 = v4;
  {
    uint64_t v5 = WebKit::PCM::managerPointer(void)::manager;
  }
  else
  {
    uint64_t v5 = 0;
    WebKit::PCM::managerPointer(void)::manager = 0;
  }
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 64))(v5, &v7);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

unsigned __int8 *WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::setOverrideTimerForTesting>(unsigned __int8 *result, uint64_t a2)
{
  if (a2)
  {
    int v2 = *result;
    {
      uint64_t v3 = WebKit::PCM::managerPointer(void)::manager;
    }
    else
    {
      uint64_t v3 = 0;
      WebKit::PCM::managerPointer(void)::manager = 0;
    }
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, BOOL))(*(void *)v3 + 72))(v3, v2 != 0);
  }
  return result;
}

WTF::StringImpl *WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::setTokenPublicKeyURLForTesting>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  v8[0] = a1;
  v8[1] = a2;
  _DWORD v8[2] = 0;
  LOBYTE(v6[0]) = 0;
  char v7 = 0;
  uint64_t result = (WTF::StringImpl *)WebKit::Daemon::Decoder::operator>><std::tuple<WTF::URL>>(v8, (WTF::StringImpl *)v6, a3);
  if (v7)
  {
    {
      uint64_t v4 = WebKit::PCM::managerPointer(void)::manager;
    }
    else
    {
      uint64_t v4 = 0;
      WebKit::PCM::managerPointer(void)::manager = 0;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(void *)v4 + 80))(v4, v6);
    if (v7)
    {
      uint64_t result = v6[0];
      v6[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::setTokenSignatureURLForTesting>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  v8[0] = a1;
  v8[1] = a2;
  _DWORD v8[2] = 0;
  LOBYTE(v6[0]) = 0;
  char v7 = 0;
  uint64_t result = (WTF::StringImpl *)WebKit::Daemon::Decoder::operator>><std::tuple<WTF::URL>>(v8, (WTF::StringImpl *)v6, a3);
  if (v7)
  {
    {
      uint64_t v4 = WebKit::PCM::managerPointer(void)::manager;
    }
    else
    {
      uint64_t v4 = 0;
      WebKit::PCM::managerPointer(void)::manager = 0;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(void *)v4 + 88))(v4, v6);
    if (v7)
    {
      uint64_t result = v6[0];
      v6[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::setAttributionReportURLsForTesting>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  v9[0] = a1;
  v9[1] = a2;
  void v9[2] = 0;
  v6[0] = 0;
  char v8 = 0;
  WebKit::Daemon::Decoder::operator>><std::tuple<WTF::URL,WTF::URL>>(v9, (uint64_t)v6, a3);
  if (v8)
  {
    {
      uint64_t v4 = WebKit::PCM::managerPointer(void)::manager;
    }
    else
    {
      uint64_t v4 = 0;
      WebKit::PCM::managerPointer(void)::manager = 0;
    }
    (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v4 + 96))(v4, v6, &v7);
  }
  return std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v3);
}

uint64_t WebKit::PCM::handlePCMMessageWithReply<WebKit::PCM::MessageInfo::markAttributedPrivateClickMeasurementsAsExpiredForTesting>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9C9C68;
  v4[1] = v3;
  uint64_t v7 = v4;
  {
    uint64_t v5 = WebKit::PCM::managerPointer(void)::manager;
  }
  else
  {
    uint64_t v5 = 0;
    WebKit::PCM::managerPointer(void)::manager = 0;
  }
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 112))(v5, &v7);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::setPCMFraudPreventionValuesForTesting>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  v11[0] = a1;
  v11[1] = a2;
  void v11[2] = 0;
  LOBYTE(v6) = 0;
  char v10 = 0;
  WebKit::Daemon::Decoder::operator>><std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>>(v11, &v6, a3);
  if (v10)
  {
    {
      uint64_t v4 = WebKit::PCM::managerPointer(void)::manager;
    }
    else
    {
      uint64_t v4 = 0;
      WebKit::PCM::managerPointer(void)::manager = 0;
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v4 + 120))(v4, &v6, &v7, &v8, &v9);
  }
  return std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v6, v3);
}

WTF::StringImpl *WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::setPrivateClickMeasurementAppBundleIDForTesting>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  v8[0] = a1;
  v8[1] = a2;
  _DWORD v8[2] = 0;
  LOBYTE(v6) = 0;
  char v7 = 0;
  uint64_t result = (WTF::StringImpl *)WebKit::Daemon::Decoder::operator>><std::tuple<WTF::String>>(v8, (uint64_t *)&v6, a3);
  if (v7)
  {
    {
      uint64_t v4 = WebKit::PCM::managerPointer(void)::manager;
    }
    else
    {
      uint64_t v4 = 0;
      WebKit::PCM::managerPointer(void)::manager = 0;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(void *)v4 + 136))(v4, &v6);
    if (v7)
    {
      uint64_t result = v6;
      uint64_t v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::PCM::handlePCMMessageWithReply<WebKit::PCM::MessageInfo::destroyStoreForTesting>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9C9C90;
  v4[1] = v3;
  char v7 = v4;
  {
    uint64_t v5 = WebKit::PCM::managerPointer(void)::manager;
  }
  else
  {
    uint64_t v5 = 0;
    WebKit::PCM::managerPointer(void)::manager = 0;
  }
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 144))(v5, &v7);
  uint64_t result = (uint64_t)v7;
  char v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void WebKit::PCM::handlePCMMessage<WebKit::PCM::MessageInfo::allowTLSCertificateChainForLocalPCMTesting>(uint64_t a1, uint64_t a2)
{
  v6[0] = a1;
  v6[1] = a2;
  v6[2] = 0;
  LOBYTE(cf) = 0;
  char v5 = 0;
  WebKit::Daemon::Decoder::operator>><std::tuple<WebCore::CertificateInfo>>(v6, (uint64_t)&cf);
  if (v5)
  {
    {
      uint64_t v2 = WebKit::PCM::managerPointer(void)::manager;
    }
    else
    {
      uint64_t v2 = 0;
      WebKit::PCM::managerPointer(void)::manager = 0;
    }
    (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v2 + 152))(v2, &cf);
    if (v5)
    {
      CFTypeRef v3 = cf;
      CFTypeRef cf = 0;
      if (v3) {
        CFRelease(v3);
      }
    }
  }
}

WTF *WebKit::PCM::ManagerProxy::storeUnattributed(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  WebKit::Daemon::Coder<WebCore::PrivateClickMeasurement,void>::encode((unsigned int *)&v14, a2);
  char v12 = v14;
  uint64_t v13 = v15;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v6 = &unk_1EE9C9CB8;
  v6[1] = v5;
  char v11 = v6;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply((void *)(a1 + 8), 0, (uint64_t)&v12, (uint64_t *)&v11);
  uint64_t v8 = (uint64_t)v11;
  char v11 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v12;
  if (v12)
  {
    char v12 = 0;
    LODWORD(v13) = 0;
    WTF::fastFree(v9, v7);
  }
  uint64_t result = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    LODWORD(v15) = 0;
    return (WTF *)WTF::fastFree(result, v7);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::handleAttribution(uint64_t a1, char *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  WebKit::Daemon::Coder<WebCore::PCM::AttributionTriggerData,void>::encode((unsigned int *)&v16, a2);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v16, a3);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v16, a4);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v16, a5);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v16, a6);
  uint64_t v14 = v16;
  uint64_t v15 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 1, (uint64_t)&v14);
  char v12 = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    LODWORD(v15) = 0;
    WTF::fastFree(v12, v11);
  }
  uint64_t result = v16;
  if (v16)
  {
    uint64_t v16 = 0;
    LODWORD(v17) = 0;
    return (WTF *)WTF::fastFree(result, v11);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::clear(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9C9CE0;
  v4[1] = v3;
  uint64_t v8 = v4;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(v2, 2, (uint64_t)&v9, (uint64_t *)&v8);
  uint64_t v6 = (uint64_t)v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t result = v9;
  if (v9)
  {
    uint64_t v9 = 0;
    LODWORD(v10) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::clearForRegistrableDomain(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v14, a2);
  char v12 = v14;
  uint64_t v13 = v15;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v6 = &unk_1EE9C9D08;
  v6[1] = v5;
  char v11 = v6;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply((void *)(a1 + 8), 3, (uint64_t)&v12, (uint64_t *)&v11);
  uint64_t v8 = (uint64_t)v11;
  char v11 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v12;
  if (v12)
  {
    char v12 = 0;
    LODWORD(v13) = 0;
    WTF::fastFree(v9, v7);
  }
  uint64_t result = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    LODWORD(v15) = 0;
    return (WTF *)WTF::fastFree(result, v7);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setDebugModeIsEnabled(xpc_connection_t *this, char a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  LOBYTE(v6) = a2;
  WebKit::Daemon::Encoder::encodeFixedLengthData((unsigned int *)&v8, &v6, 1uLL);
  uint64_t v6 = v8;
  uint64_t v7 = v9;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(this + 1, 5, (uint64_t)&v6);
  uint64_t v4 = v6;
  if (v6)
  {
    uint64_t v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  uint64_t result = v8;
  if (v8)
  {
    uint64_t v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::migratePrivateClickMeasurementFromLegacyStorage(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  WebKit::Daemon::Coder<WebCore::PrivateClickMeasurement,void>::encode((unsigned int *)&v10, a2);
  LOBYTE(v8) = a3;
  WebKit::Daemon::Encoder::encodeFixedLengthData((unsigned int *)&v10, &v8, 1uLL);
  uint64_t v8 = v10;
  uint64_t v9 = v11;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 4, (uint64_t)&v8);
  uint64_t v6 = v8;
  if (v8)
  {
    uint64_t v8 = 0;
    LODWORD(v9) = 0;
    WTF::fastFree(v6, v5);
  }
  uint64_t result = v10;
  if (v10)
  {
    uint64_t v10 = 0;
    LODWORD(v11) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::toStringForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9C9D30;
  v4[1] = v3;
  uint64_t v8 = v4;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(v2, 6, (uint64_t)&v9, (uint64_t *)&v8);
  uint64_t v6 = (uint64_t)v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t result = v9;
  if (v9)
  {
    uint64_t v9 = 0;
    LODWORD(v10) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setOverrideTimerForTesting(xpc_connection_t *this, char a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  LOBYTE(v6) = a2;
  WebKit::Daemon::Encoder::encodeFixedLengthData((unsigned int *)&v8, &v6, 1uLL);
  uint64_t v6 = v8;
  uint64_t v7 = v9;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(this + 1, 7, (uint64_t)&v6);
  uint64_t v4 = v6;
  if (v6)
  {
    uint64_t v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  uint64_t result = v8;
  if (v8)
  {
    uint64_t v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setTokenPublicKeyURLForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v8, a2);
  uint64_t v6 = v8;
  uint64_t v7 = v9;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 8, (uint64_t)&v6);
  uint64_t v4 = v6;
  if (v6)
  {
    uint64_t v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  uint64_t result = v8;
  if (v8)
  {
    uint64_t v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setTokenSignatureURLForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v8, a2);
  uint64_t v6 = v8;
  uint64_t v7 = v9;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 9, (uint64_t)&v6);
  uint64_t v4 = v6;
  if (v6)
  {
    uint64_t v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  uint64_t result = v8;
  if (v8)
  {
    uint64_t v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setAttributionReportURLsForTesting(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v10, a2);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v10, a3);
  uint64_t v8 = v10;
  uint64_t v9 = v11;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 10, (uint64_t)&v8);
  uint64_t v6 = v8;
  if (v8)
  {
    uint64_t v8 = 0;
    LODWORD(v9) = 0;
    WTF::fastFree(v6, v5);
  }
  uint64_t result = v10;
  if (v10)
  {
    uint64_t v10 = 0;
    LODWORD(v11) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::markAllUnattributedAsExpiredForTesting(xpc_connection_t *this)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(this + 1, 11, (uint64_t)&v3);
  uint64_t result = v3;
  if (v3)
  {
    uint64_t v3 = 0;
    LODWORD(v4) = 0;
    return (WTF *)WTF::fastFree(result, v1);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::markAttributedPrivateClickMeasurementsAsExpiredForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9C9D58;
  v4[1] = v3;
  uint64_t v8 = v4;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(v2, 12, (uint64_t)&v9, (uint64_t *)&v8);
  uint64_t v6 = (uint64_t)v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t result = v9;
  if (v9)
  {
    uint64_t v9 = 0;
    LODWORD(v10) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setPCMFraudPreventionValuesForTesting(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v14, a2);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v14, a3);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v14, a4);
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v14, a5);
  char v12 = v14;
  uint64_t v13 = v15;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 13, (uint64_t)&v12);
  uint64_t v10 = v12;
  if (v12)
  {
    char v12 = 0;
    LODWORD(v13) = 0;
    WTF::fastFree(v10, v9);
  }
  uint64_t result = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    LODWORD(v15) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::startTimerImmediatelyForTesting(xpc_connection_t *this)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(this + 1, 14, (uint64_t)&v3);
  uint64_t result = v3;
  if (v3)
  {
    uint64_t v3 = 0;
    LODWORD(v4) = 0;
    return (WTF *)WTF::fastFree(result, v1);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::setPrivateClickMeasurementAppBundleIDForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v8, a2);
  uint64_t v6 = v8;
  uint64_t v7 = v9;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send((xpc_connection_t *)(a1 + 8), 15, (uint64_t)&v6);
  uint64_t v4 = v6;
  if (v6)
  {
    uint64_t v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  uint64_t result = v8;
  if (v8)
  {
    uint64_t v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::destroyStoreForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9C9D80;
  v4[1] = v3;
  uint64_t v8 = v4;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(v2, 16, (uint64_t)&v9, (uint64_t *)&v8);
  uint64_t v6 = (uint64_t)v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t result = v9;
  if (v9)
  {
    uint64_t v9 = 0;
    LODWORD(v10) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

WTF *WebKit::PCM::ManagerProxy::allowTLSCertificateChainForLocalPCMTesting(xpc_connection_t *this, const WebCore::CertificateInfo *a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  WebKit::Daemon::Coder<WebCore::CertificateInfo,void>::encode((unsigned int *)&v8);
  uint64_t v6 = v8;
  uint64_t v7 = v9;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(this + 1, 17, (uint64_t)&v6);
  uint64_t v4 = v6;
  if (v6)
  {
    uint64_t v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  uint64_t result = v8;
  if (v8)
  {
    uint64_t v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

uint64_t WebKit::PCM::PersistentStore::prepareForProcessToSuspend()
{
  WebKit::PCM::sharedWorkQueue(&v4);
  v0 = v4;
  uint64_t v1 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v1 = &unk_1EE9BF650;
  v1[1] = WebKit::PCM::Database::interruptAllDatabases;
  uint64_t v3 = v1;
  WTF::SuspendableWorkQueue::suspend();
  uint64_t result = (uint64_t)v3;
  if (!v3)
  {
    if (!v0) {
      return result;
    }
    return WTF::WorkQueue::deref(v0);
  }
  uint64_t result = (*(uint64_t (**)(void *))(*v3 + 8))(v3);
  if (v0) {
    return WTF::WorkQueue::deref(v0);
  }
  return result;
}

uint64_t WebKit::PCM::sharedWorkQueue@<X0>(WTF::WorkQueue **a1@<X8>)
{
  {
    uint64_t v3 = (WTF::WorkQueue *)WebKit::PCM::sharedWorkQueue(void)::queue;
  }
  else
  {
    WTF::SuspendableWorkQueue::create();
    uint64_t v3 = (WTF::WorkQueue *)v5;
    WebKit::PCM::sharedWorkQueue(void)::queue = v5;
  }
  uint64_t result = WTF::WorkQueue::ref(v3);
  *a1 = v3;
  return result;
}

uint64_t WebKit::PCM::PersistentStore::processDidResume(WebKit::PCM::PersistentStore *this)
{
  WebKit::PCM::sharedWorkQueue(&v3);
  uint64_t v1 = v3;
  uint64_t result = WTF::SuspendableWorkQueue::resume(v3);
  if (v1)
  {
    return WTF::WorkQueue::deref(v1);
  }
  return result;
}

WebKit::PCM::PersistentStore *WebKit::PCM::PersistentStore::PersistentStore(WebKit::PCM::PersistentStore *this, const WTF::String *a2)
{
  *((_DWORD *)this + objc_destroyWeak(this + 2) = 1;
  *(void *)this = &unk_1EE9C9878;
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  WebKit::PCM::sharedWorkQueue((WTF::WorkQueue **)this + 3);
  if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v9 = this;
    uint64_t v10 = this;
    atomic_fetch_add((atomic_uint *volatile)this + 2, 1u);
    WTF::String::isolatedCopy();
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v4 = &unk_1EE9C9DA8;
    v4[1] = v9;
    void v4[2] = v10;
    uint64_t v5 = v11;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    v4[3] = v5;
    char v12 = v4;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t v7 = v12;
    char v12 = 0;
    if (v7) {
      (*(void (**)(void *))(*v7 + 8))(v7);
    }
    WebKit::PCM::PersistentStore::PersistentStore(WTF::String const&)::$_0::~$_0((uint64_t)&v9, v6);
  }
  return this;
}

uint64_t WebKit::PCM::PersistentStore::PersistentStore(WTF::String const&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void WebKit::PCM::PersistentStore::~PersistentStore(WebKit::PCM::PersistentStore *this)
{
  *(void *)this = &unk_1EE9C9878;
  uint64_t v2 = (WTF::WorkQueue *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    WTF::WorkQueue::deref(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 64))(v3);
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::PCM::PersistentStore::~PersistentStore(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::PCM::PersistentStore::insertPrivateClickMeasurement(uint64_t a1, char *a2, char a3, uint64_t *a4)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  v31[0] = *a2;
  long long v7 = *(_OWORD *)(a2 + 8);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + objc_destroyWeak(this + 2) = 0;
  long long v32 = v7;
  v33[0] = *(_OWORD *)(a2 + 24);
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(a2 + 33);
  v34[0] = 0;
  char v35 = 0;
  if (a2[184])
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v34, (uint64_t)(a2 + 56));
    char v35 = 1;
  }
  long long v8 = *((_OWORD *)a2 + 13);
  long long v36 = *((_OWORD *)a2 + 12);
  long long v37 = v8;
  LOBYTE(v38) = 0;
  char v39 = 0;
  if (a2[232])
  {
    uint64_t v9 = *((void *)a2 + 28);
    *((void *)a2 + 28) = 0;
    uint64_t v38 = v9;
    char v39 = 1;
  }
  long long v10 = *((_OWORD *)a2 + 15);
  long long v11 = *((_OWORD *)a2 + 16);
  *((_OWORD *)a2 + 15) = 0u;
  *((_OWORD *)a2 + 16) = 0u;
  long long v40 = v10;
  long long v41 = v11;
  LOBYTE(v4objc_destroyWeak(this + 2) = 0;
  char v44 = 0;
  if (a2[296])
  {
    long long v12 = *((_OWORD *)a2 + 17);
    *((void *)a2 + 34) = 0;
    *((void *)a2 + 35) = 0;
    long long v42 = v12;
    uint64_t v13 = *((void *)a2 + 36);
    *((void *)a2 + 36) = 0;
    uint64_t v43 = v13;
    char v44 = 1;
  }
  uint64_t v14 = *((void *)a2 + 38);
  *((void *)a2 + 38) = 0;
  uint64_t v45 = v14;
  char v46 = a3;
  uint64_t v15 = *a4;
  *a4 = 0;
  uint64_t v47 = v15;
  uint64_t v16 = WTF::fastMalloc((WTF *)0x160);
  *(void *)uint64_t v16 = &unk_1EE9C9DD0;
  *(void *)(v16 + 8) = a1;
  *(void *)(v16 + 16) = a1;
  *(unsigned char *)(v16 + 24) = v31[0];
  *(void *)(v16 + 3objc_destroyWeak(this + 2) = v32;
  uint64_t v17 = *((void *)&v32 + 1);
  long long v32 = 0uLL;
  *(void *)(v16 + 40) = v17;
  long long v18 = v33[0];
  *(_OWORD *)(v16 + 57) = *(_OWORD *)((char *)v33 + 9);
  *(_OWORD *)(v16 + 48) = v18;
  *(unsigned char *)(v16 + 80) = 0;
  *(unsigned char *)(v16 + 208) = 0;
  if (v35)
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v16 + 80, (uint64_t)v34);
    *(unsigned char *)(v16 + 208) = 1;
  }
  long long v19 = v36;
  *(_OWORD *)(v16 + 23objc_destroyWeak(this + 2) = v37;
  *(_OWORD *)(v16 + 216) = v19;
  *(unsigned char *)(v16 + 248) = 0;
  *(unsigned char *)(v16 + 256) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    uint64_t v38 = 0;
    *(void *)(v16 + 248) = v20;
    *(unsigned char *)(v16 + 256) = 1;
  }
  *(_OWORD *)(v16 + 264) = v40;
  *(void *)(v16 + 280) = v41;
  uint64_t v21 = *((void *)&v41 + 1);
  long long v40 = 0u;
  long long v41 = 0u;
  *(void *)(v16 + 288) = v21;
  *(unsigned char *)(v16 + 296) = 0;
  *(unsigned char *)(v16 + 320) = 0;
  if (v44)
  {
    *(void *)(v16 + 296) = v42;
    uint64_t v22 = *((void *)&v42 + 1);
    long long v42 = 0uLL;
    *(void *)(v16 + 304) = v22;
    uint64_t v23 = v43;
    uint64_t v43 = 0;
    *(void *)(v16 + 31objc_destroyWeak(this + 2) = v23;
    *(unsigned char *)(v16 + 320) = 1;
  }
  *(void *)(v16 + 328) = v45;
  *(unsigned char *)(v16 + 336) = v46;
  uint64_t v24 = v47;
  uint64_t v45 = 0;
  uint64_t v47 = 0;
  *(void *)(v16 + 344) = v24;
  uint64_t v48 = v16;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t v26 = v48;
  uint64_t v48 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = v47;
  uint64_t v47 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v31, v25);
  return 0;
}

uint64_t WebKit::PCM::PersistentStore::markAllUnattributedPrivateClickMeasurementAsExpiredForTesting(atomic_uint *this)
{
  atomic_fetch_add(this + 2, 1u);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v2 = &unk_1EE9C9DF8;
  v2[1] = this;
  v2[2] = this;
  uint64_t v4 = (uint64_t)v2;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return result;
}

void *WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, char a6, uint64_t *a7)
{
  uint64_t v31 = a1;
  *(void *)&long long v32 = a1;
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  WebCore::RegistrableDomain::isolatedCopy(&v50);
  *((void *)&v32 + 1) = v50;
  WebCore::RegistrableDomain::isolatedCopy(&v50);
  *(void *)&long long v33 = v50;
  WTF::String::isolatedCopy();
  __int16 v34 = *a5;
  char v35 = *((unsigned char *)a5 + 2);
  LOBYTE(v36) = 0;
  char v37 = 0;
  if (*((unsigned char *)a5 + 16))
  {
    uint64_t v27 = *((void *)a5 + 1);
    *((void *)a5 + 1) = 0;
    uint64_t v36 = v27;
    char v37 = 1;
  }
  LOBYTE(v38) = 0;
  char v39 = 0;
  if (*((unsigned char *)a5 + 32))
  {
    uint64_t v10 = *((void *)a5 + 3);
    *((void *)a5 + 3) = 0;
    uint64_t v38 = v10;
    char v39 = 1;
  }
  LOBYTE(v40) = 0;
  char v41 = 0;
  if (*((unsigned char *)a5 + 48))
  {
    uint64_t v28 = *((void *)a5 + 5);
    *((void *)a5 + 5) = 0;
    uint64_t v40 = v28;
    char v41 = 1;
  }
  LOBYTE(v4objc_destroyWeak(this + 2) = 0;
  char v44 = 0;
  if (*((unsigned char *)a5 + 88))
  {
    long long v11 = *(_OWORD *)(a5 + 28);
    *(_OWORD *)(a5 + 28) = 0u;
    long long v12 = *(_OWORD *)(a5 + 36);
    *(_OWORD *)(a5 + 36) = 0u;
    long long v42 = v11;
    long long v43 = v12;
    char v44 = 1;
  }
  LOBYTE(v45) = 0;
  char v47 = 0;
  if (*((unsigned char *)a5 + 120))
  {
    long long v13 = *((_OWORD *)a5 + 6);
    *((void *)a5 + 1objc_destroyWeak(this + 2) = 0;
    *((void *)a5 + 13) = 0;
    long long v45 = v13;
    uint64_t v14 = *((void *)a5 + 14);
    *((void *)a5 + 14) = 0;
    uint64_t v46 = v14;
    char v47 = 1;
  }
  char v48 = a6;
  uint64_t v15 = *a7;
  *a7 = 0;
  uint64_t v49 = v15;
  uint64_t v16 = WTF::fastMalloc((WTF *)0xC0);
  *(void *)uint64_t v16 = &unk_1EE9C9E20;
  *(void *)(v16 + 8) = v31;
  *(void *)(v16 + 16) = v32;
  uint64_t v17 = *((void *)&v32 + 1);
  long long v32 = 0u;
  *(void *)(v16 + 24) = v17;
  *(void *)(v16 + 3objc_destroyWeak(this + 2) = v33;
  uint64_t v18 = *((void *)&v33 + 1);
  long long v33 = 0u;
  *(void *)(v16 + 40) = v18;
  *(_WORD *)(v16 + 48) = v34;
  *(unsigned char *)(v16 + 50) = v35;
  *(unsigned char *)(v16 + 56) = 0;
  *(unsigned char *)(v16 + 64) = 0;
  if (v37)
  {
    uint64_t v29 = v36;
    uint64_t v36 = 0;
    *(void *)(v16 + 56) = v29;
    *(unsigned char *)(v16 + 64) = 1;
  }
  *(unsigned char *)(v16 + 7objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(v16 + 80) = 0;
  if (v39)
  {
    uint64_t v19 = v38;
    uint64_t v38 = 0;
    *(void *)(v16 + 7objc_destroyWeak(this + 2) = v19;
    *(unsigned char *)(v16 + 80) = 1;
  }
  *(unsigned char *)(v16 + 88) = 0;
  *(unsigned char *)(v16 + 96) = 0;
  if (v41)
  {
    uint64_t v30 = v40;
    uint64_t v40 = 0;
    *(void *)(v16 + 88) = v30;
    *(unsigned char *)(v16 + 96) = 1;
  }
  *(unsigned char *)(v16 + 104) = 0;
  *(unsigned char *)(v16 + 136) = 0;
  if (v44)
  {
    *(_OWORD *)(v16 + 104) = v42;
    *(void *)(v16 + 120) = v43;
    uint64_t v20 = *((void *)&v43 + 1);
    long long v42 = 0uLL;
    long long v43 = 0uLL;
    *(void *)(v16 + 128) = v20;
    *(unsigned char *)(v16 + 136) = 1;
  }
  *(unsigned char *)(v16 + 144) = 0;
  *(unsigned char *)(v16 + 168) = 0;
  if (v47)
  {
    *(void *)(v16 + 144) = v45;
    uint64_t v21 = *((void *)&v45 + 1);
    long long v45 = 0uLL;
    *(void *)(v16 + 15objc_destroyWeak(this + 2) = v21;
    uint64_t v22 = v46;
    uint64_t v46 = 0;
    *(void *)(v16 + 160) = v22;
    *(unsigned char *)(v16 + 168) = 1;
  }
  *(unsigned char *)(v16 + 176) = v48;
  uint64_t v23 = v49;
  uint64_t v49 = 0;
  *(void *)(v16 + 184) = v23;
  long long v50 = (WTF::StringImpl *)v16;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t v25 = v50;
  long long v50 = 0;
  if (v25) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v25 + 8))(v25);
  }
  return WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WebCore::PCM::AttributionDestinationSite &::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::~$_0(&v31, v24);
}

void *WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WebCore::PCM::AttributionDestinationSite &::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[22];
  a1[22] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 17), a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 12), v4);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10), v5);
  std::optional<WebCore::PublicSuffix>::~optional((uint64_t)(a1 + 8), v6);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 6), v7);
  uint64_t v9 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  long long v11 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  long long v12 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(void *)v12 + 8))(v12);
  }
  return a1;
}

uint64_t WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(uint64_t a1, uint64_t *a2)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v4 = &unk_1EE9C9E98;
  v4[1] = a1;
  void v4[2] = a1;
  v4[3] = v3;
  uint64_t v6 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(uint64_t a1, uint64_t *a2)
{
  v7[0] = a1;
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v4 = &unk_1EE9C9EE8;
  v4[1] = v7[0];
  void v4[2] = a1;
  v7[1] = 0;
  v7[2] = 0;
  v4[3] = v3;
  long long v8 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t v5 = v8;
  long long v8 = 0;
  if (v5) {
    (*(void (**)(void *))(*v5 + 8))(v5);
  }
  return WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0((uint64_t)v7);
}

uint64_t WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WebKit::PCM::PersistentStore::markAttributedPrivateClickMeasurementsAsExpiredForTesting(uint64_t a1, uint64_t *a2)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v4 = &unk_1EE9C9F38;
  v4[1] = a1;
  void v4[2] = a1;
  v4[3] = v3;
  uint64_t v6 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::PCM::PersistentStore::clearPrivateClickMeasurement(uint64_t a1, uint64_t *a2)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v4 = &unk_1EE9C9F60;
  v4[1] = a1;
  void v4[2] = a1;
  v4[3] = v3;
  uint64_t v6 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::PCM::PersistentStore::clearPrivateClickMeasurementForRegistrableDomain(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  WebCore::RegistrableDomain::isolatedCopy(&v15);
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v16 = v4;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v5 = &unk_1EE9C9F88;
  v5[1] = a1;
  v5[2] = a1;
  uint64_t v6 = v15;
  uint64_t v15 = 0;
  v5[3] = v6;
  uint64_t v7 = v16;
  uint64_t v16 = 0;
  v5[4] = v7;
  uint64_t v17 = v5;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t v9 = v17;
  uint64_t v17 = 0;
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
  uint64_t v10 = v16;
  uint64_t v16 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  long long v11 = v15;
  uint64_t v15 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  return 0;
}

uint64_t WebKit::PCM::PersistentStore::clearExpiredPrivateClickMeasurement(atomic_uint *this)
{
  atomic_fetch_add(this + 2, 1u);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v2 = &unk_1EE9C9FB0;
  v2[1] = this;
  v2[2] = this;
  uint64_t v4 = (uint64_t)v2;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return result;
}

uint64_t WebKit::PCM::PersistentStore::clearSentAttribution(uint64_t a1, uint64_t a2, char a3)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  WebCore::PrivateClickMeasurement::isolatedCopy();
  char v34 = a3;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x158);
  *(void *)uint64_t v4 = &unk_1EE9C9FD8;
  *(void *)(v4 + 8) = a1;
  *(void *)(v4 + 16) = a1;
  *(unsigned char *)(v4 + 24) = v18;
  *(void *)(v4 + 3objc_destroyWeak(this + 2) = v19;
  uint64_t v5 = v20;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  *(void *)(v4 + 40) = v5;
  long long v6 = v21[0];
  *(_OWORD *)(v4 + 57) = *(_OWORD *)((char *)v21 + 9);
  *(_OWORD *)(v4 + 48) = v6;
  *(unsigned char *)(v4 + 80) = 0;
  *(unsigned char *)(v4 + 208) = 0;
  if (v22[128])
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v4 + 80, (uint64_t)v22);
    *(unsigned char *)(v4 + 208) = 1;
  }
  long long v7 = v23;
  *(_OWORD *)(v4 + 23objc_destroyWeak(this + 2) = v24;
  *(_OWORD *)(v4 + 216) = v7;
  *(unsigned char *)(v4 + 248) = 0;
  *(unsigned char *)(v4 + 256) = 0;
  if (v26)
  {
    uint64_t v8 = v25;
    uint64_t v25 = 0;
    *(void *)(v4 + 248) = v8;
    *(unsigned char *)(v4 + 256) = 1;
  }
  *(_OWORD *)(v4 + 264) = v27;
  *(void *)(v4 + 280) = v28;
  uint64_t v9 = *((void *)&v28 + 1);
  long long v27 = 0u;
  long long v28 = 0u;
  *(void *)(v4 + 288) = v9;
  *(unsigned char *)(v4 + 296) = 0;
  *(unsigned char *)(v4 + 320) = 0;
  if (v32)
  {
    *(void *)(v4 + 296) = v29;
    uint64_t v10 = v30;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    *(void *)(v4 + 304) = v10;
    uint64_t v11 = v31;
    uint64_t v31 = 0;
    *(void *)(v4 + 31objc_destroyWeak(this + 2) = v11;
    *(unsigned char *)(v4 + 320) = 1;
  }
  uint64_t v12 = v33;
  uint64_t v33 = 0;
  *(void *)(v4 + 328) = v12;
  *(unsigned char *)(v4 + 336) = v34;
  uint64_t v35 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t v14 = v35;
  uint64_t v35 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v18, v13);
  return 0;
}

uint64_t WebKit::PCM::PersistentStore::close(uint64_t a1, uint64_t *a2)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v4 = &unk_1EE9CA000;
  v4[1] = a1;
  void v4[2] = a1;
  v4[3] = v3;
  long long v6 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::PCM::Database::needsUpdatedSchema(WebKit::PCM::Database *this)
{
  return 0;
}

uint64_t WebKit::PrivateClickMeasurementManager::setOverrideTimerForTesting(uint64_t this, char a2)
{
  *(unsigned char *)(this + 48) = a2;
  return this;
}

void WebKit::PCM::ManagerProxy::~ManagerProxy(WebKit::PCM::ManagerProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9C97C8;
  uint64_t v3 = (WebKit::PCM::ManagerProxy *)((char *)this + 8);
  *((void *)this + 1) = &unk_1EE9BB9A0;
  uint64_t v4 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::~ConnectionToMachService(v3, a2);
}

{
  WebKit::Daemon::Connection *v3;
  unsigned int *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE9C97C8;
  uint64_t v3 = (WebKit::PCM::ManagerProxy *)((char *)this + 8);
  *((void *)this + 1) = &unk_1EE9BB9A0;
  uint64_t v4 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::~ConnectionToMachService(v3, a2);

  WTF::fastFree(this, v5);
}

unsigned int *WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = (WTF::StringImpl **)(*(void *)a1 + 8);
    do
    {
      long long v6 = *v5;
      *uint64_t v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  long long v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void std::__optional_storage_base<WTF::URL,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::URL,false>>(WTF::StringImpl *a1, unsigned __int8 *a2)
{
  if (*((unsigned __int8 *)a1 + 40) == a2[40])
  {
    if (*((unsigned char *)a1 + 40))
    {
      WTF::URL::operator=((uint64_t)a1, (uint64_t)a2);
    }
  }
  else if (*((unsigned char *)a1 + 40))
  {
    std::__optional_destruct_base<WTF::URL,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    WTF::URL::URL((uint64_t)a1, (uint64_t *)a2);
    *(unsigned char *)(v2 + 40) = 1;
  }
}

WTF::StringImpl *std::__optional_destruct_base<WTF::URL,false>::reset[abi:sn180100](WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (*((unsigned char *)result + 40))
  {
    uint64_t v2 = result;
    uint64_t result = *(WTF::StringImpl **)result;
    *(void *)uint64_t v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *((unsigned char *)v2 + 40) = 0;
  }
  return result;
}

void WebKit::PrivateClickMeasurementManager::TestingFraudPreventionValues::~TestingFraudPreventionValues(WebKit::PrivateClickMeasurementManager::TestingFraudPreventionValues *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  long long v6 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  long long v7 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
}

void _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit3PCM8DatabaseES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSL_(uint64_t a1, void *a2)
{
  uint64_t v2 = qword_1EB3598D0;
  if (qword_1EB3598D0)
  {
    int v3 = *(_DWORD *)(qword_1EB3598D0 - 4);
    if (v3)
    {
      int v4 = 0;
      unsigned int v5 = v3 - 1;
      do
      {
        long long v6 = (unsigned int **)(v2 + 8 * v5);
        if ((unint64_t)*v6 + 1 >= 2 && !*((void *)*v6 + 1))
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v6, a2);
          ++v4;
        }
      }
      while ((unint64_t)v5--);
      uint64_t v8 = qword_1EB3598D0;
      if (v4)
      {
        *(_DWORD *)(qword_1EB3598D0 - 16) += v4;
        if (qword_1EB3598D0) {
          int v9 = *(_DWORD *)(qword_1EB3598D0 - 12);
        }
        else {
          int v9 = 0;
        }
        *(_DWORD *)(qword_1EB3598D0 - 1objc_destroyWeak(this + 2) = v9 - v4;
        uint64_t v8 = qword_1EB3598D0;
      }
      if (v8)
      {
        unsigned int v10 = *(_DWORD *)(v8 - 4);
        if (6 * *(_DWORD *)(v8 - 12) < v10 && v10 >= 9)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&qword_1EB3598D0);
        }
      }
    }
  }
}

unint64_t WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      int v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      void v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        unint64_t v8 = (WTF *)((char *)v4 + 16 * v5);
        unint64_t v9 = v4;
        do
        {
          *(unsigned char *)unint64_t v7 = *(unsigned char *)v9;
          uint64_t v10 = *((void *)v9 + 1);
          *((void *)v9 + 1) = 0;
          *((void *)v7 + 1) = v10;
          uint64_t result = (unsigned int *)*((void *)v9 + 1);
          *((void *)v9 + 1) = 0;
          if (result)
          {
            if (*result == 2) {
              uint64_t result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            }
            else {
              *result -= 2;
            }
          }
          unint64_t v9 = (WTF *)((char *)v9 + 16);
          v7 += 4;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          void v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int8x16_t **a2, int8x16_t **a3)
{
  uint64_t v5 = *((void *)a1 + 1);
  if (!v5 && (uint64_t v5 = *(void *)a1) == 0 || (*(unsigned char *)(v5 + 16) & 4) != 0)
  {
    uint64_t result = (char *)MEMORY[0x19972DE60]();
    if (!result) {
      return result;
    }
    char v32 = result;
    uint64_t v33 = a2[1];
    uint64_t v34 = v33;
    uint64_t v35 = *a3;
    size_t v36 = *((unsigned int *)a3 + 2);
    if (v33)
    {
      char v37 = *a2;
      if (v33 == 1)
      {
        *uint64_t result = v37->i8[0];
        if (!v36) {
          return result;
        }
        goto LABEL_23;
      }
      uint64_t result = (char *)memcpy(result, v37, a2[1]);
    }
    if (!v36) {
      return result;
    }
LABEL_23:
    uint64_t result = &v32[v34];
    if (v36 == 1)
    {
      *uint64_t result = v35->i8[0];
    }
    else
    {
      return (char *)memcpy(result, v35, v36);
    }
    return result;
  }
  uint64_t result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    unint64_t v7 = *a2;
    unint64_t v8 = *a3;
    uint64_t v9 = *((unsigned int *)a3 + 2);
    uint64_t v10 = &result[2 * a2[1]];
    uint64_t v11 = (unint64_t)a2[1] & 0xFFFFFFC0;
    if (v11)
    {
      uint64_t v12 = &result[2 * v11];
      long long v13 = 0uLL;
      do
      {
        v39.val[0] = *v7;
        int8x16_t v14 = v7[1];
        v41.val[0] = v7[2];
        int8x16_t v15 = v7[3];
        v7 += 4;
        int8x16_t v16 = v15;
        v41.val[1] = 0uLL;
        v43.val[0] = v14;
        v39.val[1] = 0uLL;
        uint64_t v17 = result;
        vst2q_s8(v17, v39);
        v17 += 32;
        v43.val[1] = 0uLL;
        vst2q_s8(v17, v43);
        char v18 = result + 64;
        vst2q_s8(v18, v41);
        uint64_t v19 = result + 96;
        vst2q_s8(v19, *(int8x16x2_t *)(&v13 - 1));
        result += 128;
      }
      while (result != v12);
      uint64_t result = v12;
    }
    while (result != v10)
    {
      __int16 v20 = v7->u8[0];
      unint64_t v7 = (int8x16_t *)((char *)v7 + 1);
      *(_WORD *)uint64_t result = v20;
      result += 2;
    }
    uint64_t v21 = &v10[2 * v9];
    uint64_t v22 = v9 & 0xFFFFFFC0;
    if (v22)
    {
      long long v23 = &v10[2 * v22];
      long long v24 = 0uLL;
      do
      {
        v40.val[0] = *v8;
        int8x16_t v25 = v8[1];
        v42.val[0] = v8[2];
        int8x16_t v26 = v8[3];
        v8 += 4;
        int8x16_t v27 = v26;
        v42.val[1] = 0uLL;
        v44.val[0] = v25;
        v40.val[1] = 0uLL;
        long long v28 = v10;
        vst2q_s8(v28, v40);
        v28 += 32;
        v44.val[1] = 0uLL;
        vst2q_s8(v28, v44);
        uint64_t v29 = v10 + 64;
        vst2q_s8(v29, v42);
        uint64_t v30 = v10 + 96;
        vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
        v10 += 128;
      }
      while (v10 != v23);
      uint64_t v10 = v23;
    }
    while (v10 != v21)
    {
      __int16 v31 = v8->u8[0];
      unint64_t v8 = (int8x16_t *)((char *)v8 + 1);
      *(_WORD *)uint64_t v10 = v31;
      v10 += 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::PrivateClickMeasurementManager::*&)(void),WebKit::PrivateClickMeasurementManager*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  unsigned int v2 = (uint64_t (*)(void *))a1[1];
  unint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::storeUnattributed(WebCore::PrivateClickMeasurement &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PrivateClickMeasurement &,WTF::String const&>::~CallableWrapper(void *a1, void *a2)
{
  unint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C9950;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::storeUnattributed(WebCore::PrivateClickMeasurement &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PrivateClickMeasurement &,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C9950;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::storeUnattributed(WebCore::PrivateClickMeasurement &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PrivateClickMeasurement &,WTF::String const&>::call(WTF::StringImpl *result, WebCore::PrivateClickMeasurement *this, WTF::String *a3)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)result + 1);
  if (!v3 || !*(void *)(v3 + 8) || !*(void *)a3 || !*(_DWORD *)(*(void *)a3 + 4)) {
    return result;
  }
  uint64_t v5 = *((void *)result + 2);
  if (*(unsigned char *)(v5 + 344))
  {
    WTF::String::operator=((uint64_t *)this + 33, (WTF::StringImpl **)(v5 + 280));
LABEL_7:
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(void))(**(void **)(v5 + 184) + 24))(*(void *)(v5 + 184));
    if (!result) {
      return result;
    }
    unsigned __int8 v54 = 0;
    long long v52 = 0;
    WTF::URL::invalidate((WTF::URL *)&v52);
    WebCore::PrivateClickMeasurement::tokenSignatureURL((uint64_t *)buf, this);
    LOBYTE(v48) = 0;
    char v51 = 0;
    if (LOBYTE(v57[0]))
    {
      uint64_t v6 = *(WTF::StringImpl **)buf;
      if (*(void *)buf) {
        **(_DWORD **)buf += 2;
      }
      char v48 = v6;
      long long v49 = *(_OWORD *)&buf[8];
      long long v50 = v56;
      char v51 = 1;
    }
    WebKit::PrivateClickMeasurementManager::configureForTokenSigning(v5, &v54, (uint64_t)&v52, (uint64_t)&v48);
    if (v51)
    {
      unint64_t v8 = v48;
      char v48 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
    if (LOBYTE(v57[0]))
    {
      uint64_t v12 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v7);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    uint64_t result = v52;
    if (!v52) {
      return result;
    }
    if (!*((_DWORD *)v52 + 1) || (v53 & 1) == 0)
    {
      long long v52 = 0;
LABEL_83:
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      *(_DWORD *)result -= 2;
      return result;
    }
    long long v13 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_INFO, "About to fire a unlinkable token signing request for the click source.", buf, 2u);
    }
    uint64_t v14 = *(void *)(v5 + 184);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    char v47 = *(WTF::StringImpl **)buf;
    (*(void (**)(uint64_t, void, WTF::StringImpl **))(*(void *)v14 + 16))(v14, 0, &v47);
    int8x16_t v16 = v47;
    char v47 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    WebCore::PrivateClickMeasurement::tokenSignatureJSON((uint64_t *)&v46, this);
    uint64_t v21 = v46;
    uint64_t v46 = 0;
    char v47 = v21;
    int v22 = v54;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
    long long v23 = *(atomic_uint **)(v5 + 8);
    if (v23) {
      atomic_fetch_add(v23, 1u);
    }
    *(void *)buf = v23;
    *(void *)&uint8_t buf[8] = v5;
    buf[16] = *(unsigned char *)this;
    long long v24 = *(_OWORD *)((char *)this + 8);
    *((void *)this + 1) = 0;
    *((void *)this + objc_destroyWeak(this + 2) = 0;
    long long v56 = v24;
    v57[0] = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)v57 + 9) = *(_OWORD *)((char *)this + 33);
    v58[0] = 0;
    char v59 = 0;
    if (*((unsigned char *)this + 184))
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v58, (uint64_t)this + 56);
      char v59 = 1;
    }
    long long v25 = *((_OWORD *)this + 13);
    long long v60 = *((_OWORD *)this + 12);
    long long v61 = v25;
    LOBYTE(v6objc_destroyWeak(this + 2) = 0;
    char v63 = 0;
    if (*((unsigned char *)this + 232))
    {
      uint64_t v26 = *((void *)this + 28);
      *((void *)this + 28) = 0;
      uint64_t v62 = v26;
      char v63 = 1;
    }
    long long v27 = *((_OWORD *)this + 15);
    long long v28 = *((_OWORD *)this + 16);
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    long long v64 = v27;
    long long v65 = v28;
    LOBYTE(v66) = 0;
    char v68 = 0;
    if (*((unsigned char *)this + 296))
    {
      long long v29 = *((_OWORD *)this + 17);
      *((void *)this + 34) = 0;
      *((void *)this + 35) = 0;
      long long v66 = v29;
      uint64_t v30 = *((void *)this + 36);
      *((void *)this + 36) = 0;
      uint64_t v67 = v30;
      char v68 = 1;
    }
    uint64_t v31 = *((void *)this + 38);
    *((void *)this + 38) = 0;
    uint64_t v69 = v31;
    uint64_t v32 = WTF::fastMalloc((WTF *)0x150);
    *(void *)uint64_t v32 = &unk_1EE9C99C8;
    *(_OWORD *)(v32 + 8) = *(_OWORD *)buf;
    *(unsigned char *)(v32 + 24) = buf[16];
    *(void *)(v32 + 3objc_destroyWeak(this + 2) = v56;
    uint64_t v33 = *((void *)&v56 + 1);
    *(void *)buf = 0;
    long long v56 = 0uLL;
    *(void *)(v32 + 40) = v33;
    long long v34 = v57[0];
    *(_OWORD *)(v32 + 57) = *(_OWORD *)((char *)v57 + 9);
    *(_OWORD *)(v32 + 48) = v34;
    *(unsigned char *)(v32 + 80) = 0;
    *(unsigned char *)(v32 + 208) = 0;
    if (v59)
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v32 + 80, (uint64_t)v58);
      *(unsigned char *)(v32 + 208) = 1;
    }
    long long v35 = v60;
    *(_OWORD *)(v32 + 23objc_destroyWeak(this + 2) = v61;
    *(_OWORD *)(v32 + 216) = v35;
    *(unsigned char *)(v32 + 248) = 0;
    *(unsigned char *)(v32 + 256) = 0;
    if (v63)
    {
      uint64_t v36 = v62;
      uint64_t v62 = 0;
      *(void *)(v32 + 248) = v36;
      *(unsigned char *)(v32 + 256) = 1;
    }
    *(_OWORD *)(v32 + 264) = v64;
    *(void *)(v32 + 280) = v65;
    uint64_t v37 = *((void *)&v65 + 1);
    long long v64 = 0u;
    long long v65 = 0u;
    *(void *)(v32 + 288) = v37;
    *(unsigned char *)(v32 + 296) = 0;
    *(unsigned char *)(v32 + 320) = 0;
    if (v68)
    {
      *(void *)(v32 + 296) = v66;
      uint64_t v38 = *((void *)&v66 + 1);
      long long v66 = 0uLL;
      *(void *)(v32 + 304) = v38;
      uint64_t v39 = v67;
      uint64_t v67 = 0;
      *(void *)(v32 + 31objc_destroyWeak(this + 2) = v39;
      *(unsigned char *)(v32 + 320) = 1;
    }
    uint64_t v40 = v69;
    uint64_t v69 = 0;
    *(void *)(v32 + 328) = v40;
    uint64_t v45 = v32;
    WebKit::PCM::NetworkLoader::start((WTF::URL *)&v52, &v47, v22 != 0, &v45);
    uint64_t v42 = v45;
    uint64_t v45 = 0;
    if (v42) {
      (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
    }
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&buf[16], v41);
    uint64_t v11 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (!v11) {
      goto LABEL_74;
    }
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF);
    if (add != 1) {
      goto LABEL_74;
    }
    goto LABEL_88;
  }
  WebCore::PrivateClickMeasurement::calculateAndUpdateSourceUnlinkableToken((uint64_t *)&v48, this, a3);
  if (!(_BYTE)v49) {
    goto LABEL_7;
  }
  uint64_t v9 = qword_1EB3582F8;
  if (!os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO)) {
    goto LABEL_41;
  }
  WTF::String::utf8();
  if (v52) {
    uint64_t v10 = (char *)v52 + 16;
  }
  else {
    uint64_t v10 = 0;
  }
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = v10;
  _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_INFO, "Got the following error in calculateAndUpdateSourceUnlinkableToken(): '%{public}s", buf, 0xCu);
  uint64_t v11 = v52;
  long long v52 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1) {
      uint64_t v11 = (WTF::StringImpl *)WTF::fastFree(v11, v7);
    }
    else {
      --*(_DWORD *)v11;
    }
  }
  unsigned int add = v49;
  if ((_BYTE)v49)
  {
LABEL_41:
    uint64_t v18 = *(void *)(v5 + 184);
    uint64_t v19 = v48;
    if (v48) {
      *(_DWORD *)v48 += 2;
    }
    char v47 = v19;
    *(void *)buf = "[Private Click Measurement] ";
    *(void *)&uint8_t buf[8] = 29;
    uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)buf, (uint64_t *)&v47, &v52);
    if (!v52)
    {
      __break(0xC471u);
      return result;
    }
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v18 + 16))(v18, 2, &v52);
    __int16 v20 = v52;
    long long v52 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v7);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    uint64_t result = v47;
    char v47 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if ((_BYTE)v49)
    {
      uint64_t result = v48;
      char v48 = 0;
      if (result) {
        goto LABEL_83;
      }
    }
    return result;
  }
  __break(1u);
LABEL_88:
  atomic_store(add, (unsigned int *)v11);
  WTF::fastFree(v11, v7);
LABEL_74:
  int8x16x2_t v43 = v47;
  char v47 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v43;
    }
  }
  int8x16x2_t v44 = v46;
  uint64_t v46 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v44;
    }
  }
  uint64_t result = v52;
  long long v52 = 0;
  if (result) {
    goto LABEL_83;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getTokenPublicKey(WebCore::PrivateClickMeasurement &&,WebCore::PCM::AttributionReportEndpoint,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::Function<void ()(WebCore::PrivateClickMeasurement &,WTF::String const&)> &&)::$_0,void,WTF::String const,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> const&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C9978;
  uint64_t v3 = a1[42];
  a1[42] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  uint64_t v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getTokenPublicKey(WebCore::PrivateClickMeasurement &&,WebCore::PCM::AttributionReportEndpoint,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::Function<void ()(WebCore::PrivateClickMeasurement &,WTF::String const&)> &&)::$_0,void,WTF::String const,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> const&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C9978;
  uint64_t v3 = a1[42];
  a1[42] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  uint64_t v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }

  return WTF::fastFree((WTF *)a1, v4);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getTokenPublicKey(WebCore::PrivateClickMeasurement &&,WebCore::PCM::AttributionReportEndpoint,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::Function<void ()(WebCore::PrivateClickMeasurement &,WTF::String const&)> &&)::$_0,void,WTF::String const,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> const&>::call(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3)
{
  uint64_t v3 = *((void *)result + 1);
  if (!v3 || !*(void *)(v3 + 8)) {
    return result;
  }
  int v4 = result;
  uint64_t v5 = *((void *)result + 2);
  uint64_t v6 = *a2;
  if (*a2)
  {
    uint64_t v7 = *(void *)(v5 + 184);
    *(_DWORD *)v6 += 2;
    int8x16_t v15 = v6;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[Private Click Measurement] Received error: '", 46, (uint64_t *)&v15, (uint64_t)"' for token public key request.", 32, &v16);
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v7 + 16))(v7, 2, &v16);
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)(v5 + 184);
  if (!*a3)
  {
    WTF::tryMakeString<WTF::ASCIILiteral>(&v16, "[Private Click Measurement] JSON response is empty for token public key request.", 81);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v10 + 16))(v10, 2, &v16);
      uint64_t result = v16;
      int8x16_t v16 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x198C2420CLL);
  }
  WTF::tryMakeString<WTF::ASCIILiteral>(&v16, "[Private Click Measurement] Got JSON response for token public key request.", 76);
  if (!v16) {
    goto LABEL_24;
  }
  (*(void (**)(uint64_t, void, WTF::StringImpl **))(*(void *)v10 + 16))(v10, 0, &v16);
  uint64_t v12 = v16;
  int8x16_t v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  long long v13 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v16, v13, (const WTF::String *)&v15);
  (*(void (**)(void, uint64_t, WTF::StringImpl **))(**((void **)v4 + 42) + 16))(*((void *)v4 + 42), (uint64_t)v4 + 24, &v16);
LABEL_15:
  uint64_t v14 = v16;
  int8x16_t v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v8);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t result = v15;
  int8x16_t v15 = 0;
  if (result)
  {
LABEL_20:
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getTokenPublicKey(WebCore::PCM::AttributionTriggerData &&,WebCore::PCM::AttributionReportEndpoint,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::Function<void ()(WebCore::PCM::AttributionTriggerData &,WTF::String const&)> &&)::$_0,void,WTF::String const,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> const&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C99A0;
  uint64_t v3 = a1[19];
  a1[19] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 15), a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10), v4);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 8), v5);
  std::optional<WebCore::PublicSuffix>::~optional((uint64_t)(a1 + 6), v6);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 4), v7);
  uint64_t v9 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getTokenPublicKey(WebCore::PCM::AttributionTriggerData &&,WebCore::PCM::AttributionReportEndpoint,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::Function<void ()(WebCore::PCM::AttributionTriggerData &,WTF::String const&)> &&)::$_0,void,WTF::String const,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> const&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C99A0;
  uint64_t v3 = *((void *)a1 + 19);
  *((void *)a1 + 19) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 120, a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80, v4);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 64, v5);
  std::optional<WebCore::PublicSuffix>::~optional((uint64_t)a1 + 48, v6);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 32, v7);
  uint64_t v9 = (unsigned int *)*((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }

  return WTF::fastFree(a1, v8);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getTokenPublicKey(WebCore::PCM::AttributionTriggerData &&,WebCore::PCM::AttributionReportEndpoint,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::Function<void ()(WebCore::PCM::AttributionTriggerData &,WTF::String const&)> &&)::$_0,void,WTF::String const,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> const&>::call(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3)
{
  uint64_t v3 = *((void *)result + 1);
  if (!v3 || !*(void *)(v3 + 8)) {
    return result;
  }
  int v4 = result;
  uint64_t v5 = *((void *)result + 2);
  uint64_t v6 = *a2;
  if (*a2)
  {
    uint64_t v7 = *(void *)(v5 + 184);
    *(_DWORD *)v6 += 2;
    int8x16_t v15 = v6;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[Private Click Measurement] Received error: '", 46, (uint64_t *)&v15, (uint64_t)"' for token public key request.", 32, &v16);
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v7 + 16))(v7, 2, &v16);
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)(v5 + 184);
  if (!*a3)
  {
    WTF::tryMakeString<WTF::ASCIILiteral>(&v16, "[Private Click Measurement] JSON response is empty for token public key request.", 81);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v10 + 16))(v10, 2, &v16);
      uint64_t result = v16;
      int8x16_t v16 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x198C245E4);
  }
  WTF::tryMakeString<WTF::ASCIILiteral>(&v16, "[Private Click Measurement] Got JSON response for token public key request.", 76);
  if (!v16) {
    goto LABEL_24;
  }
  (*(void (**)(uint64_t, void, WTF::StringImpl **))(*(void *)v10 + 16))(v10, 0, &v16);
  uint64_t v12 = v16;
  int8x16_t v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  long long v13 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v16, v13, (const WTF::String *)&v15);
  (*(void (**)(void, uint64_t, WTF::StringImpl **))(**((void **)v4 + 19) + 16))(*((void *)v4 + 19), (uint64_t)v4 + 24, &v16);
LABEL_15:
  uint64_t v14 = v16;
  int8x16_t v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v8);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t result = v15;
  int8x16_t v15 = 0;
  if (result)
  {
LABEL_20:
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned char *WTF::tryMakeString<WTF::ASCIILiteral>(unsigned char *result, unsigned char *a2, uint64_t a3)
{
  if (a3) {
    size_t v3 = a3 - 1;
  }
  else {
    size_t v3 = 0;
  }
  if (v3 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198C24698);
  }
  int v4 = result;
  if (v3)
  {
    uint64_t result = (unsigned char *)WTF::tryFastCompactMalloc((WTF *)(v3 + 20));
    uint64_t v6 = v7;
    if (v7)
    {
      uint64_t result = (unsigned char *)(v7 + 20);
      *(_DWORD *)uint64_t v7 = 2;
      *(_DWORD *)(v7 + 4) = v3;
      *(void *)(v7 + 8) = v7 + 20;
      *(_DWORD *)(v7 + 16) = 4;
      if (v3 == 1) {
        *uint64_t result = *a2;
      }
      else {
        uint64_t result = memcpy(result, a2, v3);
      }
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
  }
  *int v4 = v6;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForSource(WebCore::PrivateClickMeasurement &&)::$_0,void,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> const&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C99C8;
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForSource(WebCore::PrivateClickMeasurement &&)::$_0,void,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> const&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C99C8;
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForSource(WebCore::PrivateClickMeasurement &&)::$_0,void,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> const&>::call(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3)
{
  v29[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)result + 1);
  if (!v3) {
    return result;
  }
  if (!*(void *)(v3 + 8)) {
    return result;
  }
  int v4 = result;
  uint64_t v5 = *((void *)result + 2);
  uint64_t result = WebKit::PrivateClickMeasurementManager::getSignatureBase64URLFromTokenSignatureResponse(&v26, v5, *a2, *a3);
  if (!v27) {
    return result;
  }
  if (*(unsigned char *)(v5 + 344))
  {
    long long buf = 0uLL;
    v29[0] = 0;
    WTF::String::operator=((uint64_t *)&buf, (WTF::StringImpl **)(v5 + 288));
    if (*(unsigned char *)(v5 + 344))
    {
      WTF::String::operator=((uint64_t *)&buf + 1, (WTF::StringImpl **)(v5 + 296));
      if (*(unsigned char *)(v5 + 344))
      {
        WTF::String::operator=((uint64_t *)v29, (WTF::StringImpl **)(v5 + 304));
        WebCore::PrivateClickMeasurement::setSourceSecretToken();
        uint64_t v7 = v29[0];
        v29[0] = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2) {
            WTF::StringImpl::destroy(v7, v6);
          }
          else {
            *(_DWORD *)v7 -= 2;
          }
        }
        uint64_t v12 = (WTF::StringImpl *)*((void *)&buf + 1);
        *((void *)&buf + 1) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v6);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        long long v13 = (WTF::StringImpl *)buf;
        *(void *)&long long buf = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v6);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
        goto LABEL_27;
      }
    }
LABEL_57:
    __break(1u);
  }
  WebCore::PrivateClickMeasurement::calculateAndUpdateSourceSecretToken((uint64_t *)&v24, (WTF::StringImpl *)((char *)v4 + 24), (const WTF::String *)&v26);
  if (v25)
  {
    unint64_t v8 = qword_1EB3582F8;
    if (!os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO)) {
      goto LABEL_41;
    }
    WTF::String::utf8();
    if (v23) {
      uint64_t v9 = (char *)v23 + 16;
    }
    else {
      uint64_t v9 = 0;
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_INFO, "Got the following error in calculateAndUpdateSourceSecretToken(): '%{public}s", (uint8_t *)&buf, 0xCu);
    uint64_t v11 = v23;
    long long v23 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1) {
        WTF::fastFree(v11, v10);
      }
      else {
        --*(_DWORD *)v11;
      }
    }
    if (v25)
    {
LABEL_41:
      uint64_t v19 = *(void *)(v5 + 184);
      __int16 v20 = v24;
      if (v24) {
        *(_DWORD *)v24 += 2;
      }
      int v22 = v20;
      *(void *)&long long buf = "[Private Click Measurement] ";
      *((void *)&buf + 1) = 29;
      uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&buf, (uint64_t *)&v22, &v23);
      if (!v23)
      {
        __break(0xC471u);
        return result;
      }
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v19 + 16))(v19, 2, &v23);
      uint64_t v21 = v23;
      long long v23 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v18);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      uint64_t result = v22;
      int v22 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (v25)
      {
        uint64_t result = v24;
        long long v24 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      goto LABEL_33;
    }
    goto LABEL_57;
  }
LABEL_27:
  uint64_t v14 = *(void *)(v5 + 184);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, void, long long *))(*(void *)v14 + 16))(v14, 0, &buf);
  int8x16_t v16 = (WTF::StringImpl *)buf;
  *(void *)&long long buf = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v17 = &unk_1EE9C99F0;
  *(void *)&long long buf = v17;
  WebKit::PrivateClickMeasurementManager::initializeStore(v5);
  (*(void (**)(void, uint64_t, void, long long *))(**(void **)(v5 + 168) + 16))(*(void *)(v5 + 168), (uint64_t)v4 + 24, 0, &buf);
  uint64_t result = (WTF::StringImpl *)buf;
  *(void *)&long long buf = 0;
  if (result) {
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
LABEL_33:
  if (v27)
  {
    uint64_t result = v26;
    uint64_t v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0,void,WebCore::PCM::AttributionTriggerData &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0>> const&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C9A18;
  WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0,void,WebCore::PCM::AttributionTriggerData &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0>> const&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C9A18;
  WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0::~$_0((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0,void,WebCore::PCM::AttributionTriggerData &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0>> const&>::call(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)result + 1);
  if (!v3) {
    return result;
  }
  if (!*(void *)(v3 + 8)) {
    return result;
  }
  int v4 = result;
  uint64_t v5 = *((void *)result + 2);
  uint64_t result = WebKit::PrivateClickMeasurementManager::getSignatureBase64URLFromTokenSignatureResponse(&v31, v5, *a2, *a3);
  if (!v32) {
    return result;
  }
  if (!*((unsigned char *)v4 + 128))
  {
    uint64_t v7 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_INFO, "Destination unlinkable token is missing.", buf, 2u);
    }
    uint64_t v8 = *(void *)(v5 + 184);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v8 + 16))(v8, 2, buf);
    uint64_t result = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    goto LABEL_61;
  }
  WebCore::PrivateClickMeasurement::calculateAndUpdateDestinationSecretToken();
  if (!v30)
  {
    uint64_t v10 = *(void *)(v5 + 184);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, void, long long *))(*(void *)v10 + 16))(v10, 0, &v33);
    uint64_t v12 = (WTF::StringImpl *)v33;
    *(void *)&long long v33 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    if (!v30)
    {
      if (*((unsigned char *)v4 + 160))
      {
        WTF::String::operator=((uint64_t *)v4 + 17, (WTF::StringImpl **)buf);
        WTF::String::operator=((uint64_t *)v4 + 18, &v28);
        WTF::String::operator=((uint64_t *)v4 + 19, &v29);
      }
      else
      {
        __int16 v20 = *(WTF::StringImpl **)buf;
        if (*(void *)buf) {
          **(_DWORD **)buf += 2;
        }
        *((void *)v4 + 17) = v20;
        uint64_t v21 = v28;
        if (v28) {
          *(_DWORD *)v28 += 2;
        }
        *((void *)v4 + 18) = v21;
        int v22 = v29;
        if (v29) {
          *(_DWORD *)v29 += 2;
        }
        *((void *)v4 + 19) = v22;
        *((unsigned char *)v4 + 160) = 1;
      }
      if (*(unsigned char *)(v5 + 160)) {
        uint64_t v23 = v5 + 152;
      }
      else {
        uint64_t v23 = (uint64_t)v4 + 168;
      }
      uint64_t result = (WTF::StringImpl *)WebKit::PrivateClickMeasurementManager::attribute(v5, (uint64_t)v4 + 24, (uint64_t)v4 + 32, (uint64_t)v4 + 40, v23);
      goto LABEL_59;
    }
    goto LABEL_67;
  }
  if (v30 != 1)
  {
LABEL_67:
    uint64_t result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_68:
    __break(0xC471u);
    return result;
  }
  uint64_t v6 = *(WTF::StringImpl **)buf;
  if (*(void *)buf && *(_DWORD *)(*(void *)buf + 4))
  {
    **(_DWORD **)buf += 2;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v6 = (WTF::StringImpl *)v33;
  }
  uint64_t v26 = v6;
  long long v13 = qword_1EB3582F8;
  if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
  {
    WTF::String::utf8();
    if (v25) {
      uint64_t v14 = (char *)v25 + 16;
    }
    else {
      uint64_t v14 = 0;
    }
    LODWORD(v33) = 136446210;
    *(void *)((char *)&v33 + 4) = v14;
    _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_INFO, "Got the following error in calculateAndUpdateSourceSecretToken(): '%{public}s", (uint8_t *)&v33, 0xCu);
    int8x16_t v16 = v25;
    char v25 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1) {
        WTF::fastFree(v16, v15);
      }
      else {
        --*(_DWORD *)v16;
      }
    }
    uint64_t v6 = v26;
  }
  uint64_t v17 = *(void *)(v5 + 184);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  long long v24 = v6;
  *(void *)&long long v33 = "[Private Click Measurement] ";
  *((void *)&v33 + 1) = 29;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v33, (uint64_t *)&v24, &v25);
  if (!v25) {
    goto LABEL_68;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v17 + 16))(v17, 2, &v25);
  uint64_t v18 = v25;
  char v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v9);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  uint64_t v19 = v24;
  long long v24 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v9);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_59:
  if (v30 != -1) {
    uint64_t result = (WTF::StringImpl *)((uint64_t (*)(long long *, uint8_t *))off_1EE9C9A30[v30])(&v33, buf);
  }
LABEL_61:
  if (v32)
  {
    uint64_t result = v31;
    uint64_t v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM22DestinationSecretTokenEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 2);
  *((void *)a2 + objc_destroyWeak(this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM22DestinationSecretTokenEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::handleAttribution(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::RegistrableDomain &&,WTF::URL const,WTF::String const&)::$_0,void,WebCore::PCM::AttributionTriggerData &,WTF::String>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C9A78;
  uint64_t v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::handleAttribution(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::RegistrableDomain &&,WTF::URL const,WTF::String const&)::$_0,void,WebCore::PCM::AttributionTriggerData &,WTF::String>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C9A78;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::handleAttribution(WebCore::PCM::AttributionTriggerData &&,WTF::URL const&,WebCore::RegistrableDomain &&,WTF::URL const,WTF::String const&)::$_0,void,WebCore::PCM::AttributionTriggerData &,WTF::String>::call(uint64_t *result, uint64_t a2, WebCore::PrivateClickMeasurement *this)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = result[1];
  if (!v3 || !*(void *)(v3 + 8)) {
    return result;
  }
  int v4 = result;
  uint64_t v5 = result[2];
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    if (*(unsigned char *)(v5 + 344))
    {
      if (!*(unsigned char *)(a2 + 88))
      {
        *(_OWORD *)(a2 + 7objc_destroyWeak(this + 2) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(unsigned char *)(a2 + 88) = 1;
      }
      return WTF::String::operator=((uint64_t *)(a2 + 80), (WTF::StringImpl **)(v5 + 312));
    }
    WebCore::PrivateClickMeasurement::calculateAndUpdateDestinationUnlinkableToken((uint64_t *)&cf, this, (const WTF::String *)a2);
    if (v64)
    {
      if (v64 == 1)
      {
        uint64_t v10 = (WTF::StringImpl *)cf;
        if (cf && *((_DWORD *)cf + 1))
        {
          *(_DWORD *)cf += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          uint64_t v10 = *(WTF::StringImpl **)buf;
        }
        char v68 = v10;
        uint64_t v17 = qword_1EB3582F8;
        if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
        {
          WTF::String::utf8();
          if (v72) {
            uint64_t v18 = (char *)v72 + 16;
          }
          else {
            uint64_t v18 = 0;
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v18;
          _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_INFO, "Got the following error in calculateAndUpdateDestinationUnlinkableToken(): '%{public}s", buf, 0xCu);
          __int16 v20 = v72;
          unsigned int v72 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 1) {
              WTF::fastFree(v20, v19);
            }
            else {
              --*(_DWORD *)v20;
            }
          }
          uint64_t v10 = v68;
        }
        uint64_t v27 = *(void *)(v5 + 184);
        if (v10) {
          *(_DWORD *)v10 += 2;
        }
        uint64_t v67 = v10;
        *(void *)long long buf = "[Private Click Measurement] ";
        *(void *)&uint8_t buf[8] = 29;
        uint64_t result = (uint64_t *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)buf, (uint64_t *)&v67, &v72);
        if (v72)
        {
          (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v27 + 16))(v27, 2, &v72);
          long long v28 = v72;
          unsigned int v72 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v25);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          long long v29 = v67;
          uint64_t v67 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v25);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          uint64_t result = (uint64_t *)v68;
          char v68 = 0;
          if (!result) {
            goto LABEL_79;
          }
          goto LABEL_76;
        }
      }
      else
      {
        uint64_t result = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      }
      __break(0xC471u);
      return result;
    }
    CFTypeRef v11 = cf;
    if (*(unsigned char *)(a2 + 88))
    {
      if (cf) {
        CFRetain(cf);
      }
      uint64_t v12 = *(const void **)(a2 + 56);
      *(void *)(a2 + 56) = v11;
      if (v12) {
        CFRelease(v12);
      }
      CFTypeRef v13 = v61;
      if (v61) {
        CFRetain(v61);
      }
      uint64_t v14 = *(const void **)(a2 + 64);
      *(void *)(a2 + 64) = v13;
      if (v14) {
        CFRelease(v14);
      }
      CFTypeRef v15 = v62;
      if (v62) {
        CFRetain(v62);
      }
      int8x16_t v16 = *(const void **)(a2 + 72);
      *(void *)(a2 + 7objc_destroyWeak(this + 2) = v15;
      if (v16) {
        CFRelease(v16);
      }
      WTF::String::operator=((uint64_t *)(a2 + 80), &v63);
    }
    else
    {
      *(void *)(a2 + 56) = cf;
      if (v11) {
        CFRetain(v11);
      }
      CFTypeRef v21 = v61;
      *(void *)(a2 + 64) = v61;
      if (v21) {
        CFRetain(v21);
      }
      CFTypeRef v22 = v62;
      *(void *)(a2 + 7objc_destroyWeak(this + 2) = v62;
      if (v22) {
        CFRetain(v22);
      }
      uint64_t v23 = v63;
      if (v63) {
        *(_DWORD *)v63 += 2;
      }
      *(void *)(a2 + 80) = v23;
      *(unsigned char *)(a2 + 88) = 1;
    }
    uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v5 + 184) + 24))(*(void *)(v5 + 184));
    if (!result) {
      goto LABEL_79;
    }
    unsigned __int8 v74 = 0;
    unsigned int v72 = 0;
    WTF::URL::invalidate((WTF::URL *)&v72);
    WebCore::PCM::AttributionTriggerData::tokenSignatureURL((uint64_t *)buf, (WebCore::PCM::AttributionTriggerData *)a2);
    LOBYTE(v68) = 0;
    char v71 = 0;
    if ((_BYTE)v76)
    {
      long long v24 = *(WTF::StringImpl **)buf;
      if (*(void *)buf) {
        **(_DWORD **)buf += 2;
      }
      char v68 = v24;
      long long v69 = *(_OWORD *)&buf[8];
      long long v70 = *(_OWORD *)&buf[24];
      char v71 = 1;
    }
    WebKit::PrivateClickMeasurementManager::configureForTokenSigning(v5, &v74, (uint64_t)&v72, (uint64_t)&v68);
    if (v71)
    {
      uint64_t v26 = v68;
      char v68 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v25);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
    }
    if ((_BYTE)v76)
    {
      int v30 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v25);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
    }
    uint64_t result = (uint64_t *)v72;
    if (!v72) {
      goto LABEL_79;
    }
    if (*((_DWORD *)v72 + 1) && (v73 & 1) != 0)
    {
      uint64_t v31 = qword_1EB3582F8;
      if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1985F2000, v31, OS_LOG_TYPE_INFO, "About to fire a unlinkable token signing request for the click destination.", buf, 2u);
      }
      uint64_t v32 = *(void *)(v5 + 184);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v67 = *(WTF::StringImpl **)buf;
      (*(void (**)(uint64_t, void, WTF::StringImpl **))(*(void *)v32 + 16))(v32, 0, &v67);
      uint64_t v34 = v67;
      uint64_t v67 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, v33);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
      WebCore::PCM::AttributionTriggerData::tokenSignatureJSON((uint64_t *)&v66, (WebCore::PCM::AttributionTriggerData *)a2);
      long long v35 = v66;
      long long v66 = 0;
      uint64_t v67 = v35;
      int v36 = v74;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
      uint64_t v37 = *(atomic_uint **)(v5 + 8);
      if (v37) {
        atomic_fetch_add(v37, 1u);
      }
      *(void *)long long buf = v37;
      *(void *)&uint8_t buf[8] = v5;
      long long v38 = *(_OWORD *)(v4 + 3);
      v4[3] = 0;
      v4[4] = 0;
      *(_OWORD *)&buf[16] = v38;
      *(_WORD *)&buf[32] = *(_WORD *)a2;
      buf[34] = *(unsigned char *)(a2 + 2);
      LOBYTE(v76) = 0;
      char v77 = 0;
      if (*(unsigned char *)(a2 + 16))
      {
        uint64_t v56 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = 0;
        uint64_t v76 = v56;
        char v77 = 1;
      }
      LOBYTE(v78) = 0;
      char v79 = 0;
      if (*(unsigned char *)(a2 + 32))
      {
        uint64_t v39 = *(void *)(a2 + 24);
        *(void *)(a2 + 24) = 0;
        uint64_t v78 = v39;
        char v79 = 1;
      }
      LOBYTE(v80) = 0;
      char v81 = 0;
      if (*(unsigned char *)(a2 + 48))
      {
        uint64_t v57 = *(void *)(a2 + 40);
        *(void *)(a2 + 40) = 0;
        uint64_t v80 = v57;
        char v81 = 1;
      }
      LOBYTE(v8objc_destroyWeak(this + 2) = 0;
      char v84 = 0;
      if (*(unsigned char *)(a2 + 88))
      {
        long long v40 = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a2 + 56) = 0u;
        long long v82 = v40;
        long long v41 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a2 + 7objc_destroyWeak(this + 2) = 0u;
        long long v83 = v41;
        char v84 = 1;
      }
      LOBYTE(v85) = 0;
      char v87 = 0;
      if (*(unsigned char *)(a2 + 120))
      {
        long long v42 = *(_OWORD *)(a2 + 96);
        *(void *)(a2 + 96) = 0;
        *(void *)(a2 + 104) = 0;
        long long v85 = v42;
        uint64_t v43 = *(void *)(a2 + 112);
        *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
        uint64_t v86 = v43;
        char v87 = 1;
      }
      WTF::String::isolatedCopy();
      uint64_t v44 = WTF::fastMalloc((WTF *)0xB0);
      *(void *)uint64_t v44 = &unk_1EE9C9A18;
      *(_OWORD *)(v44 + 8) = *(_OWORD *)buf;
      *(void *)(v44 + 24) = *(void *)&buf[16];
      uint64_t v45 = *(void *)&buf[24];
      *(void *)long long buf = 0;
      *(_OWORD *)&buf[16] = 0uLL;
      *(void *)(v44 + 3objc_destroyWeak(this + 2) = v45;
      *(_WORD *)(v44 + 40) = *(_WORD *)&buf[32];
      *(unsigned char *)(v44 + 4objc_destroyWeak(this + 2) = buf[34];
      *(unsigned char *)(v44 + 48) = 0;
      *(unsigned char *)(v44 + 56) = 0;
      if (v77)
      {
        uint64_t v58 = v76;
        uint64_t v76 = 0;
        *(void *)(v44 + 48) = v58;
        *(unsigned char *)(v44 + 56) = 1;
      }
      *(unsigned char *)(v44 + 64) = 0;
      *(unsigned char *)(v44 + 7objc_destroyWeak(this + 2) = 0;
      if (v79)
      {
        uint64_t v46 = v78;
        uint64_t v78 = 0;
        *(void *)(v44 + 64) = v46;
        *(unsigned char *)(v44 + 7objc_destroyWeak(this + 2) = 1;
      }
      *(unsigned char *)(v44 + 80) = 0;
      *(unsigned char *)(v44 + 88) = 0;
      if (v81)
      {
        uint64_t v59 = v80;
        uint64_t v80 = 0;
        *(void *)(v44 + 80) = v59;
        *(unsigned char *)(v44 + 88) = 1;
      }
      *(unsigned char *)(v44 + 96) = 0;
      *(unsigned char *)(v44 + 128) = 0;
      if (v84)
      {
        *(void *)(v44 + 96) = v82;
        uint64_t v47 = *((void *)&v82 + 1);
        long long v82 = 0u;
        *(void *)(v44 + 104) = v47;
        *(void *)(v44 + 11objc_destroyWeak(this + 2) = v83;
        uint64_t v48 = *((void *)&v83 + 1);
        long long v83 = 0u;
        *(void *)(v44 + 120) = v48;
        *(unsigned char *)(v44 + 128) = 1;
      }
      *(unsigned char *)(v44 + 136) = 0;
      *(unsigned char *)(v44 + 160) = 0;
      if (v87)
      {
        *(void *)(v44 + 136) = v85;
        uint64_t v49 = *((void *)&v85 + 1);
        long long v85 = 0uLL;
        *(void *)(v44 + 144) = v49;
        uint64_t v50 = v86;
        uint64_t v86 = 0;
        *(void *)(v44 + 15objc_destroyWeak(this + 2) = v50;
        *(unsigned char *)(v44 + 160) = 1;
      }
      uint64_t v51 = v88;
      uint64_t v88 = 0;
      *(void *)(v44 + 168) = v51;
      uint64_t v65 = v44;
      WebKit::PCM::NetworkLoader::start((WTF::URL *)&v72, &v67, v36 != 0, &v65);
      uint64_t v53 = v65;
      uint64_t v65 = 0;
      if (v53) {
        (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
      }
      WebKit::PrivateClickMeasurementManager::getSignedUnlinkableTokenForDestination(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0::~$_0((uint64_t)buf, v52);
      unsigned __int8 v54 = v67;
      uint64_t v67 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*(_DWORD *)v54;
        }
      }
      char v55 = v66;
      long long v66 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*(_DWORD *)v55;
        }
      }
      uint64_t result = (uint64_t *)v72;
      unsigned int v72 = 0;
      if (!result) {
        goto LABEL_79;
      }
    }
    else
    {
      unsigned int v72 = 0;
    }
LABEL_76:
    if (*(_DWORD *)result == 2) {
      uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v25);
    }
    else {
      *(_DWORD *)result -= 2;
    }
LABEL_79:
    if (v64 != -1) {
      return (uint64_t *)((uint64_t (*)(unsigned char *, CFTypeRef *))off_1EE9C9A90[v64])(buf, &cf);
    }
    return result;
  }
  uint64_t v7 = qword_1EB3582F8;
  if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_INFO, "The public key URL was empty.", buf, 2u);
  }
  uint64_t v8 = *(void *)(v5 + 184);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v8 + 16))(v8, 2, buf);
  uint64_t result = *(uint64_t **)buf;
  *(void *)long long buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM26DestinationUnlinkableTokenEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (const void *)*((void *)a2 + 2);
  *((void *)a2 + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)a2;
  *(void *)a2 = 0;
  if (v6)
  {
    CFRelease(v6);
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore3PCM26DestinationUnlinkableTokenEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::attribute(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0,void,std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C9AB0;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::attribute(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0,void,std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C9AB0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::attribute(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WebCore::PCM::AttributionTriggerData &&,WTF::String const&)::$_0,void,std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&>::call(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  double v3 = *(double *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  double v5 = *(double *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v8 = *a3;
  int v9 = *((_DWORD *)a3 + 2);
  uint64_t v10 = *((unsigned int *)a3 + 3);
  *a3 = 0;
  a3[1] = 0;
  int v36 = v8;
  int v37 = v9;
  int v38 = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11 || !*(void *)(v11 + 8) || !v7) {
    return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v36, (WTF::StringImpl *)a2);
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if ((*(unsigned int (**)(void))(**(void **)(v12 + 184) + 32))(*(void *)(v12 + 184))) {
    BOOL v13 = v10 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    CFTypeRef v21 = &v8[16 * v10];
    CFTypeRef v22 = v8;
    do
    {
      unsigned int v23 = *v22;
      v22 += 16;
      (*(void (**)(void, void, unsigned __int8 *))(**(void **)(v12 + 184) + 16))(*(void *)(v12 + 184), v23, v8 + 8);
      uint64_t v8 = v22;
    }
    while (v22 != v21);
  }
  if (!(_BYTE)v4 || !(_BYTE)v6) {
    return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v36, (WTF::StringImpl *)a2);
  }
  if (v5 >= v3)
  {
    char v14 = v4;
  }
  else
  {
    double v3 = v5;
    char v14 = v6;
  }
  if (!v14) {
    return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v36, (WTF::StringImpl *)a2);
  }
  if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v12 + 16)))
  {
    WTF::RunLoop::TimerBase::secondsUntilFire((WTF::RunLoop::TimerBase *)(v12 + 16));
    if (v15 < v3) {
      return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v36, (WTF::StringImpl *)a2);
    }
  }
  int v16 = (*(uint64_t (**)(void))(**(void **)(v12 + 184) + 32))(*(void *)(v12 + 184));
  uint64_t v17 = *(void *)(v12 + 184);
  if (!v16)
  {
    WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral>((uint64_t)"[Private Click Measurement] Setting timer for firing attribution request to the timeout of ", 92, (uint64_t)" seconds.", 10, v73);
    (*(void (**)(uint64_t, void, _OWORD *))(*(void *)v17 + 16))(v17, 0, v73);
    uint64_t v19 = *(WTF::StringImpl **)&v73[0];
    *(void *)&v73[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
LABEL_22:
    WTF::RunLoop::TimerBase::start();
    return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v36, (WTF::StringImpl *)a2);
  }
  HIDWORD(v54) = WTF::numberToStringAndSize();
  uint64_t result = (unsigned int *)WTF::numberToStringAndSize();
  HIDWORD(v46) = result;
  if ((result & 0x80000000) == 0 && !__OFADD__(result, 9))
  {
    int v24 = result + 60;
    if (!__OFADD__(result + 9, 51) && (HIDWORD(v54) & 0x80000000) == 0)
    {
      BOOL v25 = __OFADD__(HIDWORD(v54), v24);
      int v26 = HIDWORD(v54) + v24;
      if (!v25)
      {
        uint64_t v27 = (v26 + 102);
        if (!__OFADD__(v26, 102))
        {
          long long v67 = v51;
          long long v68 = v52;
          long long v69 = v53;
          long long v70 = v54;
          long long v63 = v47;
          long long v64 = v48;
          long long v65 = v49;
          long long v66 = v50;
          long long v57 = v41;
          long long v58 = v42;
          long long v55 = v39;
          long long v56 = v40;
          long long v61 = v45;
          long long v62 = v46;
          long long v59 = v43;
          long long v60 = v44;
          if (v26 == -102)
          {
            uint64_t v28 = MEMORY[0x1E4F30960];
            *MEMORY[0x1E4F30960] += 2;
LABEL_42:
            *(void *)&v73[0] = v28;
            (*(void (**)(uint64_t, void, _OWORD *))(*(void *)v17 + 16))(v17, 0, v73);
            long long v35 = *(WTF::StringImpl **)&v73[0];
            *(void *)&v73[0] = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2) {
                WTF::StringImpl::destroy(v35, v34);
              }
              else {
                *(_DWORD *)v35 -= 2;
              }
            }
            goto LABEL_22;
          }
          if ((v27 & 0x80000000) == 0)
          {
            uint64_t result = (unsigned int *)WTF::tryFastCompactMalloc((WTF *)(v27 + 20));
            uint64_t v28 = *(void *)&v73[0];
            if (*(void *)&v73[0])
            {
              **(_DWORD **)&v73[0] = 2;
              *(_DWORD *)(v28 + 4) = v27;
              *(void *)(v28 + 8) = v28 + 20;
              *(_DWORD *)(v28 + 16) = 4;
              qmemcpy((void *)(v28 + 20), "[Private Click Measurement] Setting timer for firing attribution request to the debug mode timeout of ", 102);
              long long v29 = (unsigned char *)(v28 + 122);
              __src[2] = v65;
              __src[3] = v66;
              __src[0] = v63;
              __src[1] = v64;
              __src[6] = v69;
              *(_OWORD *)__n = v70;
              __src[4] = v67;
              __src[5] = v68;
              uint64_t v30 = HIDWORD(v70);
              if (HIDWORD(v70))
              {
                if (HIDWORD(v70) == 1) {
                  *long long v29 = __src[0];
                }
                else {
                  memcpy((void *)(v28 + 122), __src, HIDWORD(v70));
                }
              }
              qmemcpy(&v29[v30], " seconds where the regular timeout would have been ", 51);
              uint64_t v31 = &v29[v30 + 51];
              v73[4] = v59;
              v73[5] = v60;
              v73[6] = v61;
              long long v74 = v62;
              v73[0] = v55;
              v73[1] = v56;
              v73[2] = v57;
              v73[3] = v58;
              uint64_t v32 = HIDWORD(v62);
              if (HIDWORD(v62))
              {
                if (HIDWORD(v62) == 1) {
                  *uint64_t v31 = v73[0];
                }
                else {
                  memcpy(v31, v73, HIDWORD(v74));
                }
              }
              long long v33 = &v31[v32];
              *(void *)long long v33 = *(void *)" seconds.";
              v33[8] = 46;
              goto LABEL_42;
            }
          }
        }
      }
    }
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v8[0] = a1;
  v8[1] = a2;
  v7[0] = a3;
  v7[1] = a4;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral>(v8, v7, a5);
  if (!*a5) {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[1];
  BOOL v5 = v4 != 0;
  unint64_t v6 = v4 - 1;
  if (!v5) {
    unint64_t v6 = 0;
  }
  uint64_t v13 = *a1;
  if (v6 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198C2647CLL);
  }
  int v14 = v6;
  int v16 = WTF::numberToStringAndSize();
  uint64_t v8 = a2[1];
  BOOL v5 = v8 != 0;
  unint64_t v9 = v8 - 1;
  if (!v5) {
    unint64_t v9 = 0;
  }
  uint64_t v11 = *a2;
  if (v9 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198C2649CLL);
  }
  int v12 = v9;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v13, (uint64_t)v15, (uint64_t)&v11, a3);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a2 + 124);
  int v5 = *(_DWORD *)(a3 + 8);
  if ((v5 | v4) < 0
    || ((uint64_t v6 = result, v7 = *(_DWORD *)(result + 8), v8 = __OFADD__(v4, v5), v9 = v4 + v5, !v8) ? (v10 = 0) : (v10 = 1),
        v7 < 0 || (v10 & 1) != 0 || (uint64_t result = (v7 + v9), __OFADD__(v7, v9))))
  {
    *a4 = 0;
  }
  else
  {
    int v12 = *(_OWORD **)v6;
    uint64_t v11 = *(void *)(v6 + 8);
    long long v13 = *(_OWORD *)(a2 + 80);
    v17[4] = *(_OWORD *)(a2 + 64);
    v17[5] = v13;
    long long v14 = *(_OWORD *)(a2 + 112);
    v17[6] = *(_OWORD *)(a2 + 96);
    v17[7] = v14;
    long long v15 = *(_OWORD *)(a2 + 16);
    v17[0] = *(_OWORD *)a2;
    v17[1] = v15;
    long long v16 = *(_OWORD *)(a2 + 48);
    v17[2] = *(_OWORD *)(a2 + 32);
    v17[3] = v16;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, 1, v12, v11, v17, *(_OWORD **)a3, *(void *)(a3 + 8), a4);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, long long *a5@<X4>, _OWORD *a6@<X5>, unsigned int a7@<W6>, void *a8@<X8>)
{
  int v13 = result;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v15 = __src;
        if (!(void)__src) {
          goto LABEL_38;
        }
        long long v16 = (unsigned char *)(__src + 20);
        *(_DWORD *)long long __src = 2;
        *(_DWORD *)(v15 + 4) = v13;
        *(void *)(v15 + 8) = v15 + 20;
        *(_DWORD *)(v15 + 16) = 4;
        long long v62 = a5[4];
        long long v63 = a5[5];
        long long v64 = a5[6];
        long long v65 = a5[7];
        long long v58 = *a5;
        long long v59 = a5[1];
        long long v60 = a5[2];
        long long v61 = a5[3];
        if (a4)
        {
          if (a4 == 1) {
            unsigned char *v16 = *(unsigned char *)a3;
          }
          else {
            uint64_t result = (uint64_t)memcpy((void *)(v15 + 20), a3, a4);
          }
        }
        uint64_t v17 = &v16[a4];
        long long v70 = v62;
        long long v71 = v63;
        long long v72 = v64;
        long long v73 = v65;
        long long __src = v58;
        long long v67 = v59;
        long long v68 = v60;
        long long v69 = v61;
        if (HIDWORD(v65))
        {
          if (HIDWORD(v65) == 1)
          {
            unsigned char *v17 = __src;
            if (!a7) {
              goto LABEL_38;
            }
LABEL_12:
            uint64_t result = (uint64_t)&v17[HIDWORD(v65)];
            if (a7 == 1) {
              *(unsigned char *)uint64_t result = *(unsigned char *)a6;
            }
            else {
              uint64_t result = (uint64_t)memcpy((void *)result, a6, a7);
            }
            goto LABEL_38;
          }
          uint64_t result = (uint64_t)memcpy(v17, &__src, HIDWORD(v73));
        }
        if (!a7) {
          goto LABEL_38;
        }
        goto LABEL_12;
      }
LABEL_16:
      uint64_t v15 = 0;
      goto LABEL_38;
    }
LABEL_17:
    uint64_t v15 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_38;
  }
  if (!result) {
    goto LABEL_17;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_16;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v15 = __src;
  if ((void)__src)
  {
    uint64_t v18 = (char *)(__src + 20);
    *(_DWORD *)long long __src = 2;
    *(_DWORD *)(v15 + 4) = v13;
    *(void *)(v15 + 8) = v15 + 20;
    *(_DWORD *)(v15 + 16) = 0;
    long long v54 = a5[4];
    long long v55 = a5[5];
    long long v56 = a5[6];
    long long v57 = a5[7];
    long long v50 = *a5;
    long long v51 = a5[1];
    uint64_t v19 = (char *)(v15 + 20 + 2 * a4);
    long long v52 = a5[2];
    long long v53 = a5[3];
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      __int16 v20 = &v18[2 * (a4 & 0xFFFFFFC0)];
      long long v21 = 0uLL;
      do
      {
        v75.val[0] = (int8x16_t)*a3;
        int8x16_t v22 = *((int8x16_t *)a3 + 1);
        v78.val[0] = (int8x16_t)a3[2];
        long long v23 = a3[3];
        a3 += 4;
        long long v24 = v23;
        v78.val[1] = 0uLL;
        v81.val[0] = v22;
        v75.val[1] = 0uLL;
        BOOL v25 = v18;
        vst2q_s8(v25, v75);
        v25 += 32;
        v81.val[1] = 0uLL;
        vst2q_s8(v25, v81);
        int v26 = v18 + 64;
        vst2q_s8(v26, v78);
        uint64_t v27 = v18 + 96;
        vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
        v18 += 128;
      }
      while (v18 != v20);
      uint64_t v18 = v20;
    }
    while (v18 != v19)
    {
      __int16 v28 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)uint64_t v18 = v28;
      v18 += 2;
    }
    long long v70 = v54;
    long long v71 = v55;
    long long v72 = v56;
    long long v73 = v57;
    long long __src = v50;
    long long v67 = v51;
    long long v68 = v52;
    long long v69 = v53;
    long long v29 = &v19[2 * HIDWORD(v57)];
    if (HIDWORD(v57) < 0x40)
    {
      p_src = (int8x16_t *)&__src;
    }
    else
    {
      uint64_t v30 = &v19[2 * (HIDWORD(v57) & 0xFFFFFFC0)];
      p_src = (int8x16_t *)&__src;
      long long v32 = 0uLL;
      do
      {
        v76.val[0] = *p_src;
        int8x16_t v33 = p_src[1];
        v79.val[0] = p_src[2];
        int8x16_t v34 = p_src[3];
        p_src += 4;
        int8x16_t v35 = v34;
        v79.val[1] = 0uLL;
        v82.val[0] = v33;
        v76.val[1] = 0uLL;
        int v36 = v19;
        vst2q_s8(v36, v76);
        v36 += 32;
        v82.val[1] = 0uLL;
        vst2q_s8(v36, v82);
        int v37 = v19 + 64;
        vst2q_s8(v37, v79);
        int v38 = v19 + 96;
        vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
        v19 += 128;
      }
      while (v19 != v30);
      uint64_t v19 = v30;
    }
    while (v19 != v29)
    {
      __int16 v39 = p_src->u8[0];
      p_src = (int8x16_t *)((char *)p_src + 1);
      *(_WORD *)uint64_t v19 = v39;
      v19 += 2;
    }
    long long v40 = &v29[2 * a7];
    if ((a7 & 0xFFFFFFC0) != 0)
    {
      long long v41 = &v29[2 * (a7 & 0xFFFFFFC0)];
      long long v42 = 0uLL;
      do
      {
        v77.val[0] = (int8x16_t)*a6;
        int8x16_t v43 = *((int8x16_t *)a6 + 1);
        v80.val[0] = (int8x16_t)a6[2];
        long long v44 = a6[3];
        a6 += 4;
        long long v45 = v44;
        v80.val[1] = 0uLL;
        v83.val[0] = v43;
        v77.val[1] = 0uLL;
        long long v46 = v29;
        vst2q_s8(v46, v77);
        v46 += 32;
        v83.val[1] = 0uLL;
        vst2q_s8(v46, v83);
        long long v47 = v29 + 64;
        vst2q_s8(v47, v80);
        long long v48 = v29 + 96;
        vst2q_s8(v48, *(int8x16x2_t *)(&v42 - 1));
        v29 += 128;
      }
      while (v29 != v41);
      long long v29 = v41;
    }
    while (v29 != v40)
    {
      __int16 v49 = *(unsigned __int8 *)a6;
      a6 = (_OWORD *)((char *)a6 + 1);
      *(_WORD *)long long v29 = v49;
      v29 += 2;
    }
  }
LABEL_38:
  *a8 = v15;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0,void,WebCore::PrivateClickMeasurement&&,WTF::String const&>::~CallableWrapper(void *a1, void *a2)
{
  double v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C9AD8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0,void,WebCore::PrivateClickMeasurement&&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  double v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C9AD8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0,void,WebCore::PrivateClickMeasurement&&,WTF::String const&>::call(WTF *result, uint64_t a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      int v4 = result;
      uint64_t v5 = *((void *)result + 2);
      uint64_t result = (WTF *)WTF::base64Decode();
      if (v22)
      {
        PAL::CryptoDigest::create();
        PAL::CryptoDigest::addBytes();
        PAL::CryptoDigest::computeHash((uint64_t *)&v16, v19);
        WTF::base64EncodeToString();
        uint64_t result = v16;
        if (v16)
        {
          long long v16 = 0;
          int v17 = 0;
          uint64_t result = (WTF *)WTF::fastFree(result, v6);
        }
        if (*(unsigned char *)(a2 + 296))
        {
          if (WTF::equal(v18, *(const WTF::StringImpl **)(a2 + 288), v7) && *(unsigned char *)(a2 + 184))
          {
            int v9 = *((unsigned __int8 *)v4 + 24);
            if (*(unsigned char *)(a2 + 176))
            {
              WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
              char v10 = *(atomic_uint **)(v5 + 8);
              if (v10) {
                atomic_fetch_add(v10, 1u);
              }
              char v11 = *((unsigned char *)v4 + 24);
              uint64_t v12 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v12 = &unk_1EE9C9B00;
              *(void *)(v12 + 8) = v10;
              *(void *)(v12 + 16) = v5;
              *(unsigned char *)(v12 + 24) = v11;
              long long v16 = (WTF *)v12;
              WebKit::PrivateClickMeasurementManager::getTokenPublicKey(v5, a2, v9 != 0, 0, (uint64_t *)&v16);
              if (v16) {
                (*(void (**)(WTF *))(*(void *)v16 + 8))(v16);
              }
            }
            else
            {
              WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(v5, (WebCore::PrivateClickMeasurement *)a2, v9 != 0);
            }
          }
          int v13 = v18;
          uint64_t v18 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v8);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          uint64_t result = v19;
          uint64_t v19 = 0;
          if (result)
          {
            PAL::CryptoDigest::~CryptoDigest(result);
            uint64_t result = (WTF *)WTF::fastFree(v14, v15);
          }
          if (v22)
          {
            uint64_t result = v20;
            if (v20)
            {
              __int16 v20 = 0;
              int v21 = 0;
              return (WTF *)WTF::fastFree(result, v8);
            }
          }
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0::operator() const(WebCore::PrivateClickMeasurement&&,WTF::String const&)::{lambda(WebCore::PrivateClickMeasurement&,WTF::String const)#1},void,WebCore::PrivateClickMeasurement&,WTF::String const>::~CallableWrapper(void *a1, void *a2)
{
  double v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C9B00;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0::operator() const(WebCore::PrivateClickMeasurement&&,WTF::String const&)::{lambda(WebCore::PrivateClickMeasurement&,WTF::String const)#1},void,WebCore::PrivateClickMeasurement&,WTF::String const>::~CallableWrapper(WTF *this, void *a2)
{
  double v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C9B00;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0::operator() const(WebCore::PrivateClickMeasurement&&,WTF::String const&)::{lambda(WebCore::PrivateClickMeasurement&,WTF::String const)#1},void,WebCore::PrivateClickMeasurement&,WTF::String const>::call(WTF *result, uint64_t a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      int v4 = result;
      uint64_t v5 = *((void *)result + 2);
      uint64_t result = (WTF *)WTF::base64Decode();
      if (v18)
      {
        PAL::CryptoDigest::create();
        PAL::CryptoDigest::addBytes();
        PAL::CryptoDigest::computeHash((uint64_t *)&v12, v15);
        WTF::base64EncodeToString();
        uint64_t result = v12;
        if (v12)
        {
          uint64_t v12 = 0;
          int v13 = 0;
          uint64_t result = (WTF *)WTF::fastFree(result, v6);
        }
        if (*(unsigned char *)(a2 + 184) && *(unsigned char *)(a2 + 176))
        {
          if (WTF::equal(v14, *(const WTF::StringImpl **)(a2 + 168), v7)) {
            WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(v5, (WebCore::PrivateClickMeasurement *)a2, *((unsigned char *)v4 + 24));
          }
          int v9 = v14;
          long long v14 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2) {
              WTF::StringImpl::destroy(v9, v8);
            }
            else {
              *(_DWORD *)v9 -= 2;
            }
          }
          uint64_t result = v15;
          uint64_t v15 = 0;
          if (result)
          {
            PAL::CryptoDigest::~CryptoDigest(result);
            uint64_t result = (WTF *)WTF::fastFree(v10, v11);
          }
          if (v18)
          {
            uint64_t result = v16;
            if (v16)
            {
              long long v16 = 0;
              int v17 = 0;
              return (WTF *)WTF::fastFree(result, v8);
            }
          }
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_1,void,WebCore::PrivateClickMeasurement&&,WTF::String const&>::~CallableWrapper(void *a1, void *a2)
{
  double v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C9B28;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_1,void,WebCore::PrivateClickMeasurement&&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  double v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C9B28;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_1,void,WebCore::PrivateClickMeasurement&&,WTF::String const&>::call(WTF *result, uint64_t a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      int v4 = result;
      uint64_t v5 = *((void *)result + 2);
      uint64_t result = (WTF *)WTF::base64Decode();
      if (v17)
      {
        PAL::CryptoDigest::create();
        PAL::CryptoDigest::addBytes();
        PAL::CryptoDigest::computeHash((uint64_t *)&v11, v14);
        WTF::base64EncodeToString();
        uint64_t result = v11;
        if (v11)
        {
          char v11 = 0;
          int v12 = 0;
          uint64_t result = (WTF *)WTF::fastFree(result, v6);
        }
        if (*(unsigned char *)(a2 + 184))
        {
          if (*(unsigned char *)(a2 + 176) && WTF::equal(v13, *(const WTF::StringImpl **)(a2 + 168), v7)) {
            WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(v5, (WebCore::PrivateClickMeasurement *)a2, *((unsigned char *)v4 + 24));
          }
          BOOL v8 = v13;
          int v13 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2) {
              WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v6);
            }
            else {
              *(_DWORD *)v8 -= 2;
            }
          }
          uint64_t result = v14;
          long long v14 = 0;
          if (result)
          {
            PAL::CryptoDigest::~CryptoDigest(result);
            uint64_t result = (WTF *)WTF::fastFree(v9, v10);
          }
          if (v17)
          {
            uint64_t result = v15;
            if (v15)
            {
              uint64_t v15 = 0;
              int v16 = 0;
              return (WTF *)WTF::fastFree(result, v6);
            }
          }
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0,void,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> const&>::~CallableWrapper(void *a1, void *a2)
{
  double v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C9B50;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0,void,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> const&>::~CallableWrapper(WTF *this, void *a2)
{
  double v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C9B50;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0,void,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> const&>::call(WTF::StringImpl *result, WTF::StringImpl **a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      double v3 = *a2;
      if (*a2)
      {
        uint64_t v4 = *(void *)(*((void *)result + 2) + 184);
        *(_DWORD *)v3 += 2;
        int v7 = v3;
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[Private Click Measurement] Received error: '", 46, (uint64_t *)&v7, (uint64_t)"' for ad click attribution request.", 36, &v8);
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v4 + 16))(v4, 2, &v8);
        uint64_t v6 = v8;
        BOOL v8 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, v5);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
        uint64_t result = v7;
        int v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests(void)::$_0,void,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C9B78;
  double v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests(void)::$_0,void,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C9B78;
  double v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::WallTime *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests(void)::$_0,void,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests(void)::$_0::operator()<WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(WTF::WallTime **)(a1 + 8), *(void *)(a1 + 16), *(void *)a2, *(_DWORD *)(a2 + 12));
}

WTF::WallTime *WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests(void)::$_0::operator()<WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::WallTime *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (!a2) {
    return result;
  }
  if (!*(void *)(a2 + 8) || a4 == 0) {
    return result;
  }
  uint64_t v6 = (uint64_t)result;
  char v7 = 0;
  uint64_t v8 = 312 * a4;
  double v9 = INFINITY;
  while (1)
  {
    long long v10 = *(_OWORD *)(a3 + 208);
    long long v28 = *(_OWORD *)(a3 + 192);
    long long v29 = v10;
    uint64_t result = (WTF::WallTime *)WebCore::PCM::AttributionTimeToSendData::earliestTimeToSend((WebCore::PCM::AttributionTimeToSendData *)&v28);
    int v12 = *(unsigned __int8 *)(a3 + 200);
    int v13 = *(unsigned __int8 *)(a3 + 216);
    BOOL v14 = *(double *)(a3 + 192) < *(double *)(a3 + 208) || v13 == 0;
    BOOL v15 = !v14;
    if (v11 && v12 | v13) {
      break;
    }
LABEL_32:
    a3 += 312;
    v8 -= 312;
    if (!v8) {
      goto LABEL_33;
    }
  }
  double v16 = *(double *)&result;
  WTF::WallTime::now(result);
  if (v17 >= v16
    || *(unsigned char *)(v6 + 48)
    || (double v27 = v17,
        uint64_t result = (WTF::WallTime *)(*(uint64_t (**)(void))(**(void **)(v6 + 184) + 32))(*(void *)(v6 + 184)),
        result))
  {
    if (v7)
    {
      WebKit::PrivateClickMeasurementManager::randomlyBetweenFifteenAndThirtyMinutes((WebKit::PrivateClickMeasurementManager *)v6);
      goto LABEL_34;
    }
    BOOL v18 = v13 != 0;
    long long v19 = *(_OWORD *)(a3 + 208);
    long long v28 = *(_OWORD *)(a3 + 192);
    long long v29 = v19;
    double v20 = COERCE_DOUBLE(WebCore::PCM::AttributionTimeToSendData::latestTimeToSend((WebCore::PCM::AttributionTimeToSendData *)&v28));
    char v22 = v21;
    if (v12) {
      char v23 = v15;
    }
    else {
      char v23 = v18;
    }
    WebKit::PrivateClickMeasurementManager::fireConversionRequest(v6, (unsigned __int8 *)a3, v23);
    uint64_t result = (WTF::WallTime *)WebKit::PrivateClickMeasurementManager::clearSentAttribution(v6);
    if (v22)
    {
      WTF::WallTime::now(result);
      double v25 = v20 - v24;
      if (v20 - v24 < 0.0) {
        double v25 = WebKit::PrivateClickMeasurementManager::randomlyBetweenFifteenAndThirtyMinutes((WebKit::PrivateClickMeasurementManager *)v6);
      }
      uint64_t result = (WTF::WallTime *)(*(uint64_t (**)(void))(**(void **)(v6 + 184) + 32))(*(void *)(v6 + 184));
      if (v25 >= v9) {
        double v26 = v9;
      }
      else {
        double v26 = v25;
      }
      if (result) {
        double v9 = 10.0;
      }
      else {
        double v9 = v26;
      }
    }
    char v7 = 1;
    goto LABEL_32;
  }
  if (v16 - v27 < v9) {
    double v9 = v16 - v27;
  }
LABEL_33:
  if (v9 >= INFINITY) {
    return result;
  }
LABEL_34:

  return (WTF::WallTime *)WTF::RunLoop::TimerBase::start();
}

uint64_t WebCore::PCM::AttributionTimeToSendData::earliestTimeToSend(WebCore::PCM::AttributionTimeToSendData *this)
{
  if (*((unsigned char *)this + 8))
  {
    if (*((unsigned char *)this + 24))
    {
      uint64_t v1 = (WebCore::PCM::AttributionTimeToSendData *)((char *)this + 16);
      if (*((double *)this + 2) >= *(double *)this) {
        uint64_t v1 = this;
      }
      return *(void *)v1;
    }
LABEL_7:
    if (*((unsigned char *)this + 8)) {
      uint64_t v1 = this;
    }
    else {
      uint64_t v1 = (WebCore::PCM::AttributionTimeToSendData *)((char *)this + 16);
    }
    return *(void *)v1;
  }
  if (*((unsigned char *)this + 24)) {
    goto LABEL_7;
  }
  return 0;
}

uint64_t WebCore::PCM::AttributionTimeToSendData::latestTimeToSend(WebCore::PCM::AttributionTimeToSendData *this)
{
  if (*((unsigned char *)this + 8))
  {
    if (*((unsigned char *)this + 24))
    {
      uint64_t v1 = (WebCore::PCM::AttributionTimeToSendData *)((char *)this + 16);
      if (*(double *)this >= *((double *)this + 2)) {
        uint64_t v1 = this;
      }
      return *(void *)v1;
    }
LABEL_7:
    if (*((unsigned char *)this + 8)) {
      uint64_t v1 = this;
    }
    else {
      uint64_t v1 = (WebCore::PCM::AttributionTimeToSendData *)((char *)this + 16);
    }
    return *(void *)v1;
  }
  if (*((unsigned char *)this + 24)) {
    goto LABEL_7;
  }
  return 0;
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::destroyStoreForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C9BA0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::destroyStoreForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C9BA0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::destroyStoreForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(unsigned int **)(v3 + 168);
      *(void *)(v3 + 168) = 0;
      if (v4)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v4 + 2);
          (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
        }
      }
    }
  }
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

unsigned int *WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>(unsigned int *a1, uint64_t *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *a2;
  if (*a2)
  {
    int v5 = (*(_DWORD *)(v3 + 16) >> 2) & 1;
    int __src = *(_DWORD *)(v3 + 4);
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 4uLL);
    char v12 = v5;
    WebKit::Daemon::Encoder::encodeFixedLengthData(v2, &v12, 1uLL);
    uint64_t v6 = *a2;
    if (v5)
    {
      if (v6)
      {
        char v7 = *(int **)(v6 + 8);
        size_t v8 = *(unsigned int *)(v6 + 4);
        goto LABEL_8;
      }
    }
    else if (v6)
    {
      char v7 = *(int **)(v6 + 8);
      size_t v8 = 2 * *(unsigned int *)(v6 + 4);
LABEL_8:
      a1 = v2;
      return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v7, v8);
    }
    char v7 = 0;
    size_t v8 = 0;
    goto LABEL_8;
  }
  int v10 = -1;
  char v7 = &v10;
  size_t v8 = 4;
  return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v7, v8);
}

void *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo17storeUnattributedEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9BC8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo17storeUnattributedEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9BC8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo17storeUnattributedEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = v4;
  if (v4)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

uint64_t *WebKit::Daemon::Decoder::operator>><std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>>(uint64_t *a1, uint64_t *a2, unsigned __int8 **a3)
{
  IPC::ArgumentCoder<std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>,void>::decode<WebKit::Daemon::Decoder>(a1, a3, v7);
  std::__optional_storage_base<std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>,false>>(a2, (uint64_t)v7);
  if (v8) {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>::~__tuple_impl(v7, v5);
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>,void>::decode<WebKit::Daemon::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned __int8 **a2@<X2>, unsigned char *a3@<X8>)
{
  WebKit::Daemon::Coder<WebCore::PCM::AttributionTriggerData,void>::decode(a1, a2, v8);
  if (v8[128])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>,void>::decode<WebKit::Daemon::Decoder,WebCore::PCM::AttributionTriggerData>(a1, (uint64_t)v8, v6, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[224] = 0;
  }
  return std::__optional_destruct_base<WebCore::PCM::AttributionTriggerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v5);
}

void IPC::ArgumentCoder<std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>,void>::decode<WebKit::Daemon::Decoder,WebCore::PCM::AttributionTriggerData>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t a4@<X8>)
{
  WebKit::Daemon::Coder<WTF::URL,void>::decode<WebKit::Daemon::Decoder>(a1, a3, v21);
  if (!v22)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 224) = 0;
    return;
  }
  WebKit::Daemon::Coder<WebCore::RegistrableDomain,void>::decode(a1, v7, (uint64_t)&v23);
  if (v24)
  {
    WebKit::Daemon::Coder<WTF::URL,void>::decode<WebKit::Daemon::Decoder>(a1, v9, v25);
    if (!v26)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 224) = 0;
LABEL_24:
      if (v24)
      {
        BOOL v18 = v23;
        char v23 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v8);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
      }
      goto LABEL_25;
    }
    WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>(a1, v10, (uint64_t)&v27);
    char v11 = v28;
    if (v28)
    {
      char v11 = *(unsigned char *)(a2 + 128);
      if (v11)
      {
        char v11 = v22;
        if (v22)
        {
          char v11 = v24;
          if (v24)
          {
            char v11 = v26;
            if (v26)
            {
              *(_WORD *)a4 = *(_WORD *)a2;
              *(unsigned char *)(a4 + objc_destroyWeak(this + 2) = *(unsigned char *)(a2 + 2);
              *(unsigned char *)(a4 + 8) = 0;
              *(unsigned char *)(a4 + 16) = 0;
              if (*(unsigned char *)(a2 + 16))
              {
                uint64_t v19 = *(void *)(a2 + 8);
                *(void *)(a2 + 8) = 0;
                *(void *)(a4 + 8) = v19;
                *(unsigned char *)(a4 + 16) = 1;
              }
              *(unsigned char *)(a4 + 24) = 0;
              *(unsigned char *)(a4 + 3objc_destroyWeak(this + 2) = 0;
              if (*(unsigned char *)(a2 + 32))
              {
                uint64_t v12 = *(void *)(a2 + 24);
                *(void *)(a2 + 24) = 0;
                *(void *)(a4 + 24) = v12;
                *(unsigned char *)(a4 + 3objc_destroyWeak(this + 2) = 1;
              }
              *(unsigned char *)(a4 + 40) = 0;
              *(unsigned char *)(a4 + 48) = 0;
              if (*(unsigned char *)(a2 + 48))
              {
                uint64_t v20 = *(void *)(a2 + 40);
                *(void *)(a2 + 40) = 0;
                *(void *)(a4 + 40) = v20;
                *(unsigned char *)(a4 + 48) = 1;
              }
              std::__optional_move_base<WebCore::ApplePayPaymentOrderDetails,false>::__optional_move_base[abi:sn180100](a4 + 56, (uint64_t *)(a2 + 56));
              *(unsigned char *)(a4 + 96) = 0;
              *(unsigned char *)(a4 + 120) = 0;
              if (*(unsigned char *)(a2 + 120))
              {
                long long v13 = *(_OWORD *)(a2 + 96);
                *(void *)(a2 + 96) = 0;
                *(void *)(a2 + 104) = 0;
                *(_OWORD *)(a4 + 96) = v13;
                uint64_t v14 = *(void *)(a2 + 112);
                *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
                *(void *)(a4 + 11objc_destroyWeak(this + 2) = v14;
                *(unsigned char *)(a4 + 120) = 1;
              }
              WTF::URL::URL(a4 + 128, (uint64_t *)v21);
              BOOL v15 = v23;
              char v23 = 0;
              *(void *)(a4 + 168) = v15;
              WTF::URL::URL(a4 + 176, (uint64_t *)v25);
              *(void *)(a4 + 216) = v27;
              char v11 = 1;
              goto LABEL_18;
            }
          }
        }
      }
      __break(1u);
    }
    *(unsigned char *)a4 = 0;
LABEL_18:
    *(unsigned char *)(a4 + 224) = v11;
    if (v26)
    {
      double v16 = v25[0];
      v25[0] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v8);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    goto LABEL_24;
  }
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 224) = 0;
LABEL_25:
  if (v22)
  {
    double v17 = v21[0];
    v21[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v8);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
}

WTF::StringImpl *WebKit::Daemon::Coder<WTF::URL,void>::decode<WebKit::Daemon::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned __int8 **a2@<X2>, unsigned char *a3@<X8>)
{
  LOBYTE(v7) = 0;
  char v8 = 0;
  uint64_t result = (WTF::StringImpl *)WebKit::Daemon::Decoder::operator>><WTF::String>(a1, (uint64_t)&v7, a2);
  if (v8)
  {
    MEMORY[0x19972E890](v6, &v7, 0);
    WTF::URL::URL((uint64_t)a3, (uint64_t *)v6);
    a3[40] = 1;
    uint64_t result = v6[0];
    v6[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (v8)
    {
      uint64_t result = v7;
      char v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[40] = 0;
  }
  return result;
}

uint64_t *WebKit::Daemon::Decoder::operator>><WTF::String>(uint64_t *a1, uint64_t a2, unsigned __int8 **a3)
{
  WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>(a1, a3, (uint64_t)&v8);
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(a2, (uint64_t)&v8);
  if (v9)
  {
    uint64_t v6 = v8;
    char v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

uint64_t *WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>@<X0>(uint64_t *result@<X0>, unsigned __int8 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = result[1];
  uint64_t v3 = result[2];
  if ((unint64_t)(v4 - v3) <= 3) {
    goto LABEL_4;
  }
  uint64_t v5 = *result;
  uint64_t v6 = (WTF::StringImpl *)*(unsigned int *)(*result + v3);
  uint64_t v7 = v3 + 4;
  result[2] = v3 + 4;
  if (v6 == -1)
  {
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 1;
  }
  else
  {
    if (v4 == v7)
    {
LABEL_4:
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 8) = 0;
      return result;
    }
    int v8 = *(unsigned __int8 *)(v5 + v7);
    result[2] = v3 + 5;
    if (v8) {
      return WebKit::Daemon::Coder<WTF::String,void>::decodeStringText<unsigned char,WebKit::Daemon::Decoder>(v6, result, a2, a3);
    }
    else {
      return (uint64_t *)WebKit::Daemon::Coder<WTF::String,void>::decodeStringText<char16_t,WebKit::Daemon::Decoder>((uint64_t)result, v6, a3);
    }
  }
  return result;
}

void *WebKit::Daemon::Coder<WTF::String,void>::decodeStringText<unsigned char,WebKit::Daemon::Decoder>@<X0>(WTF::StringImpl *this@<X1>, void *result@<X0>, unsigned __int8 **a3@<X2>, uint64_t a4@<X8>)
{
  if (result[1] - result[2] >= (unint64_t)this)
  {
    uint64_t v5 = result;
    size_t v6 = this;
    __dst[0] = 0;
    uint64_t result = (void *)WTF::StringImpl::createUninitialized((WTF::StringImpl *)this, (uint64_t)__dst, a3);
    int v8 = (WTF::StringImpl *)__dst[1];
    uint64_t v9 = v5[2];
    if (v5[1] - v9 >= v6)
    {
      uint64_t result = memcpy(__dst[0], (const void *)(*v5 + v9), v6);
      v5[2] += v6;
      *(void *)a4 = v8;
      *(unsigned char *)(a4 + 8) = 1;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 8) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          return (void *)WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 8) = 0;
  }
  return result;
}

uint64_t WebKit::Daemon::Coder<WTF::String,void>::decodeStringText<char16_t,WebKit::Daemon::Decoder>@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(void *)(result + 8) - *(void *)(result + 16) >= 2 * (unint64_t)a2)
  {
    uint64_t v4 = (void *)result;
    size_t v5 = 2 * a2;
    uint64_t result = WTF::StringImpl::createUninitialized();
    uint64_t v7 = v4[2];
    if (v4[1] - v7 >= v5)
    {
      uint64_t result = (uint64_t)memcpy(0, (const void *)(*v4 + v7), v5);
      v4[2] += v5;
      *(void *)a3 = v8;
      *(unsigned char *)(a3 + 8) = 1;
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 8) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          return WTF::StringImpl::destroy(v8, v6);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t *std::__optional_storage_base<std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>,false>>(uint64_t *result, uint64_t a2)
{
  if (*((unsigned __int8 *)result + 224) == *(unsigned __int8 *)(a2 + 224))
  {
    if (*((unsigned char *)result + 224))
    {
      return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>,std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>,WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String,0ul,1ul,2ul,3ul,4ul>((uint64_t)result, (__int16 *)a2);
    }
  }
  else if (*((unsigned char *)result + 224))
  {
    uint64_t result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>::~__tuple_impl(result, (WTF::StringImpl *)a2);
    *((unsigned char *)result + 224) = 0;
  }
  else
  {
    uint64_t result = (uint64_t *)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>::__tuple_impl((uint64_t)result, (uint64_t *)a2);
    *((unsigned char *)result + 224) = 1;
  }
  return result;
}

uint64_t *std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>,std::tuple<WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>,WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String,0ul,1ul,2ul,3ul,4ul>(uint64_t a1, __int16 *a2)
{
  __int16 v4 = *a2;
  *(unsigned char *)(a1 + objc_destroyWeak(this + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)a1 = v4;
  std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((uint64_t *)(a1 + 8), (uint64_t *)a2 + 1);
  std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((uint64_t *)(a1 + 24), (uint64_t *)a2 + 3);
  std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((uint64_t *)(a1 + 40), (uint64_t *)a2 + 5);
  std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationUnlinkableToken,false>>(a1 + 56, (uint64_t *)a2 + 7);
  std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>((uint64_t *)(a1 + 96), (uint64_t)(a2 + 48));
  WTF::URL::operator=(a1 + 128, (uint64_t)(a2 + 64));
  WTF::String::operator=((uint64_t *)(a1 + 168), (uint64_t *)a2 + 21);
  WTF::URL::operator=(a1 + 176, (uint64_t)(a2 + 88));

  return WTF::String::operator=((uint64_t *)(a1 + 216), (uint64_t *)a2 + 27);
}

void *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>::~__tuple_impl(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[27];
  a1[27] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  __int16 v4 = (WTF::StringImpl *)a1[22];
  a1[22] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  size_t v5 = (WTF::StringImpl *)a1[21];
  a1[21] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  size_t v6 = (WTF::StringImpl *)a1[16];
  a1[16] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 12), a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 7), v7);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 5), v8);
  std::optional<WebCore::PublicSuffix>::~optional((uint64_t)(a1 + 3), v9);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 1), v10);
  return a1;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>::__tuple_impl(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = std::__tuple_leaf<0ul,WebCore::PCM::AttributionTriggerData,false>::__tuple_leaf[abi:sn180100](a1, (uint64_t)a2);
  WTF::URL::URL(v4 + 128, a2 + 16);
  uint64_t v5 = a2[21];
  a2[21] = 0;
  *(void *)(a1 + 168) = v5;
  WTF::URL::URL(a1 + 176, a2 + 22);
  uint64_t v6 = a2[27];
  a2[27] = 0;
  *(void *)(a1 + 216) = v6;
  return a1;
}

uint64_t std::__tuple_leaf<0ul,WebCore::PCM::AttributionTriggerData,false>::__tuple_leaf[abi:sn180100](uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 2);
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + objc_destroyWeak(this + 2) = v4;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v10 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a1 + 8) = v10;
    *(unsigned char *)(a1 + 16) = 1;
  }
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    *(void *)(a1 + 24) = v5;
    *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 1;
  }
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v11 = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    *(void *)(a1 + 40) = v11;
    *(unsigned char *)(a1 + 48) = 1;
  }
  std::__optional_move_base<WebCore::ApplePayPaymentOrderDetails,false>::__optional_move_base[abi:sn180100](a1 + 56, (uint64_t *)(a2 + 56));
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (*(unsigned char *)(a2 + 120))
  {
    uint64_t v6 = *(void *)(a2 + 96);
    *(void *)(a2 + 96) = 0;
    *(void *)(a1 + 96) = v6;
    uint64_t v7 = *(void *)(a2 + 104);
    *(void *)(a2 + 104) = 0;
    *(void *)(a1 + 104) = v7;
    uint64_t v8 = *(void *)(a2 + 112);
    *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
    *(void *)(a1 + 11objc_destroyWeak(this + 2) = v8;
    *(unsigned char *)(a1 + 120) = 1;
  }
  return a1;
}

void *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo5clearEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9BF0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo5clearEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9BF0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo5clearEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  char v4 = 0;
  uint64_t v5 = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = v4;
  if (v4)
  {
    char v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo25clearForRegistrableDomainEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9C18;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo25clearForRegistrableDomainEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9C18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo25clearForRegistrableDomainEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  char v4 = 0;
  uint64_t v5 = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = v4;
  if (v4)
  {
    char v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

uint64_t *WebKit::Daemon::Decoder::operator>><std::tuple<WebCore::PrivateClickMeasurement,WebKit::PrivateClickMeasurementAttributionType>>(uint64_t *a1, WebCore::PrivateClickMeasurement *a2, unsigned __int8 **a3)
{
  IPC::ArgumentCoder<std::tuple<WebCore::PrivateClickMeasurement,WebKit::PrivateClickMeasurementAttributionType>,void>::decode<WebKit::Daemon::Decoder>(a1, a3, v7);
  std::__optional_storage_base<std::tuple<WebCore::PrivateClickMeasurement,WebKit::PrivateClickMeasurementAttributionType>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebCore::PrivateClickMeasurement,WebKit::PrivateClickMeasurementAttributionType>,false>>(a2, (WTF::StringImpl *)v7);
  if (v7[320]) {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v7, v5);
  }
  return a1;
}

void IPC::ArgumentCoder<std::tuple<WebCore::PrivateClickMeasurement,WebKit::PrivateClickMeasurementAttributionType>,void>::decode<WebKit::Daemon::Decoder>(uint64_t *a1@<X0>, unsigned __int8 **a2@<X2>, unsigned char *a3@<X8>)
{
  WebKit::Daemon::Coder<WebCore::PrivateClickMeasurement,void>::decode(a1, a2, (uint64_t)v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::PrivateClickMeasurement,WebKit::PrivateClickMeasurementAttributionType>,void>::decode<WebKit::Daemon::Decoder,WebCore::PrivateClickMeasurement>(a1, (uint64_t)v6, a3);
    if (v7) {
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v6, v5);
    }
  }
  else
  {
    *a3 = 0;
    a3[320] = 0;
  }
}

void *IPC::ArgumentCoder<std::tuple<WebCore::PrivateClickMeasurement,WebKit::PrivateClickMeasurementAttributionType>,void>::decode<WebKit::Daemon::Decoder,WebCore::PrivateClickMeasurement>@<X0>(void *result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = result[2];
  if (result[1] == v4)
  {
    char v5 = 0;
    *a3 = 0;
LABEL_5:
    a3[320] = v5;
    return result;
  }
  char v6 = *(unsigned char *)(*result + v4);
  result[2] = v4 + 1;
  if (*(unsigned char *)(a2 + 312))
  {
    uint64_t result = (void *)WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)a3, a2);
    a3[312] = v6;
    char v5 = 1;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void std::__optional_storage_base<std::tuple<WebCore::PrivateClickMeasurement,WebKit::PrivateClickMeasurementAttributionType>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebCore::PrivateClickMeasurement,WebKit::PrivateClickMeasurementAttributionType>,false>>(WebCore::PrivateClickMeasurement *this, WTF::StringImpl *a2)
{
  if (*((unsigned __int8 *)this + 320) == *((unsigned __int8 *)a2 + 320))
  {
    if (*((unsigned char *)this + 320))
    {
      WebCore::PrivateClickMeasurement::operator=((uint64_t)this, (uint64_t)a2);
      *((unsigned char *)this + 31objc_destroyWeak(this + 2) = *((unsigned char *)a2 + 312);
    }
  }
  else if (*((unsigned char *)this + 320))
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(this, a2);
    *((unsigned char *)this + 320) = 0;
  }
  else
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)this, (uint64_t)a2);
    *((unsigned char *)this + 31objc_destroyWeak(this + 2) = *((unsigned char *)a2 + 312);
    *((unsigned char *)this + 320) = 1;
  }
}

void *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo18toStringForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJNS_6StringEEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9C40;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo18toStringForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJNS_6StringEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9C40;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo18toStringForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJNS_6StringEEE4callESO_(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    *(_DWORD *)v3 += 2;
  }
  uint64_t v8 = v3;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v11, (uint64_t *)&v8);
  uint64_t v9 = v11;
  uint64_t v10 = v12;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v4 + 16))(v4, &v9);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  char v6 = v9;
  if (v9)
  {
    uint64_t v9 = 0;
    LODWORD(v10) = 0;
    WTF::fastFree(v6, v5);
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WebKit::Daemon::Decoder::operator>><std::tuple<WTF::URL>>(uint64_t *a1, WTF::StringImpl *a2, unsigned __int8 **a3)
{
  IPC::ArgumentCoder<std::tuple<WTF::URL>,void>::decode<WebKit::Daemon::Decoder>(a1, a3, v8);
  std::__optional_storage_base<WTF::URL,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::URL,false>>(a2, (unsigned __int8 *)v8);
  if (v9)
  {
    char v6 = v8[0];
    v8[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

void IPC::ArgumentCoder<std::tuple<WTF::URL>,void>::decode<WebKit::Daemon::Decoder>(uint64_t *a1@<X0>, unsigned __int8 **a2@<X2>, unsigned char *a3@<X8>)
{
  WebKit::Daemon::Coder<WTF::URL,void>::decode<WebKit::Daemon::Decoder>(a1, a2, v7);
  if (v8)
  {
    WTF::URL::URL((uint64_t)a3, (uint64_t *)v7);
    int v5 = v8;
    a3[40] = 1;
    if (v5)
    {
      char v6 = v7[0];
      v7[0] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, v4);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[40] = 0;
  }
}

uint64_t *WebKit::Daemon::Decoder::operator>><std::tuple<WTF::URL,WTF::URL>>(uint64_t *a1, uint64_t a2, unsigned __int8 **a3)
{
  IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::URL>,void>::decode<WebKit::Daemon::Decoder>(a1, a3, v7);
  std::__optional_storage_base<std::tuple<WTF::URL,WTF::URL>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::URL,WTF::URL>,false>>(a2, (uint64_t)v7);
  std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  return a1;
}

void IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::URL>,void>::decode<WebKit::Daemon::Decoder>(uint64_t *a1@<X0>, unsigned __int8 **a2@<X2>, unsigned char *a3@<X8>)
{
  WebKit::Daemon::Coder<WTF::URL,void>::decode<WebKit::Daemon::Decoder>(a1, a2, v8);
  if (v9)
  {
    IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::URL>,void>::decode<WebKit::Daemon::Decoder,WTF::URL>(a1, (uint64_t)v8, v5, a3);
    if (v9)
    {
      char v7 = v8[0];
      v8[0] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v6);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[80] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::URL>,void>::decode<WebKit::Daemon::Decoder,WTF::URL>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X2>, unsigned char *a4@<X8>)
{
  WebKit::Daemon::Coder<WTF::URL,void>::decode<WebKit::Daemon::Decoder>(a1, a3, v8);
  if (!v9) {
    goto LABEL_10;
  }
  if (!*(unsigned char *)(a2 + 40))
  {
    __break(1u);
LABEL_10:
    *a4 = 0;
    a4[80] = 0;
    return;
  }
  WTF::URL::URL((uint64_t)a4, (uint64_t *)a2);
  WTF::URL::URL((uint64_t)(a4 + 40), (uint64_t *)v8);
  a4[80] = 1;
  if (v9)
  {
    char v7 = v8[0];
    v8[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
}

void std::__optional_storage_base<std::tuple<WTF::URL,WTF::URL>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::URL,WTF::URL>,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      WTF::URL::operator=(a1, a2);
      WTF::URL::operator=(a1 + 40, a2 + 40);
    }
  }
  else if (*(unsigned char *)(a1 + 80))
  {
    std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL>,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    WTF::URL::URL(a1, (uint64_t *)a2);
    WTF::URL::URL(a1 + 40, (uint64_t *)(a2 + 40));
    *(unsigned char *)(a1 + 80) = 1;
  }
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL>,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(result + 80))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(WTF::StringImpl **)(result + 40);
    *(void *)(v2 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t result = *(void *)v2;
    *(void *)uint64_t v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *(unsigned char *)(v2 + 80) = 0;
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

void *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo57markAttributedPrivateClickMeasurementsAsExpiredForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9C68;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo57markAttributedPrivateClickMeasurementsAsExpiredForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9C68;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo57markAttributedPrivateClickMeasurementsAsExpiredForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = v4;
  if (v4)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

uint64_t *WebKit::Daemon::Decoder::operator>><std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>>(uint64_t *a1, uint64_t *a2, unsigned __int8 **a3)
{
  IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,void>::decode<WebKit::Daemon::Decoder>(a1, a3, v7);
  std::__optional_storage_base<std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,false>>(a2, v7);
  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  return a1;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,void>::decode<WebKit::Daemon::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned __int8 **a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t result = (WTF::StringImpl *)WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>(a1, a2, (uint64_t)&v8);
  if (v9)
  {
    uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,void>::decode<WebKit::Daemon::Decoder,WTF::String>(a1, (uint64_t *)&v8, v6, (uint64_t)a3);
    if (v9)
    {
      uint64_t result = v8;
      unsigned __int8 v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,void>::decode<WebKit::Daemon::Decoder,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = (WTF::StringImpl *)WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>(a1, a3, (uint64_t)&v15);
  if (!v16) {
    goto LABEL_15;
  }
  uint64_t result = (WTF::StringImpl *)WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>(a1, v8, (uint64_t)&v17);
  if (!v18)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 3objc_destroyWeak(this + 2) = 0;
    goto LABEL_8;
  }
  uint64_t result = (WTF::StringImpl *)WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>(a1, v10, (uint64_t)&v19);
  if (!v20)
  {
    *(unsigned char *)a4 = 0;
    int v14 = v18;
    *(unsigned char *)(a4 + 3objc_destroyWeak(this + 2) = 0;
    if (v14)
    {
      uint64_t result = v17;
      double v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    goto LABEL_8;
  }
  if (!*((unsigned char *)a2 + 8) || !v16 || !v18)
  {
    __break(1u);
LABEL_15:
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 3objc_destroyWeak(this + 2) = 0;
    return result;
  }
  uint64_t v11 = *a2;
  *a2 = 0;
  uint64_t v12 = v15;
  BOOL v15 = 0;
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v12;
  uint64_t v13 = v19;
  *(void *)(a4 + 16) = v17;
  *(void *)(a4 + 24) = v13;
  *(unsigned char *)(a4 + 3objc_destroyWeak(this + 2) = 1;
LABEL_8:
  if (v16)
  {
    uint64_t result = v15;
    BOOL v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t *std::__optional_storage_base<std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,false>>(uint64_t *a1, uint64_t *a2)
{
  if (*((unsigned __int8 *)a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*((unsigned char *)a1 + 32)) {
      return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,WTF::String,WTF::String,WTF::String,WTF::String,0ul,1ul,2ul,3ul>(a1, a2);
    }
  }
  else if (*((unsigned char *)a1 + 32))
  {
    return (uint64_t *)std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,false>::reset[abi:sn180100]((uint64_t)a1, (WTF::StringImpl *)a2);
  }
  else
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    *a1 = v2;
    uint64_t v3 = a2[1];
    a2[1] = 0;
    a1[1] = v3;
    uint64_t v4 = a2[2];
    a2[2] = 0;
    a1[2] = v4;
    uint64_t v5 = a2[3];
    a2[3] = 0;
    a1[3] = v5;
    *((unsigned char *)a1 + 3objc_destroyWeak(this + 2) = 1;
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(result + 32))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(WTF::StringImpl **)(result + 24);
    *(void *)(v2 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t result = *(void *)v2;
    *(void *)uint64_t v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *(unsigned char *)(v2 + 3objc_destroyWeak(this + 2) = 0;
  }
  return result;
}

uint64_t *std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,std::tuple<WTF::String,WTF::String,WTF::String,WTF::String>,WTF::String,WTF::String,WTF::String,WTF::String,0ul,1ul,2ul,3ul>(uint64_t *a1, uint64_t *a2)
{
  WTF::String::operator=(a1, a2);
  WTF::String::operator=(a1 + 1, a2 + 1);
  WTF::String::operator=(a1 + 2, a2 + 2);

  return WTF::String::operator=(a1 + 3, a2 + 3);
}

uint64_t *WebKit::Daemon::Decoder::operator>><std::tuple<WTF::String>>(uint64_t *a1, uint64_t *a2, unsigned __int8 **a3)
{
  WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>(a1, a3, (uint64_t)&v11);
  char v5 = v12;
  if (v12)
  {
    char v9 = v11;
    char v5 = 1;
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  char v10 = v5;
  std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(a2, (uint64_t *)&v9);
  if (v10)
  {
    char v7 = v9;
    char v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return a1;
}

void *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo22destroyStoreForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9C90;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo22destroyStoreForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9C90;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo22destroyStoreForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = v4;
  if (v4)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

uint64_t *WebKit::Daemon::Decoder::operator>><std::tuple<WebCore::CertificateInfo>>(uint64_t *a1, uint64_t a2)
{
  WebKit::Daemon::Coder<WebCore::CertificateInfo,void>::decode(a1, (uint64_t)&v9);
  char v4 = v10;
  if (v10)
  {
    CFTypeRef cf = v9;
    char v4 = 1;
  }
  else
  {
    LOBYTE(cf) = 0;
  }
  char v8 = v4;
  std::__optional_storage_base<std::tuple<WebCore::CertificateInfo>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebCore::CertificateInfo>,false>>(a2, (uint64_t *)&cf);
  if (v8)
  {
    CFTypeRef v5 = cf;
    CFTypeRef cf = 0;
    if (v5) {
      CFRelease(v5);
    }
  }
  return a1;
}

void std::__optional_storage_base<std::tuple<WebCore::CertificateInfo>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebCore::CertificateInfo>,false>>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v2 = *a2;
      *a2 = 0;
      uint64_t v3 = *(const void **)a1;
      *(void *)a1 = v2;
      if (v3)
      {
        CFRelease(v3);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 8))
  {
    char v4 = *(const void **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      uint64_t v6 = a1;
      CFRelease(v4);
      a1 = v6;
    }
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = 1;
  }
}

void *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE0EJRN7WebCore23PrivateClickMeasurementEEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9CB8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE0EJRN7WebCore23PrivateClickMeasurementEEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9CB8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE0EJRN7WebCore23PrivateClickMeasurementEEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(WTF **)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v2)
  {
    return WTF::fastFree(v2, v5);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE2EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9CE0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE2EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9CE0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE2EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(WTF **)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v2)
  {
    return WTF::fastFree(v2, v5);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE3EJRN7WebCore17RegistrableDomainEEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9D08;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE3EJRN7WebCore17RegistrableDomainEEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9D08;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE3EJRN7WebCore17RegistrableDomainEEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(WTF **)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v2)
  {
    return WTF::fastFree(v2, v5);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE6EJEJNS_6StringEEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9D30;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE6EJEJNS_6StringEEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9D30;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE6EJEJNS_6StringEEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(WTF **)a2;
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  v10[0] = (uint64_t)v3;
  v10[1] = v4;
  v10[2] = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v5 = &unk_1EE9C4A18;
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  v5[1] = v6;
  LOBYTE(v1objc_destroyWeak(this + 2) = 0;
  char v13 = 0;
  WebKit::Daemon::Decoder::operator>><WTF::String>(v10, (uint64_t)&v12, v7);
  if (v13)
  {
    (*(void (**)(void *, WTF::StringImpl **))(*v5 + 16))(v5, &v12);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  else
  {
    uint64_t v11 = 0;
    (*(void (**)(void *, WTF::StringImpl **))(*v5 + 16))(v5, &v11);
    (*(void (**)(void *))(*v5 + 8))(v5);
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!v13 || (uint64_t result = v12, v12 = 0, !result))
  {
LABEL_11:
    if (!v3) {
      return result;
    }
    return (WTF::StringImpl *)WTF::fastFree(v3, v9);
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_11;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  if (!v3) {
    return result;
  }
  return (WTF::StringImpl *)WTF::fastFree(v3, v9);
}

void *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE12EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9D58;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE12EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9D58;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE12EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(WTF **)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v2)
  {
    return WTF::fastFree(v2, v5);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE16EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9D80;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE16EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9D80;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE16EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(WTF **)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v2)
  {
    return WTF::fastFree(v2, v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::PersistentStore(WTF::String const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C9DA8;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::PersistentStore(WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C9DA8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::PersistentStore(WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::PCM::PersistentStore::PersistentStore(WTF::String const&)::$_0::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::PCM::PersistentStore::PersistentStore(WTF::String const&)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (WebKit::PCM::Database *)WTF::fastMalloc((WTF *)0xD8);
  WebKit::PCM::Database::Database(v3, (const WTF::String *)a1[2]);
  uint64_t result = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = v3;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 64);
    return v5();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::insertPrivateClickMeasurement(WebCore::PrivateClickMeasurement &&,WebKit::PrivateClickMeasurementAttributionType,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C9DD0;
  uint64_t v3 = a1[43];
  a1[43] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::insertPrivateClickMeasurement(WebCore::PrivateClickMeasurement &&,WebKit::PrivateClickMeasurementAttributionType,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C9DD0;
  uint64_t v3 = a1[43];
  a1[43] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  uint64_t v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::insertPrivateClickMeasurement(WebCore::PrivateClickMeasurement &&,WebKit::PrivateClickMeasurementAttributionType,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 16);
  if (v2) {
    WebKit::PCM::Database::insertPrivateClickMeasurement(v2, a1 + 24, *(unsigned __int8 *)(a1 + 336));
  }
  uint64_t v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, (uint64_t *)(a1 + 344));
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::markAllUnattributedPrivateClickMeasurementAsExpiredForTesting(void)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C9DF8;
  uint64_t v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::markAllUnattributedPrivateClickMeasurementAsExpiredForTesting(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C9DF8;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::markAllUnattributedPrivateClickMeasurementAsExpiredForTesting(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    WebKit::DatabaseUtilities::scopedStatement(*(void *)(*(void *)(a1 + 8) + 16), (WebCore::SQLiteStatement **)(v1 + 104), (uint64_t)"markAllUnattributedPrivateClickMeasurementAsExpiredForTesting", (WebCore::SQLiteStatementAutoResetScope *)&v4);
    if (!v4 || WebCore::SQLiteStatement::step(v4) != 101)
    {
      uint64_t v2 = qword_1EB3582F8;
      if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v1 + 16));
        *(_DWORD *)long long buf = 134218243;
        uint64_t v6 = v1;
        __int16 v7 = 2081;
        uint64_t v8 = ErrorMsg;
        _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - Database::markAllUnattributedPrivateClickMeasurementAsExpiredForTesting, error message: %{private}s", buf, 0x16u);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v4);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C9E20;
  WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WebCore::PCM::AttributionDestinationSite &::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C9E20;
  WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WebCore::PCM::AttributionDestinationSite &::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::~$_0((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(WebCore::SQLiteStatement ***)(v2 + 16);
  if (!v3)
  {
    uint64_t v15 = *(void *)(a1 + 184);
    *(void *)(a1 + 184) = 0;
    char v16 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(void *)char v16 = &unk_1EE9C9E48;
    *((void *)v16 + 1) = v15;
    *(void *)long long buf = v16;
    WTF::RunLoop::main(v16);
    WTF::RunLoop::dispatch();
    uint64_t result = *(unsigned int **)buf;
    *(void *)long long buf = 0;
    if (result) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
    return result;
  }
  WebKit::PCM::Database::clearExpiredPrivateClickMeasurement(*(WebCore::SQLiteStatement ***)(v2 + 16));
  unsigned int v4 = *(unsigned __int8 *)(a1 + 48);
  if (v4 > 0xF || (unsigned int v5 = *(unsigned __int8 *)(a1 + 49), v5 >= 0x40))
  {
    unsigned __int8 v18 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_INFO, "Got an invalid attribution.", buf, 2u);
    }
    LOBYTE(v9objc_destroyWeak(this + 2) = 2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v19 = WTF::fastMalloc((WTF *)0x10);
    uint64_t v21 = v19;
    *(unsigned char *)uint64_t v19 = (_BYTE)v92;
    char v22 = v93;
    if (v93) {
      *(_DWORD *)v93 += 2;
    }
    *(void *)(v19 + 8) = v22;
    v96[0] = 0;
    char v97 = 0;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v98 = v19;
    unint64_t v99 = 0x100000001;
    WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)buf, v20);
    char v24 = v93;
    long long v93 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    *(_OWORD *)long long buf = *(_OWORD *)v96;
    *(_OWORD *)&buf[16] = *(_OWORD *)&v96[16];
    LOBYTE(v86) = v97;
    unint64_t v42 = v21 + 16;
LABEL_71:
    while (1)
    {
      LOBYTE(v9objc_destroyWeak(this + 2) = *(unsigned char *)v21;
      uint64_t v44 = v21 + 8;
      WTF::String::isolatedCopy();
      *(unsigned char *)uint64_t v21 = (_BYTE)v92;
      long long v46 = v93;
      long long v93 = 0;
      long long v47 = *(WTF::StringImpl **)(v21 + 8);
      *(void *)(v21 + 8) = v46;
      if (v47)
      {
        int v48 = *(_DWORD *)v47 - 2;
        if (*(_DWORD *)v47 != 2) {
          goto LABEL_75;
        }
        WTF::StringImpl::destroy(v47, v45);
        long long v47 = v93;
        long long v93 = 0;
        if (v47) {
          break;
        }
      }
LABEL_76:
      v21 += 16;
      if (v44 + 8 >= v42)
      {
        uint64_t v21 = v98;
        int v43 = HIDWORD(v99);
        goto LABEL_79;
      }
    }
    int v48 = *(_DWORD *)v47 - 2;
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::destroy(v47, v49);
      goto LABEL_76;
    }
LABEL_75:
    *(_DWORD *)long long v47 = v48;
    goto LABEL_76;
  }
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v6 = qword_1EB3582F8;
  if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v4;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v5;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_INFO, "Got an attribution with attribution trigger data: %u and priority: %u.", buf, 0xEu);
  }
  buf[0] = 4;
  WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(&buf[8], "[Private Click Measurement] Got an attribution with attribution trigger data: '", 80, v4, v5, "'.", 3);
  unint64_t v7 = WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v81, 1uLL, (unint64_t)buf);
  int v9 = HIDWORD(v82);
  uint64_t v10 = v81;
  uint64_t v11 = v81 + 16 * HIDWORD(v82);
  *(unsigned char *)uint64_t v11 = *(unsigned char *)v7;
  uint64_t v12 = *(void *)(v7 + 8);
  *(void *)(v7 + 8) = 0;
  *(void *)(v11 + 8) = v12;
  uint64_t v13 = (v9 + 1);
  HIDWORD(v8objc_destroyWeak(this + 2) = v9 + 1;
  int v14 = *(WTF::StringImpl **)&buf[8];
  *(void *)&uint8_t buf[8] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v8);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  unint64_t v25 = WebKit::PCM::Database::domainID(v3, (const WebCore::RegistrableDomain *)(a1 + 24));
  unint64_t v26 = WebKit::PCM::Database::domainID(v3, (const WebCore::RegistrableDomain *)(a1 + 32));
  if (!HIDWORD(v25) || !HIDWORD(v26))
  {
    buf[0] = 0;
    char v89 = 0;
    v90[0] = 0;
    char v91 = 0;
    goto LABEL_60;
  }
  uint64_t v79 = v10;
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)v3, v3 + 14, (uint64_t)"findPrivateClickMeasurement", (WebCore::SQLiteStatementAutoResetScope *)&v84);
  if (!v84
    || WebCore::SQLiteStatement::bindInt(v84)
    || WebCore::SQLiteStatement::bindInt(v84)
    || WebCore::SQLiteStatement::bindText())
  {
    char v28 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v3 + 2));
      *(_DWORD *)long long buf = 134218243;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&buf[14] = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v28, OS_LOG_TYPE_ERROR, "%p - Database::findPrivateClickMeasurement findUnattributedQuery, error message: %{private}s", buf, 0x16u);
    }
  }
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)v3, v3 + 15, (uint64_t)"findPrivateClickMeasurement", (WebCore::SQLiteStatementAutoResetScope *)&v83);
  if (!v83
    || WebCore::SQLiteStatement::bindInt(v83)
    || WebCore::SQLiteStatement::bindInt(v83)
    || WebCore::SQLiteStatement::bindText())
  {
    long long v29 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v73 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v3 + 2));
      *(_DWORD *)long long buf = 134218243;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&buf[14] = v73;
      _os_log_error_impl(&dword_1985F2000, v29, OS_LOG_TYPE_ERROR, "%p - Database::findPrivateClickMeasurement findAttributedQuery, error message: %{private}s", buf, 0x16u);
    }
  }
  v96[0] = 0;
  char v100 = 0;
  if (WebCore::SQLiteStatement::step(v84) == 100)
  {
    WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase(v84, (uint64_t)v3, 0, (uint64_t)buf);
    std::optional<WebCore::PrivateClickMeasurement>::operator=[abi:sn180100]<WebCore::PrivateClickMeasurement,void>((uint64_t)v96, (uint64_t)buf);
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v30);
  }
  LOBYTE(v9objc_destroyWeak(this + 2) = 0;
  char v95 = 0;
  if (WebCore::SQLiteStatement::step(v83) == 100)
  {
    WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase(v83, (uint64_t)v3, 1, (uint64_t)buf);
    std::optional<WebCore::PrivateClickMeasurement>::operator=[abi:sn180100]<WebCore::PrivateClickMeasurement,void>((uint64_t)&v92, (uint64_t)buf);
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v31);
  }
  buf[0] = 0;
  char v89 = 0;
  uint64_t v10 = v79;
  if (v100)
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, (const WebCore::PrivateClickMeasurement *)v96);
    char v89 = 1;
  }
  v90[0] = 0;
  char v91 = 0;
  if (v95)
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v90, (const WebCore::PrivateClickMeasurement *)&v92);
    char v91 = 1;
    if (v95) {
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v92, v27);
    }
  }
  if (v100) {
    goto LABEL_121;
  }
  while (1)
  {
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v83);
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v84);
    if (v89)
    {
      unint64_t v32 = WebKit::PCM::Database::domainID(v3, (const WebCore::RegistrableDomain *)&buf[8]);
      unint64_t v33 = WebKit::PCM::Database::domainID(v3, (const WebCore::RegistrableDomain *)&buf[16]);
      if (HIDWORD(v32) && HIDWORD(v33))
      {
        WebKit::DatabaseUtilities::scopedStatement((uint64_t)v3, v3 + 16, (uint64_t)"removeUnattributed", (WebCore::SQLiteStatementAutoResetScope *)&v92);
        if (!v92
          || WebCore::SQLiteStatement::bindInt(v92)
          || WebCore::SQLiteStatement::bindInt(v92)
          || WebCore::SQLiteStatement::bindText()
          || WebCore::SQLiteStatement::step(v92) != 101)
        {
          int8x16_t v34 = qword_1EB3582F8;
          if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v76 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v3 + 2));
            *(_DWORD *)uint64_t v96 = 134218243;
            *(void *)&v96[4] = v3;
            *(_WORD *)&v96[12] = 2081;
            *(void *)&v96[14] = v76;
            _os_log_error_impl(&dword_1985F2000, v34, OS_LOG_TYPE_ERROR, "%p - Database::removeUnattributed, error message: %{private}s", v96, 0x16u);
          }
        }
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v92);
      }
      if (!v89) {
        goto LABEL_122;
      }
      WebCore::PrivateClickMeasurement::attributeAndGetEarliestTimeToSend();
      LODWORD(v9objc_destroyWeak(this + 2) = *(_DWORD *)&v96[1];
      *(_DWORD *)((char *)&v92 + 3) = *(_DWORD *)&v96[4];
      uint64_t v10 = v96[8];
      LODWORD(v84) = *(_DWORD *)&v96[9];
      *(_DWORD *)((char *)&v84 + 3) = *(_DWORD *)&v96[12];
      char v35 = v96[16];
      LODWORD(v83) = *(_DWORD *)&v96[17];
      *(_DWORD *)((char *)&v83 + 3) = *(_DWORD *)&v96[20];
      char v36 = v96[24];
      *(_DWORD *)&v80[3] = *(_DWORD *)&v96[28];
      *(_DWORD *)int8x16x2_t v80 = *(_DWORD *)&v96[25];
      if (!v96[8] || !v96[24])
      {
        v96[0] = 0;
        char v97 = 0;
        uint64_t v81 = 0;
        uint64_t v98 = v79;
        goto LABEL_61;
      }
      char v78 = v96[0];
      int v37 = qword_1EB3582F8;
      if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v96 = 67109376;
        *(_DWORD *)&v96[4] = v4;
        *(_WORD *)&v96[8] = 1024;
        *(_DWORD *)&v96[10] = v5;
        _os_log_impl(&dword_1985F2000, v37, OS_LOG_TYPE_INFO, "Converted a stored ad click with attribution trigger data: %u and priority: %u.", v96, 0xEu);
      }
      v96[0] = 4;
      int v38 = (uint64_t *)&v96[8];
      WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(&v96[8], "[Private Click Measurement] Converted a stored ad click with attribution trigger data: '", 89, v4, v5, "'.", 3);
      if (v13 == v82)
      {
        __int16 v39 = (unsigned char *)WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v81, v13 + 1, (unint64_t)v96);
        uint64_t v13 = HIDWORD(v82);
        uint64_t v79 = v81;
        uint64_t v40 = v81 + 16 * HIDWORD(v82);
        int v38 = (uint64_t *)(v39 + 8);
        *(unsigned char *)uint64_t v40 = *v39;
      }
      else
      {
        uint64_t v40 = v79 + 16 * v13;
        *(unsigned char *)uint64_t v40 = v96[0];
      }
      uint64_t v62 = *v38;
      *int v38 = 0;
      *(void *)(v40 + 8) = v62;
      uint64_t v63 = (v13 + 1);
      HIDWORD(v8objc_destroyWeak(this + 2) = v13 + 1;
      long long v64 = *(WTF::StringImpl **)&v96[8];
      *(void *)&v96[8] = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2) {
          WTF::StringImpl::destroy(v64, v27);
        }
        else {
          *(_DWORD *)v64 -= 2;
        }
      }
      if (v91)
      {
        if (!v89) {
          goto LABEL_122;
        }
        if (!WebCore::PrivateClickMeasurement::hasHigherPriorityThan((WebCore::PrivateClickMeasurement *)buf, (const WebCore::PrivateClickMeasurement *)v90))goto LABEL_112; {
      }
        }
      if (v89)
      {
        WebKit::PCM::Database::insertPrivateClickMeasurement((uint64_t)v3, (uint64_t)buf, 1);
        long long v65 = qword_1EB3582F8;
        if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t v96 = 67109376;
          *(_DWORD *)&v96[4] = v4;
          *(_WORD *)&v96[8] = 1024;
          *(_DWORD *)&v96[10] = v5;
          _os_log_impl(&dword_1985F2000, v65, OS_LOG_TYPE_INFO, "Replaced a previously converted ad click with a new one with attribution data: %u and priority: %u because it had higher priority.", v96, 0xEu);
        }
        v96[0] = 4;
        long long v66 = (uint64_t *)&v96[8];
        WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(&v96[8], "[Private Click Measurement] Replaced a previously converted ad click with a new one with attribution trigger data: '", 117, v4, v5, "' because it had higher priority.", 34);
        if (v63 == v82)
        {
          long long v67 = (unsigned char *)WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v81, v63 + 1, (unint64_t)v96);
          LODWORD(v63) = HIDWORD(v82);
          uint64_t v79 = v81;
          uint64_t v68 = v81 + 16 * HIDWORD(v82);
          long long v66 = (uint64_t *)(v67 + 8);
          *(unsigned char *)uint64_t v68 = *v67;
        }
        else
        {
          uint64_t v68 = v79 + 16 * v63;
          *(unsigned char *)uint64_t v68 = v96[0];
        }
        uint64_t v69 = *v66;
        *long long v66 = 0;
        *(void *)(v68 + 8) = v69;
        LODWORD(v63) = v63 + 1;
        long long v70 = *(WTF::StringImpl **)&v96[8];
        *(void *)&v96[8] = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2) {
            WTF::StringImpl::destroy(v70, v27);
          }
          else {
            *(_DWORD *)v70 -= 2;
          }
        }
LABEL_112:
        v96[0] = v78;
        *(_DWORD *)&v96[1] = v92;
        *(_DWORD *)&v96[4] = *(_DWORD *)((char *)&v92 + 3);
        v96[8] = v10;
        *(_DWORD *)&v96[9] = v84;
        *(_DWORD *)&v96[12] = *(_DWORD *)((char *)&v84 + 3);
        v96[16] = v35;
        *(_DWORD *)&v96[17] = v83;
        *(_DWORD *)&v96[20] = *(_DWORD *)((char *)&v83 + 3);
        v96[24] = v36;
        *(_DWORD *)&v96[28] = *(_DWORD *)&v80[3];
        *(_DWORD *)&v96[25] = *(_DWORD *)v80;
        char v97 = 1;
        uint64_t v98 = v79;
        unsigned int v71 = v82;
        uint64_t v81 = 0;
        uint64_t v82 = 0;
        unint64_t v99 = __PAIR64__(v63, v71);
        goto LABEL_62;
      }
      goto LABEL_120;
    }
    if (!v91
      || (WebCore::PrivateClickMeasurement::hasPreviouslyBeenReported((WebCore::PrivateClickMeasurement *)v90) & 1) != 0)
    {
      goto LABEL_60;
    }
    if (!v91)
    {
LABEL_122:
      int8x16x2_t v77 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned int *)WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v77);
    }
    WebCore::PrivateClickMeasurement::attributeAndGetEarliestTimeToSend();
    if (!(_BYTE)v93 || !v94) {
      goto LABEL_60;
    }
    if (v91) {
      break;
    }
LABEL_120:
    __break(1u);
LABEL_121:
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v96, v27);
  }
  WebKit::PCM::Database::insertPrivateClickMeasurement((uint64_t)v3, (uint64_t)v90, 1);
  long long v58 = qword_1EB3582F8;
  if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v96 = 67109376;
    *(_DWORD *)&v96[4] = v4;
    *(_WORD *)&v96[8] = 1024;
    *(_DWORD *)&v96[10] = v5;
    _os_log_impl(&dword_1985F2000, v58, OS_LOG_TYPE_INFO, "Re-converted an ad click with a new one with attribution trigger data: %u and priority: %u because it had higher priority.", v96, 0xEu);
  }
  v96[0] = 4;
  long long v59 = (uint64_t *)&v96[8];
  WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(&v96[8], "[Private Click Measurement] Re-converted an ad click with a new one with attribution trigger data: '", 101, v4, v5, "'' because it had higher priority.", 35);
  if (v13 == v82)
  {
    long long v60 = (unsigned char *)WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v81, v13 + 1, (unint64_t)v96);
    LODWORD(v13) = HIDWORD(v82);
    uint64_t v10 = v81;
    uint64_t v61 = v81 + 16 * HIDWORD(v82);
    long long v59 = (uint64_t *)(v60 + 8);
    *(unsigned char *)uint64_t v61 = *v60;
  }
  else
  {
    uint64_t v61 = v10 + 16 * v13;
    *(unsigned char *)uint64_t v61 = v96[0];
  }
  uint64_t v74 = *v59;
  *long long v59 = 0;
  *(void *)(v61 + 8) = v74;
  LODWORD(v13) = v13 + 1;
  HIDWORD(v8objc_destroyWeak(this + 2) = v13;
  int8x16x2_t v75 = *(WTF::StringImpl **)&v96[8];
  *(void *)&v96[8] = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2) {
      WTF::StringImpl::destroy(v75, v27);
    }
    else {
      *(_DWORD *)v75 -= 2;
    }
  }
LABEL_60:
  v96[0] = 0;
  char v97 = 0;
  uint64_t v81 = 0;
  uint64_t v98 = v10;
LABEL_61:
  unsigned int v41 = v82;
  uint64_t v82 = 0;
  unint64_t v99 = __PAIR64__(v13, v41);
LABEL_62:
  if (v91) {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v90, v27);
  }
  if (v89) {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v27);
  }
  WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v81, v27);
  uint64_t v21 = v98;
  *(_OWORD *)long long buf = *(_OWORD *)v96;
  *(_OWORD *)&buf[16] = *(_OWORD *)&v96[16];
  LOBYTE(v86) = v97;
  if (HIDWORD(v99))
  {
    unint64_t v42 = v98 + 16 * HIDWORD(v99);
    goto LABEL_71;
  }
  int v43 = 0;
LABEL_79:
  int v50 = v99;
  unint64_t v99 = 0;
  uint64_t v98 = 0;
  uint64_t v51 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  v87[0] = v21;
  uint64_t v88 = v51;
  uint64_t v52 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v52 = &unk_1EE9C9E70;
  uint64_t v53 = v86;
  long long v54 = *(_OWORD *)buf;
  *(_OWORD *)(v52 + 24) = *(_OWORD *)&buf[16];
  *(_OWORD *)(v52 + 8) = v54;
  *(void *)(v52 + 40) = v53;
  *(void *)(v52 + 48) = v21;
  v87[0] = 0;
  v87[1] = 0;
  *(_DWORD *)(v52 + 56) = v50;
  *(_DWORD *)(v52 + 60) = v43;
  *(void *)(v52 + 64) = v51;
  uint64_t v81 = v52;
  WTF::RunLoop::main((WTF::RunLoop *)v52);
  WTF::RunLoop::dispatch();
  uint64_t v56 = v81;
  uint64_t v81 = 0;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  uint64_t v88 = 0;
  WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v87, v55);
  return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v98, v57);
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C9E48;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C9E48;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  v5[0] = 0;
  v5[32] = 0;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, unsigned char *, void *))(*(void *)v1 + 16))(v1, v5, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v4, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C9E70;
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a1 + 48), a2);
  return a1;
}

{
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9C9E70;
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a1 + 48), a2);

  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 8, a1 + 48);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(WTF::CompletionHandler<void ()(WTF::String)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C9E98;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(WTF::CompletionHandler<void ()(WTF::String)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C9E98;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(WTF::CompletionHandler<void ()(WTF::String)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  long long v92 = 0;
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 16);
  if (!v2) {
    goto LABEL_61;
  }
  uint64_t v3 = (WebCore::SQLiteDatabase *)(v2 + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  uint64_t v91 = v2;
  if (v101 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v100) != 100)
  {
    __int16 v39 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v3);
      *(_DWORD *)long long buf = 134218243;
      *(void *)&uint8_t buf[4] = v91;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&buf[14] = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v39, OS_LOG_TYPE_ERROR, "%p - Database::privateClickMeasurementToStringForTesting failed, error message: %{private}s", buf, 0x16u);
    }
    long long v92 = 0;
    goto LABEL_59;
  }
  if (v101) {
    goto LABEL_145;
  }
  if (WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v100)) {
    goto LABEL_8;
  }
  if (v101) {
LABEL_145:
  }
    std::__throw_bad_variant_access[abi:sn180100]();
  if (WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v100))
  {
LABEL_8:
    WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 144), (uint64_t)"privateClickMeasurementToStringForTesting", (WebCore::SQLiteStatementAutoResetScope *)&v99);
    if (!v99)
    {
      int8x16x2_t v80 = qword_1EB3582F8;
      if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v86 = WebCore::SQLiteDatabase::lastErrorMsg(v3);
        *(_DWORD *)long long buf = 134218243;
        *(void *)&uint8_t buf[4] = v91;
        *(_WORD *)&unsigned char buf[12] = 2081;
        *(void *)&buf[14] = v86;
        _os_log_error_impl(&dword_1985F2000, v80, OS_LOG_TYPE_ERROR, "%p - Database::privateClickMeasurementToStringForTesting, error message: %{private}s", buf, 0x16u);
      }
      long long v92 = 0;
      goto LABEL_142;
    }
    uint64_t v88 = v1;
    char v89 = (WebCore::SQLiteDatabase *)(v2 + 16);
    char v95 = 0;
    uint64_t v96 = 0;
    int v97 = 0;
    char v98 = 1;
    unsigned int v4 = 0;
    if (WebCore::SQLiteStatement::step(v99) == 100)
    {
      unsigned int v4 = 0;
      do
      {
        unsigned int v5 = v4++;
        WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase(v99, v2, 0, (uint64_t)buf);
        WebKit::PCM::Database::attributionToStringForTesting((WebKit::PCM::Database *)&v94, (const WebCore::PrivateClickMeasurement *)buf);
        int v6 = 0;
        unint64_t v7 = v94;
        unsigned int v8 = v4;
        do
        {
          ++v6;
          BOOL v9 = v8 > 9;
          v8 /= 0xAu;
        }
        while (v9);
        if (v5) {
          size_t v10 = 0;
        }
        else {
          size_t v10 = 40;
        }
        if (v5) {
          uint64_t v11 = "";
        }
        else {
          uint64_t v11 = "Unattributed Private Click Measurements:";
        }
        uint64_t v12 = v96;
        if ((v96 || (uint64_t v12 = v95) != 0) && (*((unsigned char *)v12 + 16) & 4) == 0 || v94 && (*((unsigned char *)v94 + 16) & 4) == 0)
        {
          uint64_t v13 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v95);
          if (v13)
          {
            if (!v5)
            {
              uint64_t v15 = 2 * v10;
              char v16 = (_WORD *)v13;
              double v17 = "Unattributed Private Click Measurements:";
              do
              {
                __int16 v18 = *(unsigned __int8 *)v17++;
                *v16++ = v18;
                v15 -= 2;
              }
              while (v15);
            }
            uint64_t v19 = 0;
            size_t v20 = v13 + 2 * v10;
            do
            {
              *(_WORD *)(v20 + 2 * v19) = aWebcorePrivate[v19];
              ++v19;
            }
            while (v19 != 34);
            uint64_t v21 = -1;
            uint64_t v22 = 12;
            unsigned int v23 = v4;
            do
            {
              uint64_t v24 = v21;
              *((unsigned char *)&v102 + v22--) = (v23 % 0xA) | 0x30;
              --v21;
              BOOL v9 = v23 > 9;
              v23 /= 0xAu;
            }
            while (v9);
            unint64_t v25 = (_WORD *)(v20 + 68);
            if (v22 + 2 <= 13)
            {
              unint64_t v26 = v25;
              do
              {
                *v26++ = buf[v24 - 3];
                BOOL v27 = __CFADD__(v24++, 1);
              }
              while (!v27);
            }
            int v28 = 0;
            unsigned int v29 = v4;
            do
            {
              ++v28;
              BOOL v9 = v29 > 9;
              v29 /= 0xAu;
            }
            while (v9);
            uint64_t v30 = (char *)&v25[v28];
            *(_WORD *)uint64_t v30 = 10;
            uint64_t v102 = (const char *)v7;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v102, v30 + 2);
          }
        }
        else
        {
          uint64_t v31 = (char *)MEMORY[0x19972DE60](&v95);
          if (v31)
          {
            unint64_t v32 = v31;
            if (v10) {
              memcpy(v31, v11, v10);
            }
            uint64_t v33 = 0;
            qmemcpy(&v32[v10], "\nWebCore::PrivateClickMeasurement ", 34);
            unsigned int v34 = v4;
            do
            {
              buf[v33-- - 4] = (v34 % 0xA) | 0x30;
              BOOL v9 = v34 > 9;
              v34 /= 0xAu;
            }
            while (v9);
            char v35 = &v32[v10 + 34];
            if (v33 + 14 <= 13) {
              memcpy(v35, &buf[v33 - 3], -v33);
            }
            int v36 = 0;
            unsigned int v37 = v4;
            do
            {
              ++v36;
              BOOL v9 = v37 > 9;
              v37 /= 0xAu;
            }
            while (v9);
            int v38 = &v35[v36];
            *int v38 = 10;
            uint64_t v102 = (const char *)v7;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v102, v38 + 1);
          }
        }
        if (v7)
        {
          if (*(_DWORD *)v7 == 2) {
            WTF::StringImpl::destroy(v7, v14);
          }
          else {
            *(_DWORD *)v7 -= 2;
          }
        }
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v14);
        uint64_t v2 = v91;
      }
      while (WebCore::SQLiteStatement::step(v99) == 100);
    }
    WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 136), (uint64_t)"privateClickMeasurementToStringForTesting", (WebCore::SQLiteStatementAutoResetScope *)&v94);
    if (!v94)
    {
      uint64_t v82 = qword_1EB3582F8;
      if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v87 = WebCore::SQLiteDatabase::lastErrorMsg(v89);
        *(_DWORD *)long long buf = 134218243;
        *(void *)&uint8_t buf[4] = v91;
        *(_WORD *)&unsigned char buf[12] = 2081;
        *(void *)&buf[14] = v87;
        _os_log_error_impl(&dword_1985F2000, v82, OS_LOG_TYPE_ERROR, "%p - Database::privateClickMeasurementToStringForTesting, error message: %{private}s", buf, 0x16u);
      }
      uint64_t v79 = 0;
      goto LABEL_134;
    }
    if (WebCore::SQLiteStatement::step(v94) == 100)
    {
      int v48 = 0;
      int32x2_t v49 = vdup_n_s32(v4 == 0);
      v50.i64[0] = v49.u32[0];
      v50.i64[1] = v49.u32[1];
      int8x16_t v51 = (int8x16_t)vdupq_n_s64(2uLL);
      v51.i64[0] = (uint64_t)"\n";
      int8x16_t v52 = (int8x16_t)vdupq_n_s64(1uLL);
      v52.i64[0] = (uint64_t)"";
      *(int8x16_t *)uint64_t v90 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v50, 0x3FuLL)), v52, v51);
      do
      {
        if (!v48)
        {
          *(_OWORD *)long long buf = *(_OWORD *)v90;
          uint64_t v102 = "Attributed Private Click Measurements:";
          uint64_t v103 = 39;
          WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&v95, (uint64_t)buf, (uint64_t)&v102);
        }
        unsigned int v53 = ++v48 + v4;
        WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase(v94, v2, 1, (uint64_t)buf);
        WebKit::PCM::Database::attributionToStringForTesting((WebKit::PCM::Database *)&v93, (const WebCore::PrivateClickMeasurement *)buf);
        int v54 = 0;
        long long v55 = (WTF::StringImpl *)v93;
        unsigned int v56 = v48 + v4;
        do
        {
          ++v54;
          BOOL v9 = v56 > 9;
          v56 /= 0xAu;
        }
        while (v9);
        if (v93)
        {
          int v57 = *(_DWORD *)(v93 + 4);
          BOOL v27 = __CFADD__(v57, 1);
          int v58 = v57 + 1;
          if (v27) {
            int v58 = -1;
          }
        }
        else
        {
          int v58 = 1;
        }
        BOOL v27 = __CFADD__(v58, v54);
        unsigned int v59 = v58 + v54;
        if (v27 || v59 >= 0xFFFFFFDE) {
          int v60 = -1;
        }
        else {
          int v60 = v59 + 34;
        }
        if (__CFADD__(v60, v97)) {
          uint64_t v61 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v61 = (v60 + v97);
        }
        uint64_t v62 = v96;
        if ((v96 || (uint64_t v62 = v95) != 0) && (*((unsigned char *)v62 + 16) & 4) == 0 || v93 && (*(unsigned char *)(v93 + 16) & 4) == 0)
        {
          uint64_t v63 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v95);
          if (v63)
          {
            for (uint64_t i = 0; i != 34; ++i)
              *(_WORD *)(v63 + 2 * i) = aWebcorePrivate[i];
            uint64_t v66 = -1;
            uint64_t v67 = 12;
            unsigned int v68 = v48 + v4;
            do
            {
              uint64_t v69 = v66;
              *((unsigned char *)&v102 + v67--) = (v68 % 0xA) | 0x30;
              --v66;
              BOOL v9 = v68 > 9;
              v68 /= 0xAu;
            }
            while (v9);
            if (v67 + 2 <= 13)
            {
              long long v70 = (_WORD *)(v63 + 68);
              do
              {
                *v70++ = buf[v69 - 3];
                BOOL v27 = __CFADD__(v69++, 1);
              }
              while (!v27);
            }
            unsigned int v71 = 0;
            do
            {
              ++v71;
              BOOL v9 = v53 > 9;
              v53 /= 0xAu;
            }
            while (v9);
            uint64_t v72 = v63 + 68 + 2 * v71;
            *(_WORD *)uint64_t v72 = 10;
            uint64_t v102 = (const char *)v55;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v102, (char *)(v72 + 2));
          }
        }
        else
        {
          uint64_t v73 = MEMORY[0x19972DE60](&v95, v61);
          if (v73)
          {
            uint64_t v74 = 0;
            qmemcpy((void *)v73, "\nWebCore::PrivateClickMeasurement ", 34);
            unsigned int v75 = v48 + v4;
            do
            {
              buf[v74-- - 4] = (v75 % 0xA) | 0x30;
              BOOL v9 = v75 > 9;
              v75 /= 0xAu;
            }
            while (v9);
            uint64_t v76 = v73 + 34;
            if (v74 + 14 <= 13) {
              memcpy((void *)(v73 + 34), &buf[v74 - 3], -v74);
            }
            unsigned int v77 = 0;
            do
            {
              ++v77;
              BOOL v9 = v53 > 9;
              v53 /= 0xAu;
            }
            while (v9);
            char v78 = (unsigned char *)(v76 + v77);
            *char v78 = 10;
            uint64_t v102 = (const char *)v55;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v102, v78 + 1);
            uint64_t v2 = v91;
          }
        }
        if (v55)
        {
          if (*(_DWORD *)v55 == 2) {
            WTF::StringImpl::destroy(v55, v64);
          }
          else {
            *(_DWORD *)v55 -= 2;
          }
        }
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v64);
      }
      while (WebCore::SQLiteStatement::step(v94) == 100);
    }
    uint64_t v79 = v95;
    if (v95)
    {
      uint64_t v1 = v88;
    }
    else
    {
      WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v95);
      WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v95);
      uint64_t v79 = v95;
      uint64_t v1 = v88;
      if (!v95)
      {
LABEL_134:
        long long v92 = v79;
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v94);
        char v84 = v96;
        uint64_t v96 = 0;
        if (v84)
        {
          if (*(_DWORD *)v84 == 2) {
            WTF::StringImpl::destroy(v84, v83);
          }
          else {
            *(_DWORD *)v84 -= 2;
          }
        }
        long long v85 = v95;
        char v95 = 0;
        if (v85)
        {
          if (*(_DWORD *)v85 == 2) {
            WTF::StringImpl::destroy(v85, v83);
          }
          else {
            *(_DWORD *)v85 -= 2;
          }
        }
LABEL_142:
        WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v99);
        goto LABEL_59;
      }
    }
    *(_DWORD *)v79 += 2;
    goto LABEL_134;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_59:
  if (v101 != -1) {
    (*(&off_1EE9C98E0 + v101))((int)buf, (WebCore::SQLiteStatement *)v100);
  }
LABEL_61:
  WTF::String::isolatedCopy();
  uint64_t v40 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  *(void *)&uint8_t buf[8] = v40;
  unsigned int v41 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(void *)unsigned int v41 = &unk_1EE9C9EC0;
  *((void *)v41 + 1) = *(void *)buf;
  uint64_t v42 = *(void *)&buf[8];
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  *((void *)v41 + objc_destroyWeak(this + 2) = v42;
  v100[0] = v41;
  WTF::RunLoop::main(v41);
  WTF::RunLoop::dispatch();
  uint64_t v44 = v100[0];
  v100[0] = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  uint64_t v45 = *(void *)&buf[8];
  *(void *)&uint8_t buf[8] = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  long long v46 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2) {
      WTF::StringImpl::destroy(v46, v43);
    }
    else {
      *(_DWORD *)v46 -= 2;
    }
  }
  uint64_t result = (uint64_t)v92;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2) {
      return WTF::StringImpl::destroy(v92, v43);
    }
    else {
      *(_DWORD *)v92 -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(WTF::CompletionHandler<void ()(WTF::String)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C9EC0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(WTF::CompletionHandler<void ()(WTF::String)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C9EC0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(WTF::CompletionHandler<void ()(WTF::String)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 16);
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
  if (v3) {
    *(_DWORD *)v3 += 2;
  }
  int v6 = v3;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(v2, &v6);
  uint64_t result = v6;
  int v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C9EE8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C9EE8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2 = *a1;
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    WebKit::PCM::Database::allAttributedPrivateClickMeasurement((WebKit::PCM::Database *)&v13, v3);
    WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v17, (WTF::StringImpl *)&v13);
    WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v4);
  }
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)v17, (uint64_t)&v13);
  uint64_t v5 = a1[2];
  a1[2] = 0;
  uint64_t v15 = v5;
  int v6 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x20);
  *(void *)int v6 = &unk_1EE9C9F10;
  *((void *)v6 + 1) = v13;
  uint64_t v7 = v14;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  *((void *)v6 + objc_destroyWeak(this + 2) = v7;
  uint64_t v8 = v15;
  uint64_t v15 = 0;
  char v16 = v6;
  *((void *)v6 + 3) = v8;
  WTF::RunLoop::main(v6);
  WTF::RunLoop::dispatch();
  size_t v10 = v16;
  char v16 = 0;
  if (v10) {
    (*(void (**)(WTF::RunLoop *))(*(void *)v10 + 8))(v10);
  }
  WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1}::~((uint64_t)&v13, v9);
  return WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v11);
}

uint64_t WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  if (v4)
  {
    int v6 = *(WebCore::PrivateClickMeasurement **)a1;
    uint64_t v7 = 312 * v4;
    do
    {
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(v6, a2);
      int v6 = (WebCore::PrivateClickMeasurement *)(v8 + 312);
      v7 -= 312;
    }
    while (v7);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

uint64_t WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1}::~(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C9F10;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9C9F10;
  uint64_t v3 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(a1 + 8);
}

uint64_t WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::markAttributedPrivateClickMeasurementsAsExpiredForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C9F38;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::markAttributedPrivateClickMeasurementsAsExpiredForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C9F38;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::markAttributedPrivateClickMeasurementsAsExpiredForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1[1] + 16);
  if (v2)
  {
    WTF::WallTime::now((WTF::WallTime *)a1);
    WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v2, (uint64_t)v13);
    WebCore::SQLiteDatabase::prepareStatement();
    WebCore::SQLiteDatabase::prepareStatement();
    if (v12 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v11)) {
      goto LABEL_6;
    }
    if (v12) {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v11) != 101)
    {
LABEL_6:
      uint64_t v3 = qword_1EB3582F8;
      if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
        *(_DWORD *)long long buf = 134218243;
        uint64_t v15 = v2;
        __int16 v16 = 2081;
        uint64_t v17 = ErrorMsg;
        _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "%p - Database::markAttributedPrivateClickMeasurementsAsExpiredForTesting, error message: %{private}s", buf, 0x16u);
      }
    }
    if (v10 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v9) != 101)
    {
      unsigned int v4 = qword_1EB3582F8;
      if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
        *(_DWORD *)long long buf = 134218243;
        uint64_t v15 = v2;
        __int16 v16 = 2081;
        uint64_t v17 = v8;
        _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - Database::markAttributedPrivateClickMeasurementsAsExpiredForTesting, error message: %{private}s", buf, 0x16u);
      }
    }
    if (v10 != -1) {
      (*(&off_1EE9C98E0 + v10))((int)buf, (WebCore::SQLiteStatement *)v9);
    }
    if (v12 != -1) {
      (*(&off_1EE9C98E0 + v12))((int)v9, (WebCore::SQLiteStatement *)v11);
    }
    WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v13);
  }
  uint64_t v5 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v11, a1 + 3);
  WTF::RunLoop::main(v5);
  WTF::RunLoop::dispatch();
  uint64_t result = v11[0];
  v11[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearPrivateClickMeasurement(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C9F60;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearPrivateClickMeasurement(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C9F60;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearPrivateClickMeasurement(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(WebCore::SQLiteStatement ***)(*(void *)(a1 + 8) + 16);
  if (v2)
  {
    v6[0] = 0;
    v6[8] = 0;
    WebKit::PCM::Database::clearPrivateClickMeasurement(v2, (const WebCore::RegistrableDomain *)v6);
  }
  uint64_t v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearPrivateClickMeasurementForRegistrableDomain(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C9F88;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearPrivateClickMeasurementForRegistrableDomain(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C9F88;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearPrivateClickMeasurementForRegistrableDomain(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = *(WebCore::SQLiteStatement ***)(a1[1] + 16);
  if (v2)
  {
    uint64_t v3 = (WTF::StringImpl *)a1[3];
    if (v3)
    {
      *(_DWORD *)v3 += 2;
      uint64_t v8 = v3;
      char v9 = 1;
      WebKit::PCM::Database::clearPrivateClickMeasurement(v2, (const WebCore::RegistrableDomain *)&v8);
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v4);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    else
    {
      uint64_t v8 = 0;
      char v9 = 1;
      WebKit::PCM::Database::clearPrivateClickMeasurement(v2, (const WebCore::RegistrableDomain *)&v8);
    }
  }
  uint64_t v5 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, a1 + 4);
  WTF::RunLoop::main(v5);
  WTF::RunLoop::dispatch();
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearExpiredPrivateClickMeasurement(void)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C9FB0;
  uint64_t v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearExpiredPrivateClickMeasurement(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C9FB0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearExpiredPrivateClickMeasurement(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(WebCore::SQLiteStatement ***)(*(void *)(a1 + 8) + 16);
  if (v1) {
    WebKit::PCM::Database::clearExpiredPrivateClickMeasurement(v1);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearSentAttribution(WebCore::PrivateClickMeasurement &&,WebCore::PCM::AttributionReportEndpoint)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C9FD8;
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearSentAttribution(WebCore::PrivateClickMeasurement &&,WebCore::PCM::AttributionReportEndpoint)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C9FD8;
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  unsigned int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearSentAttribution(WebCore::PrivateClickMeasurement &&,WebCore::PCM::AttributionReportEndpoint)::$_0,void>::call(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(WebCore::SQLiteStatement ***)(v1 + 16);
  if (!v2) {
    return;
  }
  int v4 = *(unsigned __int8 *)(a1 + 336);
  uint64_t v5 = (const WebCore::RegistrableDomain *)(a1 + 32);
  unint64_t v6 = WebKit::PCM::Database::domainID(*(WebCore::SQLiteStatement ***)(v1 + 16), (const WebCore::RegistrableDomain *)(a1 + 32));
  unint64_t v7 = (unint64_t)WebKit::PCM::Database::domainID(v2, (const WebCore::RegistrableDomain *)(a1 + 40)) >> 32;
  if (HIDWORD(v6)) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    int v9 = 0;
    int v10 = 0;
    goto LABEL_22;
  }
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 21, (uint64_t)"earliestTimesToSend", (WebCore::SQLiteStatementAutoResetScope *)v26);
  if (!*(void *)v26
    || WebCore::SQLiteStatement::bindInt(*(WebCore::SQLiteStatement **)v26)
    || WebCore::SQLiteStatement::bindInt(*(WebCore::SQLiteStatement **)v26)
    || WebCore::SQLiteStatement::bindText()
    || WebCore::SQLiteStatement::step(*(WebCore::SQLiteStatement **)v26) != 100)
  {
    uint64_t v13 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 2));
      *(_DWORD *)long long buf = 136446210;
      uint64_t v30 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "Database::earliestTimesToSend, error message: %{public}s", buf, 0xCu);
    }
    int v9 = 0;
    goto LABEL_20;
  }
  WebCore::SQLiteStatement::columnDouble(*(WebCore::SQLiteStatement **)v26);
  int v9 = 0;
  if (v11 > 0.0)
  {
    WebCore::SQLiteStatement::columnDouble(*(WebCore::SQLiteStatement **)v26);
    int v9 = 1;
  }
  WebCore::SQLiteStatement::columnDouble(*(WebCore::SQLiteStatement **)v26);
  if (v12 <= 0.0)
  {
LABEL_20:
    int v10 = 0;
    goto LABEL_21;
  }
  int v10 = 1;
  WebCore::SQLiteStatement::columnDouble(*(WebCore::SQLiteStatement **)v26);
LABEL_21:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v26);
LABEL_22:
  unint64_t v14 = WebKit::PCM::Database::domainID(v2, v5);
  unint64_t v15 = WebKit::PCM::Database::domainID(v2, (const WebCore::RegistrableDomain *)(a1 + 40));
  uint64_t v17 = *(WTF::StringImpl **)(a1 + 328);
  if (v17) {
    *(_DWORD *)v17 += 2;
  }
  if (HIDWORD(v14)) {
    BOOL v18 = HIDWORD(v15) == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18) {
    goto LABEL_29;
  }
  if (v4)
  {
    if (!v10) {
      goto LABEL_29;
    }
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 23, (uint64_t)"markReportAsSentToDestination", (WebCore::SQLiteStatementAutoResetScope *)v26);
    if (!*(void *)v26
      || WebCore::SQLiteStatement::bindInt(*(WebCore::SQLiteStatement **)v26)
      || WebCore::SQLiteStatement::bindInt(*(WebCore::SQLiteStatement **)v26)
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::step(*(WebCore::SQLiteStatement **)v26) != 101)
    {
      uint64_t v19 = qword_1EB3582F8;
      if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 2));
        *(_DWORD *)long long buf = 136446210;
        uint64_t v30 = v23;
        _os_log_error_impl(&dword_1985F2000, v19, OS_LOG_TYPE_ERROR, "Database::markReportAsSentToDestination, error message: %{public}s", buf, 0xCu);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v26);
    if (v9) {
      goto LABEL_29;
    }
  }
  else
  {
    if (!v9) {
      goto LABEL_29;
    }
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 22, (uint64_t)"markReportAsSentToSource", (WebCore::SQLiteStatementAutoResetScope *)v26);
    if (!*(void *)v26
      || WebCore::SQLiteStatement::bindInt(*(WebCore::SQLiteStatement **)v26)
      || WebCore::SQLiteStatement::bindInt(*(WebCore::SQLiteStatement **)v26)
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::step(*(WebCore::SQLiteStatement **)v26) != 101)
    {
      size_t v20 = qword_1EB3582F8;
      if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 2));
        *(_DWORD *)long long buf = 136446210;
        uint64_t v30 = v25;
        _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, "Database::markReportAsSentToSource, error message: %{public}s", buf, 0xCu);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v26);
    if (v10) {
      goto LABEL_29;
    }
  }
  WebCore::SQLiteDatabase::prepareStatement();
  if (v31 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)buf)) {
    goto LABEL_62;
  }
  if (v31) {
    goto LABEL_66;
  }
  if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)buf)) {
    goto LABEL_62;
  }
  if (v31) {
    goto LABEL_66;
  }
  if (WebCore::SQLiteStatement::bindText()) {
    goto LABEL_62;
  }
  if (v31) {
LABEL_66:
  }
    std::__throw_bad_variant_access[abi:sn180100]();
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)buf) != 101)
  {
LABEL_62:
    uint64_t v21 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 2));
      *(_DWORD *)unint64_t v26 = 134218243;
      *(void *)&v26[4] = v2;
      __int16 v27 = 2081;
      uint64_t v28 = v24;
      _os_log_error_impl(&dword_1985F2000, v21, OS_LOG_TYPE_ERROR, "%p - Database::clearSentAttribution failed to step, error message: %{private}s", v26, 0x16u);
    }
  }
  if (v31 != -1) {
    (*(&off_1EE9C98E0 + v31))((int)v26, (WebCore::SQLiteStatement *)buf);
  }
LABEL_29:
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v16);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::close(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CA000;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::close(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CA000;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::close(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 64))(v3);
  }
  int v4 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v6, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v4);
  WTF::RunLoop::dispatch();
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198C2E06C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198C2E100(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void sub_198C2E5E0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (v1[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
    }
    else {
      --v1[2];
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C2E7B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  if (v2[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[2];
  }
  _Unwind_Resume(exception_object);
}

void sub_198C2E974(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  if (v2[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[2];
  }
  _Unwind_Resume(exception_object);
}

void sub_198C2EB68(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C2EC14(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C2ECC0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C2EE7C(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void InspectorClient::~InspectorClient(id *this)
{
}

{
  void *v2;
  uint64_t vars8;

  objc_destroyWeak(this + 1);

  WTF::fastFree((WTF *)this, v2);
}

void InspectorClient::openURLExternally(id *this, WebKit::WebInspectorUIProxy *a2, const WTF::String *a3)
{
  uint64_t v6 = this + 1;
  id WeakRetained = objc_loadWeakRetained(this + 1);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
    if ((_BYTE)this[2])
    {
      id Weak = objc_loadWeak(v6);
      uint64_t v9 = *((void *)a2 + 1);
      int v10 = (void *)MEMORY[0x1E4F1CB10];
      if (*(void *)a3) {
        double v11 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        double v11 = &stru_1EEA10550;
      }
      uint64_t v12 = [v10 URLWithString:v11];
      [Weak inspector:v9 openURLExternally:v12];
    }
  }
}

void InspectorClient::frontendLoaded(id *this, WebKit::WebInspectorUIProxy *a2)
{
  int v4 = this + 1;
  id WeakRetained = objc_loadWeakRetained(this + 1);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
    if (((_BYTE)this[2] & 2) != 0)
    {
      id Weak = objc_loadWeak(v4);
      uint64_t v7 = *((void *)a2 + 1);
      [Weak inspectorFrontendLoaded:v7];
    }
  }
}

void WebKit::ServiceWorkerDownloadTask::~ServiceWorkerDownloadTask(WebKit::ServiceWorkerDownloadTask *this, void *a2)
{
  *(void *)this = &unk_1EE9CA058;
  uint64_t v3 = (WebKit::ServiceWorkerDownloadTask *)((char *)this + 552);
  *((void *)this + 69) = &unk_1EE9CA0D8;
  *((void *)this + 70) = &unk_1EE9CA100;
  int v4 = (const char ***)*((void *)this + 78);
  *((void *)this + 78) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 77);
  *((void *)this + 77) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 32);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 72);
  *((void *)this + 7objc_destroyWeak(this + 2) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  *((void *)this + 70) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 71, a2);
  WTF::FunctionDispatcher::~FunctionDispatcher(v3);

  WebKit::NetworkDataTask::~NetworkDataTask(this, v7);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::ServiceWorkerDownloadTask::~ServiceWorkerDownloadTask(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::ServiceWorkerDownloadTask::~ServiceWorkerDownloadTask(WebKit::ServiceWorkerDownloadTask *this, void *a2)
{
}

{
  WebKit::ServiceWorkerDownloadTask::~ServiceWorkerDownloadTask((WebKit::ServiceWorkerDownloadTask *)((char *)this - 560), a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::ServiceWorkerDownloadTask::~ServiceWorkerDownloadTask((WebKit::ServiceWorkerDownloadTask *)((char *)this - 552), a2);

  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::ServiceWorkerDownloadTask::~ServiceWorkerDownloadTask((WebKit::ServiceWorkerDownloadTask *)((char *)this - 560), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::ServiceWorkerDownloadTask::close(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 576);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = (WebKit::ServiceWorkerDownloadTask *)this;
      ++*(_DWORD *)(v2 + 16);
      uint64_t v4 = *(void *)(*(void *)(v2 + 128) + 8);
      if (v4) {
        uint64_t v5 = v4 - 48;
      }
      else {
        uint64_t v5 = 0;
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, *(atomic_uchar *volatile **)(v5 + 72));
      uint64_t v6 = *((void *)v3 + 75);
      if (v6)
      {
        uint64_t v11 = *((void *)v3 + 75);
        LOBYTE(v6) = 1;
      }
      else
      {
        LOBYTE(v1objc_destroyWeak(this + 1) = 0;
      }
      __int16 v10 = 396;
      char v12 = v6;
      IPC::Connection::removeMessageReceiveQueue((uint64_t)v9, (unsigned __int8 *)&v10);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v9);
      WebKit::WebSWServerToContextConnection::unregisterDownload((WebKit::WebSWServerToContextConnection *)v2, v3);
      this = *((void *)v3 + 72);
      *((void *)v3 + 7objc_destroyWeak(this + 2) = 0;
      if (this && atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, v7);
      }
      int v8 = *(_DWORD *)(v2 + 16);
      if (v8)
      {
        *(_DWORD *)(v2 + 16) = v8 - 1;
      }
      else
      {
        this = 286;
        __break(0xC471u);
      }
    }
  }
  return this;
}

uint64_t WebKit::ServiceWorkerDownloadTask::dispatch(atomic_uchar *volatile *a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::sharedServiceWorkerDownloadTaskQueue((WebKit *)a1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a1 + 1);
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v6 = &unk_1EE9CA3A0;
  v6[1] = a1;
  v6[2] = v5;
  int v8 = v6;
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, &v8);
  uint64_t result = (uint64_t)v8;
  int v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::sharedServiceWorkerDownloadTaskQueue(WebKit *this)
{
    return WebKit::sharedServiceWorkerDownloadTaskQueue(void)::queue;
  WTF::WorkQueue::create();
  uint64_t result = v2;
  WebKit::sharedServiceWorkerDownloadTaskQueue(void)::queue = v2;
  return result;
}

uint64_t non-virtual thunk to'WebKit::ServiceWorkerDownloadTask::dispatch(uint64_t a1, uint64_t *a2)
{
  return WebKit::ServiceWorkerDownloadTask::dispatch((atomic_uchar *volatile *)(a1 - 552), a2);
}

uint64_t WebKit::ServiceWorkerDownloadTask::cancel(atomic_uchar *volatile *this)
{
  uint64_t v2 = WebKit::sharedServiceWorkerDownloadTaskQueue((WebKit *)this);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  uint64_t v3 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v3 = (uint64_t)&unk_1EE9CA3C8;
  v3[1] = (uint64_t)this;
  void v3[2] = (uint64_t)this;
  v8[0] = v3;
  (*(void (**)(uint64_t, uint64_t **))(*(void *)v2 + 32))(v2, v8);
  uint64_t v4 = v8[0];
  v8[0] = 0;
  if (v4) {
    (*(void (**)(uint64_t *))(*v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 78);
  *((void *)this + 78) = 0;
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 16) - 1;
    *(void *)(v5 + 16) = v6;
    if (!v6)
    {
      *(void *)(*(void *)(v5 + 8) + 8) = 0;
      sandbox_extension_release();
    }
    WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v5);
  }
  v8[0] = (uint64_t *)(this + 74);
  v8[1] = (uint64_t *)(this + 73);
  uint64_t v8[2] = (uint64_t *)(this + 75);
  WebKit::ServiceWorkerDownloadTask::sendToServiceWorker<Messages::WebSWContextManagerConnection::CancelFetch>((uint64_t)this, v8);
  *((_DWORD *)this + 166) = 3;
  return WebKit::ServiceWorkerDownloadTask::close((uint64_t)this);
}

BOOL WebKit::ServiceWorkerDownloadTask::sendToServiceWorker<Messages::WebSWContextManagerConnection::CancelFetch>(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *(void *)(a1 + 576);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)(v3 + 128) + 8);
  if (v5) {
    uint64_t v6 = v5 - 48;
  }
  else {
    uint64_t v6 = 0;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, *(atomic_uchar *volatile **)(v6 + 72));
  BOOL v7 = IPC::Connection::send<Messages::WebSWContextManagerConnection::CancelFetch>((uint64_t)v9, a2, 0, 0, 0) == 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v9);
  return v7;
}

uint64_t WebKit::ServiceWorkerDownloadTask::resume(uint64_t this)
{
  *(_DWORD *)(this + 664) = 0;
  return this;
}

WTF::StringImpl *WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, char a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(void *)(v5 + 8))
  {
    uint64_t v21 = 0;
    WTF::String::operator=((uint64_t *)(a1 + 120), a2);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v21);
    if (*a3)
    {
      uint64_t v8 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)uint64_t v8 = 1;
      uint64_t v9 = *a3;
      *a3 = 0;
      *(void *)(v8 + 8) = v9;
      *(void *)(v8 + 16) = 0;
    }
    else
    {
      uint64_t v8 = 0;
    }
    __int16 v10 = *(const char ****)(a1 + 624);
    *(void *)(a1 + 624) = v8;
    if (v10)
    {
      __int16 v10 = WTF::RefCounted<WebKit::SandboxExtension>::deref(v10);
      uint64_t v8 = *(void *)(a1 + 624);
    }
    if (v8)
    {
      ++*(_DWORD *)v8;
      uint64_t v11 = *(void *)(v8 + 16);
      *(void *)(v8 + 16) = v11 + 1;
      if (!v11) {
        WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v8 + 8));
      }
      __int16 v10 = WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v8);
    }
    uint64_t v12 = WebKit::sharedServiceWorkerDownloadTaskQueue((WebKit *)v10);
    uint64_t v21 = (const char **)a1;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 8));
    uint64_t v22 = a1;
    char v23 = a4;
    WTF::String::isolatedCopy();
    uint64_t v13 = WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v13 = &unk_1EE9CA418;
    *(void *)(v13 + 8) = v21;
    *(void *)(v13 + 16) = v22;
    *(unsigned char *)(v13 + 24) = v23;
    unint64_t v14 = v24;
    uint64_t v22 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = v13;
    *(void *)(v13 + 3objc_destroyWeak(this + 2) = v14;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 32))(v12, &v25);
    uint64_t v16 = v25;
    uint64_t v25 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t result = v24;
    uint64_t v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    uint64_t v20 = v22;
    uint64_t v22 = 0;
    if (v20) {
      return (WTF::StringImpl *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v20 + 8));
    }
  }
  else
  {
    uint64_t v18 = WebKit::sharedServiceWorkerDownloadTaskQueue((WebKit *)a1);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 8));
    uint64_t v19 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v19 = &unk_1EE9CA3F0;
    *(void *)(v19 + 8) = a1;
    *(void *)(v19 + 16) = a1;
    uint64_t v21 = (const char **)v19;
    (*(void (**)(uint64_t, const char ***))(*(void *)v18 + 32))(v18, &v21);
    uint64_t result = (WTF::StringImpl *)v21;
    uint64_t v21 = 0;
    if (result) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

_DWORD *WebKit::ServiceWorkerDownloadTask::didReceiveData(_DWORD *this, const IPC::SharedBufferReference *a2)
{
  if (this[158] != -1)
  {
    uint64_t v3 = (uint64_t)this;
    IPC::SharedBufferReference::span(a2);
    uint64_t v4 = WTF::FileSystemImpl::writeToFile();
    if (v4 == *(void *)a2)
    {
      uint64_t v5 = v4;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v3 + 8));
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
      *uint64_t v6 = &unk_1EE9CA468;
      v6[1] = v3;
      v6[2] = v3;
      uint64_t v6[3] = v5;
      v8[0] = v6;
      WTF::callOnMainRunLoop();
      this = (_DWORD *)v8[0];
      v8[0] = 0;
      if (this) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)this + 8))(this);
      }
    }
    else
    {
      LOBYTE(v8[0]) = 0;
      char v9 = 0;
      WebKit::ServiceWorkerDownloadTask::didFailDownload(v3, (uint64_t)v8);
      return (_DWORD *)std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v7);
    }
  }
  return this;
}

uint64_t WebKit::ServiceWorkerDownloadTask::didFailDownload(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 632) != -1)
  {
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)(a1 + 632), (int *)a2);
    *(_DWORD *)(a1 + 63objc_destroyWeak(this + 2) = -1;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 8));
  int v4 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned char *)(a2 + 80))
  {
    WebCore::ResourceErrorBase::isolatedCopy((uint64_t *)v19, (WebCore::ResourceErrorBase *)a2);
    v12[0] = v19[0];
    v12[1] = v19[1];
    v12[2] = v19[2];
    uint64_t v13 = v20;
    int v14 = v21;
    __int16 v15 = v22;
    uint64_t v16 = v23;
    char v17 = v24;
    char v18 = 1;
  }
  else
  {
    LOBYTE(v12[0]) = 0;
    char v18 = 0;
  }
  uint64_t v5 = WTF::fastMalloc((WTF *)0x70);
  uint64_t v6 = v5;
  *(void *)uint64_t v5 = &unk_1EE9CA4B8;
  *(void *)(v5 + 8) = a1;
  *(void *)(v5 + 16) = a1;
  *(unsigned char *)(v5 + 24) = 0;
  *(unsigned char *)(v5 + 104) = 0;
  if (v4)
  {
    uint64_t v7 = *(void *)&v12[0];
    *(void *)&v12[0] = 0;
    *(void *)(v5 + 24) = v7;
    WTF::URL::URL(v5 + 32, (uint64_t *)v12 + 1);
    *(void *)(v6 + 7objc_destroyWeak(this + 2) = v13;
    *(_WORD *)(v6 + 84) = v15;
    *(_DWORD *)(v6 + 80) = v14;
    uint64_t v8 = v16;
    uint64_t v13 = 0;
    uint64_t v16 = 0;
    *(void *)(v6 + 88) = v8;
    *(unsigned char *)(v6 + 96) = v17;
    *(unsigned char *)(v6 + 104) = 1;
  }
  *(void *)&v19[0] = v6;
  WTF::callOnMainRunLoop();
  uint64_t v10 = *(void *)&v19[0];
  *(void *)&v19[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v9);
}

uint64_t WebKit::ServiceWorkerDownloadTask::didReceiveFormData(uint64_t a1)
{
  uint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "ServiceWorkerDownloadTask::didReceiveFormData not implemented", v5, 2u);
  }
  v5[0] = 0;
  char v6 = 0;
  WebKit::ServiceWorkerDownloadTask::didFailDownload(a1, (uint64_t)v5);
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

uint64_t WebKit::ServiceWorkerDownloadTask::didFinish(WebKit::ServiceWorkerDownloadTask *this, int *a2)
{
  WTF::FileSystemImpl::closeFile((WebKit::ServiceWorkerDownloadTask *)((char *)this + 632), a2);
  *((_DWORD *)this + 158) = -1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 1);
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v3 = &unk_1EE9CA490;
  v3[1] = this;
  void v3[2] = this;
  uint64_t v5 = (uint64_t)v3;
  WTF::callOnMainRunLoop();
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::ServiceWorkerDownloadTask::didFail(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v9 = v4;
  WTF::URL::URL((uint64_t)v10, a2 + 1);
  uint64_t v5 = a2[6];
  a2[6] = 0;
  v10[5] = v5;
  int v11 = *((_DWORD *)a2 + 14);
  __int16 v12 = *((_WORD *)a2 + 30);
  uint64_t v6 = a2[8];
  a2[8] = 0;
  uint64_t v13 = v6;
  char v14 = *((unsigned char *)a2 + 72);
  char v15 = 1;
  WebKit::ServiceWorkerDownloadTask::didFailDownload(a1, (uint64_t)&v9);
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v9, v7);
}

void WebKit::ServiceWorkerFetchTask::fromNavigationPreloader(WebKit::ServiceWorkerFetchTask *this@<X0>, WebKit::WebSWServerConnection *a2@<X1>, const WebCore::ResourceRequest *a3@<X3>, uint64_t *a4@<X8>)
{
  if (!*((unsigned char *)a2 + 3800))
  {
LABEL_8:
    uint64_t v12 = 0;
    goto LABEL_9;
  }
  if (!a3
    || (*(void *)uint64_t v19 = *((void *)a2 + 474),
        (uint64_t v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3 + 93, v19)) == 0)|| (v10 = *(void *)(v9 + 280)) == 0|| *(unsigned char *)(v9 + 291))
  {
    int v11 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v19 = 0;
      _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "Unable to retrieve preloader, load will go to the network", v19, 2u);
    }
    goto LABEL_8;
  }
  *(void *)(v9 + 280) = 0;
  uint64_t v12 = WTF::fastMalloc((WTF *)0x128);
  *(_DWORD *)uint64_t v12 = 1;
  *(void *)(v12 + 8) = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v13 = (atomic_uint *)*((void *)this + 1);
  if (v13) {
    atomic_fetch_add(v13, 1u);
  }
  *(void *)(v12 + 16) = v13;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 14, (uint64_t)a2 + 48);
  char v14 = (atomic_uint *)*((void *)a2 + 7);
  if (v14) {
    atomic_fetch_add(v14, 1u);
  }
  *(void *)(v12 + 24) = v14;
  *(void *)(v12 + 3objc_destroyWeak(this + 2) = 0;
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(v12 + 48) = 0;
  *(void *)(v12 + 56) = 0;
  *(void *)(v12 + 40) = IdentifierInternal;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(v12 + 64));
  *(void *)(v12 + 264) = 0;
  *(void *)(v12 + 27objc_destroyWeak(this + 2) = 0;
  *(void *)(v12 + 280) = v10;
  *(_DWORD *)(v12 + 288) = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v12 + 8), v12);
  uint64_t v16 = *(atomic_uint **)(v12 + 8);
  if (v16) {
    atomic_fetch_add(v16, 1u);
  }
  char v17 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v17 = &unk_1EE9CA4E0;
  v17[1] = v16;
  *(void *)uint64_t v19 = v17;
  WTF::callOnMainRunLoop();
  uint64_t v18 = *(void *)v19;
  *(void *)uint64_t v19 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
LABEL_9:
  *a4 = v12;
}

uint64_t WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  char v17 = (unsigned int *)(a1 + 8);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v18 = *(atomic_uint **)(a2 + 8);
  if (v18) {
    atomic_fetch_add(v18, 1u);
  }
  *(void *)(a1 + 16) = v18;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 56), a3 + 48);
  uint64_t v19 = *(atomic_uint **)(a3 + 56);
  if (v19) {
    atomic_fetch_add(v19, 1u);
  }
  *(void *)(a1 + 24) = v19;
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 40) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 48) = a5;
  *(void *)(a1 + 56) = a6;
  WTF::URL::URL(a1 + 64, (uint64_t *)a4);
  WTF::URL::URL(a1 + 104, (uint64_t *)(a4 + 40));
  *(void *)(a1 + 144) = *(void *)(a4 + 80);
  uint64_t v20 = *(void *)(a4 + 88);
  *(void *)(a4 + 88) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = v20;
  uint64_t v21 = *(void *)(a4 + 96);
  *(void *)(a4 + 96) = 0;
  *(void *)(a1 + 160) = v21;
  LODWORD(v2objc_destroyWeak(this + 1) = *(_DWORD *)(a4 + 104);
  *(_DWORD *)(a4 + 104) = 0;
  *(_DWORD *)(a1 + 168) = v21;
  LODWORD(v2objc_destroyWeak(this + 1) = *(_DWORD *)(a4 + 108);
  *(_DWORD *)(a4 + 108) = 0;
  *(_DWORD *)(a1 + 17objc_destroyWeak(this + 2) = v21;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v22 = *(void *)(a4 + 112);
  *(void *)(a4 + 11objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 176) = v22;
  LODWORD(v2objc_destroyWeak(this + 2) = *(_DWORD *)(a4 + 120);
  *(_DWORD *)(a4 + 120) = 0;
  *(_DWORD *)(a1 + 184) = v22;
  LODWORD(v2objc_destroyWeak(this + 2) = *(_DWORD *)(a4 + 124);
  *(_DWORD *)(a4 + 124) = 0;
  *(_DWORD *)(a1 + 188) = v22;
  *(void *)(a1 + 19objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 200) = 0;
  uint64_t v23 = *(void *)(a4 + 128);
  *(void *)(a4 + 128) = 0;
  *(void *)(a1 + 19objc_destroyWeak(this + 2) = v23;
  LODWORD(v23) = *(_DWORD *)(a4 + 136);
  *(_DWORD *)(a4 + 136) = 0;
  *(_DWORD *)(a1 + 200) = v23;
  LODWORD(v23) = *(_DWORD *)(a4 + 140);
  *(_DWORD *)(a4 + 140) = 0;
  *(_DWORD *)(a1 + 204) = v23;
  LODWORD(v23) = *(_DWORD *)(a4 + 144);
  *(unsigned char *)(a1 + 21objc_destroyWeak(this + 2) = *(unsigned char *)(a4 + 148);
  *(_DWORD *)(a1 + 208) = v23;
  uint64_t v24 = *(void *)(a4 + 152);
  *(void *)(a4 + 15objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 216) = v24;
  uint64_t v25 = *(void *)(a4 + 160);
  *(void *)(a4 + 160) = 0;
  *(void *)(a1 + 224) = v25;
  uint64_t v26 = *(void *)(a4 + 168);
  *(void *)(a4 + 168) = 0;
  *(void *)(a1 + 23objc_destroyWeak(this + 2) = v26;
  uint64_t v27 = *(void *)(a4 + 176);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a4 + 184);
  *(void *)(a1 + 240) = v27;
  uint64_t v28 = *(void *)(a4 + 192);
  *(void *)(a4 + 19objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 256) = v28;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 27objc_destroyWeak(this + 2) = *(void *)(a7 + 16);
  *(void *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 290) = WebCore::SWServerRegistration::shouldSoftUpdate();
  *(unsigned char *)(a1 + 29objc_destroyWeak(this + 1) = 0;
  unsigned int v29 = qword_1EB358550;
  uint64_t v30 = os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT);
  if (v30)
  {
    uint64_t v31 = *(void *)(a1 + 272);
    if (!v31)
    {
      __break(0xC471u);
      JUMPOUT(0x198C30CC4);
    }
    uint64_t v33 = *(void *)(a1 + 40);
    uint64_t v32 = *(void *)(a1 + 48);
    uint64_t v34 = *(void *)(a1 + 56);
    *(_DWORD *)long long buf = 134219264;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v33;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v32;
    *(_WORD *)char v89 = 2048;
    *(void *)&v89[2] = v31;
    *(_WORD *)&v89[10] = 2048;
    *(void *)&v89[12] = v34;
    *(_WORD *)&v89[20] = 1024;
    *(_DWORD *)&v89[22] = a9;
    _os_log_impl(&dword_1985F2000, v29, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::ServiceWorkerFetchTask: (serverConnectionIdentifier=%llu, serviceWorkerRegistrationIdentifier=%llu, serviceWorkerIdentifier=%llu, %d)", buf, 0x3Au);
  }
  if (*(unsigned char *)(a3 + 315) == 1)
  {
    char v35 = (WebCore::TimerBase *)WTF::fastMalloc((WTF *)0x38);
    *(void *)WebCore::TimerBase::TimerBase(v35) = &unk_1EE9BA5F0;
    int v36 = (void *)WTF::fastMalloc((WTF *)0x20);
    *int v36 = &unk_1EE9CA318;
    v36[1] = WebKit::ServiceWorkerFetchTask::timeoutTimerFired;
    v36[2] = 0;
    v36[3] = a1;
    *((void *)v35 + 6) = v36;
    uint64_t v37 = *(void *)(a1 + 264);
    *(void *)(a1 + 264) = v35;
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
    }
    uint64_t v30 = WebCore::TimerBase::start();
  }
  if (a8)
  {
    unsigned int v38 = *(unsigned __int8 *)(a3 + 3088);
    if (v38 <= 0xA && ((1 << v38) & 0x498) != 0)
    {
      __int16 v39 = (void *)WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)(a1 + 64));
      uint64_t v30 = MEMORY[0x19972E990](*v39, "GET", 3);
      if (v30)
      {
        if (!a9 || *(unsigned char *)(a7 + 384))
        {
          long long v40 = *(_OWORD *)(a3 + 96);
          *(_OWORD *)long long buf = *(_OWORD *)(a3 + 80);
          *(_OWORD *)&buf[16] = v40;
          unsigned int v41 = *(atomic_uint **)(a3 + 112);
          if (v41) {
            atomic_fetch_add(v41, 1u);
          }
          *(void *)char v89 = v41;
          uint64_t v42 = *(atomic_uint **)(a3 + 120);
          if (v42) {
            atomic_fetch_add(v42, 1u);
          }
          *(void *)&v89[8] = v42;
          long long v43 = *(_OWORD *)(a3 + 144);
          *(_OWORD *)&v89[16] = *(_OWORD *)(a3 + 128);
          *(_OWORD *)uint64_t v90 = v43;
          *(void *)&v90[13] = *(void *)(a3 + 157);
          WebCore::ResourceRequest::ResourceRequest(v91, (const String *)(a3 + 168));
          *(_DWORD *)((char *)v93 + 3) = *(_DWORD *)(a3 + 371);
          v93[0] = *(_DWORD *)(a3 + 368);
          v94[0] = 0;
          char v95 = 0;
          if (*(unsigned char *)(a3 + 2960))
          {
            WebKit::NavigationActionData::NavigationActionData((WebKit::NavigationActionData *)v94, (const WebKit::NavigationActionData *)(a3 + 384));
            char v95 = 1;
          }
          char v96 = *(unsigned char *)(a3 + 2976);
          WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v97, a3 + 2984);
          v97[16] = *(unsigned char *)(a3 + 3000);
          LOBYTE(v98) = 0;
          char v101 = 0;
          if (*(unsigned char *)(a3 + 3032))
          {
            uint64_t v98 = *(void *)(a3 + 3008);
            char v99 = *(unsigned char *)(a3 + 3016);
            uint64_t v82 = *(const void **)(a3 + 3024);
            CFTypeRef v100 = v82;
            if (v82) {
              CFRetain(v82);
            }
            char v101 = 1;
          }
          int v102 = *(_DWORD *)(a3 + 3040);
          __int16 v103 = *(_WORD *)(a3 + 3044);
          WebCore::ResourceRequestBase::operator=((uint64_t)v91, a1 + 64);
          uint64_t v44 = *(const void **)(a1 + 256);
          if (v44) {
            CFRetain(*(CFTypeRef *)(a1 + 256));
          }
          CFTypeRef v45 = cf;
          CFTypeRef cf = v44;
          if (v45) {
            CFRelease(v45);
          }
          uint64_t v46 = WTF::fastMalloc((WTF *)0xDE0);
          *(void *)(v46 + 8) = 0;
          *(_DWORD *)(v46 + 16) = 0;
          *(void *)uint64_t v46 = &unk_1EE9CA138;
          *(void *)(v46 + 24) = 0;
          WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a8 + 8), a8);
          long long v47 = *(atomic_uint **)(a8 + 8);
          if (v47) {
            atomic_fetch_add(v47, 1u);
          }
          *(void *)(v46 + 3objc_destroyWeak(this + 2) = v47;
          WebKit::NetworkLoadParameters::NetworkLoadParameters(v46 + 48, (uint64_t)buf);
          *(unsigned char *)(v46 + 3024) = *(unsigned char *)(a7 + 384);
          int v48 = *(_DWORD **)(a7 + 392);
          if (v48) {
            *v48 += 2;
          }
          *(void *)(v46 + 303objc_destroyWeak(this + 2) = v48;
          *(void *)(v46 + 3040) = 0;
          WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)(v46 + 3048));
          WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v46 + 3176));
          *(void *)(v46 + 3416) = 0;
          *(unsigned char *)(v46 + 3424) = 0;
          *(unsigned char *)(v46 + 3314) = *(unsigned char *)(v46 + 3314) & 0xF1 | 4;
          *(void *)(v46 + 343objc_destroyWeak(this + 2) = 0;
          *(_OWORD *)(v46 + 3440) = 0u;
          int32x2_t v49 = (WTF::MonotonicTime *)WTF::URL::invalidate((WTF::URL *)(v46 + 3448));
          *(void *)(v46 + 3504) = 0;
          *(void *)(v46 + 3488) = 0;
          *(void *)(v46 + 3494) = 0;
          *(unsigned char *)(v46 + 351objc_destroyWeak(this + 2) = 1;
          *(unsigned char *)(v46 + 3539) = 0;
          *(_OWORD *)(v46 + 3520) = 0u;
          *(_WORD *)(v46 + 3536) = 0;
          WTF::MonotonicTime::now(v49);
          *(void *)(v46 + 3544) = v50;
          int8x16_t v51 = qword_1EB358550;
          if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v104) = 134217984;
            *(void *)((char *)&v104 + 4) = v46;
            _os_log_impl(&dword_1985F2000, v51, OS_LOG_TYPE_DEFAULT, "ServiceWorkerNavigationPreloader::ServiceWorkerNavigationPreloader %p", (uint8_t *)&v104, 0xCu);
          }
          if (!*(unsigned char *)(v46 + 3536))
          {
            *(unsigned char *)(v46 + 3536) = 1;
            uint64_t v52 = *(void *)(v46 + 32);
            if (v52 && (uint64_t v53 = *(void *)(v52 + 8)) != 0)
            {
              int v54 = *(WebKit::NetworkCache::Cache **)(v53 + 616);
              if (v54)
              {
                uint64_t v55 = *(void *)(v46 + 56);
                if (!v55)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198C30D1CLL);
                }
                uint64_t v56 = *(void *)(v46 + 48);
                long long v105 = *(_OWORD *)(v46 + 64);
                *(void *)&long long v104 = v56;
                *((void *)&v104 + objc_destroyWeak(this + 1) = v55;
                LOBYTE(v106) = 1;
                __int16 v84 = *(_WORD *)(v46 + 3008);
                int v57 = *(unsigned __int8 *)(v46 + 3011);
                __int16 v83 = *(_WORD *)(v46 + 3012);
                WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v46 + 8), v46);
                int v58 = *(atomic_uint **)(v46 + 8);
                if (v58) {
                  atomic_fetch_add(v58, 1u);
                }
                unsigned int v59 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                *(void *)unsigned int v59 = &unk_1EE9CA5D0;
                *((void *)v59 + objc_destroyWeak(this + 1) = v46;
                *((void *)v59 + objc_destroyWeak(this + 2) = v58;
                long long v85 = v59;
                WebKit::NetworkCache::Cache::retrieve(v54, (const WebCore::ResourceRequest *)(v46 + 136), (uint64_t)&v104, v84, v57 != 0, v83, (WTF::MonotonicTime *)&v85);
                int v60 = v85;
                long long v85 = 0;
                if (v60) {
                  (*(void (**)(WTF::StringImpl *))(*(void *)v60 + 8))(v60);
                }
              }
              else
              {
                WebKit::ServiceWorkerNavigationPreloader::loadFromNetwork((WebKit::NetworkLoad **)v46);
              }
            }
            else
            {
              uint64_t v61 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
              if (v61)
              {
                if (v61 == 1)
                {
                  uint64_t v62 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
                  *MEMORY[0x1E4F30960] += 2;
                }
                else
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  uint64_t v62 = (WTF::StringImpl *)v104;
                }
              }
              else
              {
                uint64_t v62 = 0;
              }
              long long v85 = 0;
              WTF::URL::invalidate((WTF::URL *)&v85);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              uint64_t v63 = (WTF::StringImpl *)v104;
              if (v62) {
                *(_DWORD *)v62 += 2;
              }
              *(void *)&long long v104 = v62;
              long long v64 = v85;
              if (v85) {
                *(_DWORD *)v85 += 2;
              }
              *((void *)&v104 + objc_destroyWeak(this + 1) = v64;
              long long v105 = v86;
              long long v106 = v87;
              if (v63) {
                *(_DWORD *)v63 += 2;
              }
              long long v107 = v63;
              int v108 = 0;
              __int16 v109 = 1;
              uint64_t v110 = 0;
              char v111 = 1;
              WebKit::ServiceWorkerNavigationPreloader::didFailLoading((WebKit::ServiceWorkerNavigationPreloader *)v46, (const WebCore::ResourceError *)&v104);
              uint64_t v66 = v110;
              uint64_t v110 = 0;
              if (v66) {
                CFRelease(v66);
              }
              uint64_t v67 = v107;
              long long v107 = 0;
              if (v67)
              {
                if (*(_DWORD *)v67 == 2) {
                  WTF::StringImpl::destroy(v67, v65);
                }
                else {
                  *(_DWORD *)v67 -= 2;
                }
              }
              unsigned int v68 = (WTF::StringImpl *)*((void *)&v104 + 1);
              *((void *)&v104 + objc_destroyWeak(this + 1) = 0;
              if (v68)
              {
                if (*(_DWORD *)v68 == 2) {
                  WTF::StringImpl::destroy(v68, v65);
                }
                else {
                  *(_DWORD *)v68 -= 2;
                }
              }
              uint64_t v69 = (WTF::StringImpl *)v104;
              *(void *)&long long v104 = 0;
              if (v69)
              {
                if (*(_DWORD *)v69 == 2) {
                  WTF::StringImpl::destroy(v69, v65);
                }
                else {
                  *(_DWORD *)v69 -= 2;
                }
              }
              if (v63)
              {
                if (*(_DWORD *)v63 == 2) {
                  WTF::StringImpl::destroy(v63, v65);
                }
                else {
                  *(_DWORD *)v63 -= 2;
                }
              }
              long long v70 = v85;
              long long v85 = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2) {
                  WTF::StringImpl::destroy(v70, v65);
                }
                else {
                  *(_DWORD *)v70 -= 2;
                }
              }
              if (v62)
              {
                if (*(_DWORD *)v62 == 2) {
                  WTF::StringImpl::destroy(v62, v65);
                }
                else {
                  *(_DWORD *)v62 -= 2;
                }
              }
            }
          }
          uint64_t v71 = *(void *)(a1 + 280);
          *(void *)(a1 + 280) = v46;
          if (v71) {
            (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
          }
          long long v85 = *(WTF::StringImpl **)(a1 + 40);
          WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::ServiceWorkerFetchTask&>((uint64_t *)(a8 + 744), (uint64_t *)&v85, a1, (uint64_t)&v104);
          uint64_t v72 = *(void *)(a1 + 280);
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v17, a1);
          uint64_t v73 = *(atomic_uint **)(a1 + 8);
          if (v73) {
            atomic_fetch_add(v73, 1u);
          }
          uint64_t v74 = (void *)WTF::fastMalloc((WTF *)0x10);
          *uint64_t v74 = &unk_1EE9CA508;
          v74[1] = v73;
          *(void *)&long long v104 = v74;
          WebKit::ServiceWorkerNavigationPreloader::waitForResponse(v72, (uint64_t *)&v104);
          if ((void)v104) {
            (*(void (**)(void))(*(void *)v104 + 8))(v104);
          }
          if (v101)
          {
            CFTypeRef v81 = v100;
            CFTypeRef v100 = 0;
            if (v81) {
              CFRelease(v81);
            }
          }
          WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v97, v75);
          if (v95) {
            WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v94);
          }
          CFTypeRef v76 = cf;
          CFTypeRef cf = 0;
          if (v76) {
            CFRelease(v76);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v91);
          uint64_t v78 = *(void *)&v89[8];
          *(void *)&v89[8] = 0;
          if (v78) {
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v78, v77);
          }
          uint64_t v30 = *(void *)v89;
          *(void *)char v89 = 0;
          if (v30) {
            uint64_t v30 = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v30, v77);
          }
        }
      }
    }
  }
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v30);
  WebKit::NetworkResourceLoader::setWorkerStart(a3, v79);
  return a1;
}

_DWORD *WebKit::ServiceWorkerFetchTask::timeoutTimerFired(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *((void *)this + 4);
    uint64_t v7 = *((void *)this + 5);
    if (v8) {
      LODWORD(v8) = *(void *)(v8 + 8) != 0;
    }
    int v9 = 134218496;
    uint64_t v10 = this;
    __int16 v11 = 2048;
    uint64_t v12 = v7;
    __int16 v13 = 1024;
    int v14 = v8;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::timeoutTimerFired: (hasServiceWorkerConnection=%d)", (uint8_t *)&v9, 0x1Cu);
  }
  WebKit::ServiceWorkerFetchTask::softUpdateIfNeeded(this);
  uint64_t result = (_DWORD *)WebKit::ServiceWorkerFetchTask::cannotHandle(this);
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      ++*(_DWORD *)(v5 + 16);
      uint64_t result = WebKit::WebSWServerConnection::fetchTaskTimedOut(v5);
      int v6 = *(_DWORD *)(v5 + 16);
      if (!v6)
      {
        __break(0xC471u);
        JUMPOUT(0x198C30E74);
      }
      *(_DWORD *)(v5 + 16) = v6 - 1;
    }
  }
  return result;
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::waitForResponse(uint64_t result, uint64_t *a2)
{
  if (*(unsigned char *)(result + 3500) || *(void *)(result + 3432)) {
    return (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  }
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(result + 3520);
  *(void *)(result + 3520) = v2;
  if (v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return result;
}

void WebKit::ServiceWorkerFetchTask::~ServiceWorkerFetchTask(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 5);
    int v16 = 134218240;
    char v17 = this;
    __int16 v18 = 2048;
    uint64_t v19 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::~ServiceWorkerFetchTask:", (uint8_t *)&v16, 0x16u);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    uint64_t v5 = *(WebKit::WebSWServerToContextConnection **)(v4 + 8);
    if (v5)
    {
      ++*((_DWORD *)v5 + 4);
      WebKit::WebSWServerToContextConnection::unregisterFetch(v5, this);
      int v6 = *((_DWORD *)v5 + 4);
      if (!v6)
      {
        __break(0xC471u);
        JUMPOUT(0x198C31130);
      }
      *((_DWORD *)v5 + 4) = v6 - 1;
    }
  }
  WebKit::ServiceWorkerFetchTask::cancelPreloadIfNecessary(this);
  uint64_t v7 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  int v9 = (const void *)*((void *)this + 32);
  *((void *)this + 3objc_destroyWeak(this + 2) = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::ServiceWorkerFetchTask *)((char *)this + 64));
  __int16 v11 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  uint64_t v12 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v10);
  }
  __int16 v13 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v10);
  }
  uint64_t v14 = *((void *)this + 1);
  if (v14)
  {
    *(void *)(v14 + 8) = 0;
    uint64_t v15 = (unsigned int *)*((void *)this + 1);
    *((void *)this + objc_destroyWeak(this + 1) = 0;
    if (v15)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v10);
      }
    }
  }
  else
  {
    *((void *)this + objc_destroyWeak(this + 1) = 0;
  }
}

WebKit::ServiceWorkerFetchTask *WebKit::ServiceWorkerFetchTask::cancelPreloadIfNecessary(WebKit::ServiceWorkerFetchTask *this)
{
  if (*((void *)this + 35))
  {
    uint64_t v1 = this;
    uint64_t v2 = *((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = *(WebKit::WebSWServerConnection **)(v2 + 8);
      if (v3)
      {
        uint64_t v4 = (WebKit::NetworkSession *)WebKit::WebSWServerConnection::session(v3);
        if (v4) {
          WebKit::NetworkSession::removeNavigationPreloaderTask(v4, v1);
        }
      }
    }
    uint64_t v5 = *((void *)v1 + 35);
    *(unsigned char *)(v5 + 3537) = 1;
    uint64_t v6 = *(void *)(v5 + 3432);
    if (v6)
    {
      *(void *)(v5 + 343objc_destroyWeak(this + 2) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, 2);
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *(void *)(v5 + 24);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 3008);
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
      }
    }
    this = (WebKit::ServiceWorkerFetchTask *)*((void *)v1 + 35);
    *((void *)v1 + 35) = 0;
    if (this)
    {
      int v9 = *(uint64_t (**)(void))(*(void *)this + 8);
      return (WebKit::ServiceWorkerFetchTask *)v9();
    }
  }
  return this;
}

_DWORD *WebKit::ServiceWorkerFetchTask::start(WebKit::ServiceWorkerFetchTask *this, WebKit::WebSWServerToContextConnection *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 5);
    *(_DWORD *)long long buf = 134218240;
    uint64_t v12 = this;
    __int16 v13 = 2048;
    uint64_t v14 = v5;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::start:", buf, 0x16u);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v7 = (atomic_uint *)*((void *)a2 + 1);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = v7;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v6);
  }
  uint64_t v10 = *((void *)this + 5);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakPtr<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakPtr<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::ServiceWorkerFetchTask&>((uint64_t *)a2 + 17, &v10, (uint64_t)this, (uint64_t)buf);
  return WebKit::ServiceWorkerFetchTask::startFetch(this);
}

_DWORD *WebKit::ServiceWorkerFetchTask::startFetch(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 5);
    *(_DWORD *)long long buf = 134218240;
    unsigned int v41 = this;
    __int16 v42 = 2048;
    uint64_t v43 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::startFetch", buf, 0x16u);
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      uint64_t v6 = v5 - 48;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (_DWORD *)(v6 + 8);
  ++*(_DWORD *)(v6 + 8);
  if (!*(unsigned char *)(v6 + 4193)) {
    WebKit::NetworkResourceLoader::consumeSandboxExtensions((WebKit::NetworkResourceLoader *)v6);
  }
  WebCore::ResourceRequestBase::httpReferrer((uint64_t *)&v38, (WebKit::ServiceWorkerFetchTask *)((char *)this + 64));
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const String *)this + 8);
  WebCore::cleanHTTPRequestHeadersForAccessControl();
  uint64_t v37 = 0;
  if (*(unsigned char *)(v6 + 3089))
  {
    *(_OWORD *)int v36 = *(_OWORD *)(v6 + 3104);
    if (*(_OWORD *)v36 != 0) {
      WTF::UUID::toString((uint64_t *)&v37, (WTF::UUID *)v36);
    }
  }
  char v35 = 0;
  if (*(_OWORD *)(v6 + 3120) != 0)
  {
    WTF::UUID::toString((uint64_t *)v36, (WTF::UUID *)(v6 + 3120));
    char v35 = v36[0];
    v36[0] = 0;
  }
  WebCore::ResourceRequestBase::httpBody((uint64_t *)&v33, (WebKit::ServiceWorkerFetchTask *)((char *)this + 64));
  int v9 = v33;
  uint64_t v33 = 0;
  uint64_t v34 = v9;
  uint64_t v10 = *((void *)this + 35);
  if (v10) {
    BOOL v11 = *(unsigned char *)(v10 + 3024) != 0;
  }
  else {
    BOOL v11 = 0;
  }
  uint64_t v12 = *((void *)this + 4);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 8);
    if (v13)
    {
      uint64_t v14 = v6 + 3088;
      uint64_t v15 = *(void *)(*(void *)(v13 + 128) + 8);
      if (v15) {
        uint64_t v16 = v15 - 48;
      }
      else {
        uint64_t v16 = 0;
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v39, *(atomic_uchar *volatile **)(v16 + 72));
      char v17 = v39;
      __int16 v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)__int16 v18 = 2760;
      *((void *)v18 + objc_destroyWeak(this + 1) = 0;
      *((void *)v18 + 66) = (char *)v18 + 16;
      *((void *)v18 + 67) = 512;
      *((void *)v18 + 68) = 0;
      *((void *)v18 + 70) = 0;
      *((void *)v18 + 69) = 0;
      IPC::Encoder::encodeHeader(v18);
      v36[0] = v18;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, (uint64_t *)this + 6);
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v18, (uint64_t *)this + 7);
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, (uint64_t *)this + 5);
      IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v18, (WebCore::ResourceRequest *)buf);
      IPC::ArgumentCoder<WebCore::FetchOptions,void>::encode(v18, v14);
      IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(v18, &v34);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, (uint64_t *)&v38);
      uint64_t v19 = (unsigned char *)IPC::Encoder::grow(v18, 1uLL, 1);
      if (!v20)
      {
        __break(0xC471u);
        JUMPOUT(0x198C3179CLL);
      }
      *uint64_t v19 = v11;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, (uint64_t *)&v37);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, (uint64_t *)&v35);
      IPC::Connection::sendMessageImpl((uint64_t)v17, (uint64_t *)v36, 0, 0);
      uint64_t v22 = v36[0];
      v36[0] = 0;
      if (v22)
      {
        IPC::Encoder::~Encoder(v22, v21);
        WTF::fastFree(v31, v32);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v39);
      int v9 = v34;
    }
  }
  if (v9) {
    WTF::RefCounted<WebCore::FormData>::deref((WTF::RefCountedBase *)v9);
  }
  uint64_t v23 = (WTF::RefCountedBase *)v33;
  uint64_t v33 = 0;
  if (v23) {
    WTF::RefCounted<WebCore::FormData>::deref(v23);
  }
  uint64_t v24 = *((void *)this + 35);
  if (v24 && *(unsigned char *)(v24 + 3539)) {
    WebKit::ServiceWorkerFetchTask::sendNavigationPreloadUpdate((atomic_uchar *volatile **)this);
  }
  uint64_t v25 = v35;
  char v35 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v8);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  uint64_t v26 = v37;
  uint64_t v37 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v8);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  CFTypeRef v27 = cf;
  CFTypeRef cf = 0;
  if (v27) {
    CFRelease(v27);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
  unsigned int v29 = v38;
  unsigned int v38 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v7, v28);
}

uint64_t WebKit::ServiceWorkerFetchTask::workerClosed(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = *(WebKit::WebSWServerToContextConnection **)(v2 + 8);
    if (v3)
    {
      ++*((_DWORD *)v3 + 4);
      WebKit::WebSWServerToContextConnection::unregisterFetch(v3, this);
      int v4 = *((_DWORD *)v3 + 4);
      if (!v4)
      {
        uint64_t result = 286;
        __break(0xC471u);
        return result;
      }
      *((_DWORD *)v3 + 4) = v4 - 1;
    }
  }

  return (uint64_t)WebKit::ServiceWorkerFetchTask::contextClosed(this);
}

unsigned int *WebKit::ServiceWorkerFetchTask::contextClosed(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)this + 5);
    int v5 = *((unsigned __int8 *)this + 289);
    int v6 = *((unsigned __int8 *)this + 288);
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v4;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&unsigned char buf[24] = v5;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::contextClosed: (m_isDone=%d, m_wasHandled=%d)", buf, 0x22u);
  }
  uint64_t result = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v3);
  }
  if (!*((unsigned char *)this + 289))
  {
    if (!*((unsigned char *)this + 288) || *((unsigned char *)this + 291)) {
      return (unsigned int *)WebKit::ServiceWorkerFetchTask::cannotHandle(this);
    }
    uint64_t v8 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
    if (v8)
    {
      if (v8 == 1)
      {
        int v9 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        int v9 = *(WTF::StringImpl **)buf;
      }
    }
    else
    {
      int v9 = 0;
    }
    char v17 = 0;
    WTF::URL::invalidate((WTF::URL *)&v17);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v10 = *(WTF::StringImpl **)buf;
    if (v9) {
      *(_DWORD *)v9 += 2;
    }
    *(void *)long long buf = v9;
    BOOL v11 = v17;
    if (v17) {
      *(_DWORD *)v17 += 2;
    }
    *(void *)&uint8_t buf[8] = v11;
    *(_OWORD *)&buf[16] = v18;
    *(_OWORD *)&unsigned char buf[32] = v19;
    if (v10) {
      *(_DWORD *)v10 += 2;
    }
    uint64_t v21 = v10;
    int v22 = 0;
    __int16 v23 = 1;
    CFTypeRef cf = 0;
    char v25 = 1;
    WebKit::ServiceWorkerFetchTask::didFail(this, (const WebCore::ResourceError *)buf);
    CFTypeRef v13 = cf;
    CFTypeRef cf = 0;
    if (v13) {
      CFRelease(v13);
    }
    uint64_t v14 = v21;
    uint64_t v21 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t v15 = *(WTF::StringImpl **)&buf[8];
    *(void *)&uint8_t buf[8] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v12);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::destroy(v16, v12);
        if (!v10) {
          goto LABEL_39;
        }
LABEL_36:
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v12);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
LABEL_39:
        uint64_t result = (unsigned int *)v17;
        char v17 = 0;
        if (result)
        {
          if (*result == 2)
          {
            uint64_t result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
            if (!v9) {
              return result;
            }
LABEL_45:
            if (*(_DWORD *)v9 == 2) {
              return (unsigned int *)WTF::StringImpl::destroy(v9, v12);
            }
            *(_DWORD *)v9 -= 2;
            return result;
          }
          *result -= 2;
        }
        if (!v9) {
          return result;
        }
        goto LABEL_45;
      }
      *(_DWORD *)v16 -= 2;
    }
    if (!v10) {
      goto LABEL_39;
    }
    goto LABEL_36;
  }
  return result;
}

uint64_t *WebKit::ServiceWorkerFetchTask::didFail(WebKit::ServiceWorkerFetchTask *this, const WebCore::ResourceError *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 289) = 1;
  uint64_t v4 = (WebCore::TimerBase *)*((void *)this + 33);
  if (v4
    && (*((void *)v4 + 4) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((void *)v4 + 4) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase(v4);
    WebKit::ServiceWorkerFetchTask::softUpdateIfNeeded(this);
  }
  WebKit::ServiceWorkerFetchTask::cancelPreloadIfNecessary(this);
  int v5 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = *((void *)this + 5);
    MEMORY[0x19973EC60](a2);
    WTF::String::utf8();
    uint64_t v13 = v16 ? (uint64_t)v16 + 16 : 0;
    MEMORY[0x19973EC60](a2);
    int v14 = *((_DWORD *)a2 + 14);
    *(_DWORD *)long long buf = 134218754;
    long long v18 = this;
    __int16 v19 = 2048;
    uint64_t v20 = v12;
    __int16 v21 = 2082;
    uint64_t v22 = v13;
    __int16 v23 = 1024;
    int v24 = v14;
    _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::didFail: (error.domain=%{public}s, error.code=%d)", buf, 0x26u);
    if (v16)
    {
      if (*(_DWORD *)v16 == 1) {
        WTF::fastFree(v16, v15);
      }
      else {
        --*(_DWORD *)v16;
      }
    }
  }
  uint64_t v6 = *((void *)this + 3);
  if (!v6) {
    return WebKit::NetworkResourceLoader::didFailLoading(0, a2);
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7) {
    return WebKit::NetworkResourceLoader::didFailLoading(0, a2);
  }
  int v9 = *(_DWORD *)(v7 - 40);
  uint64_t v8 = (_DWORD *)(v7 - 40);
  *uint64_t v8 = v9 + 1;
  WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)(v8 - 2), a2);
  return (uint64_t *)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v8, v10);
}

uint64_t WebKit::ServiceWorkerFetchTask::cannotHandle(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358550;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 5);
    *(_DWORD *)uint64_t v8 = 134218240;
    *(void *)&v8[4] = this;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::cannotHandle:", v8, 0x16u);
  }
  WTF::RunLoop::main((WTF::RunLoop *)v3);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  int v5 = (atomic_uint *)*((void *)this + 1);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v6 = &unk_1EE9CA530;
  v6[1] = v5;
  *(void *)uint64_t v8 = v6;
  WTF::RunLoop::dispatch();
  uint64_t result = *(void *)v8;
  *(void *)uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

atomic_uchar *volatile **WebKit::ServiceWorkerFetchTask::sendNavigationPreloadUpdate(atomic_uchar *volatile **this)
{
  uint64_t v1 = this[35];
  uint64_t v2 = this[4];
  if (*((unsigned char *)v1 + 3500))
  {
    if (!v2) {
      return this;
    }
    uint64_t v3 = *((void *)v2 + 1);
    if (!v3) {
      return this;
    }
    uint64_t v4 = (WebCore::ResourceError *)(v1 + 430);
    int v5 = (uint64_t *)(this + 6);
    uint64_t v6 = (uint64_t *)(this + 7);
    uint64_t v7 = (uint64_t *)(this + 5);
    uint64_t v8 = *(void *)(*(void *)(v3 + 128) + 8);
    if (v8) {
      uint64_t v9 = v8 - 48;
    }
    else {
      uint64_t v9 = 0;
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v24, *(atomic_uchar *volatile **)(v9 + 72));
    uint64_t v10 = v24;
    uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v11 = 2751;
    *((void *)v11 + objc_destroyWeak(this + 1) = 0;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    uint64_t v25 = v11;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, v5);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v11, v6);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, v7);
    IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v11, v4);
  }
  else
  {
    if (!v2) {
      return this;
    }
    uint64_t v12 = *((void *)v2 + 1);
    if (!v12) {
      return this;
    }
    uint64_t v13 = (uint64_t *)(this + 6);
    int v14 = (uint64_t *)(this + 7);
    uint64_t v15 = (uint64_t *)(this + 5);
    uint64_t v16 = (WebCore::ResourceResponseBase *)(v1 + 397);
    uint64_t v17 = *(void *)(*(void *)(v12 + 128) + 8);
    if (v17) {
      uint64_t v18 = v17 - 48;
    }
    else {
      uint64_t v18 = 0;
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v24, *(atomic_uchar *volatile **)(v18 + 72));
    uint64_t v10 = v24;
    __int16 v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)__int16 v19 = 2752;
    *((void *)v19 + objc_destroyWeak(this + 1) = 0;
    *((void *)v19 + 66) = (char *)v19 + 16;
    *((void *)v19 + 67) = 512;
    *((void *)v19 + 68) = 0;
    *((void *)v19 + 70) = 0;
    *((void *)v19 + 69) = 0;
    IPC::Encoder::encodeHeader(v19);
    uint64_t v25 = v19;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v19, v13);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v19, v14);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v19, v15);
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v19, v16);
  }
  IPC::Connection::sendMessageImpl((uint64_t)v10, (uint64_t *)&v25, 0, 0);
  __int16 v21 = v25;
  uint64_t v25 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v20);
    WTF::fastFree(v22, v23);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v24);
}

_DWORD *WebKit::ServiceWorkerFetchTask::didReceiveRedirectResponse(WebKit::ServiceWorkerFetchTask *a1, uint64_t a2)
{
  WebKit::ServiceWorkerFetchTask::cancelPreloadIfNecessary(a1);

  return WebKit::ServiceWorkerFetchTask::processRedirectResponse(a1, a2, 1);
}

_DWORD *WebKit::ServiceWorkerFetchTask::processRedirectResponse(_DWORD *result, uint64_t a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)result + 289))
  {
    int v5 = result;
    uint64_t v6 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *((void *)v5 + 5);
      *(_DWORD *)long long buf = 134218240;
      uint64_t v17 = v5;
      __int16 v18 = 2048;
      uint64_t v19 = v7;
      _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::processRedirectResponse:", buf, 0x16u);
    }
    *((unsigned char *)v5 + 288) = 1;
    uint64_t v8 = (WebCore::TimerBase *)*((void *)v5 + 33);
    if (v8 && (*((void *)v8 + 4) & 0xFFFFFFFFFFFFLL) != 0) {
      WebCore::TimerBase::stopSlowCase(v8);
    }
    WebKit::ServiceWorkerFetchTask::softUpdateIfNeeded((WebKit::ServiceWorkerFetchTask *)v5);
    if (a3) {
      *(_WORD *)(a2 + 23objc_destroyWeak(this + 2) = *(_WORD *)(a2 + 232) & 0xC3FF | 0x1800;
    }
    uint64_t v9 = *(void *)(*((void *)v5 + 3) + 8);
    if (v9) {
      uint64_t v10 = v9 - 48;
    }
    else {
      uint64_t v10 = 0;
    }
    ++*(_DWORD *)(v10 + 8);
    WebCore::ResourceRequestBase::redirectedRequest();
    WebCore::ResourceRequest::ResourceRequest(v14, (const String *)v5 + 8);
    WebKit::NetworkResourceLoader::willSendServiceWorkerRedirectedRequest(v10, (const WebCore::ResourceRequest *)v14, (WebCore::ResourceRequestBase *)buf, a2);
    CFTypeRef v11 = cf;
    CFTypeRef cf = 0;
    if (v11) {
      CFRelease(v11);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v14);
    CFTypeRef v12 = v20;
    CFTypeRef v20 = 0;
    if (v12) {
      CFRelease(v12);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v10 + 8), v13);
  }
  return result;
}

void WebKit::ServiceWorkerFetchTask::softUpdateIfNeeded(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 5);
    int v4 = *((unsigned __int8 *)this + 290);
    int v14 = 134218496;
    uint64_t v15 = this;
    __int16 v16 = 2048;
    uint64_t v17 = v3;
    __int16 v18 = 1024;
    int v19 = v4;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::softUpdateIfNeeded: (m_shouldSoftUpdate=%d)", (uint8_t *)&v14, 0x1Cu);
  }
  if (*((unsigned char *)this + 290))
  {
    uint64_t v5 = *((void *)this + 3);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6) {
        uint64_t v7 = v6 - 48;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    ++*(_DWORD *)(v7 + 8);
    uint64_t v8 = WebKit::NetworkConnectionToWebProcess::swConnection(*(WebKit::NetworkConnectionToWebProcess **)(v7 + 3872));
    if (v8)
    {
      uint64_t v10 = v8;
      ++*(_DWORD *)(v8 + 16);
      if (!*((void *)this + 34))
      {
        __break(0xC471u);
        JUMPOUT(0x198C32354);
      }
      Registration = (_DWORD *)WebCore::SWServer::getRegistration();
      if (Registration)
      {
        CFTypeRef v12 = Registration;
        ++*Registration;
        WebCore::SWServerRegistration::scheduleSoftUpdate();
        WTF::RefCounted<WebCore::SWServerRegistration>::deref(v12);
      }
      int v13 = *(_DWORD *)(v10 + 16);
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x198C32374);
      }
      *(_DWORD *)(v10 + 16) = v13 - 1;
    }
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v7 + 8), v9);
  }
}

_DWORD *WebKit::ServiceWorkerFetchTask::didReceiveResponse(WebKit::ServiceWorkerFetchTask *this, uint64_t a2, int a3)
{
  uint64_t v6 = *((void *)this + 35);
  if (v6 && !*(unsigned char *)(v6 + 3024)) {
    WebKit::ServiceWorkerFetchTask::cancelPreloadIfNecessary(this);
  }

  return WebKit::ServiceWorkerFetchTask::processResponse(this, a2, a3, 1);
}

_DWORD *WebKit::ServiceWorkerFetchTask::processResponse(_DWORD *result, uint64_t a2, int a3, int a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)result + 289))
  {
    uint64_t v7 = result;
    uint64_t v8 = *((void *)result + 3);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9) {
        uint64_t v10 = v9 - 48;
      }
      else {
        uint64_t v10 = 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    ++*(_DWORD *)(v10 + 8);
    if (*(void *)(v10 + 4808) && !WebCore::ContentFilter::continueAfterResponseReceived()) {
      return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v10 + 8), v11);
    }
    CFTypeRef v12 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = a4;
      uint64_t v13 = *((void *)v7 + 5);
      int v14 = WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2);
      WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)a2);
      WTF::String::utf8();
      if (v32) {
        uint64_t v15 = (char *)v32 + 16;
      }
      else {
        uint64_t v15 = 0;
      }
      *(_DWORD *)long long buf = 134219522;
      uint64_t v34 = v7;
      __int16 v35 = 2048;
      uint64_t v36 = v13;
      __int16 v37 = 1024;
      int v38 = v14;
      __int16 v39 = 2082;
      long long v40 = v15;
      __int16 v41 = 2048;
      uint64_t v42 = WebCore::ResourceResponseBase::expectedContentLength((WebCore::ResourceResponseBase *)a2);
      __int16 v43 = 1024;
      int v44 = a3;
      __int16 v45 = 1024;
      int v46 = WebCore::ResourceResponseBase::source((WebCore::ResourceResponseBase *)a2);
      _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::processResponse: (httpStatusCode=%d, MIMEType=%{public}s, expectedContentLength=%lld, needsContinueDidReceiveResponseMessage=%d, source=%u)", buf, 0x3Cu);
      if (v32)
      {
        if (*(_DWORD *)v32 == 1) {
          WTF::fastFree(v32, v16);
        }
        else {
          --*(_DWORD *)v32;
        }
      }
      a4 = v31;
    }
    *((unsigned char *)v7 + 288) = 1;
    uint64_t v17 = (WebCore::TimerBase *)*((void *)v7 + 33);
    if (v17 && (*((void *)v17 + 4) & 0xFFFFFFFFFFFFLL) != 0) {
      WebCore::TimerBase::stopSlowCase(v17);
    }
    WebKit::ServiceWorkerFetchTask::softUpdateIfNeeded((WebKit::ServiceWorkerFetchTask *)v7);
    int v18 = *(unsigned __int8 *)(v10 + 3089);
    if (!*(unsigned char *)(v10 + 3089))
    {
      if (*(_DWORD *)(v10 + 3348))
      {
        uint64_t v26 = **(atomic_uint ***)(v10 + 3336);
        atomic_fetch_add(v26, 1u);
        if (v26)
        {
          WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v7 + 16));
          WebCore::validateCrossOriginResourcePolicy();
          if (v47)
          {
            WebKit::ServiceWorkerFetchTask::didFail((WebKit::ServiceWorkerFetchTask *)v7, (const WebCore::ResourceError *)buf);
            std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v28);
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v26, v29);
            return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v10 + 8), v11);
          }
          std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v27);
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v26, v30);
        }
      }
      int v18 = *(unsigned __int8 *)(v10 + 3089);
    }
    if (v18 == 2)
    {
      int v19 = *(atomic_uint **)(v10 + 120);
      if (v19) {
        atomic_fetch_add(v19, 1u);
      }
      WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v7 + 16));
      WebCore::validateCrossOriginResourcePolicy();
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v19, v20);
      if (v47)
      {
LABEL_29:
        WebKit::ServiceWorkerFetchTask::didFail((WebKit::ServiceWorkerFetchTask *)v7, (const WebCore::ResourceError *)buf);
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v23);
        return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v10 + 8), v11);
      }
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v21);
    }
    WebKit::NetworkResourceLoader::doCrossOriginOpenerHandlingOfResponse((WebKit::NetworkResourceLoader *)v10, (const WebCore::ResourceResponse *)a2, buf);
    if (!v47)
    {
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v22);
      if (a4) {
        *(_WORD *)(a2 + 23objc_destroyWeak(this + 2) = *(_WORD *)(a2 + 232) & 0xC3FF | 0x1800;
      }
      WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup((WebCore::ResourceResponse *)v10, (WebCore::ResourceResponseBase *)a2, 0, a3);
      if (a3)
      {
        WebCore::ResourceResponseBase::operator=(v10 + 3888, a2);
        uint64_t v24 = *(void *)(a2 + 240);
        *(void *)(a2 + 240) = 0;
        uint64_t v25 = *(const void **)(v10 + 4128);
        *(void *)(v10 + 4128) = v24;
        if (v25) {
          CFRelease(v25);
        }
        *(unsigned char *)(v10 + 4136) = *(unsigned char *)(a2 + 248);
      }
      return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v10 + 8), v11);
    }
    goto LABEL_29;
  }
  return result;
}

unsigned int *WebKit::ServiceWorkerFetchTask::didReceiveData(unsigned int *this, const IPC::SharedBufferReference *a2, uint64_t a3)
{
  if (!*((unsigned char *)this + 289))
  {
    uint64_t v5 = this;
    this = IPC::SharedBufferReference::unsafeBuffer((unsigned int *)a2, (uint64_t *)&v23);
    uint64_t v7 = v23;
    if (v23)
    {
      uint64_t v8 = *((void *)v5 + 3);
      if (v8 && (uint64_t v9 = *(void *)(v8 + 8)) != 0)
      {
        int v11 = *(_DWORD *)(v9 - 40);
        uint64_t v10 = v9 - 40;
        *(_DWORD *)uint64_t v10 = v11 + 1;
        CFTypeRef v12 = *(WebCore::ContentFilter **)(v10 + 4800);
        if (v12)
        {
          int v13 = WebCore::ContentFilter::continueAfterDataReceived(v12, v7);
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v10, v14);
          if (!v13) {
            return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v15);
          }
        }
        else
        {
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v10, v6);
        }
      }
      else if (MEMORY[0x12C8] && (WebCore::ContentFilter::continueAfterDataReceived(MEMORY[0x12C8], v23) & 1) == 0)
      {
        return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v15);
      }
      __int16 v16 = (atomic_uint *)*((void *)a2 + 1);
      uint64_t v19 = *(void *)a2;
      if (v16) {
        atomic_fetch_add(v16, 1u);
      }
      uint64_t v20 = (unsigned int *)v16;
      uint64_t v17 = (atomic_uint *)*((void *)a2 + 2);
      if (v17) {
        atomic_fetch_add(v17, 1u);
      }
      uint64_t v21 = (unsigned int *)v17;
      v22[0] = &v19;
      v22[1] = a3;
      WebKit::ServiceWorkerFetchTask::sendToClient<Messages::WebResourceLoader::DidReceiveData>(*((void *)v5 + 3), (uint64_t)v22);
      int v18 = v21;
      uint64_t v21 = 0;
      if (v18) {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v18);
      }
      this = v20;
      uint64_t v20 = 0;
      if (this) {
        this = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(this, v15);
      }
      uint64_t v7 = v23;
      if (v23) {
        return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v15);
      }
    }
  }
  return this;
}

_DWORD *WebKit::ServiceWorkerFetchTask::sendToClient<Messages::WebResourceLoader::DidReceiveData>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    uint64_t v4 = v3 - 48;
  }
  else {
    uint64_t v4 = 0;
  }
  int v6 = *(_DWORD *)(v4 + 8);
  uint64_t v5 = v4 + 8;
  *(_DWORD *)uint64_t v5 = v6 + 1;
  uint64_t v7 = *(void *)(*(void *)(v5 + 3864) + 72);
  uint64_t v8 = *(void *)(v5 + 3040);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2712;
  *((void *)v9 + objc_destroyWeak(this + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v15 = v9;
  IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<IPC::SharedBufferReference const&,unsigned long long>,0ul,1ul>(v9, a2);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v15, 0, 0);
  int v11 = v15;
  uint64_t v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v10);
    WTF::fastFree(v13, v14);
  }

  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v5, (WTF::StringImpl *)v10);
}

WebKit::ServiceWorkerFetchTask *WebKit::ServiceWorkerFetchTask::didFinish(WebKit::ServiceWorkerFetchTask *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 5);
    *(_DWORD *)uint64_t v24 = 134218240;
    *(void *)&v24[4] = this;
    __int16 v25 = 2048;
    uint64_t v26 = v5;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::didFinish:", v24, 0x16u);
  }
  *((unsigned char *)this + 289) = 1;
  int v6 = (WebCore::TimerBase *)*((void *)this + 33);
  if (v6 && (*((void *)v6 + 4) & 0xFFFFFFFFFFFFLL) != 0) {
    WebCore::TimerBase::stopSlowCase(v6);
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7 && (uint64_t v8 = *(void *)(v7 + 8)) != 0)
  {
    int v10 = *(_DWORD *)(v8 - 40);
    uint64_t v9 = (_DWORD *)(v8 - 40);
    _DWORD *v9 = v10 + 1;
    WebKit::NetworkResourceLoader::serviceWorkerDidFinish((uint64_t)(v9 - 2));
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v9, v11);
  }
  else
  {
    WebKit::NetworkResourceLoader::serviceWorkerDidFinish(0);
  }
  uint64_t v12 = *(void *)(*((void *)this + 3) + 8);
  if (v12) {
    uint64_t v13 = v12 - 48;
  }
  else {
    uint64_t v13 = 0;
  }
  int v15 = *(_DWORD *)(v13 + 8);
  uint64_t v14 = v13 + 8;
  *(_DWORD *)uint64_t v14 = v15 + 1;
  uint64_t v16 = *(void *)(*(void *)(v14 + 3864) + 72);
  uint64_t v17 = *(void *)(v14 + 3040);
  int v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v18 = 2711;
  *((void *)v18 + objc_destroyWeak(this + 1) = v17;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 68) = 0;
  *((void *)v18 + 70) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  *(void *)uint64_t v24 = v18;
  IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(v18, (uint64_t)a2);
  IPC::Connection::sendMessageImpl(v16, (uint64_t *)v24, 0, 0);
  uint64_t v20 = *(IPC::Encoder **)v24;
  *(void *)uint64_t v24 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v19);
    WTF::fastFree(v22, v23);
  }
  WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v14, (WTF::StringImpl *)v19);
  return WebKit::ServiceWorkerFetchTask::cancelPreloadIfNecessary(this);
}

void WebKit::ServiceWorkerFetchTask::didNotHandle(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 289))
  {
    uint64_t v2 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *((void *)this + 5);
      int v11 = 134218240;
      uint64_t v12 = this;
      __int16 v13 = 2048;
      uint64_t v14 = v3;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::didNotHandle:", (uint8_t *)&v11, 0x16u);
    }
    uint64_t v4 = (WebCore::TimerBase *)*((void *)this + 33);
    if (v4 && (*((void *)v4 + 4) & 0xFFFFFFFFFFFFLL) != 0) {
      WebCore::TimerBase::stopSlowCase(v4);
    }
    WebKit::ServiceWorkerFetchTask::softUpdateIfNeeded(this);
    uint64_t v5 = *((void *)this + 35);
    if (v5 && !*(unsigned char *)(v5 + 3024))
    {
      WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(this);
    }
    else
    {
      *((unsigned char *)this + 289) = 1;
      uint64_t v6 = *((void *)this + 3);
      if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0)
      {
        int v9 = *(_DWORD *)(v7 - 40);
        uint64_t v8 = (_DWORD *)(v7 - 40);
        *uint64_t v8 = v9 + 1;
        WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle((WebKit::NetworkResourceLoader *)(v8 - 2), this);
        WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v8, v10);
      }
      else
      {
        WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle(0, this);
      }
    }
  }
}

void WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 5);
    *(_DWORD *)uint64_t v7 = 134218240;
    *(void *)&v7[4] = this;
    __int16 v8 = 2048;
    uint64_t v9 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::loadResponseFromPreloader", v7, 0x16u);
  }
  if (!*((unsigned char *)this + 291))
  {
    *((unsigned char *)this + 29objc_destroyWeak(this + 1) = 1;
    uint64_t v4 = *((void *)this + 35);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    uint64_t v5 = (atomic_uint *)*((void *)this + 1);
    if (v5) {
      atomic_fetch_add(v5, 1u);
    }
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v6 = &unk_1EE9CA558;
    v6[1] = v5;
    *(void *)uint64_t v7 = v6;
    WebKit::ServiceWorkerNavigationPreloader::waitForResponse(v4, (uint64_t *)v7);
    if (*(void *)v7) {
      (*(void (**)(void))(**(void **)v7 + 8))(*(void *)v7);
    }
  }
}

void WebKit::ServiceWorkerFetchTask::usePreload(WebKit::ServiceWorkerFetchTask *this)
{
  if (!*((unsigned char *)this + 289))
  {
    if (*((void *)this + 35))
    {
      WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(this);
    }
    else
    {
      *((unsigned char *)this + 289) = 1;
      uint64_t v1 = *((void *)this + 3);
      if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0)
      {
        int v4 = *(_DWORD *)(v2 - 40);
        uint64_t v3 = (_DWORD *)(v2 - 40);
        *uint64_t v3 = v4 + 1;
        WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle((WebKit::NetworkResourceLoader *)(v3 - 2), this);
        WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v3, v5);
      }
      else
      {
        WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle(0, this);
      }
    }
  }
}

void WebKit::ServiceWorkerFetchTask::cancelFromClient(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 5);
    int v4 = *((unsigned __int8 *)this + 289);
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v3;
    *(_WORD *)&buf[22] = 1024;
    int v11 = v4;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::cancelFromClient: isDone=%d", buf, 0x1Cu);
  }
  if (!*((unsigned char *)this + 289))
  {
    *(void *)long long buf = (char *)this + 48;
    *(void *)&uint8_t buf[8] = (char *)this + 56;
    *(void *)&buf[16] = (char *)this + 40;
    uint64_t v5 = *((void *)this + 4);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v6 + 128) + 8);
        if (v7) {
          uint64_t v8 = v7 - 48;
        }
        else {
          uint64_t v8 = 0;
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, *(atomic_uchar *volatile **)(v8 + 72));
        IPC::Connection::send<Messages::WebSWContextManagerConnection::CancelFetch>((uint64_t)v9, (uint64_t **)buf, 0, 0, 0);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v9);
      }
    }
  }
}

void WebKit::ServiceWorkerFetchTask::continueDidReceiveFetchResponse(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 5);
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::continueDidReceiveFetchResponse:", buf, 0x16u);
  }
  if (*((unsigned char *)this + 291))
  {
    int v4 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *((void *)this + 5);
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v5;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::loadBodyFromPreloader", buf, 0x16u);
    }
    uint64_t v6 = *((void *)this + 35);
    if (v6)
    {
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
      uint64_t v7 = (atomic_uint *)*((void *)this + 1);
      if (v7) {
        atomic_fetch_add(v7, 1u);
      }
      uint64_t v8 = (WebKit::ServiceWorkerFetchTask *)WTF::fastMalloc((WTF *)0x18);
      uint64_t v9 = v8;
      *(void *)uint64_t v8 = &unk_1EE9CA580;
      *((void *)v8 + objc_destroyWeak(this + 1) = this;
      *((void *)v8 + objc_destroyWeak(this + 2) = v7;
      if (*(unsigned char *)(v6 + 3500) || (uint64_t v28 = *(void *)(v6 + 3432)) == 0)
      {
        *(void *)long long buf = 0;
        WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadBodyFromPreloader(void)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer const,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer const>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer const>> &&,unsigned long long>::call(v8, (WebCore::FragmentedSharedBuffer **)buf, 0);
        (*(void (**)(WebKit::ServiceWorkerFetchTask *))(*(void *)v9 + 8))(v9);
      }
      else
      {
        uint64_t v29 = *(void *)(v6 + 3528);
        *(void *)(v6 + 3528) = v9;
        if (v29)
        {
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
          uint64_t v28 = *(void *)(v6 + 3432);
        }
        *(void *)(v6 + 343objc_destroyWeak(this + 2) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v28 + 16))(v28, 0);
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
      return;
    }
    int v18 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *((void *)this + 5);
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v34;
      _os_log_error_impl(&dword_1985F2000, v18, OS_LOG_TYPE_ERROR, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::loadBodyFromPreloader preloader is null", buf, 0x16u);
    }
    uint64_t v19 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
    if (v19)
    {
      if (v19 == 1)
      {
        uint64_t v20 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v20 = *(WTF::StringImpl **)buf;
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t v21 = WebCore::ResourceRequestBase::url((WebKit::ServiceWorkerFetchTask *)((char *)this + 64));
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v22 = *(WTF::StringImpl **)buf;
    if (v20) {
      *(_DWORD *)v20 += 2;
    }
    *(void *)long long buf = v20;
    __int16 v23 = *(_DWORD **)v21;
    if (*(void *)v21) {
      *v23 += 2;
    }
    *(void *)&uint8_t buf[8] = v23;
    long long v24 = *(_OWORD *)(v21 + 24);
    *(_OWORD *)&buf[16] = *(_OWORD *)(v21 + 8);
    long long v38 = v24;
    if (v22) {
      *(_DWORD *)v22 += 2;
    }
    __int16 v39 = v22;
    int v40 = 0;
    __int16 v41 = 3;
    CFTypeRef cf = 0;
    char v43 = 1;
    WebKit::ServiceWorkerFetchTask::didFail(this, (const WebCore::ResourceError *)buf);
    CFTypeRef v26 = cf;
    CFTypeRef cf = 0;
    if (v26) {
      CFRelease(v26);
    }
    uint64_t v27 = v39;
    __int16 v39 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v25);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    uint64_t v30 = *(WTF::StringImpl **)&buf[8];
    *(void *)&uint8_t buf[8] = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v25);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    int v31 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::destroy(v31, v25);
        if (!v22) {
          goto LABEL_52;
        }
LABEL_50:
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::destroy(v22, v25);
          if (!v20) {
            return;
          }
          goto LABEL_55;
        }
        *(_DWORD *)v22 -= 2;
LABEL_52:
        if (!v20) {
          return;
        }
LABEL_55:
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v25);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
        return;
      }
      *(_DWORD *)v31 -= 2;
    }
    if (!v22) {
      goto LABEL_52;
    }
    goto LABEL_50;
  }
  *(void *)long long buf = (char *)this + 48;
  *(void *)&uint8_t buf[8] = (char *)this + 56;
  *(void *)&buf[16] = (char *)this + 40;
  uint64_t v10 = *((void *)this + 4);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11)
    {
      uint64_t v12 = *(void *)(*(void *)(v11 + 128) + 8);
      if (v12) {
        uint64_t v13 = v12 - 48;
      }
      else {
        uint64_t v13 = 0;
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v35, *(atomic_uchar *volatile **)(v13 + 72));
      uint64_t v14 = v35;
      uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v15 = 2739;
      *((void *)v15 + objc_destroyWeak(this + 1) = 0;
      *((void *)v15 + 66) = (char *)v15 + 16;
      *((void *)v15 + 67) = 512;
      *((void *)v15 + 68) = 0;
      *((void *)v15 + 70) = 0;
      *((void *)v15 + 69) = 0;
      IPC::Encoder::encodeHeader(v15);
      uint64_t v36 = v15;
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,0ul,1ul,2ul>(v15, (uint64_t **)buf);
      IPC::Connection::sendMessageImpl((uint64_t)v14, (uint64_t *)&v36, 0, 0);
      uint64_t v17 = v36;
      uint64_t v36 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v16);
        WTF::fastFree(v32, v33);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v35);
    }
  }
}

_DWORD *WebKit::ServiceWorkerFetchTask::continueFetchTaskWith(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v4 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v6) {
      LODWORD(v6) = *(void *)(v6 + 8) != 0;
    }
    int v19 = 134218496;
    uint64_t v20 = a1;
    __int16 v21 = 2048;
    uint64_t v22 = v5;
    __int16 v23 = 1024;
    int v24 = v6;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::continueFetchTaskWith: (hasServiceWorkerConnection=%d)", (uint8_t *)&v19, 0x1Cu);
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v9 = (_DWORD *)(v8 - 48);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v9 + 2;
  ++v9[2];
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11 && *(void *)(v11 + 8))
  {
    if (*(void *)(a1 + 264)) {
      WebCore::TimerBase::start();
    }
    WebCore::ResourceRequestBase::RequestData::operator=(a1 + 64, a2);
    WTF::String::operator=((uint64_t *)(a1 + 216), (uint64_t *)(a2 + 152));
    WTF::String::operator=((uint64_t *)(a1 + 224), (uint64_t *)(a2 + 160));
    uint64_t v12 = *(void *)(a2 + 168);
    *(void *)(a2 + 168) = 0;
    uint64_t v13 = *(WTF::RefCountedBase **)(a1 + 232);
    *(void *)(a1 + 23objc_destroyWeak(this + 2) = v12;
    if (v13) {
      WTF::RefCounted<WebCore::FormData>::deref(v13);
    }
    uint64_t v14 = *(void *)(a2 + 176);
    *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 184);
    *(void *)(a1 + 240) = v14;
    uint64_t v15 = *(void *)(a2 + 192);
    *(void *)(a2 + 19objc_destroyWeak(this + 2) = 0;
    uint64_t v16 = *(const void **)(a1 + 256);
    *(void *)(a1 + 256) = v15;
    if (v16) {
      CFRelease(v16);
    }
    WebKit::ServiceWorkerFetchTask::startFetch((WebKit::ServiceWorkerFetchTask *)a1);
  }
  else
  {
    WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle((WebKit::NetworkResourceLoader *)v9, (WebKit::ServiceWorkerFetchTask *)a1);
  }
  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v10, v17);
}

void WebKit::ServiceWorkerFetchTask::preloadResponseIsReady(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v2 = *((void *)this + 35);
  if (*((unsigned char *)this + 291))
  {
    if (*(unsigned char *)(v2 + 3500))
    {
      uint64_t v3 = *(WTF::StringImpl **)(v2 + 3440);
      if (v3) {
        *(_DWORD *)v3 += 2;
      }
      uint64_t v17 = v3;
      int v4 = *(WTF::StringImpl **)(v2 + 3448);
      if (v4) {
        *(_DWORD *)v4 += 2;
      }
      int v18 = v4;
      long long v5 = *(_OWORD *)(v2 + 3472);
      long long v19 = *(_OWORD *)(v2 + 3456);
      long long v20 = v5;
      uint64_t v6 = *(WTF::StringImpl **)(v2 + 3488);
      if (v6) {
        *(_DWORD *)v6 += 2;
      }
      __int16 v21 = v6;
      int v22 = *(_DWORD *)(v2 + 3496);
      __int16 v23 = *(_WORD *)(v2 + 3500);
      uint64_t v7 = *(const void **)(v2 + 3504);
      CFTypeRef v24 = v7;
      if (v7) {
        CFRetain(v7);
      }
      char v25 = *(unsigned char *)(v2 + 3512);
      WebKit::ServiceWorkerFetchTask::didFail(this, (const WebCore::ResourceError *)&v17);
      CFTypeRef v9 = v24;
      CFTypeRef v24 = 0;
      if (v9) {
        CFRelease(v9);
      }
      uint64_t v10 = v21;
      __int16 v21 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v8);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t v15 = v18;
      int v18 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v8);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      uint64_t v16 = v17;
      uint64_t v17 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v8);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v17, (const WebCore::ResourceResponseBase *)(v2 + 3176));
      uint64_t v12 = *(const void **)(v2 + 3416);
      CFTypeRef cf = v12;
      if (v12) {
        CFRetain(v12);
      }
      char v27 = *(unsigned char *)(v2 + 3424);
      if (WebCore::ResourceResponseBase::isRedirection((WebCore::ResourceResponseBase *)&v17)
        && (WebCore::ResourceResponseBase::httpHeaderFields((WebCore::ResourceResponseBase *)&v17),
            WebCore::HTTPHeaderMap::contains()))
      {
        WebKit::ServiceWorkerFetchTask::processRedirectResponse(this, (uint64_t)&v17, 0);
      }
      else
      {
        WebKit::ServiceWorkerFetchTask::processResponse(this, (uint64_t)&v17, 1, 0);
      }
      CFTypeRef v14 = cf;
      CFTypeRef cf = 0;
      if (v14) {
        CFRelease(v14);
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v17, v13);
    }
  }
  else if (v2)
  {
    if (*(unsigned char *)(v2 + 3024))
    {
      uint64_t v11 = *((void *)this + 4);
      if (v11)
      {
        if (*(void *)(v11 + 8))
        {
          WebKit::ServiceWorkerFetchTask::sendNavigationPreloadUpdate((atomic_uchar *volatile **)this);
        }
      }
    }
  }
}

uint64_t WebKit::ServiceWorkerFetchTask::convertToDownload(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequest *a4, WebCore::ResourceResponseBase *a5)
{
  uint64_t v40 = a3;
  uint64_t v8 = *(void *)(a1 + 280);
  if (v8)
  {
    CFTypeRef v9 = *(WebKit::NetworkLoad **)(v8 + 24);
    if (v9)
    {
      *(void *)(v8 + 24) = 0;
      char v43 = v9;
      std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(v8 + 24), 0);
      __int16 v41 = 0;
      uint64_t v42 = 0;
      WebKit::DownloadManager::convertNetworkLoadToDownload(a2, a3, (uint64_t *)&v43, (uint64_t *)(v8 + 3432), (uint64_t)&v41, a4, a5);
      WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v11);
      uint64_t v13 = v43;
      char v43 = 0;
      if (v13)
      {
        WebKit::NetworkLoad::~NetworkLoad(v13, v12);
        WTF::fastFree(v14, v15);
      }
      return 1;
    }
    return 0;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  if (!v18) {
    return 0;
  }
  uint64_t result = *(void *)(v18 + 8);
  if (result)
  {
    uint64_t result = WebKit::WebSWServerConnection::session((WebKit::WebSWServerConnection *)result);
    char v43 = (WebKit::NetworkLoad *)result;
    if (result)
    {
      long long v19 = (WebKit::NetworkLoad *)result;
      int v20 = *(_DWORD *)(result + 16) + 1;
      *(_DWORD *)(result + 16) = v20;
      uint64_t v21 = *(void *)(a1 + 32);
      if (v21 && *(void *)(v21 + 8))
      {
        *(unsigned char *)(a1 + 289) = 1;
        uint64_t v39 = 0;
        uint64_t v22 = *(void *)(a1 + 24);
        if (v22 && (uint64_t v23 = *(void *)(v22 + 8)) != 0)
        {
          uint64_t v24 = v23 - 48;
          ++*(_DWORD *)(v23 - 40);
        }
        else
        {
          uint64_t v24 = 0;
        }
        char v25 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0xCA0);
        CFTypeRef v26 = (void *)WTF::fastMalloc((WTF *)0x38);
        void *v26 = &unk_1EE9CA350;
        v26[1] = a1;
        v26[2] = &v39;
        v26[3] = &v43;
        v26[4] = a4;
        v26[5] = a5;
        v26[6] = &v40;
        __int16 v41 = v26;
        WebKit::NetworkLoad::NetworkLoad((uint64_t)v25, v24, (uint64_t)v19, &v41);
        long long v38 = v25;
        (*(void (**)(void *))(*v26 + 8))(v26);
        WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v24 + 8), v27);
        uint64_t v28 = v39;
        uint64_t v39 = 0;
        uint64_t v29 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v29 = &unk_1EE9CA5A8;
        v29[1] = v28;
        __int16 v37 = v29;
        __int16 v41 = 0;
        uint64_t v42 = 0;
        WebKit::DownloadManager::convertNetworkLoadToDownload(a2, v40, (uint64_t *)&v38, (uint64_t *)&v37, (uint64_t)&v41, a4, a5);
        WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v30);
        uint64_t v32 = (uint64_t)v37;
        __int16 v37 = 0;
        if (v32) {
          (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
        }
        uint64_t v33 = v38;
        long long v38 = 0;
        if (v33)
        {
          WebKit::NetworkLoad::~NetworkLoad(v33, v31);
          WTF::fastFree(v34, v35);
        }
        uint64_t v36 = v39;
        uint64_t v39 = 0;
        if (v36) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v36 + 8));
        }
        long long v19 = v43;
        if (!v43) {
          return 1;
        }
        int v20 = *((_DWORD *)v43 + 4);
        uint64_t result = 1;
        if (!v20)
        {
LABEL_27:
          __break(0xC471u);
          JUMPOUT(0x198C33B5CLL);
        }
      }
      else
      {
        uint64_t result = 0;
        if (!v20) {
          goto LABEL_27;
        }
      }
      *((_DWORD *)v19 + 4) = v20 - 1;
    }
  }
  return result;
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::shouldCaptureExtraNetworkLoadMetrics(WebKit::ServiceWorkerNavigationPreloader *this)
{
  return *((unsigned __int8 *)this + 3538);
}

WebKit::NetworkLoad *WebKit::ServiceWorkerNavigationPreloader::didFailLoading(WebKit::ServiceWorkerNavigationPreloader *this, const WebCore::ResourceError *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v4 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 134217984;
    uint64_t v11 = this;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "ServiceWorkerNavigationPreloader::didFailLoading %p", (uint8_t *)&v10, 0xCu);
  }
  *((unsigned char *)this + 3539) = 1;
  WTF::String::operator=((uint64_t *)this + 430, (WTF::StringImpl **)a2);
  WTF::String::operator=((uint64_t *)this + 431, (WTF::StringImpl **)a2 + 1);
  long long v5 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 216) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 217) = v5;
  WTF::String::operator=((uint64_t *)this + 436, (WTF::StringImpl **)a2 + 6);
  int v6 = *((_DWORD *)a2 + 14);
  *((_WORD *)this + 1750) = *((_WORD *)a2 + 30);
  *((_DWORD *)this + 874) = v6;
  uint64_t v7 = *((void *)a2 + 8);
  if (v7) {
    CFRetain(*((CFTypeRef *)a2 + 8));
  }
  uint64_t v8 = (const void *)*((void *)this + 438);
  *((void *)this + 438) = v7;
  if (v8) {
    CFRelease(v8);
  }
  *((unsigned char *)this + 351objc_destroyWeak(this + 2) = *((unsigned char *)a2 + 72);
  return WebKit::ServiceWorkerNavigationPreloader::didComplete((WebKit::NetworkLoad **)this);
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::loadFromNetwork(WebKit::NetworkLoad **this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134217984;
    uint64_t v8 = (WebKit::ServiceWorkerNavigationPreloader *)this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "ServiceWorkerNavigationPreloader::loadFromNetwork %p", (uint8_t *)&v7, 0xCu);
  }
  if (*((unsigned char *)this + 3024)) {
    WebCore::ResourceRequestBase::addHTTPHeaderField();
  }
  uint64_t v3 = this[4];
  if (v3) {
    int v4 = (WebKit::NetworkSession *)*((void *)v3 + 1);
  }
  else {
    int v4 = 0;
  }
  long long v5 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0xCA0);
  WebKit::NetworkLoad::NetworkLoad((uint64_t)v5, (uint64_t)this, (uint64_t)(this + 6), v4);
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](this + 3, v5);
  uint64_t result = *((void *)this[3] + 376);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void WebKit::ServiceWorkerNavigationPreloader::~ServiceWorkerNavigationPreloader(WebKit::ServiceWorkerNavigationPreloader *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 441);
  *((void *)this + 44objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 440);
  *((void *)this + 440) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  long long v5 = (const void *)*((void *)this + 438);
  *((void *)this + 438) = 0;
  if (v5) {
    CFRelease(v5);
  }
  int v6 = (WTF::StringImpl *)*((void *)this + 436);
  *((void *)this + 436) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  int v7 = (WTF::StringImpl *)*((void *)this + 431);
  *((void *)this + 43objc_destroyWeak(this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 430);
  *((void *)this + 430) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *((void *)this + 429);
  *((void *)this + 429) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  int v10 = (const void *)*((void *)this + 427);
  *((void *)this + 427) = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::ServiceWorkerNavigationPreloader *)((char *)this + 3176), a2);
  uint64_t v12 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)this + 396);
  *((void *)this + 396) = 0;
  if (v12) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v12);
  }
  uint64_t v13 = (WTF::StringImpl *)*((void *)this + 392);
  *((void *)this + 39objc_destroyWeak(this + 2) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 380, 0);
  uint64_t v15 = (WTF::StringImpl *)*((void *)this + 379);
  *((void *)this + 379) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (*((unsigned char *)this + 3000))
  {
    uint64_t v24 = (const void *)*((void *)this + 374);
    *((void *)this + 374) = 0;
    if (v24) {
      CFRelease(v24);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2952, v14);
  if (*((unsigned char *)this + 2928)) {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::ServiceWorkerNavigationPreloader *)((char *)this + 352));
  }
  uint64_t v16 = (const void *)*((void *)this + 41);
  *((void *)this + 4objc_destroyWeak(this + 1) = 0;
  if (v16) {
    CFRelease(v16);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::ServiceWorkerNavigationPreloader *)((char *)this + 136));
  uint64_t v18 = *((void *)this + 11);
  *((void *)this + 1objc_destroyWeak(this + 1) = 0;
  if (v18) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v18, v17);
  }
  uint64_t v19 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v19) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v19, v17);
  }
  int v20 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v17);
  }
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)this + 3, 0);
  uint64_t v22 = *((void *)this + 1);
  if (v22)
  {
    *(void *)(v22 + 8) = 0;
    uint64_t v23 = (unsigned int *)*((void *)this + 1);
    *((void *)this + objc_destroyWeak(this + 1) = 0;
    if (v23)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v21);
      }
    }
  }
  else
  {
    *((void *)this + objc_destroyWeak(this + 1) = 0;
  }
}

{
  _DWORD *v2;
  void *v3;
  uint64_t vars8;

  WebKit::ServiceWorkerNavigationPreloader::~ServiceWorkerNavigationPreloader(this, a2);
  if (v2[4])
  {
    bzero(v2, 0xDE0uLL);
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

WebKit::NetworkLoad *WebKit::ServiceWorkerNavigationPreloader::loadWithCacheEntry(WebKit::ServiceWorkerNavigationPreloader *this, WebKit::NetworkCache::Entry *a2)
{
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v12, (WebKit::NetworkCache::Entry *)((char *)a2 + 80));
  uint64_t v4 = (const void *)*((void *)a2 + 40);
  CFTypeRef cf = v4;
  if (v4) {
    CFRetain(v4);
  }
  char v14 = *((unsigned char *)a2 + 328);
  long long v5 = (atomic_uint *)*((void *)a2 + 70);
  if (v5
    || (WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord((unsigned int **)a2),
        (long long v5 = (atomic_uint *)*((void *)a2 + 70)) != 0))
  {
    atomic_fetch_add(v5, 1u);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  int v6 = (atomic_uint *)*((void *)this + 1);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  int v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v7 = &unk_1EE9CA5F8;
  v7[1] = v5;
  uint64_t v7[2] = v6;
  uint64_t v11 = v7;
  WebKit::ServiceWorkerNavigationPreloader::didReceiveResponse(this, v12, 0, &v11);
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v12, v8);
  return WebKit::ServiceWorkerNavigationPreloader::didComplete((WebKit::NetworkLoad **)this);
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v7 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 134217984;
    uint64_t v19 = a1;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "ServiceWorkerNavigationPreloader::didReceiveResponse %p", (uint8_t *)&v18, 0xCu);
  }
  *(unsigned char *)(a1 + 3539) = 1;
  if (WebCore::ResourceResponseBase::isRedirection((WebCore::ResourceResponseBase *)a2)) {
    *(_WORD *)(a2 + 232) |= 0x300u;
  }
  if (WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2) == 304
    && (uint64_t v8 = *(WebKit::NetworkCache::Entry **)(a1 + 3040)) != 0)
  {
    *(void *)(a1 + 3040) = 0;
    WebKit::ServiceWorkerNavigationPreloader::loadWithCacheEntry((WebKit::ServiceWorkerNavigationPreloader *)a1, v8);
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, 2);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    WebKit::NetworkCache::Entry::~Entry(v8, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    WebCore::ResourceResponseBase::operator=(a1 + 3176, a2);
    uint64_t v14 = *(void *)(a2 + 240);
    *(void *)(a2 + 240) = 0;
    uint64_t v15 = *(const void **)(a1 + 3416);
    *(void *)(a1 + 3416) = v14;
    if (v15) {
      CFRelease(v15);
    }
    *(unsigned char *)(a1 + 3424) = *(unsigned char *)(a2 + 248);
    uint64_t v16 = *a4;
    *a4 = 0;
    uint64_t result = *(void *)(a1 + 3432);
    *(void *)(a1 + 343objc_destroyWeak(this + 2) = v16;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    uint64_t v17 = *(void *)(a1 + 3520);
    *(void *)(a1 + 3520) = 0;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
      return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  return result;
}

WebKit::NetworkLoad *WebKit::ServiceWorkerNavigationPreloader::didComplete(WebKit::NetworkLoad **this)
{
  uint64_t result = std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](this + 3, 0);
  uint64_t v3 = this[440];
  uint64_t v4 = this[441];
  *((_OWORD *)this + 220) = 0u;
  if (v3) {
    uint64_t result = (WebKit::NetworkLoad *)(*(uint64_t (**)(WebKit::NetworkLoad *))(*(void *)v3 + 16))(v3);
  }
  if (v4)
  {
    int v7 = 0;
    (*(void (**)(WebKit::NetworkLoad *, unsigned int **, void))(*(void *)v4 + 16))(v4, &v7, 0);
    int v6 = v7;
    int v7 = 0;
    if (v6) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v5);
    }
    uint64_t result = (WebKit::NetworkLoad *)(*(uint64_t (**)(WebKit::NetworkLoad *))(*(void *)v4 + 8))(v4);
  }
  if (v3) {
    return (WebKit::NetworkLoad *)(*(uint64_t (**)(WebKit::NetworkLoad *))(*(void *)v3 + 8))(v3);
  }
  return result;
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::willSendRedirectedRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v8 = *(atomic_uint **)(a1 + 8);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  uint64_t v9 = *a5;
  *a5 = 0;
  int v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9CA620;
  v10[1] = v8;
  v10[2] = v9;
  uint64_t v13 = v10;
  WebKit::ServiceWorkerNavigationPreloader::didReceiveResponse(a1, a4, 0, (uint64_t *)&v13);
  uint64_t result = (uint64_t)v13;
  if (v13)
  {
    uint64_t v12 = *(uint64_t (**)(void))(*v13 + 8);
    return v12();
  }
  return result;
}

unsigned int *WebKit::ServiceWorkerNavigationPreloader::didReceiveBuffer(unsigned int *this, atomic_uint *a2)
{
  if (*((void *)this + 441))
  {
    atomic_fetch_add(a2, 1u);
    uint64_t v3 = (unsigned int *)a2;
    (*(void (**)(void, unsigned int **))(**((void **)this + 441) + 16))(*((void *)this + 441), &v3);
    this = v3;
    uint64_t v3 = 0;
    if (this) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(this, v2);
    }
  }
  return this;
}

WebKit::NetworkLoad *WebKit::ServiceWorkerNavigationPreloader::didFinishLoading(WebKit::ServiceWorkerNavigationPreloader *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 134217984;
    uint64_t v14 = this;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "ServiceWorkerNavigationPreloader::didFinishLoading %p", (uint8_t *)&v13, 0xCu);
  }
  long long v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 3048) = *(_OWORD *)a2;
  *(_OWORD *)((char *)this + 3064) = v5;
  long long v6 = *((_OWORD *)a2 + 2);
  long long v7 = *((_OWORD *)a2 + 3);
  long long v8 = *((_OWORD *)a2 + 4);
  *((void *)this + 39objc_destroyWeak(this + 1) = *((void *)a2 + 10);
  *(_OWORD *)((char *)this + 3096) = v7;
  *(_OWORD *)((char *)this + 311objc_destroyWeak(this + 2) = v8;
  *(_OWORD *)((char *)this + 3080) = v6;
  WTF::String::operator=((uint64_t *)this + 392, (WTF::StringImpl **)a2 + 11);
  long long v9 = *((_OWORD *)a2 + 6);
  *((void *)this + 395) = *((void *)a2 + 14);
  *(_OWORD *)((char *)this + 3144) = v9;
  int v10 = (_DWORD *)*((void *)a2 + 15);
  if (v10) {
    ++*v10;
  }
  uint64_t v11 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)this + 396);
  *((void *)this + 396) = v10;
  if (v11) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v11);
  }
  return WebKit::ServiceWorkerNavigationPreloader::didComplete((WebKit::NetworkLoad **)this);
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(uint64_t a1, uint64_t a2, uint64_t a3, char a4, const String *a5, uint64_t *a6)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9CA1B8;
  *(void *)(a1 + 8) = 0;
  uint64_t v11 = *a6;
  *a6 = 0;
  *(void *)(a1 + 24) = v11;
  WTF::URL::URL(a1 + 32, (uint64_t *)a3);
  WTF::URL::URL(a1 + 72, (uint64_t *)(a3 + 40));
  *(unsigned char *)(a1 + 11objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(a1 + 136) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 112, a3 + 80);
  WTF::URL::URL(a1 + 144, (uint64_t *)(a3 + 112));
  long long v12 = *(_OWORD *)(a3 + 160);
  long long v13 = *(_OWORD *)(a3 + 176);
  long long v14 = *(_OWORD *)(a3 + 192);
  *(_WORD *)(a1 + 240) = *(_WORD *)(a3 + 208);
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 19objc_destroyWeak(this + 2) = v12;
  uint64_t v15 = *(void *)(a3 + 216);
  *(void *)(a3 + 216) = 0;
  *(void *)(a1 + 248) = v15;
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a3 + 224);
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  if (*(unsigned char *)(a3 + 248))
  {
    uint64_t v16 = *(void *)(a3 + 232);
    *(void *)(a3 + 23objc_destroyWeak(this + 2) = 0;
    *(void *)(a1 + 264) = v16;
    *(_WORD *)(a1 + 27objc_destroyWeak(this + 2) = *(_WORD *)(a3 + 240);
    *(unsigned char *)(a1 + 280) = 1;
  }
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a3 + 256);
  *(void *)(a1 + 304) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v17 = *(atomic_uint **)(a2 + 8);
  if (v17) {
    atomic_fetch_add(v17, 1u);
  }
  *(void *)(a1 + 31objc_destroyWeak(this + 2) = v17;
  *(_WORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 349) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(unsigned char *)(a1 + 420) = 1;
  *(void *)(a1 + 424) = 0;
  if (*(void *)(a2 + 616))
  {
    WebCore::ResourceRequestBase::setCachePolicy();
    int v18 = *(WebKit::NetworkCache::Cache **)(a2 + 616);
    v53[0] = 0;
    v53[32] = 0;
    uint64_t v19 = *(void *)(a1 + 8);
    if (v19) {
      goto LABEL_11;
    }
    uint64_t v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v19 = 1;
    *(void *)(v19 + 8) = a1;
    uint64_t v21 = *(unsigned int **)(a1 + 8);
    *(void *)(a1 + 8) = v19;
    if (!v21) {
      goto LABEL_11;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v20);
    }
    uint64_t v19 = *(void *)(a1 + 8);
    if (v19) {
LABEL_11:
    }
      atomic_fetch_add((atomic_uint *volatile)v19, 1u);
    __int16 v35 = (WTF *)v19;
    WebCore::ResourceRequest::ResourceRequest(v36, a5);
    char v51 = a4;
    uint64_t v22 = WTF::fastMalloc((WTF *)0xE8);
    *(void *)uint64_t v22 = &unk_1EE9CA648;
    *(void *)(v22 + 8) = a1;
    *(void *)(v22 + 16) = v35;
    WTF::URL::URL(v22 + 24, (uint64_t *)v36);
    WTF::URL::URL(v22 + 64, v37);
    *(void *)(v22 + 104) = v37[5];
    *(void *)(v22 + 11objc_destroyWeak(this + 2) = v38;
    uint64_t v23 = *((void *)&v38 + 1);
    long long v38 = 0u;
    *(void *)(v22 + 120) = v23;
    uint64_t v24 = v39;
    uint64_t v39 = 0;
    *(void *)(v22 + 128) = v24;
    uint64_t v25 = v40;
    uint64_t v40 = 0;
    *(void *)(v22 + 136) = v25;
    uint64_t v26 = v41;
    uint64_t v41 = 0;
    *(void *)(v22 + 144) = v26;
    uint64_t v27 = v42;
    uint64_t v42 = 0;
    *(void *)(v22 + 15objc_destroyWeak(this + 2) = v27;
    uint64_t v28 = v43;
    uint64_t v43 = 0;
    *(void *)(v22 + 160) = v28;
    LODWORD(v27) = v44;
    *(unsigned char *)(v22 + 17objc_destroyWeak(this + 2) = v45;
    *(_DWORD *)(v22 + 168) = v27;
    *(void *)(v22 + 176) = v46;
    uint64_t v29 = *((void *)&v46 + 1);
    long long v46 = 0u;
    *(void *)(v22 + 184) = v29;
    *(void *)(v22 + 19objc_destroyWeak(this + 2) = v47;
    uint64_t v30 = v48;
    *(unsigned char *)(v22 + 208) = v49;
    *(void *)(v22 + 200) = v30;
    CFTypeRef v31 = cf;
    uint64_t v47 = 0;
    CFTypeRef cf = 0;
    *(void *)(v22 + 216) = v31;
    *(unsigned char *)(v22 + 224) = v51;
    uint64_t v52 = v22;
    WebKit::NetworkCache::Cache::retrieve(v18, (const WebCore::ResourceRequest *)a5, (uint64_t)v53, 256, 1, 0, (WTF::MonotonicTime *)&v52);
    uint64_t v32 = v52;
    uint64_t v52 = 0;
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
    }
    CFTypeRef v33 = cf;
    CFTypeRef cf = 0;
    if (v33) {
      CFRelease(v33);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v36);
  }
  else
  {
    WebKit::ServiceWorkerSoftUpdateLoader::loadFromNetwork(a1, (WebKit::NetworkSession *)a2, (uint64_t)a5);
  }
  return a1;
}

WTF *WebKit::ServiceWorkerSoftUpdateLoader::loadFromNetwork(uint64_t a1, WebKit::NetworkSession *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v23);
  char v34 = 1;
  __int16 v33 = 1;
  char v35 = 1;
  WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v26, a3);
  long long v7 = *(WTF::StringImpl **)(a3 + 152);
  *(void *)(a3 + 15objc_destroyWeak(this + 2) = 0;
  long long v8 = v27;
  uint64_t v27 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  long long v9 = *(WTF::StringImpl **)(a3 + 160);
  *(void *)(a3 + 160) = 0;
  int v10 = v28;
  uint64_t v28 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v6);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = *(WTF::RefCountedBase **)(a3 + 168);
  *(void *)(a3 + 168) = 0;
  long long v12 = v29;
  uint64_t v29 = v11;
  if (v12) {
    WTF::RefCounted<WebCore::FormData>::deref(v12);
  }
  uint64_t v30 = *(void *)(a3 + 176);
  char v31 = *(unsigned char *)(a3 + 184);
  long long v13 = *(const void **)(a3 + 192);
  *(void *)(a3 + 19objc_destroyWeak(this + 2) = 0;
  CFTypeRef v14 = cf;
  CFTypeRef cf = v13;
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0xCA0);
  WebKit::NetworkLoad::NetworkLoad((uint64_t)v15, a1, (uint64_t)v23, a2);
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 304), v15);
  uint64_t v17 = *(void *)(*(void *)(a1 + 304) + 3008);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  *((unsigned char *)a2 + 1066) = 1;
  if (v39)
  {
    CFTypeRef v22 = v38;
    CFTypeRef v38 = 0;
    if (v22) {
      CFRelease(v22);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v16);
  if (v36[2576]) {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v36);
  }
  CFTypeRef v18 = cf;
  CFTypeRef cf = 0;
  if (v18) {
    CFRelease(v18);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v26);
  uint64_t v20 = v25;
  uint64_t v25 = 0;
  if (v20) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v20, v19);
  }
  uint64_t result = v24;
  uint64_t v24 = 0;
  if (result) {
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v19);
  }
  return result;
}

void WebKit::ServiceWorkerSoftUpdateLoader::~ServiceWorkerSoftUpdateLoader(WebKit::ServiceWorkerSoftUpdateLoader *this, WTF::StringImpl *a2)
{
  if (*((void *)this + 3))
  {
    uint64_t v26 = 0;
    WTF::URL::invalidate((WTF::URL *)&v26);
    uint64_t v29 = 0;
    int v30 = 0;
    __int16 v31 = 3;
    CFTypeRef cf = 0;
    char v33 = 1;
    uint64_t v34 = 0;
    v35[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v35);
    __int16 v38 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v39 = 0;
    uint64_t v42 = 0;
    uint64_t v3 = v26;
    if (v26) {
      *(_DWORD *)v26 += 2;
    }
    uint64_t v43 = v3;
    long long v44 = v27;
    long long v45 = v28;
    uint64_t v4 = v29;
    if (v29) {
      *(_DWORD *)v29 += 2;
    }
    long long v46 = v4;
    int v47 = v30;
    __int16 v48 = v31;
    CFTypeRef v49 = cf;
    if (cf) {
      CFRetain(cf);
    }
    char v50 = v33;
    uint64_t v5 = *((void *)this + 3);
    *((void *)this + 3) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 16))(v5, &v34);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v34, v6);
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7) {
      CFRelease(v7);
    }
    long long v8 = v29;
    uint64_t v29 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, a2);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    long long v9 = v26;
    uint64_t v26 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, a2);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  int v10 = (const void *)*((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (WTF::StringImpl *)*((void *)this + 51);
  *((void *)this + 5objc_destroyWeak(this + 1) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  long long v12 = (WTF::StringImpl *)*((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  long long v13 = (WebCore::TextResourceDecoder *)*((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v13) {
    WTF::RefCounted<WebCore::TextResourceDecoder>::deref(v13);
  }
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 48, 0);
  uint64_t v15 = (WTF::StringImpl *)*((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = (WTF::StringImpl *)*((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 336, v14);
  CFTypeRef v18 = (WTF::StringImpl *)*((void *)this + 41);
  *((void *)this + 4objc_destroyWeak(this + 1) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v17);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  uint64_t v19 = (WTF::StringImpl *)*((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v17);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = (unsigned int *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v17);
  }
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)this + 38, 0);
  WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebKit::ServiceWorkerSoftUpdateLoader *)((char *)this + 32), v21);
  uint64_t v23 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *((void *)this + 1);
  if (v24)
  {
    *(void *)(v24 + 8) = 0;
    uint64_t v25 = (unsigned int *)*((void *)this + 1);
    *((void *)this + objc_destroyWeak(this + 1) = 0;
    if (v25)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, v22);
      }
    }
  }
  else
  {
    *((void *)this + objc_destroyWeak(this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::ServiceWorkerSoftUpdateLoader::~ServiceWorkerSoftUpdateLoader(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 25) = 0u;
    *((_OWORD *)v2 + 26) = 0u;
    *((_OWORD *)v2 + 23) = 0u;
    *((_OWORD *)v2 + 24) = 0u;
    *((_OWORD *)v2 + 2objc_destroyWeak(this + 1) = 0u;
    *((_OWORD *)v2 + 2objc_destroyWeak(this + 2) = 0u;
    *((_OWORD *)v2 + 19) = 0u;
    *((_OWORD *)v2 + 20) = 0u;
    *((_OWORD *)v2 + 17) = 0u;
    *((_OWORD *)v2 + 18) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 1objc_destroyWeak(this + 1) = 0u;
    *((_OWORD *)v2 + 1objc_destroyWeak(this + 2) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + objc_destroyWeak(this + 1) = 0u;
    *((_OWORD *)v2 + objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
  }
  else
  {
    WTF::fastFree(v2, v3);
  }
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::fail(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 24))
  {
    uint64_t v3 = result;
    uint64_t v11 = 0;
    v12[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v12);
    __int16 v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
    uint64_t v4 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v4 += 2;
    }
    uint64_t v19 = v4;
    uint64_t v5 = *(_DWORD **)(a2 + 8);
    if (v5) {
      *v5 += 2;
    }
    uint64_t v20 = v5;
    long long v6 = *(_OWORD *)(a2 + 32);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v22 = v6;
    CFTypeRef v7 = *(_DWORD **)(a2 + 48);
    if (v7) {
      *v7 += 2;
    }
    uint64_t v23 = v7;
    int v24 = *(_DWORD *)(a2 + 56);
    __int16 v25 = *(_WORD *)(a2 + 60);
    long long v8 = *(const void **)(a2 + 64);
    uint64_t v26 = v8;
    if (v8) {
      CFRetain(v8);
    }
    char v27 = *(unsigned char *)(a2 + 72);
    uint64_t v9 = *(void *)(v3 + 24);
    *(void *)(v3 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 16))(v9, &v11);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v11, v10);
    return WebKit::ServiceWorkerSoftUpdateLoader::didComplete((WebKit::NetworkLoad **)v3);
  }
  return result;
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::didComplete(WebKit::NetworkLoad **this)
{
  uint64_t result = (uint64_t)std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](this + 38, 0);
  uint64_t v3 = this[39];
  if (v3)
  {
    uint64_t v4 = *((void *)v3 + 1);
    if (v4)
    {
      int v5 = *(_DWORD *)(v4 + 16) + 1;
      *(_DWORD *)(v4 + 16) = v5;
      uint64_t v6 = *(void *)(v4 + 736);
      if (v6)
      {
        unsigned int v7 = *(_DWORD *)(v6 - 8);
        unint64_t v8 = ((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22);
        unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
        unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
        uint64_t v11 = v7 & ((v10 >> 31) ^ v10);
        long long v12 = *(WebKit::ServiceWorkerSoftUpdateLoader **)(v6 + 8 * v11);
        if (v12 != (WebKit::ServiceWorkerSoftUpdateLoader *)this)
        {
          int v13 = 1;
          while (v12)
          {
            uint64_t v11 = (v11 + v13) & v7;
            long long v12 = *(WebKit::ServiceWorkerSoftUpdateLoader **)(v6 + 8 * v11);
            ++v13;
            if (v12 == (WebKit::ServiceWorkerSoftUpdateLoader *)this) {
              goto LABEL_10;
            }
          }
          uint64_t v11 = *(unsigned int *)(v6 - 4);
        }
LABEL_10:
        if (v11 != *(_DWORD *)(v6 - 4))
        {
          long long v14 = (uint64_t *)(v4 + 736);
          uint64_t result = *(void *)(v6 + 8 * v11);
          *(void *)(v6 + 8 * v1objc_destroyWeak(this + 1) = -1;
          if (result) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
          }
          ++*(_DWORD *)(*v14 - 16);
          uint64_t v15 = *v14;
          if (*v14) {
            int v16 = *(_DWORD *)(v15 - 12) - 1;
          }
          else {
            int v16 = -1;
          }
          *(_DWORD *)(v15 - 1objc_destroyWeak(this + 2) = v16;
          uint64_t v17 = *v14;
          if (*v14)
          {
            unsigned int v18 = 6 * *(_DWORD *)(v17 - 12);
            unsigned int v19 = *(_DWORD *)(v17 - 4);
            if (v18 < v19 && v19 >= 9) {
              uint64_t result = (uint64_t)WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::rehash((uint64_t *)(v4 + 736), v19 >> 1, 0);
            }
          }
        }
        int v5 = *(_DWORD *)(v4 + 16);
      }
      if (v5)
      {
        *(_DWORD *)(v4 + 16) = v5 - 1;
      }
      else
      {
        uint64_t result = 286;
        __break(0xC471u);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::ServiceWorkerSoftUpdateLoader::loadWithCacheEntry(WebKit::ServiceWorkerSoftUpdateLoader *this, WebKit::NetworkCache::Entry *a2)
{
  WebKit::ServiceWorkerSoftUpdateLoader::processResponse((WebKit::ServiceWorkerSoftUpdateLoader *)&v17, this, (WebKit::NetworkCache::Entry *)((char *)a2 + 80));
  if (v20)
  {
    WebKit::ServiceWorkerSoftUpdateLoader::fail((uint64_t)this, (uint64_t)&v17);
  }
  else
  {
    int v5 = (atomic_uint *)*((void *)a2 + 70);
    if (v5
      || (WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord((unsigned int **)a2),
          (int v5 = (atomic_uint *)*((void *)a2 + 70)) != 0))
    {
      atomic_fetch_add(v5, 1u);
      WebKit::ServiceWorkerSoftUpdateLoader::didReceiveBuffer(this, (const WebCore::FragmentedSharedBuffer *)v5);
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v5, v6);
    }
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v14);
    WebKit::ServiceWorkerSoftUpdateLoader::didFinishLoading(this, v7);
    unint64_t v8 = v16;
    int v16 = 0;
    if (v8) {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v8);
    }
    unint64_t v9 = v15;
    uint64_t v15 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v4);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  unint64_t v10 = v21;
  long long v21 = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = v19;
  unsigned int v19 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v4);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  long long v12 = v18;
  unsigned int v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v4);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::ServiceWorkerSoftUpdateLoader::processResponse(WebKit::ServiceWorkerSoftUpdateLoader *this, const WebCore::ResourceResponse *a2, WebCore::ResourceResponseBase *a3)
{
  WebCore::WorkerScriptLoader::validateWorkerResponse();
  if ((_BYTE)v57)
  {
    uint64_t v6 = v53;
    uint64_t v53 = 0;
    *(void *)this = v6;
    WTF::URL::URL((uint64_t)this + 8, (uint64_t *)v54);
    unint64_t v8 = v55;
    uint64_t v55 = 0;
    *((void *)this + 6) = v8;
    *((_DWORD *)this + 14) = v56;
    *((_WORD *)this + 30) = v57;
    *((void *)this + 8) = cf;
LABEL_27:
    *((unsigned char *)this + 7objc_destroyWeak(this + 2) = v59;
    CFTypeRef cf = 0;
    goto LABEL_28;
  }
  WebCore::ServiceWorkerJob::validateServiceWorkerResponse();
  unint64_t v10 = v45;
  long long v45 = 0;
  uint64_t v11 = v53;
  uint64_t v53 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  WTF::URL::operator=((uint64_t)v54, (uint64_t)&v46);
  int v13 = v48;
  __int16 v48 = 0;
  uint64_t v14 = v55;
  uint64_t v55 = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  int v56 = v49;
  __int16 v57 = v50;
  CFTypeRef v15 = v51;
  CFTypeRef v51 = 0;
  CFTypeRef v16 = cf;
  CFTypeRef cf = v15;
  if (v16)
  {
    CFRelease(v16);
    CFTypeRef v44 = v51;
    char v59 = v52;
    CFTypeRef v51 = 0;
    if (v44) {
      CFRelease(v44);
    }
  }
  else
  {
    char v59 = v52;
    CFTypeRef v51 = 0;
  }
  uint64_t v17 = v48;
  __int16 v48 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v12);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  unsigned int v18 = v46;
  long long v46 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v12);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  unsigned int v19 = v45;
  long long v45 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v12);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  if ((_BYTE)v57)
  {
    char v20 = v53;
    uint64_t v53 = 0;
    *(void *)this = v20;
    WTF::URL::URL((uint64_t)this + 8, (uint64_t *)v54);
    long long v21 = v55;
    CFTypeRef v22 = cf;
    uint64_t v55 = 0;
    *((void *)this + 6) = v21;
    *((_DWORD *)this + 14) = v56;
    *((_WORD *)this + 30) = v57;
    *((void *)this + 8) = v22;
    goto LABEL_27;
  }
  MEMORY[0x199739C00](&v45, a3);
  uint64_t v27 = *((unsigned int *)a2 + 87);
  if (v27) {
    WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*((WTF::StringImpl **)a2 + 42), (WTF::StringImpl *)(*((void *)a2 + 42) + 16 * v27));
  }
  long long v28 = (WTF *)*((void *)a2 + 42);
  if (v28)
  {
    *((void *)a2 + 4objc_destroyWeak(this + 2) = 0;
    *((_DWORD *)a2 + 86) = 0;
    WTF::fastFree(v28, v26);
  }
  *((void *)a2 + 4objc_destroyWeak(this + 2) = v45;
  uint64_t v29 = v46;
  long long v45 = 0;
  long long v46 = 0;
  *((void *)a2 + 43) = v29;
  *((_DWORD *)a2 + 88) = v47;
  *((unsigned char *)a2 + 356) = BYTE4(v47);
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v26);
  WebCore::obtainCrossOriginEmbedderPolicy();
  *((_WORD *)a2 + 180) = (_WORD)v45;
  __int16 v31 = v46;
  long long v46 = 0;
  uint64_t v32 = (WTF::StringImpl *)*((void *)a2 + 46);
  *((void *)a2 + 46) = v31;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v30);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  char v33 = v47;
  int v47 = 0;
  uint64_t v34 = (WTF::StringImpl *)*((void *)a2 + 47);
  *((void *)a2 + 47) = v33;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::destroy(v34, v30);
      char v35 = v47;
      int v47 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, v30);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v34 -= 2;
      int v47 = 0;
    }
  }
  long long v36 = v46;
  long long v46 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v30);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  WebCore::ResourceResponseBase::httpHeaderField();
  __int16 v38 = v45;
  long long v45 = 0;
  uint64_t v39 = (WTF::StringImpl *)*((void *)a2 + 41);
  *((void *)a2 + 4objc_destroyWeak(this + 1) = v38;
  if (v39)
  {
    int v40 = *(_DWORD *)v39 - 2;
    if (*(_DWORD *)v39 != 2) {
      goto LABEL_64;
    }
    WTF::StringImpl::destroy(v39, v37);
    uint64_t v39 = v45;
    long long v45 = 0;
    if (!v39) {
      goto LABEL_65;
    }
    int v40 = *(_DWORD *)v39 - 2;
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v41);
    }
    else {
LABEL_64:
    }
      *(_DWORD *)uint64_t v39 = v40;
  }
LABEL_65:
  uint64_t v42 = (WTF::StringImpl **)WebCore::ResourceResponseBase::textEncodingName(a3);
  WTF::String::operator=((uint64_t *)a2 + 40, v42);
  *(void *)this = 0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  WTF::URL::invalidate((WebKit::ServiceWorkerSoftUpdateLoader *)((char *)this + 8));
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *(void *)((char *)this + 54) = 0;
  *((unsigned char *)this + 7objc_destroyWeak(this + 2) = 1;
  CFTypeRef v43 = cf;
  CFTypeRef cf = 0;
  if (v43) {
    CFRelease(v43);
  }
LABEL_28:
  uint64_t v23 = v55;
  uint64_t v55 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v7);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  int v24 = v54[0];
  v54[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v7);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t result = v53;
  uint64_t v53 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::didReceiveBuffer(WebKit::ServiceWorkerSoftUpdateLoader *this, const WebCore::FragmentedSharedBuffer *a2)
{
  if (!*((void *)this + 49))
  {
    uint64_t v3 = *((void *)this + 40);
    if (v3 && *(_DWORD *)(v3 + 4))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      PAL::TextEncoding::TextEncoding((PAL::TextEncoding *)v11, (WebKit::ServiceWorkerSoftUpdateLoader *)((char *)this + 320));
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      PAL::TextEncoding::TextEncoding((PAL::TextEncoding *)v11, "UTF-8");
    }
    WebCore::TextResourceDecoder::create((WebCore::TextResourceDecoder *)&v12, (const WTF::String *)v11, 0);
    int v5 = v13;
    int v13 = 0;
    uint64_t v6 = (WebCore::TextResourceDecoder *)*((void *)this + 49);
    *((void *)this + 49) = v5;
    if (v6)
    {
      WTF::RefCounted<WebCore::TextResourceDecoder>::deref(v6);
      unsigned int v7 = v13;
      int v13 = 0;
      if (v7) {
        WTF::RefCounted<WebCore::TextResourceDecoder>::deref(v7);
      }
    }
    unint64_t v8 = v12;
    long long v12 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v4);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9CA670;
  v9[1] = this;
  v11[0] = v9;
  WebCore::FragmentedSharedBuffer::forEachSegment();
  uint64_t result = v11[0];
  v11[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::didFinishLoading(WebKit::ServiceWorkerSoftUpdateLoader *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v3 = (WebCore::TextResourceDecoder *)*((void *)this + 49);
  if (v3)
  {
    WebCore::TextResourceDecoder::flush((uint64_t *)v22, v3);
    if (*((_DWORD *)this + 104) || *((void *)this + 51))
    {
      if (v22[0])
      {
        uint64_t v19 = *((void *)v22[0] + 1);
        unint64_t v20 = *((unsigned int *)v22[0] + 1) | ((unint64_t)((*((_DWORD *)v22[0] + 4) >> 2) & 1) << 32);
      }
      else
      {
        uint64_t v19 = 0;
        unint64_t v20 = 0x100000000;
      }
      WTF::StringBuilder::append((uint64_t)this + 400, v19, v20);
      int v5 = v22[0];
    }
    else
    {
      WTF::String::operator=((uint64_t *)this + 50, v22);
      int v5 = v22[0];
      int v6 = v22[0] ? *((_DWORD *)v22[0] + 1) : 0;
      *((_DWORD *)this + 104) = v6;
    }
    v22[0] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  unsigned int v7 = (WTF::StringImpl *)*((void *)this + 50);
  if (v7
    || (WTF::StringBuilder::shrinkToFit((WebKit::ServiceWorkerSoftUpdateLoader *)((char *)this + 400)),
        WTF::StringBuilder::reifyString((WebKit::ServiceWorkerSoftUpdateLoader *)((char *)this + 400)),
        (unsigned int v7 = (WTF::StringImpl *)*((void *)this + 50)) != 0))
  {
    *(_DWORD *)v7 += 2;
  }
  long long v21 = v7;
  WebCore::ScriptBuffer::ScriptBuffer((WebCore::ScriptBuffer *)v22, (const WTF::String *)&v21);
  unint64_t v8 = (WTF::StringImpl *)*((void *)this + 4);
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  v22[1] = v8;
  long long v9 = *(_OWORD *)((char *)this + 56);
  long long v23 = *(_OWORD *)((char *)this + 40);
  long long v24 = v9;
  unint64_t v10 = (const void *)*((void *)this + 53);
  __int16 v25 = v10;
  if (v10) {
    CFRetain(v10);
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v26, (uint64_t *)this + 42);
  v26[4] = *((_DWORD *)this + 88);
  char v27 = *((unsigned char *)this + 356);
  __int16 v28 = *((_WORD *)this + 180);
  uint64_t v11 = (_DWORD *)*((void *)this + 46);
  if (v11) {
    *v11 += 2;
  }
  uint64_t v29 = v11;
  long long v12 = (_DWORD *)*((void *)this + 47);
  if (v12) {
    *v12 += 2;
  }
  int v30 = v12;
  int v13 = (_DWORD *)*((void *)this + 41);
  if (v13) {
    *v13 += 2;
  }
  uint64_t v32 = 0;
  v33[0] = 0;
  __int16 v31 = v13;
  WTF::URL::invalidate((WTF::URL *)v33);
  v33[7] = 0;
  memset(&v33[5], 0, 14);
  char v34 = 1;
  uint64_t v14 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v14 + 16))(v14, v22);
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)v22, v15);
  uint64_t v17 = v21;
  long long v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v16);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  return WebKit::ServiceWorkerSoftUpdateLoader::didComplete((WebKit::NetworkLoad **)this);
}

void WebKit::ServiceWorkerSoftUpdateLoader::willSendRedirectedRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v14 = 0;
  CFTypeRef v15 = 0;
  WTF::URL::invalidate((WTF::URL *)&v15);
  CFTypeRef v16 = 0;
  int v17 = 0;
  __int16 v18 = 3;
  CFTypeRef v19 = 0;
  char v20 = 1;
  WebKit::ServiceWorkerSoftUpdateLoader::fail(a1, (uint64_t)&v14);
  CFTypeRef v8 = v19;
  CFTypeRef v19 = 0;
  if (v8) {
    CFRelease(v8);
  }
  long long v9 = v16;
  CFTypeRef v16 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  unint64_t v10 = v15;
  CFTypeRef v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v14;
  uint64_t v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v14);
  uint64_t v12 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v12 + 16))(v12, &v14);
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  CFTypeRef v13 = cf;
  CFTypeRef cf = 0;
  if (v13) {
    CFRelease(v13);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v14);
}

WTF::StringImpl *WebKit::ServiceWorkerSoftUpdateLoader::didReceiveResponse(WebKit::ServiceWorkerSoftUpdateLoader *a1, WebCore::ResourceResponseBase *this, uint64_t a3, uint64_t *a4)
{
  unsigned int v7 = (const void *)*((unsigned __int8 *)this + 128);
  if (*((unsigned char *)this + 128))
  {
    uint64_t v4 = a4;
    int v6 = this;
    int v5 = a1;
    unsigned int v7 = (const void *)*((void *)this + 15);
    if (!v7) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  __int16 v18 = v7;
  CFRetain(v7);
  unsigned int v7 = v18;
LABEL_3:
  CFTypeRef v8 = (const void *)*((void *)v5 + 53);
  *((void *)v5 + 53) = v7;
  if (v8) {
    CFRelease(v8);
  }
  if (WebCore::ResourceResponseBase::httpStatusCode(v6) == 304
    && (long long v9 = (WebKit::NetworkCache::Entry *)*((void *)v5 + 48)) != 0)
  {
    WebKit::ServiceWorkerSoftUpdateLoader::loadWithCacheEntry(v5, v9);
    uint64_t v10 = *v4;
    *uint64_t v4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, 2);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return (WTF::StringImpl *)v11(v10);
  }
  else
  {
    WebKit::ServiceWorkerSoftUpdateLoader::processResponse((WebKit::ServiceWorkerSoftUpdateLoader *)&v19, v5, v6);
    if (v22)
    {
      WebKit::ServiceWorkerSoftUpdateLoader::fail((uint64_t)v5, (uint64_t)&v19);
      uint64_t v13 = *v4;
      *uint64_t v4 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 2);
    }
    else
    {
      uint64_t v13 = *v4;
      *uint64_t v4 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
    }
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    CFTypeRef v15 = cf;
    CFTypeRef cf = 0;
    if (v15) {
      CFRelease(v15);
    }
    CFTypeRef v16 = v21;
    long long v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    int v17 = v20;
    char v20 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v14);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t result = v19;
    CFTypeRef v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WebKit::ServiceWorkerSoftUpdateLoader::didFailLoading(WebKit::ServiceWorkerSoftUpdateLoader *this, WTF::StringImpl **a2)
{
  uint64_t v4 = *a2;
  if (*a2) {
    *(_DWORD *)v4 += 2;
  }
  v10[0] = v4;
  int v5 = a2[1];
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  v10[1] = v5;
  long long v6 = *((_OWORD *)a2 + 2);
  long long v11 = *((_OWORD *)a2 + 1);
  long long v12 = v6;
  unsigned int v7 = a2[6];
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v13 = v7;
  int v14 = *((_DWORD *)a2 + 14);
  __int16 v15 = *((_WORD *)a2 + 30);
  CFTypeRef v8 = a2[8];
  CFTypeRef v16 = v8;
  if (v8)
  {
    CFRetain(v8);
    char v17 = *((unsigned char *)a2 + 72);
    WebKit::ServiceWorkerSoftUpdateLoader::fail((uint64_t)this, (uint64_t)v10);
    CFRelease(v8);
    if (!v7) {
      goto LABEL_12;
    }
  }
  else
  {
    char v17 = *((unsigned char *)a2 + 72);
    WebKit::ServiceWorkerSoftUpdateLoader::fail((uint64_t)this, (uint64_t)v10);
    if (!v7) {
      goto LABEL_12;
    }
  }
  if (*(_DWORD *)v7 == 2) {
    WTF::StringImpl::destroy(v7, v9);
  }
  else {
    *(_DWORD *)v7 -= 2;
  }
LABEL_12:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v9);
      if (!v4) {
        return;
      }
      goto LABEL_18;
    }
    *(_DWORD *)v5 -= 2;
  }
  if (!v4) {
    return;
  }
LABEL_18:
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::destroy(v4, v9);
  }
  else
  {
    *(_DWORD *)v4 -= 2;
  }
}

void *WebKit::WebSWRegistrationStore::updateTimerFired(WebKit::WebSWRegistrationStore *this)
{
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9CA378;
  int v5 = v2;
  WebKit::WebSWRegistrationStore::updateToStorage(this, (uint64_t *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*v5 + 8);
    return (void *)v4();
  }
  return result;
}

uint64_t WebKit::WebSWRegistrationStore::clearAll(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[11];
  if (v4)
  {
    a1[11] = 0;
    WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::deallocateTable(v4, a2);
  }
  if ((a1[8] & 0xFFFFFFFFFFFFLL) != 0) {
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 4));
  }
  uint64_t v5 = a1[3];
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
  {
    ++*(_DWORD *)(v6 + 24);
    uint64_t result = WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(v6, a2);
    int v8 = *(_DWORD *)(v6 + 24);
    if (v8)
    {
      *(_DWORD *)(v6 + 24) = v8 - 1;
    }
    else
    {
      uint64_t result = 286;
      __break(0xC471u);
    }
  }
  else
  {
    uint64_t v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);
    return v10(v9);
  }
  return result;
}

uint64_t WebKit::WebSWRegistrationStore::flushChanges(void *a1, uint64_t *a2)
{
  if ((a1[8] & 0xFFFFFFFFFFFFLL) != 0 && *(double *)((a1[8] & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1;
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 4));
    a2 = v3;
    a1 = v4;
  }

  return WebKit::WebSWRegistrationStore::updateToStorage(a1, a2);
}

uint64_t WebKit::WebSWRegistrationStore::updateToStorage(void *a1, uint64_t *a2)
{
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v3 = (WebCore::ServiceWorkerRegistrationKey *)a1[11];
  if (v3)
  {
    unsigned int v4 = *((_DWORD *)v3 - 1);
    uint64_t v5 = (WebCore::ServiceWorkerRegistrationKey *)((char *)v3 + 688 * v4);
    if (*((_DWORD *)v3 - 3))
    {
      if (v4)
      {
        uint64_t v6 = 688 * v4;
        while (WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::isEmptyOrDeletedBucket(v3))
        {
          uint64_t v3 = (WebCore::ServiceWorkerRegistrationKey *)((char *)v3 + 688);
          v6 -= 688;
          if (!v6)
          {
            uint64_t v3 = v5;
            break;
          }
        }
        unint64_t v7 = (unint64_t)v3;
        uint64_t v3 = (WebCore::ServiceWorkerRegistrationKey *)a1[11];
        if (!v3) {
          goto LABEL_15;
        }
      }
      else
      {
        unint64_t v7 = a1[11];
      }
LABEL_13:
      int v8 = (char *)v3 + 688 * *((unsigned int *)v3 - 1);
      goto LABEL_16;
    }
    unint64_t v7 = (unint64_t)v3 + 688 * v4;
  }
  else
  {
    unint64_t v7 = 0;
    unsigned int v4 = 0;
  }
  uint64_t v5 = (WebCore::ServiceWorkerRegistrationKey *)((char *)v3 + 688 * v4);
  if (v3) {
    goto LABEL_13;
  }
LABEL_15:
  int v8 = 0;
LABEL_16:
  if (v8 != (char *)v7)
  {
    do
    {
      if (*(unsigned char *)(v7 + 672))
      {
        uint64_t v9 = (long long *)(v7 + 80);
        if (HIDWORD(v51) == v51)
        {
          WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerContextData>((uint64_t)&v50, (unint64_t)v9);
        }
        else
        {
          uint64_t v19 = v50 + 592 * HIDWORD(v51);
          long long v20 = *v9;
          *(void *)(v19 + 16) = *(void *)(v7 + 96);
          *(_OWORD *)uint64_t v19 = v20;
          WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(v19 + 24, v7 + 104);
          *(void *)(v19 + 376) = *(void *)(v7 + 456);
          uint64_t v21 = *(void *)(v7 + 464);
          *(void *)(v7 + 464) = 0;
          *(void *)(v19 + 384) = v21;
          uint64_t v22 = *(void *)(v7 + 472);
          *(void *)(v7 + 47objc_destroyWeak(this + 2) = 0;
          *(void *)(v19 + 400) = 0;
          *(void *)(v19 + 408) = 0;
          *(void *)(v19 + 39objc_destroyWeak(this + 2) = v22;
          uint64_t v23 = *(void *)(v7 + 480);
          *(void *)(v7 + 480) = 0;
          *(void *)(v19 + 400) = v23;
          LODWORD(v23) = *(_DWORD *)(v7 + 488);
          *(_DWORD *)(v7 + 488) = 0;
          *(_DWORD *)(v19 + 408) = v23;
          LODWORD(v23) = *(_DWORD *)(v7 + 492);
          *(_DWORD *)(v7 + 49objc_destroyWeak(this + 2) = 0;
          *(_DWORD *)(v19 + 41objc_destroyWeak(this + 2) = v23;
          LODWORD(v23) = *(_DWORD *)(v7 + 496);
          *(unsigned char *)(v19 + 420) = *(unsigned char *)(v7 + 500);
          *(_DWORD *)(v19 + 416) = v23;
          *(_WORD *)(v19 + 424) = *(_WORD *)(v7 + 504);
          uint64_t v24 = *(void *)(v7 + 512);
          *(void *)(v7 + 51objc_destroyWeak(this + 2) = 0;
          *(void *)(v19 + 43objc_destroyWeak(this + 2) = v24;
          uint64_t v25 = *(void *)(v7 + 520);
          *(void *)(v7 + 520) = 0;
          *(void *)(v19 + 440) = v25;
          uint64_t v26 = *(void *)(v7 + 528);
          *(void *)(v7 + 528) = 0;
          *(void *)(v19 + 448) = v26;
          WTF::URL::URL(v19 + 456, (uint64_t *)(v7 + 536));
          *(_DWORD *)(v19 + 496) = *(_DWORD *)(v7 + 576);
          *(void *)(v19 + 517) = 0;
          *(void *)(v19 + 504) = 0;
          *(void *)(v19 + 51objc_destroyWeak(this + 2) = 0;
          uint64_t v27 = *(void *)(v7 + 584);
          *(void *)(v7 + 584) = 0;
          *(void *)(v19 + 504) = v27;
          LODWORD(v27) = *(_DWORD *)(v7 + 592);
          *(_DWORD *)(v7 + 59objc_destroyWeak(this + 2) = 0;
          *(_DWORD *)(v19 + 51objc_destroyWeak(this + 2) = v27;
          LODWORD(v27) = *(_DWORD *)(v7 + 596);
          *(_DWORD *)(v7 + 596) = 0;
          *(_DWORD *)(v19 + 516) = v27;
          LODWORD(v27) = *(_DWORD *)(v7 + 600);
          *(_DWORD *)(v7 + 600) = 0;
          *(_DWORD *)(v19 + 520) = v27;
          LOBYTE(v27) = *(unsigned char *)(v7 + 604);
          *(unsigned char *)(v7 + 604) = 0;
          *(unsigned char *)(v19 + 524) = v27;
          long long v28 = *(_OWORD *)(v7 + 608);
          long long v29 = *(_OWORD *)(v7 + 640);
          *(_OWORD *)(v19 + 544) = *(_OWORD *)(v7 + 624);
          *(_OWORD *)(v19 + 560) = v29;
          *(_OWORD *)(v19 + 528) = v28;
          *(unsigned char *)(v19 + 576) = *(unsigned char *)(v7 + 656);
          uint64_t v30 = *(void *)(v7 + 664);
          *(void *)(v7 + 664) = 0;
          *(void *)(v19 + 584) = v30;
          ++HIDWORD(v51);
        }
      }
      else
      {
        unsigned int v10 = HIDWORD(v53);
        if (HIDWORD(v53) == v53)
        {
          unint64_t v11 = WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v52, HIDWORD(v53) + 1, v7);
          unsigned int v12 = HIDWORD(v53);
          uint64_t v13 = v52;
          uint64_t v14 = v52 + 72 * HIDWORD(v53);
          *(unsigned char *)uint64_t v14 = 0;
          *(_DWORD *)(v14 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v14, v11);
          __int16 v15 = *(_DWORD **)(v11 + 32);
          if (v15) {
            *v15 += 2;
          }
          uint64_t v16 = v13 + 72 * v12;
          *(void *)(v16 + 3objc_destroyWeak(this + 2) = v15;
          long long v17 = *(_OWORD *)(v11 + 56);
          long long v18 = *(_OWORD *)(v11 + 40);
        }
        else
        {
          uint64_t v31 = v52;
          uint64_t v32 = v52 + 72 * HIDWORD(v53);
          *(unsigned char *)uint64_t v32 = 0;
          *(_DWORD *)(v32 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v32, v7);
          char v33 = *(_DWORD **)(v7 + 32);
          if (v33) {
            *v33 += 2;
          }
          uint64_t v16 = v31 + 72 * v10;
          *(void *)(v16 + 3objc_destroyWeak(this + 2) = v33;
          long long v17 = *(_OWORD *)(v7 + 56);
          long long v18 = *(_OWORD *)(v7 + 40);
        }
        *(_OWORD *)(v16 + 40) = v18;
        *(_OWORD *)(v16 + 56) = v17;
        ++HIDWORD(v53);
      }
      unint64_t v34 = v7 + 688;
      unint64_t v7 = (unint64_t)v5;
      if ((WebCore::ServiceWorkerRegistrationKey *)v34 != v5)
      {
        unint64_t v7 = v34;
        while (WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::isEmptyOrDeletedBucket((WebCore::ServiceWorkerRegistrationKey *)v7))
        {
          v7 += 688;
          if ((WebCore::ServiceWorkerRegistrationKey *)v7 == v5)
          {
            unint64_t v7 = (unint64_t)v5;
            break;
          }
        }
      }
    }
    while ((char *)v7 != v8);
    uint64_t v3 = (WebCore::ServiceWorkerRegistrationKey *)a1[11];
  }
  if (v3)
  {
    a1[11] = 0;
    WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::deallocateTable((uint64_t)v3, a2);
  }
  uint64_t v35 = a1[3];
  if (v35 && (uint64_t v36 = *(void *)(v35 + 8)) != 0)
  {
    ++*(_DWORD *)(v36 + 24);
    uint64_t v37 = a1[1];
    if (v37) {
      goto LABEL_45;
    }
    uint64_t v37 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v37 = 1;
    *(void *)(v37 + 8) = a1;
    uint64_t v39 = (unsigned int *)a1[1];
    a1[1] = v37;
    if (!v39) {
      goto LABEL_45;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v39, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v39);
      WTF::fastFree((WTF *)v39, v38);
    }
    uint64_t v37 = a1[1];
    if (v37) {
LABEL_45:
    }
      atomic_fetch_add((atomic_uint *volatile)v37, 1u);
    uint64_t v40 = *a2;
    *a2 = 0;
    uint64_t v41 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v41 = &unk_1EE9CA6C0;
    v41[1] = a1;
    v41[2] = v37;
    v41[3] = v40;
    int v49 = v41;
    WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(v36, (uint64_t)&v50, (uint64_t)&v52, (uint64_t *)&v49);
    uint64_t v43 = (uint64_t)v49;
    int v49 = 0;
    if (v43) {
      (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
    }
    int v44 = *(_DWORD *)(v36 + 24);
    if (!v44)
    {
      __break(0xC471u);
      JUMPOUT(0x198C369E0);
    }
    *(_DWORD *)(v36 + 24) = v44 - 1;
  }
  else
  {
    uint64_t v45 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v42);
  return WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v46);
}

uint64_t WebKit::WebSWRegistrationStore::closeFiles(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0)
  {
    ++*(_DWORD *)(v3 + 24);
    uint64_t result = WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(v3, a2);
    int v5 = *(_DWORD *)(v3 + 24);
    if (v5)
    {
      *(_DWORD *)(v3 + 24) = v5 - 1;
    }
    else
    {
      uint64_t result = 286;
      __break(0xC471u);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    unint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
  return result;
}

double WebKit::WebSWRegistrationStore::updateRegistration(WebKit::WebSWRegistrationStore *this, const WebCore::ServiceWorkerContextData *a2)
{
  uint64_t v3 = this;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (uint64_t *)((char *)this + 88);
  uint64_t v5 = *((void *)this + 11);
  uint64_t v6 = (char *)a2 + 24;
  if (v5
    || (WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::expand((uint64_t *)this + 11, 0), (uint64_t v5 = *v4) != 0))
  {
    unsigned int v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v8 = WTF::computeHash<WebCore::ServiceWorkerRegistrationKey>((uint64_t)v6) & v7;
  uint64_t v9 = v5 + 688 * v8;
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>((WebCore::ServiceWorkerRegistrationKey *)v9)) {
    goto LABEL_17;
  }
  uint64_t v25 = v3;
  uint64_t v10 = 0;
  int v11 = 1;
  while (1)
  {
    int v12 = *(_DWORD *)(v9 + 24);
    if (v12) {
      break;
    }
    if (*(void *)v9 != -1) {
      goto LABEL_8;
    }
    uint64_t v10 = v9;
LABEL_11:
    uint64_t v8 = (v8 + v11) & v7;
    uint64_t v9 = v5 + 688 * v8;
    uint64_t v13 = (WebCore::ServiceWorkerRegistrationKey *)WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>((WebCore::ServiceWorkerRegistrationKey *)v9);
    ++v11;
    if (v13) {
      goto LABEL_15;
    }
  }
  if (v12 == 1)
  {
LABEL_8:
    if (WebCore::operator==(v9, (uint64_t)v6))
    {
      uint64_t v22 = v5 + 688 * v8;
      uint64_t v23 = (WebCore::ServiceWorkerContextData *)(v22 + 80);
      if (*(unsigned char *)(v22 + 672)) {
        WebCore::ServiceWorkerContextData::operator=((uint64_t)v23, (long long *)a2);
      }
      else {
        *((unsigned char *)WebCore::ServiceWorkerContextData::ServiceWorkerContextData(v23, a2) + 59objc_destroyWeak(this + 2) = 1;
      }
      uint64_t v3 = v25;
      goto LABEL_33;
    }
    goto LABEL_11;
  }
  uint64_t v13 = (WebCore::ServiceWorkerRegistrationKey *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_15:
  uint64_t v3 = v25;
  if (v10)
  {
    WebCore::ServiceWorkerRegistrationKey::emptyKey((uint64_t *)v10, v13);
    *(unsigned char *)(v10 + 80) = 0;
    *(unsigned char *)(v10 + 67objc_destroyWeak(this + 2) = 0;
    --*(_DWORD *)(*v4 - 16);
    uint64_t v9 = v10;
  }
LABEL_17:
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v9, (uint64_t)v6);
  WTF::String::operator=((uint64_t *)(v9 + 32), (WTF::StringImpl **)a2 + 7);
  long long v14 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(v9 + 40) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(v9 + 56) = v14;
  WebCore::ServiceWorkerContextData::ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)v26, a2);
  char v27 = 1;
  std::__optional_storage_base<WebCore::ServiceWorkerContextData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ServiceWorkerContextData,false>>((WebCore::ServiceWorkerContextData *)(v9 + 80), (uint64_t)v26);
  if (v27) {
    WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)v26, v15);
  }
  uint64_t v16 = *v4;
  if (*v4) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - 1objc_destroyWeak(this + 2) = v17;
  uint64_t v18 = *v4;
  if (*v4) {
    int v19 = *(_DWORD *)(v18 - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
  unint64_t v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20) {
LABEL_27:
    }
      WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::expand(v4, v9);
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_27;
  }
LABEL_33:
  if ((*((void *)v3 + 8) & 0xFFFFFFFFFFFFLL) == 0
    || (double result = *(double *)((*((void *)v3 + 8) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

double WebKit::WebSWRegistrationStore::removeRegistration(WebKit::WebSWRegistrationStore *this, const WebCore::ServiceWorkerRegistrationKey *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (uint64_t *)((char *)this + 88);
  uint64_t v5 = *((void *)this + 11);
  if (v5
    || (WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::expand((uint64_t *)this + 11, 0), (uint64_t v5 = *v4) != 0))
  {
    unsigned int v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v7 = WTF::computeHash<WebCore::ServiceWorkerRegistrationKey>((uint64_t)a2) & v6;
  uint64_t v8 = v5 + 688 * v7;
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>((WebCore::ServiceWorkerRegistrationKey *)v8)) {
    goto LABEL_17;
  }
  uint64_t v9 = 0;
  int v10 = 1;
  while (1)
  {
    int v11 = *(_DWORD *)(v8 + 24);
    if (v11) {
      break;
    }
    if (*(void *)v8 != -1) {
      goto LABEL_8;
    }
    uint64_t v9 = v8;
LABEL_11:
    uint64_t v7 = (v7 + v10) & v6;
    uint64_t v8 = v5 + 688 * v7;
    uint64_t v13 = (WebCore::ServiceWorkerRegistrationKey *)WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>((WebCore::ServiceWorkerRegistrationKey *)v8);
    ++v10;
    if (v13) {
      goto LABEL_15;
    }
  }
  if (v11 == 1)
  {
LABEL_8:
    if (WebCore::operator==(v8, (uint64_t)a2))
    {
      uint64_t v22 = v5 + 688 * v7;
      if (*(unsigned char *)(v22 + 672))
      {
        uint64_t v23 = (unsigned char *)(v22 + 672);
        WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(v5 + 688 * v7 + 80), v12);
        *uint64_t v23 = 0;
      }
      goto LABEL_30;
    }
    goto LABEL_11;
  }
  uint64_t v13 = (WebCore::ServiceWorkerRegistrationKey *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_15:
  if (v9)
  {
    WebCore::ServiceWorkerRegistrationKey::emptyKey((uint64_t *)v9, v13);
    *(unsigned char *)(v9 + 80) = 0;
    *(unsigned char *)(v9 + 67objc_destroyWeak(this + 2) = 0;
    --*(_DWORD *)(*v4 - 16);
    uint64_t v8 = v9;
  }
LABEL_17:
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v8, (uint64_t)a2);
  WTF::String::operator=((uint64_t *)(v8 + 32), (WTF::StringImpl **)a2 + 4);
  long long v14 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)(v8 + 56) = v14;
  v25[0] = 0;
  char v26 = 0;
  std::__optional_storage_base<WebCore::ServiceWorkerContextData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ServiceWorkerContextData,false>>((WebCore::ServiceWorkerContextData *)(v8 + 80), (uint64_t)v25);
  if (v26) {
    WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)v25, v15);
  }
  uint64_t v16 = *v4;
  if (*v4) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - 1objc_destroyWeak(this + 2) = v17;
  uint64_t v18 = *v4;
  if (*v4) {
    int v19 = *(_DWORD *)(v18 - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
  unint64_t v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20) {
LABEL_27:
    }
      WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::expand(v4, v8);
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_27;
  }
LABEL_30:
  if ((*((void *)this + 8) & 0xFFFFFFFFFFFFLL) == 0
    || (double result = *(double *)((*((void *)this + 8) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

void WebKit::WebSharedWorker::~WebSharedWorker(WTF::StringImpl **this)
{
  uint64_t v2 = WebKit::WebSharedWorker::contextConnection((WebKit::WebSharedWorker *)this);
  if (v2)
  {
    unsigned int v4 = (unint64_t *)this[20];
    if (v4)
    {
      uint64_t v5 = v2;
      do
      {
        WebKit::WebSharedWorkerServerToContextConnection::removeSharedWorkerObject(v5, *v4, v4[1]);
        unsigned int v4 = (unint64_t *)v4[8];
      }
      while (v4);
    }
  }
  if (_MergedGlobals_74)
  {
    if (qword_1EB359900)
    {
      unsigned int v6 = this[1];
      unsigned int v7 = *(_DWORD *)(qword_1EB359900 - 8);
      unint64_t v8 = ((unint64_t)v6 + ~((void)v6 << 32)) ^ (((unint64_t)v6 + ~((void)v6 << 32)) >> 22);
      unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      uint64_t v11 = v7 & ((v10 >> 31) ^ v10);
      int v12 = *(WTF::StringImpl **)(qword_1EB359900 + 16 * v11);
      if (v12 != v6)
      {
        int v13 = 1;
        while (v12)
        {
          uint64_t v11 = (v11 + v13) & v7;
          int v12 = *(WTF::StringImpl **)(qword_1EB359900 + 16 * v11);
          ++v13;
          if (v12 == v6) {
            goto LABEL_13;
          }
        }
        uint64_t v11 = *(unsigned int *)(qword_1EB359900 - 4);
      }
LABEL_13:
      if (v11 != *(_DWORD *)(qword_1EB359900 - 4))
      {
        long long v14 = (void *)(qword_1EB359900 + 16 * v11);
        __int16 v15 = (unsigned int *)v14[1];
        void *v14 = -1;
        v14[1] = 0;
        if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, v3);
        }
        uint64_t v16 = qword_1EB359900;
        ++*(_DWORD *)(qword_1EB359900 - 16);
        if (v16) {
          int v17 = *(_DWORD *)(v16 - 12) - 1;
        }
        else {
          int v17 = -1;
        }
        *(_DWORD *)(v16 - 1objc_destroyWeak(this + 2) = v17;
        if (qword_1EB359900)
        {
          unsigned int v18 = *(_DWORD *)(qword_1EB359900 - 4);
          if (6 * *(_DWORD *)(qword_1EB359900 - 12) < v18 && v18 >= 9) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v18 >> 1);
          }
        }
      }
    }
  }
  else
  {
    qword_1EB359900 = 0;
    _MergedGlobals_74 = 1;
  }
  uint64_t v20 = this[63];
  this[63] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v3);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 46), (WTF::StringImpl *)v3);
  WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)(this + 22), v21);
  uint64_t v23 = this[20];
  if (v23)
  {
    do
    {
      uint64_t v24 = (WTF *)*((void *)v23 + 8);
      WTF::fastFree(v23, v22);
      uint64_t v23 = v24;
    }
    while (v24);
  }
  uint64_t v25 = this[19];
  if (v25) {
    WTF::fastFree((WTF::StringImpl *)((char *)v25 - 16), v22);
  }
  char v26 = this[18];
  this[18] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v22);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t v27 = this[16];
  this[16] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v22);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  uint64_t v28 = this[11];
  this[11] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v22);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t v29 = *((unsigned int *)this + 20);
  if (v29 != -1) {
    ((void (*)(char *, WTF::StringImpl **))off_1EE9CA330[v29])(&v33, this + 7);
  }
  *((_DWORD *)this + 20) = -1;
  uint64_t v30 = *((unsigned int *)this + 12);
  if (v30 != -1) {
    ((void (*)(char *, WTF::StringImpl **))off_1EE9CA330[v30])(&v34, this + 3);
  }
  *((_DWORD *)this + 1objc_destroyWeak(this + 2) = -1;
  WTF::CheckedRef<WebKit::WebSharedWorkerServer,WTF::RawPtrTraits<WebKit::WebSharedWorkerServer>>::~CheckedRef((uint64_t)(this + 2));
  if (*this)
  {
    *((void *)*this + objc_destroyWeak(this + 1) = 0;
    uint64_t v32 = (unsigned int *)*this;
    *this = 0;
    if (v32)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v32);
        WTF::fastFree((WTF *)v32, v31);
      }
    }
  }
  else
  {
    *this = 0;
  }
}

uint64_t WebKit::WebSharedWorker::contextConnection(WebKit::WebSharedWorker *this)
{
  uint64_t v1 = *((void *)this + 2);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v6, (WebKit::WebSharedWorker *)((char *)this + 24));
  uint64_t v3 = WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v1 + 32), &v6);
  unsigned int v4 = v6;
  unsigned int v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return v3;
}

WebCore::RegistrableDomain *WebCore::RegistrableDomain::RegistrableDomain(WebCore::RegistrableDomain *this, const WebCore::SecurityOriginData *a2)
{
  int v3 = *((_DWORD *)a2 + 6);
  if (v3)
  {
    if (v3 != 1)
    {
      unint64_t v8 = (WebKit::WebSharedWorker *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WebCore::RegistrableDomain *)WebKit::WebSharedWorker::launch(v8, v9);
    }
    unsigned int v4 = (WebCore::RegistrableDomain *)MEMORY[0x1E4F30980];
  }
  else
  {
    unsigned int v4 = (const WebCore::SecurityOriginData *)((char *)a2 + 8);
  }
  WebCore::RegistrableDomain::registrableDomainFromHost(v4, v10);
  if (v10[0] && *(_DWORD *)(v10[0] + 4))
  {
    *(void *)this = v10[0];
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned int v7 = (WTF::StringImpl *)v10[0];
    *(void *)this = v10[1];
    v10[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return this;
}

WTF::StringImpl *WebKit::WebSharedWorker::launch(WebKit::WebSharedWorker *this, WebKit::WebSharedWorkerServerToContextConnection *a2)
{
  double result = WebKit::WebSharedWorkerServerToContextConnection::launchSharedWorker(a2, this);
  if (*((unsigned char *)this + 513))
  {
    uint64_t v5 = *((void *)this + 1);
    return WebKit::WebSharedWorkerServerToContextConnection::suspendSharedWorker((uint64_t)a2, v5);
  }
  return result;
}

IPC::Encoder *WebKit::WebSharedWorker::resumeIfNeeded(IPC::Encoder *this)
{
  if (*((unsigned char *)this + 513))
  {
    uint64_t v1 = this;
    *((unsigned char *)this + 513) = 0;
    this = (IPC::Encoder *)WebKit::WebSharedWorker::contextConnection(this);
    if (this)
    {
      uint64_t v2 = *((void *)v1 + 1);
      return WebKit::WebSharedWorkerServerToContextConnection::resumeSharedWorker((uint64_t)this, v2);
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebSharedWorker::removeSharedWorkerObject(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unsigned int v6 = a1 + 19;
  v33[0] = a2;
  v33[1] = a3;
  char v34 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  unsigned int v7 = (WTF **)WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WebKit::WebSharedWorker::Object>(a1 + 19, v33);
  uint64_t v9 = a1[19];
  if (v9) {
    unint64_t v10 = (WTF **)(v9 + 8 * *(unsigned int *)(v9 - 4));
  }
  else {
    unint64_t v10 = 0;
  }
  if (v10 != v7)
  {
    uint64_t v11 = *v7;
    if (*v7)
    {
      if (v9)
      {
        unsigned int v12 = *(_DWORD *)(v9 - 8);
        unsigned int v37 = -1640531527;
        __int16 v38 = 0;
        char v39 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v37, v11);
        int v13 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v37);
        for (i = 0; ; int v13 = i + v15)
        {
          uint64_t v15 = v13 & v12;
          uint64_t v16 = *(uint64_t **)(v9 + 8 * v15);
          if (v16 != (uint64_t *)-1)
          {
            if (!v16)
            {
              uint64_t v20 = *v6;
              if (!*v6) {
                goto LABEL_30;
              }
              unint64_t v21 = (void *)(v20 + 8 * *(unsigned int *)(v20 - 4));
              goto LABEL_18;
            }
            uint64_t v18 = *v16;
            uint64_t v17 = v16[1];
            if (v18 == *(void *)v11 && v17 == *((void *)v11 + 1)) {
              break;
            }
          }
          ++i;
        }
        unint64_t v21 = (void *)(v9 + 8 * v15);
        uint64_t v20 = *v6;
        if (!*v6) {
          goto LABEL_19;
        }
LABEL_18:
        v20 += 8 * *(unsigned int *)(v20 - 4);
LABEL_19:
        if ((void *)v20 != v21)
        {
          *unint64_t v21 = -1;
          ++*(_DWORD *)(*v6 - 16);
          uint64_t v22 = *v6;
          int v23 = *v6 ? *(_DWORD *)(v22 - 12) - 1 : -1;
          *(_DWORD *)(v22 - 1objc_destroyWeak(this + 2) = v23;
          uint64_t v24 = *v6;
          if (*v6)
          {
            unsigned int v25 = 6 * *(_DWORD *)(v24 - 12);
            unsigned int v26 = *(_DWORD *)(v24 - 4);
            if (v25 < v26 && v26 >= 9) {
              WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::rehash(v6, v26 >> 1, 0);
            }
          }
        }
      }
LABEL_30:
      uint64_t v28 = *((void *)v11 + 7);
      uint64_t v29 = *((void *)v11 + 8);
      if (v28)
      {
        *(void *)(v28 + 64) = v29;
        uint64_t v29 = *((void *)v11 + 8);
      }
      else
      {
        a1[20] = v29;
      }
      if (v29) {
        uint64_t v30 = (void *)(v29 + 56);
      }
      else {
        uint64_t v30 = a1 + 21;
      }
      *uint64_t v30 = v28;
      WTF::fastFree(v11, v8);
    }
  }
  uint64_t v31 = WebKit::WebSharedWorker::contextConnection((WebKit::WebSharedWorker *)a1);
  if (v31) {
    WebKit::WebSharedWorkerServerToContextConnection::removeSharedWorkerObject(v31, a2, a3);
  }
  return WebKit::WebSharedWorker::suspendIfNeeded((IPC::Encoder *)a1);
}

IPC::Encoder *WebKit::WebSharedWorker::suspendIfNeeded(IPC::Encoder *this)
{
  if (!*((unsigned char *)this + 513))
  {
    uint64_t v1 = this;
    uint64_t v2 = *((void *)this + 20);
    if (v2)
    {
      while (*(unsigned char *)(v2 + 16))
      {
        uint64_t v2 = *(void *)(v2 + 64);
        if (!v2) {
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      *((unsigned char *)this + 513) = 1;
      this = (IPC::Encoder *)WebKit::WebSharedWorker::contextConnection(this);
      if (this)
      {
        uint64_t v3 = *((void *)v1 + 1);
        return WebKit::WebSharedWorkerServerToContextConnection::suspendSharedWorker((uint64_t)this, v3);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebSharedWorker::forEachSharedWorkerObject(uint64_t result, void *a2)
{
  for (int i = *(void **)(result + 160); i; int i = (void *)i[8])
    double result = (*(uint64_t (**)(void, void, void, void *))(*(void *)*a2 + 16))(*a2, *i, i[1], i + 3);
  return result;
}

void WebKit::WebSharedWorkerServer::~WebSharedWorkerServer(WebKit::WebSharedWorkerServer *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::deallocateTable(v3, a2);
  }
  unsigned int v4 = (WTF::StringImpl **)*((void *)this + 5);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v5, a2);
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v6, a2);
  }
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 + 16);
    if (!v8)
    {
      __break(0xC471u);
      return;
    }
    *(_DWORD *)(v7 + 16) = v8 - 1;
  }

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, a2);
}

void WebKit::WebSharedWorkerServer::requestSharedWorker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 *a6)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  int v8 = (uint64_t *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)&long long v138 = a3;
  *((void *)&v138 + objc_destroyWeak(this + 1) = a4;
  if (v7
    || (WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::expand((uint64_t *)(a1 + 48), 0), (uint64_t v7 = *v8) != 0))
  {
    int v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v9 = 0;
  }
  *(_DWORD *)long long buf = -1640531527;
  *(_WORD *)&uint8_t buf[4] = 0;
  buf[6] = 0;
  unint64_t v10 = (_DWORD **)(a2 + 104);
  WTF::add<WebCore::ClientOrigin,WTF::URL,WTF::String>((unsigned int *)buf, a2, (uint64_t *)(a2 + 64), (uint64_t *)(a2 + 104));
  unsigned int v11 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf) & v9;
  uint64_t v12 = v7 + 120 * v11;
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v12) & 1) == 0)
  {
    v135 = v8;
    uint64_t v13 = 0;
    int v14 = 1;
    do
    {
      if (*(void *)(v12 + 64) == -1)
      {
        uint64_t v13 = v12;
      }
      else if (WebCore::operator==(v12, a2))
      {
        goto LABEL_48;
      }
      unsigned int v11 = (v11 + v14) & v9;
      uint64_t v12 = v7 + 120 * v11;
      ++v14;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v12));
    int v8 = v135;
    if (v13)
    {
      *(_OWORD *)(v13 + 80) = 0u;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 3objc_destroyWeak(this + 2) = 0u;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)uint64_t v13 = 0u;
      *(_OWORD *)(v13 + 16) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      WTF::URL::invalidate((WTF::URL *)(v13 + 64));
      *(void *)(v13 + 104) = 0;
      *(void *)(v13 + 11objc_destroyWeak(this + 2) = 0;
      --*(_DWORD *)(*v135 - 16);
      uint64_t v12 = v13;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v12, a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v12 + 32, a2 + 32);
  WTF::String::operator=((uint64_t *)(v12 + 64), (WTF::StringImpl **)(a2 + 64));
  long long v15 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v12 + 7objc_destroyWeak(this + 2) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v12 + 88) = v15;
  WTF::String::operator=((uint64_t *)(v12 + 104), (WTF::StringImpl **)(a2 + 104));
  uint64_t v16 = WTF::fastMalloc((WTF *)0x210);
  *(void *)uint64_t v16 = 0;
  *(void *)(v16 + 8) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(v16 + 16) = a1;
  ++*(_DWORD *)(a1 + 8);
  *(unsigned char *)(v16 + 24) = 0;
  *(_DWORD *)(v16 + 48) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v16 + 24, a2);
  *(unsigned char *)(v16 + 56) = 0;
  *(_DWORD *)(v16 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v16 + 56, a2 + 32);
  uint64_t v17 = *(_DWORD **)(a2 + 64);
  if (v17) {
    *v17 += 2;
  }
  *(void *)(v16 + 88) = v17;
  long long v18 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v16 + 96) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v16 + 11objc_destroyWeak(this + 2) = v18;
  int v19 = *v10;
  if (*v10) {
    *v19 += 2;
  }
  *(void *)(v16 + 128) = v19;
  *(_WORD *)(v16 + 136) = *a6;
  uint64_t v20 = (_DWORD *)*((void *)a6 + 1);
  if (v20) {
    *v20 += 2;
  }
  *(void *)(v16 + 184) = 0;
  *(void *)(v16 + 144) = v20;
  *(_OWORD *)(v16 + 15objc_destroyWeak(this + 2) = 0u;
  *(_OWORD *)(v16 + 168) = 0u;
  WTF::URL::invalidate((WTF::URL *)(v16 + 184));
  *(_WORD *)(v16 + 256) = 0;
  *(void *)(v16 + 23objc_destroyWeak(this + 2) = 0;
  *(void *)(v16 + 240) = 0;
  *(void *)(v16 + 224) = 0;
  *(void *)(v16 + 245) = 0;
  *(_OWORD *)(v16 + 264) = 0u;
  *(_OWORD *)(v16 + 280) = 0u;
  *(void *)(v16 + 296) = 0;
  WTF::URL::invalidate((WTF::URL *)(v16 + 296));
  *(void *)(v16 + 35objc_destroyWeak(this + 2) = 0;
  *(void *)(v16 + 336) = 0;
  *(void *)(v16 + 34objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(v16 + 360) = 1;
  *(unsigned char *)(v16 + 368) = 0;
  *(unsigned char *)(v16 + 43objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(v16 + 448) = 0;
  *(unsigned char *)(v16 + 480) = 0;
  *(_WORD *)(v16 + 496) = 0;
  *(void *)(v16 + 504) = 0;
  *(_WORD *)(v16 + 51objc_destroyWeak(this + 2) = 0;
  if (_MergedGlobals_74)
  {
    uint64_t v21 = qword_1EB359900;
    uint64_t v22 = *(void *)(v16 + 8);
    if (qword_1EB359900)
    {
LABEL_22:
      int v23 = *(_DWORD *)(v21 - 8);
      goto LABEL_23;
    }
  }
  else
  {
    qword_1EB359900 = 0;
    _MergedGlobals_74 = 1;
    uint64_t v22 = *(void *)(v16 + 8);
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand();
  uint64_t v21 = qword_1EB359900;
  if (qword_1EB359900) {
    goto LABEL_22;
  }
  int v23 = 0;
LABEL_23:
  unint64_t v24 = (v22 + ~(v22 << 32)) ^ ((unint64_t)(v22 + ~(v22 << 32)) >> 22);
  unint64_t v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
  unint64_t v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
  unsigned int v27 = v23 & ((v26 >> 31) ^ v26);
  uint64_t v28 = (void *)(v21 + 16 * v27);
  uint64_t v29 = *v28;
  if (!*v28)
  {
LABEL_31:
    *uint64_t v28 = v22;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v16, v16);
    atomic_uint *volatile v33 = *(atomic_uint *volatile *)v16;
    atomic_fetch_add(*(atomic_uint *volatile *)v16, 1u);
    char v34 = (unsigned int *)v28[1];
    v28[1] = v33;
    if (v34 && atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, v32);
    }
    if (qword_1EB359900) {
      int v35 = *(_DWORD *)(qword_1EB359900 - 12) + 1;
    }
    else {
      int v35 = 1;
    }
    *(_DWORD *)(qword_1EB359900 - 1objc_destroyWeak(this + 2) = v35;
    if (qword_1EB359900) {
      int v36 = *(_DWORD *)(qword_1EB359900 - 12);
    }
    else {
      int v36 = 0;
    }
    uint64_t v37 = (*(_DWORD *)(qword_1EB359900 - 16) + v36);
    unint64_t v38 = *(unsigned int *)(qword_1EB359900 - 4);
    if (v38 > 0x400)
    {
      if (v38 > 2 * v37) {
        goto LABEL_41;
      }
    }
    else if (3 * v38 > 4 * v37)
    {
      goto LABEL_41;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand();
    goto LABEL_41;
  }
  uint64_t v30 = 0;
  int v31 = 1;
  while (v29 != v22)
  {
    if (v29 == -1) {
      uint64_t v30 = v28;
    }
    unsigned int v27 = (v27 + v31) & v23;
    uint64_t v28 = (void *)(v21 + 16 * v27);
    uint64_t v29 = *v28;
    ++v31;
    if (!*v28)
    {
      if (v30)
      {
        *uint64_t v30 = 0;
        v30[1] = 0;
        --*(_DWORD *)(v21 - 16);
        uint64_t v28 = v30;
      }
      goto LABEL_31;
    }
  }
LABEL_41:
  std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100]((WTF::StringImpl ***)(v12 + 112), (WTF::StringImpl **)v16);
  uint64_t v39 = *v8;
  if (*v8) {
    int v40 = *(_DWORD *)(v39 - 12) + 1;
  }
  else {
    int v40 = 1;
  }
  *(_DWORD *)(v39 - 1objc_destroyWeak(this + 2) = v40;
  uint64_t v41 = *v8;
  if (*v8) {
    int v42 = *(_DWORD *)(v41 - 12);
  }
  else {
    int v42 = 0;
  }
  uint64_t v43 = (*(_DWORD *)(v41 - 16) + v42);
  unint64_t v44 = *(unsigned int *)(v41 - 4);
  if (v44 > 0x400)
  {
    if (v44 > 2 * v43) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (3 * v44 <= 4 * v43) {
LABEL_47:
  }
    uint64_t v12 = WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::expand(v8, v12);
LABEL_48:
  uint64_t v45 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    WTF::makeString<unsigned long long,char,unsigned long long>(*((uint64_t *)&v138 + 1), 45, v138, &v143);
    WTF::String::utf8();
    if ((void)v142) {
      uint64_t v46 = v142 + 16;
    }
    else {
      uint64_t v46 = 0;
    }
    uint64_t v47 = *(void *)(*(void *)(v12 + 112) + 8);
    *(_DWORD *)long long buf = 136380931;
    *(void *)&uint8_t buf[4] = v46;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v47;
    _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::requestSharedWorker: sharedWorkerObjectIdentifier=%{private}s, sharedWorkerIdentifier=%llu", buf, 0x16u);
    int v49 = (WTF *)v142;
    *(void *)&long long v142 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 1) {
        WTF::fastFree(v49, v48);
      }
      else {
        --*(_DWORD *)v49;
      }
    }
    uint64_t v50 = v143;
    v143 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2) {
        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v48);
      }
      else {
        *(_DWORD *)v50 -= 2;
      }
    }
  }
  uint64_t v51 = *(void *)(v12 + 112);
  if ((*(unsigned char *)(v51 + 136) != 0) != (*(unsigned char *)a6 != 0)
    || *(unsigned __int8 *)(v51 + 137) != *((unsigned __int8 *)a6 + 1))
  {
    long long v65 = qword_1EB3585C8;
    if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v65, OS_LOG_TYPE_ERROR, "WebSharedWorkerServer::requestSharedWorker: A worker already exists with this name but has different type / credentials", buf, 2u);
    }
    uint64_t v66 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 24), *((uint64_t *)&v138 + 1));
    if (v66)
    {
      uint64_t v67 = (void *)v66;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      WTF::URL::invalidate((WTF::URL *)&buf[8]);
      *(void *)&unsigned char buf[48] = 0;
      *(_DWORD *)&buf[56] = 0;
      *(_WORD *)&buf[60] = 2;
      CFTypeRef cf = 0;
      LOBYTE(v146) = 1;
      WebKit::WebSharedWorkerServerConnection::notifyWorkerObjectOfLoadCompletion(v67, v138, *((uint64_t *)&v138 + 1), (WebCore::ResourceError *)buf);
      CFTypeRef v69 = cf;
      CFTypeRef cf = 0;
      if (v69) {
        CFRelease(v69);
      }
      long long v70 = *(WTF::StringImpl **)&buf[48];
      *(void *)&unsigned char buf[48] = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2) {
          WTF::StringImpl::destroy(v70, v68);
        }
        else {
          *(_DWORD *)v70 -= 2;
        }
      }
      unsigned int v77 = *(WTF::StringImpl **)&buf[8];
      *(void *)&uint8_t buf[8] = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2) {
          WTF::StringImpl::destroy(v77, v68);
        }
        else {
          *(_DWORD *)v77 -= 2;
        }
      }
      uint64_t v78 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2) {
          WTF::StringImpl::destroy(v78, v68);
        }
        else {
          *(_DWORD *)v78 -= 2;
        }
      }
    }
    return;
  }
  uint64_t v53 = (uint64_t *)(v51 + 152);
  uint64_t v52 = *(void *)(v51 + 152);
  *(_OWORD *)long long buf = v138;
  buf[16] = 0;
  long long v54 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)&unsigned char buf[24] = *(_OWORD *)a5;
  *(_OWORD *)&unsigned char buf[40] = v54;
  if (v52
    || (WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::expand((uint64_t *)(v51 + 152), 0), (uint64_t v52 = *v53) != 0))
  {
    int v55 = *(_DWORD *)(v52 - 8);
  }
  else
  {
    int v55 = 0;
  }
  LODWORD(v14objc_destroyWeak(this + 2) = -1640531527;
  WORD2(v14objc_destroyWeak(this + 2) = 0;
  BYTE6(v14objc_destroyWeak(this + 2) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)&v142, buf);
  unsigned int v56 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v142);
  __int16 v57 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v59 = v56 & v55;
    int v60 = (uint64_t *)(v52 + 8 * (v56 & v55));
    uint64_t v61 = (uint64_t *)*v60;
    if (*v60 == -1)
    {
      __int16 v57 = (uint64_t *)(v52 + 8 * v59);
      goto LABEL_76;
    }
    if (!v61) {
      break;
    }
    uint64_t v63 = *v61;
    uint64_t v62 = v61[1];
    if (v63 == *(void *)buf && v62 == *(void *)&buf[8]) {
      goto LABEL_114;
    }
LABEL_76:
    unsigned int v56 = i + v59;
  }
  if (v57)
  {
    *__int16 v57 = 0;
    --*(_DWORD *)(*v53 - 16);
    int v60 = v57;
  }
  uint64_t v71 = WTF::fastMalloc((WTF *)0x48);
  long long v72 = *(_OWORD *)&buf[32];
  uint64_t v73 = *(void *)&buf[48];
  long long v74 = *(_OWORD *)buf;
  *(_OWORD *)(v71 + 16) = *(_OWORD *)&buf[16];
  *(_OWORD *)(v71 + 3objc_destroyWeak(this + 2) = v72;
  *(_OWORD *)uint64_t v71 = v74;
  *(void *)(v71 + 56) = 0;
  *(void *)(v71 + 64) = 0;
  *(void *)(v71 + 48) = v73;
  *int v60 = v71;
  uint64_t v75 = *v53;
  if (*v53) {
    int v76 = *(_DWORD *)(v75 - 12) + 1;
  }
  else {
    int v76 = 1;
  }
  *(_DWORD *)(v75 - 1objc_destroyWeak(this + 2) = v76;
  uint64_t v79 = *v53;
  if (*v53) {
    int v80 = *(_DWORD *)(v79 - 12);
  }
  else {
    int v80 = 0;
  }
  uint64_t v81 = (*(_DWORD *)(v79 - 16) + v80);
  unint64_t v82 = *(unsigned int *)(v79 - 4);
  if (v82 > 0x400)
  {
    if (v82 <= 2 * v81) {
LABEL_109:
    }
      uint64_t v71 = *(void *)WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::expand((uint64_t *)(v51 + 152), (void **)v60);
  }
  else if (3 * v82 <= 4 * v81)
  {
    goto LABEL_109;
  }
  uint64_t v83 = *(void *)(v51 + 168);
  *(void *)(v71 + 56) = v83;
  *(void *)(v71 + 64) = 0;
  if (v83) {
    __int16 v84 = (uint64_t *)(v83 + 64);
  }
  else {
    __int16 v84 = (uint64_t *)(v51 + 160);
  }
  *__int16 v84 = v71;
  *(void *)(v51 + 168) = v71;
LABEL_114:
  long long v85 = (void *)WebKit::WebSharedWorker::contextConnection((WebKit::WebSharedWorker *)v51);
  if (v85) {
    WebKit::WebSharedWorkerServerToContextConnection::addSharedWorkerObject(v85, v138, *((uint64_t *)&v138 + 1));
  }
  WebKit::WebSharedWorker::resumeIfNeeded((IPC::Encoder *)v51);
  uint64_t v86 = *(void *)(v12 + 112);
  uint64_t v87 = *(void *)(v86 + 152);
  if (v87 && (unsigned int v88 = *(_DWORD *)(v87 - 12), v88 >= 2))
  {
    char v89 = qword_1EB3585C8;
    if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v88;
      _os_log_impl(&dword_1985F2000, v89, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::requestSharedWorker: A shared worker with this URL already exists (now shared by %u shared worker objects)", buf, 8u);
      uint64_t v86 = *(void *)(v12 + 112);
    }
    if (*(void *)(v86 + 176))
    {
      uint64_t v90 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 24), *((uint64_t *)&v138 + 1));
      if (v90)
      {
        uint64_t v91 = (void *)v90;
        *(void *)long long buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        WTF::URL::invalidate((WTF::URL *)&buf[8]);
        CFTypeRef cf = 0;
        *(void *)&unsigned char buf[48] = 0;
        *(void *)&buf[54] = 0;
        LOBYTE(v146) = 1;
        WebKit::WebSharedWorkerServerConnection::notifyWorkerObjectOfLoadCompletion(v91, v138, *((uint64_t *)&v138 + 1), (WebCore::ResourceError *)buf);
        CFTypeRef v93 = cf;
        CFTypeRef cf = 0;
        if (v93) {
          CFRelease(v93);
        }
        char v94 = *(WTF::StringImpl **)&buf[48];
        *(void *)&unsigned char buf[48] = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2) {
            WTF::StringImpl::destroy(v94, v92);
          }
          else {
            *(_DWORD *)v94 -= 2;
          }
        }
        long long v117 = *(WTF::StringImpl **)&buf[8];
        *(void *)&uint8_t buf[8] = 0;
        if (v117)
        {
          if (*(_DWORD *)v117 == 2) {
            WTF::StringImpl::destroy(v117, v92);
          }
          else {
            *(_DWORD *)v117 -= 2;
          }
        }
        v118 = *(WTF::StringImpl **)buf;
        *(void *)long long buf = 0;
        if (v118)
        {
          if (*(_DWORD *)v118 == 2) {
            WTF::StringImpl::destroy(v118, v92);
          }
          else {
            *(_DWORD *)v118 -= 2;
          }
        }
        uint64_t v86 = *(void *)(v12 + 112);
      }
    }
    if (*(unsigned char *)(v86 + 512))
    {
      uint64_t v119 = WebKit::WebSharedWorker::contextConnection((WebKit::WebSharedWorker *)v86);
      if (v119)
      {
        v120 = (void *)v119;
        uint64_t v136 = *(void *)(v12 + 112);
        *(void *)long long buf = a1;
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
        v121 = *(atomic_uint **)a1;
        if (*(void *)a1) {
          atomic_fetch_add(v121, 1u);
        }
        *(void *)&uint8_t buf[8] = v121;
        buf[16] = 0;
        *(_DWORD *)&unsigned char buf[40] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&buf[16], a2);
        unsigned char buf[48] = 0;
        int v146 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&buf[48], a2 + 32);
        v122 = *(_DWORD **)(a2 + 64);
        if (v122) {
          *v122 += 2;
        }
        v147 = v122;
        long long v148 = *(_OWORD *)(a2 + 72);
        long long v149 = *(_OWORD *)(a2 + 88);
        v123 = *(_DWORD **)(a2 + 104);
        if (v123) {
          *v123 += 2;
        }
        v150 = v123;
        long long v151 = v138;
        uint64_t v124 = *(void *)(*(void *)(v12 + 112) + 8);
        long long v125 = *(_OWORD *)(a5 + 16);
        *(_OWORD *)&v152[8] = *(_OWORD *)a5;
        *(void *)v152 = v124;
        *(_OWORD *)&v152[24] = v125;
        __int16 v153 = *a6;
        v126 = (_DWORD *)*((void *)a6 + 1);
        if (v126) {
          *v126 += 2;
        }
        v154 = v126;
        uint64_t v127 = WTF::fastMalloc((WTF *)0xD0);
        *(void *)uint64_t v127 = &unk_1EE9CA6E8;
        *(void *)(v127 + 8) = *(void *)buf;
        uint64_t v128 = *(void *)&buf[8];
        *(void *)&uint8_t buf[8] = 0;
        *(void *)(v127 + 16) = v128;
        *(unsigned char *)(v127 + 24) = 0;
        *(_DWORD *)(v127 + 48) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v127 + 24, (uint64_t)&buf[16]);
        *(unsigned char *)(v127 + 56) = 0;
        *(_DWORD *)(v127 + 80) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v127 + 56, (uint64_t)&buf[48]);
        WTF::URL::URL(v127 + 88, (uint64_t *)&v147);
        *(void *)(v127 + 128) = v150;
        long long v129 = v151;
        long long v130 = *(_OWORD *)v152;
        long long v131 = *(_OWORD *)&v152[16];
        *(void *)(v127 + 184) = *(void *)&v152[32];
        *(_OWORD *)(v127 + 168) = v131;
        *(_OWORD *)(v127 + 15objc_destroyWeak(this + 2) = v130;
        *(_OWORD *)(v127 + 136) = v129;
        *(_WORD *)(v127 + 19objc_destroyWeak(this + 2) = v153;
        v132 = v154;
        v150 = 0;
        v154 = 0;
        *(void *)(v127 + 200) = v132;
        *(void *)&long long v142 = v127;
        WebKit::WebSharedWorkerServerToContextConnection::postConnectEvent(v120, v136, (uint64_t *)a5, (uint64_t *)&v142);
        uint64_t v134 = v142;
        *(void *)&long long v142 = 0;
        if (v134) {
          (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
        }
        WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1::~$_1((uint64_t)buf, v133);
      }
    }
  }
  else
  {
    uint64_t v95 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 24), *((uint64_t *)&v138 + 1));
    if (v95)
    {
      char v96 = (void *)v95;
      int v97 = qword_1EB3585C8;
      if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1985F2000, v97, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::requestSharedWorker: Fetching shared worker script in client", buf, 2u);
        uint64_t v86 = *(void *)(v12 + 112);
      }
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
      uint64_t v98 = *(atomic_uint **)a1;
      if (*(void *)a1) {
        atomic_fetch_add(v98, 1u);
      }
      char v99 = *(unsigned int **)(v12 + 112);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v99, (uint64_t)v99);
      CFTypeRef v100 = *(atomic_uint **)v99;
      if (v100) {
        atomic_fetch_add(v100, 1u);
      }
      char v101 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v101 = &unk_1EE9CA710;
      v101[1] = v98;
      v101[2] = v100;
      long long v142 = v138;
      int v102 = qword_1EB3585C8;
      if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v103 = v96[6];
        WTF::makeString<unsigned long long,char,unsigned long long>(*((uint64_t *)&v138 + 1), 45, v138, &v141);
        WTF::String::utf8();
        if (v143) {
          long long v104 = (char *)v143 + 16;
        }
        else {
          long long v104 = 0;
        }
        *(_DWORD *)long long buf = 134218498;
        *(void *)&uint8_t buf[4] = v96;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v103;
        *(_WORD *)&buf[22] = 2082;
        *(void *)&unsigned char buf[24] = v104;
        _os_log_impl(&dword_1985F2000, v102, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::fetchScriptInClient: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
        long long v106 = v143;
        v143 = 0;
        if (v106)
        {
          if (*(_DWORD *)v106 == 1) {
            WTF::fastFree(v106, v105);
          }
          else {
            --*(_DWORD *)v106;
          }
        }
        long long v107 = v141;
        v141 = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2) {
            WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v105);
          }
          else {
            *(_DWORD *)v107 -= 2;
          }
        }
      }
      uint64_t v108 = (*(uint64_t (**)(void *))(*v96 + 56))(v96);
      __int16 v109 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)__int16 v109 = 2831;
      *((void *)v109 + objc_destroyWeak(this + 1) = v108;
      *((void *)v109 + 66) = (char *)v109 + 16;
      *((void *)v109 + 67) = 512;
      *((void *)v109 + 68) = 0;
      *((void *)v109 + 70) = 0;
      *((void *)v109 + 69) = 0;
      IPC::Encoder::encodeHeader(v109);
      v143 = v109;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v109, (uint64_t *)(v86 + 88));
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v109, (uint64_t *)&v142);
      *(void *)long long buf = *((void *)&v142 + 1);
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v109, (uint64_t *)buf);
      IPC::ArgumentCoder<WebCore::WorkerOptions,void>::encode(v109, v86 + 136);
      uint64_t v110 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v110 = &unk_1EE9CA7D8;
      v110[1] = v101;
      uint64_t v111 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      *(void *)long long buf = v110;
      *(void *)&uint8_t buf[8] = v111;
      (*(void (**)(void *, WTF::StringImpl **, unsigned char *, void))(*v96 + 40))(v96, &v143, buf, 0);
      uint64_t v113 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v113) {
        (*(void (**)(uint64_t))(*(void *)v113 + 8))(v113);
      }
      uint64_t v114 = v143;
      v143 = 0;
      if (v114)
      {
        IPC::Encoder::~Encoder(v114, v112);
        WTF::fastFree(v115, v116);
      }
    }
    else
    {
      WebKit::WebSharedWorker::removeSharedWorkerObject((uint64_t *)v86, v138, *((uint64_t *)&v138 + 1));
    }
  }
}

IPC::Encoder *WebKit::WebSharedWorkerServerConnection::notifyWorkerObjectOfLoadCompletion(void *a1, unint64_t a2, uint64_t a3, WebCore::ResourceError *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v22 = a2;
  uint64_t v23 = a3;
  int v8 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = a1[6];
    WTF::makeString<unsigned long long,char,unsigned long long>(a3, 45, a2, &v21);
    WTF::String::utf8();
    if (v24) {
      unint64_t v10 = (char *)v24 + 16;
    }
    else {
      unint64_t v10 = 0;
    }
    BOOL v11 = *((unsigned char *)a4 + 60) == 0;
    *(_DWORD *)long long buf = 134218754;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v26 = 2048;
    uint64_t v27 = v9;
    __int16 v28 = 2082;
    uint64_t v29 = v10;
    __int16 v30 = 1024;
    BOOL v31 = v11;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::notifyWorkerObjectOfLoadCompletion: sharedWorkerObjectIdentifier=%{public}s, success=%d", buf, 0x26u);
    uint64_t v13 = v24;
    unint64_t v24 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::fastFree(v13, v12);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
    int v14 = v21;
    uint64_t v21 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  uint64_t v15 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v16 = 2832;
  *((void *)v16 + objc_destroyWeak(this + 1) = v15;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  unint64_t v24 = v16;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v16, (uint64_t *)&v22);
  *(void *)long long buf = v23;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v16, (uint64_t *)buf);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v16, a4);
  (*(void (**)(void *, WTF **, void))(*a1 + 32))(a1, &v24, 0);
  double result = v24;
  unint64_t v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

uint64_t WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1::~$_1(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 192);
  *(void *)(a1 + 19objc_destroyWeak(this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unsigned int v4 = *(WTF::StringImpl **)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(unsigned int *)(a1 + 72);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CA330[v6])(&v10, a1 + 48);
  }
  *(_DWORD *)(a1 + 7objc_destroyWeak(this + 2) = -1;
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if (v7 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CA330[v7])(&v11, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  int v8 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, a2);
  }
  return a1;
}

uint64_t WebKit::WebSharedWorkerServer::createContextConnection(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  v29[0] = a3;
  v29[1] = a4;
  uint64_t v6 = (uint64_t *)(a1 + 40);
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 40), a2);
  if ((result & 1) == 0)
  {
    int v8 = qword_1EB3585C8;
    if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::createContextConnection will create a connection", buf, 2u);
    }
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v6, a2, (uint64_t)buf);
    uint64_t v9 = *(void *)(a1 + 16);
    char v10 = *(os_unfair_lock_s **)(*(void *)(v9 + 32) + 40);
    buf[0] = 0;
    char v33 = 0;
    uint64_t v23 = *(void *)(v9 + 24);
    v24[0] = 2;
    unint64_t v25 = a2;
    __int16 v26 = v29;
    uint64_t v27 = buf;
    __int16 v28 = &v23;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
    char v11 = *(atomic_uint **)a1;
    if (*(void *)a1) {
      atomic_fetch_add(v11, 1u);
    }
    uint64_t v12 = *a2;
    if (v12) {
      *(_DWORD *)v12 += 4;
    }
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x20);
    uint64_t v15 = (uint64_t)v13;
    void *v13 = &unk_1EE9CA760;
    v13[1] = a1;
    void v13[2] = v11;
    if (v12)
    {
      int v16 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 2;
      uint64_t v13[3] = v12;
      if (v16) {
        *(_DWORD *)uint64_t v12 = v16;
      }
      else {
        WTF::StringImpl::destroy(v12, v14);
      }
    }
    else
    {
      uint64_t v13[3] = 0;
    }
    uint64_t v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    long long v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)long long v18 = 329;
    *((void *)v18 + objc_destroyWeak(this + 1) = 0;
    *((void *)v18 + 66) = (char *)v18 + 16;
    *((void *)v18 + 67) = 512;
    *((void *)v18 + 68) = 0;
    *((void *)v18 + 70) = 0;
    *((void *)v18 + 69) = 0;
    IPC::Encoder::encodeHeader(v18);
    BOOL v31 = v18;
    IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&,PAL::SessionID const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&,PAL::SessionID const&>,0ul,1ul,2ul,3ul,4ul>(v18, (uint64_t)v24);
    v30[0] = v15;
    v30[1] = v17;
    IPC::Connection::sendMessageWithAsyncReply(v10, &v31, v30, 0, 0);
    uint64_t v20 = v30[0];
    v30[0] = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    uint64_t result = (uint64_t)v31;
    BOOL v31 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v19);
      uint64_t result = WTF::fastFree(v21, v22);
      if (!v12) {
        return result;
      }
    }
    else if (!v12)
    {
      return result;
    }
    if (*(_DWORD *)v12 == 2) {
      return WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v19);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebSharedWorkerServer::addContextConnection(WebKit::WebSharedWorkerServer *this, WebKit::WebSharedWorkerServerToContextConnection *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(*((void *)a2 + 3) + 8);
    if (v6) {
      uint64_t v7 = v6 - 48;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void *)(v7 + 264);
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = a2;
    __int16 v46 = 2048;
    uint64_t v47 = v8;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::addContextConnection(%p) webProcessIdentifier=%llu", buf, 0x16u);
  }
  uint64_t v9 = (uint64_t *)((char *)this + 32);
  uint64_t v10 = *((void *)this + 4);
  char v11 = (WTF::ASCIICaseInsensitiveHash **)((char *)a2 + 40);
  unint64_t v44 = this;
  if (v10
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)this + 4),
        (uint64_t v10 = *v9) != 0))
  {
    int v12 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    int v12 = 0;
  }
  unsigned int v13 = WTF::ASCIICaseInsensitiveHash::hash(*v11, v5) & v12;
  int v14 = (uint64_t *)(v10 + 16 * v13);
  if (WTF::equal((WTF *)*v14, 0, v15))
  {
LABEL_16:
    WTF::String::operator=(v14, (WTF::StringImpl **)a2 + 5);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2 + 8);
    uint64_t v21 = (atomic_uint *)*((void *)a2 + 2);
    atomic_fetch_add(v21, 1u);
    unint64_t v22 = (unsigned int *)v14[1];
    v14[1] = (uint64_t)v21;
    if (v22 && atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v20);
    }
    uint64_t v23 = *v9;
    if (*v9) {
      int v24 = *(_DWORD *)(v23 - 12) + 1;
    }
    else {
      int v24 = 1;
    }
    *(_DWORD *)(v23 - 1objc_destroyWeak(this + 2) = v24;
    uint64_t v25 = *v9;
    if (*v9) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27) {
        goto LABEL_26;
      }
    }
    else if (3 * v28 > 4 * v27)
    {
      goto LABEL_26;
    }
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v9);
    goto LABEL_26;
  }
  uint64_t v17 = 0;
  int v18 = 1;
  while (1)
  {
    int v19 = v14;
    if (*v14 != -1)
    {
      int v19 = v17;
      if (WTF::equalIgnoringASCIICase((WTF *)*v14, *v11, v16)) {
        break;
      }
    }
    unsigned int v13 = (v13 + v18) & v12;
    int v14 = (uint64_t *)(v10 + 16 * v13);
    ++v18;
    uint64_t v17 = v19;
    if (WTF::equal((WTF *)*v14, 0, v16))
    {
      if (v19)
      {
        *int v19 = 0;
        v19[1] = 0;
        --*(_DWORD *)(*v9 - 16);
        int v14 = v19;
      }
      goto LABEL_16;
    }
  }
LABEL_26:
  uint64_t v29 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v30 = *(void *)(*((void *)a2 + 3) + 8);
    if (v30) {
      uint64_t v31 = v30 - 48;
    }
    else {
      uint64_t v31 = 0;
    }
    uint64_t v32 = *(void *)(v31 + 264);
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = a2;
    __int16 v46 = 2048;
    uint64_t v47 = v32;
    _os_log_impl(&dword_1985F2000, v29, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::contextConnectionCreated(%p) webProcessIdentifier=%llu", buf, 0x16u);
  }
  uint64_t result = WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::begin(*((void *)v44 + 6));
  uint64_t v34 = result;
  uint64_t v36 = v35;
  uint64_t v37 = *((void *)v44 + 6);
  if (v37) {
    uint64_t v38 = v37 + 120 * *(unsigned int *)(v37 - 4);
  }
  else {
    uint64_t v38 = 0;
  }
  if (v38 != result)
  {
    while (1)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, (const WebCore::SecurityOriginData *)(*(void *)(v34 + 112) + 24));
      int v41 = WTF::equal(*v11, *(const WTF::StringImpl **)buf, v39);
      uint64_t result = *(void *)buf;
      *(void *)long long buf = 0;
      if (!result) {
        goto LABEL_37;
      }
      if (*(_DWORD *)result != 2) {
        break;
      }
      uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v40);
      if (!v41) {
        goto LABEL_44;
      }
LABEL_40:
      int v42 = *(WebKit::WebSharedWorker **)(v34 + 112);
      for (int i = (unint64_t *)*((void *)v42 + 20); i; int i = (unint64_t *)i[8])
        uint64_t result = WebKit::WebSharedWorkerServerToContextConnection::addSharedWorkerObject(a2, *i, i[1]);
      if (*((void *)v42 + 22)) {
        uint64_t result = (uint64_t)WebKit::WebSharedWorker::launch(v42, a2);
      }
LABEL_44:
      while (1)
      {
        v34 += 120;
        if (v34 == v36) {
          break;
        }
        uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v34);
        if ((result & 1) == 0 && *(void *)(v34 + 64) != -1) {
          goto LABEL_49;
        }
      }
      uint64_t v34 = v36;
LABEL_49:
      if (v34 == v38) {
        return result;
      }
    }
    *(_DWORD *)result -= 2;
LABEL_37:
    if (!v41) {
      goto LABEL_44;
    }
    goto LABEL_40;
  }
  return result;
}

WTF::StringImpl *WebKit::WebSharedWorkerServer::removeContextConnection(WebKit::WebSharedWorkerServer *this, WebKit::WebSharedWorkerServerToContextConnection *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(*((void *)a2 + 3) + 8);
    if (v6) {
      uint64_t v7 = v6 - 48;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void *)(v7 + 264);
    *(_DWORD *)uint64_t v31 = 134218240;
    *(void *)&v31[4] = a2;
    __int16 v32 = 2048;
    uint64_t v33 = v8;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::removeContextConnection(%p) webProcessIdentifier=%llu", v31, 0x16u);
  }
  uint64_t v9 = (WTF::ASCIICaseInsensitiveHash *)*((void *)a2 + 5);
  if (v9) {
    *(_DWORD *)v9 += 2;
  }
  *(void *)uint64_t v31 = v9;
  uint64_t v10 = (uint64_t *)((char *)this + 32);
  uint64_t v11 = *((void *)this + 4);
  if (v11)
  {
    int v12 = *(_DWORD *)(v11 - 8);
    unsigned int v13 = WTF::ASCIICaseInsensitiveHash::hash(v9, v5) & v12;
    uint64_t v14 = v11 + 16 * v13;
    if (WTF::equal(*(WTF **)v14, 0, v15))
    {
LABEL_14:
      uint64_t v18 = *v10;
      if (!*v10) {
        goto LABEL_31;
      }
      uint64_t v14 = v18 + 16 * *(unsigned int *)(v18 - 4);
    }
    else
    {
      int v17 = 1;
      while (*(void *)v14 == -1 || (WTF::equalIgnoringASCIICase(*(WTF **)v14, v9, v16) & 1) == 0)
      {
        unsigned int v13 = (v13 + v17) & v12;
        uint64_t v14 = v11 + 16 * v13;
        ++v17;
        if (WTF::equal(*(WTF **)v14, 0, v16)) {
          goto LABEL_14;
        }
      }
      uint64_t v18 = *v10;
      if (!*v10)
      {
LABEL_17:
        if (v18 != v14)
        {
          WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>((WTF::StringImpl **)v14, v5);
          int v19 = *(unsigned int **)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v19);
            WTF::fastFree((WTF *)v19, v5);
          }
          ++*(_DWORD *)(*v10 - 16);
          uint64_t v20 = *v10;
          if (*v10) {
            int v21 = *(_DWORD *)(v20 - 12) - 1;
          }
          else {
            int v21 = -1;
          }
          *(_DWORD *)(v20 - 1objc_destroyWeak(this + 2) = v21;
          uint64_t v22 = *v10;
          if (*v10)
          {
            unsigned int v23 = 6 * *(_DWORD *)(v22 - 12);
            unsigned int v24 = *(_DWORD *)(v22 - 4);
            if (v23 < v24 && v24 >= 9) {
              WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash((uint64_t *)this + 4, v24 >> 1);
            }
          }
        }
        goto LABEL_31;
      }
    }
    v18 += 16 * *(unsigned int *)(v18 - 4);
    if (v18 == v14) {
      goto LABEL_31;
    }
    goto LABEL_17;
  }
LABEL_31:
  int v26 = (uint64_t *)*((void *)a2 + 6);
  if (v26 && *((_DWORD *)v26 - 3))
  {
    uint64_t v27 = *((unsigned int *)v26 - 1);
    if (v27)
    {
      uint64_t v28 = 16 * v27;
      uint64_t v29 = &v26[2 * v27];
      while ((unint64_t)(*v26 + 1) <= 1)
      {
        v26 += 2;
        v28 -= 16;
        if (!v28)
        {
          int v26 = v29;
          break;
        }
      }
    }
    WebKit::WebSharedWorkerServer::createContextConnection((uint64_t)this, (WTF::ASCIICaseInsensitiveHash **)v31, *v26, 1);
  }
  uint64_t result = *(WTF::StringImpl **)v31;
  *(void *)uint64_t v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebSharedWorkerServer::sharedWorkerObjectIsGoingAway(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (uint64_t *)(a1 + 48);
  uint64_t v8 = (uint64_t *)WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>(*(void *)(a1 + 48), a2);
  uint64_t v9 = qword_1EB3585C8;
  if (!os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_12;
  }
  WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v24);
  WTF::String::utf8();
  if (v25) {
    uint64_t v10 = (char *)v25 + 16;
  }
  else {
    uint64_t v10 = 0;
  }
  *(_DWORD *)long long buf = 136446466;
  uint64_t v27 = v10;
  __int16 v28 = 2048;
  uint64_t v29 = v8;
  _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::sharedWorkerObjectIsGoingAway: sharedWorkerObjectIdentifier=%{public}s, sharedWorker=%p", buf, 0x16u);
  int v12 = v25;
  uint64_t v25 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1) {
      WTF::fastFree(v12, v11);
    }
    else {
      --*(_DWORD *)v12;
    }
  }
  unsigned int v13 = v24;
  unsigned int v24 = 0;
  if (!v13)
  {
LABEL_12:
    if (!v8) {
      return;
    }
    goto LABEL_13;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v11);
  if (!v8) {
    return;
  }
LABEL_13:
  WebKit::WebSharedWorker::removeSharedWorkerObject(v8, a3, a4);
  uint64_t v14 = v8[19];
  if (v14 && *(_DWORD *)(v14 - 12)) {
    return;
  }
  uint64_t v15 = WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>(v7, a2);
  uint64_t v16 = *v7;
  if (*v7) {
    v16 += 120 * *(unsigned int *)(v16 - 4);
  }
  if (v16 == v15)
  {
    int v19 = qword_1EB3585C8;
    if (!os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v17 = 0;
LABEL_28:
    uint64_t v20 = 0;
    goto LABEL_29;
  }
  int v17 = *(WebKit::WebSharedWorker **)(v15 + 112);
  *(void *)(v15 + 11objc_destroyWeak(this + 2) = 0;
  if (*v7)
  {
    uint64_t v18 = *v7 + 120 * *(unsigned int *)(*v7 - 4);
    if (v18 == v15) {
      goto LABEL_23;
    }
  }
  else
  {
    if (!v15) {
      goto LABEL_23;
    }
    uint64_t v18 = 0;
  }
  if (v18 != v15) {
    WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::remove(v7, (WTF::StringImpl ***)v15);
  }
LABEL_23:
  int v19 = qword_1EB3585C8;
  if (!os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_30;
  }
  if (!v17) {
    goto LABEL_28;
  }
  uint64_t v20 = (char *)*((void *)v17 + 1);
LABEL_29:
  *(_DWORD *)long long buf = 134218240;
  uint64_t v27 = v20;
  __int16 v28 = 2048;
  uint64_t v29 = (uint64_t *)v17;
  _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::shutDownSharedWorker: sharedWorkerIdentifier=%llu, sharedWorker=%p", buf, 0x16u);
LABEL_30:
  if (v17)
  {
    int v21 = (void *)WebKit::WebSharedWorker::contextConnection(v17);
    if (v21) {
      WebKit::WebSharedWorkerServerToContextConnection::terminateSharedWorker(v21, (uint64_t)v17);
    }
    WebKit::WebSharedWorker::~WebSharedWorker((WTF::StringImpl **)v17);
    WTF::fastFree(v22, v23);
  }
}

uint64_t WebKit::WebSharedWorkerServer::removeConnection(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::take(&v17, (uint64_t *)(a1 + 24), &v18);
  uint64_t v3 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = v17;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v18;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::removeConnection(%p): processIdentifier=%llu", buf, 0x16u);
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v4 = WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::begin(*(void *)(a1 + 48));
  uint64_t i = v4;
  uint64_t v7 = v5;
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    uint64_t v8 = v9 + 120 * *(unsigned int *)(v9 - 4);
  }
  if (v8 != v4)
  {
    do
    {
      uint64_t v12 = *(void *)(i + 112);
      uint64_t v11 = i + 112;
      unsigned int v13 = (void *)WTF::fastMalloc((WTF *)0x20);
      void *v13 = &unk_1EE9CA788;
      v13[1] = &v18;
      void v13[2] = buf;
      uint64_t v13[3] = v11;
      uint64_t v16 = v13;
      WebKit::WebSharedWorker::forEachSharedWorkerObject(v12, &v16);
      (*(void (**)(void *))(*v13 + 8))(v13);
      for (uint64_t i = v11 + 8; (void *)i != v7; i += 120)
      {
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(i) & 1) == 0
          && *(void *)(i + 64) != -1)
        {
          goto LABEL_15;
        }
      }
      uint64_t i = (uint64_t)v7;
LABEL_15:
      ;
    }
    while (i != v8);
    if (*(_DWORD *)&buf[12])
    {
      uint64_t v14 = *(void *)buf;
      unint64_t v15 = (unint64_t)*(unsigned int *)&buf[12] << 7;
      do
      {
        WebKit::WebSharedWorkerServer::sharedWorkerObjectIsGoingAway(a1, v14, *(void *)(v14 + 112), *(void *)(v14 + 120));
        v14 += 128;
        v15 -= 128;
      }
      while (v15);
    }
  }
  WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v5);
  uint64_t result = v17;
  if (v17) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  return result;
}

void *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::take(void *a1, uint64_t *a2, void *a3)
{
  uint64_t result = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2, a3);
  uint64_t v6 = *a2;
  if (*a2) {
    v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  if ((void *)v6 == result)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = result[1];
    result[1] = 0;
    uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::remove(a2, result);
  }
  *a1 = v7;
  return result;
}

void WebKit::WebSharedWorkerServer::postErrorToWorkerObject(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, char a7)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v23 = a5;
  int v24 = a4;
  char v22 = a7;
  if (_MergedGlobals_74)
  {
    if (qword_1EB359900)
    {
      unsigned int v11 = *(_DWORD *)(qword_1EB359900 - 8);
      unint64_t v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      uint64_t v15 = v11 & ((v14 >> 31) ^ v14);
      uint64_t v16 = *(void *)(qword_1EB359900 + 16 * v15);
      if (v16 == a2)
      {
LABEL_7:
        uint64_t v18 = *(void *)(qword_1EB359900 + 16 * v15 + 8);
        if (v18)
        {
          uint64_t v19 = *(void *)(v18 + 8);
          goto LABEL_10;
        }
      }
      else
      {
        int v17 = 1;
        while (v16)
        {
          uint64_t v15 = (v15 + v17) & v11;
          uint64_t v16 = *(void *)(qword_1EB359900 + 16 * v15);
          ++v17;
          if (v16 == a2) {
            goto LABEL_7;
          }
        }
      }
    }
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 0;
    qword_1EB359900 = 0;
    _MergedGlobals_74 = 1;
  }
LABEL_10:
  uint64_t v20 = qword_1EB3585C8;
  if (!os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_ERROR))
  {
    if (!v19) {
      return;
    }
    goto LABEL_12;
  }
  *(_DWORD *)long long buf = 134218240;
  *(void *)&uint8_t buf[4] = a2;
  __int16 v26 = 2048;
  uint64_t v27 = v19;
  _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, "WebSharedWorkerServer::postErrorToWorkerObject: sharedWorkerIdentifier=%llu, sharedWorker=%p", buf, 0x16u);
  if (v19)
  {
LABEL_12:
    int v21 = (void *)WTF::fastMalloc((WTF *)0x38);
    *int v21 = &unk_1EE9CA7B0;
    v21[1] = a1;
    _OWORD v21[2] = a3;
    v21[3] = &v24;
    v21[4] = &v23;
    v21[5] = a6;
    v21[6] = &v22;
    *(void *)long long buf = v21;
    WebKit::WebSharedWorker::forEachSharedWorkerObject(v19, buf);
    (*(void (**)(void *))(*v21 + 8))(v21);
  }
}

void WebKit::WebSharedWorkerServer::sharedWorkerTerminated(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_ERROR))
  {
    int v29 = 134217984;
    uint64_t v30 = a2;
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "WebSharedWorkerServer::sharedWorkerTerminated: sharedWorkerIdentifier=%llu", (uint8_t *)&v29, 0xCu);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v5 = (uint64_t *)(a1 + 48);
  uint64_t v6 = v7;
  if (v7)
  {
    int v8 = *(_DWORD *)(v6 - 4);
    if (v8)
    {
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v6 + 120 * v10) & 1) == 0
          && *(void *)(v6 + 120 * v10 + 64) != -1)
        {
          uint64_t v13 = v6 + 120 * v10;
          uint64_t v15 = *(void *)(v13 + 112);
          unint64_t v14 = (WTF::StringImpl ***)(v13 + 112);
          if (*(void *)(v15 + 8) == a2)
          {
            WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::SharedWorkerKey>,WebCore::SharedWorkerKey>(v6 + 120 * v10, v12);
            std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100](v14, 0);
            ++v9;
          }
        }
        --v10;
      }
      while (v11);
      uint64_t v16 = *v5;
      if (v9)
      {
        *(_DWORD *)(v16 - 16) += v9;
        uint64_t v17 = *v5;
        if (*v5) {
          int v18 = *(_DWORD *)(v17 - 12);
        }
        else {
          int v18 = 0;
        }
        *(_DWORD *)(v17 - 1objc_destroyWeak(this + 2) = v18 - v9;
        uint64_t v16 = *v5;
      }
      if (v16)
      {
        unsigned int v19 = *(_DWORD *)(v16 - 4);
        uint64_t v20 = *(unsigned int *)(v16 - 12);
        if (v19 >= 9 && 6 * (int)v20 < v19)
        {
          unsigned int v22 = (v20 - 1) | ((v20 - 1) >> 1) | (((v20 - 1) | ((v20 - 1) >> 1)) >> 2);
          unsigned int v23 = v22 | (v22 >> 4) | ((v22 | (v22 >> 4)) >> 8);
          unint64_t v24 = (v23 | HIWORD(v23)) + 1;
          if (v24 > 0x400)
          {
            if (v24 > 2 * v20) {
              goto LABEL_27;
            }
          }
          else if (3 * v24 > 4 * v20)
          {
LABEL_24:
            double v25 = (double)v20;
            double v26 = (double)v24;
            double v27 = 0.604166667;
LABEL_28:
            if (v26 * v27 <= v25) {
              LODWORD(v24) = 2 * v24;
            }
            if (v24 <= 8) {
              unsigned int v28 = 8;
            }
            else {
              unsigned int v28 = v24;
            }
            WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::rehash(v5, v28, 0);
            return;
          }
          LODWORD(v24) = 2 * v24;
          if (v24 <= 0x400) {
            goto LABEL_24;
          }
LABEL_27:
          double v25 = (double)v20;
          double v26 = (double)v24;
          double v27 = 0.416666667;
          goto LABEL_28;
        }
      }
    }
  }
}

void WebKit::WebSharedWorkerServer::terminateContextConnectionWhenPossible(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 32), a2);
  uint64_t v5 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134218240;
    uint64_t v9 = a3;
    __int16 v10 = 2048;
    uint64_t v11 = v4;
    _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::terminateContextConnectionWhenPossible: processIdentifier=%llu, contextConnection=%p", (uint8_t *)&v8, 0x16u);
  }
  if (v4)
  {
    uint64_t v6 = *(void *)(*(void *)(v4 + 24) + 8);
    if (v6) {
      uint64_t v7 = v6 - 48;
    }
    else {
      uint64_t v7 = 0;
    }
    if (*(void *)(v7 + 264) == a3) {
      *(unsigned char *)(v4 + 11objc_destroyWeak(this + 2) = 1;
    }
  }
}

void WebKit::WebSharedWorkerServerConnection::~WebSharedWorkerServerConnection(WebKit::WebSharedWorkerServerConnection *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE9CA288;
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1EE9CA2E0;
  uint64_t v2 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 6);
    int v6 = 134218240;
    uint64_t v7 = this;
    __int16 v8 = 2048;
    uint64_t v9 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::~WebSharedWorkerServerConnection:", (uint8_t *)&v6, 0x16u);
  }
  WTF::CheckedRef<WebKit::WebSharedWorkerServer,WTF::RawPtrTraits<WebKit::WebSharedWorkerServer>>::~CheckedRef((uint64_t)this + 40);
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 32);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 3);
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v5);
  WTF::isIntegralOrPointerType(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSharedWorkerServerConnection::~WebSharedWorkerServerConnection(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebSharedWorkerServerConnection::~WebSharedWorkerServerConnection(WebKit::WebSharedWorkerServerConnection *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSharedWorkerServerConnection::~WebSharedWorkerServerConnection((WebKit::WebSharedWorkerServerConnection *)((char *)this - 8));

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebSharedWorkerServerConnection::server(WebKit::WebSharedWorkerServerConnection *this)
{
  return *((void *)this + 5);
}

uint64_t WebKit::WebSharedWorkerServerConnection::messageSenderConnection(WebKit::WebSharedWorkerServerConnection *this)
{
  return *((void *)this + 3);
}

void WebKit::WebSharedWorkerServerConnection::requestSharedWorker(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1[4];
  uint64_t v13 = a1[6];
  int v14 = *(_DWORD *)(a2 + 24);
  if (v14)
  {
    if (v14 != 1) {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    uint64_t v15 = (WebCore::RegistrableDomain *)MEMORY[0x1E4F30980];
  }
  else
  {
    uint64_t v15 = (WebCore::RegistrableDomain *)(a2 + 8);
  }
  WebCore::RegistrableDomain::uncheckedCreateFromHost(v15, (WTF::StringImpl **)buf);
  int PartyForCookies = WebKit::NetworkProcess::allowsFirstPartyForCookies(v12, v13, (WTF::ASCIICaseInsensitiveHash **)buf);
  unsigned int v19 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v16);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  if (PartyForCookies == 2)
  {
    int v29 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebSharedWorkerServerConnection::requestSharedWorker(WebCore::SharedWorkerKey &&"
                           ", WebCore::SharedWorkerObjectIdentifier, WebCore::TransferredMessagePort &&, WebCore::WorkerOptions &&)";
      uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/SharedWorker/WebSharedWorkerServer"
            "Connection.cpp 92: Invalid message dispatched %{public}s";
      goto LABEL_34;
    }
LABEL_30:
    *(unsigned char *)(a1[3] + 98) = 1;
    return;
  }
  if (a4 != a1[6])
  {
    int v29 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebSharedWorkerServerConnection::requestSharedWorker(WebCore::SharedWorkerKey &&"
                           ", WebCore::SharedWorkerObjectIdentifier, WebCore::TransferredMessagePort &&, WebCore::WorkerOptions &&)";
      uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/SharedWorker/WebSharedWorkerServer"
            "Connection.cpp 93: Invalid message dispatched %{public}s";
      goto LABEL_34;
    }
    goto LABEL_30;
  }
  if ((WTF::equal(*(WTF **)(a2 + 104), *(const WTF::StringImpl **)(a6 + 8), v17) & 1) == 0)
  {
    int v29 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_30;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebSharedWorkerServerConnection::requestSharedWorker(WebCore::SharedWorkerKey &&, "
                         "WebCore::SharedWorkerObjectIdentifier, WebCore::TransferredMessagePort &&, WebCore::WorkerOptions &&)";
    uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/SharedWorker/WebSharedWorkerServerCo"
          "nnection.cpp 94: Invalid message dispatched %{public}s";
LABEL_34:
    _os_log_fault_impl(&dword_1985F2000, v29, OS_LOG_TYPE_FAULT, v30, buf, 0xCu);
    goto LABEL_30;
  }
  uint64_t v20 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = a1[6];
    WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v31);
    WTF::String::utf8();
    if (v32) {
      unsigned int v22 = (char *)v32 + 16;
    }
    else {
      unsigned int v22 = 0;
    }
    *(_DWORD *)long long buf = 134218498;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v34 = 2048;
    uint64_t v35 = v21;
    __int16 v36 = 2082;
    uint64_t v37 = v22;
    _os_log_impl(&dword_1985F2000, v20, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::requestSharedWorker: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    unint64_t v24 = v32;
    __int16 v32 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1) {
        WTF::fastFree(v24, v23);
      }
      else {
        --*(_DWORD *)v24;
      }
    }
    double v25 = v31;
    uint64_t v31 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v23);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  uint64_t v26 = a1[4];
  *(void *)long long buf = *(void *)(*(void *)(a1[5] + 16) + 24);
  double v27 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v26 + 224), buf);
  if (v27)
  {
    WebKit::NetworkSession::ensureSharedWorkerServer(v27);
    WebKit::WebSharedWorkerServer::requestSharedWorker(v28, a2, a3, a4, a5, (__int16 *)a6);
  }
}

void WebKit::WebSharedWorkerServerConnection::sharedWorkerObjectIsGoingAway(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a4 == a1[6])
  {
    __int16 v8 = qword_1EB3585C8;
    if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
    {
      WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v17);
      WTF::String::utf8();
      if (v18) {
        uint64_t v9 = (char *)v18 + 16;
      }
      else {
        uint64_t v9 = 0;
      }
      *(_DWORD *)long long buf = 134218498;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v20 = 2048;
      uint64_t v21 = a4;
      __int16 v22 = 2082;
      unsigned int v23 = v9;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::sharedWorkerObjectIsGoingAway: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
      uint64_t v11 = v18;
      int v18 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1) {
          WTF::fastFree(v11, v10);
        }
        else {
          --*(_DWORD *)v11;
        }
      }
      uint64_t v12 = v17;
      uint64_t v17 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v10);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    uint64_t v13 = a1[4];
    *(void *)long long buf = *(void *)(*(void *)(a1[5] + 16) + 24);
    int v14 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v13 + 224), buf);
    if (v14)
    {
      WebKit::NetworkSession::ensureSharedWorkerServer(v14);
      WebKit::WebSharedWorkerServer::sharedWorkerObjectIsGoingAway(v15, a2, a3, a4);
    }
  }
  else
  {
    uint64_t v16 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebSharedWorkerServerConnection::sharedWorkerObjectIsGoingAway(WebCore::SharedWo"
                           "rkerKey &&, WebCore::SharedWorkerObjectIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/SharedWorker/WebSharedWorkerServerConnection.cpp 102: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a1[3] + 98) = 1;
  }
}

void WebKit::WebSharedWorkerServerConnection::suspendForBackForwardCache(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a4 == a1[6])
  {
    __int16 v8 = qword_1EB3585C8;
    if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
    {
      WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v25);
      WTF::String::utf8();
      if (v26) {
        uint64_t v9 = (char *)v26 + 16;
      }
      else {
        uint64_t v9 = 0;
      }
      *(_DWORD *)long long buf = 134218498;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a4;
      __int16 v28 = 2082;
      *(void *)&long long v29 = v9;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::suspendForBackForwardCache: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
      uint64_t v11 = v26;
      uint64_t v26 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1) {
          WTF::fastFree(v11, v10);
        }
        else {
          --*(_DWORD *)v11;
        }
      }
      uint64_t v12 = v25;
      double v25 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v10);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    uint64_t v13 = a1[4];
    *(void *)long long buf = *(void *)(*(void *)(a1[5] + 16) + 24);
    int v14 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v13 + 224), buf);
    if (v14)
    {
      WebKit::NetworkSession::ensureSharedWorkerServer(v14);
      uint64_t v16 = (uint64_t *)WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>(*(void *)(v15 + 48), a2);
      uint64_t v17 = qword_1EB3585C8;
      if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
      {
        WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v25);
        WTF::String::utf8();
        if (v26) {
          int v18 = (char *)v26 + 16;
        }
        else {
          int v18 = 0;
        }
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v18;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v16;
        _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::suspendForBackForwardCache: sharedWorkerObjectIdentifier=%{public}s, sharedWorker=%p", buf, 0x16u);
        __int16 v20 = v26;
        uint64_t v26 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 1) {
            WTF::fastFree(v20, v19);
          }
          else {
            --*(_DWORD *)v20;
          }
        }
        uint64_t v21 = v25;
        double v25 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v19);
            if (!v16) {
              return;
            }
            goto LABEL_27;
          }
          *(_DWORD *)v21 -= 2;
        }
      }
      if (!v16) {
        return;
      }
LABEL_27:
      *(void *)long long buf = a3;
      *(void *)&uint8_t buf[8] = a4;
      buf[16] = 0;
      long long v29 = 0u;
      long long v30 = 0u;
      uint64_t v22 = WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WebKit::WebSharedWorker::Object>(v16 + 19, buf);
      uint64_t v23 = v16[19];
      if (v23) {
        v23 += 8 * *(unsigned int *)(v23 - 4);
      }
      if (v23 != v22)
      {
        if (*(void *)v22)
        {
          *(unsigned char *)(*(void *)v22 + 16) = 1;
          WebKit::WebSharedWorker::suspendIfNeeded((IPC::Encoder *)v16);
        }
      }
    }
  }
  else
  {
    uint64_t v24 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebSharedWorkerServerConnection::suspendForBackForwardCache(WebCore::SharedWorke"
                           "rKey &&, WebCore::SharedWorkerObjectIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v24, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/SharedWorker/WebSharedWorkerServerConnection.cpp 110: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a1[3] + 98) = 1;
  }
}

void WebKit::WebSharedWorkerServerConnection::resumeForBackForwardCache(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a4 == a1[6])
  {
    __int16 v8 = qword_1EB3585C8;
    if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
    {
      WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v25);
      WTF::String::utf8();
      if (v26) {
        uint64_t v9 = (char *)v26 + 16;
      }
      else {
        uint64_t v9 = 0;
      }
      *(_DWORD *)long long buf = 134218498;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a4;
      __int16 v28 = 2082;
      *(void *)&long long v29 = v9;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::resumeForBackForwardCache: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
      uint64_t v11 = v26;
      uint64_t v26 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1) {
          WTF::fastFree(v11, v10);
        }
        else {
          --*(_DWORD *)v11;
        }
      }
      uint64_t v12 = v25;
      double v25 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v10);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    uint64_t v13 = a1[4];
    *(void *)long long buf = *(void *)(*(void *)(a1[5] + 16) + 24);
    int v14 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v13 + 224), buf);
    if (v14)
    {
      WebKit::NetworkSession::ensureSharedWorkerServer(v14);
      uint64_t v16 = (uint64_t *)WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>(*(void *)(v15 + 48), a2);
      uint64_t v17 = qword_1EB3585C8;
      if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
      {
        WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v25);
        WTF::String::utf8();
        if (v26) {
          int v18 = (char *)v26 + 16;
        }
        else {
          int v18 = 0;
        }
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v18;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v16;
        _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::resumeForBackForwardCache: sharedWorkerObjectIdentifier=%{public}s, sharedWorker=%p", buf, 0x16u);
        __int16 v20 = v26;
        uint64_t v26 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 1) {
            WTF::fastFree(v20, v19);
          }
          else {
            --*(_DWORD *)v20;
          }
        }
        uint64_t v21 = v25;
        double v25 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v19);
            if (!v16) {
              return;
            }
            goto LABEL_27;
          }
          *(_DWORD *)v21 -= 2;
        }
      }
      if (!v16) {
        return;
      }
LABEL_27:
      *(void *)long long buf = a3;
      *(void *)&uint8_t buf[8] = a4;
      buf[16] = 0;
      long long v29 = 0u;
      long long v30 = 0u;
      uint64_t v22 = WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WebKit::WebSharedWorker::Object>(v16 + 19, buf);
      uint64_t v23 = v16[19];
      if (v23) {
        v23 += 8 * *(unsigned int *)(v23 - 4);
      }
      if (v23 != v22)
      {
        if (*(void *)v22)
        {
          *(unsigned char *)(*(void *)v22 + 16) = 0;
          WebKit::WebSharedWorker::resumeIfNeeded((IPC::Encoder *)v16);
        }
      }
    }
  }
  else
  {
    uint64_t v24 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::WebSharedWorkerServerConnection::resumeForBackForwardCache(WebCore::SharedWorker"
                           "Key &&, WebCore::SharedWorkerObjectIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v24, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/SharedWorker/WebSharedWorkerServerConnection.cpp 118: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a1[3] + 98) = 1;
  }
}

uint64_t WebKit::ServiceWorkerDownloadTask::state(WebKit::ServiceWorkerDownloadTask *this)
{
  return *((unsigned int *)this + 166);
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::isSynchronous(WebKit::ServiceWorkerNavigationPreloader *this)
{
  return 0;
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::isAllowedToAskUserForCredentials(WebKit::ServiceWorkerNavigationPreloader *this)
{
  return 0;
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::isSynchronous(WebKit::ServiceWorkerSoftUpdateLoader *this)
{
  return 0;
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::isAllowedToAskUserForCredentials(WebKit::ServiceWorkerSoftUpdateLoader *this)
{
  return 0;
}

void WebKit::WebSWRegistrationStore::~WebSWRegistrationStore(WebKit::WebSWRegistrationStore *this, void *a2)
{
  uint64_t v3 = *((void *)this + 11);
  if (v3) {
    WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::deallocateTable(v3, a2);
  }
  *((void *)this + 4) = &unk_1EE9BA5F0;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WebCore::TimerBase::~TimerBase((WebKit::WebSWRegistrationStore *)((char *)this + 32));
  int v6 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v5);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  void *v8;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 11);
  if (v3) {
    WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::deallocateTable(v3, a2);
  }
  *((void *)this + 4) = &unk_1EE9BA5F0;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WebCore::TimerBase::~TimerBase((WebKit::WebSWRegistrationStore *)((char *)this + 32));
  int v6 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v5);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);

  WTF::fastFree(this, v8);
}

uint64_t WebKit::WebSharedWorkerServerConnection::messageSenderDestinationID(WebKit::WebSharedWorkerServerConnection *this)
{
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ServiceWorkerFetchTask::*&)(void),WebKit::ServiceWorkerFetchTask*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

unsigned int *WTF::add(unsigned int *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return result;
  }
  int v3 = *(_DWORD *)(v2 + 4);
  unint64_t v4 = v3 & 0xFFFFFFFE;
  if ((v3 & 0xFFFFFFFE) == 0)
  {
    if ((v3 & 1) == 0) {
      return result;
    }
    unsigned int v14 = 1;
    goto LABEL_13;
  }
  unint64_t v5 = 0;
  unsigned int v6 = *result;
  do
  {
    unint64_t v7 = *(unsigned int *)(v2 + 4);
    if (v5 >= v7)
    {
      int v9 = 0;
    }
    else
    {
      uint64_t v8 = *(void *)(v2 + 8);
      if ((*(unsigned char *)(v2 + 16) & 4) != 0) {
        int v9 = *(unsigned __int8 *)(v8 + v5);
      }
      else {
        int v9 = *(unsigned __int16 *)(v8 + 2 * v5);
      }
    }
    unint64_t v10 = v5 + 1;
    if (v5 + 1 >= v7)
    {
      int v12 = 0;
    }
    else
    {
      uint64_t v11 = *(void *)(v2 + 8);
      if ((*(unsigned char *)(v2 + 16) & 4) != 0) {
        int v12 = *(unsigned __int8 *)(v11 + v5 + 1);
      }
      else {
        int v12 = *(unsigned __int16 *)(v11 + 2 * v5 + 2);
      }
    }
    unsigned int v13 = (v9 << 11) ^ ((v6 + v12) << 16) ^ (v6 + v12);
    unsigned int v6 = v13 + (v13 >> 11);
    *uint64_t result = v6;
    unint64_t v5 = v10 + 1;
  }
  while (v10 + 1 < v4);
  if (v3)
  {
    unsigned int v14 = *(_DWORD *)(v2 + 4);
LABEL_13:
    if (v14 <= v4)
    {
      int v16 = 0;
    }
    else
    {
      uint64_t v15 = *(void *)(v2 + 8);
      if ((*(unsigned char *)(v2 + 16) & 4) != 0) {
        int v16 = *(unsigned __int8 *)(v15 + v4);
      }
      else {
        int v16 = *(unsigned __int16 *)(v15 + 2 * v4);
      }
    }
    *uint64_t result = ((*result + v16) ^ ((*result + v16) << 16)) + (((*result + v16) ^ ((*result + v16) << 16)) >> 11);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::convertToDownload(WebKit::DownloadManager &,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_0,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WebKit::NetworkDataTaskClient &>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = **(void **)(a1 + 24);
  uint64_t v7 = v5[4];
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v10 = v5[6];
  uint64_t v9 = v5[7];
  uint64_t v11 = v5[5];
  int v12 = *(WebCore::ResourceRequestBase **)(a1 + 32);
  double v27 = *(WebCore::ResourceResponseBase **)(a1 + 40);
  uint64_t v13 = **(void **)(a1 + 48);
  uint64_t v14 = WTF::fastMalloc((WTF *)0x2A0);
  uint64_t v15 = (WTF::FunctionDispatcher *)(WebKit::NetworkDataTask::NetworkDataTask(v14, v6, a2, v12, 0, 0, 0) + 552);
  WTF::FunctionDispatcher::FunctionDispatcher(v15);
  *(void *)(v14 + 568) = 0;
  *(void *)uint64_t v14 = &unk_1EE9CA058;
  *(void *)(v14 + 55objc_destroyWeak(this + 2) = &unk_1EE9CA0D8;
  *(void *)(v14 + 560) = &unk_1EE9CA100;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 8), v8);
  int v16 = *(atomic_uint **)(v8 + 8);
  if (v16) {
    atomic_fetch_add(v16, 1u);
  }
  *(void *)(v14 + 576) = v16;
  *(void *)(v14 + 584) = v9;
  *(void *)(v14 + 59objc_destroyWeak(this + 2) = v10;
  *(void *)(v14 + 600) = v11;
  *(void *)(v14 + 608) = v13;
  uint64_t v17 = *(void *)(*(void *)(v8 + 128) + 8);
  if (v17) {
    uint64_t v18 = v17 - 48;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void *)(v18 + 80);
  atomic_fetch_add((atomic_uint *volatile)(v19 + 128), 1u);
  *(void *)(v14 + 616) = v19;
  *(void *)(v14 + 624) = 0;
  *(_DWORD *)(v14 + 63objc_destroyWeak(this + 2) = -1;
  *(void *)(v14 + 640) = 0;
  *(unsigned char *)(v14 + 648) = 0;
  *(unsigned char *)(v14 + 656) = 0;
  *(_DWORD *)(v14 + 664) = 1;
  uint64_t v20 = WebCore::ResourceResponseBase::expectedContentLength(v27);
  if (v20 != -1)
  {
    if (!*(unsigned char *)(v14 + 656)) {
      *(unsigned char *)(v14 + 656) = 1;
    }
    *(void *)(v14 + 648) = v20;
  }
  uint64_t v30 = *(void *)(v14 + 600);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ThreadSafeWeakPtr<WebKit::ServiceWorkerDownloadTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::ServiceWorkerDownloadTask>>,WTF::HashTableTraits>::add<WebKit::ServiceWorkerDownloadTask&>((uint64_t *)(v8 + 144), &v30, v14, (uint64_t)v29);
  uint64_t v21 = *(void *)(*(void *)(*(void *)(*(void *)(v14 + 576) + 8) + 128) + 8);
  if (v21) {
    uint64_t v22 = v21 - 48;
  }
  else {
    uint64_t v22 = 0;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v29, *(atomic_uchar *volatile **)(v22 + 72));
  IPC::Connection::addMessageReceiver((uint64_t)v29[0], (uint64_t)v15, v14 + 560, 0x8Cu, *(void *)(v14 + 600));
  uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v29);
  uint64_t v24 = *(uint64_t **)(a1 + 16);
  uint64_t v25 = *v24;
  *uint64_t v24 = v14;
  if (v25) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v25 + 8));
  }
  uint64_t v26 = **(void **)(a1 + 16);
  if (v26) {
    uint64_t result = (void *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v26 + 8));
  }
  *a3 = v26;
  return result;
}

uint64_t WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    unint64_t v4 = (WTF::StringImpl ***)(a1 + 112);
    do
    {
      if (*(v4 - 6) != (WTF::StringImpl **)-1)
      {
        std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100](v4, 0);
        unint64_t v5 = (WTF::StringImpl *)*(v4 - 1);
        *(v4 - objc_destroyWeak(this + 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
        uint64_t v6 = (WTF::StringImpl *)*(v4 - 6);
        *(v4 - 6) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, a2);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
        uint64_t v7 = *((unsigned int *)v4 - 14);
        if (v7 != -1) {
          ((void (*)(char *, WTF::StringImpl ***))off_1EE9CA330[v7])(&v10, v4 - 10);
        }
        *((_DWORD *)v4 - 14) = -1;
        uint64_t v8 = *((unsigned int *)v4 - 22);
        if (v8 != -1) {
          ((void (*)(char *, WTF::StringImpl ***))off_1EE9CA330[v8])(&v11, v4 - 14);
        }
        *((_DWORD *)v4 - 2objc_destroyWeak(this + 2) = -1;
      }
      v4 += 15;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      if (*(void *)v4 != -1)
      {
        unint64_t v5 = *(unsigned int **)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
        }
        uint64_t v6 = *(WTF::StringImpl **)v4;
        *(void *)uint64_t v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ServiceWorkerData,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64))
  {
    if (*(unsigned char *)(a1 + 64))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      WTF::URL::operator=(a1 + 16, a2 + 16);
      *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    }
  }
  else if (*(unsigned char *)(a1 + 64))
  {
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    WTF::URL::URL(a1 + 16, (uint64_t *)(a2 + 16));
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(unsigned char *)(a1 + 64) = 1;
  }
}

uint64_t std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(result + 64))
  {
    uint64_t v2 = result;
    uint64_t result = *(void *)(result + 16);
    *(void *)(v2 + 16) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *(unsigned char *)(v2 + 64) = 0;
  }
  return result;
}

WTF::StringImpl **std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100](WTF::StringImpl ***a1, WTF::StringImpl **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebSharedWorker::~WebSharedWorker(result);
    return (WTF::StringImpl **)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    for (uint64_t i = a1; ; i += 688)
    {
      int v5 = *(_DWORD *)(i + 24);
      if (v5) {
        break;
      }
      if (*(void *)i != -1) {
        goto LABEL_5;
      }
LABEL_14:
      if (!--v3) {
        return WTF::fastFree((WTF *)(a1 - 16), a2);
      }
    }
    if (v5 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::fastFree((WTF *)(a1 - 16), a2);
    }
LABEL_5:
    if (*(unsigned char *)(i + 672)) {
      WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(i + 80), (WTF::StringImpl *)a2);
    }
    uint64_t v6 = *(WTF::StringImpl **)(i + 32);
    *(void *)(i + 3objc_destroyWeak(this + 2) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = *(unsigned int *)(i + 24);
    if (v7 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9CA330[v7])(&v9, i);
    }
    *(_DWORD *)(i + 24) = -1;
    goto LABEL_14;
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::dispatch(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CA3A0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::dispatch(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CA3A0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::dispatch(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::cancel(void)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CA3C8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::cancel(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CA3C8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::cancel(void)::$_0,void>::call(uint64_t result, int *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (*(_DWORD *)(v2 + 632) != -1)
  {
    uint64_t v3 = (_DWORD *)(v2 + 632);
    uint64_t result = WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)(v2 + 632), a2);
    *uint64_t v3 = -1;
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::WebSWContextManagerConnection::CancelFetch>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  char v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v10 = 2737;
  *((void *)v10 + objc_destroyWeak(this + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,0ul,1ul,2ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, a2[1]);
  uint64_t v4 = a2[2];

  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(WTF::String const&,WebKit::SandboxExtensionHandle &&,BOOL)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CA3F0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(WTF::String const&,WebKit::SandboxExtensionHandle &&,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CA3F0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(WTF::String const&,WebKit::SandboxExtensionHandle &&,BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  v4[0] = 0;
  v4[80] = 0;
  WebKit::ServiceWorkerDownloadTask::didFailDownload(v1, (uint64_t)v4);
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(WTF::String const&,WebKit::SandboxExtensionHandle &&,BOOL)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CA418;
  uint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(WTF::String const&,WebKit::SandboxExtensionHandle &&,BOOL)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CA418;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(WTF::String const&,WebKit::SandboxExtensionHandle &&,BOOL)::$_1,void>::call(uint64_t a1, const WTF::String *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 24)
    && (uint64_t v3 = (WTF::FileSystemImpl *)(a1 + 32),
        WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)(a1 + 32), a2))
    && (WTF::FileSystemImpl::deleteFile(v3, v4) & 1) == 0
    || (uint64_t result = WTF::FileSystemImpl::openFile(), *(_DWORD *)(v2 + 632) = result, result == -1))
  {
    v7[0] = 0;
    v7[80] = 0;
    WebKit::ServiceWorkerDownloadTask::didFailDownload(v2, (uint64_t)v7);
    return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::start(void)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CA440;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::start(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CA440;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::start(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  v4[0] = 0;
  v4[80] = 0;
  WebKit::ServiceWorkerDownloadTask::didFailDownload(v1, (uint64_t)v4);
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didReceiveData(IPC::SharedBufferReference const&,unsigned long long)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CA468;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didReceiveData(IPC::SharedBufferReference const&,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CA468;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didReceiveData(IPC::SharedBufferReference const&,unsigned long long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(v1 + 640) += *(void *)(a1 + 24);
  if (*(void *)(v1 + 40))
  {
    uint64_t v3 = (uint64_t *)(*(void *)(v1 + 616) + 192);
    uint64_t v9 = *(void *)(v1 + 40);
    uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3, &v9);
    if (result)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      unint64_t v6 = *(void *)(v1 + 640);
      if (*(unsigned char *)(v1 + 656)) {
        unint64_t v7 = *(void *)(v1 + 648);
      }
      else {
        unint64_t v7 = 0;
      }
      if (v7 <= v6) {
        uint64_t v8 = *(void *)(v1 + 640);
      }
      else {
        uint64_t v8 = v7;
      }
      return (uint64_t)WebKit::Download::didReceiveData((WebKit::Download *)result, v5, v6, v8);
    }
  }
  else
  {
    uint64_t result = 146;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didFinish(void)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CA490;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didFinish(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CA490;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didFinish(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(_DWORD *)(v1 + 664) = 3;
  WebKit::ServiceWorkerDownloadTask::close(v1);
  uint64_t v2 = *(void *)(v1 + 624);
  *(void *)(v1 + 624) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16) - 1;
    *(void *)(v2 + 16) = v3;
    if (!v3)
    {
      *(void *)(*(void *)(v2 + 8) + 8) = 0;
      sandbox_extension_release();
    }
    WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v2);
  }
  if (*(void *)(v1 + 40))
  {
    uint64_t v4 = (uint64_t *)(*(void *)(v1 + 616) + 192);
    uint64_t v12 = *(WTF::StringImpl **)(v1 + 40);
    uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4, &v12);
    if (result) {
      uint64_t result = WebKit::Download::didFinish((WebKit::Download *)result);
    }
    uint64_t v6 = *(void *)(v1 + 24);
    if (v6)
    {
      unint64_t v7 = *(WebKit::NetworkDataTaskClient **)(v6 + 8);
      if (v7)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        WTF::URL::invalidate((WTF::URL *)&v13);
        CFTypeRef cf = 0;
        v14[0] = 0;
        *(void *)((char *)v14 + 6) = 0;
        char v16 = 1;
        WebKit::NetworkDataTaskClient::didCompleteWithError(v7, (const WebCore::ResourceError *)&v12);
        CFTypeRef v9 = cf;
        CFTypeRef cf = 0;
        if (v9) {
          CFRelease(v9);
        }
        char v10 = (WTF::StringImpl *)v14[0];
        v14[0] = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v8);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
        char v11 = v13;
        uint64_t v13 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, v8);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
        }
        uint64_t result = (uint64_t)v12;
        uint64_t v12 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  else
  {
    uint64_t result = 146;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didFailDownload(std::optional<WebCore::ResourceError> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CA4B8;
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 3), a2);
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didFailDownload(std::optional<WebCore::ResourceError> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CA4B8;
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 24, a2);
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 8));
  }

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didFailDownload(std::optional<WebCore::ResourceError> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (*(_DWORD *)(v1 + 664) != 3)
  {
    uint64_t v2 = result;
    *(_DWORD *)(v1 + 664) = 3;
    WebKit::ServiceWorkerDownloadTask::close(v1);
    uint64_t v3 = *(void *)(v1 + 624);
    *(void *)(v1 + 624) = 0;
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 16) - 1;
      *(void *)(v3 + 16) = v4;
      if (!v4)
      {
        *(void *)(*(void *)(v3 + 8) + 8) = 0;
        sandbox_extension_release();
      }
      WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v3);
    }
    WebKit::cancelledError((WebKit *)(v1 + 128), (uint64_t)v25);
    if (*(unsigned char *)(v2 + 104))
    {
      uint64_t v6 = (WTF::StringImpl **)(v2 + 24);
      unint64_t v7 = *(WTF::StringImpl **)(v2 + 24);
      if (v7) {
        *(_DWORD *)v7 += 2;
      }
      v32[0] = v7;
      uint64_t v8 = *(WTF::StringImpl **)(v2 + 32);
      if (v8) {
        *(_DWORD *)v8 += 2;
      }
      v32[1] = v8;
      long long v9 = *(_OWORD *)(v2 + 56);
      long long v33 = *(_OWORD *)(v2 + 40);
      long long v34 = v9;
      char v10 = *(WTF::StringImpl **)(v2 + 72);
      if (v10) {
        *(_DWORD *)v10 += 2;
      }
      uint64_t v35 = v10;
      int v36 = *(_DWORD *)(v2 + 80);
      __int16 v37 = *(_WORD *)(v2 + 84);
      char v11 = *(const void **)(v2 + 88);
      CFTypeRef v38 = v11;
      if (v11) {
        CFRetain(v11);
      }
    }
    else
    {
      long long v12 = *(_OWORD *)v25;
      v25[0] = 0;
      v25[1] = 0;
      *(_OWORD *)__int16 v32 = v12;
      long long v33 = v26;
      long long v34 = v27;
      LODWORD(v26) = v26 & 0xFFFFFFFE;
      uint64_t v35 = v28;
      int v36 = v29;
      __int16 v37 = v30;
      CFTypeRef v38 = cf;
      uint64_t v6 = v25;
      __int16 v28 = 0;
      CFTypeRef cf = 0;
    }
    char v39 = *((unsigned char *)v6 + 72);
    CFTypeRef v13 = cf;
    CFTypeRef cf = 0;
    if (v13) {
      CFRelease(v13);
    }
    uint64_t v14 = v28;
    __int16 v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v5);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t v15 = v25[1];
    v25[1] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v5);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    char v16 = v25[0];
    v25[0] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v5);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    if (*(void *)(v1 + 40))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v1 + 616) + 192);
      v25[0] = *(WTF::StringImpl **)(v1 + 40);
      uint64_t v18 = (unsigned char *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v17, v25);
      if (v18) {
        WebKit::Download::didFail(v18, (uint64_t)v32, 0, 0);
      }
      uint64_t v20 = *(void *)(v1 + 24);
      if (v20)
      {
        uint64_t v21 = *(WebKit::NetworkDataTaskClient **)(v20 + 8);
        if (v21) {
          WebKit::NetworkDataTaskClient::didCompleteWithError(v21, (const WebCore::ResourceError *)v32);
        }
      }
      CFTypeRef v22 = v38;
      CFTypeRef v38 = 0;
      if (v22) {
        CFRelease(v22);
      }
      uint64_t v23 = v35;
      uint64_t v35 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v19);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      uint64_t v24 = v32[1];
      v32[1] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v19);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      uint64_t result = (uint64_t)v32[0];
      v32[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      uint64_t result = 146;
      __break(0xC471u);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(WebKit::WebSWServerConnection &,WebKit::NetworkResourceLoader &,std::unique_ptr<WebKit::ServiceWorkerNavigationPreloader> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9CA4E0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(WebKit::WebSWServerConnection &,WebKit::NetworkResourceLoader &,std::unique_ptr<WebKit::ServiceWorkerNavigationPreloader> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CA4E0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::ServiceWorkerFetchTask *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(WebKit::WebSWServerConnection &,WebKit::NetworkResourceLoader &,std::unique_ptr<WebKit::ServiceWorkerNavigationPreloader> &&)::$_0,void>::call(WebKit::ServiceWorkerFetchTask *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(WebKit::ServiceWorkerFetchTask **)(v1 + 8);
    if (v2)
    {
      ++*(_DWORD *)v2;
      WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(v2);
      return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v2);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(WebKit::WebSWServerConnection &,WebKit::NetworkResourceLoader &,WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceRequest &&<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::SWServerRegistration &,WebKit::NetworkSession *,BOOL)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9CA508;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(WebKit::WebSWServerConnection &,WebKit::NetworkResourceLoader &,WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceRequest &&<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::SWServerRegistration &,WebKit::NetworkSession *,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CA508;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::ServiceWorkerFetchTask *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(WebKit::WebSWServerConnection &,WebKit::NetworkResourceLoader &,WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceRequest &&<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>,WebCore::SWServerRegistration &,WebKit::NetworkSession *,BOOL)::$_0,void>::call(WebKit::ServiceWorkerFetchTask *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(WebKit::ServiceWorkerFetchTask **)(v1 + 8);
    if (v2)
    {
      ++*(_DWORD *)v2;
      WebKit::ServiceWorkerFetchTask::preloadResponseIsReady(v2);
      return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v2);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::cannotHandle(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9CA530;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::cannotHandle(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CA530;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::ServiceWorkerFetchTask *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::cannotHandle(void)::$_0,void>::call(WebKit::ServiceWorkerFetchTask *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(WebKit::ServiceWorkerFetchTask **)(v1 + 8);
    if (v2)
    {
      ++*(_DWORD *)v2;
      WebKit::ServiceWorkerFetchTask::didNotHandle(v2);
      return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v2);
    }
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::SWServerRegistration>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x1997354E0]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9CA558;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CA558;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::ServiceWorkerFetchTask *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(void)::$_0,void>::call(WebKit::ServiceWorkerFetchTask *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(WebKit::ServiceWorkerFetchTask **)(v1 + 8);
    if (v2)
    {
      ++*(_DWORD *)v2;
      WebKit::ServiceWorkerFetchTask::preloadResponseIsReady(v2);
      return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v2);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadBodyFromPreloader(void)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer const,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer const>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer const>> &&,unsigned long long>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CA580;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadBodyFromPreloader(void)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer const,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer const>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer const>> &&,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CA580;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::ServiceWorkerFetchTask *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadBodyFromPreloader(void)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer const,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer const>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer const>> &&,unsigned long long>::call(WebKit::ServiceWorkerFetchTask *result, WebCore::FragmentedSharedBuffer **a2, uint64_t a3)
{
  uint64_t v3 = *((void *)result + 2);
  if (v3)
  {
    uint64_t v4 = *(WebKit::ServiceWorkerFetchTask **)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *((void *)result + 1);
      ++*(_DWORD *)v4;
      uint64_t v6 = *(void *)(v5 + 280);
      if (*(unsigned char *)(v6 + 3500))
      {
        unint64_t v7 = *(WTF::StringImpl **)(v6 + 3440);
        if (v7) {
          *(_DWORD *)v7 += 2;
        }
        uint64_t v31 = v7;
        uint64_t v8 = *(WTF::StringImpl **)(v6 + 3448);
        if (v8) {
          *(_DWORD *)v8 += 2;
        }
        __int16 v32 = v8;
        long long v9 = *(_OWORD *)(v6 + 3472);
        long long v33 = *(_OWORD *)(v6 + 3456);
        long long v34 = v9;
        char v10 = *(WTF::StringImpl **)(v6 + 3488);
        if (v10) {
          *(_DWORD *)v10 += 2;
        }
        uint64_t v35 = v10;
        int v36 = *(_DWORD *)(v6 + 3496);
        __int16 v37 = *(_WORD *)(v6 + 3500);
        char v11 = *(const void **)(v6 + 3504);
        CFTypeRef cf = v11;
        if (v11) {
          CFRetain(v11);
        }
        char v39 = *(unsigned char *)(v6 + 3512);
        WebKit::ServiceWorkerFetchTask::didFail((WebKit::ServiceWorkerFetchTask *)v5, (const WebCore::ResourceError *)&v31);
        CFTypeRef v13 = cf;
        CFTypeRef cf = 0;
        if (v13) {
          CFRelease(v13);
        }
        uint64_t v14 = v35;
        uint64_t v35 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v12);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
        long long v27 = v32;
        __int16 v32 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v12);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
        __int16 v28 = v31;
        uint64_t v31 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2) {
            WTF::StringImpl::destroy(v28, v12);
          }
          else {
            *(_DWORD *)v28 -= 2;
          }
        }
        return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v4);
      }
      uint64_t v15 = *a2;
      if (!*a2)
      {
        WebKit::ServiceWorkerFetchTask::didFinish((WebKit::ServiceWorkerFetchTask *)v5, (const WebCore::NetworkLoadMetrics *)(v6 + 3048));
        return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v4);
      }
      if (*(unsigned char *)(v5 + 289)) {
        return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v4);
      }
      WebCore::FragmentedSharedBuffer::makeContiguous((uint64_t *)&v31, *a2);
      uint64_t v18 = v31;
      if (!v31) {
        return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v4);
      }
      uint64_t v19 = *(void *)(v5 + 24);
      if (v19 && (uint64_t v20 = *(void *)(v19 + 8)) != 0)
      {
        int v22 = *(_DWORD *)(v20 - 40);
        uint64_t v21 = v20 - 40;
        *(_DWORD *)uint64_t v21 = v22 + 1;
        uint64_t v23 = *(WebCore::ContentFilter **)(v21 + 4800);
        if (v23)
        {
          int v24 = WebCore::ContentFilter::continueAfterDataReceived(v23, v18);
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v21, v25);
          if (!v24)
          {
LABEL_43:
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v18, v26);
            return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v4);
          }
        }
        else
        {
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v21, v17);
        }
      }
      else if (MEMORY[0x12C8] && (WebCore::ContentFilter::continueAfterDataReceived(MEMORY[0x12C8], v31) & 1) == 0)
      {
        goto LABEL_43;
      }
      uint64_t v31 = (WTF::StringImpl *)*((void *)v15 + 6);
      atomic_fetch_add((atomic_uint *volatile)v15, 1u);
      __int16 v32 = v15;
      *(void *)&long long v33 = 0;
      v40[0] = &v31;
      v40[1] = a3;
      WebKit::ServiceWorkerFetchTask::sendToClient<Messages::WebResourceLoader::DidReceiveData>(*(void *)(v5 + 24), (uint64_t)v40);
      int v29 = (unsigned int *)v33;
      *(void *)&long long v33 = 0;
      if (v29) {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v29);
      }
      __int16 v30 = (unsigned int *)v32;
      __int16 v32 = 0;
      if (v30) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v30, v26);
      }
      goto LABEL_43;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::convertToDownload(WebKit::DownloadManager &,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_1,void,WebCore::PolicyAction>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CA5A8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::convertToDownload(WebKit::DownloadManager &,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_1,void,WebCore::PolicyAction>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CA5A8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::convertToDownload(WebKit::DownloadManager &,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_1,void,WebCore::PolicyAction>::call(atomic_uchar *volatile **a1, int a2)
{
  uint64_t v2 = (uint64_t)a1[1];
  if (a2 == 1)
  {
    v22[0] = (uint64_t *)(v2 + 592);
    v22[1] = (uint64_t *)(v2 + 584);
    void v22[2] = (uint64_t *)(v2 + 600);
    uint64_t v3 = *(void *)(v2 + 576);
    if (!v3) {
      goto LABEL_10;
    }
    uint64_t v4 = *(void *)(v3 + 8);
    if (!v4) {
      goto LABEL_10;
    }
    uint64_t v5 = *(void *)(*(void *)(v4 + 128) + 8);
    if (v5) {
      uint64_t v6 = v5 - 48;
    }
    else {
      uint64_t v6 = 0;
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v23, *(atomic_uchar *volatile **)(v6 + 72));
    unint64_t v7 = v23;
    uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v8 = 2740;
    *((void *)v8 + objc_destroyWeak(this + 1) = 0;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    int v24 = v8;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,0ul,1ul,2ul>(v8, v22);
    int v10 = IPC::Connection::sendMessageImpl((uint64_t)v7, (uint64_t *)&v24, 0, 0);
    char v11 = v24;
    int v24 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, v9);
      WTF::fastFree(v20, v21);
    }
    a1 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v23);
    if (v10)
    {
LABEL_10:
      uint64_t v12 = WebKit::sharedServiceWorkerDownloadTaskQueue((WebKit *)a1);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v2 + 8));
      CFTypeRef v13 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
      uint64_t *v13 = (uint64_t)&unk_1EE9CA440;
      v13[1] = v2;
      void v13[2] = v2;
      v22[0] = v13;
      (*(void (**)(uint64_t, uint64_t **))(*(void *)v12 + 32))(v12, v22);
      uint64_t result = v22[0];
      v22[0] = 0;
      if (!result) {
        return result;
      }
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
    *(_DWORD *)(v2 + 664) = 0;
    char v16 = (uint64_t *)(*(void *)(v2 + 616) + 160);
    uint64_t v17 = *(void *)(v2 + 16);
    if (v17) {
      uint64_t v18 = *(void *)(v17 + 8);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (WebKit::Download *)WTF::fastMalloc((WTF *)0x1C8);
    v22[0] = (uint64_t *)WebKit::Download::Download((uint64_t)v19, (uint64_t)v16, *(void *)(v2 + 608), v2, v18);
    WebKit::DownloadManager::dataTaskBecameDownloadTask(v16, *(void *)(v2 + 608), (uint64_t *)v22);
    WebKit::Download::didCreateDestination(v19, (const WTF::String *)(v2 + 120));
    uint64_t result = v22[0];
    v22[0] = 0;
    if (result) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
  }
  else
  {
    uint64_t v15 = a1[1];
    return (uint64_t *)WebKit::ServiceWorkerDownloadTask::cancel(v15);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::start(void)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CA5D0;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::start(void)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CA5D0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::start(void)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&>::call(uint64_t result, WebKit::NetworkCache::Entry **a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(result + 8);
      int v5 = *(_DWORD *)(v3 + 16) + 1;
      *(_DWORD *)(v3 + 16) = v5;
      if (!*(unsigned char *)(v4 + 3537))
      {
        if (*a2
          && WebCore::ResourceResponseBase::source((WebKit::NetworkCache::Entry *)((char *)*a2 + 80)) != 3)
        {
          uint64_t result = (uint64_t)WebKit::ServiceWorkerNavigationPreloader::loadWithCacheEntry((WebKit::ServiceWorkerNavigationPreloader *)v4, *a2);
        }
        else
        {
          WebCore::ResourceRequestBase::setCachePolicy();
          unint64_t v7 = *a2;
          if (*a2)
          {
            *a2 = 0;
            std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v4 + 3040), v7);
            WebCore::ResourceResponseBase::httpHeaderField();
            if (v16 && *((_DWORD *)v16 + 1)) {
              WebCore::ResourceRequestBase::setHTTPHeaderField();
            }
            WebCore::ResourceResponseBase::httpHeaderField();
            long long v9 = v23;
            if (v23)
            {
              if (*((_DWORD *)v23 + 1))
              {
                WebCore::ResourceRequestBase::setHTTPHeaderField();
                long long v9 = v23;
              }
              uint64_t v23 = 0;
              if (*(_DWORD *)v9 == 2) {
                WTF::StringImpl::destroy(v9, v8);
              }
              else {
                *(_DWORD *)v9 -= 2;
              }
            }
            int v10 = v16;
            char v16 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2) {
                WTF::StringImpl::destroy(v10, v8);
              }
              else {
                *(_DWORD *)v10 -= 2;
              }
            }
          }
          uint64_t v11 = *(void *)(v4 + 32);
          if (v11 && *(void *)(v11 + 8))
          {
            uint64_t result = WebKit::ServiceWorkerNavigationPreloader::loadFromNetwork((WebKit::NetworkLoad **)v4);
          }
          else
          {
            char v16 = 0;
            uint64_t v17 = 0;
            WTF::URL::invalidate((WTF::URL *)&v17);
            uint64_t v18 = 0;
            int v19 = 0;
            __int16 v20 = 3;
            CFTypeRef cf = 0;
            char v22 = 1;
            WebKit::ServiceWorkerNavigationPreloader::didFailLoading((WebKit::ServiceWorkerNavigationPreloader *)v4, (const WebCore::ResourceError *)&v16);
            CFTypeRef v13 = cf;
            CFTypeRef cf = 0;
            if (v13) {
              CFRelease(v13);
            }
            uint64_t v14 = v18;
            uint64_t v18 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2) {
                WTF::StringImpl::destroy(v14, v12);
              }
              else {
                *(_DWORD *)v14 -= 2;
              }
            }
            uint64_t v15 = v17;
            uint64_t v17 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2) {
                WTF::StringImpl::destroy(v15, v12);
              }
              else {
                *(_DWORD *)v15 -= 2;
              }
            }
            uint64_t result = (uint64_t)v16;
            char v16 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2) {
                uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
              }
              else {
                *(_DWORD *)result -= 2;
              }
            }
          }
        }
        int v5 = *(_DWORD *)(v3 + 16);
      }
      if (v5)
      {
        *(_DWORD *)(v3 + 16) = v5 - 1;
      }
      else
      {
        uint64_t result = 286;
        __break(0xC471u);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::loadWithCacheEntry(WebKit::NetworkCache::Entry &)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CA5F8;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::loadWithCacheEntry(WebKit::NetworkCache::Entry &)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CA5F8;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::loadWithCacheEntry(WebKit::NetworkCache::Entry &)::$_0,void,WebCore::PolicyAction>::call(void *result)
{
  uint64_t v1 = result[2];
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t result = *(void **)(v1 + 8);
    if (result)
    {
      if (!*((unsigned char *)result + 3537))
      {
        uint64_t v3 = v2[1];
        if (v3)
        {
          uint64_t v4 = *(void *)(v3 + 48);
          v2[1] = 0;
          WebKit::ServiceWorkerNavigationPreloader::didReceiveBuffer((unsigned int *)result, (atomic_uint *)v3);
          uint64_t result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v3, v5);
          uint64_t v6 = v2[2];
          if (!v6 || !*(void *)(v6 + 8)) {
            return result;
          }
        }
        else
        {
          uint64_t v4 = 0;
        }
        WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v13);
        v15 |= 1u;
        uint64_t v16 = 0;
        uint64_t v17 = v4;
        if (*(unsigned char *)(*(void *)(v2[2] + 8) + 3538))
        {
          uint64_t v7 = WTF::fastMalloc((WTF *)0x68);
          *(_DWORD *)uint64_t v7 = 1;
          *(unsigned char *)(v7 + 4) = 3;
          *(_OWORD *)(v7 + 8) = 0u;
          *(_OWORD *)(v7 + 24) = 0u;
          WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v7 + 40));
          *(void *)(v7 + 7objc_destroyWeak(this + 2) = 0;
          *(void *)(v7 + 80) = 0;
          *(unsigned char *)(v7 + 96) = 0;
          *(void *)(v7 + 88) = 0;
          uint64_t v8 = v18;
          uint64_t v18 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)v7;
          if (v8) {
            WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v8);
          }
        }
        uint64_t v9 = v2[2];
        if (v9) {
          int v10 = *(WebKit::ServiceWorkerNavigationPreloader **)(v9 + 8);
        }
        else {
          int v10 = 0;
        }
        WebKit::ServiceWorkerNavigationPreloader::didFinishLoading(v10, (const WebCore::NetworkLoadMetrics *)v13);
        uint64_t v12 = v18;
        uint64_t v18 = 0;
        if (v12) {
          WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v12);
        }
        uint64_t result = v14;
        uint64_t v14 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (void *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::willSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CA620;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::willSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CA620;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::willSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::PolicyAction>::call(uint64_t a1)
{
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)v6);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v6);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v6);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    int v5 = *(WebKit::NetworkLoad ***)(v4 + 8);
    if (v5) {
      WebKit::ServiceWorkerNavigationPreloader::didComplete(v5);
    }
  }
}

WebCore::TextResourceDecoder *WTF::RefCounted<WebCore::TextResourceDecoder>::deref(WebCore::TextResourceDecoder *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::TextResourceDecoder::~TextResourceDecoder(result);
    return (WebCore::TextResourceDecoder *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(WebKit::NetworkSession &,WebCore::ServiceWorkerJobData &&,BOOL,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)>::default_delete<WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(WebKit::NetworkSession &,WebCore::ServiceWorkerJobData &&,BOOL,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&)::$_0>>,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&::Cache::RetrieveInfo const&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CA648;
  uint64_t v2 = (WebCore::ResourceRequestBase *)(a1 + 3);
  CFTypeRef v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  int v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(WebKit::NetworkSession &,WebCore::ServiceWorkerJobData &&,BOOL,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)>::default_delete<WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(WebKit::NetworkSession &,WebCore::ServiceWorkerJobData &&,BOOL,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&)::$_0>>,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&::Cache::RetrieveInfo const&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CA648;
  uint64_t v2 = (WebCore::ResourceRequestBase *)(a1 + 3);
  CFTypeRef v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  int v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }

  return WTF::fastFree((WTF *)a1, v4);
}

WTF *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(WebKit::NetworkSession &,WebCore::ServiceWorkerJobData &&,BOOL,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)>::default_delete<WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(WebKit::NetworkSession &,WebCore::ServiceWorkerJobData &&,BOOL,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&)::$_0>>,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&::Cache::RetrieveInfo const&>::call(WTF *result, WTF::StringImpl **a2)
{
  uint64_t v2 = *((void *)result + 2);
  if (v2 && *(void *)(v2 + 8))
  {
    CFTypeRef v3 = result;
    uint64_t v4 = *((void *)result + 1);
    uint64_t v5 = *(void *)(v4 + 312);
    if (v5 && *(void *)(v5 + 8))
    {
      if (*((unsigned char *)result + 224)
        || !*a2
        || WebCore::ResourceResponseBase::source((WTF::StringImpl *)((char *)*a2 + 80)) == 3)
      {
        uint64_t v7 = (uint64_t)v3 + 24;
        WebCore::ResourceRequestBase::setCachePolicy();
        uint64_t v8 = *a2;
        if (*a2)
        {
          *a2 = 0;
          std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v4 + 384), v8);
          WebCore::ResourceResponseBase::httpHeaderField();
          if (v18 && *((_DWORD *)v18 + 1)) {
            WebCore::ResourceRequestBase::setHTTPHeaderField();
          }
          WebCore::ResourceResponseBase::httpHeaderField();
          int v10 = v17;
          if (v17)
          {
            if (*((_DWORD *)v17 + 1))
            {
              WebCore::ResourceRequestBase::setHTTPHeaderField();
              int v10 = v17;
            }
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, v9);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
          uint64_t v16 = v18;
          uint64_t v18 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v9);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
        }
        return WebKit::ServiceWorkerSoftUpdateLoader::loadFromNetwork(v4, *(WebKit::NetworkSession **)(*(void *)(v4 + 312) + 8), v7);
      }
      else
      {
        char v15 = *a2;
        return WebKit::ServiceWorkerSoftUpdateLoader::loadWithCacheEntry((WebKit::ServiceWorkerSoftUpdateLoader *)v4, v15);
      }
    }
    else
    {
      uint64_t v18 = 0;
      int v19 = 0;
      WTF::URL::invalidate((WTF::URL *)&v19);
      __int16 v20 = 0;
      int v21 = 0;
      __int16 v22 = 3;
      CFTypeRef cf = 0;
      char v24 = 1;
      WebKit::ServiceWorkerSoftUpdateLoader::fail(v4, (uint64_t)&v18);
      CFTypeRef v12 = cf;
      CFTypeRef cf = 0;
      if (v12) {
        CFRelease(v12);
      }
      CFTypeRef v13 = v20;
      __int16 v20 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v11);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      uint64_t v14 = v19;
      int v19 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v11);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t result = v18;
      uint64_t v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF *)WTF::StringImpl::destroy(result, v11);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerSoftUpdateLoader::didReceiveBuffer(WebCore::FragmentedSharedBuffer const&,unsigned long long)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::call(WTF::StringImpl *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = *((void *)result + 1);
    WebCore::TextResourceDecoder::decode();
    if (*(_DWORD *)(v3 + 416) || *(void *)(v3 + 408))
    {
      if (v8)
      {
        uint64_t v6 = *((void *)v8 + 1);
        unint64_t v7 = *((unsigned int *)v8 + 1) | ((unint64_t)((*((_DWORD *)v8 + 4) >> 2) & 1) << 32);
      }
      else
      {
        uint64_t v6 = 0;
        unint64_t v7 = 0x100000000;
      }
      WTF::StringBuilder::append(v3 + 400, v6, v7);
      uint64_t result = v8;
    }
    else
    {
      WTF::String::operator=((uint64_t *)(v3 + 400), &v8);
      uint64_t result = v8;
      if (v8) {
        int v5 = *((_DWORD *)v8 + 1);
      }
      else {
        int v5 = 0;
      }
      *(_DWORD *)(v3 + 416) = v5;
    }
    uint64_t v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebSWRegistrationStore::*&)(void),WebKit::WebSWRegistrationStore*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

WebCore::ServiceWorkerRegistrationKey *WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = (WebCore::ServiceWorkerRegistrationKey *)WTF::fastMalloc((WTF *)(688 * v5 + 16));
  uint64_t v8 = result;
  uint64_t v9 = (char *)result + 16;
  if (v5)
  {
    uint64_t v10 = v5;
    uint64_t v11 = result;
    do
    {
      uint64_t result = (WebCore::ServiceWorkerRegistrationKey *)WebCore::ServiceWorkerRegistrationKey::emptyKey((uint64_t *)v11 + 2, result);
      *((unsigned char *)v11 + 96) = 0;
      *((unsigned char *)v11 + 688) = 0;
      uint64_t v11 = (WebCore::ServiceWorkerRegistrationKey *)((char *)v11 + 688);
      --v10;
    }
    while (v10);
  }
  *a1 = (uint64_t)v9;
  *((_DWORD *)v8 + 3) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v4;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = v3;
    uint64_t v38 = v2;
    while (1)
    {
      uint64_t v15 = v2 + 688 * v12;
      int v16 = *(_DWORD *)(v15 + 24);
      if (v16) {
        break;
      }
      if (*(void *)v15 != -1) {
        goto LABEL_13;
      }
LABEL_47:
      if (++v12 == v14) {
        return (WebCore::ServiceWorkerRegistrationKey *)WTF::fastFree((WTF *)(v2 - 16), v7);
      }
    }
    if (v16 != 1)
    {
      uint64_t result = (WebCore::ServiceWorkerRegistrationKey *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_51;
    }
LABEL_13:
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>((WebCore::ServiceWorkerRegistrationKey *)(v2 + 688 * v12)))
    {
      if (*(unsigned char *)(v2 + 688 * v12 + 672)) {
        WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(v2 + 688 * v12 + 80), (WTF::StringImpl *)v7);
      }
      uint64_t v17 = *(WTF::StringImpl **)(v15 + 32);
      *(void *)(v15 + 3objc_destroyWeak(this + 2) = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v7);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      uint64_t v27 = *(unsigned int *)(v15 + 24);
      if (v27 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CA330[v27])(&v42, v2 + 688 * v12);
      }
      *(_DWORD *)(v15 + 24) = -1;
    }
    else
    {
      uint64_t v18 = *a1;
      uint64_t v41 = v13;
      if (*a1) {
        int v19 = *(_DWORD *)(v18 - 8);
      }
      else {
        int v19 = 0;
      }
      unsigned int v20 = WTF::computeHash<WebCore::ServiceWorkerRegistrationKey>(v2 + 688 * v12);
      int v21 = 0;
      do
      {
        unsigned int v22 = v20 & v19;
        uint64_t v13 = v18 + 688 * (v20 & v19);
        int v24 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>((WebCore::ServiceWorkerRegistrationKey *)v13);
        unsigned int v20 = ++v21 + v22;
      }
      while (!v24);
      uint64_t v25 = v18 + 688 * v22;
      if (*(unsigned char *)(v25 + 672)) {
        WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(v18 + 688 * v22 + 80), v23);
      }
      long long v26 = *(WTF::StringImpl **)(v13 + 32);
      *(void *)(v13 + 3objc_destroyWeak(this + 2) = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v23);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
      uint64_t v28 = *(unsigned int *)(v13 + 24);
      if (v28 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CA330[v28])(&v44, v18 + 688 * v22);
      }
      int v29 = (unsigned char *)(v25 + 672);
      *(unsigned char *)uint64_t v13 = 0;
      *(_DWORD *)(v13 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v18 + 688 * v22, v15);
      __int16 v30 = (WTF::StringImpl **)(v15 + 32);
      v31.n128_f64[0] = WTF::URL::URL(v13 + 32, (uint64_t *)(v15 + 32));
      uint64_t v32 = v18 + 688 * v22;
      *(unsigned char *)(v32 + 80) = 0;
      uint64_t v33 = v32 + 80;
      *int v29 = 0;
      uint64_t v2 = v38;
      uint64_t v34 = v38 + 688 * v12;
      if (*(unsigned char *)(v34 + 672))
      {
        uint64_t v35 = (unsigned char *)(v34 + 672);
        std::construct_at[abi:sn180100]<WebCore::ServiceWorkerContextData,WebCore::ServiceWorkerContextData,WebCore::ServiceWorkerContextData*>(v33, (long long *)(v38 + 688 * v12 + 80));
        *int v29 = 1;
        if (*v35) {
          WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(v38 + 688 * v12 + 80), (WTF::StringImpl *)v7);
        }
      }
      int v36 = *v30;
      *__int16 v30 = 0;
      uint64_t v14 = v3;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v7);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
      uint64_t v37 = *(unsigned int *)(v15 + 24);
      if (v37 != -1) {
        ((void (*)(char *, uint64_t, __n128))off_1EE9CA330[v37])(&v43, v15, v31);
      }
      *(_DWORD *)(v15 + 24) = -1;
      if (v15 != a2) {
        uint64_t v13 = v41;
      }
    }
    goto LABEL_47;
  }
LABEL_51:
  if (v2) {
    return (WebCore::ServiceWorkerRegistrationKey *)WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

uint64_t WTF::computeHash<WebCore::ServiceWorkerRegistrationKey>(uint64_t a1)
{
  unsigned int v3 = -1640531527;
  __int16 v4 = 0;
  char v5 = 0;
  uint64_t v1 = (uint64_t *)(a1 + 32);
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v3, a1);
  WTF::add(&v3, v1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v3);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ServiceWorkerContextData,WebCore::ServiceWorkerContextData,WebCore::ServiceWorkerContextData*>(uint64_t result, long long *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    long long v4 = *a2;
    *(void *)(result + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t result = v4;
    WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(result + 24, (uint64_t)a2 + 24);
    *(void *)(v3 + 376) = *((void *)a2 + 47);
    uint64_t v5 = *((void *)a2 + 48);
    *((void *)a2 + 48) = 0;
    *(void *)(v3 + 384) = v5;
    uint64_t v6 = *((void *)a2 + 49);
    *((void *)a2 + 49) = 0;
    *(void *)(v3 + 400) = 0;
    *(void *)(v3 + 408) = 0;
    *(void *)(v3 + 39objc_destroyWeak(this + 2) = v6;
    uint64_t v7 = *((void *)a2 + 50);
    *((void *)a2 + 50) = 0;
    *(void *)(v3 + 400) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 102);
    *((_DWORD *)a2 + 10objc_destroyWeak(this + 2) = 0;
    *(_DWORD *)(v3 + 408) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 103);
    *((_DWORD *)a2 + 103) = 0;
    *(_DWORD *)(v3 + 41objc_destroyWeak(this + 2) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 104);
    *(unsigned char *)(v3 + 420) = *((unsigned char *)a2 + 420);
    *(_DWORD *)(v3 + 416) = v7;
    *(_WORD *)(v3 + 424) = *((_WORD *)a2 + 212);
    uint64_t v8 = *((void *)a2 + 54);
    *((void *)a2 + 54) = 0;
    *(void *)(v3 + 43objc_destroyWeak(this + 2) = v8;
    uint64_t v9 = *((void *)a2 + 55);
    *((void *)a2 + 55) = 0;
    *(void *)(v3 + 440) = v9;
    uint64_t v10 = *((void *)a2 + 56);
    *((void *)a2 + 56) = 0;
    *(void *)(v3 + 448) = v10;
    WTF::URL::URL(v3 + 456, (uint64_t *)a2 + 57);
    *(_DWORD *)(v3 + 496) = *((_DWORD *)a2 + 124);
    *(void *)(v3 + 517) = 0;
    *(void *)(v3 + 504) = 0;
    *(void *)(v3 + 51objc_destroyWeak(this + 2) = 0;
    uint64_t v11 = *((void *)a2 + 63);
    *((void *)a2 + 63) = 0;
    *(void *)(v3 + 504) = v11;
    LODWORD(v1objc_destroyWeak(this + 1) = *((_DWORD *)a2 + 128);
    *((_DWORD *)a2 + 128) = 0;
    *(_DWORD *)(v3 + 51objc_destroyWeak(this + 2) = v11;
    LODWORD(v1objc_destroyWeak(this + 1) = *((_DWORD *)a2 + 129);
    *((_DWORD *)a2 + 129) = 0;
    *(_DWORD *)(v3 + 516) = v11;
    LODWORD(v1objc_destroyWeak(this + 1) = *((_DWORD *)a2 + 130);
    *((_DWORD *)a2 + 130) = 0;
    *(_DWORD *)(v3 + 520) = v11;
    LOBYTE(v1objc_destroyWeak(this + 1) = *((unsigned char *)a2 + 524);
    *((unsigned char *)a2 + 524) = 0;
    *(unsigned char *)(v3 + 524) = v11;
    long long v12 = a2[33];
    long long v13 = a2[35];
    *(_OWORD *)(v3 + 544) = a2[34];
    *(_OWORD *)(v3 + 560) = v13;
    *(_OWORD *)(v3 + 528) = v12;
    *(unsigned char *)(v3 + 576) = *((unsigned char *)a2 + 576);
    uint64_t v14 = *((void *)a2 + 73);
    *((void *)a2 + 73) = 0;
    *(void *)(v3 + 584) = v14;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>(WebCore::ServiceWorkerRegistrationKey *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  WebCore::ServiceWorkerRegistrationKey::emptyKey(v7, a1);
  uint64_t v3 = WebCore::operator==((uint64_t)a1, (uint64_t)v7);
  long long v4 = v9;
  uint64_t v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  if (v8 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9CA330[v8])(&v6, v7);
  }
  return v3;
}

uint64_t WebCore::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = WebCore::operator==();
  if (result)
  {
    char v6 = *(WTF **)(a1 + 32);
    uint64_t v7 = *(const WTF::StringImpl **)(a2 + 32);
    return WTF::equal(v6, v7, v5);
  }
  return result;
}

{
  const WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  WTF *v6;
  const WTF::StringImpl *v7;
  uint64_t vars8;

  if (!WebCore::operator==()
    || !WebCore::operator==()
    || !WTF::equal(*(WTF **)(a1 + 64), *(const WTF::StringImpl **)(a2 + 64), v4))
  {
    return 0;
  }
  char v6 = *(WTF **)(a1 + 104);
  uint64_t v7 = *(const WTF::StringImpl **)(a2 + 104);

  return WTF::equal(v6, v7, v5);
}

{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  char v6 = *(void *)(a2 + 16);
  if (v5 == v6) {
    return 1;
  }
  uint64_t result = 0;
  if (v5)
  {
    if (v6) {
      return WebCore::operator==(v5, v6);
    }
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v10;
  void *v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if (v2 != *(_DWORD *)(a2 + 12)) {
    return 0;
  }
  if (memcmp(*(const void **)a1, *(const void **)a2, 4 * v2)) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 156);
  if (v5 != *(_DWORD *)(a2 + 156)) {
    return 0;
  }
  if (!v5) {
    return 1;
  }
  char v6 = *(void *)(a1 + 144);
  uint64_t v7 = *(void *)(a2 + 144);
  if (*(_DWORD *)v6 != *(_DWORD *)v7 || *(void *)(v6 + 8) != *(void *)(v7 + 8)) {
    return 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = (void *)(v7 + 24);
  long long v12 = (void *)(v6 + 24);
  while (v5 - 1 != v10)
  {
    long long v13 = *((_DWORD *)v12 - 2);
    uint64_t v14 = *((_DWORD *)v11 - 2);
    int v16 = *v12;
    v12 += 2;
    uint64_t v15 = v16;
    uint64_t v18 = *v11;
    v11 += 2;
    uint64_t v17 = v18;
    ++v10;
    if (v13 != v14 || v15 != v17) {
      return v10 >= v5;
    }
  }
  uint64_t v10 = *(unsigned int *)(a1 + 156);
  return v10 >= v5;
}

void std::__optional_storage_base<WebCore::ServiceWorkerContextData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ServiceWorkerContextData,false>>(WebCore::ServiceWorkerContextData *a1, uint64_t a2)
{
  if (*((unsigned __int8 *)a1 + 592) == *(unsigned __int8 *)(a2 + 592))
  {
    if (*((unsigned char *)a1 + 592))
    {
      WebCore::ServiceWorkerContextData::operator=((uint64_t)a1, (long long *)a2);
    }
  }
  else if (*((unsigned char *)a1 + 592))
  {
    WebCore::ServiceWorkerContextData::~ServiceWorkerContextData(a1, (WTF::StringImpl *)a2);
    *(unsigned char *)(v2 + 59objc_destroyWeak(this + 2) = 0;
  }
  else
  {
    *(unsigned char *)(std::construct_at[abi:sn180100]<WebCore::ServiceWorkerContextData,WebCore::ServiceWorkerContextData,WebCore::ServiceWorkerContextData*>((uint64_t)a1, (long long *)a2)+ 59objc_destroyWeak(this + 2) = 1;
  }
}

uint64_t WebCore::ServiceWorkerContextData::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 24, (uint64_t)a2 + 24);
  WTF::URL::operator=(a1 + 56, (uint64_t)a2 + 56);
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  WTF::URL::operator=(a1 + 104, (uint64_t)a2 + 104);
  *(_OWORD *)(a1 + 144) = a2[9];
  std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ServiceWorkerData,false>>(a1 + 160, (uint64_t)(a2 + 10));
  std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ServiceWorkerData,false>>(a1 + 232, (uint64_t)a2 + 232);
  std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ServiceWorkerData,false>>(a1 + 304, (uint64_t)(a2 + 19));
  *(void *)(a1 + 376) = *((void *)a2 + 47);
  uint64_t v6 = *((void *)a2 + 48);
  *((void *)a2 + 48) = 0;
  uint64_t v7 = *(unsigned int **)(a1 + 384);
  *(void *)(a1 + 384) = v6;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v5);
  }
  uint64_t v8 = *((void *)a2 + 49);
  *((void *)a2 + 49) = 0;
  uint64_t v9 = *(const void **)(a1 + 392);
  *(void *)(a1 + 39objc_destroyWeak(this + 2) = v8;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 412);
  if (v10) {
    WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)(a1 + 400), (WTF::StringImpl *)(*(void *)(a1 + 400) + 16 * v10));
  }
  WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt(a1 + 400, (_DWORD *)a2 + 100);
  int v11 = *((_DWORD *)a2 + 104);
  *(unsigned char *)(a1 + 420) = *((unsigned char *)a2 + 420);
  *(_DWORD *)(a1 + 416) = v11;
  *(_WORD *)(a1 + 424) = *((_WORD *)a2 + 212);
  WTF::String::operator=((uint64_t *)(a1 + 432), (uint64_t *)a2 + 54);
  WTF::String::operator=((uint64_t *)(a1 + 440), (uint64_t *)a2 + 55);
  WTF::String::operator=((uint64_t *)(a1 + 448), (uint64_t *)a2 + 56);
  WTF::URL::operator=(a1 + 456, (uint64_t)a2 + 456);
  *(_DWORD *)(a1 + 496) = *((_DWORD *)a2 + 124);
  uint64_t v12 = *((void *)a2 + 63);
  *((void *)a2 + 63) = 0;
  int v13 = *((_DWORD *)a2 + 130);
  *((_DWORD *)a2 + 130) = 0;
  char v14 = *((unsigned char *)a2 + 524);
  *((unsigned char *)a2 + 524) = 0;
  uint64_t v15 = *(WTF **)(a1 + 504);
  *(void *)(a1 + 504) = v12;
  uint64_t v16 = *((void *)a2 + 64);
  *((void *)a2 + 64) = 0;
  uint64_t v17 = (WTF::StringImpl *)*(unsigned int *)(a1 + 512);
  *(void *)(a1 + 51objc_destroyWeak(this + 2) = v16;
  *(_DWORD *)(a1 + 520) = v13;
  *(unsigned char *)(a1 + 524) = v14;
  if (v15) {
    WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v15, v17);
  }
  long long v18 = a2[33];
  long long v19 = a2[34];
  *(unsigned char *)(a1 + 560) = *((unsigned char *)a2 + 560);
  *(_OWORD *)(a1 + 528) = v18;
  *(_OWORD *)(a1 + 544) = v19;
  *(unsigned char *)(a1 + 576) = *((unsigned char *)a2 + 576);
  WTF::String::operator=((uint64_t *)(a1 + 584), (uint64_t *)a2 + 73);
  return a1;
}

{
  long long v4;
  long long v5;
  long long v6;
  void *v7;
  atomic_uint *v8;
  unsigned int *v9;
  const void *v10;
  const void *v11;
  int v12;
  long long v13;
  long long v14;
  long long v15;
  const void *v17;

  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 24, (uint64_t)a2 + 24);
  WTF::String::operator=((uint64_t *)(a1 + 56), (WTF::StringImpl **)a2 + 7);
  uint64_t v5 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v5;
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  WTF::String::operator=((uint64_t *)(a1 + 104), (WTF::StringImpl **)a2 + 13);
  uint64_t v6 = a2[8];
  *(_OWORD *)(a1 + 11objc_destroyWeak(this + 2) = a2[7];
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = a2[9];
  std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::ServiceWorkerData,false> const&>(a1 + 160, (uint64_t)(a2 + 10));
  std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::ServiceWorkerData,false> const&>(a1 + 232, (uint64_t)a2 + 232);
  std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::ServiceWorkerData,false> const&>(a1 + 304, (uint64_t)(a2 + 19));
  *(void *)(a1 + 376) = *((void *)a2 + 47);
  uint64_t v8 = (atomic_uint *)*((void *)a2 + 48);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  uint64_t v9 = *(unsigned int **)(a1 + 384);
  *(void *)(a1 + 384) = v8;
  if (v9) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v9, v7);
  }
  uint64_t v10 = (const void *)*((void *)a2 + 49);
  if (v10)
  {
    uint64_t v17 = (const void *)*((void *)a2 + 49);
    CFRetain(v10);
    uint64_t v10 = v17;
  }
  int v11 = *(const void **)(a1 + 392);
  *(void *)(a1 + 39objc_destroyWeak(this + 2) = v10;
  if (v11) {
    CFRelease(v11);
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 400), (uint64_t)(a2 + 25));
  uint64_t v12 = *((_DWORD *)a2 + 104);
  *(unsigned char *)(a1 + 420) = *((unsigned char *)a2 + 420);
  *(_DWORD *)(a1 + 416) = v12;
  *(_WORD *)(a1 + 424) = *((_WORD *)a2 + 212);
  WTF::String::operator=((uint64_t *)(a1 + 432), (WTF::StringImpl **)a2 + 54);
  WTF::String::operator=((uint64_t *)(a1 + 440), (WTF::StringImpl **)a2 + 55);
  WTF::String::operator=((uint64_t *)(a1 + 448), (WTF::StringImpl **)a2 + 56);
  WTF::String::operator=((uint64_t *)(a1 + 456), (WTF::StringImpl **)a2 + 57);
  int v13 = a2[30];
  *(_OWORD *)(a1 + 464) = a2[29];
  *(_OWORD *)(a1 + 480) = v13;
  *(_DWORD *)(a1 + 496) = *((_DWORD *)a2 + 124);
  WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(a1 + 504, (uint64_t *)a2 + 63);
  uint64_t v15 = a2[33];
  char v14 = a2[34];
  *(unsigned char *)(a1 + 560) = *((unsigned char *)a2 + 560);
  *(_OWORD *)(a1 + 528) = v15;
  *(_OWORD *)(a1 + 544) = v14;
  *(unsigned char *)(a1 + 576) = *((unsigned char *)a2 + 576);
  WTF::String::operator=((uint64_t *)(a1 + 584), (WTF::StringImpl **)a2 + 73);
  return a1;
}

WebCore::ServiceWorkerContextData *WebCore::ServiceWorkerContextData::ServiceWorkerContextData(WebCore::ServiceWorkerContextData *this, const WebCore::ServiceWorkerContextData *a2)
{
  long long v4 = *(_OWORD *)a2;
  *((void *)this + objc_destroyWeak(this + 2) = *((void *)a2 + 2);
  *(_OWORD *)this = v4;
  WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)this + 24, (uint64_t)a2 + 24);
  *((void *)this + 47) = *((void *)a2 + 47);
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 48);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t v6 = (const void *)*((void *)a2 + 49);
  *((void *)this + 48) = v5;
  *((void *)this + 49) = v6;
  if (v6) {
    CFRetain(v6);
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 400, (uint64_t *)a2 + 50);
  int v7 = *((_DWORD *)a2 + 104);
  *((unsigned char *)this + 420) = *((unsigned char *)a2 + 420);
  *((_DWORD *)this + 104) = v7;
  *((_WORD *)this + 21objc_destroyWeak(this + 2) = *((_WORD *)a2 + 212);
  uint64_t v8 = (_DWORD *)*((void *)a2 + 54);
  if (v8) {
    *v8 += 2;
  }
  *((void *)this + 54) = v8;
  uint64_t v9 = (_DWORD *)*((void *)a2 + 55);
  if (v9) {
    *v9 += 2;
  }
  *((void *)this + 55) = v9;
  uint64_t v10 = (_DWORD *)*((void *)a2 + 56);
  if (v10) {
    *v10 += 2;
  }
  *((void *)this + 56) = v10;
  int v11 = (_DWORD *)*((void *)a2 + 57);
  if (v11) {
    *v11 += 2;
  }
  *((void *)this + 57) = v11;
  long long v12 = *((_OWORD *)a2 + 30);
  *((_OWORD *)this + 29) = *((_OWORD *)a2 + 29);
  *((_OWORD *)this + 30) = v12;
  *((_DWORD *)this + 124) = *((_DWORD *)a2 + 124);
  WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)this + 504, (uint64_t *)a2 + 63);
  long long v13 = *((_OWORD *)a2 + 33);
  long long v14 = *((_OWORD *)a2 + 35);
  *((_OWORD *)this + 34) = *((_OWORD *)a2 + 34);
  *((_OWORD *)this + 35) = v14;
  *((_OWORD *)this + 33) = v13;
  *((unsigned char *)this + 576) = *((unsigned char *)a2 + 576);
  uint64_t v15 = (_DWORD *)*((void *)a2 + 73);
  if (v15) {
    *v15 += 2;
  }
  *((void *)this + 73) = v15;
  return this;
}

uint64_t WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 13) = 0;
  unsigned int v3 = *((_DWORD *)a2 + 2);
  if (v3) {
    BOOL v4 = *((_DWORD *)a2 + 3) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = a2;
    uint64_t Table = WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::allocateTable(v3);
    *(void *)a1 = Table;
    *(void *)(a1 + 8) = v5[1];
    unint64_t v7 = (~(Table << 32) + Table) ^ ((unint64_t)(~(Table << 32) + Table) >> 22);
    unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    *(_DWORD *)(a1 + 16) = (v9 >> 31) ^ v9;
    *(unsigned char *)(a1 + 20) = *((unsigned char *)v5 + 20);
    if (*((_DWORD *)v5 + 2))
    {
      unint64_t v10 = 0;
      uint64_t v37 = v5;
      do
      {
        uint64_t v11 = *v5;
        uint64_t v12 = *v5 + 96 * v10;
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v12) & 1) == 0)
        {
          long long v13 = *(WTF::StringImpl **)v12;
          if (*(void *)v12) {
            *(_DWORD *)v13 += 2;
          }
          uint64_t v38 = v13;
          long long v14 = *(_OWORD *)(v12 + 24);
          long long v39 = *(_OWORD *)(v12 + 8);
          long long v40 = v14;
          uint64_t v15 = *(atomic_uint **)(v11 + 96 * v10 + 40);
          if (v15) {
            atomic_fetch_add(v15, 1u);
          }
          uint64_t v41 = (unsigned int *)v15;
          uint64_t v16 = *(WTF::StringImpl **)(v11 + 96 * v10 + 48);
          if (v16) {
            *(_DWORD *)v16 += 2;
          }
          char v42 = v16;
          uint64_t v17 = v11 + 96 * v10;
          long long v18 = *(_OWORD *)(v17 + 72);
          long long v43 = *(_OWORD *)(v17 + 56);
          long long v44 = v18;
          long long v19 = *(WTF::StringImpl **)(v17 + 88);
          if (v19) {
            *(_DWORD *)v19 += 2;
          }
          uint64_t v45 = v19;
          int v20 = *(_DWORD *)(a1 + 8);
          int v21 = *(_DWORD *)(a1 + 16);
          unsigned int v22 = *((_DWORD *)v38 + 4);
          if (v22 >= 0x100) {
            unsigned int v23 = v22 >> 8;
          }
          else {
            unsigned int v23 = WTF::StringImpl::hashSlowCase(v38);
          }
          int v24 = v20 - 1;
          unsigned int v25 = (v23 ^ v21) & (v20 - 1);
          long long v26 = (WTF::StringImpl **)(*(void *)a1 + 96 * v25);
          if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v26) & 1) == 0)
          {
            unsigned int v27 = 0;
            do
            {
              unsigned int v28 = *((_DWORD *)*v26 + 4);
              if (v28 >= 0x100) {
                unsigned int v29 = v28 >> 8;
              }
              else {
                unsigned int v29 = WTF::StringImpl::hashSlowCase(*v26);
              }
              unsigned int v30 = (v25 + v20 - ((v29 ^ v21) & v24)) & v24;
              if (v27 > v30)
              {
                std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>((uint64_t *)&v38, (uint64_t)v26);
                unsigned int v27 = v30;
              }
              ++v27;
              unsigned int v25 = (v25 + 1) & v24;
              long long v26 = (WTF::StringImpl **)(*(void *)a1 + 96 * v25);
            }
            while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v26));
          }
          WTF::GenericHashTraits<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>::assignToEmpty<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>((uint64_t)v26, (uint64_t)&v38);
          uint64_t v32 = v45;
          uint64_t v45 = 0;
          uint64_t v5 = v37;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, v31);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
          uint64_t v33 = v42;
          char v42 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, v31);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          uint64_t v34 = v41;
          uint64_t v41 = 0;
          if (v34) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v34, v31);
          }
          uint64_t v35 = v38;
          uint64_t v38 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2) {
              WTF::StringImpl::destroy(v35, v31);
            }
            else {
              *(_DWORD *)v35 -= 2;
            }
          }
        }
        ++v10;
      }
      while (v10 < *((unsigned int *)v5 + 2));
    }
  }
  return a1;
}

__n128 std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::ServiceWorkerData,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64))
  {
    if (*(unsigned char *)(a1 + 64))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      WTF::String::operator=((uint64_t *)(a1 + 16), (WTF::StringImpl **)(a2 + 16));
      __n128 result = *(__n128 *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(__n128 *)(a1 + 24) = result;
      *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    }
  }
  else if (*(unsigned char *)(a1 + 64))
  {
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(_DWORD **)(a2 + 16);
    if (v5) {
      *v5 += 2;
    }
    *(void *)(a1 + 16) = v5;
    __n128 result = *(__n128 *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(__n128 *)(a1 + 24) = result;
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(unsigned char *)(a1 + 64) = 1;
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  if ((unsigned int *)a2 != a1)
  {
    uint64_t v4 = a1[3];
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
        LODWORD(v4) = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct((WTF::StringImpl *)(*(void *)a1 + 16 * v5), (WTF::StringImpl *)(*(void *)a1 + 16 * v4));
      a1[3] = v5;
      LODWORD(v4) = v5;
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::ContentType const*,WebCore::ContentType const*,WebCore::ContentType*,0>(*(void *)a2, *(void *)a2 + 16 * v4, *(void *)a1);
    uint64_t v6 = a1[3];
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    if (v6 != v7)
    {
      uint64_t v8 = *(void *)a2 + 16 * v7;
      uint64_t v9 = *(void *)a1 + 16 * v6;
      uint64_t v10 = *(void *)a2 + 16 * v6;
      do
      {
        uint64_t v11 = *(_DWORD **)v10;
        if (*(void *)v10) {
          *v11 += 2;
        }
        *(void *)uint64_t v9 = v11;
        *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
        v10 += 16;
        v9 += 16;
      }
      while (v10 != v8);
    }
    a1[3] = v7;
  }
  return a1;
}

uint64_t WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(uint64_t a1, uint64_t *a2)
{
  WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)&v7, a2);
  unsigned int v3 = *(WTF **)a1;
  *(void *)a1 = v7;
  uint64_t v7 = v3;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v8;
  uint64_t v8 = v4;
  int v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v9;
  int v9 = v5;
  LOBYTE(v5) = *(unsigned char *)(a1 + 20);
  *(unsigned char *)(a1 + 20) = v10;
  char v10 = v5;
  if (v3) {
    WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)v4);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ServiceWorkerRegistrationKey>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v8 = v2;
    uint64_t v9 = v3;
    int v5 = result;
    do
    {
      __n128 result = (WTF::StringImpl *)*((void *)v5 + 4);
      *((void *)v5 + 4) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v6 = *((unsigned int *)v5 + 6);
      if (v6 != -1) {
        __n128 result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl *))off_1EE9CA330[v6])(&v7, v5);
      }
      *((_DWORD *)v5 + 6) = -1;
      int v5 = (WTF::StringImpl *)((char *)v5 + 72);
    }
    while (v5 != a2);
  }
  return result;
}

unint64_t WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::isEmptyOrDeletedBucket(WebCore::ServiceWorkerRegistrationKey *a1)
{
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>(a1)) {
    return 1;
  }
  int v3 = *((_DWORD *)a1 + 6);
  if (!v3) {
    return *(void *)a1 == -1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v4 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v5, v6);
}

unint64_t WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
      JUMPOUT(0x198C3ED78);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 72 * *(unsigned int *)(a1 + 12));
    int v5 = 72 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(72 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::ServiceWorkerRegistrationKey>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ServiceWorkerRegistrationKey>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v13 = v3;
    uint64_t v14 = v4;
    uint64_t v6 = a3 + 32;
    unint64_t v7 = (uint64_t *)((char *)result + 32);
    do
    {
      *(unsigned char *)(v6 - 3objc_destroyWeak(this + 2) = 0;
      *(_DWORD *)(v6 - 8) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v6 - 32, (uint64_t)(v7 - 4));
      v9.n128_f64[0] = WTF::URL::URL(v6, v7);
      __n128 result = (WTF::StringImpl *)*v7;
      *unint64_t v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v10 = *((unsigned int *)v7 - 2);
      if (v10 != -1) {
        __n128 result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *, __n128))off_1EE9CA330[v10])(&v12, v7 - 4, v9);
      }
      *((_DWORD *)v7 - objc_destroyWeak(this + 2) = -1;
      v6 += 72;
      uint64_t v11 = v7 + 5;
      v7 += 9;
    }
    while (v11 != (uint64_t *)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerContextData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 592 * *(unsigned int *)(a1 + 12);
  long long v5 = *(_OWORD *)v3;
  *(void *)(v4 + 16) = *(void *)(v3 + 16);
  *(_OWORD *)uint64_t v4 = v5;
  WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(v4 + 24, v3 + 24);
  *(void *)(v4 + 376) = *(void *)(v3 + 376);
  uint64_t v6 = *(void *)(v3 + 384);
  *(void *)(v3 + 384) = 0;
  *(void *)(v4 + 384) = v6;
  uint64_t v7 = *(void *)(v3 + 392);
  *(void *)(v3 + 39objc_destroyWeak(this + 2) = 0;
  *(void *)(v4 + 400) = 0;
  *(void *)(v4 + 408) = 0;
  *(void *)(v4 + 39objc_destroyWeak(this + 2) = v7;
  uint64_t v8 = *(void *)(v3 + 400);
  *(void *)(v3 + 400) = 0;
  *(void *)(v4 + 400) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 408);
  *(_DWORD *)(v3 + 408) = 0;
  *(_DWORD *)(v4 + 408) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 412);
  *(_DWORD *)(v3 + 41objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(v4 + 41objc_destroyWeak(this + 2) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 416);
  *(unsigned char *)(v4 + 420) = *(unsigned char *)(v3 + 420);
  *(_DWORD *)(v4 + 416) = v8;
  *(_WORD *)(v4 + 424) = *(_WORD *)(v3 + 424);
  uint64_t v9 = *(void *)(v3 + 432);
  *(void *)(v3 + 43objc_destroyWeak(this + 2) = 0;
  *(void *)(v4 + 43objc_destroyWeak(this + 2) = v9;
  uint64_t v10 = *(void *)(v3 + 440);
  *(void *)(v3 + 440) = 0;
  *(void *)(v4 + 440) = v10;
  uint64_t v11 = *(void *)(v3 + 448);
  *(void *)(v3 + 448) = 0;
  *(void *)(v4 + 448) = v11;
  WTF::URL::URL(v4 + 456, (uint64_t *)(v3 + 456));
  *(_DWORD *)(v4 + 496) = *(_DWORD *)(v3 + 496);
  *(void *)(v4 + 517) = 0;
  *(void *)(v4 + 504) = 0;
  *(void *)(v4 + 51objc_destroyWeak(this + 2) = 0;
  uint64_t v12 = *(void *)(v3 + 504);
  *(void *)(v3 + 504) = 0;
  *(void *)(v4 + 504) = v12;
  LODWORD(v1objc_destroyWeak(this + 2) = *(_DWORD *)(v3 + 512);
  *(_DWORD *)(v3 + 51objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(v4 + 51objc_destroyWeak(this + 2) = v12;
  LODWORD(v1objc_destroyWeak(this + 2) = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = 0;
  *(_DWORD *)(v4 + 516) = v12;
  LODWORD(v1objc_destroyWeak(this + 2) = *(_DWORD *)(v3 + 520);
  *(_DWORD *)(v3 + 520) = 0;
  *(_DWORD *)(v4 + 520) = v12;
  LOBYTE(v1objc_destroyWeak(this + 2) = *(unsigned char *)(v3 + 524);
  *(unsigned char *)(v3 + 524) = 0;
  *(unsigned char *)(v4 + 524) = v12;
  long long v13 = *(_OWORD *)(v3 + 528);
  long long v14 = *(_OWORD *)(v3 + 560);
  *(_OWORD *)(v4 + 544) = *(_OWORD *)(v3 + 544);
  *(_OWORD *)(v4 + 560) = v14;
  *(_OWORD *)(v4 + 528) = v13;
  *(unsigned char *)(v4 + 576) = *(unsigned char *)(v3 + 576);
  uint64_t v15 = *(void *)(v3 + 584);
  *(void *)(v3 + 584) = 0;
  *(void *)(v4 + 584) = v15;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 592 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6EB3E5)
    {
      __break(0xC471u);
      JUMPOUT(0x198C3F124);
    }
    unint64_t v3 = *(long long **)a1;
    uint64_t v4 = (long long *)(*(void *)a1 + 592 * *(unsigned int *)(a1 + 12));
    unsigned int v5 = 592 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(592 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x250;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::ServiceWorkerContextData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(long long **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::ServiceWorkerContextData>::move(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v5 = a1;
    do
    {
      long long v6 = *v5;
      *(void *)(a3 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a3 = v6;
      WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(a3 + 24, (uint64_t)v5 + 24);
      *(void *)(a3 + 376) = *((void *)v5 + 47);
      uint64_t v7 = *((void *)v5 + 48);
      *((void *)v5 + 48) = 0;
      *(void *)(a3 + 384) = v7;
      uint64_t v8 = *((void *)v5 + 49);
      *((void *)v5 + 49) = 0;
      *(void *)(a3 + 400) = 0;
      *(void *)(a3 + 408) = 0;
      *(void *)(a3 + 39objc_destroyWeak(this + 2) = v8;
      uint64_t v9 = *((void *)v5 + 50);
      *((void *)v5 + 50) = 0;
      *(void *)(a3 + 400) = v9;
      LODWORD(v9) = *((_DWORD *)v5 + 102);
      *((_DWORD *)v5 + 10objc_destroyWeak(this + 2) = 0;
      *(_DWORD *)(a3 + 408) = v9;
      LODWORD(v9) = *((_DWORD *)v5 + 103);
      *((_DWORD *)v5 + 103) = 0;
      *(_DWORD *)(a3 + 41objc_destroyWeak(this + 2) = v9;
      LODWORD(v9) = *((_DWORD *)v5 + 104);
      *(unsigned char *)(a3 + 420) = *((unsigned char *)v5 + 420);
      *(_DWORD *)(a3 + 416) = v9;
      *(_WORD *)(a3 + 424) = *((_WORD *)v5 + 212);
      uint64_t v10 = *((void *)v5 + 54);
      *((void *)v5 + 54) = 0;
      *(void *)(a3 + 43objc_destroyWeak(this + 2) = v10;
      uint64_t v11 = *((void *)v5 + 55);
      *((void *)v5 + 55) = 0;
      *(void *)(a3 + 440) = v11;
      uint64_t v12 = *((void *)v5 + 56);
      *((void *)v5 + 56) = 0;
      *(void *)(a3 + 448) = v12;
      WTF::URL::URL(a3 + 456, (uint64_t *)v5 + 57);
      *(_DWORD *)(a3 + 496) = *((_DWORD *)v5 + 124);
      *(void *)(a3 + 517) = 0;
      *(void *)(a3 + 504) = 0;
      *(void *)(a3 + 51objc_destroyWeak(this + 2) = 0;
      uint64_t v13 = *((void *)v5 + 63);
      *((void *)v5 + 63) = 0;
      *(void *)(a3 + 504) = v13;
      LODWORD(v13) = *((_DWORD *)v5 + 128);
      *((_DWORD *)v5 + 128) = 0;
      *(_DWORD *)(a3 + 51objc_destroyWeak(this + 2) = v13;
      LODWORD(v13) = *((_DWORD *)v5 + 129);
      *((_DWORD *)v5 + 129) = 0;
      *(_DWORD *)(a3 + 516) = v13;
      LODWORD(v13) = *((_DWORD *)v5 + 130);
      *((_DWORD *)v5 + 130) = 0;
      *(_DWORD *)(a3 + 520) = v13;
      LOBYTE(v13) = *((unsigned char *)v5 + 524);
      *((unsigned char *)v5 + 524) = 0;
      *(unsigned char *)(a3 + 524) = v13;
      long long v14 = v5[33];
      long long v15 = v5[35];
      *(_OWORD *)(a3 + 544) = v5[34];
      *(_OWORD *)(a3 + 560) = v15;
      *(_OWORD *)(a3 + 528) = v14;
      *(unsigned char *)(a3 + 576) = *((unsigned char *)v5 + 576);
      uint64_t v16 = *((void *)v5 + 73);
      *((void *)v5 + 73) = 0;
      *(void *)(a3 + 584) = v16;
      WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)v5, v17);
      v5 += 37;
      a3 += 592;
    }
    while (v5 != a2);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWRegistrationStore::updateToStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CA6C0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWRegistrationStore::updateToStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CA6C0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWRegistrationStore::updateToStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::call(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (v3
    && *(void *)(v3 + 8)
    && (uint64_t v4 = a1[1], (v5 = *(void *)(v4 + 16)) != 0)
    && (*(void *)(v5 + 8) ? (BOOL v6 = *((unsigned char *)a2 + 16) == 0) : (BOOL v6 = 1), !v6))
  {
    uint64_t v10 = *a2;
    uint64_t v19 = *a2;
    int v12 = *((_DWORD *)a2 + 2);
    uint64_t v11 = *((unsigned int *)a2 + 3);
    *a2 = 0;
    a2[1] = 0;
    int v20 = v12;
    int v21 = v11;
    if (v11)
    {
      uint64_t v13 = 40 * v11;
      uint64_t v14 = v10 + 8;
      do
      {
        uint64_t v15 = *(void *)(v4 + 16);
        if (v15 && (uint64_t v16 = *(_DWORD **)(v15 + 8)) != 0)
        {
          ++*v16;
          WebCore::SWServer::didSaveWorkerScriptsToDisk();
          WTF::RefCounted<WebCore::SWServer>::deref(v16);
        }
        else
        {
          WebCore::SWServer::didSaveWorkerScriptsToDisk();
        }
        v14 += 40;
        v13 -= 40;
      }
      while (v13);
    }
    uint64_t v17 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    return WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v18);
  }
  else
  {
    uint64_t v7 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

unsigned int *WTF::VectorDestructor<true,WebCore::ServiceWorkerScripts>::destruct(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = (WTF *)*((void *)v3 + 2);
      if (v4) {
        WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, (void *)v3[6]);
      }
      __n128 result = (unsigned int *)*((void *)v3 + 1);
      *((void *)v3 + objc_destroyWeak(this + 1) = 0;
      if (result) {
        __n128 result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
      }
      v3 += 10;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = this;
    do
    {
      uint64_t v5 = (unsigned int *)*((void *)v4 + 5);
      *((void *)v4 + 5) = 0;
      if (v5) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, a2);
      }
      BOOL v6 = *(WTF::StringImpl **)v4;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      uint64_t v4 = (WTF *)((char *)v4 + 48);
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::CheckedRef<WebKit::WebSharedWorkerServer,WTF::RawPtrTraits<WebKit::WebSharedWorkerServer>>::~CheckedRef(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  *(void *)__n128 result = 0;
  if (v1)
  {
    int v2 = *(_DWORD *)(v1 + 8);
    if (v2)
    {
      *(_DWORD *)(v1 + 8) = v2 - 1;
    }
    else
    {
      __n128 result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand()
{
  if (qword_1EB359900 && (int v0 = *(_DWORD *)(qword_1EB359900 - 4)) != 0) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v0 << (6 * *(_DWORD *)(qword_1EB359900 - 12) >= (2 * v0)));
  }
  else {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(8u);
  }
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB359900;
  if (qword_1EB359900)
  {
    int v3 = *(_DWORD *)(qword_1EB359900 - 4);
    int v4 = *(_DWORD *)(qword_1EB359900 - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  __n128 result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB359900 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *__n128 result = 0;
  *(_DWORD *)(qword_1EB359900 - 1objc_destroyWeak(this + 2) = v4;
  if (v3)
  {
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = (uint64_t *)(v2 + 16 * v7);
      uint64_t v9 = *v8;
      if (*v8 != -1)
      {
        if (v9)
        {
          if (qword_1EB359900) {
            int v12 = *(_DWORD *)(qword_1EB359900 - 8);
          }
          else {
            int v12 = 0;
          }
          unint64_t v13 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
          unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
          int v17 = 1;
          do
          {
            unsigned int v18 = v16;
            uint64_t v19 = *(void *)(qword_1EB359900 + 16 * v16);
            unsigned int v16 = (v16 + v17++) & v12;
          }
          while (v19);
          int v20 = (uint64_t *)(qword_1EB359900 + 16 * v18);
          int v21 = (unsigned int *)v20[1];
          v20[1] = 0;
          if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v21);
            WTF::fastFree((WTF *)v21, v6);
          }
          *int v20 = *v8;
          uint64_t v22 = v2 + 16 * v7;
          uint64_t v23 = *(void *)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          v20[1] = v23;
          uint64_t v11 = *(atomic_uint **)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          if (!v11 || atomic_fetch_add(v11, 0xFFFFFFFF) != 1) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v10 = v2 + 16 * v7;
          uint64_t v11 = *(atomic_uint **)(v10 + 8);
          *(void *)(v10 + 8) = 0;
          if (!v11 || atomic_fetch_add(v11, 0xFFFFFFFF) != 1) {
            goto LABEL_18;
          }
        }
        atomic_store(1u, (unsigned int *)v11);
        WTF::fastFree((WTF *)v11, v6);
      }
LABEL_18:
      if (++v7 == v3) {
        goto LABEL_25;
      }
    }
  }
  if (v2)
  {
LABEL_25:
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::expand(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::rehash(uint64_t *a1, unsigned int a2, void **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      unint64_t v13 = (void **)(v6 + 8 * v11);
      uint64_t v10 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        uint64_t v14 = *a1;
        if (*a1) {
          unsigned int v15 = *(_DWORD *)(v14 - 8);
        }
        else {
          unsigned int v15 = 0;
        }
        unsigned int v20 = -1640531527;
        __int16 v21 = 0;
        char v22 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v20, v10);
        int v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
        int v17 = 0;
        do
        {
          uint64_t v18 = v16 & v15;
          int v16 = ++v17 + v18;
        }
        while (*(void *)(v14 + 8 * v18));
        *(void *)(v14 + 8 * v18) = *v13;
        if (v13 == a3) {
          uint64_t v12 = v14 + 8 * v18;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WebKit::WebSharedWorker::Object>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v14 = -1640531527;
  __int16 v15 = 0;
  char v16 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v14, a2);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v14);
  for (i = 0; ; int v6 = i + v8)
  {
    uint64_t v8 = v6 & v5;
    uint64_t v9 = *(uint64_t **)(v2 + 8 * v8);
    if (v9 == (uint64_t *)-1) {
      goto LABEL_9;
    }
    if (!v9) {
      break;
    }
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    if (v11 == *a2 && v10 == a2[1]) {
      return v2 + 8 * v8;
    }
LABEL_9:
    ++i;
  }
  if (!*a1) {
    return 0;
  }
  return *a1 + 8 * *(unsigned int *)(*a1 - 4);
}

uint64_t WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(120 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2)
  {
    uint64_t v11 = a2;
    uint64_t v12 = v7 + 80;
    do
    {
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 3objc_destroyWeak(this + 2) = 0u;
      *(_OWORD *)(v12 - 16) = 0u;
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 - 48) = 0u;
      *(_OWORD *)(v12 - 3objc_destroyWeak(this + 2) = 0u;
      *(_OWORD *)(v12 - 64) = 0u;
      WTF::URL::invalidate((WTF::URL *)v12);
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      v12 += 120;
      --v11;
    }
    while (v11);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v5;
    do
    {
      uint64_t v16 = v4 + 120 * v13;
      int v17 = (uint64_t *)(v16 + 64);
      if (*(void *)(v16 + 64) != -1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v4 + 120 * v13))
        {
          std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100]((WTF::StringImpl ***)(v4 + 120 * v13 + 112), 0);
          uint64_t v18 = *(WTF::StringImpl **)(v16 + 104);
          *(void *)(v16 + 104) = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v8);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
          unsigned int v28 = (WTF::StringImpl *)*v17;
          uint64_t *v17 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v8);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          uint64_t v30 = *(unsigned int *)(v16 + 56);
          if (v30 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9CA330[v30])(&v45, v16 + 32);
          }
          *(_DWORD *)(v16 + 56) = -1;
          uint64_t v31 = *(unsigned int *)(v16 + 24);
          if (v31 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9CA330[v31])(&v46, v4 + 120 * v13);
          }
          *(_DWORD *)(v16 + 24) = -1;
        }
        else
        {
          uint64_t v19 = *a1;
          uint64_t v44 = v14;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          unsigned int v51 = -1640531527;
          __int16 v52 = 0;
          char v53 = 0;
          WTF::add<WebCore::ClientOrigin,WTF::URL,WTF::String>(&v51, v4 + 120 * v13, v17, (uint64_t *)(v16 + 104));
          unsigned int v21 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v51);
          int v22 = 0;
          do
          {
            unsigned int v23 = v21 & v20;
            uint64_t v14 = v19 + 120 * (v21 & v20);
            int v24 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v14);
            unsigned int v21 = ++v22 + v23;
          }
          while (!v24);
          unsigned int v25 = (WTF::StringImpl ***)(v19 + 120 * v23 + 112);
          std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100](v25, 0);
          unsigned int v27 = *(WTF::StringImpl **)(v14 + 104);
          *(void *)(v14 + 104) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v26);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          unsigned int v29 = *(WTF::StringImpl **)(v14 + 64);
          *(void *)(v14 + 64) = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v26);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          uint64_t v32 = *(unsigned int *)(v14 + 56);
          if (v32 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9CA330[v32])(&v49, v14 + 32);
          }
          *(_DWORD *)(v14 + 56) = -1;
          uint64_t v33 = *(unsigned int *)(v14 + 24);
          if (v33 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9CA330[v33])(&v50, v14);
          }
          *(unsigned char *)uint64_t v14 = 0;
          *(_DWORD *)(v14 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v14, v4 + 120 * v13);
          *(unsigned char *)(v14 + 3objc_destroyWeak(this + 2) = 0;
          *(_DWORD *)(v14 + 56) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v14 + 32, v16 + 32);
          WTF::URL::URL(v14 + 64, v17);
          uint64_t v34 = *(void *)(v16 + 104);
          *(void *)(v16 + 104) = 0;
          *(void *)(v14 + 104) = v34;
          uint64_t v35 = (WTF::StringImpl ***)(v4 + 120 * v13);
          int v36 = v35[14];
          v35 += 14;
          *uint64_t v35 = 0;
          *unsigned int v25 = v36;
          std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100](v35, 0);
          uint64_t v37 = *(WTF::StringImpl **)(v16 + 104);
          *(void *)(v16 + 104) = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2) {
              WTF::StringImpl::destroy(v37, v8);
            }
            else {
              *(_DWORD *)v37 -= 2;
            }
          }
          uint64_t v38 = (WTF::StringImpl *)*v17;
          uint64_t *v17 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2) {
              WTF::StringImpl::destroy(v38, v8);
            }
            else {
              *(_DWORD *)v38 -= 2;
            }
          }
          uint64_t v39 = *(unsigned int *)(v16 + 56);
          if (v39 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9CA330[v39])(&v47, v16 + 32);
          }
          *(_DWORD *)(v16 + 56) = -1;
          uint64_t v40 = *(unsigned int *)(v16 + 24);
          if (v40 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9CA330[v40])(&v48, v4 + 120 * v13);
          }
          *(_DWORD *)(v16 + 24) = -1;
          uint64_t v15 = v5;
          if (v16 != a3) {
            uint64_t v14 = v44;
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v14;
}

unsigned int *WTF::add<WebCore::ClientOrigin,WTF::URL,WTF::String>(unsigned int *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = a2 + 32;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, a2);
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, v7);
  WTF::add(a1, a3);

  return WTF::add(a1, a4);
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  long long v11 = 0u;
  *(_OWORD *)uint64_t v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v8 = 0u;
  WTF::URL::invalidate((WTF::URL *)v12);
  v14[1] = 0;
  uint64_t v3 = WebCore::operator==(a1, (uint64_t)&v8);
  uint64_t v4 = v14[1];
  v14[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = v12[0];
  v12[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (DWORD2(v11) != -1) {
    ((void (*)(char *, long long *))off_1EE9CA330[DWORD2(v11)])(&v7, &v10);
  }
  DWORD2(v1objc_destroyWeak(this + 1) = -1;
  if (DWORD2(v9) != -1) {
    ((void (*)(char *, long long *))off_1EE9CA330[DWORD2(v9)])(&v7, &v8);
  }
  return v3;
}

uint64_t WTF::makeString<unsigned long long,char,unsigned long long>@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = a1;
  char v7 = a2;
  unint64_t v6 = a3;
  uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((uint64_t)&v8, &v7, &v6, a4);
  if (!*a4) {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>@<X0>(uint64_t result@<X0>, char *a2@<X1>, unint64_t *a3@<X2>, void *a4@<X8>)
{
  int v5 = 0;
  unint64_t v6 = *(void *)result;
  unint64_t v7 = *(void *)result;
  do
  {
    ++v5;
    BOOL v8 = v7 > 9;
    v7 /= 0xAuLL;
  }
  while (v8);
  int v9 = 0;
  unint64_t v10 = *a3;
  unint64_t v11 = *a3;
  do
  {
    ++v9;
    BOOL v8 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v8);
  if ((v9 & 0x80000000) == 0)
  {
    int v12 = v9 + 1;
    BOOL v13 = __OFADD__(v9, 1);
    if ((v5 & 0x80000000) == 0 && !v13)
    {
      uint64_t result = (v5 + v12);
      if (!__OFADD__(v5, v12)) {
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>(result, 1, v6, *a2, v10, a4);
      }
    }
  }
  *a4 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, unint64_t a3@<X2>, char a4@<W3>, unint64_t a5@<X4>, void *a6@<X8>)
{
  int v9 = result;
  v27[4] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v11 = v27[0];
        if (v27[0])
        {
          uint64_t v12 = 0;
          uint64_t v13 = v27[0] + 20;
          *(_DWORD *)v27[0] = 2;
          *(_DWORD *)(v11 + 4) = v9;
          *(void *)(v11 + 8) = v11 + 20;
          *(_DWORD *)(v11 + 16) = 4;
          unint64_t v14 = a3;
          do
          {
            *((unsigned char *)&v27[3] + v12--) = (v14 % 0xA) | 0x30;
            BOOL v15 = v14 > 9;
            v14 /= 0xAuLL;
          }
          while (v15);
          if (v12 + 26 <= 25) {
            uint64_t result = (uint64_t)memcpy((void *)(v11 + 20), (char *)&v27[3] + v12 + 1, -v12);
          }
          unsigned int v16 = 0;
          do
          {
            ++v16;
            BOOL v15 = a3 > 9;
            a3 /= 0xAuLL;
          }
          while (v15);
          uint64_t v17 = 0;
          uint64_t v18 = (unsigned char *)(v13 + v16);
          unsigned char *v18 = a4;
          do
          {
            *((unsigned char *)&v27[3] + v17--) = (a5 % 0xA) | 0x30;
            BOOL v15 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v15);
          if (v17 + 26 <= 25) {
            uint64_t result = (uint64_t)memcpy(v18 + 1, (char *)&v27[3] + v17 + 1, -v17);
          }
        }
        goto LABEL_34;
      }
LABEL_17:
      uint64_t v11 = 0;
      goto LABEL_34;
    }
LABEL_18:
    uint64_t v11 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_34;
  }
  if (!result) {
    goto LABEL_18;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_17;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v11 = v27[0];
  if (v27[0])
  {
    uint64_t v19 = 0;
    uint64_t v20 = v27[0] + 20;
    *(_DWORD *)v27[0] = 2;
    *(_DWORD *)(v11 + 4) = v9;
    *(void *)(v11 + 8) = v11 + 20;
    *(_DWORD *)(v11 + 16) = 0;
    unint64_t v21 = a3;
    do
    {
      *((unsigned char *)&v27[3] + v19--) = (v21 % 0xA) | 0x30;
      BOOL v15 = v21 > 9;
      v21 /= 0xAuLL;
    }
    while (v15);
    if (v19 + 26 <= 25)
    {
      int v22 = (_WORD *)(v11 + 20);
      do
      {
        *v22++ = *((unsigned __int8 *)&v27[3] + v19 + 1);
        BOOL v23 = __CFADD__(v19++, 1);
      }
      while (!v23);
    }
    unsigned int v24 = 0;
    do
    {
      ++v24;
      BOOL v15 = a3 > 9;
      a3 /= 0xAuLL;
    }
    while (v15);
    uint64_t v25 = 0;
    *(_WORD *)(v20 + 2 * v24) = a4;
    do
    {
      *((unsigned char *)&v27[3] + v25--) = (a5 % 0xA) | 0x30;
      BOOL v15 = a5 > 9;
      a5 /= 0xAuLL;
    }
    while (v15);
    if (v25 + 26 <= 25)
    {
      long long v26 = (_WORD *)(v11 + 2 * v24 + 22);
      do
      {
        *v26++ = *((unsigned __int8 *)&v27[3] + v25 + 1);
        BOOL v23 = __CFADD__(v25++, 1);
      }
      while (!v23);
    }
  }
LABEL_34:
  *a6 = v11;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1,void,BOOL>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CA6E8;
  WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1::~$_1((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1,void,BOOL>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CA6E8;
  WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1::~$_1((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      if (*(void *)(v3 + 8))
      {
        uint64_t v4 = *(void *)(a1 + 8);
        int v5 = qword_1EB3585C8;
        if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v10 = *(void *)(a1 + 152);
          int v11 = 134217984;
          uint64_t v12 = v10;
          _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "WebSharedWorkerServer::requestSharedWorker: Failed to connect to existing shared worker %llu, will create a new one instead.", (uint8_t *)&v11, 0xCu);
        }
        uint64_t v6 = WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>((uint64_t *)(v4 + 48), a1 + 24);
        uint64_t v7 = *(void *)(v4 + 48);
        if (v7) {
          uint64_t v8 = v7 + 120 * *(unsigned int *)(v7 - 4);
        }
        else {
          uint64_t v8 = 0;
        }
        if (v8 == v6 || *(void *)(*(void *)(v6 + 112) + 8) != *(void *)(a1 + 152)) {
          goto LABEL_15;
        }
        if (v7)
        {
          uint64_t v9 = v7 + 120 * *(unsigned int *)(v7 - 4);
          if (v9 != v6)
          {
LABEL_13:
            if (v9 != v6) {
              WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::remove((uint64_t *)(v4 + 48), (WTF::StringImpl ***)v6);
            }
          }
        }
        else if (v6)
        {
          uint64_t v9 = 0;
          goto LABEL_13;
        }
LABEL_15:
        WebKit::WebSharedWorkerServer::requestSharedWorker(v4, a1 + 24, *(void *)(a1 + 136), *(void *)(a1 + 144), a1 + 160, (__int16 *)(a1 + 192));
      }
    }
  }
}

uint64_t WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v10 = -1640531527;
  __int16 v11 = 0;
  char v12 = 0;
  WTF::add<WebCore::ClientOrigin,WTF::URL,WTF::String>(&v10, a2, (uint64_t *)(a2 + 64), (uint64_t *)(a2 + 104));
  unsigned int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v10) & v5;
  uint64_t v7 = v2 + 120 * v6;
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v7))
  {
LABEL_7:
    if (*a1) {
      return *a1 + 120 * *(unsigned int *)(*a1 - 4);
    }
    return 0;
  }
  int v8 = 1;
  while (*(void *)(v7 + 64) == -1 || (WebCore::operator==(v7, a2) & 1) == 0)
  {
    unsigned int v6 = (v6 + v8) & v5;
    uint64_t v7 = v2 + 120 * v6;
    ++v8;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v7)) {
      goto LABEL_7;
    }
  }
  return v7;
}

WTF::StringImpl **WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::remove(uint64_t *a1, WTF::StringImpl ***a2)
{
  WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::SharedWorkerKey>,WebCore::SharedWorkerKey>((uint64_t)a2, (WTF::StringImpl *)a2);
  uint64_t result = std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100](a2 + 14, 0);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v5 = *a1;
  if (*a1) {
    int v6 = *(_DWORD *)(v5 - 12) - 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v5 - 1objc_destroyWeak(this + 2) = v6;
  uint64_t v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
    {
      return (WTF::StringImpl **)WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::rehash(a1, v9 >> 1, 0);
    }
  }
  return result;
}

WTF::StringImpl *WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::SharedWorkerKey>,WebCore::SharedWorkerKey>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  if (v5 != -1) {
    uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1EE9CA330[v5])(&v7, a1 + 32);
  }
  *(_DWORD *)(a1 + 56) = -1;
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  if (v6 != -1) {
    uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1EE9CA330[v6])(&v8, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  *(void *)(a1 + 64) = -1;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_2,void,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CA710;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_2,void,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CA710;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_2,void,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&>::call(WTF::StringImpl *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)result + 1);
  if (!v3) {
    return result;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return result;
  }
  uint64_t v5 = *((void *)result + 2);
  if (!v5) {
    return result;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6) {
    return result;
  }
  unsigned int v9 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(v6 + 8);
    BOOL v11 = *((unsigned char *)a2 + 172) == 0;
    *(_DWORD *)uint64_t v35 = 134218496;
    *(void *)&v35[4] = v10;
    __int16 v36 = 2048;
    uint64_t v37 = v6;
    __int16 v38 = 1024;
    BOOL v39 = v11;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::didFinishFetchingSharedWorkerScript sharedWorkerIdentifier=%llu, sharedWorker=%p, success=%d", v35, 0x1Cu);
  }
  char v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v12 = &unk_1EE9CA738;
  v12[1] = v4;
  v12[2] = a2;
  *(void *)uint64_t v35 = v12;
  WebKit::WebSharedWorker::forEachSharedWorkerObject(v6, v35);
  (*(void (**)(void *))(*v12 + 8))(v12);
  if (!*((unsigned char *)a2 + 172))
  {
    std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ServiceWorkerData,false>>(v6 + 368, a3);
    long long v15 = *(_OWORD *)(a3 + 80);
    long long v16 = *(_OWORD *)(a3 + 96);
    long long v17 = *(_OWORD *)(a3 + 112);
    *(_WORD *)(v6 + 496) = *(_WORD *)(a3 + 128);
    *(_OWORD *)(v6 + 464) = v16;
    *(_OWORD *)(v6 + 480) = v17;
    *(_OWORD *)(v6 + 448) = v15;
    WTF::String::operator=((uint64_t *)(v6 + 504), (uint64_t *)(a3 + 136));
    uint64_t v19 = *a2;
    *a2 = 0;
    uint64_t v20 = *(unsigned int **)(v6 + 176);
    *(void *)(v6 + 176) = v19;
    if (v20) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v20, v18);
    }
    WTF::URL::operator=(v6 + 184, (uint64_t)(a2 + 1));
    uint64_t v21 = a2[6];
    a2[6] = 0;
    int v22 = *(const void **)(v6 + 224);
    *(void *)(v6 + 224) = v21;
    if (v22) {
      CFRelease(v22);
    }
    uint64_t v23 = *(unsigned int *)(v6 + 244);
    if (v23) {
      WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)(v6 + 232), (WTF::StringImpl *)(*(void *)(v6 + 232) + 16 * v23));
    }
    WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt(v6 + 232, (_DWORD *)a2 + 14);
    int v24 = *((_DWORD *)a2 + 18);
    *(unsigned char *)(v6 + 25objc_destroyWeak(this + 2) = *((unsigned char *)a2 + 76);
    *(_DWORD *)(v6 + 248) = v24;
    *(_WORD *)(v6 + 256) = *((_WORD *)a2 + 40);
    WTF::String::operator=((uint64_t *)(v6 + 264), a2 + 11);
    WTF::String::operator=((uint64_t *)(v6 + 272), a2 + 12);
    WTF::String::operator=((uint64_t *)(v6 + 280), a2 + 13);
    WTF::String::operator=((uint64_t *)(v6 + 288), a2 + 14);
    WTF::URL::operator=(v6 + 296, (uint64_t)(a2 + 15));
    WTF::String::operator=((uint64_t *)(v6 + 336), a2 + 20);
    int v25 = *((_DWORD *)a2 + 42);
    *(_WORD *)(v6 + 348) = *((_WORD *)a2 + 86);
    *(_DWORD *)(v6 + 344) = v25;
    uint64_t v26 = a2[22];
    a2[22] = 0;
    unsigned int v27 = *(const void **)(v6 + 352);
    *(void *)(v6 + 35objc_destroyWeak(this + 2) = v26;
    if (v27) {
      CFRelease(v27);
    }
    *(unsigned char *)(v6 + 360) = *((unsigned char *)a2 + 184);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v35, (const WebCore::SecurityOriginData *)(v6 + 24));
    unsigned int v29 = (WebKit::WebSharedWorkerServerToContextConnection *)WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v4 + 32), (WTF::ASCIICaseInsensitiveHash **)v35);
    uint64_t v30 = *(WTF::StringImpl **)v35;
    *(void *)uint64_t v35 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::destroy(v30, v28);
        if (v29) {
          return WebKit::WebSharedWorker::launch((WebKit::WebSharedWorker *)v6, v29);
        }
        goto LABEL_27;
      }
      *(_DWORD *)v30 -= 2;
    }
    if (v29) {
      return WebKit::WebSharedWorker::launch((WebKit::WebSharedWorker *)v6, v29);
    }
LABEL_27:
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v35, (const WebCore::SecurityOriginData *)(v6 + 24));
    uint64_t v31 = *(void *)(v6 + 152);
    if (v31)
    {
      if (*(_DWORD *)(v31 - 12))
      {
        unint64_t v32 = *(void *)(*(void *)(v6 + 160) + 8) & 0xFFFFFFFFFFFFFF00;
        uint64_t v31 = *(void *)(*(void *)(v6 + 160) + 8);
        uint64_t v33 = 1;
        goto LABEL_33;
      }
      uint64_t v33 = 0;
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v33 = 0;
    }
    unint64_t v32 = 0;
LABEL_33:
    WebKit::WebSharedWorkerServer::createContextConnection(v4, (WTF::ASCIICaseInsensitiveHash **)v35, v32 | v31, v33);
    uint64_t result = *(WTF::StringImpl **)v35;
    *(void *)uint64_t v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v34);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  uint64_t result = (WTF::StringImpl *)WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>((uint64_t *)(v4 + 48), v6 + 24);
  uint64_t v13 = *(void *)(v4 + 48);
  if (v13)
  {
    unint64_t v14 = (WTF::StringImpl *)(v13 + 120 * *(unsigned int *)(v13 - 4));
    if (v14 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    unint64_t v14 = 0;
  }
  if (v14 != result) {
    return (WTF::StringImpl *)WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::remove((uint64_t *)(v4 + 48), (WTF::StringImpl ***)result);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::didFinishFetchingSharedWorkerScript(WebKit::WebSharedWorker &,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)::$_0,void,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,std::__1> const&>::call(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result = (IPC::Encoder *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(*(void *)(a1 + 8) + 24), a3);
  if (result)
  {
    char v7 = (WebCore::ResourceError *)(*(void *)(a1 + 16) + 112);
    return WebKit::WebSharedWorkerServerConnection::notifyWorkerObjectOfLoadCompletion(result, a2, a3, v7);
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  uint64_t v5 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v4;
  uint64_t v6 = (WTF **)(v2 + 16 * v5);
  char v9 = WTF::equal(*v6, 0, v7);
  uint64_t result = 0;
  if (v9) {
    return result;
  }
  int v11 = 1;
  while (*v6 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v6, *a2, v8) & 1) == 0)
  {
    uint64_t v5 = (v5 + v11) & v4;
    uint64_t v6 = (WTF **)(v2 + 16 * v5);
    ++v11;
    if (WTF::equal(*v6, 0, v8)) {
      return 0;
    }
  }
  uint64_t v12 = *(void *)(v2 + 16 * v5 + 8);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *(void *)(v12 + 8);
  if (v13) {
    return v13 - 8;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::WebSharedWorkerServer::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0>(WebKit::WebSharedWorkerServer::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CA760;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unsigned int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::WebSharedWorkerServer::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0>(WebKit::WebSharedWorkerServer::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CA760;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::WebSharedWorkerServer::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0>(WebKit::WebSharedWorkerServer::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  if (a2 && *a2) {
    uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3 || !*(void *)(v3 + 8)) {
    return result;
  }
  unsigned int v4 = *(void **)(v2 + 8);
  uint64_t v5 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v27 = 0;
    _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::createContextConnection should now have created a connection", v27, 2u);
  }
  uint64_t v6 = (WTF::ASCIICaseInsensitiveHash **)(v2 + 24);
  uint64_t result = (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v4 + 5, v6);
  char v7 = (const WTF::StringImpl *)result;
  uint64_t v8 = v4[5];
  if (v8)
  {
    uint64_t v9 = v8 + 8 * *(unsigned int *)(v8 - 4);
    if (v9 == result) {
      goto LABEL_12;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_12;
    }
    uint64_t v9 = 0;
  }
  if (v9 != result) {
    uint64_t result = (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(v4 + 5, (WTF::StringImpl **)result);
  }
LABEL_12:
  uint64_t v10 = v4[4];
  if (!v10
    || (int v11 = *(_DWORD *)(v10 - 8),
        unsigned int v12 = WTF::ASCIICaseInsensitiveHash::hash(*v6, v7) & v11,
        uint64_t v13 = (WTF **)(v10 + 16 * v12),
        uint64_t result = WTF::equal(*v13, 0, v14),
        (result & 1) != 0))
  {
LABEL_18:
    uint64_t v17 = v4[6];
    if (v17)
    {
      uint64_t v19 = *(unsigned int *)(v17 - 4);
      uint64_t v20 = v17 + 120 * v19;
      if (*(_DWORD *)(v17 - 12))
      {
        if (v19)
        {
          uint64_t v26 = 120 * v19;
          while (1)
          {
            uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v17);
            if ((result & 1) == 0 && *(void *)(v17 + 64) != -1) {
              break;
            }
            v17 += 120;
            v26 -= 120;
            if (!v26)
            {
              uint64_t v17 = v20;
              break;
            }
          }
          uint64_t v18 = v17;
          uint64_t v17 = v4[6];
        }
        else
        {
          uint64_t v18 = v4[6];
        }
LABEL_21:
        if (v17) {
          uint64_t v21 = v17 + 120 * *(unsigned int *)(v17 - 4);
        }
        else {
          uint64_t v21 = 0;
        }
        if (v21 == v18) {
          return result;
        }
        while (1)
        {
          WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v28, (const WebCore::SecurityOriginData *)(*(void *)(v18 + 112) + 24));
          char v24 = WTF::equal(*v6, v28, v22);
          uint64_t result = (uint64_t)v28;
          unsigned int v28 = 0;
          if (!result) {
            goto LABEL_27;
          }
          if (*(_DWORD *)result != 2) {
            break;
          }
          uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
          if (v24) {
            return WebKit::WebSharedWorkerServer::createContextConnection((uint64_t)v4, v6, 0, 0);
          }
LABEL_30:
          uint64_t v25 = v18 + 120;
          uint64_t v18 = v20;
          if (v25 != v20)
          {
            uint64_t v18 = v25;
            while (1)
            {
              uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v18);
              if ((result & 1) == 0 && *(void *)(v18 + 64) != -1) {
                break;
              }
              v18 += 120;
              if (v18 == v20)
              {
                uint64_t v18 = v20;
                break;
              }
            }
          }
          if (v18 == v21) {
            return result;
          }
        }
        *(_DWORD *)result -= 2;
LABEL_27:
        if (v24) {
          return WebKit::WebSharedWorkerServer::createContextConnection((uint64_t)v4, v6, 0, 0);
        }
        goto LABEL_30;
      }
      uint64_t v18 = v17 + 120 * v19;
    }
    else
    {
      uint64_t v18 = 0;
      LODWORD(v19) = 0;
    }
    uint64_t v20 = v17 + 120 * v19;
    goto LABEL_21;
  }
  int v16 = 1;
  while (1)
  {
    if (*v13 != (WTF *)-1)
    {
      uint64_t result = WTF::equalIgnoringASCIICase(*v13, *v6, v15);
      if (result) {
        return result;
      }
    }
    unsigned int v12 = (v12 + v16) & v11;
    uint64_t v13 = (WTF **)(v10 + 16 * v12);
    uint64_t result = WTF::equal(*v13, 0, v15);
    ++v16;
    if (result) {
      goto LABEL_18;
    }
  }
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v5;
    while (1)
    {
      unsigned int v12 = (WTF::ASCIICaseInsensitiveHash **)(v4 + 16 * v10);
      if (*v12 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v12, 0, v9))
        {
          uint64_t v13 = v4 + 16 * v10;
          unint64_t v14 = *(unsigned int **)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, v8);
          }
          long long v15 = *v12;
          void *v12 = 0;
          if (!v15) {
            goto LABEL_28;
          }
          if (*(_DWORD *)v15 == 2)
          {
LABEL_27:
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v8);
            goto LABEL_28;
          }
          *(_DWORD *)v15 -= 2;
        }
        else
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          int v18 = WTF::ASCIICaseInsensitiveHash::hash(*v12, (const WTF::StringImpl *)v8);
          int v19 = 0;
          do
          {
            uint64_t v20 = v18 & v17;
            int v21 = WTF::equal(*(WTF **)(v16 + 16 * v20), 0, v9);
            int v18 = ++v19 + v20;
          }
          while (!v21);
          uint64_t v22 = v16 + 16 * v20;
          uint64_t v23 = *(unsigned int **)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v8);
          }
          char v24 = *(WTF::StringImpl **)v22;
          *(void *)uint64_t v22 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v8);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          uint64_t v25 = *v12;
          void *v12 = 0;
          *(void *)uint64_t v22 = v25;
          uint64_t v26 = v4 + 16 * v10;
          uint64_t v27 = *(void *)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          *(void *)(v22 + 8) = v27;
          unsigned int v28 = *(unsigned int **)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          if (v28 && atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v28);
            WTF::fastFree((WTF *)v28, v8);
          }
          long long v15 = *v12;
          void *v12 = 0;
          if (!v15) {
            goto LABEL_28;
          }
          if (*(_DWORD *)v15 == 2) {
            goto LABEL_27;
          }
          *(_DWORD *)v15 -= 2;
        }
      }
LABEL_28:
      if (++v10 == v11) {
        goto LABEL_37;
      }
    }
  }
  if (v4)
  {
LABEL_37:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::begin(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(_DWORD *)(a1 - 12)) {
    return a1 + 120 * *(unsigned int *)(a1 - 4);
  }
  return WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::makeIterator(a1, a1);
}

uint64_t WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::makeIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1) {
    unsigned int v3 = *(_DWORD *)(a1 - 4);
  }
  else {
    unsigned int v3 = 0;
  }
  uint64_t v4 = a1 + 120 * v3;
  if (v4 != a2)
  {
    while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v2) & 1) != 0
         || *(void *)(v2 + 64) == -1)
    {
      v2 += 120;
      if (v2 == v4) {
        return v4;
      }
    }
  }
  return v2;
}

uint64_t WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result - 8);
    unsigned int v8 = -1640531527;
    __int16 v9 = 0;
    char v10 = 0;
    WTF::add<WebCore::ClientOrigin,WTF::URL,WTF::String>(&v8, a2, (uint64_t *)(a2 + 64), (uint64_t *)(a2 + 104));
    uint64_t v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v8) & v4;
    uint64_t v6 = v3 + 120 * v5;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v6))
    {
      return 0;
    }
    else
    {
      int v7 = 1;
      while (*(void *)(v6 + 64) == -1 || (WebCore::operator==(v6, a2) & 1) == 0)
      {
        uint64_t v5 = (v5 + v7) & v4;
        uint64_t v6 = v3 + 120 * v5;
        ++v7;
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v6)) {
          return 0;
        }
      }
      return *(void *)(v3 + 120 * v5 + 112);
    }
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(uint64_t a1, void *a2)
{
  if (a1) {
    int v3 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(a1 + 16 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  uint64_t v11 = (void *)(a1 + 16 * v9);
  uint64_t v12 = v11[1];
  v11[1] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  void *v11 = *a2;
  uint64_t v13 = a2[1];
  a2[1] = 0;
  v11[1] = v13;
  return v11;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::remove(uint64_t *a1, void *a2)
{
  if (*a1)
  {
    uint64_t v2 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v2 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    uint64_t v2 = 0;
  }
  if (v2 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return a1;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (void *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + (v3 << 7)));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v11 = v2;
    uint64_t v12 = v3;
    int v5 = result;
    do
    {
      uint64_t v6 = (WTF::StringImpl *)*((void *)v5 + 13);
      *((void *)v5 + 13) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      uint64_t result = (WTF::StringImpl *)*((void *)v5 + 8);
      *((void *)v5 + 8) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v7 = *((unsigned int *)v5 + 14);
      if (v7 != -1) {
        uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, char *))off_1EE9CA330[v7])(&v9, (char *)v5 + 32);
      }
      *((_DWORD *)v5 + 14) = -1;
      uint64_t v8 = *((unsigned int *)v5 + 6);
      if (v8 != -1) {
        uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl *))off_1EE9CA330[v8])(&v10, v5);
      }
      *((_DWORD *)v5 + 6) = -1;
      int v5 = (WTF::StringImpl *)((char *)v5 + 128);
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::removeConnection(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier> const&>::call(WTF::StringImpl *result, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a3 == **((void **)result + 1))
  {
    int v5 = (unsigned int *)*((void *)result + 2);
    uint64_t v6 = **((void **)result + 3);
    v16[0] = 0;
    int v17 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v16, v6 + 24);
    v18[0] = 0;
    int v19 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v18, v6 + 56);
    uint64_t v7 = *(WTF::StringImpl **)(v6 + 88);
    if (v7) {
      *(_DWORD *)v7 += 2;
    }
    uint64_t v20 = v7;
    long long v8 = *(_OWORD *)(v6 + 112);
    long long v21 = *(_OWORD *)(v6 + 96);
    long long v22 = v8;
    char v9 = *(WTF::StringImpl **)(v6 + 128);
    if (v9) {
      *(_DWORD *)v9 += 2;
    }
    uint64_t v23 = v9;
    uint64_t v24 = a2;
    uint64_t v25 = a3;
    uint64_t v10 = v5[3];
    if (v10 == v5[2])
    {
      uint64_t v11 = (unsigned char *)WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v10 + 1, (unint64_t)v16);
      uint64_t v12 = *(void *)v5 + ((unint64_t)v5[3] << 7);
    }
    else
    {
      uint64_t v12 = *(void *)v5 + (v10 << 7);
      uint64_t v11 = v16;
    }
    std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::pair[abi:sn180100](v12, (uint64_t)v11);
    ++v5[3];
    unint64_t v14 = v23;
    uint64_t v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t result = v20;
    uint64_t v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (v19 != -1) {
      uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))off_1EE9CA330[v19])(&v15, v18);
    }
    int v19 = -1;
    if (v17 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))off_1EE9CA330[v17])(&v15, v16);
    }
  }
  return result;
}

uint64_t std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::pair[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 32, a2 + 32);
  WTF::URL::URL(a1 + 64, (uint64_t *)(a2 + 64));
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  *(void *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 11objc_destroyWeak(this + 2) = *(_OWORD *)(a2 + 112);
  return a1;
}

unint64_t WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + ((unint64_t)a1[3] << 7) <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 25)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(a2 << 7));
      void v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        uint64_t v7 = (uint64_t)result;
        uint64_t v8 = v5 << 7;
        uint64_t v9 = (uint64_t)v4;
        do
        {
          std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::pair[abi:sn180100](v7, v9);
          unint64_t v10 = *(WTF::StringImpl **)(v9 + 104);
          *(void *)(v9 + 104) = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, v6);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
          uint64_t result = *(unsigned int **)(v9 + 64);
          *(void *)(v9 + 64) = 0;
          if (result)
          {
            if (*result == 2) {
              uint64_t result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            }
            else {
              *result -= 2;
            }
          }
          uint64_t v11 = *(unsigned int *)(v9 + 56);
          if (v11 != -1) {
            uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1EE9CA330[v11])(&v13, v9 + 32);
          }
          *(_DWORD *)(v9 + 56) = -1;
          uint64_t v12 = *(unsigned int *)(v9 + 24);
          if (v12 != -1) {
            uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1EE9CA330[v12])(&v14, v9);
          }
          *(_DWORD *)(v9 + 24) = -1;
          v7 += 128;
          v9 += 128;
          v8 -= 128;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          void v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::postErrorToWorkerObject(WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,int,int,WTF::String const&,BOOL)::$_0,void,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier> const&>::call(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t result = (IPC::Encoder *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(*(void *)(a1 + 8) + 24), a3);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(uint64_t **)(a1 + 16);
    int v9 = **(_DWORD **)(a1 + 24);
    unint64_t v10 = *(uint64_t **)(a1 + 40);
    int v11 = **(_DWORD **)(a1 + 32);
    char v12 = **(unsigned char **)(a1 + 48);
    unint64_t v31 = a2;
    uint64_t v32 = a3;
    int v29 = v11;
    int v30 = v9;
    char v13 = qword_1EB3585C8;
    if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *((void *)v7 + 6);
      WTF::makeString<unsigned long long,char,unsigned long long>(a3, 45, a2, &v28);
      WTF::String::utf8();
      if (v33) {
        uint64_t v24 = (char *)v33 + 16;
      }
      else {
        uint64_t v24 = 0;
      }
      *(_DWORD *)long long buf = 134218498;
      *(void *)&uint8_t buf[4] = v7;
      __int16 v35 = 2048;
      uint64_t v36 = v23;
      __int16 v37 = 2082;
      __int16 v38 = v24;
      _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::postErrorToWorkerObject: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
      uint64_t v26 = v33;
      uint64_t v33 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v25);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
      uint64_t v27 = v28;
      unsigned int v28 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
    uint64_t v14 = (*(uint64_t (**)(IPC::Encoder *))(*(void *)v7 + 56))(v7);
    char v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v15 = 2833;
    *((void *)v15 + objc_destroyWeak(this + 1) = v14;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 68) = 0;
    *((void *)v15 + 70) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    uint64_t v33 = v15;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v15, (uint64_t *)&v31);
    *(void *)long long buf = v32;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v15, (uint64_t *)buf);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, v8);
    uint64_t v16 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v15, &v30);
    int v17 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v16, &v29);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, v10);
    int v18 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x198C4228CLL);
    }
    unsigned char *v18 = v12;
    (*(void (**)(IPC::Encoder *, WTF **, void))(*(void *)v7 + 32))(v7, &v33, 0);
    uint64_t result = v33;
    uint64_t v33 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v20);
      return (IPC::Encoder *)WTF::fastFree(v21, v22);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSharedWorkerObjectConnection::FetchScriptInClient,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>>(WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CA7D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSharedWorkerObjectConnection::FetchScriptInClient,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>>(WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CA7D8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSharedWorkerObjectConnection::FetchScriptInClient,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>>(WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<WebCore::WorkerFetchResult>(a2, (uint64_t)&v21);
    if (v39)
    {
      IPC::Decoder::decode<WebCore::WorkerInitializationData>(a2, (uint64_t)&v67);
      char v5 = v78;
      if (v78)
      {
        if (!v39) {
          __break(1u);
        }
        long long v6 = v21;
        long long v21 = 0u;
        v40[0] = v6;
        v40[1] = v22;
        LODWORD(v2objc_destroyWeak(this + 2) = v22 & 0xFFFFFFFE;
        long long v7 = v24;
        long long v24 = 0u;
        void v40[2] = v23;
        v40[3] = v7;
        *(void *)&long long v6 = v25;
        uint64_t v25 = 0;
        uint64_t v41 = v6;
        int v42 = v26;
        char v43 = v27;
        __int16 v44 = v28;
        long long v8 = v29;
        long long v29 = 0u;
        long long v45 = v8;
        long long v9 = v30;
        long long v30 = 0u;
        long long v46 = v9;
        uint64_t v10 = v31;
        uint64_t v31 = 0;
        uint64_t v47 = v10;
        long long v48 = v32;
        long long v49 = v33;
        LODWORD(v3objc_destroyWeak(this + 2) = v32 & 0xFFFFFFFE;
        uint64_t v50 = v34;
        __int16 v52 = v36;
        int v51 = v35;
        uint64_t v11 = v37;
        uint64_t v34 = 0;
        uint64_t v37 = 0;
        uint64_t v53 = v11;
        char v54 = v38;
        LOBYTE(v55) = 0;
        char v60 = 0;
        if (v72)
        {
          long long v55 = v67;
          uint64_t v12 = v68;
          uint64_t v68 = 0;
          uint64_t v56 = v12;
          long long v57 = v69;
          long long v58 = v70;
          LODWORD(v69) = v69 & 0xFFFFFFFE;
          __int16 v59 = v71;
          char v60 = 1;
        }
        long long v61 = v73;
        long long v62 = v74;
        long long v63 = v75;
        __int16 v64 = v76;
        uint64_t v13 = v77;
        uint64_t v77 = 0;
        char v5 = 1;
        uint64_t v65 = v13;
      }
      else
      {
        LOBYTE(v40[0]) = 0;
      }
      char v66 = v5;
      std::__optional_destruct_base<WebCore::WorkerInitializationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v67, v4);
      if (v39) {
        WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v21, v15);
      }
    }
    else
    {
      LOBYTE(v40[0]) = 0;
      char v66 = 0;
    }
    if (v66
      || (int v18 = (WTF::StringImpl *)*a2, v19 = a2[1], *a2 = 0, a2[1] = 0, (v20 = a2[3]) != 0)
      && v19
      && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v20 + 16))(v20, v18), v66))
    {
      uint64_t v16 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, _OWORD *, long long *))(*(void *)v16 + 16))(v16, v40, &v55);
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      std::__optional_destruct_base<std::tuple<WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40, v17);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40, v18);
      _ZZN3IPC10Connection11cancelReplyIN8Messages31WebSharedWorkerObjectConnection19FetchScriptInClientEN3WTF17CompletionHandlerIFvON7WebCore17WorkerFetchResultEONS7_24WorkerInitializationDataEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSI_(v2);
    }
  }
  else
  {
    uint64_t v14 = (uint64_t *)(a1 + 8);
    _ZZN3IPC10Connection11cancelReplyIN8Messages31WebSharedWorkerObjectConnection19FetchScriptInClientEN3WTF17CompletionHandlerIFvON7WebCore17WorkerFetchResultEONS7_24WorkerInitializationDataEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSI_(v14);
  }
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 336))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 328);
    *(void *)(a1 + 328) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](a1 + 192, a2);
    WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)a1, v4);
  }
  return a1;
}

void _ZZN3IPC10Connection11cancelReplyIN8Messages31WebSharedWorkerObjectConnection19FetchScriptInClientEN3WTF17CompletionHandlerIFvON7WebCore17WorkerFetchResultEONS7_24WorkerInitializationDataEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSI_(uint64_t *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  v7[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v7);
  __int16 v10 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  v13[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v13);
  void v14[2] = 0;
  v14[0] = 0;
  *(void *)((char *)v14 + 6) = 0;
  char v15 = 1;
  v16[0] = 0;
  char v18 = 0;
  char v19 = 0;
  char v20 = 0;
  __int16 v21 = 0;
  long long v22 = 0;
  uint64_t v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v2 + 16))(v2, &v6, v16);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  uint64_t v4 = v22;
  long long v22 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  if (v18)
  {
    char v5 = v17;
    int v17 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v6, v3);
}

void sub_198C42DB0(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C42F4C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22)
{
  if (a22 != -1) {
    ((void (*)(char *, char *))off_1EE9CA7F0[a22])(&a18, &a19);
  }
  a22 = -1;
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C43020(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C430B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C43160(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C43314(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v6 = v3;
  long long v8 = *v6;
  *uint64_t v6 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  long long v9 = (WTF::StringImpl *)v4[13];
  v4[13] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  __int16 v10 = (WTF::StringImpl *)v4[11];
  v4[11] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  long long v11 = (WTF::StringImpl *)v4[10];
  v4[10] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  long long v12 = (WTF::StringImpl *)v4[9];
  v4[9] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = (WTF::StringImpl *)v4[8];
  unsigned char v4[8] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = *v5;
  *char v5 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  char v15 = *v2;
  *uint64_t v2 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C43778(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF *a12)
{
}

void sub_198C439C8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void sub_198C43A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C43AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C43B84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198C43DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198C43E94(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C43F64(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C440E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21)
{
  if (a20) {
    WTF::fastFree(a20, a2);
  }
  _Unwind_Resume(exception_object);
}

void API::ResourceLoadInfo::~ResourceLoadInfo(API::ResourceLoadInfo *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t vars8;

  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  JUMPOUT(0x199740C10);
}

void sub_198C442F4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198C443C4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198C446F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22)
{
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C44A84(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198C44B94(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::ResourceLoadInfo::ResourceLoadInfo(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9CA810;
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 48);
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  WTF::URL::URL(a1 + 72, (uint64_t *)a2 + 7);
  uint64_t v7 = *((void *)a2 + 12);
  *((void *)a2 + 1objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = v7;
  uint64_t v8 = *((void *)a2 + 13);
  *(_WORD *)(a1 + 128) = *((_WORD *)a2 + 56);
  *(void *)(a1 + 120) = v8;
  return a1;
}

uint64_t API::ObjectImpl<(API::Object::Type)17>::type()
{
  return 17;
}

WebKit::WebSharedWorkerServerToContextConnection *WebKit::WebSharedWorkerServerToContextConnection::WebSharedWorkerServerToContextConnection(WebKit::WebSharedWorkerServerToContextConnection *this, WebKit::NetworkConnectionToWebProcess *a2, const WebCore::RegistrableDomain *a3, WebKit::WebSharedWorkerServer *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE9CA838;
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1EE9CA890;
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 14, (uint64_t)a2 + 48);
  uint64_t v8 = (atomic_uint *)*((void *)a2 + 7);
  atomic_fetch_add(v8, 1u);
  *((void *)this + 3) = v8;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a4, (uint64_t)a4);
  long long v9 = *(atomic_uint **)a4;
  if (*(void *)a4) {
    atomic_fetch_add(v9, 1u);
  }
  *((void *)this + 4) = v9;
  __int16 v10 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v10 += 2;
  }
  *((void *)this + 5) = v10;
  *((void *)this + 6) = 0;
  WebCore::TimerBase::TimerBase((WebKit::WebSharedWorkerServerToContextConnection *)((char *)this + 56));
  *((void *)this + 7) = &unk_1EE9BA5F0;
  long long v11 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v11 = &unk_1EE9CA928;
  v11[1] = WebKit::WebSharedWorkerServerToContextConnection::idleTerminationTimerFired;
  void v11[2] = 0;
  void v11[3] = this;
  *((void *)this + 13) = v11;
  *((unsigned char *)this + 11objc_destroyWeak(this + 2) = 0;
  long long v12 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(*((void *)this + 3) + 8);
    if (v13) {
      uint64_t v14 = v13 - 48;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void *)(v14 + 264);
    int v17 = 134218240;
    char v18 = this;
    __int16 v19 = 2048;
    uint64_t v20 = v15;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::WebSharedWorkerServerToContextConnection:", (uint8_t *)&v17, 0x16u);
  }
  WebKit::WebSharedWorkerServer::addContextConnection(a4, this);
  return this;
}

WebKit::WebSharedWorkerServerToContextConnection *WebKit::WebSharedWorkerServerToContextConnection::idleTerminationTimerFired(WebKit::WebSharedWorkerServerToContextConnection *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 6);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    __break(0xC471u);
    JUMPOUT(0x198C4525CLL);
  }
  uint64_t v3 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*((void *)this + 3) + 8);
    if (v4) {
      uint64_t v5 = v4 - 48;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void *)(v5 + 264);
    int v10 = 134218240;
    long long v11 = this;
    __int16 v12 = 2048;
    uint64_t v13 = v6;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::connectionIsNoLongerNeeded:", (uint8_t *)&v10, 0x16u);
  }
  uint64_t v7 = *(void *)(*((void *)this + 3) + 8);
  if (v7) {
    uint64_t v8 = (WebKit::NetworkConnectionToWebProcess *)(v7 - 48);
  }
  else {
    uint64_t v8 = 0;
  }
  ++*((_DWORD *)v8 + 2);
  uint64_t result = WebKit::NetworkConnectionToWebProcess::sharedWorkerServerToContextConnectionIsNoLongerNeeded(v8);
  if (v7)
  {
    if (*((_DWORD *)v8 + 2) == 1) {
      return (WebKit::WebSharedWorkerServerToContextConnection *)(*(uint64_t (**)(uint64_t))(*(void *)(v7 - 48) + 8))(v7 - 48);
    }
    else {
      --*((_DWORD *)v8 + 2);
    }
  }
  return result;
}

void WebKit::WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection(WebKit::WebSharedWorkerServerToContextConnection *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*((void *)this + 3) + 8);
    if (v3) {
      uint64_t v4 = v3 - 48;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(v4 + 264);
    int v17 = 134218240;
    char v18 = this;
    __int16 v19 = 2048;
    uint64_t v20 = v5;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection:", (uint8_t *)&v17, 0x16u);
  }
  uint64_t v6 = *((void *)this + 4);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      ++*(_DWORD *)(v7 + 8);
      if ((WebKit::WebSharedWorkerServerToContextConnection *)WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v7 + 32), (WTF::ASCIICaseInsensitiveHash **)this + 5) == this)WebKit::WebSharedWorkerServer::removeContextConnection((WebKit::WebSharedWorkerServer *)v7, this); {
      int v8 = *(_DWORD *)(v7 + 8);
      }
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x198C454D4);
      }
      *(_DWORD *)(v7 + 8) = v8 - 1;
    }
  }
  *((void *)this + 7) = &unk_1EE9BA5F0;
  uint64_t v9 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WebCore::TimerBase::~TimerBase((WebKit::WebSharedWorkerServerToContextConnection *)((char *)this + 56));
  uint64_t v11 = *((void *)this + 6);
  if (v11)
  {
    uint64_t v12 = *(unsigned int *)(v11 - 4);
    if (v12)
    {
      uint64_t v13 = (void *)(v11 + 8);
      do
      {
        if (*(v13 - 1) != -1 && *v13) {
          WTF::fastFree((WTF *)(*v13 - 16), v10);
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), v10);
  }
  uint64_t v14 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v10);
  }
  uint64_t v16 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v10);
  }
  *((void *)this + objc_destroyWeak(this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v10);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection(WebKit::WebSharedWorkerServerToContextConnection *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection((WebKit::WebSharedWorkerServerToContextConnection *)((char *)this - 8));

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebSharedWorkerServerToContextConnection::messageSenderConnection(WebKit::WebSharedWorkerServerToContextConnection *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 8);
  if (v1) {
    uint64_t v2 = v1 - 48;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(void *)(v2 + 72);
}

uint64_t WebKit::WebSharedWorkerServerToContextConnection::messageSenderDestinationID(WebKit::WebSharedWorkerServerToContextConnection *this)
{
  return 0;
}

void WebKit::WebSharedWorkerServerToContextConnection::postErrorToWorkerObject(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, char a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 24) + 8);
    if (v15) {
      uint64_t v16 = v15 - 48;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void *)(v16 + 264);
    int v21 = 134218496;
    uint64_t v22 = a1;
    __int16 v23 = 2048;
    uint64_t v24 = v17;
    __int16 v25 = 2048;
    uint64_t v26 = a2;
    _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::postErrorToWorkerObject: sharedWorkerIdentifier=%llu", (uint8_t *)&v21, 0x20u);
  }
  uint64_t v18 = *(void *)(a1 + 32);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 8);
    if (v19)
    {
      ++*(_DWORD *)(v19 + 8);
      WebKit::WebSharedWorkerServer::postErrorToWorkerObject(v19, a2, a3, a4, a5, a6, a7);
      int v20 = *(_DWORD *)(v19 + 8);
      if (!v20)
      {
        __break(0xC471u);
        JUMPOUT(0x198C456C0);
      }
      *(_DWORD *)(v19 + 8) = v20 - 1;
    }
  }
}

void WebKit::WebSharedWorkerServerToContextConnection::sharedWorkerTerminated(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
    if (v5) {
      uint64_t v6 = v5 - 48;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(v6 + 264);
    int v11 = 134218496;
    uint64_t v12 = a1;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    __int16 v15 = 2048;
    uint64_t v16 = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::sharedWorkerTerminated: sharedWorkerIdentifier=%llu", (uint8_t *)&v11, 0x20u);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      ++*(_DWORD *)(v9 + 8);
      WebKit::WebSharedWorkerServer::sharedWorkerTerminated(v9, a2);
      int v10 = *(_DWORD *)(v9 + 8);
      if (!v10)
      {
        __break(0xC471u);
        JUMPOUT(0x198C457F0);
      }
      *(_DWORD *)(v9 + 8) = v10 - 1;
    }
  }
}

WTF::StringImpl *WebKit::WebSharedWorkerServerToContextConnection::launchSharedWorker(WebKit::WebSharedWorkerServerToContextConnection *this, WebKit::WebSharedWorker *a2)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*((void *)this + 3) + 8);
  uint64_t v5 = (long long *)(v4 - 48);
  if (v4) {
    uint64_t v6 = v4 - 48;
  }
  else {
    uint64_t v6 = 0;
  }
  ++*(_DWORD *)(v6 + 8);
  uint64_t v7 = *(void *)(v6 + 80);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 128), 1u);
  uint64_t v8 = *(void *)(v6 + 264);
  int v9 = *((_DWORD *)a2 + 12);
  if (v9)
  {
    if (v9 != 1) {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    int v10 = (WebCore::RegistrableDomain *)MEMORY[0x1E4F30980];
  }
  else
  {
    int v10 = (WebKit::WebSharedWorker *)((char *)a2 + 32);
  }
  WebCore::RegistrableDomain::uncheckedCreateFromHost(v10, (WTF::StringImpl **)buf);
  int v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9CA950;
  *(void *)&long long v70 = v11;
  WebKit::NetworkProcess::addAllowedFirstPartyForCookies(v7, v8, (WTF::ASCIICaseInsensitiveHash **)buf, 0, (uint64_t *)&v70);
  uint64_t v13 = v70;
  *(void *)&long long v70 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (!v14)
  {
LABEL_11:
    if (!v7) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v14, v12);
  if (!v7) {
    goto LABEL_15;
  }
LABEL_14:
  unint64_t v15 = v7 + 128;
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(v7 + 128), 0xFFFFFFFF);
  if (add == 1) {
    goto LABEL_85;
  }
  while (1)
  {
LABEL_15:
    long long v49 = v5;
    uint64_t v7 = qword_1EB3585C8;
    if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(*((void *)this + 3) + 8);
      if (v17) {
        uint64_t v18 = v17 - 48;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = *(void *)(v18 + 264);
      uint64_t v20 = *((void *)a2 + 1);
      *(_DWORD *)long long buf = 134218496;
      *(void *)&uint8_t buf[4] = this;
      __int16 v53 = 2048;
      uint64_t v54 = v19;
      __int16 v55 = 2048;
      uint64_t v56 = v20;
      _os_log_impl(&dword_1985F2000, (os_log_t)v7, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::launchSharedWorker: sharedWorkerIdentifier=%llu", buf, 0x20u);
    }
    uint64_t v5 = &v70;
    *((unsigned char *)a2 + 51objc_destroyWeak(this + 2) = 1;
    LOBYTE(v70) = 0;
    char v75 = 0;
    if (*((unsigned char *)a2 + 432))
    {
      long long v70 = *((_OWORD *)a2 + 23);
      int v21 = (WTF::StringImpl *)*((void *)a2 + 48);
      if (v21) {
        *(_DWORD *)v21 += 2;
      }
      __int16 v71 = v21;
      long long v72 = *(_OWORD *)((char *)a2 + 392);
      long long v73 = *(_OWORD *)((char *)a2 + 408);
      __int16 v74 = *((_WORD *)a2 + 212);
      char v75 = 1;
    }
    long long v22 = *((_OWORD *)a2 + 29);
    long long v76 = *((_OWORD *)a2 + 28);
    long long v77 = v22;
    long long v78 = *((_OWORD *)a2 + 30);
    __int16 v79 = *((_WORD *)a2 + 248);
    __int16 v23 = (WTF::StringImpl *)*((void *)a2 + 63);
    if (v23) {
      *(_DWORD *)v23 += 2;
    }
    int v80 = v23;
    long long v68 = v77;
    long long v69 = v78;
    long long v67 = v76;
    if (!(_BYTE)v78) {
      break;
    }
    uint64_t v24 = *(void *)(*((void *)this + 3) + 8);
    if (v24) {
      uint64_t v25 = v24 - 48;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = *(void *)(v25 + 264);
    long long v76 = v67;
    *(void *)&long long v77 = v26;
    uint64_t v27 = *(void *)(v6 + 80);
    unsigned int add = 1;
    atomic_fetch_add((atomic_uint *volatile)(v27 + 128), 1u);
    unint64_t v15 = v69;
    if ((_BYTE)v69)
    {
      *(void *)long long buf = v68;
      uint64_t v28 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(v27 + 136), buf);
      uint64_t v7 = v28;
      if (v28) {
        ++*(_DWORD *)(v28 + 8);
      }
      if (v27 && atomic_fetch_add((atomic_uint *volatile)(v27 + 128), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v27 + 128));
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        if (!v7) {
          break;
        }
      }
      else if (!v28)
      {
        break;
      }
      uint64_t v29 = WebKit::NetworkConnectionToWebProcess::swConnection((WebKit::NetworkConnectionToWebProcess *)v7);
      if (!v29) {
        goto LABEL_64;
      }
      uint64_t v30 = v29;
      ++*(_DWORD *)(v29 + 16);
      unint64_t v15 = v69;
      if ((_BYTE)v69)
      {
        v51[0] = v67;
        v51[1] = v68;
        WebKit::WebSWServerConnection::gatherClientData(v29, (uint64_t *)v51, buf);
        if (!v66) {
          goto LABEL_62;
        }
        unint64_t v15 = v69;
        if ((_BYTE)v69)
        {
          WebKit::WebSWServerConnection::unregisterServiceWorkerClient(v30, (uint64_t *)&v67);
          uint64_t v31 = WebKit::NetworkConnectionToWebProcess::swConnection((WebKit::NetworkConnectionToWebProcess *)v6);
          if (!v31) {
            goto LABEL_45;
          }
          uint64_t v33 = v31;
          ++*(_DWORD *)(v31 + 16);
          unint64_t v15 = v78;
          if ((_BYTE)v78)
          {
            unint64_t v15 = v66;
            if (v66)
            {
              long long v59 = v76;
              uint64_t v60 = v77;
              WebKit::WebSWServerConnection::registerServiceWorkerClient(v31, (WebCore::SecurityOriginData *)buf, (uint64_t)&v59, (uint64_t)&v64, (uint64_t)&v65);
              int v34 = *(_DWORD *)(v33 + 16);
              if (!v34)
              {
                __break(0xC471u);
                JUMPOUT(0x198C45FB4);
              }
              *(_DWORD *)(v33 + 16) = v34 - 1;
LABEL_45:
              if (v66)
              {
                int v35 = v65;
                uint64_t v65 = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2) {
                    WTF::StringImpl::destroy(v35, v32);
                  }
                  else {
                    *(_DWORD *)v35 -= 2;
                  }
                }
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v32);
                uint64_t v37 = v62;
                long long v62 = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2) {
                    WTF::StringImpl::destroy(v37, v36);
                  }
                  else {
                    *(_DWORD *)v37 -= 2;
                  }
                }
                char v38 = v61;
                long long v61 = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2) {
                    WTF::StringImpl::destroy(v38, v36);
                  }
                  else {
                    *(_DWORD *)v38 -= 2;
                  }
                }
                if (v58 != -1) {
                  ((void (*)(char *, uint64_t *))off_1EE9CA8B8[v58])(&v50, &v57);
                }
                int v58 = -1;
                if (v56 != -1) {
                  ((void (*)(char *, unsigned char *))off_1EE9CA8B8[v56])(&v50, buf);
                }
              }
LABEL_62:
              int v39 = *(_DWORD *)(v30 + 16);
              if (!v39)
              {
                __break(0xC471u);
                JUMPOUT(0x198C45F94);
              }
              *(_DWORD *)(v30 + 16) = v39 - 1;
LABEL_64:
              if (*(_DWORD *)(v7 + 8) == 1) {
                (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
              }
              else {
                --*(_DWORD *)(v7 + 8);
              }
              break;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_85:
    atomic_store(add, (unsigned int *)v15);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *(void *)&long long v67 = *((void *)a2 + 1);
  uint64_t v40 = (*(uint64_t (**)(WebKit::WebSharedWorkerServerToContextConnection *))(*(void *)this + 56))(this);
  uint64_t v41 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v41 = 2824;
  *((void *)v41 + objc_destroyWeak(this + 1) = v40;
  *((void *)v41 + 66) = (char *)v41 + 16;
  *((void *)v41 + 67) = 512;
  *((void *)v41 + 68) = 0;
  *((void *)v41 + 70) = 0;
  *((void *)v41 + 69) = 0;
  IPC::Encoder::encodeHeader(v41);
  *(void *)long long buf = v41;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v41, (uint64_t)a2 + 24);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v41, (uint64_t *)&v67);
  IPC::ArgumentCoder<WebCore::WorkerOptions,void>::encode(v41, (uint64_t)a2 + 136);
  IPC::ArgumentCoder<WebCore::WorkerFetchResult,void>::encode(v41, (uint64_t *)a2 + 22);
  IPC::ArgumentCoder<WebCore::WorkerInitializationData,void>::encode(v41, (uint64_t)&v70);
  (*(void (**)(WebKit::WebSharedWorkerServerToContextConnection *, unsigned char *, void))(*(void *)this + 32))(this, buf, 0);
  char v43 = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (v43)
  {
    IPC::Encoder::~Encoder(v43, v42);
    WTF::fastFree(v47, v48);
  }
  __int16 v44 = (void *)WTF::fastMalloc((WTF *)0x18);
  *__int16 v44 = &unk_1EE9CA978;
  v44[1] = this;
  _OWORD v44[2] = a2;
  *(void *)long long buf = v44;
  WebKit::WebSharedWorker::forEachSharedWorkerObject((uint64_t)a2, buf);
  (*(void (**)(void *))(*v44 + 8))(v44);
  uint64_t result = v80;
  int v80 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v45);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v75)
  {
    uint64_t result = v71;
    __int16 v71 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v45);
        if (!v4) {
          return result;
        }
        goto LABEL_78;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v4) {
    return result;
  }
LABEL_78:
  if (*(_DWORD *)(v6 + 8) == 1) {
    return (WTF::StringImpl *)(*(uint64_t (**)(long long *))(*(void *)v49 + 8))(v49);
  }
  --*(_DWORD *)(v6 + 8);
  return result;
}

IPC::Encoder *WebKit::WebSharedWorkerServerToContextConnection::suspendSharedWorker(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2828;
  *((void *)v4 + objc_destroyWeak(this + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v10 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSharedWorkerServerToContextConnection::resumeSharedWorker(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2826;
  *((void *)v4 + objc_destroyWeak(this + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v10 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

WTF::StringImpl *WebKit::WebSharedWorkerServerToContextConnection::postConnectEvent(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1[3] + 8);
    if (v9) {
      uint64_t v10 = v9 - 48;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void *)(v10 + 264);
    uint64_t v12 = *(void *)(a2 + 8);
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v11;
    __int16 v28 = 2048;
    uint64_t v29 = v12;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::postConnectEvent: sharedWorkerIdentifier=%llu", buf, 0x20u);
  }
  uint64_t v25 = *(void *)(a2 + 8);
  WebCore::SecurityOriginData::toString((uint64_t *)&v24, (WebCore::SecurityOriginData *)(a2 + 56));
  uint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v14 = 2825;
  *((void *)v14 + objc_destroyWeak(this + 1) = v13;
  *((void *)v14 + 66) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 68) = 0;
  *((void *)v14 + 70) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  uint64_t v26 = v14;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, &v25);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, a3);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v14, a3 + 1);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, a3 + 2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v14, a3 + 3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, (uint64_t *)&v24);
  uint64_t v15 = *a4;
  *a4 = 0;
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v16 = &unk_1EE9CA9C8;
  v16[1] = v15;
  uint64_t v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)long long buf = v16;
  *(void *)&uint8_t buf[8] = v17;
  (*(void (**)(void *, IPC::Encoder **, unsigned char *, void))(*a1 + 40))(a1, &v26, buf, 0);
  uint64_t v19 = *(void *)buf;
  *(void *)long long buf = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = v26;
  uint64_t v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v18);
    WTF::fastFree(v22, v23);
  }
  uint64_t result = v24;
  uint64_t v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebSharedWorkerServerToContextConnection::terminateSharedWorker(void *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1[3] + 8);
    if (v5) {
      uint64_t v6 = v5 - 48;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(v6 + 264);
    uint64_t v8 = *(void *)(a2 + 8);
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v17 = 2048;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = v8;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::terminateSharedWorker: sharedWorkerIdentifier=%llu", buf, 0x20u);
  }
  uint64_t v15 = *(void *)(a2 + 8);
  uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2829;
  *((void *)v10 + objc_destroyWeak(this + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  *(void *)long long buf = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, &v15);
  (*(void (**)(void *, unsigned char *, void))(*a1 + 32))(a1, buf, 0);
  uint64_t result = *(IPC::Encoder **)buf;
  *(void *)long long buf = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::WebSharedWorkerServerToContextConnection::addSharedWorkerObject(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  unint64_t v62 = a2;
  uint64_t v63 = (WTF::StringImpl *)a3;
  uint64_t v6 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1[3] + 8);
    if (v8) {
      uint64_t v9 = v8 - 48;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void *)(v9 + 264);
    WTF::makeString<unsigned long long,char,unsigned long long>(a3, 45, a2, &v61);
    WTF::String::utf8();
    if (v64) {
      uint64_t v11 = (char *)v64 + 16;
    }
    else {
      uint64_t v11 = 0;
    }
    *(_DWORD *)long long buf = 134218498;
    *(void *)unsigned __int8 v66 = a1;
    *(_WORD *)&v66[8] = 2048;
    *(void *)&v66[10] = v10;
    *(_WORD *)&v66[18] = 2082;
    long long v67 = v11;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::addSharedWorkerObject: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    uint64_t v12 = v64;
    uint64_t v64 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1) {
        WTF::fastFree(v12, v7);
      }
      else {
        --*(_DWORD *)v12;
      }
    }
    uint64_t v13 = v61;
    long long v61 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  uint64_t v15 = a1 + 6;
  uint64_t v14 = a1[6];
  if (v14
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1 + 6, 0), (uint64_t v14 = *v15) != 0))
  {
    int v16 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    int v16 = 0;
  }
  unint64_t v17 = (a3 + ~(a3 << 32)) ^ ((unint64_t)(a3 + ~(a3 << 32)) >> 22);
  unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
  uint64_t v21 = (uint64_t *)(v14 + 16 * v20);
  uint64_t v22 = *v21;
  if (!*v21)
  {
LABEL_27:
    uint64_t v25 = v21[1];
    *uint64_t v21 = a3;
    v21[1] = 0;
    if (v25) {
      WTF::fastFree((WTF *)(v25 - 16), v7);
    }
    uint64_t v26 = *v15;
    if (*v15) {
      int v27 = *(_DWORD *)(v26 - 12) + 1;
    }
    else {
      int v27 = 1;
    }
    *(_DWORD *)(v26 - 1objc_destroyWeak(this + 2) = v27;
    uint64_t v28 = *v15;
    if (*v15) {
      int v29 = *(_DWORD *)(v28 - 12);
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
    unint64_t v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30) {
        goto LABEL_38;
      }
    }
    else if (3 * v31 > 4 * v30)
    {
      goto LABEL_38;
    }
    uint64_t v21 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1 + 6, v21);
    goto LABEL_38;
  }
  __int16 v23 = 0;
  int v24 = 1;
  while (v22 != a3)
  {
    if (v22 == -1) {
      __int16 v23 = v21;
    }
    unsigned int v20 = (v20 + v24) & v16;
    uint64_t v21 = (uint64_t *)(v14 + 16 * v20);
    uint64_t v22 = *v21;
    ++v24;
    if (!*v21)
    {
      if (v23)
      {
        *__int16 v23 = 0;
        v23[1] = 0;
        --*(_DWORD *)(*v15 - 16);
        uint64_t v21 = v23;
      }
      goto LABEL_27;
    }
  }
LABEL_38:
  uint64_t v34 = v21[1];
  long long v32 = v21 + 1;
  uint64_t v33 = v34;
  if (v34
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v32),
        (uint64_t v33 = *v32) != 0))
  {
    int v35 = *(_DWORD *)(v33 - 8);
  }
  else
  {
    int v35 = 0;
  }
  *(_DWORD *)long long buf = -1640531527;
  *(_WORD *)unsigned __int8 v66 = 0;
  v66[2] = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)buf, &v62);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf);
  unsigned int v37 = result & v35;
  char v38 = (unint64_t *)(v33 + 16 * (result & v35));
  unint64_t v40 = *v38;
  int v39 = (WTF::StringImpl *)v38[1];
  unint64_t v41 = v62;
  int v42 = v63;
  if (*(_OWORD *)v38 == 0)
  {
LABEL_50:
    *char v38 = v41;
    v38[1] = (unint64_t)v42;
    uint64_t v45 = *v32;
    if (*v32) {
      int v46 = *(_DWORD *)(v45 - 12) + 1;
    }
    else {
      int v46 = 1;
    }
    *(_DWORD *)(v45 - 1objc_destroyWeak(this + 2) = v46;
    uint64_t v47 = *v32;
    if (*v32) {
      int v48 = *(_DWORD *)(v47 - 12);
    }
    else {
      int v48 = 0;
    }
    uint64_t v49 = (*(_DWORD *)(v47 - 16) + v48);
    unint64_t v50 = *(unsigned int *)(v47 - 4);
    if (v50 > 0x400)
    {
      if (v50 > 2 * v49) {
        goto LABEL_59;
      }
    }
    else if (3 * v50 > 4 * v49)
    {
      goto LABEL_59;
    }
    uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v32);
    goto LABEL_59;
  }
  char v43 = 0;
  int v44 = 1;
  while (v40 != v62 || v39 != v63)
  {
    if (v39 == (WTF::StringImpl *)-1) {
      char v43 = v38;
    }
    unsigned int v37 = (v37 + v44) & v35;
    char v38 = (unint64_t *)(v33 + 16 * v37);
    unint64_t v40 = *v38;
    int v39 = (WTF::StringImpl *)v38[1];
    ++v44;
    if (*(_OWORD *)v38 == 0)
    {
      if (v43)
      {
        unint64_t *v43 = 0;
        v43[1] = 0;
        --*(_DWORD *)(*v32 - 16);
        unint64_t v41 = v62;
        int v42 = v63;
        char v38 = v43;
      }
      goto LABEL_50;
    }
  }
LABEL_59:
  uint64_t v51 = *(void *)(a1[3] + 8);
  if (v51) {
    uint64_t v52 = v51 - 48;
  }
  else {
    uint64_t v52 = 0;
  }
  if (*(WTF::StringImpl **)(v52 + 264) != v63 && *v32 && *(_DWORD *)(*v32 - 12) == 1)
  {
    uint64_t v53 = *(void *)(v52 + 80);
    atomic_fetch_add((atomic_uint *volatile)(v53 + 128), 1u);
    uint64_t v54 = *(void *)(a1[3] + 8);
    if (v54) {
      uint64_t v55 = v54 - 48;
    }
    else {
      uint64_t v55 = 0;
    }
    uint64_t v60 = *(void *)(v55 + 264);
    long long v61 = v63;
    buf[0] = 2;
    *(void *)&v66[4] = &v61;
    *(void *)&v66[12] = &v60;
    uint64_t v56 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v56 = 341;
    *((void *)v56 + objc_destroyWeak(this + 1) = 0;
    *((void *)v56 + 66) = (char *)v56 + 16;
    *((void *)v56 + 67) = 512;
    *((void *)v56 + 68) = 0;
    *((void *)v56 + 70) = 0;
    *((void *)v56 + 69) = 0;
    IPC::Encoder::encodeHeader(v56);
    uint64_t v64 = v56;
    IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul,2ul>(v56, (uint64_t)buf);
    (*(void (**)(uint64_t, WTF **, void))(*(void *)(v53 + 24) + 32))(v53 + 24, &v64, 0);
    uint64_t result = (uint64_t)v64;
    uint64_t v64 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v57);
      uint64_t result = WTF::fastFree(v58, v59);
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v53 + 128), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v53 + 128));
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 8))(v53);
    }
  }
  if ((a1[11] & 0xFFFFFFFFFFFFLL) != 0) {
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 7));
  }
  return result;
}

uint64_t WebKit::WebSharedWorkerServerToContextConnection::removeSharedWorkerObject(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  unint64_t v65 = a2;
  unsigned __int8 v66 = (WTF::StringImpl *)a3;
  uint64_t v6 = qword_1EB3585C8;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT);
  if (result)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 8);
    if (v9) {
      uint64_t v10 = v9 - 48;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void *)(v10 + 264);
    WTF::makeString<unsigned long long,char,unsigned long long>(a3, 45, a2, &v64);
    WTF::String::utf8();
    if (v67) {
      uint64_t v12 = (char *)v67 + 16;
    }
    else {
      uint64_t v12 = 0;
    }
    *(_DWORD *)long long buf = 134218498;
    *(void *)long long v69 = a1;
    *(_WORD *)&v69[8] = 2048;
    *(void *)&v69[10] = v11;
    *(_WORD *)&v69[18] = 2082;
    long long v70 = v12;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::removeSharedWorkerObject: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    uint64_t v13 = v67;
    long long v67 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::fastFree(v13, v8);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
    uint64_t result = (uint64_t)v64;
    uint64_t v64 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 48);
  if (v14)
  {
    unsigned int v16 = *(_DWORD *)(v14 - 8);
    unint64_t v17 = (a3 + ~(a3 << 32)) ^ ((unint64_t)(a3 + ~(a3 << 32)) >> 22);
    unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    uint64_t v20 = v16 & ((v19 >> 31) ^ v19);
    uint64_t v21 = *(void *)(v14 + 16 * v20);
    if (v21 != a3)
    {
      int v22 = 1;
      while (v21)
      {
        uint64_t v20 = (v20 + v22) & v16;
        uint64_t v21 = *(void *)(v14 + 16 * v20);
        ++v22;
        if (v21 == a3) {
          goto LABEL_23;
        }
      }
      uint64_t v20 = *(unsigned int *)(v14 - 4);
    }
LABEL_23:
    if (v20 != *(_DWORD *)(v14 - 4))
    {
      __int16 v23 = (void *)(v14 + 16 * v20);
      int v24 = v23 + 1;
      uint64_t v25 = v23[1];
      if (!v25)
      {
        uint64_t v36 = 0;
        goto LABEL_55;
      }
      unsigned int v26 = *(_DWORD *)(v25 - 8);
      *(_DWORD *)long long buf = -1640531527;
      *(_WORD *)long long v69 = 0;
      v69[2] = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)buf, &v65);
      uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf);
      uint64_t v27 = result & v26;
      uint64_t v28 = (uint64_t *)(v25 + 16 * v27);
      uint64_t v29 = *v28;
      unint64_t v30 = v28[1];
      if (*v28 == v65 && v30 == (void)v66)
      {
LABEL_36:
        int v35 = (void *)(v25 + 16 * v27);
        uint64_t v36 = *v24;
        if (!*v24)
        {
          unsigned int v37 = 0;
LABEL_42:
          if (v37 != v35)
          {
            *int v35 = -1;
            v35[1] = -1;
            ++*(_DWORD *)(*v24 - 16);
            uint64_t v38 = *v24;
            if (*v24) {
              int v39 = *(_DWORD *)(v38 - 12) - 1;
            }
            else {
              int v39 = -1;
            }
            *(_DWORD *)(v38 - 1objc_destroyWeak(this + 2) = v39;
            uint64_t v36 = *v24;
            if (!*v24) {
              goto LABEL_55;
            }
            unsigned int v40 = *(_DWORD *)(v36 - 4);
            if (6 * *(_DWORD *)(v36 - 12) >= v40 || v40 < 9)
            {
LABEL_54:
              if (*(_DWORD *)(v36 - 12)) {
                return result;
              }
              goto LABEL_55;
            }
            uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(v24, v40 >> 1);
            uint64_t v36 = *v24;
          }
          if (v36) {
            goto LABEL_54;
          }
LABEL_55:
          int v42 = (void *)*v15;
          if (!*v15 || (v42 += 2 * *((unsigned int *)v42 - 1), v42 != v23))
          {
            if (v42 != v23)
            {
              *__int16 v23 = -1;
              if (v36) {
                uint64_t result = WTF::fastFree((WTF *)(v36 - 16), v8);
              }
              ++*(_DWORD *)(*v15 - 16);
              char v43 = (void *)*v15;
              if (*v15) {
                int v44 = *((_DWORD *)v43 - 3) - 1;
              }
              else {
                int v44 = -1;
              }
              *((_DWORD *)v43 - 3) = v44;
              uint64_t v45 = (void *)*v15;
              if (*v15)
              {
                unsigned int v46 = 6 * *((_DWORD *)v45 - 3);
                unsigned int v47 = *((_DWORD *)v45 - 1);
                if (v46 < v47 && v47 >= 9) {
                  uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash((uint64_t *)(a1 + 48), v47 >> 1, 0);
                }
              }
            }
          }
          uint64_t v49 = *(void *)(*(void *)(a1 + 24) + 8);
          if (v49) {
            uint64_t v50 = v49 - 48;
          }
          else {
            uint64_t v50 = 0;
          }
          if (*(WTF::StringImpl **)(v50 + 264) != v66)
          {
            uint64_t v51 = *(void *)(v50 + 80);
            atomic_fetch_add((atomic_uint *volatile)(v51 + 128), 1u);
            uint64_t v52 = *(void *)(*(void *)(a1 + 24) + 8);
            if (v52) {
              uint64_t v53 = v52 - 48;
            }
            else {
              uint64_t v53 = 0;
            }
            uint64_t v63 = *(void *)(v53 + 264);
            uint64_t v64 = v66;
            buf[0] = 2;
            *(void *)&v69[4] = &v64;
            *(void *)&v69[12] = &v63;
            uint64_t v54 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v54 = 360;
            *((void *)v54 + objc_destroyWeak(this + 1) = 0;
            *((void *)v54 + 66) = (char *)v54 + 16;
            *((void *)v54 + 67) = 512;
            *((void *)v54 + 68) = 0;
            *((void *)v54 + 70) = 0;
            *((void *)v54 + 69) = 0;
            IPC::Encoder::encodeHeader(v54);
            long long v67 = v54;
            IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul,2ul>(v54, (uint64_t)buf);
            (*(void (**)(uint64_t, WTF **, void))(*(void *)(v51 + 24) + 32))(v51 + 24, &v67, 0);
            uint64_t result = (uint64_t)v67;
            long long v67 = 0;
            if (result)
            {
              IPC::Encoder::~Encoder((IPC::Encoder *)result, v55);
              uint64_t result = WTF::fastFree(v61, v62);
            }
            if (atomic_fetch_add((atomic_uint *volatile)(v51 + 128), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, (unsigned int *)(v51 + 128));
              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 8))(v51);
            }
          }
          if (!*v15 || !*(_DWORD *)(*v15 - 12))
          {
            uint64_t v56 = qword_1EB3585C8;
            BOOL v57 = os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT);
            if (v57)
            {
              uint64_t v58 = *(void *)(*(void *)(a1 + 24) + 8);
              if (v58) {
                uint64_t v59 = v58 - 48;
              }
              else {
                uint64_t v59 = 0;
              }
              uint64_t v60 = *(void *)(v59 + 264);
              *(_DWORD *)long long buf = 134218240;
              *(void *)long long v69 = a1;
              *(_WORD *)&v69[8] = 2048;
              *(void *)&v69[10] = v60;
              _os_log_impl(&dword_1985F2000, v56, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::removeSharedWorkerObject: connection is now idle, starting a timer to terminate it", buf, 0x16u);
            }
            atomic_load((unsigned __int8 *)(WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)v57) + 4));
            return WebCore::TimerBase::start();
          }
          return result;
        }
      }
      else
      {
        int v32 = 1;
        while (v29 | v30)
        {
          uint64_t v27 = (v27 + v32) & v26;
          uint64_t v33 = (uint64_t *)(v25 + 16 * v27);
          uint64_t v29 = *v33;
          unint64_t v30 = v33[1];
          ++v32;
          if (v29 == v65 && v30 == (void)v66) {
            goto LABEL_36;
          }
        }
        uint64_t v36 = *v24;
        if (!*v24) {
          goto LABEL_55;
        }
        int v35 = (void *)(v36 + 16 * *(unsigned int *)(v36 - 4));
      }
      unsigned int v37 = (void *)(v36 + 16 * *(unsigned int *)(v36 - 4));
      if (v37 == v35) {
        goto LABEL_54;
      }
      goto LABEL_42;
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::AsyncRevalidation::staleWhileRevalidateEnding(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 72);
  if (v1)
  {
    *(void *)(this + 7objc_destroyWeak(this + 2) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, 1);
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v2(v1);
  }
  return this;
}

void *WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,std::optional<WebKit::NavigatingToAppBoundDomain>::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (WebCore::ResourceRequestBase *)(a1 + 10);
  uint64_t v3 = (const void *)a1[34];
  a1[34] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  uint64_t v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v4);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v4);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *___ZN6WebKit12NetworkCache5CacheC2ERNS_14NetworkProcessERKN3WTF6StringEONS4_3RefINS0_7StorageENS4_12RawPtrTraitsIS9_EENS4_21DefaultRefDerefTraitsIS9_EEEENS4_9OptionSetINS0_11CacheOptionEEEN3PAL9SessionIDE_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  WebKit::NetworkCache::Cache::dumpFilePath((WebKit::NetworkCache::Cache *)v9, *(WebKit::NetworkCache::Storage **)(v1 + 16));
  int v3 = WTF::FileSystemImpl::openFile();
  uint64_t result = *(WTF::StringImpl **)v9;
  *(void *)uint64_t v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v3 != -1)
  {
    WTF::FileSystemImpl::writeToFile();
    *(_OWORD *)&v9[4] = 0uLL;
    uint64_t v5 = *(void *)(v1 + 16);
    uint64_t v6 = *(void *)(v5 + 40);
    {
      v8[0] = (uint64_t)"Resource";
      v8[1] = 9;
      WTF::NeverDestroyed<WTF::AtomString const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebKit::NetworkCache::resourceType(void)::resource, (uint64_t)v8);
    }
    uint64_t v7 = WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v7 = &unk_1EE9CAB30;
    *(_DWORD *)(v7 + 8) = v3;
    *(_DWORD *)(v7 + 16) = 0;
    *(_OWORD *)(v7 + 20) = *(_OWORD *)v9;
    *(_DWORD *)(v7 + 36) = *(_DWORD *)&v9[16];
    *(void *)(v7 + 40) = v6;
    v8[0] = v7;
    WebKit::NetworkCache::Storage::traverse(v5, &WebKit::NetworkCache::resourceType(void)::resource, 3, v8);
    uint64_t result = (WTF::StringImpl *)v8[0];
    if (v8[0]) {
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v8[0] + 8))(v8[0]);
    }
  }
  return result;
}

void WebKit::NetworkCache::Cache::~Cache(WebKit::NetworkCache::Cache *this, WTF::StringImpl *a2)
{
  int v3 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl **)*((void *)this + 6);
  if (v5) {
    WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(v5, a2);
  }
  std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager>::reset[abi:sn180100]((WebKit::NetworkCache::SpeculativeLoadManager **)this + 5, 0);
  uint64_t v7 = (WebCore::LowPowerModeNotifier *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7) {
    WebCore::LowPowerModeNotifier::operator delete(v7, 0x18uLL);
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8 + 32);
    (*(void (**)(unsigned int *))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v9) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v9);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v6);
}

uint64_t WebKit::NetworkCache::Cache::updateCapacity(WebKit::NetworkCache::Cache *this)
{
  int v2 = *(unsigned __int8 *)(*((void *)this + 3) + 145);
  WTF::String::isolatedCopy();
  uint64_t v4 = WebKit::NetworkCache::computeCapacity(v2, (WTF::FileSystemImpl *)&v7);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = *((void *)this + 2);
  if (*(void *)(result + 40) != v4)
  {
    *(void *)(result + 40) = v4;
    return WebKit::NetworkCache::Storage::shrinkIfNeeded(result);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Cache::makeCacheKey@<X0>(WebKit::NetworkCache::Cache *this@<X0>, const WebCore::ResourceRequest *a2@<X1>, void *a3@<X8>)
{
  WebCore::ResourceRequestBase::httpHeaderField();
  {
    v11[0] = (WTF::StringImpl *)"Resource";
    v11[1] = (WTF::StringImpl *)9;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebKit::NetworkCache::resourceType(void)::resource, (uint64_t)v11);
  }
  uint64_t v6 = (WTF::URL *)WebCore::ResourceRequestBase::url(a2);
  WTF::URL::stringWithoutFragmentIdentifier((uint64_t *)v11, v6);
  WebKit::NetworkCache::Key::Key(a3, (_DWORD **)a2 + 20, &WebKit::NetworkCache::resourceType(void)::resource, (_DWORD **)&v10, (_DWORD **)v11, *((void *)this + 2) + 28);
  uint64_t v8 = v11[0];
  v11[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WebKit::NetworkCache::Cache::browsingContextRemoved(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a2;
  int v22 = a3;
  uint64_t v6 = (uint64_t *)(a1 + 56);
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v7 = WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>((uint64_t *)(a1 + 56), &v21);
  uint64_t v8 = *(void **)(a1 + 56);
  if (v8) {
    v8 += 6 * *((unsigned int *)v8 - 1);
  }
  if (v8 == v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v9 = (void *)v7[4];
    uint64_t v10 = (void *)v7[5];
    v7[4] = 0;
    WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::remove(v6, v7);
  }
  v25[0] = v9;
  v25[1] = v10;
  WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v25, &v21);
  if (v25[0])
  {
    uint64_t v11 = *((unsigned int *)v25[0] - 1);
    uint64_t v12 = &v25[0][v11];
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  unsigned int v16 = v25;
  unint64_t v17 = v12;
  unint64_t v18 = v12;
  unint64_t v19 = v12;
  uint64_t v20 = &v25[0][v11];
  WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v16);
  while (v22 != v17)
  {
    uint64_t v15 = *(WebKit::NetworkCache::Entry **)(*(void *)(*v22 + 8) + 8);
    if (v15) {
      WebKit::NetworkCache::SpeculativeLoad::cancel(v15);
    }
    WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v21);
  }
  uint64_t result = v25[0];
  if (v25[0]) {
    return (void *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((unsigned int **)v25[0], v13);
  }
  return result;
}

void *WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  *a2 = a1;
  a2[1] = v4;
  a2[2] = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    uint64_t v7 = *((unsigned int *)v6 - 1);
    uint64_t v8 = &v6[v7];
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  a2[3] = v8;
  a2[4] = &v6[v7];

  return WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a2);
}

void *WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(void *a1)
{
  int v2 = (void *)a1[2];
  int v3 = (void *)(a1[1] + 8);
  a1[1] = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
    a1[1] = ++v3;
  WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
  ++*(_DWORD *)(*a1 + 8);
  return a1;
}

WTF::StringImpl *WebKit::NetworkCache::Cache::retrieve(WebKit::NetworkCache::Cache *a1, const WebCore::ResourceRequest *a2, uint64_t a3, __int16 a4, char a5, __int16 a6, WTF::MonotonicTime *a7)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  WebKit::NetworkCache::Cache::makeCacheKey(a1, a2, &v72);
  uint64_t v14 = (WTF::MonotonicTime *)WebCore::ResourceRequestBase::priority(a2);
  int v15 = (int)v14;
  memset(&v60[8], 0, 75);
  v60[88] = 0;
  WTF::MonotonicTime::now(v14);
  long long v59 = v16;
  *(_DWORD *)uint64_t v60 = v15;
  if (!*(unsigned char *)(a3 + 32)
    || !*((void *)a1 + 5)
    || (WebCore::ResourceRequestBase::isConditional(a2) & 1) != 0
    || (*((unsigned char *)a2 + 147) & 0xFE) == 2
    || (int v44 = WebCore::ResourceRequestBase::cachePolicy(a2), v44 != 5) && v44)
  {
    int v17 = 0;
  }
  else
  {
    if (!*(unsigned char *)(a3 + 32)) {
      goto LABEL_41;
    }
    uint64_t v45 = *((void *)a1 + 5);
    long long v46 = *(_OWORD *)(a3 + 16);
    v58[0] = *(_OWORD *)a3;
    v58[1] = v46;
    WebKit::NetworkCache::SpeculativeLoadManager::registerLoad(v45, (const WebCore::ResourceRequest *)v58, a2, (_DWORD **)&v72, a4, a5, a6);
    int v17 = 1;
  }
  unint64_t v18 = (void *)WebCore::ResourceRequestBase::httpMethod(a2);
  if (!MEMORY[0x19972E990](*v18, "GET", 3)
    || WebCore::ResourceRequestBase::cachePolicy(a2) == 1
    && (WebCore::ResourceRequestBase::isConditional(a2) & 1) == 0)
  {
    BOOL v57 = 0;
    WebKit::NetworkCache::Cache::completeRetrieve(a7, &v57, (uint64_t)&v59);
    if (v57)
    {
      WebKit::NetworkCache::Entry::~Entry(v57, v39);
      WTF::fastFree(v53, v54);
    }
    goto LABEL_12;
  }
  if (!v17)
  {
LABEL_9:
    uint64_t v55 = *((void *)a1 + 2);
    ++*(_DWORD *)a1;
    long long v61 = a1;
    unint64_t v62 = a1;
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v63[0].m_impl.m_ptr, (const String *)a2);
    unint64_t v19 = *(StringImpl **)a7;
    *(void *)a7 = 0;
    *(void *)uint64_t v64 = v19;
    *(_OWORD *)&v64[97] = *(_OWORD *)&v60[73];
    *(_OWORD *)&v64[72] = *(_OWORD *)&v60[48];
    *(_OWORD *)&v64[88] = *(_OWORD *)&v60[64];
    *(_OWORD *)&v64[8] = v59;
    *(_OWORD *)&v64[24] = *(_OWORD *)v60;
    *(_OWORD *)&v64[40] = *(_OWORD *)&v60[16];
    *(_OWORD *)&v64[56] = *(_OWORD *)&v60[32];
    WebKit::NetworkCache::Key::Key((uint64_t)&v65, (uint64_t)&v72);
    uint64_t v20 = *((void *)a1 + 3);
    atomic_fetch_add((atomic_uint *volatile)(v20 + 128), 1u);
    uint64_t v21 = *((void *)a1 + 9);
    uint64_t v70 = v20;
    *(void *)uint64_t v71 = v21;
    long long v22 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v71[8] = *(_OWORD *)a3;
    *(_OWORD *)&v71[24] = v22;
    v71[40] = *(unsigned char *)(a3 + 32);
    *(_WORD *)&v71[48] = a4;
    v71[50] = a5;
    *(_WORD *)&v71[52] = a6;
    uint64_t v23 = WTF::fastMalloc((WTF *)0x1E0);
    *(void *)uint64_t v23 = &unk_1EE9CAA68;
    *(void *)(v23 + 8) = v61;
    uint64_t v24 = v62;
    unint64_t v62 = 0;
    *(void *)(v23 + 16) = v24;
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v23 + 24), v63);
    *(void *)(v23 + 224) = *(void *)v64;
    long long v26 = *(_OWORD *)&v64[8];
    long long v25 = *(_OWORD *)&v64[24];
    *(_OWORD *)(v23 + 264) = *(_OWORD *)&v64[40];
    *(_OWORD *)(v23 + 23objc_destroyWeak(this + 2) = v26;
    *(_OWORD *)(v23 + 248) = v25;
    long long v27 = *(_OWORD *)&v64[72];
    long long v29 = *(_OWORD *)&v64[88];
    long long v28 = *(_OWORD *)&v64[104];
    *(_OWORD *)(v23 + 280) = *(_OWORD *)&v64[56];
    *(_OWORD *)(v23 + 296) = v27;
    *(_OWORD *)(v23 + 31objc_destroyWeak(this + 2) = v29;
    *(_OWORD *)(v23 + 328) = v28;
    *(_OWORD *)(v23 + 344) = v65;
    *(void *)(v23 + 360) = v66;
    uint64_t v30 = *((void *)&v66 + 1);
    long long v65 = 0u;
    long long v66 = 0u;
    *(void *)(v23 + 368) = v30;
    long long v31 = v67;
    long long v32 = v68;
    *(void *)(v23 + 408) = v69;
    *(_OWORD *)(v23 + 376) = v31;
    *(_OWORD *)(v23 + 39objc_destroyWeak(this + 2) = v32;
    uint64_t v33 = v70;
    *(void *)uint64_t v64 = 0;
    uint64_t v70 = 0;
    *(void *)(v23 + 416) = v33;
    long long v34 = *(_OWORD *)v71;
    long long v35 = *(_OWORD *)&v71[16];
    long long v36 = *(_OWORD *)&v71[32];
    *(void *)(v23 + 470) = *(void *)&v71[46];
    *(_OWORD *)(v23 + 440) = v35;
    *(_OWORD *)(v23 + 456) = v36;
    *(_OWORD *)(v23 + 424) = v34;
    uint64_t v56 = v23;
    WebKit::NetworkCache::Storage::retrieve(v55, (uint64_t)&v72, v15, &v56);
    uint64_t v38 = v56;
    uint64_t v56 = 0;
    if (v38) {
      (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
    }
    WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::~$_1(&v61, v37);
    goto LABEL_12;
  }
  if (!*(unsigned char *)(a3 + 32)) {
LABEL_41:
  }
    __break(1u);
  if (!WebKit::NetworkCache::SpeculativeLoadManager::canRetrieve(*((void *)a1 + 5), (uint64_t)&v72, a2, (uint64_t *)a3))goto LABEL_9; {
  uint64_t v47 = *((void *)a1 + 5);
  }
  uint64_t v48 = *((void *)a1 + 3);
  atomic_fetch_add((atomic_uint *volatile)(v48 + 128), 1u);
  long long v61 = (WebKit::NetworkCache::Cache *)v48;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v62, (const String *)a2);
  long long v49 = *(_OWORD *)&v60[16];
  *(_OWORD *)&v64[48] = *(_OWORD *)&v60[32];
  *(_OWORD *)&v64[64] = *(_OWORD *)&v60[48];
  *(_OWORD *)&v64[80] = *(_OWORD *)&v60[64];
  *(_OWORD *)&v64[89] = *(_OWORD *)&v60[73];
  *(_OWORD *)uint64_t v64 = v59;
  *(_OWORD *)&v64[16] = *(_OWORD *)v60;
  uint64_t v50 = *(StringImpl **)a7;
  *(void *)a7 = 0;
  *(_OWORD *)&v64[32] = v49;
  uint64_t v51 = *((void *)a1 + 9);
  v63[24].m_impl.m_ptr = v50;
  *(void *)&v64[112] = v51;
  WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::Function<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0,void>(&v56, (uint64_t *)&v61);
  WebKit::NetworkCache::SpeculativeLoadManager::retrieve(v47, (uint64_t)&v72, (const WTF::StringImpl *)&v56);
  uint64_t v52 = v56;
  uint64_t v56 = 0;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0::~$_0((uint64_t)&v61);
LABEL_12:
  unsigned int v40 = v75;
  char v75 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, v39);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  unint64_t v41 = v74;
  __int16 v74 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v39);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  int v42 = v73;
  long long v73 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v39);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  uint64_t result = v72;
  long long v72 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v39);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebKit::NetworkCache::Entry *WebKit::NetworkCache::Cache::completeRetrieve(WTF::MonotonicTime *a1, WebKit::NetworkCache::Entry **a2, uint64_t a3)
{
  WTF::MonotonicTime::now(a1);
  *(void *)(a3 + 8) = v6;
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v8 = *(void *)a1;
  uint64_t v13 = v7;
  (*(void (**)(uint64_t, WebKit::NetworkCache::Entry **, uint64_t))(*(void *)v8 + 16))(v8, &v13, a3);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    WebKit::NetworkCache::Entry::~Entry(result, v9);
    return (WebKit::NetworkCache::Entry *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t *WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::Function<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x158);
  v5.m_impl.m_ptr = (StringImpl *)*a2;
  *a2 = 0;
  *(void *)uint64_t v4 = &unk_1EE9CAA40;
  *(String *)(v4 + 8) = v5;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v4 + 16), (const String *)a2 + 1);
  uint64_t v6 = a2[26];
  a2[26] = 0;
  *(void *)(v4 + 216) = v6;
  long long v7 = *(_OWORD *)(a2 + 27);
  long long v8 = *(_OWORD *)(a2 + 29);
  long long v9 = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(v4 + 256) = *(_OWORD *)(a2 + 31);
  *(_OWORD *)(v4 + 27objc_destroyWeak(this + 2) = v9;
  *(_OWORD *)(v4 + 224) = v7;
  *(_OWORD *)(v4 + 240) = v8;
  long long v10 = *(_OWORD *)(a2 + 35);
  long long v11 = *(_OWORD *)(a2 + 37);
  long long v12 = *(_OWORD *)(a2 + 39);
  *(void *)(v4 + 336) = a2[41];
  *(_OWORD *)(v4 + 304) = v11;
  *(_OWORD *)(v4 + 320) = v12;
  *(_OWORD *)(v4 + 288) = v10;
  *a1 = v4;
  return a1;
}

uint64_t WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(const void **)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  uint64_t v4 = *(unsigned int **)a1;
  *(void *)a1 = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 32);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void *WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::~$_1(void *a1, WTF::StringImpl *a2)
{
  int v3 = (unsigned int *)a1[51];
  a1[51] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 32);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[45];
  a1[45] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  String v5 = (WTF::StringImpl *)a1[44];
  a1[44] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[43];
  a1[43] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  long long v7 = (WTF::StringImpl *)a1[42];
  a1[42] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = a1[27];
  a1[27] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  long long v9 = (const void *)a1[26];
  a1[26] = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  long long v11 = (WebKit::NetworkCache::Cache *)a1[1];
  a1[1] = 0;
  if (v11) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v11, v10);
  }
  return a1;
}

WTF::StringImpl *WebKit::NetworkCache::Cache::makeEntry@<X0>(WebKit::NetworkCache::Cache *a1@<X0>, const WebCore::ResourceRequest *a2@<X1>, const WebCore::ResourceRequest *a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  WebKit::NetworkCache::Cache::makeCacheKey(a1, a2, &v23);
  uint64_t v12 = *((void *)a1 + 3);
  v22[0] = *((void *)a1 + 9);
  uint64_t v13 = (WebCore *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 232), v22);
  WebCore::collectVaryingRequestHeaders(v22, v13, a2, a3, v14);
  uint64_t v15 = WTF::fastMalloc((WTF *)0x300);
  *a6 = WebKit::NetworkCache::Entry::Entry(v15, (uint64_t)&v23, (uint64_t)a3, a4, a5, (uint64_t)v22);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v16);
  unint64_t v18 = v26;
  long long v26 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v17);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  unint64_t v19 = v25;
  long long v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v17);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = v24;
  uint64_t v24 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v17);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t result = v23;
  uint64_t v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::NetworkCache::Cache::makeRedirectEntry(WebKit::NetworkCache::Cache *this@<X0>, const WebCore::ResourceRequest *a2@<X1>, const WebCore::ResourceResponse *a3@<X2>, const String *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  WebCore::ResourceRequest::ResourceRequest(v21, a4);
  WebCore::ResourceRequestBase::clearHTTPAuthorization((WebCore::ResourceRequestBase *)v21);
  WebKit::NetworkCache::Cache::makeCacheKey(this, a2, &v23);
  uint64_t v9 = *((void *)this + 3);
  v20[0] = *((void *)this + 9);
  long long v10 = (WebCore *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 232), v20);
  WebCore::collectVaryingRequestHeaders(v20, v10, a2, a3, v11);
  uint64_t v12 = WTF::fastMalloc((WTF *)0x300);
  *a5 = WebKit::NetworkCache::Entry::Entry(v12, (uint64_t)&v23, (uint64_t)a3, (const WebCore::ResourceRequest *)v21, (uint64_t)v20);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v13);
  uint64_t v15 = v26;
  long long v26 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  unint64_t v16 = v25;
  long long v25 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  int v17 = v24;
  uint64_t v24 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v14);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  unint64_t v18 = v23;
  uint64_t v23 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v14);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  CFTypeRef v19 = cf;
  CFTypeRef cf = 0;
  if (v19) {
    CFRelease(v19);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v21);
}

void WebKit::NetworkCache::Cache::store(WebKit::NetworkCache *this@<X1>, WebCore::ResourceRequest *a2@<X2>, atomic_uchar *volatile **a3@<X0>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (WebKit::NetworkCache::makeStoreDecision(this, a2, a2))
  {
    WebKit::NetworkCache::Cache::makeCacheKey((WebKit::NetworkCache::Cache *)a3, this, &v29);
    if (WebCore::ResourceResponseBase::httpStatusCode(a2) != 304) {
      WebKit::NetworkCache::Storage::remove(a3[2], (const WebKit::NetworkCache::Key *)&v29);
    }
    *a7 = 0;
    uint64_t v15 = v32;
    long long v32 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    unint64_t v16 = v31;
    long long v31 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    int v17 = v30;
    uint64_t v30 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v14);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    unint64_t v18 = v29;
    long long v29 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v14);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    WebKit::NetworkCache::Cache::makeEntry((WebKit::NetworkCache::Cache *)a3, this, a2, a4, a5, a7);
    WebKit::NetworkCache::Entry::encodeAsStorageRecord((WebKit::NetworkCache::Entry *)*a7, v19, v20);
    uint64_t v21 = (uint64_t)a3[2];
    ++*(_DWORD *)a3;
    uint64_t v22 = *a6;
    *a6 = 0;
    uint64_t v23 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v23 = &unk_1EE9CAA90;
    v23[1] = a3;
    v23[2] = v22;
    uint64_t v27 = 0;
    long long v28 = v23;
    WebKit::NetworkCache::Storage::store(v21, (const WebKit::NetworkCache::Key *)&v29, (uint64_t *)&v28, &v27);
    uint64_t v25 = v27;
    uint64_t v27 = 0;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    uint64_t v26 = (uint64_t)v28;
    long long v28 = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
    WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)&v29, v24);
  }
}

uint64_t WebKit::NetworkCache::makeStoreDecision(WebKit::NetworkCache *this, const WebCore::ResourceRequest *a2, const WebCore::ResourceResponse *a3)
{
  if ((*(unsigned char *)(WebCore::ResourceRequestBase::url(this) + 8) & 2) == 0
    || !WebCore::ResourceResponseBase::isInHTTPFamily(a2))
  {
    return 1;
  }
  String v5 = (void *)WebCore::ResourceRequestBase::httpMethod(this);
  if (!MEMORY[0x19972E990](*v5, "GET", 3)) {
    return 2;
  }
  uint64_t v6 = (WebCore *)WebCore::ResourceRequestBase::httpHeaderFields(this);
  WebCore::parseCacheControlDirectives(v25, v6, v7);
  if ((v26 & 2) != 0) {
    return 5;
  }
  if (WebCore::ResourceResponseBase::cacheControlContainsNoStore(a2)) {
    return 3;
  }
  uint64_t v8 = (WebCore *)WebCore::ResourceResponseBase::httpStatusCode(a2);
  if ((WebCore::isStatusCodeCacheableByDefault(v8) & 1) != 0
    || ((WebCore::ResourceResponseBase::expires(a2), v9)
      ? (BOOL v11 = 0)
      : (WebCore::ResourceResponseBase::cacheControlMaxAge(a2), BOOL v11 = v10 == 0),
        (uint64_t v12 = (WebCore *)WebCore::ResourceResponseBase::httpStatusCode(a2),
         int isStatusCodePotentiallyCacheable = WebCore::isStatusCodePotentiallyCacheable(v12),
         uint64_t result = 4,
         isStatusCodePotentiallyCacheable)
     && !v11))
  {
    if ((WebCore::ResourceResponseBase::isRedirection(a2) & 1) != 0 || (*((_WORD *)a2 + 116) & 0x40) != 0)
    {
      uint64_t v21 = WebCore::ResourceRequestBase::url(this);
      if ((*(unsigned char *)(v21 + 8) & 1) != 0 && *(void *)v21 && *(_DWORD *)(*(void *)v21 + 4) > *(_DWORD *)(v21 + 36)) {
        return 8;
      }
    }
    if (*((unsigned char *)this + 147) == 1) {
      return 0;
    }
    uint64_t v15 = (WTF::WallTime *)WebCore::ResourceRequestBase::priority(this);
    if (v15 != 4)
    {
      WTF::WallTime::now(v15);
      uint64_t v16 = WebCore::ResourceResponseBase::cacheControlStaleWhileRevalidate(a2);
      double v17 = 0.0;
      if (v18) {
        double v17 = *(double *)&v16;
      }
      if (WebCore::ResourceResponseBase::cacheControlContainsNoCache(a2))
      {
        if (!WebCore::ResourceResponseBase::hasCacheValidatorFields(a2)) {
          return 6;
        }
      }
      else
      {
        WebCore::computeFreshnessLifetimeForHTTPFamily();
        if (v19 > 0.0)
        {
          WebCore::ResourceResponseBase::hasCacheValidatorFields(a2);
          goto LABEL_21;
        }
        if ((WebCore::ResourceResponseBase::hasCacheValidatorFields(a2) & 1) == 0 && v17 <= 0.0) {
          return 6;
        }
      }
    }
LABEL_21:
    int v20 = *((unsigned __int8 *)this + 147);
    if (v20 == 2)
    {
      uint64_t v22 = (WebKit::NetworkCache *)WebCore::ResourceResponseBase::mimeType(a2);
      char isMediaMIMEType = WebKit::NetworkCache::isMediaMIMEType(v22, v23);
      uint64_t result = 7;
      if (isMediaMIMEType) {
        return result;
      }
    }
    else if (v20 == 4)
    {
      return 7;
    }
    return 0;
  }
  return result;
}

void WebKit::NetworkCache::Entry::encodeAsStorageRecord(WebKit::NetworkCache::Entry *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](this, a2, a3);
  uint64_t v5 = v4;
  WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&buffer);
  WTF::Persistence::Coder<WebCore::ResourceResponse>::encodeForPersistence();
  int v6 = *(_DWORD *)(v3 + 348);
  MEMORY[0x19972DCD0](&buffer, v6 != 0);
  if (v6) {
    WTF::Persistence::VectorCoder<false,std::pair<WTF::String,WTF::String>,0ul>::encodeForPersistence<WTF::Persistence::Encoder>((uint64_t)&buffer, v3 + 336);
  }
  int v7 = *(unsigned __int8 *)(v3 + 552);
  WTF::Persistence::Encoder::operator<<();
  if (v7) {
    WTF::Persistence::Coder<std::optional<WebCore::ResourceRequest>>::encodeForPersistence<WTF::Persistence::Encoder>((uint64_t)&buffer, v3 + 352);
  }
  if (*(unsigned char *)(v3 + 752))
  {
    MEMORY[0x19972DCD0](&buffer, 1);
    if (!*(unsigned char *)(v3 + 752))
    {
      int v20 = std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::NetworkCache::Cache::storeRedirect(v20, v21, v22);
      return;
    }
    WTF::Persistence::Coder<WTF::Seconds>::encodeForPersistence();
  }
  else
  {
    MEMORY[0x19972DCD0](&buffer, 0);
  }
  WTF::Persistence::Encoder::encodeChecksum((WTF::Persistence::Encoder *)&buffer);
  dispatch_data_t v8 = dispatch_data_create(buffer, size, 0, 0);
  char v26 = 0;
  long long v27 = 0uLL;
  char v28 = 0;
  char v9 = *(WebCore::FragmentedSharedBuffer **)(v3 + 560);
  if (v9)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous((uint64_t *)&object, v9);
    BOOL v11 = object;
    object = 0;
    uint64_t v12 = *(unsigned int **)(v3 + 560);
    *(void *)(v3 + 560) = v11;
    if (v12)
    {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, v10);
      uint64_t v14 = (unsigned int *)object;
      object = 0;
      if (v14) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v13);
      }
    }
    uint64_t v15 = *(void *)(v3 + 560);
    if (!*(unsigned char *)(v15 + 40))
    {
      __break(0xC471u);
      JUMPOUT(0x198C48A48);
    }
    uint64_t v16 = (const void *)WebCore::SharedBuffer::data(*(WebCore::SharedBuffer **)(v3 + 560));
    dispatch_data_t v17 = dispatch_data_create(v16, *(void *)(v15 + 48), 0, 0);
    long long v24 = 0uLL;
    object = v17;
    char v25 = 0;
    WTF::OSObjectPtr<dispatch_data_s *>::operator=(&v26, &object);
    long long v27 = v24;
    char v28 = v25;
    if (object) {
      os_release(object);
    }
  }
  WebKit::NetworkCache::Key::Key(v5, v3);
  *(void *)(v5 + 7objc_destroyWeak(this + 2) = *(void *)(v3 + 72);
  *(void *)(v5 + 80) = v8;
  if (v8) {
    os_retain(v8);
  }
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 96) = 0;
  *(unsigned char *)(v5 + 104) = 0;
  char v18 = v26;
  *(void *)(v5 + 11objc_destroyWeak(this + 2) = v26;
  if (v18)
  {
    os_retain(v18);
    double v19 = v26;
    *(_OWORD *)(v5 + 120) = v27;
    *(unsigned char *)(v5 + 136) = v28;
    *(unsigned char *)(v5 + 144) = 0;
    *(unsigned char *)(v5 + 164) = 0;
    if (v19) {
      os_release(v19);
    }
  }
  else
  {
    *(_OWORD *)(v5 + 120) = v27;
    *(unsigned char *)(v5 + 136) = v28;
    *(unsigned char *)(v5 + 144) = 0;
    *(unsigned char *)(v5 + 164) = 0;
  }
  if (v8) {
    os_release(v8);
  }
  WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&buffer);
}

void WebKit::NetworkCache::Cache::storeRedirect(WebKit::NetworkCache *this@<X1>, WebCore::ResourceRequest *a2@<X2>, WebKit::NetworkCache::Cache *a3@<X0>, const String *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (WebKit::NetworkCache::makeStoreDecision(this, a2, a2))
  {
    *a7 = 0;
  }
  else
  {
    WebKit::NetworkCache::Cache::makeRedirectEntry(a3, this, a2, a4, a7);
    uint64_t v16 = *a7;
    if (a6)
    {
      if (!*(unsigned char *)(v16 + 752)) {
        *(unsigned char *)(v16 + 75objc_destroyWeak(this + 2) = 1;
      }
      *(void *)(v16 + 744) = a5;
    }
    WebKit::NetworkCache::Entry::encodeAsStorageRecord((WebKit::NetworkCache::Entry *)v16, v14, v15);
    uint64_t v17 = *((void *)a3 + 2);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    WebKit::NetworkCache::Storage::store(v17, (const WebKit::NetworkCache::Key *)v23, &v22, &v21);
    uint64_t v19 = v21;
    uint64_t v21 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    uint64_t v20 = v22;
    uint64_t v22 = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)v23, v18);
  }
}

void WebKit::NetworkCache::Cache::update(void *a1@<X0>, WebCore::NetworkStorageSession *a2@<X1>, uint64_t a3@<X2>, WebCore::ResourceResponse *a4@<X3>, char a5@<W4>, WebKit::NetworkCache::Entry **a6@<X8>)
{
  v34[21] = *MEMORY[0x1E4F143B8];
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v30, (const WebCore::ResourceResponseBase *)(a3 + 80));
  uint64_t v13 = *(const void **)(a3 + 320);
  CFTypeRef cf = v13;
  if (v13) {
    CFRetain(v13);
  }
  char v32 = *(unsigned char *)(a3 + 328);
  WebCore::updateResponseHeadersAfterRevalidation((WebCore *)v30, a4, v12);
  uint64_t v14 = *(atomic_uint **)(a3 + 560);
  if (!v14)
  {
    WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord((unsigned int **)a3);
    uint64_t v14 = *(atomic_uint **)(a3 + 560);
  }
  uint64_t v15 = a1[3];
  v34[0] = a1[9];
  uint64_t v16 = (WebCore *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v15 + 232), v34);
  WebCore::collectVaryingRequestHeaders(v34, v16, a2, (const WebCore::ResourceRequest *)v30, v17);
  uint64_t v18 = WTF::fastMalloc((WTF *)0x300);
  uint64_t v19 = (WebKit::NetworkCache::Entry *)v18;
  if (v14) {
    atomic_fetch_add(v14, 1u);
  }
  uint64_t v33 = (unsigned int *)v14;
  WebKit::NetworkCache::Entry::Entry(v18, a3, (uint64_t)v30, a5, (uint64_t *)&v33, (uint64_t)v34);
  *a6 = v19;
  if (v33) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v33, v20);
  }
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v20);
  WebKit::NetworkCache::Entry::encodeAsStorageRecord(v19, v21, v22);
  uint64_t v23 = a1[2];
  uint64_t v33 = 0;
  uint64_t v29 = 0;
  WebKit::NetworkCache::Storage::store(v23, (const WebKit::NetworkCache::Key *)v34, (uint64_t *)&v33, &v29);
  uint64_t v25 = v29;
  uint64_t v29 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  char v26 = v33;
  uint64_t v33 = 0;
  if (v26) {
    (*(void (**)(unsigned int *))(*(void *)v26 + 8))(v26);
  }
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)v34, v24);
  CFTypeRef v28 = cf;
  CFTypeRef cf = 0;
  if (v28) {
    CFRelease(v28);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v30, v27);
}

uint64_t WebKit::NetworkCache::Entry::buffer(WebKit::NetworkCache::Entry *this)
{
  uint64_t result = *((void *)this + 70);
  if (!result)
  {
    WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord((unsigned int **)this);
    return *((void *)this + 70);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Cache::remove(atomic_uchar *volatile **this, const WebCore::ResourceRequest *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  WebKit::NetworkCache::Cache::makeCacheKey((WebKit::NetworkCache::Cache *)this, a2, &v8);
  WebKit::NetworkCache::Storage::remove(this[2], (const WebKit::NetworkCache::Key *)&v8);
  uint64_t v4 = v11;
  BOOL v11 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v10;
  char v10 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = v9;
  char v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t result = v8;
  dispatch_data_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::Cache::remove(uint64_t a1, const WebKit::NetworkCache::Key **a2, uint64_t *a3)
{
  uint64_t v3 = *(WebKit::NetworkCache::Storage **)(a1 + 16);
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  WebKit::NetworkCache::Storage::remove(v3, a2, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::NetworkCache::Cache::traverse(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 64);
  if (v3 < 3)
  {
    *(_DWORD *)(a1 + 64) = v3 + 1;
    uint64_t v9 = *(void *)(a1 + 16);
    {
      v12[0] = (uint64_t)"Resource";
      v12[1] = 9;
      WTF::NeverDestroyed<WTF::AtomString const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebKit::NetworkCache::resourceType(void)::resource, (uint64_t)v12);
    }
    ++*(_DWORD *)a1;
    uint64_t v10 = *a2;
    *a2 = 0;
    BOOL v11 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v11 = &unk_1EE9CAAE0;
    v11[1] = a1;
    void v11[2] = a1;
    void v11[3] = v10;
    v12[0] = (uint64_t)v11;
    WebKit::NetworkCache::Storage::traverse(v9, &WebKit::NetworkCache::resourceType(void)::resource, 0, v12);
    uint64_t result = v12[0];
    if (v12[0]) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v12[0] + 8))(v12[0]);
    }
  }
  else
  {
    uint64_t v4 = (WTF::RunLoop *)WTFLogAlways();
    WTF::RunLoop::main(v4);
    uint64_t v5 = *a2;
    *a2 = 0;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v6 = &unk_1EE9CAAB8;
    v6[1] = v5;
    v12[0] = (uint64_t)v6;
    WTF::RunLoop::dispatch();
    uint64_t result = v12[0];
    v12[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::Cache::traverse(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  {
    v9[0] = (uint64_t)"Resource";
    v9[1] = 9;
    dispatch_data_t v8 = a3;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebKit::NetworkCache::resourceType(void)::resource, (uint64_t)v9);
    a3 = v8;
  }
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v6 = &unk_1EE9CAB08;
  v6[1] = v5;
  v9[0] = (uint64_t)v6;
  WebKit::NetworkCache::Storage::traverse(v4, &WebKit::NetworkCache::resourceType(void)::resource, a2, 0, v9);
  uint64_t result = v9[0];
  if (v9[0]) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9[0] + 8))(v9[0]);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Cache::dumpFilePath(WebKit::NetworkCache::Cache *this, WebKit::NetworkCache::Storage *a2)
{
  WebKit::NetworkCache::Storage::versionPath(a2);
  WTF::FileSystemImpl::pathByAppendingComponent();
  uint64_t result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::Cache::deleteDumpFile(WebKit::NetworkCache::Storage **this)
{
  WTF::WorkQueue::create();
  uint64_t v2 = v13;
  WebKit::NetworkCache::Cache::dumpFilePath((WebKit::NetworkCache::Cache *)&v10, this[2]);
  WTF::String::isolatedCopy();
  unsigned int v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned int v3 = &unk_1EE9CAB58;
  uint64_t v4 = v11;
  BOOL v11 = 0;
  uint64_t v12 = v3;
  v3[1] = v4;
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 32))(v2, &v12);
  uint64_t v6 = v12;
  uint64_t v12 = 0;
  if (v6) {
    (*(void (**)(void *))(*v6 + 8))(v6);
  }
  int v7 = v11;
  BOOL v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  dispatch_data_t v8 = v10;
  uint64_t v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Cache::clear(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v9 = v5;
  uint64_t v10 = 0;
  WebKit::NetworkCache::Storage::clear(v4, a3, (uint64_t)&v10, &v9);
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  WebKit::NetworkCache::Cache::deleteDumpFile((WebKit::NetworkCache::Storage **)a1);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::Cache::fetchData(_DWORD *a1, char a2, uint64_t *a3)
{
  ++*a1;
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v6 = &unk_1EE9CAB80;
  *(void *)(v6 + 8) = a1;
  *(unsigned char *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = v5;
  *(void *)(v6 + 3objc_destroyWeak(this + 2) = 0;
  uint64_t v9 = v6;
  WebKit::NetworkCache::Cache::traverse((uint64_t)a1, &v9);
  uint64_t result = v9;
  if (v9)
  {
    dispatch_data_t v8 = *(uint64_t (**)(void))(*(void *)v9 + 8);
    return v8();
  }
  return result;
}

uint64_t WebKit::NetworkCache::Cache::deleteData(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v23 = 0;
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 32 * v5;
    do
    {
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(&v23, v6, (uint64_t)&v17);
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
    uint64_t v8 = v23;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v17 = a1;
  ++*a1;
  uint64_t v23 = 0;
  uint64_t v9 = *a3;
  *a3 = 0;
  long long v22 = 0u;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x38);
  void *v10 = &unk_1EE9CABA8;
  v10[1] = a1;
  uint64_t v10[2] = a1;
  uint64_t v10[3] = v8;
  long long v18 = 0u;
  v10[4] = v9;
  v10[5] = 0;
  long long v19 = 0u;
  uint64_t v20 = 0;
  void v10[6] = 0;
  uint64_t v21 = v10;
  WebKit::NetworkCache::Cache::traverse((uint64_t)a1, (uint64_t *)&v21);
  if (v21) {
    (*(void (**)(void *))(*v21 + 8))(v21);
  }
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19 + 8, v11);
  uint64_t v13 = v19;
  *(void *)&long long v19 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  if (*((void *)&v18 + 1)) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(*((uint64_t *)&v18 + 1), v12);
  }
  uint64_t v14 = (WebKit::NetworkCache::Cache *)v18;
  *(void *)&long long v18 = 0;
  if (v14) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v14, (WTF::StringImpl *)v12);
  }
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v12);
  uint64_t result = v23;
  if (v23) {
    return WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v23, v15);
  }
  return result;
}

WTF::StringImpl **WebKit::NetworkCache::Cache::deleteDataForRegistrableDomains(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v24 = 0;
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(WTF::StringImpl ***)a2;
    uint64_t v7 = 8 * v5;
    do
    {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v24, v6++, (uint64_t)&v17);
      v7 -= 8;
    }
    while (v7);
    uint64_t v8 = v24;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v17 = a1;
  ++*a1;
  uint64_t v24 = 0;
  uint64_t v9 = *a3;
  *a3 = 0;
  long long v23 = 0u;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x40);
  void *v10 = &unk_1EE9CABD0;
  v10[1] = a1;
  uint64_t v10[2] = a1;
  uint64_t v10[3] = v8;
  v10[4] = v9;
  v10[5] = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v20 = 0;
  void v10[6] = 0;
  uint64_t v21 = 0;
  long long v22 = v10;
  v10[7] = 0;
  WebKit::NetworkCache::Cache::traverse((uint64_t)a1, (uint64_t *)&v22);
  if (v22) {
    (*(void (**)(void *))(*v22 + 8))(v22);
  }
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19 + 8, v11);
  uint64_t v13 = v19;
  *(void *)&long long v19 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  if (*((void *)&v18 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v18 + 1), v12);
  }
  uint64_t v14 = (WebKit::NetworkCache::Cache *)v18;
  *(void *)&long long v18 = 0;
  if (v14) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v14, v12);
  }
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v12);
  uint64_t result = v24;
  if (v24) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v24, v15);
  }
  return result;
}

double WebKit::NetworkCache::BlobStorage::add@<D0>(atomic_ullong *this@<X0>, const WTF::String *a2@<X1>, const WebKit::NetworkCache::Data *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v40 = 0uLL;
  int v41 = 0;
  WebKit::NetworkCache::computeSHA1((uint64_t)a3, (uint64_t)(this + 1));
  if (*((void *)a3 + 1) || !*(void *)a3) {
    size_t size = *((void *)a3 + 2);
  }
  else {
    size_t size = dispatch_data_get_size(*(dispatch_data_t *)a3);
  }
  if (size)
  {
    WTF::SHA1::hexDigest();
    WTF::String::isolatedCopy();
    if (object) {
      strlen((const char *)object + 16);
    }
    WTF::FileSystemImpl::pathByAppendingComponent();
    uint64_t v10 = v39;
    int v39 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    BOOL v11 = (WTF *)object;
    object = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1) {
        WTF::fastFree(v11, v9);
      }
      else {
        --*(_DWORD *)v11;
      }
    }
    WTF::FileSystemImpl::deleteFile(a2, v9);
    if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v38, v12))
    {
      if (WTF::FileSystemImpl::makeSafeToUseMemoryMapForPath((WTF::FileSystemImpl *)&v38, v13))
      {
        WebKit::NetworkCache::mapFile((uint64_t)&object);
        uint64_t v15 = object;
        if (object && *(void *)a3)
        {
          uint64_t v16 = WebKit::NetworkCache::Data::span((WebKit::NetworkCache::Data *)&object);
          size_t v18 = v17;
          long long v19 = WebKit::NetworkCache::Data::span(a3);
          if ((const WTF::String *)v18 == v14 && !memcmp(v16, v19, v18))
          {
            if ((WTF::FileSystemImpl::hardLink((WTF::FileSystemImpl *)&v38, a2, v20) & 1) == 0)
            {
              WTF::String::utf8();
              WTF::String::utf8();
              WTFLogAlways();
              if (v34)
              {
                if (*(_DWORD *)v34 == 1) {
                  WTF::fastFree(v34, v21);
                }
                else {
                  --*(_DWORD *)v34;
                }
              }
              uint64_t v33 = v39;
              int v39 = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 1) {
                  WTF::fastFree(v33, v21);
                }
                else {
                  --*(_DWORD *)v33;
                }
              }
            }
            long long v22 = object;
            *(void *)a4 = object;
            if (v22)
            {
              os_retain(v22);
              long long v23 = object;
              *(_OWORD *)(a4 + 8) = v36;
              *(unsigned char *)(a4 + 24) = v37;
              double result = *(double *)&v40;
              *(_OWORD *)(a4 + 3objc_destroyWeak(this + 2) = v40;
              *(_DWORD *)(a4 + 48) = v41;
              if (!v23) {
                goto LABEL_23;
              }
              goto LABEL_22;
            }
            *(_OWORD *)(a4 + 8) = v36;
            char v26 = v37;
            goto LABEL_32;
          }
          uint64_t v15 = object;
        }
        if (v15) {
          os_release(v15);
        }
      }
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v38, v14);
    }
    WebKit::NetworkCache::Data::mapToFile((WebKit::NetworkCache::Data *)&object, (dispatch_data_t *)a3);
    uint64_t v29 = object;
    if (!object)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(unsigned char *)(a4 + 24) = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 3objc_destroyWeak(this + 2) = 0;
      *(void *)(a4 + 40) = 0;
      *(_DWORD *)(a4 + 48) = 0;
LABEL_23:
      uint64_t v25 = v38;
      uint64_t v38 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v21);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
      return result;
    }
    if ((WTF::FileSystemImpl::hardLink((WTF::FileSystemImpl *)&v38, a2, v28) & 1) == 0)
    {
      WTF::String::utf8();
      WTF::String::utf8();
      WTFLogAlways();
      if (v34)
      {
        if (*(_DWORD *)v34 == 1) {
          WTF::fastFree(v34, v21);
        }
        else {
          --*(_DWORD *)v34;
        }
      }
      char v32 = v39;
      int v39 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1) {
          WTF::fastFree(v32, v21);
        }
        else {
          --*(_DWORD *)v32;
        }
      }
    }
    if ((void)v36) {
      size_t v30 = *((void *)&v36 + 1);
    }
    else {
      size_t v30 = dispatch_data_get_size(v29);
    }
    atomic_fetch_add(this + 2, v30);
    long long v31 = object;
    *(void *)a4 = object;
    if (v31)
    {
      os_retain(v31);
      *(_OWORD *)(a4 + 8) = v36;
      *(unsigned char *)(a4 + 24) = v37;
      *(_OWORD *)(a4 + 3objc_destroyWeak(this + 2) = v40;
      *(_DWORD *)(a4 + 48) = v41;
      long long v23 = v31;
LABEL_22:
      os_release(v23);
      goto LABEL_23;
    }
    *(_OWORD *)(a4 + 8) = v36;
    char v26 = v37;
LABEL_32:
    *(unsigned char *)(a4 + 24) = v26;
    double result = *(double *)&v40;
    *(_OWORD *)(a4 + 3objc_destroyWeak(this + 2) = v40;
    *(_DWORD *)(a4 + 48) = v41;
    goto LABEL_23;
  }
  long long v27 = *(void **)a3;
  *(void *)a4 = *(void *)a3;
  if (v27) {
    os_retain(v27);
  }
  *(_OWORD *)(a4 + 8) = *(_OWORD *)((char *)a3 + 8);
  *(unsigned char *)(a4 + 24) = *((unsigned char *)a3 + 24);
  double result = *(double *)&v40;
  *(_OWORD *)(a4 + 3objc_destroyWeak(this + 2) = v40;
  *(_DWORD *)(a4 + 48) = v41;
  return result;
}

uint64_t WebKit::NetworkCache::computeSHA1(uint64_t a1, uint64_t a2)
{
  WTF::SHA1::SHA1((WTF::SHA1 *)v8);
  MEMORY[0x19972E910](v8, a2, 8);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9CAC70;
  v4[1] = v8;
  uint64_t v7 = v4;
  WebKit::NetworkCache::Data::apply(a1, (uint64_t)&v7);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(void *))(*v5 + 8))(v5);
  }
  return WTF::SHA1::computeHash();
}

void WebKit::NetworkCache::Data::mapToFile(WebKit::NetworkCache::Data *this, dispatch_data_t *a2)
{
  if (!a2[1] && *a2) {
    dispatch_data_get_size(*a2);
  }
  unsigned int v7 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9CAC48;
  v4[1] = a2;
  uint64_t v5 = v4;
  WTF::FileSystemImpl::mapToFile();
  if (v5) {
    (*(void (**)(void *))(*v5 + 8))(v5);
  }
  if (v6[0])
  {
    WebKit::NetworkCache::Data::adoptMap((uint64_t)v6, (int *)v7, (uint64_t)this);
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + objc_destroyWeak(this + 1) = 0;
    *((unsigned char *)this + 24) = 0;
    *((void *)this + objc_destroyWeak(this + 2) = 0;
  }
  WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)v6);
}

void WebKit::NetworkCache::BlobStorage::get(WebKit::NetworkCache::BlobStorage *this@<X0>, uint64_t a2@<X8>)
{
  WebKit::NetworkCache::mapFile((uint64_t)&object);
  uint64_t v5 = object;
  *(void *)a2 = object;
  if (v5) {
    os_retain(v5);
  }
  *(_OWORD *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 24) = v8;
  WebKit::NetworkCache::computeSHA1((uint64_t)&object, (uint64_t)this + 8);
  if (object) {
    os_release(object);
  }
}

uint64_t WTF::Persistence::Coder<WebKit::NetworkCache::Key>::encodeForPersistence()
{
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence();

  return WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence();
}

WTF::StringImpl *WTF::Persistence::Coder<WebKit::NetworkCache::Key>::decodeForPersistence@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  LOBYTE(v19) = 0;
  char v20 = 0;
  double result = (WTF::StringImpl *)WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v19);
  if (v20)
  {
    uint64_t v5 = v19;
    long long v19 = 0;
    LOBYTE(v17) = 0;
    char v18 = 0;
    double result = (WTF::StringImpl *)WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v17);
    if (v18)
    {
      long long v7 = v17;
      size_t v17 = 0;
      LOBYTE(v15) = 0;
      char v16 = 0;
      double result = (WTF::StringImpl *)WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v15);
      if (v16)
      {
        char v8 = v15;
        uint64_t v15 = 0;
        LOBYTE(v13) = 0;
        char v14 = 0;
        double result = (WTF::StringImpl *)WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v13);
        if (v14)
        {
          uint64_t v9 = v13;
          uint64_t v13 = 0;
          double result = (WTF::StringImpl *)WTF::Persistence::Coder<std::array<unsigned char,20ul>>::decodeForPersistence();
          char v10 = v23;
          *(_OWORD *)long long v22 = *(_OWORD *)v24;
          *(_DWORD *)&v22[15] = *(_DWORD *)&v24[15];
          if (v25)
          {
            double result = (WTF::StringImpl *)WTF::Persistence::Coder<std::array<unsigned char,20ul>>::decodeForPersistence();
            char v11 = v23;
            v21[0] = *(_OWORD *)v24;
            *(_DWORD *)((char *)v21 + 15) = *(_DWORD *)&v24[15];
            char v12 = v25;
            if (v25)
            {
              *(_OWORD *)(a2 + 53) = v21[0];
              *(_DWORD *)(a2 + 68) = *(_DWORD *)((char *)v21 + 15);
              *(void *)a2 = v5;
              *(void *)(a2 + 8) = v7;
              *(void *)(a2 + 16) = v8;
              *(void *)(a2 + 24) = v9;
              *(unsigned char *)(a2 + 3objc_destroyWeak(this + 2) = v10;
              *(_OWORD *)(a2 + 33) = *(_OWORD *)v22;
              char v12 = 1;
              *(_DWORD *)(a2 + 48) = *(_DWORD *)&v22[15];
              *(unsigned char *)(a2 + 5objc_destroyWeak(this + 2) = v11;
              char v8 = 0;
              long long v7 = 0;
              uint64_t v5 = 0;
              uint64_t v9 = 0;
            }
            else
            {
              *(unsigned char *)a2 = 0;
            }
            *(unsigned char *)(a2 + 7objc_destroyWeak(this + 2) = v12;
          }
          else
          {
            *(unsigned char *)a2 = 0;
            *(unsigned char *)(a2 + 7objc_destroyWeak(this + 2) = 0;
          }
          if (v14)
          {
            double result = v13;
            uint64_t v13 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2) {
                double result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
              }
              else {
                *(_DWORD *)result -= 2;
              }
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
          *(unsigned char *)a2 = 0;
          *(unsigned char *)(a2 + 7objc_destroyWeak(this + 2) = 0;
        }
        if (v16)
        {
          double result = v15;
          uint64_t v15 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              double result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
      else
      {
        uint64_t v9 = 0;
        char v8 = 0;
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 7objc_destroyWeak(this + 2) = 0;
      }
      if (v18)
      {
        double result = v17;
        size_t v17 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            double result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
      long long v7 = 0;
      char v8 = 0;
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 7objc_destroyWeak(this + 2) = 0;
    }
    if (v20)
    {
      double result = v19;
      long long v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          double result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        double result = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v6);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        double result = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        double result = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v6);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 7objc_destroyWeak(this + 2) = 0;
  }
  return result;
}

uint64_t WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(uint64_t a1, uint64_t a2)
{
  WTF::Persistence::Coder<WTF::String>::decodeForPersistence();
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(a2, (uint64_t)&v7);
  if (v8)
  {
    uint64_t v5 = v7;
    long long v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WTF::Persistence::Coder<WebKit::NetworkCache::SubresourceInfo>::encodeForPersistence(uint64_t a1, unsigned __int8 *a2)
{
  WTF::Persistence::Coder<WebKit::NetworkCache::Key>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::WallTime>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::WallTime>::encodeForPersistence();
  uint64_t result = MEMORY[0x19972DCD0](a1, a2[88]);
  if (!a2[88])
  {
    MEMORY[0x19972DCD0](a1, a2[89]);
    MEMORY[0x19972DCD0](a1, a2[90]);
    WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
    WTF::Persistence::Coder<WebCore::HTTPHeaderMap>::encodeForPersistence();
    return WTF::Persistence::Encoder::operator<<();
  }
  return result;
}

uint64_t WTF::Persistence::Coder<WebKit::NetworkCache::SubresourceInfo>::decodeForPersistence@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  LOBYTE(v6) = 0;
  char v7 = 0;
  WTF::Persistence::Decoder::operator>><WebKit::NetworkCache::Key,(void *)0>(a1, (uint64_t)&v6);
  if (v7)
  {
    WTF::Persistence::Coder<WTF::WallTime>::decodeForPersistence();
    if ((_BYTE)v3)
    {
      WTF::Persistence::Coder<WTF::WallTime>::decodeForPersistence();
      if ((_BYTE)v3)
      {
        __int16 v5 = 0;
        WTF::Persistence::Decoder::operator>>();
      }
    }
  }
  *a2 = 0;
  a2[176] = 0;
  return std::__optional_destruct_base<WebKit::NetworkCache::Key,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v6, v3);
}

uint64_t WTF::Persistence::Decoder::operator>><WebKit::NetworkCache::Key,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  WTF::Persistence::Coder<WebKit::NetworkCache::Key>::decodeForPersistence(a1, (uint64_t)v6);
  std::__optional_storage_base<WebKit::NetworkCache::Key,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::NetworkCache::Key,false>>(a2, (uint64_t)v6);
  std::__optional_destruct_base<WebKit::NetworkCache::Key,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
  return a1;
}

uint64_t WebKit::NetworkCache::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6)
{
  char v11 = (WTF::WallTime *)WebKit::NetworkCache::Key::Key(a1, a2);
  WTF::WallTime::now(v11);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = v12;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 80), (const WebCore::ResourceResponseBase *)a3);
  uint64_t v13 = *(const void **)(a3 + 240);
  *(void *)(a1 + 320) = v13;
  if (v13) {
    CFRetain(v13);
  }
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a3 + 248);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 336, a6);
  *(unsigned char *)(a1 + 35objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(a1 + 55objc_destroyWeak(this + 2) = 0;
  uint64_t v14 = *a5;
  *a5 = 0;
  *(void *)(a1 + 560) = v14;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 696) = 0;
  *(unsigned char *)(a1 + 71objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(a1 + 720) = 0;
  *(unsigned char *)(a1 + 740) = 0;
  *(unsigned char *)(a1 + 744) = 0;
  *(unsigned char *)(a1 + 75objc_destroyWeak(this + 2) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(unsigned char *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 760) = a4;
  return a1;
}

uint64_t WebKit::NetworkCache::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::ResourceRequest *a4, uint64_t a5)
{
  uint64_t v9 = (WTF::WallTime *)WebKit::NetworkCache::Key::Key(a1, a2);
  WTF::WallTime::now(v9);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = v10;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 80), (const WebCore::ResourceResponseBase *)a3);
  char v11 = *(const void **)(a3 + 240);
  *(void *)(a1 + 320) = v11;
  if (v11) {
    CFRetain(v11);
  }
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a3 + 248);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 336, a5);
  *(unsigned char *)(a1 + 35objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(a1 + 55objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 696) = 0;
  *(unsigned char *)(a1 + 71objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(a1 + 720) = 0;
  *(unsigned char *)(a1 + 740) = 0;
  *(unsigned char *)(a1 + 744) = 0;
  *(unsigned char *)(a1 + 75objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 59objc_destroyWeak(this + 2) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(unsigned char *)(a1 + 680) = 0;
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::reset[abi:sn180100]((WebCore::ResourceRequestBase *)(a1 + 352));
  uint64_t v12 = WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 352));
  *(unsigned char *)(a1 + 55objc_destroyWeak(this + 2) = 1;
  uint64_t result = WebCore::ResourceRequestBase::setAsIsolatedCopy((WebCore::ResourceRequestBase *)v12, a4);
  if (*(unsigned char *)(a1 + 552))
  {
    WebCore::ResourceRequestBase::setHTTPBody();
    return a1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

WebKit::NetworkCache::Entry *WebKit::NetworkCache::Entry::Entry(WebKit::NetworkCache::Entry *this, const WebKit::NetworkCache::Entry *a2)
{
  uint64_t v4 = WebKit::NetworkCache::Key::Key((uint64_t)this, (uint64_t)a2);
  *(void *)(v4 + 7objc_destroyWeak(this + 2) = *((void *)a2 + 9);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v4 + 80), (const WebKit::NetworkCache::Entry *)((char *)a2 + 80));
  __int16 v5 = (const void *)*((void *)a2 + 40);
  *((void *)this + 40) = v5;
  if (v5) {
    CFRetain(v5);
  }
  *((unsigned char *)this + 328) = *((unsigned char *)a2 + 328);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 336, (uint64_t)a2 + 336);
  *((unsigned char *)this + 35objc_destroyWeak(this + 2) = 0;
  *((unsigned char *)this + 55objc_destroyWeak(this + 2) = 0;
  if (*((unsigned char *)a2 + 552))
  {
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)this + 44, (const String *)a2 + 44);
    *((unsigned char *)this + 55objc_destroyWeak(this + 2) = 1;
  }
  long long v6 = (atomic_uint *)*((void *)a2 + 70);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *((void *)this + 70) = v6;
  *((void *)this + 7objc_destroyWeak(this + 1) = 0;
  WebKit::NetworkCache::Key::Key((uint64_t)this + 576, (uint64_t)a2 + 576);
  *((void *)this + 8objc_destroyWeak(this + 1) = *((void *)a2 + 81);
  uint64_t v7 = (void *)*((void *)a2 + 82);
  *((void *)this + 8objc_destroyWeak(this + 2) = v7;
  if (v7) {
    os_retain(v7);
  }
  long long v8 = *(_OWORD *)((char *)a2 + 664);
  *((unsigned char *)this + 680) = *((unsigned char *)a2 + 680);
  *(_OWORD *)((char *)this + 664) = v8;
  uint64_t v9 = (void *)*((void *)a2 + 86);
  *((void *)this + 86) = v9;
  if (v9) {
    os_retain(v9);
  }
  long long v10 = *(_OWORD *)((char *)a2 + 696);
  *((unsigned char *)this + 71objc_destroyWeak(this + 2) = *((unsigned char *)a2 + 712);
  *(_OWORD *)((char *)this + 696) = v10;
  long long v11 = *((_OWORD *)a2 + 45);
  *(void *)((char *)this + 733) = *(void *)((char *)a2 + 733);
  *((_OWORD *)this + 45) = v11;
  *((unsigned char *)this + 744) = 0;
  *((unsigned char *)this + 75objc_destroyWeak(this + 2) = 0;
  *((unsigned char *)this + 760) = 0;
  return this;
}

void WebKit::NetworkCache::Entry::decodeStorageRecord(WebKit::NetworkCache::Entry *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = WTF::fastMalloc((WTF *)0x300);
  uint64_t v6 = WebKit::NetworkCache::Key::Key(v5, (uint64_t)this);
  *(void *)(v6 + 7objc_destroyWeak(this + 2) = *((void *)this + 9);
  uint64_t v7 = v6 + 80;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v6 + 80));
  *(void *)(v5 + 320) = 0;
  *(unsigned char *)(v5 + 328) = 0;
  *(unsigned char *)(v5 + 218) = *(unsigned char *)(v5 + 218) & 0xF1 | 4;
  *(unsigned char *)(v5 + 55objc_destroyWeak(this + 2) = 0;
  *(_OWORD *)(v5 + 336) = 0u;
  *(unsigned char *)(v5 + 35objc_destroyWeak(this + 2) = 0;
  *(_OWORD *)(v5 + 560) = 0u;
  WebKit::NetworkCache::Key::Key(v5 + 576, (uint64_t)this);
  *(void *)(v5 + 648) = *((void *)this + 9);
  long long v8 = (void *)*((void *)this + 10);
  *(void *)(v5 + 656) = v8;
  if (v8) {
    os_retain(v8);
  }
  long long v9 = *(_OWORD *)((char *)this + 88);
  *(unsigned char *)(v5 + 680) = *((unsigned char *)this + 104);
  *(_OWORD *)(v5 + 664) = v9;
  long long v10 = (void *)*((void *)this + 14);
  *(void *)(v5 + 688) = v10;
  if (v10) {
    os_retain(v10);
  }
  long long v11 = *(_OWORD *)((char *)this + 120);
  *(unsigned char *)(v5 + 71objc_destroyWeak(this + 2) = *((unsigned char *)this + 136);
  *(_OWORD *)(v5 + 696) = v11;
  long long v12 = *((_OWORD *)this + 9);
  *(void *)(v5 + 733) = *(void *)((char *)this + 157);
  *(_OWORD *)(v5 + 720) = v12;
  *(unsigned char *)(v5 + 744) = 0;
  *(unsigned char *)(v5 + 75objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(v5 + 760) = 0;
  WebKit::NetworkCache::Data::span((WebKit::NetworkCache::Entry *)((char *)this + 80));
  WTF::Persistence::Decoder::Decoder();
  LOBYTE(v28) = 0;
  char v49 = 0;
  WTF::Persistence::Coder<WebCore::ResourceResponse>::decodeForPersistence();
  if (v72)
  {
    uint64_t v14 = v51;
    uint64_t v51 = 0;
    uint64_t v28 = v14;
    long long v29 = v52;
    long long v30 = v53;
    LODWORD(v5objc_destroyWeak(this + 2) = v52 & 0xFFFFFFFE;
    uint64_t v15 = v54;
    uint64_t v54 = 0;
    uint64_t v31 = v15;
    uint64_t v32 = v55;
    long long v16 = v56;
    long long v56 = 0u;
    long long v33 = v16;
    long long v17 = v57;
    long long v57 = 0u;
    long long v34 = v17;
    *(void *)&long long v17 = v58;
    uint64_t v58 = 0;
    uint64_t v35 = v17;
    uint64_t v18 = v59;
    uint64_t v59 = 0;
    uint64_t v36 = v18;
    *(void *)&long long v17 = v60;
    uint64_t v60 = 0;
    uint64_t v37 = v17;
    uint64_t v19 = v61;
    uint64_t v61 = 0;
    uint64_t v38 = v19;
    LOBYTE(v39) = 0;
    char v40 = 0;
    if (v63)
    {
      uint64_t v25 = v62;
      uint64_t v62 = 0;
      uint64_t v39 = v25;
      char v40 = 1;
    }
    long long v44 = v67;
    long long v45 = v68;
    *(_OWORD *)long long v46 = *(_OWORD *)v69;
    *(_DWORD *)&v46[15] = *(_DWORD *)&v69[15];
    long long v41 = v64;
    long long v42 = v65;
    long long v43 = v66;
    uint64_t v20 = v70;
    uint64_t v70 = 0;
    uint64_t v47 = v20;
    char v48 = v71;
    char v49 = 1;
  }
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v51, v13);
  if (v49)
  {
    WebCore::ResourceResponseBase::operator=(v7, (uint64_t)&v28);
    uint64_t v22 = v47;
    uint64_t v47 = 0;
    char v23 = *(const void **)(v5 + 320);
    *(void *)(v5 + 320) = v22;
    if (v23) {
      CFRelease(v23);
    }
    *(unsigned char *)(v5 + 328) = v48;
    *(_WORD *)(v5 + 31objc_destroyWeak(this + 2) = *(_WORD *)(v5 + 312) & 0xC3FF | 0x800;
    WTF::Persistence::Decoder::operator>>();
  }
  *a2 = 0;
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v28, v21);
  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v50);
  if (v5)
  {
    WebKit::NetworkCache::Entry::~Entry((WebKit::NetworkCache::Entry *)v5, v24);
    WTF::fastFree(v26, v27);
  }
}

uint64_t WTF::Persistence::Decoder::operator>><WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,(void *)0>(uint64_t a1, uint64_t a2)
{
  LOBYTE(v6) = 0;
  char v7 = 0;
  WTF::Persistence::Decoder::operator>>();
  LOBYTE(v8) = 0;
  char v9 = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2, v4);
    *(unsigned char *)(a2 + 16) = 0;
  }
  return a1;
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4) {
    WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 16 * v4));
  }
  WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

uint64_t WTF::Persistence::Decoder::operator>><std::optional<WebCore::ResourceRequest>,(void *)0>(uint64_t a1, WebCore::ResourceRequestBase *a2)
{
  __int16 v7 = 0;
  WTF::Persistence::Decoder::operator>>();
  v5[0] = 0;
  char v6 = 0;
  if (*((unsigned char *)a2 + 208))
  {
    std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100](a2);
    *((unsigned char *)a2 + 208) = 0;
    if (v6) {
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v5);
    }
  }
  return a1;
}

BOOL WebKit::NetworkCache::Entry::hasReachedPrevalentResourceAgeCap(WebKit::NetworkCache::Entry *this)
{
  if (!*((unsigned char *)this + 752)) {
    return 0;
  }
  WebCore::computeCurrentAge();
  return v3 > *((double *)this + 93) || *((unsigned char *)this + 752) == 0;
}

void WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord(unsigned int **this)
{
  WebKit::NetworkCache::Entry::shareableResourceHandle((WebKit::NetworkCache::Entry *)this, v15);
  if (!v16) {
    goto LABEL_2;
  }
  WebCore::ShareableResourceHandle::tryWrapInSharedBuffer();
  uint64_t v10 = (uint64_t)v14;
  uint64_t v14 = 0;
  long long v11 = this[70];
  this[70] = (unsigned int *)v10;
  if (v11)
  {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, v9);
    uint64_t v13 = v14;
    uint64_t v14 = 0;
    if (v13) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v12);
    }
    uint64_t v10 = (uint64_t)this[70];
  }
  if (v10) {
    int v2 = 0;
  }
  else {
LABEL_2:
  }
    int v2 = 1;
  if (v16) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v15);
  }
  if (v2)
  {
    v15[0] = WebKit::NetworkCache::Data::span((WebKit::NetworkCache::Data *)(this + 86));
    v15[1] = v3;
    WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v14);
    uint64_t v5 = (uint64_t)v14;
    uint64_t v14 = 0;
    char v6 = this[70];
    this[70] = (unsigned int *)v5;
    if (v6)
    {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v4);
      uint64_t v8 = v14;
      uint64_t v14 = 0;
      if (v8) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v8, v7);
      }
    }
  }
}

unsigned int *WebKit::NetworkCache::Entry::shareableResourceHandle@<X0>(WebKit::NetworkCache::Entry *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = (WebCore::ShareableResource *)*((void *)this + 71);
  if (v4)
  {
    return (unsigned int *)WebCore::ShareableResource::createHandle(v4);
  }
  else
  {
    uint64_t v5 = (dispatch_data_t *)((char *)this + 688);
    WebKit::NetworkCache::Data::tryCreateSharedMemory((WebKit::NetworkCache::Entry *)((char *)this + 688), &v11);
    if (!v11) {
      goto LABEL_3;
    }
    char v9 = v11;
    long long v11 = 0;
    if (!*((void *)this + 87) && *v5) {
      dispatch_data_get_size(*v5);
    }
    WebCore::ShareableResource::create();
    uint64_t v7 = v10;
    uint64_t v8 = (unsigned int *)*((void *)this + 71);
    *((void *)this + 7objc_destroyWeak(this + 1) = v10;
    if (v8)
    {
      WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(v8);
      uint64_t v7 = *((void *)this + 71);
    }
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v9);
    if (v7)
    {
      WebCore::ShareableResource::createHandle(*((WebCore::ShareableResource **)this + 71));
    }
    else
    {
LABEL_3:
      *a2 = 0;
      a2[24] = 0;
    }
    uint64_t result = v11;
    long long v11 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
    }
  }
  return result;
}

WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++(WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 == **(void **)this + 16 * *(unsigned int *)(*(void *)this + 12))
  {
    uint64_t v3 = (WTF::StringImpl **)(*((void *)this + 2) + 16);
    *((void *)this + objc_destroyWeak(this + 2) = v3;
    goto LABEL_5;
  }
  *((void *)this + objc_destroyWeak(this + 1) = v2 + 16;
  if (!WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue((WTF::StringImpl **)this, (WTF::StringImpl **)(v2 + 16)))
  {
    uint64_t v3 = (WTF::StringImpl **)*((void *)this + 2);
LABEL_5:
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue(this, v3);
  }
  return this;
}

double WebKit::NetworkCache::fileTimes(WebKit::NetworkCache *this, const WTF::String *a2)
{
  WTF::FileSystemImpl::fileSystemRepresentation((uint64_t *)&v7, this, a2);
  if (v7) {
    uint64_t v2 = (char *)v7 + 16;
  }
  else {
    uint64_t v2 = 0;
  }
  int v4 = stat(v2, &v8);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1) {
      WTF::fastFree(v5, v3);
    }
    else {
      --*(_DWORD *)v5;
    }
  }
  double result = (double)v8.st_birthtimespec.tv_sec;
  if (v4) {
    return 0.0;
  }
  return result;
}

uint64_t WebKit::NetworkCache::updateFileModificationTimeIfNeeded(WebKit::NetworkCache *this, const WTF::String *a2)
{
  double v5 = WebKit::NetworkCache::fileTimes(this, a2);
  if (v5 == v6 || (double v8 = v6, result = WTF::WallTime::now(v3), v9 - v8 >= 3600.0))
  {
    return WTF::FileSystemImpl::updateFileModificationTime(this, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CA8D8;
  WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,std::optional<WebKit::NavigatingToAppBoundDomain>::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0::~$_0(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9CA8D8;
  WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,std::optional<WebKit::NavigatingToAppBoundDomain>::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0::~$_0((void *)a1 + 1);

  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::call(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3)
  {
    BOOL v4 = *a2 != 0;
    *(void *)(v2 + 7objc_destroyWeak(this + 2) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, (2 * v4));
    double v5 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return v5(v3);
  }
  return result;
}

WebKit::NetworkCache::Entry **std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>::reset[abi:sn180100](WebKit::NetworkCache::Entry ***a1, WebKit::NetworkCache::Entry **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkCache::SpeculativeLoad::~SpeculativeLoad(result);
    return (WebKit::NetworkCache::Entry **)WTF::fastFree(v4, v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::Cache(WebKit::NetworkProcess &,WTF::String const&,WTF::Ref<WebKit::NetworkCache::Storage,WTF::RawPtrTraits<WebKit::NetworkCache::Storage>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::Storage>> &&,WTF::OptionSet<WebKit::NetworkCache::CacheOption>,PAL::SessionID)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9CA900;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::Cache(WebKit::NetworkProcess &,WTF::String const&,WTF::Ref<WebKit::NetworkCache::Storage,WTF::RawPtrTraits<WebKit::NetworkCache::Storage>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::Storage>> &&,WTF::OptionSet<WebKit::NetworkCache::CacheOption>,PAL::SessionID)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CA900;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::NetworkCache::Cache *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::Cache(WebKit::NetworkProcess &,WTF::String const&,WTF::Ref<WebKit::NetworkCache::Storage,WTF::RawPtrTraits<WebKit::NetworkCache::Storage>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::Storage>> &&,WTF::OptionSet<WebKit::NetworkCache::CacheOption>,PAL::SessionID)::$_0,void,BOOL>::call(WebKit::NetworkCache::Cache *result, int a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      ++*(_DWORD *)v3;
      if (a2)
      {
        std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager>::reset[abi:sn180100]((WebKit::NetworkCache::SpeculativeLoadManager **)(v3 + 40), 0);
      }
      else
      {
        double v5 = *(atomic_uchar *volatile **)(v3 + 16);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v5);
        double v6 = (WebKit::NetworkCache::SpeculativeLoadManager *)WTF::fastMalloc((WTF *)0x48);
        WebKit::NetworkCache::SpeculativeLoadManager::SpeculativeLoadManager((uint64_t)v6, v3, (atomic_uchar **)v5);
        std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager>::reset[abi:sn180100]((WebKit::NetworkCache::SpeculativeLoadManager **)(v3 + 40), v6);
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*(atomic_uchar **)v5);
      }
      return WTF::RefCounted<WebKit::NetworkCache::Cache>::deref((WebKit::NetworkCache::Cache *)v3, v4);
    }
  }
  return result;
}

void WebCore::LowPowerModeNotifier::operator delete(WebCore::LowPowerModeNotifier *a1, size_t a2)
{
  WebCore::LowPowerModeNotifier::~LowPowerModeNotifier(a1);
  if (*v3)
  {
    bzero(v3, a2);
  }
  else
  {
    WTF::fastFree((WTF *)v3, v4);
  }
}

uint64_t WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    BOOL v4 = (unsigned int ***)(a1 + 32);
    do
    {
      if (*(v4 - 3) != (unsigned int **)-1 && *v4) {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v4, a2);
      }
      v4 += 6;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    do
    {
      if (a1[2] != (WTF::StringImpl *)-1) {
        a1 = WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>::~KeyValuePair(a1, a2);
      }
      a1 += 10;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

WTF::StringImpl **WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>::~KeyValuePair(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    std::default_delete<WebKit::NetworkCache::AsyncRevalidation>::operator()[abi:sn180100](v3);
  }
  BOOL v4 = a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  double v5 = a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  double v6 = a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t std::default_delete<WebKit::NetworkCache::AsyncRevalidation>::operator()[abi:sn180100](WTF *a1)
{
  uint64_t v2 = *((void *)a1 + 9);
  *((void *)a1 + 9) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)a1 + objc_destroyWeak(this + 2) = &unk_1EE9BA5F0;
  uint64_t v3 = *((void *)a1 + 8);
  *((void *)a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::TimerBase::~TimerBase((WTF *)((char *)a1 + 16));
  std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>::reset[abi:sn180100]((WebKit::NetworkCache::Entry ***)a1 + 1, 0);
  if (*(void *)a1)
  {
    *(void *)(*(void *)a1 + 8) = 0;
    double v5 = *(unsigned int **)a1;
    *(void *)a1 = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  else
  {
    *(void *)a1 = 0;
  }

  return WTF::fastFree(a1, v4);
}

void *WTF::NeverDestroyed<WTF::AtomString const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 8) >= 2uLL)
  {
    WTF::AtomStringImpl::add();
    uint64_t v3 = v5;
  }
  else
  {
    uint64_t v3 = *MEMORY[0x1E4F30970];
    *(_DWORD *)*MEMORY[0x1E4F30970] += 2;
  }
  *a1 = v3;
  return a1;
}

uint64_t WebKit::NetworkCache::isMediaMIMEType(WebKit::NetworkCache *this, const WTF::String *a2)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    if (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(result, (uint64_t)"video/", 6uLL))
    {
      return 1;
    }
    else
    {
      uint64_t result = *(void *)this;
      if (*(void *)this)
      {
        return WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(result, (uint64_t)"audio/", 6uLL);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    for (uint64_t i = a1; ; i += 40)
    {
      uint64_t v5 = *(unsigned int *)(i + 24);
      if (v5) {
        break;
      }
      if (*(void *)i != -1) {
        goto LABEL_5;
      }
LABEL_6:
      if (!--v3) {
        return WTF::fastFree((WTF *)(a1 - 16), a2);
      }
    }
    if (v5 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::fastFree((WTF *)(a1 - 16), a2);
    }
LABEL_5:
    ((void (*)(char *, uint64_t))off_1EE9CA8B8[v5])(&v7, i);
    *(_DWORD *)(i + 24) = -1;
    goto LABEL_6;
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__optional_destruct_base<WebKit::NetworkCache::SubresourceInfo,false>::__optional_destruct_base[abi:sn180100]<WebKit::NetworkCache::SubresourceInfo>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  uint64_t v5 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  a2[2] = 0;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a2[3];
  a2[3] = 0;
  *(void *)(a1 + 24) = v7;
  long long v8 = *((_OWORD *)a2 + 2);
  long long v9 = *((_OWORD *)a2 + 3);
  *(void *)(a1 + 64) = a2[8];
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  long long v10 = *(_OWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 87) = *(_DWORD *)((char *)a2 + 87);
  *(_OWORD *)(a1 + 7objc_destroyWeak(this + 2) = v10;
  WTF::URL::URL(a1 + 96, a2 + 12);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v11 = a2[17];
  a2[17] = 0;
  *(void *)(a1 + 136) = v11;
  LODWORD(v1objc_destroyWeak(this + 1) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = 0;
  *(_DWORD *)(a1 + 144) = v11;
  LODWORD(v1objc_destroyWeak(this + 1) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = 0;
  *(_DWORD *)(a1 + 148) = v11;
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v12 = a2[19];
  a2[19] = 0;
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = v12;
  LODWORD(v1objc_destroyWeak(this + 2) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = 0;
  *(_DWORD *)(a1 + 160) = v12;
  LODWORD(v1objc_destroyWeak(this + 2) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 4objc_destroyWeak(this + 1) = 0;
  *(_DWORD *)(a1 + 164) = v12;
  *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
  *(unsigned char *)(a1 + 176) = 1;
  return a1;
}

void WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo(WebKit::NetworkCache::SubresourceInfo *this)
{
  uint64_t v2 = (WebKit::NetworkCache::SubresourceInfo *)((char *)this + 136);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebKit::NetworkCache::SubresourceInfo *)((char *)this + 152));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(v2);
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 12);
  *((void *)this + 1objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v3);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  long long v8 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v3);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
}

uint64_t std::__optional_destruct_base<WebKit::NetworkCache::Key,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

void std::__optional_destruct_base<WebCore::ResourceRequest,false>::reset[abi:sn180100](WebCore::ResourceRequestBase *this)
{
  if (*((unsigned char *)this + 200))
  {
    uint64_t v2 = (const void *)*((void *)this + 24);
    *((void *)this + 24) = 0;
    if (v2) {
      CFRelease(v2);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase(this);
    *((unsigned char *)this + 200) = 0;
  }
}

void **WTF::OSObjectPtr<dispatch_data_s *>::operator=(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    os_retain(*a2);
  }
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4) {
    os_release(v4);
  }
  return a1;
}

void std::__optional_storage_base<WebCore::ResourceRequest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ResourceRequest,false>>(WebCore::ResourceRequestBase *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 200) == *(unsigned __int8 *)(a2 + 200))
  {
    if (*((unsigned char *)this + 200))
    {
      WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)this, a2);
      WTF::String::operator=((uint64_t *)this + 19, (uint64_t *)(a2 + 152));
      WTF::String::operator=((uint64_t *)this + 20, (uint64_t *)(a2 + 160));
      uint64_t v4 = *(void *)(a2 + 168);
      *(void *)(a2 + 168) = 0;
      uint64_t v5 = (WTF::RefCountedBase *)*((void *)this + 21);
      *((void *)this + 2objc_destroyWeak(this + 1) = v4;
      if (v5) {
        WTF::RefCounted<WebCore::FormData>::deref(v5);
      }
      uint64_t v6 = *(void *)(a2 + 176);
      *((unsigned char *)this + 184) = *(unsigned char *)(a2 + 184);
      *((void *)this + 2objc_destroyWeak(this + 2) = v6;
      uint64_t v7 = *(void *)(a2 + 192);
      *(void *)(a2 + 19objc_destroyWeak(this + 2) = 0;
      long long v8 = (const void *)*((void *)this + 24);
      *((void *)this + 24) = v7;
      if (v8)
      {
        CFRelease(v8);
      }
    }
  }
  else if (*((unsigned char *)this + 200))
  {
    std::__optional_destruct_base<WebCore::ResourceRequest,false>::reset[abi:sn180100](this);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::ResourceRequest,WebCore::ResourceRequest,WebCore::ResourceRequest*>((uint64_t)this, a2);
    *((unsigned char *)this + 200) = 1;
  }
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ResourceRequest,WebCore::ResourceRequest,WebCore::ResourceRequest*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    WTF::URL::URL(result, (uint64_t *)a2);
    WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
    *(void *)(v3 + 80) = *(void *)(a2 + 80);
    uint64_t v5 = *(void *)(a2 + 88);
    *(void *)(a2 + 88) = 0;
    *(void *)(v3 + 96) = 0;
    *(void *)(v3 + 104) = 0;
    *(void *)(v3 + 88) = v5;
    uint64_t v6 = *(void *)(a2 + 96);
    *(void *)(a2 + 96) = 0;
    *(void *)(v3 + 96) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(a2 + 104) = 0;
    *(_DWORD *)(v3 + 104) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 108);
    *(_DWORD *)(a2 + 108) = 0;
    *(_DWORD *)(v3 + 108) = v6;
    *(void *)(v3 + 11objc_destroyWeak(this + 2) = 0;
    *(void *)(v3 + 120) = 0;
    uint64_t v7 = *(void *)(a2 + 112);
    *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
    *(void *)(v3 + 11objc_destroyWeak(this + 2) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 120);
    *(_DWORD *)(a2 + 120) = 0;
    *(_DWORD *)(v3 + 120) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 124);
    *(_DWORD *)(a2 + 124) = 0;
    *(_DWORD *)(v3 + 124) = v7;
    *(void *)(v3 + 128) = 0;
    *(void *)(v3 + 136) = 0;
    uint64_t v8 = *(void *)(a2 + 128);
    *(void *)(a2 + 128) = 0;
    *(void *)(v3 + 128) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(a2 + 136) = 0;
    *(_DWORD *)(v3 + 136) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 140);
    *(_DWORD *)(a2 + 140) = 0;
    *(_DWORD *)(v3 + 140) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 144);
    *(unsigned char *)(v3 + 148) = *(unsigned char *)(a2 + 148);
    *(_DWORD *)(v3 + 144) = v8;
    uint64_t v9 = *(void *)(a2 + 152);
    *(void *)(a2 + 15objc_destroyWeak(this + 2) = 0;
    *(void *)(v3 + 15objc_destroyWeak(this + 2) = v9;
    uint64_t v10 = *(void *)(a2 + 160);
    *(void *)(a2 + 160) = 0;
    *(void *)(v3 + 160) = v10;
    uint64_t v11 = *(void *)(a2 + 168);
    *(void *)(a2 + 168) = 0;
    *(void *)(v3 + 168) = v11;
    uint64_t v12 = *(void *)(a2 + 176);
    *(unsigned char *)(v3 + 184) = *(unsigned char *)(a2 + 184);
    *(void *)(v3 + 176) = v12;
    uint64_t v13 = *(void *)(a2 + 192);
    *(void *)(a2 + 19objc_destroyWeak(this + 2) = 0;
    *(void *)(v3 + 19objc_destroyWeak(this + 2) = v13;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator(WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *this, const WebCore::HTTPHeaderMap *a2, WTF::StringImpl **a3, const WebCore::HTTPHeaderMap::UncommonHeader *a4)
{
  *(void *)this = a2;
  *((void *)this + objc_destroyWeak(this + 1) = a3;
  *((void *)this + objc_destroyWeak(this + 2) = a4;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 3objc_destroyWeak(this + 2) = 0;
  *((unsigned char *)this + 34) = 0;
  *((void *)this + 5) = 0;
  if (!WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue((WTF::StringImpl **)this, a3)) {
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue(this, *((WTF::StringImpl ***)this + 2));
  }
  return this;
}

BOOL WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue(WTF::StringImpl **this, WTF::StringImpl **a2)
{
  uint64_t v3 = (const WebCore::HTTPHeaderMap::CommonHeader *)(*(void *)*this + 16 * *((unsigned int *)*this + 3));
  if (v3 != (const WebCore::HTTPHeaderMap::CommonHeader *)a2)
  {
    WebCore::httpHeaderNameString();
    if (v5)
    {
      uint64_t v5 = (WTF::StringImpl *)((char *)v5 - 1);
      if (v5)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v6 = v9;
      }
      else
      {
        uint64_t v6 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v7 = this[3];
    this[3] = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    *((_WORD *)this + 16) = *(_WORD *)a2;
    *((unsigned char *)this + 34) = 1;
    WTF::String::operator=((uint64_t *)this + 5, a2 + 1);
  }
  return v3 != (const WebCore::HTTPHeaderMap::CommonHeader *)a2;
}

BOOL WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue(WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *this, WTF::StringImpl **a2)
{
  uint64_t v3 = (const WebCore::HTTPHeaderMap::UncommonHeader *)(*(void *)(*(void *)this + 16)
                                                      + 16 * *(unsigned int *)(*(void *)this + 28));
  if (v3 != (const WebCore::HTTPHeaderMap::UncommonHeader *)a2)
  {
    WTF::String::operator=((uint64_t *)this + 3, a2);
    if (*((unsigned char *)this + 34)) {
      *((unsigned char *)this + 34) = 0;
    }
    WTF::String::operator=((uint64_t *)this + 5, a2 + 1);
  }
  return v3 != (const WebCore::HTTPHeaderMap::UncommonHeader *)a2;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebSharedWorkerServerToContextConnection::*&)(void),WebKit::WebSharedWorkerServerToContextConnection*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServerToContextConnection::launchSharedWorker(WebKit::WebSharedWorker &)::$_1,void,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier> const&>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9CA9A0;
  uint64_t v10 = v7;
  WebKit::WebSharedWorkerServerToContextConnection::postConnectEvent(v5, v6, a4, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  if (v10)
  {
    uint64_t v9 = *(uint64_t (**)(void))(*v10 + 8);
    return v9();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSharedWorkerContextManagerConnection::PostConnectEvent,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CA9C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSharedWorkerContextManagerConnection::PostConnectEvent,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CA9C8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSharedWorkerContextManagerConnection::PostConnectEvent,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = v4 + 16 * i;
      if (*(void *)(v10 + 8) != -1 && *(_OWORD *)v10 != 0)
      {
        uint64_t v11 = *a1;
        if (*a1) {
          unsigned int v12 = *(_DWORD *)(v11 - 8);
        }
        else {
          unsigned int v12 = 0;
        }
        unsigned int v16 = -1640531527;
        __int16 v17 = 0;
        char v18 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v16, (void *)(v4 + 16 * i));
        int v13 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v16);
        int v14 = 0;
        do
        {
          uint64_t v15 = v13 & v12;
          int v13 = ++v14 + v15;
        }
        while (*(_OWORD *)(v11 + 16 * v15) != 0);
        *(_OWORD *)(v11 + 16 * v15) = *(_OWORD *)v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(a1, *(unsigned char *)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  uint64_t v4 = *(uint64_t **)(a2 + 16);

  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NetworkCache::AsyncRevalidation::*&)(void),WebKit::NetworkCache::AsyncRevalidation*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  int v2 = (uint64_t (*)(void *))a1[1];
  unsigned int v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + objc_destroyWeak(this + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v6 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v5 = v9 == 0;
  }
  else
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v4) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4) {
      return this;
    }
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EE9CAC98;
  *(void *)(v8 + 8) = v1;
  *(void *)(v8 + 16) = v6;
  *(unsigned char *)(v8 + 24) = v5;
  uint64_t v10 = (atomic_uchar *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10) {
    return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
  }
  return this;
}

WebKit::NetworkCache::Storage *WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF **)(a1 + 8);
  uint64_t result = *(WebKit::NetworkCache::Storage **)(a1 + 16);
  if (result)
  {
    WebKit::NetworkCache::Storage::~Storage(result, a2);
    uint64_t result = (WebKit::NetworkCache::Storage *)WTF::fastFree(v5, v6);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    return (WebKit::NetworkCache::Storage *)WTF::fastFree(v4, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  if (a2)
  {
    uint64_t v8 = a2;
    uint64_t v9 = (void *)(result + 88);
    do
    {
      *(_OWORD *)(v9 - 7) = 0uLL;
      *(_OWORD *)(v9 - 9) = 0uLL;
      void *v9 = 0;
      v9 += 10;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v4;
    do
    {
      unsigned int v12 = (uint64_t *)(v3 + 80 * v10);
      uint64_t v13 = v12[2];
      if (v13 != -1)
      {
        if (v13)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          int v16 = 0;
          int v17 = *((_DWORD *)v12 + 8);
          do
          {
            unsigned int v18 = v17 & v15;
            uint64_t v19 = v14 + 80 * (v17 & v15);
            int v17 = ++v16 + (v17 & v15);
          }
          while (*(void *)(v19 + 16));
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>::~KeyValuePair((WTF::StringImpl **)(v14 + 80 * v18), v7);
          uint64_t v20 = *v12;
          uint64_t *v12 = 0;
          *(void *)uint64_t v19 = v20;
          uint64_t v21 = v12[1];
          v12[1] = 0;
          *(void *)(v19 + 8) = v21;
          uint64_t v22 = v12[2];
          uint64_t v12[2] = 0;
          *(void *)(v19 + 16) = v22;
          uint64_t v23 = v12[3];
          _OWORD v12[3] = 0;
          *(void *)(v19 + 24) = v23;
          long long v24 = *((_OWORD *)v12 + 2);
          long long v25 = *((_OWORD *)v12 + 3);
          *(void *)(v19 + 64) = v12[8];
          *(_OWORD *)(v19 + 3objc_destroyWeak(this + 2) = v24;
          *(_OWORD *)(v19 + 48) = v25;
          uint64_t v26 = v3 + 80 * v10;
          uint64_t v27 = *(void *)(v26 + 72);
          *(void *)(v26 + 7objc_destroyWeak(this + 2) = 0;
          *(void *)(v14 + 80 * v18 + 7objc_destroyWeak(this + 2) = v27;
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>::~KeyValuePair((WTF::StringImpl **)v26, v28);
        }
        else
        {
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>::~KeyValuePair((WTF::StringImpl **)(v3 + 80 * v10), v7);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v3)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v3 - 16), v7);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 48 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    do
    {
      uint64_t v14 = v4 + 48 * v11;
      uint64_t v8 = (void *)(v14 + 8);
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15 != -1)
      {
        if (v15 || *(_OWORD *)(v14 + 16) != 0)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            unsigned int v18 = 0;
          }
          unsigned int v34 = -1640531527;
          __int16 v35 = 0;
          char v36 = 0;
          WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v34, v8, (void *)(v14 + 16));
          int v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v34);
          for (i = 0; ; int v19 = i + v21)
          {
            unsigned int v21 = v19 & v18;
            uint64_t v22 = v17 + 48 * (v19 & v18);
            if (!*(void *)(v22 + 8) && *(_OWORD *)(v22 + 16) == 0) {
              break;
            }
            ++i;
          }
          uint64_t v23 = v17 + 48 * v21;
          uint64_t v26 = *(unsigned int ***)(v23 + 32);
          long long v25 = (void *)(v23 + 32);
          long long v24 = v26;
          if (v26) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v24, v8);
          }
          long long v27 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)uint64_t v22 = *(_OWORD *)v14;
          *(_OWORD *)(v22 + 16) = v27;
          uint64_t v28 = v4 + 48 * v11;
          *long long v25 = 0;
          uint64_t v29 = *(void *)(v28 + 32);
          *(void *)(v28 + 3objc_destroyWeak(this + 2) = 0;
          *long long v25 = v29;
          *(void *)(v17 + 48 * v21 + 40) = *(void *)(v28 + 40);
          long long v30 = *(unsigned int ***)(v28 + 32);
          if (v30) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v30, v8);
          }
          if (v14 == a3) {
            uint64_t v12 = v17 + 48 * v21;
          }
        }
        else
        {
          int v16 = *(unsigned int ***)(v4 + 48 * v11 + 32);
          if (v16) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v16, v8);
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

unsigned int *WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(unsigned int *result, void *a2, void *a3)
{
  int v3 = *result + (unsigned __int16)*a2;
  unsigned int v4 = (*a2 >> 5) & 0x7FFF800 ^ (v3 << 16) ^ v3;
  int v5 = v4 + (unsigned __int16)WORD2(*a2) + (v4 >> 11);
  unsigned int v6 = (*a2 >> 37) & 0x7FFF800 ^ (v5 << 16) ^ v5;
  int v7 = v6 + (unsigned __int16)*a3 + (v6 >> 11);
  unsigned int v8 = (*a3 >> 5) & 0x7FFF800 ^ (v7 << 16) ^ v7;
  int v9 = v8 + (unsigned __int16)WORD2(*a3) + (v8 >> 11);
  unsigned int v10 = (*a3 >> 37) & 0x7FFF800 ^ (v9 << 16) ^ v9;
  unsigned int v11 = v10 + (v10 >> 11);
  *uint64_t result = v11;
  unint64_t v12 = a3[1];
  unsigned int v13 = (v12 >> 5) & 0x7FFF800 ^ ((v11 + (unsigned __int16)v12) << 16) ^ (v11 + (unsigned __int16)v12);
  int v14 = v13 + WORD2(v12) + (v13 >> 11);
  LODWORD(v1objc_destroyWeak(this + 2) = (v12 >> 37) & 0x7FFF800 ^ (v14 << 16);
  *uint64_t result = (v12 ^ v14) + ((v12 ^ v14) >> 11);
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12NetworkCache5Cache30startAsyncRevalidationIfNeededERKN7WebCore15ResourceRequestERKNS3_3KeyEONSt3__110unique_ptrINS3_5EntryENSC_14default_deleteISE_EEEERKNS3_13GlobalFrameIDENSC_8optionalINS2_26NavigatingToAppBoundDomainEEEbNS_9OptionSetINS5_26AdvancedPrivacyProtectionsEEEENK3__0clEvEUlT_E_vJNS3_17AsyncRevalidation6ResultEEED1Ev(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CAA18;
  int v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unsigned int v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unsigned int v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12NetworkCache5Cache30startAsyncRevalidationIfNeededERKN7WebCore15ResourceRequestERKNS3_3KeyEONSt3__110unique_ptrINS3_5EntryENSC_14default_deleteISE_EEEERKNS3_13GlobalFrameIDENSC_8optionalINS2_26NavigatingToAppBoundDomainEEEbNS_9OptionSetINS5_26AdvancedPrivacyProtectionsEEEENK3__0clEvEUlT_E_vJNS3_17AsyncRevalidation6ResultEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CAA18;
  int v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unsigned int v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unsigned int v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12NetworkCache5Cache30startAsyncRevalidationIfNeededERKN7WebCore15ResourceRequestERKNS3_3KeyEONSt3__110unique_ptrINS3_5EntryENSC_14default_deleteISE_EEEERKNS3_13GlobalFrameIDENSC_8optionalINS2_26NavigatingToAppBoundDomainEEEbNS_9OptionSetINS5_26AdvancedPrivacyProtectionsEEEENK3__0clEvEUlT_E_vJNS3_17AsyncRevalidation6ResultEEE4callESW_(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v6 = *(void *)(v3 + 48);
  unsigned int v4 = (uint64_t *)(v3 + 48);
  uint64_t v5 = v6;
  if (v6)
  {
    int v7 = 0;
    uint64_t v8 = result + 16;
    unsigned int v9 = *(_DWORD *)(v5 - 8);
    for (int i = *(_DWORD *)(result + 48); ; int i = v7 + v11)
    {
      unsigned int v11 = i & v9;
      uint64_t v12 = v5 + 80 * (i & v9);
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13 != -1)
      {
        if (!v13)
        {
          uint64_t v14 = *v4;
          if (!*v4) {
            return result;
          }
          uint64_t v12 = v14 + 80 * *(unsigned int *)(v14 - 4);
          goto LABEL_10;
        }
        uint64_t result = WebKit::NetworkCache::Key::operator==(v5 + 80 * v11, v8, a3);
        if (result) {
          break;
        }
      }
      ++v7;
    }
    uint64_t v14 = *v4;
    if (!*v4) {
      goto LABEL_11;
    }
LABEL_10:
    v14 += 80 * *(unsigned int *)(v14 - 4);
    if (v14 == v12) {
      return result;
    }
LABEL_11:
    if (v14 != v12)
    {
      WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebKit::NetworkCache::Key>,WebKit::NetworkCache::Key>((WTF::StringImpl **)v12, a2);
      uint64_t result = *(void *)(v12 + 72);
      *(void *)(v12 + 7objc_destroyWeak(this + 2) = 0;
      if (result) {
        uint64_t result = std::default_delete<WebKit::NetworkCache::AsyncRevalidation>::operator()[abi:sn180100]((WTF *)result);
      }
      ++*(_DWORD *)(*v4 - 16);
      uint64_t v15 = *v4;
      if (*v4) {
        int v16 = *(_DWORD *)(v15 - 12) - 1;
      }
      else {
        int v16 = -1;
      }
      *(_DWORD *)(v15 - 1objc_destroyWeak(this + 2) = v16;
      uint64_t v17 = *v4;
      if (*v4)
      {
        unsigned int v18 = 6 * *(_DWORD *)(v17 - 12);
        unsigned int v19 = *(_DWORD *)(v17 - 4);
        if (v18 < v19 && v19 >= 9)
        {
          return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(v4, v19 >> 1);
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebKit::NetworkCache::Key>,WebKit::NetworkCache::Key>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unsigned int v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = (WTF::StringImpl *)-1;
  a1[3] = 0;
  return result;
}

uint64_t WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::remove(uint64_t *a1, void *a2)
{
  if (*a1)
  {
    uint64_t v3 = *a1 + 48 * *(unsigned int *)(*a1 - 4);
    if ((void *)v3 != a2) {
      goto LABEL_4;
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v3 = 0;
LABEL_4:
  if ((void *)v3 != a2)
  {
    a2[1] = -1;
    unsigned int v4 = (unsigned int **)a2[4];
    if (v4) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, a2);
    }
    ++*(_DWORD *)(*a1 - 16);
    uint64_t v5 = *a1;
    if (*a1) {
      int v6 = *(_DWORD *)(v5 - 12) - 1;
    }
    else {
      int v6 = -1;
    }
    *(_DWORD *)(v5 - 1objc_destroyWeak(this + 2) = v6;
    uint64_t v7 = *a1;
    if (*a1)
    {
      unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
      unsigned int v9 = *(_DWORD *)(v7 - 4);
      if (v8 < v9 && v9 >= 9) {
        WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::rehash(a1, v9 >> 1, 0);
      }
    }
  }
  return 1;
}

void *WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(uint64_t *a1, void *a2)
{
  if (!*a1) {
    return 0;
  }
  uint64_t result = WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(a1, a2);
  uint64_t v4 = *a1;
  if (!result)
  {
    if (v4) {
      return (void *)(v4 + 48 * *(unsigned int *)(v4 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

void *WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  unsigned int v11 = -1640531527;
  __int16 v12 = 0;
  char v13 = 0;
  WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v11, a2 + 1, a2 + 2);
  int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v11);
  for (i = 0; ; int v5 = i + v7)
  {
    int v7 = v5 & v4;
    uint64_t result = (void *)(v2 + 48 * (v5 & v4));
    uint64_t v9 = result[1];
    if (v9 == a2[1] && result[2] == a2[2] && result[3] == a2[3]) {
      break;
    }
    if (!v9 && *((_OWORD *)result + 1) == 0) {
      return 0;
    }
    ++i;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CAA40;
  uint64_t v2 = a1[27];
  a1[27] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[26];
  a1[26] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  unsigned int v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 32);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CAA40;
  uint64_t v2 = a1[27];
  a1[27] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[26];
  a1[26] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  int v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 32);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree((WTF *)a1, v4);
}

WebKit::NetworkCache::Entry *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::call(uint64_t a1, WebKit::NetworkCache::Entry **a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = a1 + 224;
  *(unsigned char *)(a1 + 328) = 1;
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 336);
    WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 232), &v14);
    if (WebCore::verifyVaryingRequestHeaders())
    {
      char v13 = v3;
      WebKit::NetworkCache::Cache::completeRetrieve((WTF::MonotonicTime *)(a1 + 216), &v13, v4);
      uint64_t result = v13;
      if (!v13) {
        return result;
      }
      uint64_t v3 = 0;
LABEL_8:
      WebKit::NetworkCache::Entry::~Entry(result, v6);
      uint64_t result = (WebKit::NetworkCache::Entry *)WTF::fastFree(v8, v9);
      if (!v3) {
        return result;
      }
      goto LABEL_9;
    }
  }
  __int16 v12 = 0;
  WebKit::NetworkCache::Cache::completeRetrieve((WTF::MonotonicTime *)(a1 + 216), &v12, v4);
  uint64_t result = v12;
  if (v12) {
    goto LABEL_8;
  }
  if (!v3) {
    return result;
  }
LABEL_9:
  WebKit::NetworkCache::Entry::~Entry(v3, v6);

  return (WebKit::NetworkCache::Entry *)WTF::fastFree(v10, v11);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::Timings const&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CAA68;
  WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::~$_1(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::Timings const&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CAA68;
  WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::~$_1((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

BOOL WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,std::optional<WebKit::NetworkCache::GlobalFrameID>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::Timings const&>::call(void *a1, WebKit::NetworkCache::Entry **a2, void *__src)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = (uint64_t)(a1 + 29);
  memmove(a1 + 32, __src, 0x4BuLL);
  if (v4)
  {
    WebKit::NetworkCache::Entry::decodeStorageRecord(v4, &v31);
    uint64_t v6 = v31;
    if (!v31)
    {
      int v9 = 5;
      goto LABEL_6;
    }
    uint64_t v7 = a1[52];
    unsigned int v8 = (WTF::StringImpl *)a1[53];
    if (WebCore::ResourceRequestBase::isConditional((WebCore::ResourceRequestBase *)(a1 + 3))
      && !*(unsigned char *)(v6 + 552))
    {
LABEL_5:
      *(_WORD *)(v6 + 31objc_destroyWeak(this + 2) = *(_WORD *)(v6 + 312) & 0xC3FF | 0xC00;
      int v9 = 1;
LABEL_6:
      long long v30 = (WebKit::NetworkCache::Entry *)v6;
      WebKit::NetworkCache::Cache::completeRetrieve((WTF::MonotonicTime *)(a1 + 28), &v30, v5);
      if (v30)
      {
        WebKit::NetworkCache::Entry::~Entry(v30, v10);
        WTF::fastFree(v16, v17);
      }
      BOOL v11 = v9 != 5;
      WebKit::NetworkCache::Storage::Record::~Record(v4, v10);
      WTF::fastFree(v12, v13);
      return v11;
    }
    v33[0] = v8;
    WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 232), v33);
    if (WebCore::verifyVaryingRequestHeaders())
    {
      if ((WebCore::ResourceRequestBase::cachePolicy((WebCore::ResourceRequestBase *)(a1 + 3)) & 0xFE) == 2) {
        goto LABEL_31;
      }
      uint64_t v19 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 3));
      if ((*(unsigned char *)(v19 + 8) & 1) != 0
        && *(void *)v19
        && *(_DWORD *)(*(void *)v19 + 4) > *(_DWORD *)(v19 + 36)
        && *(unsigned char *)(v6 + 552))
      {
        int v9 = 7;
        goto LABEL_30;
      }
      v33[0] = v8;
      WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 224), v33);
      uint64_t v20 = (WebCore *)WebCore::ResourceRequestBase::httpHeaderFields((WebCore::ResourceRequestBase *)(a1 + 3));
      WebCore::parseCacheControlDirectives((uint64_t *)v33, v20, v21);
      if ((v34 & 1) == 0 && *(double *)v33 != 0.0)
      {
        uint64_t v22 = v33[1];
        if ((WebCore::ResourceResponseBase::cacheControlContainsNoCache((WebCore::ResourceResponseBase *)(v6 + 80)) & 1) == 0)
        {
          WebCore::computeCurrentAge();
          double v24 = v23;
          WebCore::computeFreshnessLifetimeForHTTPFamily();
          if (v24 - v25 <= *(double *)&v22)
          {
LABEL_31:
            int v9 = 0;
            goto LABEL_6;
          }
        }
      }
      if (WebCore::ResourceResponseBase::hasCacheValidatorFields((WebCore::ResourceResponseBase *)(v6 + 80)))
      {
        if (!*(unsigned char *)(v6 + 552)) {
          goto LABEL_5;
        }
        int v9 = 6;
      }
      else
      {
        int v9 = 4;
      }
    }
    else
    {
      int v9 = 3;
    }
LABEL_30:
    WebKit::NetworkCache::Entry::~Entry((WebKit::NetworkCache::Entry *)v6, v18);
    WTF::fastFree(v28, v29);
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  uint64_t v32 = 0;
  WebKit::NetworkCache::Cache::completeRetrieve((WTF::MonotonicTime *)(a1 + 28), &v32, v5);
  if (v32)
  {
    WebKit::NetworkCache::Entry::~Entry(v32, v15);
    WTF::fastFree(v26, v27);
  }
  return 0;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::store(WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebKit::PrivateRelayed,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::Function<void ()(WebKit::NetworkCache::MappedBody &&)> &&)::$_0,void,WebKit::NetworkCache::Data const&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CAA90;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WebKit::NetworkCache::Cache *)a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::store(WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebKit::PrivateRelayed,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::Function<void ()(WebKit::NetworkCache::MappedBody &&)> &&)::$_0,void,WebKit::NetworkCache::Data const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CAA90;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WebKit::NetworkCache::Cache *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::store(WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebKit::PrivateRelayed,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::Function<void ()(WebKit::NetworkCache::MappedBody &&)> &&)::$_0,void,WebKit::NetworkCache::Data const&>::call(uint64_t a1, WebKit::NetworkCache::Data *this)
{
  unsigned int v18 = 0;
  v19[0] = 0;
  char v21 = 0;
  WebKit::NetworkCache::Data::tryCreateSharedMemory(this, &v17);
  if (!v17)
  {
LABEL_15:
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9) {
      (*(void (**)(uint64_t, WebCore::ShareableResource **))(*(void *)v9 + 16))(v9, &v18);
    }
    goto LABEL_17;
  }
  int v16 = v17;
  uint64_t v17 = 0;
  if (!*((void *)this + 1) && *(void *)this) {
    dispatch_data_get_size(*(dispatch_data_t *)this);
  }
  WebCore::ShareableResource::create();
  uint64_t v4 = v13;
  char v13 = 0;
  uint64_t v5 = (unsigned int *)v18;
  unsigned int v18 = v4;
  if (v5)
  {
    WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(v5);
    char v13 = 0;
  }
  uint64_t v6 = v16;
  int v16 = 0;
  WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v6);
  if (v18)
  {
    WebCore::ShareableResource::createHandle((uint64_t *)&v13, v18);
    if (v15)
    {
      if (v21)
      {
        WTF::MachSendRight::operator=();
        long long v7 = v14;
      }
      else
      {
        WTF::MachSendRight::MachSendRight();
        long long v7 = v14;
        char v21 = 1;
      }
      long long v20 = v7;
      if (v15) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v13);
      }
    }
    unsigned int v8 = v17;
    uint64_t v17 = 0;
    if (v8) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
    }
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11) {
    (*(void (**)(uint64_t, WebCore::ShareableResource **))(*(void *)v11 + 16))(v11, &v18);
  }
  __int16 v12 = v17;
  uint64_t v17 = 0;
  if (v12) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v12);
  }
LABEL_17:
  if (v21) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v19);
  }
  uint64_t result = (unsigned int *)v18;
  unsigned int v18 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CAAB8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CAAB8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), 0);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_1,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_1::RecordInfo const&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CAAE0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WebKit::NetworkCache::Cache *)a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_1,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_1::RecordInfo const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CAAE0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WebKit::NetworkCache::Cache *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_1,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_1::RecordInfo const&>::call(uint64_t a1, WebKit::NetworkCache::Entry *this, uint64_t a3)
{
  if (this)
  {
    WebKit::NetworkCache::Entry::decodeStorageRecord(this, &v11);
    uint64_t v5 = v11;
    if (v11)
    {
      v10[0] = v11;
      v10[1] = a3;
      (*(void (**)(void, void *))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), v10);
      WebKit::NetworkCache::Entry::~Entry(v5, v6);
      WTF::fastFree(v7, v8);
    }
  }
  else
  {
    --*(_DWORD *)(*(void *)(a1 + 8) + 64);
    uint64_t v9 = *(void (**)(void))(**(void **)(a1 + 24) + 16);
    v9();
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::String const&,WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Cache::traverse(WTF::String const&,WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0::RecordInfo const&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CAB08;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::String const&,WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Cache::traverse(WTF::String const&,WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0::RecordInfo const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CAB08;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::String const&,WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Cache::traverse(WTF::String const&,WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0::RecordInfo const&>::call(uint64_t a1, WebKit::NetworkCache::Entry *this, uint64_t a3)
{
  if (this)
  {
    WebKit::NetworkCache::Entry::decodeStorageRecord(this, &v11);
    uint64_t v5 = v11;
    if (v11)
    {
      v10[0] = v11;
      v10[1] = a3;
      (*(void (**)(void, void *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v10);
      WebKit::NetworkCache::Entry::~Entry(v5, v6);
      WTF::fastFree(v7, v8);
    }
  }
  else
  {
    uint64_t v9 = *(void (**)(void))(**(void **)(a1 + 8) + 16);
    v9();
  }
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::dumpContentsToFile(void)::$_0,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&>::call(uint64_t a1, WebKit::NetworkCache::Entry *this, uint64_t a3)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (WTF::FileSystemImpl *)(a1 + 8);
  if (this)
  {
    WebKit::NetworkCache::Entry::decodeStorageRecord(this, &v148);
    uint64_t v6 = v148;
    if (!v148) {
      return;
    }
    ++*(_DWORD *)(a1 + 16);
    *(double *)(a1 + 24) = *(double *)(a3 + 8) + *(double *)(a1 + 24);
    *(void *)(a1 + 32) += *(void *)a3;
    v144 = 0;
    v145 = 0;
    int v146 = 0;
    char v147 = 1;
    WTF::StringBuilder::append();
    WebKit::NetworkCache::Key::hashAsString(v6 + 32, (WTF::StringImpl **)__src);
    WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v144, (const WTF::String *)__src);
    unsigned int v8 = *(WTF::StringImpl **)__src;
    *(void *)int __src = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    unint64_t v41 = *(void *)a3;
    unsigned int v42 = WTF::numberToStringAndSize();
    unsigned int v43 = 0;
    HIDWORD(v157) = v42;
    unint64_t v44 = v41;
    do
    {
      ++v43;
      BOOL v15 = v44 > 9;
      v44 /= 0xAuLL;
    }
    while (v15);
    if (v42 >= 0xFFFFFFE5) {
      int v45 = -27;
    }
    else {
      int v45 = v42;
    }
    unsigned int v46 = v45 + v43;
    unsigned int v47 = v46 + 26;
    int v48 = v46 + 40;
    BOOL v49 = v47 < v43 || v47 >= 0xFFFFFFF2;
    if (v49) {
      int v50 = -1;
    }
    else {
      int v50 = v48;
    }
    BOOL v49 = __CFADD__(v50, v146);
    unsigned int v51 = v50 + v146;
    if (v49) {
      uint64_t v52 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v52 = v51;
    }
    long long v53 = v145;
    if ((v145 || (long long v53 = v144) != 0) && (*((unsigned char *)v53 + 16) & 4) == 0)
    {
      uint64_t v54 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v144);
      if (v54)
      {
        uint64_t v55 = 0;
        long long v161 = v154;
        long long v162 = v155;
        long long v163 = v156;
        long long v164 = v157;
        *(_OWORD *)v158 = v150;
        *(_OWORD *)&v158[16] = v151;
        *(_OWORD *)v159 = v152;
        long long v160 = v153;
        do
        {
          *(_WORD *)(v54 + 2 * v55) = aBodysize[v55];
          ++v55;
        }
        while (v55 != 14);
        uint64_t v56 = 0;
        unint64_t v57 = v41;
        do
        {
          __src[v56-- + 24] = (v57 % 0xA) | 0x30;
          BOOL v15 = v57 > 9;
          v57 /= 0xAuLL;
        }
        while (v15);
        if (v56 + 26 <= 25)
        {
          uint64_t v58 = (_WORD *)(v54 + 28);
          do
          {
            *v58++ = __src[v56 + 25];
            BOOL v49 = __CFADD__(v56++, 1);
          }
          while (!v49);
        }
        unsigned int v59 = 0;
        do
        {
          ++v59;
          BOOL v15 = v41 > 9;
          v41 /= 0xAuLL;
        }
        while (v15);
        for (uint64_t i = 0; i != 11; ++i)
          *(_WORD *)(v54 + 2 * v59 + 28 + 2 * i) = aWorth[i];
        uint64_t v61 = (char *)(v54 + 28 + 2 * v59 + 22);
        long long v168 = v161;
        long long v169 = v162;
        long long v170 = v163;
        long long v171 = v164;
        *(_OWORD *)int __src = *(_OWORD *)v158;
        *(_OWORD *)&__src[16] = *(_OWORD *)&v158[16];
        long long v166 = *(_OWORD *)v159;
        long long v167 = v160;
        uint64_t v62 = HIDWORD(v164);
        char v63 = &v61[2 * HIDWORD(v164)];
        if (HIDWORD(v164) < 0x40)
        {
          long long v65 = (int8x16_t *)__src;
        }
        else
        {
          long long v64 = &v61[2 * (HIDWORD(v164) & 0xFFFFFFC0)];
          long long v65 = (int8x16_t *)__src;
          long long v66 = 0uLL;
          do
          {
            v173.val[0] = *v65;
            int8x16_t v67 = v65[1];
            v175.val[0] = v65[2];
            int8x16_t v68 = v65[3];
            v65 += 4;
            int8x16_t v69 = v68;
            v175.val[1] = 0uLL;
            v177.val[0] = v67;
            v173.val[1] = 0uLL;
            uint64_t v70 = v61;
            vst2q_s8(v70, v173);
            v70 += 32;
            v177.val[1] = 0uLL;
            vst2q_s8(v70, v177);
            char v71 = v61 + 64;
            vst2q_s8(v71, v175);
            char v72 = v61 + 96;
            vst2q_s8(v72, *(int8x16x2_t *)(&v66 - 1));
            v61 += 128;
          }
          while (v61 != v64);
          uint64_t v61 = v64;
        }
        while (v61 != v63)
        {
          __int16 v76 = v65->u8[0];
          long long v65 = (int8x16_t *)((char *)v65 + 1);
          *(_WORD *)uint64_t v61 = v76;
          v61 += 2;
        }
        uint64_t v77 = 0;
        uint64_t v78 = v54 + 2 * v62 + 2 * v59 + 50;
        do
        {
          *(_WORD *)(v78 + 2 * v77) = aPartition[v77];
          ++v77;
        }
        while (v77 != 15);
      }
    }
    else
    {
      uint64_t v79 = MEMORY[0x19972DE60](&v144, v52);
      if (v79)
      {
        uint64_t v80 = 0;
        long long v161 = v154;
        long long v162 = v155;
        long long v163 = v156;
        long long v164 = v157;
        *(_OWORD *)v158 = v150;
        *(_OWORD *)&v158[16] = v151;
        *(_OWORD *)v159 = v152;
        long long v160 = v153;
        qmemcpy((void *)v79, ",\n\"bodySize\": ", 14);
        unint64_t v81 = v41;
        do
        {
          __src[v80-- + 24] = (v81 % 0xA) | 0x30;
          BOOL v15 = v81 > 9;
          v81 /= 0xAuLL;
        }
        while (v15);
        uint64_t v82 = v79 + 14;
        if (v80 + 26 <= 25) {
          memcpy((void *)(v79 + 14), &__src[v80 + 25], -v80);
        }
        unsigned int v83 = 0;
        do
        {
          ++v83;
          BOOL v15 = v41 > 9;
          v41 /= 0xAuLL;
        }
        while (v15);
        uint64_t v84 = v82 + v83;
        *(void *)uint64_t v84 = *(void *)",\n\"worth\": ";
        *(_DWORD *)(v84 + 7) = 540680808;
        long long v85 = (unsigned char *)(v84 + 11);
        long long v168 = v161;
        long long v169 = v162;
        long long v170 = v163;
        long long v171 = v164;
        *(_OWORD *)int __src = *(_OWORD *)v158;
        *(_OWORD *)&__src[16] = *(_OWORD *)&v158[16];
        long long v166 = *(_OWORD *)v159;
        long long v167 = v160;
        uint64_t v86 = HIDWORD(v164);
        if (HIDWORD(v164))
        {
          if (HIDWORD(v164) == 1) {
            *long long v85 = __src[0];
          }
          else {
            memcpy((void *)(v84 + 11), __src, HIDWORD(v171));
          }
        }
        qmemcpy(&v85[v86], ",\n\"partition\": ", 15);
      }
    }
    WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v144, (const WTF::String *)v6);
    HIDWORD(v157) = WTF::numberToStringAndSize();
    uint64_t v87 = v145;
    if ((v145 || (uint64_t v87 = v144) != 0) && (*((unsigned char *)v87 + 16) & 4) == 0)
    {
      uint64_t v88 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v144);
      if (v88)
      {
        uint64_t v89 = 0;
        long long v161 = v154;
        long long v162 = v155;
        long long v163 = v156;
        long long v164 = v157;
        *(_OWORD *)v158 = v150;
        *(_OWORD *)&v158[16] = v151;
        *(_OWORD *)v159 = v152;
        long long v160 = v153;
        do
        {
          *(_WORD *)(v88 + 2 * v89) = aTimestamp_0[v89];
          ++v89;
        }
        while (v89 != 15);
        uint64_t v90 = (char *)(v88 + 30);
        long long v168 = v161;
        long long v169 = v162;
        long long v170 = v163;
        long long v171 = v164;
        *(_OWORD *)int __src = *(_OWORD *)v158;
        *(_OWORD *)&__src[16] = *(_OWORD *)&v158[16];
        long long v166 = *(_OWORD *)v159;
        long long v167 = v160;
        uint64_t v91 = v88 + 30 + 2 * HIDWORD(v164);
        if (HIDWORD(v164) < 0x40)
        {
          CFTypeRef v93 = (int8x16_t *)__src;
        }
        else
        {
          long long v92 = &v90[2 * (HIDWORD(v164) & 0xFFFFFFC0)];
          CFTypeRef v93 = (int8x16_t *)__src;
          long long v94 = 0uLL;
          do
          {
            v174.val[0] = *v93;
            int8x16_t v95 = v93[1];
            v176.val[0] = v93[2];
            int8x16_t v96 = v93[3];
            v93 += 4;
            int8x16_t v97 = v96;
            v176.val[1] = 0uLL;
            v178.val[0] = v95;
            v174.val[1] = 0uLL;
            uint64_t v98 = v90;
            vst2q_s8(v98, v174);
            v98 += 32;
            v178.val[1] = 0uLL;
            vst2q_s8(v98, v178);
            char v99 = v90 + 64;
            vst2q_s8(v99, v176);
            CFTypeRef v100 = v90 + 96;
            vst2q_s8(v100, *(int8x16x2_t *)(&v94 - 1));
            v90 += 128;
          }
          while (v90 != v92);
          uint64_t v90 = v92;
        }
        while (v90 != (char *)v91)
        {
          __int16 v101 = v93->u8[0];
          CFTypeRef v93 = (int8x16_t *)((char *)v93 + 1);
          *(_WORD *)uint64_t v90 = v101;
          v90 += 2;
        }
        for (uint64_t j = 0; j != 9; ++j)
          *(_WORD *)(v91 + 2 * j) = aUrl_1[j];
      }
    }
    else
    {
      uint64_t v103 = MEMORY[0x19972DE60](&v144);
      if (v103)
      {
        long long v168 = v154;
        long long v169 = v155;
        long long v170 = v156;
        long long v171 = v157;
        *(_OWORD *)int __src = v150;
        *(_OWORD *)&__src[16] = v151;
        long long v166 = v152;
        long long v167 = v153;
        qmemcpy((void *)v103, ",\n\"timestamp\": ", 15);
        long long v104 = (unsigned char *)(v103 + 15);
        uint64_t v105 = HIDWORD(v171);
        if (HIDWORD(v171))
        {
          if (HIDWORD(v171) == 1) {
            *long long v104 = __src[0];
          }
          else {
            memcpy((void *)(v103 + 15), __src, HIDWORD(v171));
          }
        }
        long long v106 = &v104[v105];
        *(void *)long long v106 = *(void *)",\n\"URL\": ";
        v106[8] = 32;
      }
    }
    long long v107 = (const WTF::String *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(v6 + 80));
    WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v144, v107);
    WTF::StringBuilder::append();
    WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v144, (const WTF::String *)(a3 + 24));
    unsigned int v108 = *(_DWORD *)(a3 + 16);
    unsigned int v109 = 35;
    unsigned int v110 = v108;
    do
    {
      ++v109;
      BOOL v15 = v110 > 9;
      v110 /= 0xAu;
    }
    while (v15);
    if (v109 - 20 < v109 - 35 || v109 <= 0x13) {
      unsigned int v109 = -1;
    }
    BOOL v49 = __CFADD__(v109, v146);
    unsigned int v111 = v109 + v146;
    if (v49) {
      uint64_t v112 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v112 = v111;
    }
    uint64_t v113 = v145;
    if ((v145 || (uint64_t v113 = v144) != 0) && (*((unsigned char *)v113 + 16) & 4) == 0)
    {
      uint64_t v114 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v144);
      if (v114)
      {
        for (uint64_t k = 0; k != 20; ++k)
          *(_WORD *)(v114 + 2 * k) = aBodysharecount[k];
        uint64_t v116 = 0;
        unsigned int v117 = v108;
        do
        {
          __src[v116-- + 12] = (v117 % 0xA) | 0x30;
          BOOL v15 = v117 > 9;
          v117 /= 0xAu;
        }
        while (v15);
        if (v116 + 14 <= 13)
        {
          v118 = (_WORD *)(v114 + 40);
          do
          {
            *v118++ = __src[v116 + 13];
            BOOL v49 = __CFADD__(v116++, 1);
          }
          while (!v49);
        }
        unsigned int v119 = 0;
        do
        {
          ++v119;
          BOOL v15 = v108 > 9;
          v108 /= 0xAu;
        }
        while (v15);
        uint64_t v120 = 0;
        uint64_t v121 = v114 + 2 * v119 + 40;
        do
        {
          *(_WORD *)(v121 + 2 * v120) = aHeaders[v120];
          ++v120;
        }
        while (v120 != 15);
      }
    }
    else
    {
      uint64_t v122 = MEMORY[0x19972DE60](&v144, v112);
      if (v122)
      {
        uint64_t v123 = 0;
        *(_DWORD *)(v122 + 16) = 540680820;
        *(_OWORD *)uint64_t v122 = *(_OWORD *)",\n\"bodyShareCount\": ";
        unsigned int v124 = v108;
        do
        {
          __src[v123-- + 12] = (v124 % 0xA) | 0x30;
          BOOL v15 = v124 > 9;
          v124 /= 0xAu;
        }
        while (v15);
        uint64_t v125 = v122 + 20;
        if (v123 + 14 <= 13) {
          memcpy((void *)(v122 + 20), &__src[v123 + 13], -v123);
        }
        unsigned int v126 = 0;
        do
        {
          ++v126;
          BOOL v15 = v108 > 9;
          v108 /= 0xAu;
        }
        while (v15);
        qmemcpy((void *)(v125 + v126), ",\n\"headers\": {\n", 15);
      }
    }
    uint64_t v127 = WebCore::ResourceResponseBase::httpHeaderFields((WebCore::ResourceResponseBase *)(v6 + 80));
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)__src, (const WebCore::HTTPHeaderMap *)v127, *(WTF::StringImpl ***)v127, *(const WebCore::HTTPHeaderMap::UncommonHeader **)(v127 + 16));
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)v158, (const WebCore::HTTPHeaderMap *)v127, (WTF::StringImpl **)(*(void *)v127 + 16 * *(unsigned int *)(v127 + 12)), (const WebCore::HTTPHeaderMap::UncommonHeader *)(*(void *)(v127 + 16) + 16 * *(unsigned int *)(v127 + 28)));
    char v129 = 0;
    while (*(_OWORD *)&__src[8] != *(_OWORD *)&v158[8])
    {
      BOOL v130 = (v129 & 1) == 0;
      if (v129) {
        long long v131 = ",\n";
      }
      else {
        long long v131 = "";
      }
      if (v130) {
        uint64_t v132 = 1;
      }
      else {
        uint64_t v132 = 3;
      }
      *(void *)&long long v150 = v131;
      *((void *)&v150 + objc_destroyWeak(this + 1) = v132;
      v149[0] = (WTF::StringImpl *)"    ";
      v149[1] = (WTF::StringImpl *)5;
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&v144, (uint64_t)&v150, (uint64_t)v149);
      WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v144, (const WTF::String *)&__src[24]);
      WTF::StringBuilder::append();
      WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v144, (const WTF::String *)((char *)&v166 + 8));
      WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)__src);
      char v129 = 1;
    }
    v133 = v159[1];
    v159[1] = 0;
    if (v133)
    {
      if (*(_DWORD *)v133 == 2) {
        WTF::StringImpl::destroy(v133, v128);
      }
      else {
        *(_DWORD *)v133 -= 2;
      }
    }
    uint64_t v134 = *(WTF::StringImpl **)&v158[24];
    *(void *)&v158[24] = 0;
    if (v134)
    {
      if (*(_DWORD *)v134 == 2) {
        WTF::StringImpl::destroy(v134, v128);
      }
      else {
        *(_DWORD *)v134 -= 2;
      }
    }
    v135 = (WTF::StringImpl *)*((void *)&v166 + 1);
    *((void *)&v166 + objc_destroyWeak(this + 1) = 0;
    if (v135)
    {
      if (*(_DWORD *)v135 == 2) {
        WTF::StringImpl::destroy(v135, v128);
      }
      else {
        *(_DWORD *)v135 -= 2;
      }
    }
    uint64_t v136 = *(WTF::StringImpl **)&__src[24];
    *(void *)&__src[24] = 0;
    if (v136)
    {
      if (*(_DWORD *)v136 == 2) {
        WTF::StringImpl::destroy(v136, v128);
      }
      else {
        *(_DWORD *)v136 -= 2;
      }
    }
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    v137 = v144;
    if (v144
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v144),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v144),
          (v137 = v144) != 0))
    {
      *(_DWORD *)v137 += 2;
    }
    *(void *)v158 = v137;
    WTF::String::utf8();
    WTF::FileSystemImpl::writeToFile();
    v139 = *(WTF **)__src;
    *(void *)int __src = 0;
    if (v139)
    {
      if (*(_DWORD *)v139 == 1) {
        WTF::fastFree(v139, v138);
      }
      else {
        --*(_DWORD *)v139;
      }
    }
    v140 = *(WTF::StringImpl **)v158;
    *(void *)v158 = 0;
    if (v140)
    {
      if (*(_DWORD *)v140 == 2) {
        WTF::StringImpl::destroy(v140, (WTF::StringImpl *)v138);
      }
      else {
        *(_DWORD *)v140 -= 2;
      }
    }
    v141 = v145;
    v145 = 0;
    if (v141)
    {
      if (*(_DWORD *)v141 == 2) {
        WTF::StringImpl::destroy(v141, (WTF::StringImpl *)v138);
      }
      else {
        *(_DWORD *)v141 -= 2;
      }
    }
    long long v142 = v144;
    v144 = 0;
    if (v142)
    {
      if (*(_DWORD *)v142 == 2) {
        WTF::StringImpl::destroy(v142, (WTF::StringImpl *)v138);
      }
      else {
        *(_DWORD *)v142 -= 2;
      }
    }
    WebKit::NetworkCache::Entry::~Entry((WebKit::NetworkCache::Entry *)v6, (WTF::StringImpl *)v138);
    goto LABEL_195;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  int v12 = WTF::numberToStringAndSize();
  int v13 = 0;
  HIDWORD(v157) = v12;
  unint64_t v14 = v11;
  do
  {
    ++v13;
    BOOL v15 = v14 > 9;
    v14 /= 0xAuLL;
  }
  while (v15);
  int v16 = 0;
  unsigned int v17 = v9;
  do
  {
    ++v16;
    BOOL v15 = v17 > 9;
    v17 /= 0xAu;
  }
  while (v15);
  int v18 = 0;
  unint64_t v19 = v10;
  do
  {
    ++v18;
    BOOL v15 = v19 > 9;
    v19 /= 0xAuLL;
  }
  while (v15);
  WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(30, v13, 11, v16, 14, v18, 18, v12, (uint64_t)&v144, 5);
  if ((_BYTE)v144) {
    goto LABEL_202;
  }
  int v20 = HIDWORD(v144);
  long long v161 = v154;
  long long v162 = v155;
  long long v163 = v156;
  long long v164 = v157;
  *(_OWORD *)v158 = v150;
  *(_OWORD *)&v158[16] = v151;
  *(_OWORD *)v159 = v152;
  long long v160 = v153;
  if (!HIDWORD(v144))
  {
    v143 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    v149[0] = v143;
    goto LABEL_38;
  }
  if ((HIDWORD(v144) & 0x80000000) != 0
    || (WTF::tryFastCompactMalloc((WTF *)(HIDWORD(v144) + 20)), (uint64_t v21 = *(void *)__src) == 0))
  {
LABEL_202:
    __break(0xC471u);
    return;
  }
  uint64_t v22 = 0;
  **(_DWORD **)int __src = 2;
  *(_DWORD *)(v21 + 4) = v20;
  *(void *)(v21 + 8) = v21 + 20;
  *(_DWORD *)(v21 + 16) = 4;
  qmemcpy((void *)(v21 + 20), "{}\n],\n\"totals\": {\n\"capacity\": ", 30);
  unint64_t v23 = v11;
  do
  {
    __src[v22-- + 24] = (v23 % 0xA) | 0x30;
    BOOL v15 = v23 > 9;
    v23 /= 0xAuLL;
  }
  while (v15);
  if (v22 + 26 <= 25) {
    memcpy((void *)(v21 + 50), &__src[v22 + 25], -v22);
  }
  unsigned int v24 = 0;
  do
  {
    ++v24;
    BOOL v15 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v15);
  uint64_t v25 = 0;
  uint64_t v26 = v21 + 50 + v24;
  *(void *)uint64_t v26 = *(void *)",\n\"count\": ";
  *(_DWORD *)(v26 + 7) = 540680820;
  unsigned int v27 = v9;
  do
  {
    __src[v25-- + 12] = (v27 % 0xA) | 0x30;
    BOOL v15 = v27 > 9;
    v27 /= 0xAu;
  }
  while (v15);
  uint64_t v28 = (char *)(v26 + 11);
  if (v25 + 14 <= 13) {
    memcpy(v28, &__src[v25 + 13], -v25);
  }
  int v29 = 0;
  do
  {
    ++v29;
    BOOL v15 = v9 > 9;
    v9 /= 0xAu;
  }
  while (v15);
  uint64_t v30 = 0;
  uint64_t v31 = &v28[v29];
  qmemcpy(v31, ",\n\"bodySize\": ", 14);
  unint64_t v32 = v10;
  do
  {
    __src[v30-- + 24] = (v32 % 0xA) | 0x30;
    BOOL v15 = v32 > 9;
    v32 /= 0xAuLL;
  }
  while (v15);
  long long v33 = v31 + 14;
  if (v30 + 26 <= 25) {
    memcpy(v33, &__src[v30 + 25], -v30);
  }
  int v34 = 0;
  do
  {
    ++v34;
    BOOL v15 = v10 > 9;
    v10 /= 0xAuLL;
  }
  while (v15);
  uint64_t v35 = &v33[v34];
  *(_OWORD *)uint64_t v35 = *(_OWORD *)",\n\"averageWorth\": ";
  *((_WORD *)v35 + 8) = 8250;
  char v36 = v35 + 18;
  long long v168 = v161;
  long long v169 = v162;
  long long v170 = v163;
  long long v171 = v164;
  *(_OWORD *)int __src = *(_OWORD *)v158;
  *(_OWORD *)&__src[16] = *(_OWORD *)&v158[16];
  long long v166 = *(_OWORD *)v159;
  long long v167 = v160;
  uint64_t v37 = HIDWORD(v164);
  if (HIDWORD(v164))
  {
    if (HIDWORD(v164) == 1) {
      *char v36 = __src[0];
    }
    else {
      memcpy(v35 + 18, __src, HIDWORD(v171));
    }
  }
  uint64_t v38 = &v36[v37];
  void v38[4] = 10;
  *(_DWORD *)uint64_t v38 = 2097839370;
  v149[0] = (WTF::StringImpl *)v21;
LABEL_38:
  WTF::String::utf8();
  char v40 = v149[0];
  v149[0] = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, v39);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  WTF::FileSystemImpl::writeToFile();
  WTF::FileSystemImpl::closeFile(v4, v73);
  char v75 = *(WTF **)__src;
  *(void *)int __src = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 != 1)
    {
      --*(_DWORD *)v75;
      return;
    }
LABEL_195:
    WTF::fastFree(v75, v74);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteDumpFile(void)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9CAB58;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteDumpFile(void)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CAB58;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteDumpFile(void)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  return WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)(a1 + 8), a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::fetchData(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CAB80;
  uint64_t v3 = a1[4];
  if (v3) {
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (WebKit::NetworkCache::Cache *)a1[1];
  a1[1] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v5, (WTF::StringImpl *)a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::fetchData(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CAB80;
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (WebKit::NetworkCache::Cache *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v5, (WTF::StringImpl *)a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::fetchData(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::call(WTF::StringImpl *result, void **a2)
{
  uint64_t v2 = result;
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v4 = WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(*a2 + 10));
    uint64_t v5 = *(WTF::StringImpl **)v4;
    if (*(void *)v4) {
      *(_DWORD *)v5 += 2;
    }
    uint64_t v52 = v5;
    long long v6 = *(_OWORD *)(v4 + 24);
    long long v53 = *(_OWORD *)(v4 + 8);
    *(_OWORD *)uint64_t v54 = v6;
    WTF::URL::protocol((WTF::URL *)&v52);
    if ((v7 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    unsigned int v8 = (uint64_t *)((char *)v2 + 32);
    WTF::URL::host((WTF::URL *)&v52);
    if ((v9 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    int v10 = WTF::URL::port((WTF::URL *)&v52);
    WebCore::SecurityOriginData::SecurityOriginData((uint64_t)v55, (_DWORD **)&v51, (_DWORD **)&v50, v10);
    uint64_t v11 = *v8;
    if (*v8
      || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)v2 + 4, 0), (uint64_t v11 = *v8) != 0))
    {
      int v12 = *(_DWORD *)(v11 - 8);
    }
    else
    {
      int v12 = 0;
    }
    LODWORD(v48) = -1640531527;
    WORD2(v48) = 0;
    BYTE6(v48) = 0;
    WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v48, (uint64_t)v55);
    unsigned int v13 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v48) & v12;
    unint64_t v14 = (unsigned int *)(v11 + 40 * v13);
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v14);
    if ((v15 & 1) == 0)
    {
      int v16 = 0;
      int v17 = 1;
      while (1)
      {
        unsigned int v18 = v14[6];
        if (v18) {
          break;
        }
        if (*(void *)v14 != -1) {
          goto LABEL_15;
        }
        int v16 = v14;
LABEL_18:
        unsigned int v13 = (v13 + v17) & v12;
        unint64_t v14 = (unsigned int *)(v11 + 40 * v13);
        WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v14);
        ++v17;
        if (v20)
        {
          if (v16)
          {
            *((void *)v16 + 4) = 0;
            *(_OWORD *)int v16 = 0u;
            *((_OWORD *)v16 + objc_destroyWeak(this + 1) = 0u;
            --*(_DWORD *)(*v8 - 16);
            unint64_t v14 = v16;
          }
          goto LABEL_29;
        }
      }
      if (v18 != 1)
      {
        uint64_t result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_22;
      }
LABEL_15:
      if (WebCore::operator==()) {
        goto LABEL_38;
      }
      goto LABEL_18;
    }
LABEL_29:
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, (uint64_t)v55);
    *((void *)v14 + 4) = 0;
    uint64_t v25 = *v8;
    if (*v8) {
      int v26 = *(_DWORD *)(v25 - 12) + 1;
    }
    else {
      int v26 = 1;
    }
    *(_DWORD *)(v25 - 1objc_destroyWeak(this + 2) = v26;
    uint64_t v27 = *v8;
    if (*v8) {
      int v28 = *(_DWORD *)(v27 - 12);
    }
    else {
      int v28 = 0;
    }
    uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
    unint64_t v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29) {
        goto LABEL_38;
      }
    }
    else if (3 * v30 > 4 * v29)
    {
LABEL_38:
      if (v56 != -1) {
        ((void (*)(uint64_t *, unsigned char *))off_1EE9CA8B8[v56])(&v48, v55);
      }
      int v56 = -1;
      uint64_t v31 = v50;
      int v50 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v19);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
      unint64_t v32 = v51;
      unsigned int v51 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v19);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      if (*((unsigned char *)v2 + 16))
      {
        uint64_t v33 = (uint64_t)*a2;
        if ((*a2)[83] || (int v34 = *(NSObject **)(v33 + 656)) == 0) {
          size_t size = *(void *)(v33 + 672);
        }
        else {
          size_t size = dispatch_data_get_size(v34);
        }
        *((void *)v14 + 4) += *a2[1] + size;
      }
      uint64_t result = v52;
      uint64_t v52 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      return result;
    }
    unint64_t v14 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)v2 + 4, (uint64_t)v14);
    goto LABEL_38;
  }
LABEL_22:
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v21 = (WebCore::SecurityOriginData *)*((void *)v2 + 4);
  if (!v21)
  {
    uint64_t v47 = 0;
LABEL_58:
    char v36 = 0;
    LODWORD(v37) = 0;
    goto LABEL_70;
  }
  uint64_t v22 = *((unsigned int *)v21 - 3);
  if (v22)
  {
    if (v22 >= 0x5555556)
    {
      __break(0xC471u);
      return result;
    }
    int v23 = 48 * v22;
    uint64_t v24 = WTF::fastMalloc((WTF *)(48 * v22));
    LODWORD(v49) = (v23 & 0xFFFFFFF0) / 0x30;
    uint64_t v47 = v24;
    uint64_t v48 = v24;
    uint64_t v21 = (WebCore::SecurityOriginData *)*((void *)v2 + 4);
    if (!v21) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v47 = 0;
  }
  uint64_t v37 = *((unsigned int *)v21 - 1);
  uint64_t v38 = (WebCore::SecurityOriginData *)((char *)v21 + 40 * v37);
  if (*((_DWORD *)v21 - 3))
  {
    if (!v37)
    {
      char v36 = v21;
      goto LABEL_71;
    }
    uint64_t v39 = 40 * v37;
    while (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v21))
    {
      uint64_t v21 = (WebCore::SecurityOriginData *)((char *)v21 + 40);
      v39 -= 40;
      if (!v39)
      {
        uint64_t v21 = v38;
        break;
      }
    }
    char v36 = v21;
    uint64_t v21 = (WebCore::SecurityOriginData *)*((void *)v2 + 4);
    if (v21) {
      goto LABEL_71;
    }
LABEL_73:
    char v40 = 0;
    goto LABEL_74;
  }
  char v36 = (WebCore::SecurityOriginData *)((char *)v21 + 40 * v37);
LABEL_70:
  uint64_t v38 = (WebCore::SecurityOriginData *)((char *)v21 + 40 * v37);
  if (!v21) {
    goto LABEL_73;
  }
LABEL_71:
  char v40 = (WebCore::SecurityOriginData *)((char *)v21 + 40 * *((unsigned int *)v21 - 1));
LABEL_74:
  if (v40 != v36)
  {
    unsigned int v41 = 0;
    do
    {
      v55[0] = 0;
      int v56 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v55, (uint64_t)v36);
      uint64_t v42 = *((void *)v36 + 4);
      LOBYTE(v5objc_destroyWeak(this + 2) = 0;
      *(_DWORD *)uint64_t v54 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v52, (uint64_t)v55);
      *(_DWORD *)&v54[8] = 2;
      *(void *)&v54[16] = v42;
      if (v56 != -1) {
        ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9CA8B8[v56])(&v51, v55);
      }
      uint64_t v43 = v47 + 48 * v41;
      *(unsigned char *)uint64_t v43 = 0;
      *(_DWORD *)(v43 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v43, (uint64_t)&v52);
      *(_OWORD *)(v43 + 3objc_destroyWeak(this + 2) = *(_OWORD *)&v54[8];
      if (*(_DWORD *)v54 != -1) {
        ((void (*)(unsigned char *, WTF::StringImpl **))off_1EE9CA8B8[*(unsigned int *)v54])(v55, &v52);
      }
      unint64_t v44 = (WebCore::SecurityOriginData *)((char *)v36 + 40);
      char v36 = v38;
      if (v44 != v38)
      {
        char v36 = v44;
        while (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v36))
        {
          char v36 = (WebCore::SecurityOriginData *)((char *)v36 + 40);
          if (v36 == v38)
          {
            char v36 = v38;
            break;
          }
        }
      }
      ++v41;
    }
    while (v36 != v40);
    HIDWORD(v49) = v41;
  }
  uint64_t v45 = *((void *)v2 + 3);
  *((void *)v2 + 3) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v45 + 16))(v45, &v48);
  (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  return (WTF::StringImpl *)WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v46);
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    LODWORD(v3) = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    LODWORD(v3) = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastMalloc((WTF *)(40 * v5 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5) {
    bzero((void *)(v6 + 16), 40 * v5);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 1objc_destroyWeak(this + 2) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v3 = v3;
    uint64_t v28 = v2;
    uint64_t v29 = v3;
    while (1)
    {
      uint64_t v12 = v2 + 40 * v10;
      int v13 = *(_DWORD *)(v12 + 24);
      if (v13) {
        break;
      }
      if (*(void *)v12 != -1) {
        goto LABEL_12;
      }
LABEL_27:
      if (++v10 == v3) {
        goto LABEL_32;
      }
    }
    if (v13 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_31;
    }
LABEL_12:
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v2 + 40 * v10));
    if (v14)
    {
      uint64_t v15 = *(unsigned int *)(v12 + 24);
      if (v15 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CA8B8[v15])(&v32, v2 + 40 * v10);
      }
      *(_DWORD *)(v12 + 24) = -1;
    }
    else
    {
      uint64_t v16 = *a1;
      if (*a1) {
        int v17 = *(_DWORD *)(v16 - 8);
      }
      else {
        int v17 = 0;
      }
      int v35 = -1640531527;
      __int16 v36 = 0;
      char v37 = 0;
      WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v35, v2 + 40 * v10);
      unsigned int v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v35);
      int v19 = 0;
      do
      {
        unsigned int v20 = v18 & v17;
        uint64_t v21 = (unsigned int *)(v16 + 40 * (v18 & v17));
        WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v21);
        int v23 = v22;
        unsigned int v18 = ++v19 + v20;
      }
      while (!v23);
      uint64_t v24 = v21[6];
      if (v24 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CA8B8[v24])(&v33, v16 + 40 * v20);
      }
      *(unsigned char *)uint64_t v21 = 0;
      v21[6] = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v16 + 40 * v20, v12);
      uint64_t v25 = v16 + 40 * v20;
      uint64_t v2 = v28;
      *(void *)(v25 + 3objc_destroyWeak(this + 2) = *(void *)(v28 + 40 * v10 + 32);
      uint64_t v26 = *(unsigned int *)(v12 + 24);
      if (v26 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CA8B8[v26])(&v34, v12);
      }
      *(_DWORD *)(v12 + 24) = -1;
      uint64_t v3 = v29;
      if (v12 == a2) {
        uint64_t v11 = v21;
      }
    }
    goto LABEL_27;
  }
LABEL_31:
  uint64_t v11 = 0;
  uint64_t result = 0;
  if (v2)
  {
LABEL_32:
    WTF::fastFree((WTF *)(v2 - 16), v7);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(WebCore::SecurityOriginData *a1)
{
  WebCore::SecurityOriginData::isNull(a1);
  if (v2) {
    return 1;
  }
  int v4 = *((_DWORD *)a1 + 6);
  if (!v4) {
    return *(void *)a1 == -1;
  }
  if (v4 == 1) {
    return 0;
  }
  uint64_t v5 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteData(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(v5);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteData(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CABA8;
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 5), a2);
  uint64_t v4 = a1[4];
  a1[4] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[3];
  if (v5) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v5, v3);
  }
  uint64_t v6 = (WebKit::NetworkCache::Cache *)a1[2];
  a1[2] = 0;
  if (v6) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v6, (WTF::StringImpl *)v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteData(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CABA8;
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 40, a2);
  uint64_t v4 = *((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)a1 + 3);
  if (v5) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v5, v3);
  }
  uint64_t v6 = (WebKit::NetworkCache::Cache *)*((void *)a1 + 2);
  *((void *)a1 + objc_destroyWeak(this + 2) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v6, (WTF::StringImpl *)v3);
  }

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteData(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v4 = (WebCore::SecurityOriginData *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(*a2 + 80));
    WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v11, v4, v5);
    uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)(a1 + 24), (uint64_t)v11);
    if (result)
    {
      unint64_t v7 = *a2;
      unsigned int v8 = *(_DWORD *)(a1 + 52);
      if (v8 == *(_DWORD *)(a1 + 48))
      {
        uint64_t result = WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::Key const&>(a1 + 40, v7);
      }
      else
      {
        uint64_t result = WebKit::NetworkCache::Key::Key(*(void *)(a1 + 40) + 72 * v8, v7);
        ++*(_DWORD *)(a1 + 52);
      }
    }
    if (v12 != -1) {
      return ((uint64_t (*)(char *, uint64_t *))off_1EE9CA8B8[v12])(&v10, v11);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 8);
    WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v11, (uint64_t *)(a1 + 32));
    WebKit::NetworkCache::Cache::remove(v9, (const WebKit::NetworkCache::Key **)(a1 + 40), v11);
    uint64_t result = v11[0];
    v11[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteDataForRegistrableDomains(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CABD0;
  uint64_t v3 = (WTF::StringImpl **)a1[7];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 5), a2);
  uint64_t v5 = a1[4];
  a1[4] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (WTF::StringImpl **)a1[3];
  if (v6) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v4);
  }
  unint64_t v7 = (WebKit::NetworkCache::Cache *)a1[2];
  a1[2] = 0;
  if (v7) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v7, v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteDataForRegistrableDomains(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CABD0;
  uint64_t v3 = (WTF::StringImpl **)*((void *)a1 + 7);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 40, a2);
  uint64_t v5 = *((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (WTF::StringImpl **)*((void *)a1 + 3);
  if (v6) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v4);
  }
  unint64_t v7 = (WebKit::NetworkCache::Cache *)*((void *)a1 + 2);
  *((void *)a1 + objc_destroyWeak(this + 2) = 0;
  if (v7) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v7, v4);
  }

  return WTF::fastFree(a1, v4);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteDataForRegistrableDomains(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::call(uint64_t a1, unint64_t *a2)
{
  if (a2)
  {
    uint64_t v4 = (const WTF::URL *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(*a2 + 80));
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v14, v4);
    if (WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 24), &v14))
    {
      unint64_t v6 = *a2;
      unsigned int v7 = *(_DWORD *)(a1 + 52);
      if (v7 == *(_DWORD *)(a1 + 48))
      {
        WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::Key const&>(a1 + 40, v6);
      }
      else
      {
        WebKit::NetworkCache::Key::Key(*(void *)(a1 + 40) + 72 * v7, v6);
        ++*(_DWORD *)(a1 + 52);
      }
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(a1 + 56), &v14, (uint64_t)v13);
    }
    uint64_t result = v14;
    int v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(a1 + 32);
    *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
    uint64_t v10 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v11 = &unk_1EE9CABF8;
    v11[1] = v9;
    void v11[2] = v10;
    v13[0] = (uint64_t)v11;
    WebKit::NetworkCache::Cache::remove(v8, (const WebKit::NetworkCache::Key **)(a1 + 40), v13);
    uint64_t result = (WTF::StringImpl *)v13[0];
    if (v13[0]) {
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v13[0] + 8))(v13[0]);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12NetworkCache5Cache31deleteDataForRegistrableDomainsERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetIS7_NS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEEEEEEEN3__0clIKNS4_14TraversalEntryEEEDaPT_EUlvE_vJEED1Ev(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CABF8;
  uint64_t v3 = (WTF::StringImpl **)a1[2];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12NetworkCache5Cache31deleteDataForRegistrableDomainsERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetIS7_NS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEEEEEEEN3__0clIKNS4_14TraversalEntryEEEDaPT_EUlvE_vJEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CABF8;
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 2);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12NetworkCache5Cache31deleteDataForRegistrableDomainsERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetIS7_NS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEEEEEEEN3__0clIKNS4_14TraversalEntryEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 16);
  char v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::BlobStorage::synchronize(void)::$_0,void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(WTF::StringImpl *result, uint64_t a2, int a3)
{
  if (a3 == 1)
  {
    _OWORD v12[3] = v3;
    v12[4] = v4;
    uint64_t v5 = *((void *)result + 1);
    WTF::FileSystemImpl::pathByAppendingComponent();
    uint64_t v7 = WTF::FileSystemImpl::hardLinkCount((WTF::FileSystemImpl *)v12, v6);
    if ((_BYTE)v8 && v7 == 1)
    {
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)v12, v8);
    }
    else
    {
      uint64_t v9 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)v12, v8);
      if ((_BYTE)v10) {
        unint64_t v11 = v9;
      }
      else {
        unint64_t v11 = 0;
      }
      atomic_fetch_add((atomic_ullong *volatile)(v5 + 16), v11);
    }
    uint64_t result = v12[0];
    v12[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t std::__optional_storage_base<WebKit::NetworkCache::Key,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::NetworkCache::Key,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(unsigned char *)(a1 + 72)) {
      return WebKit::NetworkCache::Key::operator=(a1, a2);
    }
  }
  else if (*(unsigned char *)(a1 + 72))
  {
    return std::__optional_destruct_base<WebKit::NetworkCache::Key,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    uint64_t v2 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)a1 = v2;
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    *(void *)(a1 + 24) = v5;
    long long v6 = *(_OWORD *)(a2 + 32);
    long long v7 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = v6;
    *(_OWORD *)(a1 + 48) = v7;
    *(unsigned char *)(a1 + 7objc_destroyWeak(this + 2) = 1;
  }
  return a1;
}

uint64_t WebKit::NetworkCache::Key::operator=(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
  WTF::String::operator=((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  WTF::String::operator=((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  WTF::String::operator=((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  uint64_t v4 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = v4;
  return a1;
}

{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  long long v12;
  long long v13;
  WTF::StringImpl *v15;

  WTF::String::isolatedCopy();
  long long v5 = *(WTF::StringImpl **)a1;
  *(void *)a1 = v15;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  WTF::String::isolatedCopy();
  long long v7 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  WTF::String::isolatedCopy();
  uint64_t v9 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  WTF::String::isolatedCopy();
  unint64_t v11 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  int v12 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = v12;
  uint64_t v13 = *(_OWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 5objc_destroyWeak(this + 2) = v13;
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::NetworkCache::Key,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(result + 72))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(WTF::StringImpl **)(result + 24);
    *(void *)(v2 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    long long v5 = *(WTF::StringImpl **)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t result = *(void *)v2;
    *(void *)uint64_t v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *(unsigned char *)(v2 + 7objc_destroyWeak(this + 2) = 0;
  }
  return result;
}

size_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Data::mapToFile(WTF::String const&)::$_0,void,WTF::Function<BOOL ()(std::span<unsigned char const,18446744073709551615ul>)> const&>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::NetworkCache::Data::apply(*(void *)(a1 + 8), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::computeSHA1(WebKit::NetworkCache::Data const&,std::array<unsigned char,8ul> const&)::$_0,BOOL,std::span<unsigned char const,18446744073709551615ul>>::call(uint64_t a1)
{
  return 1;
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = v3;
  if (v3)
  {
    if (v3 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198C51650);
    }
    int v6 = v3;
    long long v7 = (void *)WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(a1 + 8) = v6;
    *(void *)a1 = v7;
    WTF::VectorTypeOperations<std::pair<WTF::String,WTF::String>>::uninitializedCopy(*(void *)a2, *(void *)a2 + 16 * *(unsigned int *)(a2 + 12), v7);
  }
  return a1;
}

uint64_t WTF::VectorTypeOperations<std::pair<WTF::String,WTF::String>>::uninitializedCopy(uint64_t result, uint64_t a2, void *a3)
{
  while (result != a2)
  {
    uint64_t v3 = *(_DWORD **)result;
    if (*(void *)result) {
      *v3 += 2;
    }
    *a3 = v3;
    uint64_t v4 = *(_DWORD **)(result + 8);
    if (v4) {
      *v4 += 2;
    }
    a3[1] = v4;
    result += 16;
    a3 += 2;
  }
  return result;
}

uint64_t WTF::Persistence::VectorCoder<false,std::pair<WTF::String,WTF::String>,0ul>::encodeForPersistence<WTF::Persistence::Encoder>(uint64_t a1, uint64_t a2)
{
  uint64_t result = WTF::Persistence::Encoder::operator<<();
  if (*(_DWORD *)(a2 + 12))
  {
    unint64_t v4 = 0;
    uint64_t v5 = 8;
    do
    {
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      uint64_t result = WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      ++v4;
      v5 += 16;
    }
    while (v4 < *(unsigned int *)(a2 + 12));
  }
  return result;
}

uint64_t WTF::Persistence::Coder<std::optional<WebCore::ResourceRequest>>::encodeForPersistence<WTF::Persistence::Encoder>(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 200))
  {
    JUMPOUT(0x19972DCD0);
  }
  MEMORY[0x19972DCD0](a1, 1);
  if (*(unsigned char *)(a2 + 200))
  {
    return WTF::Persistence::Coder<WebCore::ResourceRequest>::encodeForPersistence();
  }
  else
  {
    unint64_t v4 = (WebCore::ResourceResponseBase *)std::__throw_bad_optional_access[abi:sn180100]();
    return std::__optional_destruct_base<WebCore::ResourceResponse,false>::reset[abi:sn180100](v4);
  }
}

void std::__optional_destruct_base<WebCore::ResourceResponse,false>::reset[abi:sn180100](WebCore::ResourceResponseBase *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 256))
  {
    uint64_t v3 = (const void *)*((void *)this + 30);
    *((void *)this + 30) = 0;
    if (v3) {
      CFRelease(v3);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase(this, a2);
    *((unsigned char *)this + 256) = 0;
  }
}

uint64_t WTF::Persistence::Decoder::operator>><WebCore::ResourceRequest,(void *)0>(uint64_t a1, WebCore::ResourceRequestBase *a2)
{
  WTF::Persistence::Coder<WebCore::ResourceRequest>::decodeForPersistence();
  std::__optional_storage_base<WebCore::ResourceRequest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ResourceRequest,false>>(a2, (uint64_t)v5);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v5);
  return a1;
}

void sub_198C519F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C51B04(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C51C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_198C51D9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C51E78(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198C51F94(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void API::TargetedElementRequest::~TargetedElementRequest(API::TargetedElementRequest *this)
{
  uint64_t v2 = *((unsigned int *)this + 8);
  if (v2 != -1) {
    ((void (*)(char *, char *))off_1EE9CACB0[v2])(&v3, (char *)this + 16);
  }
  *((_DWORD *)this + 8) = -1;
}

{
  uint64_t v2;
  char v3;

  uint64_t v2 = *((unsigned int *)this + 8);
  if (v2 != -1) {
    ((void (*)(char *, char *))off_1EE9CACB0[v2])(&v3, (char *)this + 16);
  }
  *((_DWORD *)this + 8) = -1;
  MEMORY[0x199740C10](this, 0x10E3C40C92AF5B7);
}

void sub_198C521C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9CACB0[a14])(v15 - 33, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C525A8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_198C52DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t API::ObjectImpl<(API::Object::Type)23>::type()
{
  return 23;
}

BOOL WebCore::ElementContext::isSameElement(WebCore::ElementContext *this, const ElementContext *a2)
{
  uint64_t v2 = *((void *)this + 2);
  BOOL v3 = v2 != 0;
  unint64_t m_identifier = a2->webPageIdentifier.m_value.m_identifier;
  BOOL v5 = m_identifier != 0;
  int v6 = v2 == m_identifier;
  if (!v3 || !v5) {
    int v6 = v3 ^ v5 ^ 1;
  }
  if (v6 != 1) {
    return 0;
  }
  BOOL v7 = *((void *)this + 5) == a2->m_processIdentifier.m_identifier
    && *((void *)this + 4) == *(void *)&a2->documentIdentifier.m_object[8];
  if (!v7 || *((void *)this + 6) != *(void *)&a2[1].boundingRect.m_location) {
    return 0;
  }
  uint64_t v10 = *((void *)this + 8);
  BOOL v11 = v10 != 0;
  unint64_t v12 = a2[1].webPageIdentifier.m_value.m_identifier;
  BOOL v13 = v12 != 0;
  BOOL v14 = v10 == v12;
  if (v11 && v13) {
    return v14;
  }
  else {
    return v11 ^ v13 ^ 1;
  }
}

void sub_198C536C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C53854(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF *a10)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkCache::Key::Key(uint64_t a1, uint64_t a2)
{
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = v4;
  long long v5 = *(_OWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 5objc_destroyWeak(this + 2) = v5;
  return a1;
}

void *WebKit::NetworkCache::Key::Key(void *a1, _DWORD **a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, uint64_t a6)
{
  uint64_t v8 = *a2;
  if (*a2) {
    *v8 += 2;
  }
  *a1 = v8;
  uint64_t v9 = *a3;
  if (*a3) {
    *v9 += 2;
  }
  a1[1] = v9;
  uint64_t v10 = *a5;
  if (*a5) {
    *v10 += 2;
  }
  a1[2] = v10;
  BOOL v11 = *a4;
  if (*a4) {
    *v11 += 2;
  }
  a1[3] = v11;
  WebKit::NetworkCache::Key::computeHash((uint64_t)a1, a6);
  WebKit::NetworkCache::Key::partitionToPartitionHash((uint64_t)a1, a6);
  return a1;
}

uint64_t WebKit::NetworkCache::Key::computeHash(uint64_t a1, uint64_t a2)
{
  WTF::SHA1::SHA1((WTF::SHA1 *)v5);
  MEMORY[0x19972E910](v5, a2, 8);
  WebKit::NetworkCache::hashString((uint64_t)v5, a1);
  WebKit::NetworkCache::hashString((uint64_t)v5, a1 + 8);
  WebKit::NetworkCache::hashString((uint64_t)v5, a1 + 16);
  WebKit::NetworkCache::hashString((uint64_t)v5, a1 + 24);
  return WTF::SHA1::computeHash();
}

WTF::StringImpl *WebKit::NetworkCache::Key::hashAsString@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X8>)
{
  int v22 = 0;
  int v23 = 0;
  unsigned int v24 = 0;
  char v25 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v22);
  for (uint64_t i = 0; i != 20; ++i)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + i);
    if (v6 >= 0xA0) {
      int v7 = 55;
    }
    else {
      int v7 = 48;
    }
    unsigned int v8 = v7 + (v6 >> 4);
    char v26 = v8;
    if (v23 && ((uint64_t v9 = v24, v24 < *((_DWORD *)v23 + 1)) ? (v10 = v22 == 0) : (v10 = 0), v10))
    {
      int v11 = *((_DWORD *)v23 + 4);
      uint64_t v12 = *((void *)v23 + 1);
      ++v24;
      if ((v11 & 4) != 0) {
        *(unsigned char *)(v12 + v9) = v8;
      }
      else {
        *(_WORD *)(v12 + 2 * v9) = v8;
      }
    }
    else
    {
      WTF::StringBuilder::append();
    }
    if ((v6 & 0xF) >= 0xA) {
      __int16 v13 = 55;
    }
    else {
      __int16 v13 = 48;
    }
    __int16 v14 = v13 + (v6 & 0xF);
    char v26 = v13 + (v6 & 0xF);
    if (v23 && ((uint64_t v15 = v24, v24 < *((_DWORD *)v23 + 1)) ? (v16 = v22 == 0) : (v16 = 0), v16))
    {
      int v17 = *((_DWORD *)v23 + 4);
      uint64_t v18 = *((void *)v23 + 1);
      ++v24;
      if ((v17 & 4) != 0) {
        *(unsigned char *)(v18 + v15) = v14;
      }
      else {
        *(_WORD *)(v18 + 2 * v15) = v14;
      }
    }
    else
    {
      WTF::StringBuilder::append();
    }
  }
  int v19 = v22;
  if (v22
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v22),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v22),
        (int v19 = v22) != 0))
  {
    *(_DWORD *)v19 += 2;
  }
  *a2 = v19;
  unsigned int v20 = v23;
  int v23 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v4);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t result = v22;
  int v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::hashString(uint64_t result, uint64_t a2)
{
  if (*(void *)a2) {
    return MEMORY[0x1F40EB990](result, *(void *)(*(void *)a2 + 8), *(unsigned int *)(*(void *)a2 + 4) | ((unint64_t)((*(_DWORD *)(*(void *)a2 + 16) >> 2) & 1) << 32));
  }
  return result;
}

uint64_t WebKit::NetworkCache::Key::partitionToPartitionHash(uint64_t a1, uint64_t a2)
{
  WTF::SHA1::SHA1((WTF::SHA1 *)v5);
  MEMORY[0x19972E910](v5, a2, 8);
  WebKit::NetworkCache::hashString((uint64_t)v5, a1);
  return WTF::SHA1::computeHash();
}

BOOL WebKit::NetworkCache::hexDigitsToHash<unsigned char>(BOOL result, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = 0;
  unint64_t v4 = 0;
  BOOL v5 = 0;
  while (a2 > v3 && a2 > v3 + 1)
  {
    unsigned int v6 = *(unsigned __int8 *)(result + v3);
    if (v6 - 48 < 0xA || ((v6 | 0x20) - 97) <= 5u)
    {
      unsigned int v8 = *(unsigned __int8 *)(result + v3 + 1);
      if (v8 - 48 < 0xA || ((v8 | 0x20) - 97) <= 5u)
      {
        char v10 = v6 >= 0x41 ? 9 : 0;
        char v11 = v10 + v6;
        char v12 = (v8 + 9) & 0xF;
        if (v8 < 0x41) {
          char v12 = v8 - 48;
        }
        *(unsigned char *)(a3 + v4) = v12 | (16 * v11);
        BOOL v5 = v4 > 0x12;
        v3 += 2;
        if (++v4 != 20) {
          continue;
        }
      }
    }
    return v5;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::NetworkCache::Key::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  BOOL v4 = *(void *)(a1 + 32) == *(void *)(a2 + 32)
    && *(void *)(a1 + 40) == *(void *)(a2 + 40)
    && *(_DWORD *)(a1 + 48) == (unint64_t)*(unsigned int *)(a2 + 48);
  if (!v4
    || !WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3)
    || !WTF::equal(*(WTF **)(a1 + 8), *(const WTF::StringImpl **)(a2 + 8), v8)
    || !WTF::equal(*(WTF **)(a1 + 16), *(const WTF::StringImpl **)(a2 + 16), v9))
  {
    return 0;
  }
  char v11 = *(WTF **)(a1 + 24);
  char v12 = *(const WTF::StringImpl **)(a2 + 24);

  return WTF::equal(v11, v12, v10);
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::SpeculativeLoad(uint64_t a1, _DWORD *a2, _OWORD *a3, const String *a4, uint64_t *a5, __int16 a6, char a7, __int16 a8, uint64_t *a9)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE9CAD50;
  ++*a2;
  *(void *)(a1 + 8) = a2;
  uint64_t v15 = *a9;
  *a9 = 0;
  *(void *)(a1 + 16) = v15;
  uint64_t v16 = a1 + 24;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 24), a4);
  *(void *)(a1 + 224) = 0;
  int v17 = (WebCore::FragmentedSharedBuffer *)WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 232));
  *(void *)(a1 + 47objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(a1 + 480) = 0;
  *(unsigned char *)(a1 + 370) = *(unsigned char *)(a1 + 370) & 0xF1 | 4;
  WebCore::FragmentedSharedBuffer::create((uint64_t *)v39, v17);
  *(void *)(a1 + 488) = 0;
  WebCore::SharedBufferBuilder::initialize();
  int v19 = *(unsigned int **)&v39[0];
  *(void *)&v39[0] = 0;
  if (v19) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v18);
  }
  uint64_t v20 = *a5;
  *a5 = 0;
  *(void *)(a1 + 496) = v20;
  *(_WORD *)(a1 + 504) = 0;
  uint64_t v21 = *(void *)(a1 + 8);
  uint64_t v22 = *(void *)(v21 + 24);
  *(void *)&v39[0] = *(void *)(v21 + 72);
  uint64_t v23 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v22 + 224), v39);
  if (v23)
  {
    unsigned int v24 = (WebKit::NetworkSession *)v23;
    WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v39);
    long long v25 = a3[1];
    v39[0] = *a3;
    v39[1] = v25;
    char v45 = 1;
    __int16 v44 = 1;
    WebCore::ResourceRequestBase::operator=((uint64_t)v42, v16);
    char v26 = *(const void **)(a1 + 216);
    if (v26) {
      CFRetain(*(CFTypeRef *)(a1 + 216));
    }
    CFTypeRef v27 = cf;
    CFTypeRef cf = v26;
    if (v27) {
      CFRelease(v27);
    }
    __int16 v50 = a6;
    char v51 = a7;
    __int16 v52 = a8;
    uint64_t v28 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0xCA0);
    WebKit::NetworkLoad::NetworkLoad((uint64_t)v28, a1, (uint64_t)v39, v24);
    std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 224), v28);
    WebKit::NetworkLoad::startWithScheduling(*(unsigned int **)(a1 + 224));
    if (v49)
    {
      CFTypeRef v38 = v48;
      CFTypeRef v48 = 0;
      if (v38) {
        CFRelease(v38);
      }
    }
    WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v29);
    if (v46[2576]) {
      WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v46);
    }
    CFTypeRef v30 = cf;
    CFTypeRef cf = 0;
    if (v30) {
      CFRelease(v30);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v42);
    char v32 = v41;
    unsigned int v41 = 0;
    if (v32) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v32, v31);
    }
    char v33 = v40;
    char v40 = 0;
    if (v33) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v33, v31);
    }
  }
  else
  {
    WTF::RunLoop::main(0);
    uint64_t v34 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    int v35 = (void *)WTF::fastMalloc((WTF *)0x10);
    *int v35 = &unk_1EE9CB060;
    v35[1] = v34;
    *(void *)&v39[0] = v35;
    WTF::RunLoop::dispatch();
    uint64_t v36 = *(void *)&v39[0];
    *(void *)&v39[0] = 0;
    if (v36) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
  }
  return a1;
}

void WebKit::NetworkCache::SpeculativeLoad::~SpeculativeLoad(WebKit::NetworkCache::Entry **this)
{
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100](this + 62, 0);
  unint64_t v3 = (unsigned int *)this[61];
  this[61] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, v2);
  }
  BOOL v4 = this[59];
  this[59] = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(this + 29), (WTF::StringImpl *)v2);
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](this + 28, 0);
  BOOL v5 = this[27];
  this[27] = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(this + 3));
  unsigned int v6 = this[2];
  this[2] = 0;
  if (v6) {
    (*(void (**)(WebKit::NetworkCache::Entry *))(*(void *)v6 + 8))(v6);
  }
  int v7 = this[1];
  this[1] = 0;
  if (v7) {
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref();
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::NetworkCache::SpeculativeLoad::~SpeculativeLoad(this);

  WTF::fastFree(v1, v2);
}

WebKit::NetworkCache::Entry *WebKit::NetworkCache::SpeculativeLoad::cancel(WebKit::NetworkCache::Entry *this)
{
  uint64_t v2 = (WebKit::NetworkLoad **)((char *)this + 224);
  uint64_t v1 = *((void *)this + 28);
  if (v1)
  {
    uint64_t v3 = (uint64_t)this;
    uint64_t v4 = *(void *)(v1 + 3008);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
    std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](v2, 0);
    unsigned int v8 = 0;
    WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()((uint64_t *)(v3 + 16), &v8);
    this = v8;
    if (v8)
    {
      WebKit::NetworkCache::Entry::~Entry(v8, v5);
      return (WebKit::NetworkCache::Entry *)WTF::fastFree(v6, v7);
    }
  }
  return this;
}

WebKit::NetworkCache::Entry *WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(uint64_t *a1, WebKit::NetworkCache::Entry **a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v9 = v3;
  WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(v2, &v9);
  uint64_t result = v9;
  if (v9)
  {
    WebKit::NetworkCache::Entry::~Entry(v9, v4);
    uint64_t result = (WebKit::NetworkCache::Entry *)WTF::fastFree(v7, v8);
    if (!v2) {
      return result;
    }
  }
  else if (!v2)
  {
    return result;
  }
  unsigned int v6 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return (WebKit::NetworkCache::Entry *)v6(v2);
}

void WebKit::NetworkCache::SpeculativeLoad::willSendRedirectedRequest(WebKit::NetworkCache::Cache **a1, const WebCore::ResourceRequest *a2, const String *a3, WebCore::ResourceRequest *a4, uint64_t *a5)
{
  char v10 = a1[1];
  uint64_t v11 = *((void *)v10 + 3);
  v18[0] = *((WTF::StringImpl **)v10 + 9);
  char v12 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v11 + 232), v18);
  if (v12)
  {
    uint64_t v13 = WebCore::NetworkStorageSession::maxAgeCacheCap(v12, a2);
    char v15 = v14;
  }
  else
  {
    char v15 = 0;
    uint64_t v13 = 0;
  }
  WebKit::NetworkCache::Cache::storeRedirect(a2, a4, a1[1], a3, v13, v15, (uint64_t *)v18);
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100](a1 + 62, v18[0]);
  if (!a1[62])
  {
    WebKit::NetworkCache::Cache::makeRedirectEntry(a1[1], a2, a4, a3, (uint64_t *)v18);
    std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100](a1 + 62, v18[0]);
  }
  WebKit::NetworkCache::SpeculativeLoad::didComplete((WebKit::NetworkCache::SpeculativeLoad *)a1);
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)v18);
  uint64_t v16 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v16 + 16))(v16, v18);
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  CFTypeRef v17 = cf;
  CFTypeRef cf = 0;
  if (v17) {
    CFRelease(v17);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v18);
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::didComplete(WebKit::NetworkCache::SpeculativeLoad *this)
{
  uint64_t v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  uint64_t result = WTF::RunLoop::isCurrent(v2);
  if (result)
  {
    if (!*((unsigned char *)this + 504))
    {
      *((unsigned char *)this + 504) = 1;
      std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)this + 28, 0);
      uint64_t v4 = (WebKit::NetworkCache::Entry *)*((void *)this + 62);
      if (v4)
      {
        *((_WORD *)v4 + 156) = *((_WORD *)v4 + 156) & 0xC3FF | 0x800;
        uint64_t v4 = (WebKit::NetworkCache::Entry *)*((void *)this + 62);
      }
      *((void *)this + 6objc_destroyWeak(this + 2) = 0;
      unsigned int v8 = v4;
      WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()((uint64_t *)this + 2, &v8);
      uint64_t result = (uint64_t)v8;
      if (v8)
      {
        WebKit::NetworkCache::Entry::~Entry(v8, v5);
        return WTF::fastFree(v6, v7);
      }
    }
  }
  else
  {
    uint64_t result = 168;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::didReceiveResponse(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  unsigned int v8 = (WebCore::ResourceResponseBase *)(a1 + 232);
  WebCore::ResourceResponseBase::operator=(a1 + 232, a2);
  uint64_t v9 = *(void *)(a2 + 240);
  if (v9) {
    CFRetain(*(CFTypeRef *)(a2 + 240));
  }
  char v10 = *(const void **)(a1 + 472);
  *(void *)(a1 + 47objc_destroyWeak(this + 2) = v9;
  if (v10) {
    CFRelease(v10);
  }
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 248);
  *(unsigned char *)(a1 + 505) = a3;
  uint64_t v11 = (void *)WebCore::ResourceResponseBase::mimeType(v8);
  if (MEMORY[0x19972E990](*v11, "multipart/x-mixed-replace", 25))
  {
    uint64_t v13 = *(unsigned int **)(a1 + 488);
    *(void *)(a1 + 488) = 0;
    if (v13) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v12);
    }
  }
  if (WebCore::ResourceResponseBase::httpStatusCode(v8) == 304 && (uint64_t v14 = *(void *)(a1 + 496)) != 0)
  {
    WebKit::NetworkCache::Cache::update(*(void **)(a1 + 8), (WebCore::NetworkStorageSession *)(a1 + 24), v14, v8, a3, &v22);
    char v15 = v22;
    uint64_t v22 = 0;
    std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 496), v15);
    CFTypeRef v17 = v22;
    uint64_t v22 = 0;
    if (v17)
    {
      WebKit::NetworkCache::Entry::~Entry(v17, v16);
      WTF::fastFree(v18, v19);
    }
  }
  else
  {
    std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 496), 0);
  }
  uint64_t v20 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v20 + 16))(v20, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
}

unsigned int *WebKit::NetworkCache::SpeculativeLoad::didReceiveBuffer(WebKit::NetworkCache::SpeculativeLoad *this, const WebCore::FragmentedSharedBuffer *a2)
{
  uint64_t result = (unsigned int *)*((void *)this + 61);
  if (result)
  {
    uint64_t v4 = (WebKit::NetworkCache::SpeculativeLoad *)((char *)this + 488);
    if (*((void *)a2 + 6) + *((void *)result + 6) > 0xA00000uLL)
    {
      *(void *)uint64_t v4 = 0;
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
    }
    else
    {
      WebCore::SharedBufferBuilder::ensureBuffer(v4);
      return (unsigned int *)WebCore::FragmentedSharedBuffer::append();
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::didFinishLoading(uint64_t this, const WebCore::NetworkLoadMetrics *a2)
{
  if (!*(unsigned char *)(this + 504))
  {
    uint64_t v2 = this;
    if (!*(void *)(this + 496))
    {
      uint64_t v3 = *(atomic_uint **)(this + 488);
      if (v3)
      {
        uint64_t v4 = (void *)(this + 496);
        BOOL v5 = *(atomic_uchar *volatile ***)(this + 8);
        char v6 = *(unsigned char *)(this + 505);
        atomic_fetch_add(v3, 1u);
        uint64_t v22 = (unsigned int *)v3;
        int v7 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
        *(void *)int v7 = &unk_1EE9CB088;
        uint64_t v21 = v7;
        WebKit::NetworkCache::Cache::store((WebKit::NetworkCache *)(v2 + 24), (WebCore::ResourceRequest *)(v2 + 232), v5, v6, (uint64_t *)&v22, (uint64_t *)&v21, (uint64_t *)&v23);
        unsigned int v8 = v23;
        uint64_t v23 = 0;
        std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v2 + 496), v8);
        char v10 = v23;
        uint64_t v23 = 0;
        if (v10)
        {
          WebKit::NetworkCache::Entry::~Entry(v10, v9);
          WTF::fastFree(v19, v20);
        }
        uint64_t v11 = (uint64_t)v21;
        uint64_t v21 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
        char v12 = v22;
        uint64_t v22 = 0;
        if (v12) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, v9);
        }
        if (!*v4)
        {
          uint64_t v13 = (WebCore *)WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)(v2 + 232));
          if (WebCore::isStatusCodeCacheableByDefault(v13))
          {
            uint64_t v14 = *(WebKit::NetworkCache::Cache **)(v2 + 8);
            char v15 = *(unsigned char *)(v2 + 505);
            WebCore::SharedBufferBuilder::take((uint64_t *)&v21, (WebCore::SharedBufferBuilder *)(v2 + 488));
            uint64_t v16 = v21;
            uint64_t v21 = 0;
            uint64_t v22 = v16;
            WebKit::NetworkCache::Cache::makeEntry(v14, (const WebCore::ResourceRequest *)(v2 + 24), (const WebCore::ResourceRequest *)(v2 + 232), v15, (uint64_t *)&v22, (uint64_t *)&v23);
            std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v2 + 496), v23);
            if (v22) {
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v22, v17);
            }
            uint64_t v18 = v21;
            uint64_t v21 = 0;
            if (v18) {
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v18, v17);
            }
          }
        }
      }
    }
    return WebKit::NetworkCache::SpeculativeLoad::didComplete((WebKit::NetworkCache::SpeculativeLoad *)v2);
  }
  return this;
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::didFailLoading(uint64_t this, const WebCore::ResourceError *a2)
{
  if (!*(unsigned char *)(this + 504))
  {
    uint64_t v2 = (WebKit::NetworkCache::SpeculativeLoad *)this;
    std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(this + 496), 0);
    return WebKit::NetworkCache::SpeculativeLoad::didComplete(v2);
  }
  return this;
}

uint64_t WebKit::NetworkCache::requestsHeadersMatch(const String *this, const WebCore::ResourceRequest *a2, const WebCore::ResourceRequest *a3)
{
  WebCore::ResourceRequest::ResourceRequest(v23, this);
  WebCore::ResourceRequestBase::makeUnconditional((WebCore::ResourceRequestBase *)v23);
  uint64_t v4 = WebCore::ResourceRequestBase::httpHeaderFields((WebCore::ResourceRequestBase *)v23);
  uint64_t v5 = WebCore::ResourceRequestBase::httpHeaderFields(a2);
  uint64_t v6 = *(unsigned int *)(v4 + 12);
  if (v6 != *(_DWORD *)(v5 + 12) || (unsigned int v7 = *(_DWORD *)(v4 + 28), v7 != *(_DWORD *)(v5 + 28)))
  {
LABEL_23:
    uint64_t v18 = 0;
    goto LABEL_24;
  }
  if (v6)
  {
    uint64_t v8 = *(void *)v4;
    uint64_t v9 = *(void *)v4 + 16 * v6;
    while (1)
    {
      WebCore::HTTPHeaderMap::get();
      char v12 = WTF::equal(v25, *(const WTF::StringImpl **)(v8 + 8), v10);
      uint64_t v13 = v25;
      long long v25 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v11);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      if ((v12 & 1) == 0) {
        goto LABEL_23;
      }
      v8 += 16;
      if (v8 == v9)
      {
        unsigned int v7 = *(_DWORD *)(v4 + 28);
        break;
      }
    }
  }
  if (v7)
  {
    uint64_t v14 = *(void *)(v4 + 16);
    uint64_t v15 = v14 + 16 * v7;
    do
    {
      WebCore::HTTPHeaderMap::getUncommonHeader();
      uint64_t v18 = WTF::equal(v25, *(const WTF::StringImpl **)(v14 + 8), v16);
      int v19 = v25;
      long long v25 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v17);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      v14 += 16;
      if (v14 == v15) {
        char v20 = 0;
      }
      else {
        char v20 = v18;
      }
    }
    while ((v20 & 1) != 0);
  }
  else
  {
    uint64_t v18 = 1;
  }
LABEL_24:
  CFTypeRef v21 = cf;
  CFTypeRef cf = 0;
  if (v21) {
    CFRelease(v21);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v23);
  return v18;
}

uint64_t WebKit::NetworkCache::SpeculativeLoadManager::SpeculativeLoadManager(uint64_t a1, uint64_t a2, atomic_uchar **a3)
{
  *(void *)a1 = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v6 = *(atomic_uint **)(a2 + 8);
  atomic_fetch_add(v6, 1u);
  *(void *)(a1 + 8) = v6;
  unsigned int v7 = *a3;
  if (*a3) {
    unsigned int v7 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v7);
  }
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  return a1;
}

void WebKit::NetworkCache::SpeculativeLoadManager::~SpeculativeLoadManager(WebKit::NetworkCache::SpeculativeLoadManager *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 8);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (WTF::StringImpl **)*((void *)this + 8);
      do
      {
        if (v5[2] != (WTF::StringImpl *)-1) {
          uint64_t v5 = WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>::~KeyValuePair(v5, a2);
        }
        v5 += 10;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v6 = *((void *)this + 7);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    if (v7)
    {
      uint64_t v8 = *((void *)this + 7);
      do
      {
        if (*(void *)(v8 + 16) != -1) {
          uint64_t v8 = WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>::~KeyValuePair(v8, a2);
        }
        v8 += 80;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  uint64_t v9 = *((void *)this + 6);
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(v9 - 4);
    if (v10)
    {
      uint64_t v11 = *((void *)this + 6);
      do
      {
        if (*(void *)(v11 + 16) != -1) {
          uint64_t v11 = WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~KeyValuePair(v11);
        }
        v11 += 80;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  uint64_t v12 = *((void *)this + 5);
  if (v12)
  {
    uint64_t v13 = *(unsigned int *)(v12 - 4);
    if (v13)
    {
      uint64_t v14 = *((void *)this + 5);
      do
      {
        if (*(void *)(v14 + 16) != -1) {
          uint64_t v14 = WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>::~KeyValuePair(v14);
        }
        v14 += 80;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  uint64_t v15 = *((void *)this + 4);
  if (v15)
  {
    uint64_t v16 = *(unsigned int *)(v15 - 4);
    if (v16)
    {
      CFTypeRef v17 = (_DWORD **)(v15 + 32);
      do
      {
        if (*(v17 - 3) != (_DWORD *)-1)
        {
          uint64_t v18 = *v17;
          WTF::StringImpl *v17 = 0;
          if (v18) {
            WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v18, a2);
          }
        }
        v17 += 5;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree((WTF *)(v15 - 16), a2);
  }
  int v19 = (atomic_uchar *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v19) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v19, a2);
  }
  char v20 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, a2);
  }
  if (*(void *)this)
  {
    *(void *)(*(void *)this + 8) = 0;
    CFTypeRef v21 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v21)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, a2);
      }
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

uint64_t WebKit::NetworkCache::SpeculativeLoadManager::canRetrieve(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t v7 = (void *)a1;
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8)
  {
    int v19 = 0;
    unsigned int v20 = *(_DWORD *)(v8 - 8);
    for (int i = *(_DWORD *)(a2 + 32); ; int i = v19 + v22)
    {
      unsigned int v22 = i & v20;
      a1 = v8 + 80 * (i & v20);
      uint64_t v23 = *(void *)(a1 + 16);
      if (v23 != -1)
      {
        if (!v23) {
          goto LABEL_2;
        }
        a1 = WebKit::NetworkCache::Key::operator==(a1, a2, a3);
        if (a1) {
          break;
        }
      }
      ++v19;
    }
    uint64_t v34 = *(void *)(v8 + 80 * v22 + 72);
    if (v34)
    {
      if (*(unsigned char *)(v34 + 264)
        && (a1 = WebKit::NetworkCache::requestsHeadersMatch((const String *)(v34 + 64), a3, a3), (a1 & 1) == 0))
      {
        uint64_t v12 = *(atomic_uint **)(*(void *)(v7[1] + 8) + 24);
        atomic_fetch_add(v12 + 32, 1u);
        if (*(unsigned char *)(v34 + 264)) {
          WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithRevalidationKey((uint64_t *)&v41, (WebCore::DiagnosticLoggingKeys *)a1);
        }
        else {
          WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithoutRevalidationKey((uint64_t *)&v41, (WebCore::DiagnosticLoggingKeys *)a1);
        }
        WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage((WebCore::DiagnosticLoggingKeys *)v12, *a4, (uint64_t)&v41);
        char v40 = v41;
        unsigned int v41 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2) {
            WTF::StringImpl::destroy(v40, v39);
          }
          else {
            *(_DWORD *)v40 -= 2;
          }
        }
        uint64_t v16 = 0;
        unsigned int add = atomic_fetch_add(v12 + 32, 0xFFFFFFFF);
      }
      else
      {
        uint64_t v12 = *(atomic_uint **)(*(void *)(v7[1] + 8) + 24);
        atomic_fetch_add(v12 + 32, 1u);
        if (*(unsigned char *)(v34 + 264)) {
          WebCore::DiagnosticLoggingKeys::successfulSpeculativeWarmupWithRevalidationKey((uint64_t *)&v41, (WebCore::DiagnosticLoggingKeys *)a1);
        }
        else {
          WebCore::DiagnosticLoggingKeys::successfulSpeculativeWarmupWithoutRevalidationKey((uint64_t *)&v41, (WebCore::DiagnosticLoggingKeys *)a1);
        }
        WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage((WebCore::DiagnosticLoggingKeys *)v12, *a4, (uint64_t)&v41);
        uint64_t v36 = v41;
        unsigned int v41 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2) {
            WTF::StringImpl::destroy(v36, v35);
          }
          else {
            *(_DWORD *)v36 -= 2;
          }
        }
        unsigned int add = atomic_fetch_add(v12 + 32, 0xFFFFFFFF);
        uint64_t v16 = 1;
      }
      goto LABEL_10;
    }
  }
LABEL_2:
  uint64_t v9 = v7[5];
  if (v9)
  {
    int v24 = 0;
    unsigned int v25 = *(_DWORD *)(v9 - 8);
    for (int j = *(_DWORD *)(a2 + 32); ; int j = v24 + v27)
    {
      unsigned int v27 = j & v25;
      a1 = v9 + 80 * (j & v25);
      uint64_t v28 = *(void *)(a1 + 16);
      if (v28 != -1)
      {
        if (!v28) {
          goto LABEL_3;
        }
        a1 = WebKit::NetworkCache::Key::operator==(a1, a2, a3);
        if (a1) {
          break;
        }
      }
      ++v24;
    }
    char v37 = *(const String **)(v9 + 80 * v27 + 72);
    if (v37)
    {
      uint64_t v38 = WebKit::NetworkCache::requestsHeadersMatch(v37 + 3, a3, a3);
      uint64_t v16 = 1;
      if (v38) {
        return v16;
      }
      uint64_t v12 = *(atomic_uint **)(*(void *)(v7[1] + 8) + 24);
      uint64_t v13 = v12 + 32;
      atomic_fetch_add(v12 + 32, 1u);
      WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithRevalidationKey((uint64_t *)&v41, (WebCore::DiagnosticLoggingKeys *)v38);
      goto LABEL_6;
    }
  }
LABEL_3:
  uint64_t v10 = v7[8];
  if (v10)
  {
    int v29 = 0;
    unsigned int v30 = *(_DWORD *)(v10 - 8);
    for (int k = *(_DWORD *)(a2 + 32); ; int k = v29 + v32)
    {
      unsigned int v32 = k & v30;
      a1 = v10 + 80 * (k & v30);
      uint64_t v33 = *(void *)(a1 + 16);
      if (v33 != -1)
      {
        if (!v33) {
          goto LABEL_4;
        }
        a1 = WebKit::NetworkCache::Key::operator==(a1, a2, a3);
        if (a1) {
          break;
        }
      }
      ++v29;
    }
    uint64_t v11 = v7 + 1;
    if (*(void *)(v10 + 80 * v32 + 72))
    {
      uint64_t v12 = *(atomic_uint **)(*(void *)(*v11 + 8) + 24);
      uint64_t v13 = v12 + 32;
      atomic_fetch_add(v12 + 32, 1u);
      WebCore::DiagnosticLoggingKeys::entryWronglyNotWarmedUpKey((uint64_t *)&v41, (WebCore::DiagnosticLoggingKeys *)a1);
      goto LABEL_6;
    }
  }
  else
  {
LABEL_4:
    uint64_t v11 = v7 + 1;
  }
  uint64_t v12 = *(atomic_uint **)(*(void *)(*v11 + 8) + 24);
  uint64_t v13 = v12 + 32;
  atomic_fetch_add(v12 + 32, 1u);
  WebCore::DiagnosticLoggingKeys::unknownEntryRequestKey((uint64_t *)&v41, (WebCore::DiagnosticLoggingKeys *)a1);
LABEL_6:
  WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage((WebCore::DiagnosticLoggingKeys *)v12, *a4, (uint64_t)&v41);
  uint64_t v15 = v41;
  unsigned int v41 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = 0;
  unsigned int add = atomic_fetch_add(v13, 0xFFFFFFFF);
LABEL_10:
  if (add == 1)
  {
    atomic_store(1u, (unsigned int *)v12 + 32);
    (*(void (**)(atomic_uint *))(*(void *)v12 + 8))(v12);
  }
  return v16;
}

WTF::StringImpl *WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage(WebCore::DiagnosticLoggingKeys *a1, uint64_t a2, uint64_t a3)
{
  WebCore::DiagnosticLoggingKeys::networkCacheKey((uint64_t *)&v8, a1);
  WebKit::NetworkProcess::logDiagnosticMessage(a1, a2, (uint64_t)&v8, a3, 1);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::SpeculativeLoadManager::retrieve(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v6 = (WTF::StringImpl *)(a1 + 56);
  uint64_t v7 = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>((uint64_t *)(a1 + 56), a2, a3);
  uint64_t v8 = (WTF::RunLoop *)WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::take(&v38, v6, v7);
  uint64_t v10 = v38;
  if (v38)
  {
    WTF::RunLoop::main(v8);
    uint64_t v11 = *(void *)a3;
    *(void *)a3 = 0;
    uint64_t v12 = *(void *)(v10 + 56);
    *(void *)(v10 + 56) = 0;
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v13 = &unk_1EE9CB0B0;
    v13[1] = v11;
    void v13[2] = v12;
    char v37 = v13;
    WTF::RunLoop::dispatch();
    if (v37) {
      (*(void (**)(void *))(*v37 + 8))(v37);
    }
    return std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100](v10);
  }
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v15 = (uint64_t *)(a1 + 48);
  uint64_t v16 = v17;
  if (v17
    || (WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v15, 0), (uint64_t v16 = *v15) != 0))
  {
    int v18 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    int v18 = 0;
  }
  uint64_t v19 = 0;
  unsigned int v20 = *(_DWORD *)(a2 + 32);
  for (int i = 1; ; ++i)
  {
    unsigned int v22 = v20 & v18;
    uint64_t v23 = (uint64_t *)(v16 + 80 * (v20 & v18));
    uint64_t v24 = v23[2];
    if (v24 == -1)
    {
      uint64_t v19 = v16 + 80 * v22;
      goto LABEL_14;
    }
    if (!v24) {
      break;
    }
    uint64_t result = WebKit::NetworkCache::Key::operator==(v16 + 80 * v22, a2, v9);
    if (result) {
      goto LABEL_26;
    }
LABEL_14:
    unsigned int v20 = i + v22;
  }
  if (v19)
  {
    *(_OWORD *)uint64_t v19 = 0u;
    *(_OWORD *)(v19 + 16) = 0u;
    *(void *)(v19 + 7objc_destroyWeak(this + 2) = 0;
    --*(_DWORD *)(*v15 - 16);
    uint64_t v23 = (uint64_t *)v19;
  }
  WebKit::NetworkCache::Key::operator=((uint64_t)v23, a2);
  unsigned int v25 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned int v25 = 0;
  v25[1] = 0;
  uint64_t result = std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](v23 + 9, v25);
  uint64_t v26 = *v15;
  if (*v15) {
    int v27 = *(_DWORD *)(v26 - 12) + 1;
  }
  else {
    int v27 = 1;
  }
  *(_DWORD *)(v26 - 1objc_destroyWeak(this + 2) = v27;
  uint64_t v28 = *v15;
  if (*v15) {
    int v29 = *(_DWORD *)(v28 - 12);
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
  unint64_t v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_25:
      uint64_t result = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v15, v23);
      uint64_t v23 = (uint64_t *)result;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v32 = v23[9];
  uint64_t v33 = *(unsigned int *)(v32 + 12);
  if (v33 == *(_DWORD *)(v32 + 8))
  {
    uint64_t result = WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)v23[9], v33 + 1, (unint64_t)a3);
    uint64_t v33 = *(unsigned int *)(v32 + 12);
    int v34 = v33 + 1;
    uint64_t v35 = *(void *)v32;
    uint64_t v36 = *(void *)result;
    *(void *)uint64_t result = 0;
  }
  else
  {
    int v34 = v33 + 1;
    uint64_t v35 = *(void *)v32;
    uint64_t v36 = *(void *)a3;
    *(void *)a3 = 0;
  }
  *(void *)(v35 + 8 * v33) = v36;
  *(_DWORD *)(v32 + 1objc_destroyWeak(this + 2) = v34;
  return result;
}

BOOL WebKit::NetworkCache::SpeculativeLoadManager::shouldRegisterLoad(WebKit::NetworkCache::SpeculativeLoadManager *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v2 = (void *)WebCore::ResourceRequestBase::httpMethod(this);
  if (!MEMORY[0x19972E990](*v2, "GET", 3)) {
    return 0;
  }
  WebCore::ResourceRequestBase::httpHeaderField();
  if (!v6) {
    return 1;
  }
  BOOL v4 = *((_DWORD *)v6 + 1) == 0;
  if (*(_DWORD *)v6 == 2) {
    WTF::StringImpl::destroy(v6, v3);
  }
  else {
    *(_DWORD *)v6 -= 2;
  }
  return v4;
}

uint64_t WebKit::NetworkCache::SpeculativeLoadManager::registerLoad(uint64_t a1, const WebCore::ResourceRequest *a2, WebKit::NetworkCache::SpeculativeLoadManager *this, _DWORD **a4, __int16 a5, char a6, __int16 a7)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebKit::NetworkCache::SpeculativeLoadManager::shouldRegisterLoad(this, a2);
  if (result)
  {
    int v15 = *((unsigned __int8 *)this + 147);
    uint64_t v16 = (uint64_t *)(a1 + 32);
    uint64_t result = WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(*(void *)(a1 + 32), a2);
    uint64_t v17 = result;
    if (v15 == 1)
    {
      if (result) {
        WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::markLoadAsCompleted((unsigned char *)result);
      }
      __int16 v71 = a7;
      int v29 = *(atomic_uchar **)(a1 + 16);
      if (v29)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(v76, v29, *(void *)(a1 + 24));
        uint64_t v30 = (atomic_uchar **)v76[0];
      }
      else
      {
        uint64_t v30 = 0;
      }
      long long v31 = *((_OWORD *)a2 + 1);
      *(_OWORD *)__int16 v76 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v77 = v31;
      uint64_t v32 = WTF::fastMalloc((WTF *)0x30);
      *(void *)uint64_t v32 = &unk_1EE9CB0D8;
      *(void *)(v32 + 8) = a1;
      *(_OWORD *)(v32 + 16) = *(_OWORD *)v76;
      *(_OWORD *)(v32 + 3objc_destroyWeak(this + 2) = *(_OWORD *)v77;
      uint64_t v33 = WTF::fastMalloc((WTF *)0xD0);
      *(_DWORD *)uint64_t v33 = 1;
      int v34 = *v30;
      __int16 v69 = a5;
      if (*v30) {
        int v34 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v34);
      }
      char v70 = a6;
      *(void *)(v33 + 8) = v34;
      *(void *)(v33 + 16) = v30;
      WebKit::NetworkCache::Key::Key(v33 + 24, (uint64_t)a4);
      *(void *)(v33 + 96) = 0;
      *(void *)(v33 + 104) = 0;
      *(void *)(v33 + 11objc_destroyWeak(this + 2) = v32;
      uint64_t v35 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
      *(void *)uint64_t v35 = &unk_1EE9CAEA8;
      *((void *)v35 + objc_destroyWeak(this + 1) = v33;
      *(void *)(v33 + 120) = v35;
      *(void *)(v33 + 128) = 0x4014000000000000;
      uint64_t v36 = (WTF::RunLoop *)WTF::RunLoop::main(v35);
      WTF::RunLoop::Timer::Timer<PAL::HysteresisActivity>((WTF::RunLoop::TimerBase *)(v33 + 136), v36, v33 + 120, (uint64_t)PAL::HysteresisActivity::hysteresisTimerFired, 0);
      *(unsigned char *)(v33 + 168) = 0;
      *(void *)(v33 + 184) = 0;
      *(void *)(v33 + 19objc_destroyWeak(this + 2) = 0;
      *(void *)(v33 + 176) = 0;
      *(_DWORD *)(v33 + 199) = 0;
      PAL::HysteresisActivity::impulse((unsigned char *)(v33 + 120));
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v30);
      ++*(_DWORD *)v33;
      uint64_t v37 = *v16;
      if (*v16
        || (WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::expand((uint64_t *)(a1 + 32)),
            (uint64_t v37 = *v16) != 0))
      {
        int v38 = *(_DWORD *)(v37 - 8);
      }
      else
      {
        int v38 = 0;
      }
      LODWORD(v76[0]) = -1640531527;
      WORD2(v76[0]) = 0;
      BYTE6(v76[0]) = 0;
      WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((unsigned int *)v76, (void *)a2 + 1, (void *)a2 + 2);
      unsigned int v39 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v76);
      uint64_t v41 = 0;
      for (int i = 1; ; ++i)
      {
        unsigned int v43 = v39 & v38;
        uint64_t v44 = v37 + 40 * (v39 & v38);
        uint64_t v45 = *(void *)(v44 + 8);
        if (!v45 && *(_OWORD *)(v44 + 16) == 0) {
          break;
        }
        if (v45 == *((void *)a2 + 1)
          && *(void *)(v44 + 16) == *((void *)a2 + 2)
          && *(void *)(v44 + 24) == *((void *)a2 + 3))
        {
          WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref((_DWORD *)v33, v40);
          char v49 = v70;
          goto LABEL_39;
        }
        if (v45 == -1) {
          uint64_t v41 = v37 + 40 * v43;
        }
        unsigned int v39 = i + v43;
      }
      if (v41)
      {
        *(void *)(v41 + 3objc_destroyWeak(this + 2) = 0;
        *(_OWORD *)uint64_t v41 = 0u;
        *(_OWORD *)(v41 + 16) = 0u;
        --*(_DWORD *)(*v16 - 16);
        uint64_t v44 = v41;
      }
      long long v47 = *((_OWORD *)a2 + 1);
      *(_OWORD *)uint64_t v44 = *(_OWORD *)a2;
      *(_OWORD *)(v44 + 16) = v47;
      CFTypeRef v48 = *(_DWORD **)(v44 + 32);
      *(void *)(v44 + 3objc_destroyWeak(this + 2) = v33;
      char v49 = v70;
      if (v48) {
        WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v48, v40);
      }
      uint64_t v50 = *v16;
      if (*v16) {
        int v51 = *(_DWORD *)(v50 - 12) + 1;
      }
      else {
        int v51 = 1;
      }
      *(_DWORD *)(v50 - 1objc_destroyWeak(this + 2) = v51;
      uint64_t v52 = *v16;
      if (*v16) {
        int v53 = *(_DWORD *)(v52 - 12);
      }
      else {
        int v53 = 0;
      }
      uint64_t v54 = (*(_DWORD *)(v52 - 16) + v53);
      unint64_t v55 = *(unsigned int *)(v52 - 4);
      if (v55 > 0x400)
      {
        if (v55 > 2 * v54) {
          goto LABEL_39;
        }
      }
      else if (3 * v55 > 4 * v54)
      {
        goto LABEL_39;
      }
      WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::expand((uint64_t *)(a1 + 32));
LABEL_39:
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
      int v56 = *(atomic_uint **)a1;
      if (*(void *)a1) {
        atomic_fetch_add(v56, 1u);
      }
      long long v72 = *(_OWORD *)a2;
      long long v73 = *((_OWORD *)a2 + 1);
      int v57 = (*((unsigned __int8 *)this + 148) >> 2) & 1;
      uint64_t v58 = WTF::fastMalloc((WTF *)0x48);
      *(_OWORD *)(v58 + 24) = v72;
      *(void *)uint64_t v58 = &unk_1EE9CB100;
      *(void *)(v58 + 8) = a1;
      *(void *)(v58 + 16) = v56;
      *(_OWORD *)(v58 + 40) = v73;
      *(void *)(v58 + 56) = v33;
      *(unsigned char *)(v58 + 64) = v57;
      *(_WORD *)(v58 + 65) = v69;
      *(unsigned char *)(v58 + 67) = v49;
      *(_WORD *)(v58 + 68) = v71;
      unsigned int v59 = *(atomic_uchar **)(a1 + 16);
      if (v59)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v75, v59, *(void *)(a1 + 24));
        uint64_t v60 = v75;
      }
      else
      {
        uint64_t v60 = 0;
        char v75 = 0;
      }
      uint64_t v61 = (uint64_t)v60 + 28;
      if ((_MergedGlobals_75 & 1) == 0)
      {
        v76[0] = (WTF::StringImpl *)"SubResources";
        v76[1] = (WTF::StringImpl *)13;
        WTF::NeverDestroyed<WTF::AtomString const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1EB359910, (uint64_t)v76);
        _MergedGlobals_75 = 1;
      }
      WebKit::NetworkCache::Key::Key(v76, a4, &qword_1EB359910, a4 + 3, a4 + 2, v61);
      uint64_t v62 = v75;
      char v63 = (void *)WTF::fastMalloc((WTF *)0x10);
      *char v63 = &unk_1EE9CB1C8;
      v63[1] = v58;
      __int16 v74 = v63;
      WebKit::NetworkCache::Storage::retrieve((uint64_t)v62, (uint64_t)v76, 2, (uint64_t *)&v74);
      uint64_t v65 = (uint64_t)v74;
      __int16 v74 = 0;
      if (v65) {
        (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
      }
      long long v66 = v77[1];
      v77[1] = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2) {
          WTF::StringImpl::destroy(v66, v64);
        }
        else {
          *(_DWORD *)v66 -= 2;
        }
      }
      int8x16_t v67 = v77[0];
      v77[0] = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2) {
          WTF::StringImpl::destroy(v67, v64);
        }
        else {
          *(_DWORD *)v67 -= 2;
        }
      }
      int8x16_t v68 = v76[1];
      v76[1] = 0;
      if (v68)
      {
        if (*(_DWORD *)v68 == 2) {
          WTF::StringImpl::destroy(v68, v64);
        }
        else {
          *(_DWORD *)v68 -= 2;
        }
      }
      uint64_t result = (uint64_t)v76[0];
      v76[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v64);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (v62) {
        return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v62);
      }
    }
    else if (result)
    {
      int v18 = (CFTypeRef *)WTF::fastMalloc((WTF *)0x110);
      uint64_t v19 = WebCore::ResourceRequest::ResourceRequest(v18, (const String *)this);
      WebKit::NetworkCache::Key::Key((uint64_t)(v19 + 25), (uint64_t)a4);
      v76[0] = (WTF::StringImpl *)v18;
      uint64_t v20 = *(unsigned int *)(v17 + 108);
      if (v20 == *(_DWORD *)(v17 + 104))
      {
        CFTypeRef v21 = (uint64_t *)WTF::Vector<std::unique_ptr<WebKit::NetworkCache::SubresourceLoad>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 96, v20 + 1, (unint64_t)v76);
        uint64_t v23 = *(unsigned int *)(v17 + 108);
        uint64_t v24 = *(void *)(v17 + 96);
        uint64_t v25 = *v21;
        *CFTypeRef v21 = 0;
        *(void *)(v24 + 8 * v23) = v25;
        uint64_t v26 = v76[0];
        *(_DWORD *)(v17 + 108) = v23 + 1;
        v76[0] = 0;
        if (v26)
        {
          WebKit::NetworkCache::SubresourceLoad::~SubresourceLoad(v26, v22);
          WTF::fastFree(v27, v28);
        }
      }
      else
      {
        *(void *)(*(void *)(v17 + 96) + 8 * v20) = v18;
        *(_DWORD *)(v17 + 108) = v20 + 1;
      }
      return (uint64_t)PAL::HysteresisActivity::impulse((unsigned char *)(v17 + 120));
    }
  }
  return result;
}

unsigned char *WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::markLoadAsCompleted(unsigned char *this)
{
  if (!this[200])
  {
    uint64_t v1 = this;
    this[200] = 1;
    WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::saveToDiskIfReady((WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)this);
    uint64_t v2 = *(uint64_t (**)(void))(**((void **)v1 + 14) + 16);
    return (unsigned char *)v2();
  }
  return this;
}

uint64_t WebKit::NetworkCache::SpeculativeLoadManager::registerMainResourceLoadResponse(uint64_t a1, const WebCore::ResourceRequest *a2, WebKit::NetworkCache::SpeculativeLoadManager *this, WebCore::ResourceResponseBase *a4)
{
  uint64_t result = WebKit::NetworkCache::SpeculativeLoadManager::shouldRegisterLoad(this, a2);
  if (result)
  {
    uint64_t result = WebCore::ResourceResponseBase::isRedirection(a4);
    if ((result & 1) == 0)
    {
      uint64_t result = WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(*(void *)(a1 + 32), a2);
      if (result)
      {
        *(unsigned char *)(result + 20objc_destroyWeak(this + 2) = 1;
        uint64_t v8 = *(unsigned int *)(result + 196);
        if (v8)
        {
          uint64_t v9 = *(uint64_t **)(result + 184);
          uint64_t v10 = 8 * v8;
          do
          {
            uint64_t v11 = *v9++;
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
            v10 -= 8;
          }
          while (v10);
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::SpeculativeLoadManager::addPreloadedEntry(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  WebKit::NetworkCache::Key::Key((uint64_t)&v51, *a2);
  uint64_t v8 = (uint64_t *)(a1 + 56);
  uint64_t v43 = a1;
  WebKit::NetworkCache::Key::Key((uint64_t)v44, (uint64_t)&v51);
  long long v9 = a3[1];
  long long v49 = *a3;
  long long v50 = v9;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x110);
  uint64_t v11 = *a2;
  *a2 = 0;
  uint64_t v12 = WTF::fastMalloc((WTF *)0x78);
  *(void *)uint64_t v12 = &unk_1EE9CAEF8;
  *(void *)(v12 + 8) = v43;
  *(WTF::StringImpl **)(v12 + 16) = v44[0];
  uint64_t v13 = v44[1];
  *(_OWORD *)uint64_t v44 = 0u;
  *(void *)(v12 + 24) = v13;
  *(WTF::StringImpl **)(v12 + 3objc_destroyWeak(this + 2) = v45[0];
  uint64_t v14 = v45[1];
  *(_OWORD *)uint64_t v45 = 0u;
  *(void *)(v12 + 40) = v14;
  long long v15 = v46;
  long long v16 = v47;
  *(void *)(v12 + 80) = v48;
  *(_OWORD *)(v12 + 48) = v15;
  *(_OWORD *)(v12 + 64) = v16;
  long long v17 = v49;
  *(_OWORD *)(v12 + 104) = v50;
  *(_OWORD *)(v12 + 88) = v17;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)v10);
  *(void *)uint64_t v10 = &unk_1EE9BA5F0;
  *(void *)(v10 + 48) = v12;
  WebCore::TimerBase::start();
  *(void *)(v10 + 56) = v11;
  *(unsigned char *)(v10 + 64) = 0;
  *(unsigned char *)(v10 + 264) = 0;
  if (*(unsigned char *)(a4 + 200))
  {
    std::construct_at[abi:sn180100]<WebCore::ResourceRequest,WebCore::ResourceRequest,WebCore::ResourceRequest*>(v10 + 64, a4);
    *(unsigned char *)(v10 + 264) = 1;
  }
  uint64_t v19 = *v8;
  if (*v8
    || (WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v8),
        (uint64_t v19 = *v8) != 0))
  {
    int v20 = *(_DWORD *)(v19 - 8);
  }
  else
  {
    int v20 = 0;
  }
  uint64_t v21 = 0;
  int v22 = 1;
  unsigned int v23 = v55;
  while (1)
  {
    unsigned int v24 = v23 & v20;
    uint64_t v25 = v19 + 80 * (v23 & v20);
    uint64_t v26 = *(void *)(v25 + 16);
    if (v26 == -1)
    {
      uint64_t v21 = v19 + 80 * v24;
      goto LABEL_12;
    }
    if (!v26) {
      break;
    }
    if (WebKit::NetworkCache::Key::operator==(v19 + 80 * v24, (uint64_t)&v51, v18))
    {
      std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100](v10);
      goto LABEL_26;
    }
LABEL_12:
    unsigned int v23 = v22 + v24;
    ++v22;
  }
  if (v21)
  {
    *(_OWORD *)uint64_t v21 = 0u;
    *(_OWORD *)(v21 + 16) = 0u;
    *(void *)(v21 + 7objc_destroyWeak(this + 2) = 0;
    --*(_DWORD *)(*v8 - 16);
    uint64_t v25 = v21;
  }
  WebKit::NetworkCache::Key::operator=(v25, (uint64_t)&v51);
  uint64_t v27 = *(void *)(v25 + 72);
  *(void *)(v25 + 7objc_destroyWeak(this + 2) = v10;
  if (v27) {
    std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100](v27);
  }
  uint64_t v28 = *v8;
  if (*v8) {
    int v29 = *(_DWORD *)(v28 - 12) + 1;
  }
  else {
    int v29 = 1;
  }
  *(_DWORD *)(v28 - 1objc_destroyWeak(this + 2) = v29;
  uint64_t v31 = *v8;
  if (*v8) {
    int v32 = *(_DWORD *)(v31 - 12);
  }
  else {
    int v32 = 0;
  }
  uint64_t v33 = (*(_DWORD *)(v31 - 16) + v32);
  unint64_t v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 <= 2 * v33) {
LABEL_25:
    }
      WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v8);
  }
  else if (3 * v34 <= 4 * v33)
  {
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v35 = v45[1];
  v45[1] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, v30);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  uint64_t v36 = v45[0];
  v45[0] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v30);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  uint64_t v37 = v44[1];
  v44[1] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v30);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  int v38 = v44[0];
  v44[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v30);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  unsigned int v39 = v54;
  uint64_t v54 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v30);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  char v40 = v53;
  int v53 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, v30);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  uint64_t v41 = v52;
  uint64_t v52 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v30);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  uint64_t result = v51;
  int v51 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebKit::NetworkCache::Storage::Record *WebKit::NetworkCache::Storage::retrieve(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  if (!*(void *)(a1 + 40))
  {
    unsigned int v24 = 0;
    long long v22 = 0u;
    memset(v23, 0, sizeof(v23));
    long long v20 = 0u;
    long long v21 = 0u;
    WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(a4, &v24);
    uint64_t result = v24;
    unsigned int v24 = 0;
    if (!result) {
      return result;
    }
LABEL_10:
    WebKit::NetworkCache::Storage::Record::~Record(result, v13);
    return (WebKit::NetworkCache::Storage::Record *)WTF::fastFree(v14, v15);
  }
  if ((WebKit::NetworkCache::Storage::mayContain(a1, a2) & 1) == 0)
  {
    uint64_t v19 = 0;
    long long v22 = 0u;
    memset(v23, 0, sizeof(v23));
    long long v20 = 0u;
    long long v21 = 0u;
    WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(a4, &v19);
    uint64_t result = v19;
    uint64_t v19 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  uint64_t result = (WebKit::NetworkCache::Storage::Record *)WebKit::NetworkCache::retrieveFromMemory<WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>>((unint64_t *)(a1 + 208), a2, (const WTF::StringImpl *)a4);
  if ((result & 1) == 0)
  {
    uint64_t result = (WebKit::NetworkCache::Storage::Record *)WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>((uint64_t *)(a1 + 240), a2, (const WTF::StringImpl *)a4);
    if ((result & 1) == 0)
    {
      long long v9 = (WebKit::NetworkCache::Storage::ReadOperation *)WTF::fastMalloc((WTF *)0x118);
      Operation = (WTF::MonotonicTime *)WebKit::NetworkCache::Storage::ReadOperation::ReadOperation((uint64_t)v9, (atomic_uchar *volatile *)a1, a2, a3, a4);
      WTF::MonotonicTime::now(Operation);
      *((void *)v9 + 25) = v11;
      *((void *)v9 + 3objc_destroyWeak(this + 2) = *(void *)(a1 + 88);
      int v18 = v9;
      WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::enqueue(a1 + 128, (uint64_t *)&v18);
      uint64_t v12 = v18;
      int v18 = 0;
      if (v12)
      {
        WebKit::NetworkCache::Storage::ReadOperation::~ReadOperation(v12);
        WTF::fastFree(v16, v17);
      }
      return WebKit::NetworkCache::Storage::dispatchPendingReadOperations((WebKit::NetworkCache::Storage::ReadOperation *)a1);
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::SpeculativeLoadManager::satisfyPendingRequests(WebKit::NetworkCache::SpeculativeLoadManager *this, const WebKit::NetworkCache::Key *a2, WebKit::NetworkCache::Entry *a3)
{
  uint64_t v3 = (uint64_t *)((char *)this + 48);
  uint64_t v4 = *((void *)this + 6);
  if (!v4) {
    return 0;
  }
  int v7 = 0;
  int v8 = *(_DWORD *)(v4 - 8);
  for (unsigned int i = *((_DWORD *)a2 + 8); ; unsigned int i = ++v7 + v10)
  {
    unsigned int v10 = i & v8;
    uint64_t v11 = v4 + 80 * (i & v8);
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12 != -1)
    {
      if (!v12)
      {
        uint64_t v13 = *v3;
        if (!*v3) {
          return 0;
        }
        uint64_t v11 = v13 + 80 * *(unsigned int *)(v13 - 4);
        goto LABEL_10;
      }
      if (WebKit::NetworkCache::Key::operator==(v4 + 80 * v10, (uint64_t)a2, a3)) {
        break;
      }
    }
  }
  uint64_t v13 = *v3;
  if (!*v3) {
    goto LABEL_11;
  }
LABEL_10:
  v13 += 80 * *(unsigned int *)(v13 - 4);
LABEL_11:
  if (v13 == v11) {
    return 0;
  }
  uint64_t v14 = *(void *)(v11 + 72);
  *(void *)(v11 + 7objc_destroyWeak(this + 2) = 0;
  uint64_t v15 = *v3;
  if (!*v3 || (v15 += 80 * *(unsigned int *)(v15 - 4), v15 != v11))
  {
    if (v15 != v11)
    {
      WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebKit::NetworkCache::Key>,WebKit::NetworkCache::Key>((WTF::StringImpl **)v11, a2);
      std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((uint64_t *)(v11 + 72), 0);
      ++*(_DWORD *)(*v3 - 16);
      uint64_t v16 = *v3;
      int v17 = *v3 ? *(_DWORD *)(v16 - 12) - 1 : -1;
      *(_DWORD *)(v16 - 1objc_destroyWeak(this + 2) = v17;
      uint64_t v18 = *v3;
      if (*v3)
      {
        unsigned int v19 = 6 * *(_DWORD *)(v18 - 12);
        unsigned int v20 = *(_DWORD *)(v18 - 4);
        if (v19 < v20 && v20 >= 9) {
          WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(v3, v20 >> 1, 0);
        }
      }
    }
  }
  if (!v14) {
    return 0;
  }
  uint64_t v21 = *(unsigned int *)(v14 + 12);
  if (v21)
  {
    long long v22 = *(uint64_t **)v14;
    uint64_t v23 = 8 * v21;
    do
    {
      if (a3)
      {
        unsigned int v24 = (WebKit::NetworkCache::Entry *)WTF::fastMalloc((WTF *)0x300);
        uint64_t v31 = WebKit::NetworkCache::Entry::Entry(v24, a3);
      }
      else
      {
        uint64_t v31 = 0;
      }
      WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(*v22, &v31);
      uint64_t v25 = v31;
      uint64_t v31 = 0;
      if (v25)
      {
        WebKit::NetworkCache::Entry::~Entry(v25, a2);
        WTF::fastFree(v26, v27);
      }
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  int v29 = (WTF *)WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, a2);
  WTF::fastFree(v29, v30);
  return 1;
}

WebKit::NetworkCache::Entry *WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(uint64_t a1, WebKit::NetworkCache::Entry **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  int v7 = v2;
  (*(void (**)(uint64_t, WebKit::NetworkCache::Entry **))(*(void *)a1 + 16))(a1, &v7);
  uint64_t result = v7;
  int v7 = 0;
  if (result)
  {
    WebKit::NetworkCache::Entry::~Entry(result, v3);
    return (WebKit::NetworkCache::Entry *)WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebKit::NetworkCache::constructRevalidationRequest(WebKit::NetworkCache *this, const WebKit::NetworkCache::Key *a2, const WebKit::NetworkCache::SubresourceInfo *a3, const WebKit::NetworkCache::Entry *a4)
{
  WebCore::ResourceRequest::ResourceRequest(this, (const WebKit::NetworkCache::Key *)((char *)a2 + 16));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v13, (const WebKit::NetworkCache::SubresourceInfo *)((char *)a3 + 136));
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v14, (const WebKit::NetworkCache::SubresourceInfo *)((char *)a3 + 152));
  WebCore::ResourceRequestBase::setHTTPHeaderFields();
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v14);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v13);
  WebCore::ResourceRequestBase::setFirstPartyForCookies(this, (const WebKit::NetworkCache::SubresourceInfo *)((char *)a3 + 96));
  WebCore::ResourceRequestBase::setIsSameSite(this);
  WebCore::ResourceRequestBase::setIsTopSite(this);
  WebCore::ResourceRequestBase::setIsAppInitiated(this);
  if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4)) {
    WebCore::ResourceRequestBase::setCachePartition(this, a2);
  }
  WebCore::ResourceRequestBase::makeUnconditional(this);
  if (a4)
  {
    WebCore::ResourceResponseBase::httpHeaderField();
    if (v12 && *((_DWORD *)v12 + 1)) {
      WebCore::ResourceRequestBase::setHTTPHeaderField();
    }
    WebCore::ResourceResponseBase::httpHeaderField();
    long long v9 = v11;
    if (v11)
    {
      if (*((_DWORD *)v11 + 1))
      {
        WebCore::ResourceRequestBase::setHTTPHeaderField();
        long long v9 = v11;
      }
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v8);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  return WebCore::ResourceRequestBase::setPriority();
}

void WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(void *a1, uint64_t a2, const WebKit::NetworkCache::Entry **a3, long long *a4, __int16 a5, char a6, __int16 a7)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a2 + 24);
  if (v12 && *(_DWORD *)(v12 + 4)) {
    return;
  }
  uint64_t v13 = WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(a1[4], a4);
  uint64_t v14 = v13;
  if (v13)
  {
    ++*(_DWORD *)v13;
    if (!*(unsigned char *)(v13 + 202))
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v101, (const WTF::URL *)(a2 + 96));
      v102[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v102);
      MEMORY[0x19972E8B0](v109, v102, a2 + 16, 0);
      uint64_t v15 = WTF::URL::host((WTF::URL *)v109);
      int v18 = WebCore::RegistrableDomain::matches(&v101, v15, v16);
      unsigned int v19 = *(WTF::StringImpl **)&v109[0];
      *(void *)&v109[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v17);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      unsigned int v20 = v102[0];
      v102[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v17);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      uint64_t v21 = v101;
      __int16 v101 = 0;
      if (!v21)
      {
LABEL_16:
        if (v18)
        {
LABEL_17:
          long long v22 = *a3;
          uint64_t v23 = *(void *)(*(void *)(a1[1] + 8) + 24);
          atomic_fetch_add((atomic_uint *volatile)(v23 + 128), 1u);
          *(void *)&v109[0] = *(void *)(*(void *)(a1[1] + 8) + 72);
          uint64_t v24 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v23 + 224), v109);
          uint64_t v25 = v24;
          if (v23 && atomic_fetch_add((atomic_uint *volatile)(v23 + 128), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)(v23 + 128));
            (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
            if (v25)
            {
LABEL_20:
              WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v109);
              long long v26 = a4[1];
              v109[0] = *a4;
              v109[1] = v26;
              BYTE10(v125) = 1;
              WORD4(v125) = 1;
              char v127 = 1;
              WebKit::NetworkCache::constructRevalidationRequest((WebKit::NetworkCache *)v102, (const WebKit::NetworkCache::Key *)a2, (const WebKit::NetworkCache::SubresourceInfo *)a2, v22);
              WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v110[8], (uint64_t)v102);
              uint64_t v28 = v103;
              uint64_t v103 = 0;
              int v29 = (WTF::StringImpl *)*((void *)&v120 + 1);
              *((void *)&v120 + objc_destroyWeak(this + 1) = v28;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2) {
                  WTF::StringImpl::destroy(v29, v27);
                }
                else {
                  *(_DWORD *)v29 -= 2;
                }
              }
              __int16 v69 = v104;
              long long v104 = 0;
              char v70 = v121;
              uint64_t v121 = v69;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2) {
                  WTF::StringImpl::destroy(v70, v27);
                }
                else {
                  *(_DWORD *)v70 -= 2;
                }
              }
              __int16 v71 = v105;
              uint64_t v105 = 0;
              long long v72 = v122;
              uint64_t v122 = v71;
              if (v72) {
                WTF::RefCounted<WebCore::FormData>::deref(v72);
              }
              uint64_t v123 = v106;
              LOBYTE(v124) = v107;
              CFTypeRef v73 = cf;
              CFTypeRef cf = 0;
              __int16 v74 = (const void *)v125;
              *(void *)&long long v125 = v73;
              if (v74)
              {
                CFRelease(v74);
                CFTypeRef v95 = cf;
                CFTypeRef cf = 0;
                if (v95) {
                  CFRelease(v95);
                }
              }
              WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v102);
              __int16 v128 = a5;
              operator new();
            }
          }
          else if (v24)
          {
            goto LABEL_20;
          }
          *(void *)&v109[0] = a1;
          WebKit::NetworkCache::Key::Key((uint64_t)v109 + 8, a2);
          *(_OWORD *)unsigned int v110 = *(_OWORD *)(a2 + 72);
          *(_DWORD *)&v110[15] = *(_DWORD *)(a2 + 87);
          char v75 = *(_DWORD **)(a2 + 96);
          if (v75) {
            *v75 += 2;
          }
          unsigned int v111 = v75;
          long long v76 = *(_OWORD *)(a2 + 120);
          long long v112 = *(_OWORD *)(a2 + 104);
          long long v113 = v76;
          WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v114, (WTF::ASCIILiteral *)(a2 + 136));
          WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)&v115, (WTF::ASCIILiteral *)(a2 + 152));
          BYTE8(v116) = *(unsigned char *)(a2 + 168);
          uint64_t v77 = *a3;
          *a3 = 0;
          unsigned int v117 = v77;
          long long v78 = a4[1];
          long long v118 = *a4;
          *(_OWORD *)unsigned int v119 = v78;
          *(_WORD *)&v119[16] = a5;
          v119[18] = a6;
          *(_WORD *)&v119[20] = a7;
          uint64_t v79 = WTF::fastMalloc((WTF *)0xF0);
          *(void *)uint64_t v79 = &unk_1EE9CB178;
          *(void *)(v79 + 8) = *(void *)&v109[0];
          WebKit::NetworkCache::Key::Key(v79 + 16, (uint64_t)v109 + 8);
          long long v80 = *(_OWORD *)v110;
          *(_DWORD *)(v79 + 103) = *(_DWORD *)&v110[15];
          *(_OWORD *)(v79 + 88) = v80;
          unint64_t v81 = v111;
          if (v111) {
            *v111 += 2;
          }
          *(void *)(v79 + 11objc_destroyWeak(this + 2) = v81;
          long long v82 = v112;
          *(_OWORD *)(v79 + 136) = v113;
          *(_OWORD *)(v79 + 120) = v82;
          WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)(v79 + 152), (WTF::ASCIILiteral *)v114);
          WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)(v79 + 168), (WTF::ASCIILiteral *)&v115);
          *(unsigned char *)(v79 + 184) = BYTE8(v116);
          uint64_t v84 = v117;
          unsigned int v117 = 0;
          *(void *)(v79 + 19objc_destroyWeak(this + 2) = v84;
          long long v85 = v118;
          long long v86 = *(_OWORD *)v119;
          *(void *)(v79 + 230) = *(void *)&v119[14];
          *(_OWORD *)(v79 + 216) = v86;
          *(_OWORD *)(v79 + 200) = v85;
          v102[0] = (WTF::StringImpl *)v79;
          uint64_t v87 = (void *)(v14 + 184);
          uint64_t v88 = *(unsigned int *)(v14 + 196);
          if (v88 == *(_DWORD *)(v14 + 192))
          {
            uint64_t v89 = (uint64_t *)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)v102);
            uint64_t v88 = *(unsigned int *)(v14 + 196);
            uint64_t v90 = (uint64_t *)(*(void *)(v14 + 184) + 8 * v88);
            uint64_t v79 = *v89;
          }
          else
          {
            uint64_t v90 = (uint64_t *)(*v87 + 8 * v88);
            uint64_t v89 = (uint64_t *)v102;
          }
          *uint64_t v89 = 0;
          *uint64_t v90 = v79;
          *(_DWORD *)(v14 + 196) = v88 + 1;
          uint64_t v91 = v102[0];
          v102[0] = 0;
          if (v91) {
            (*(void (**)(WTF::StringImpl *))(*(void *)v91 + 8))(v91);
          }
          long long v92 = v117;
          unsigned int v117 = 0;
          if (v92)
          {
            WebKit::NetworkCache::Entry::~Entry(v92, v83);
            WTF::fastFree(v93, v94);
          }
          WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)((char *)v109 + 8));
          goto LABEL_52;
        }
        goto LABEL_24;
      }
      if (*(_DWORD *)v21 != 2)
      {
        *(_DWORD *)v21 -= 2;
        goto LABEL_16;
      }
      WTF::StringImpl::destroy(v21, v17);
      if (v18) {
        goto LABEL_17;
      }
    }
  }
LABEL_24:
  uint64_t v96 = v14;
  WebKit::NetworkCache::constructRevalidationRequest((WebKit::NetworkCache *)v102, (const WebKit::NetworkCache::Key *)a2, (const WebKit::NetworkCache::SubresourceInfo *)a2, *a3);
  uint64_t v30 = *(WebKit::NetworkCache::Cache **)(a1[1] + 8);
  ++*(_DWORD *)v30;
  int8x16_t v97 = a1;
  *(void *)&v109[0] = a1;
  WebKit::NetworkCache::Key::Key((uint64_t)v109 + 8, a2);
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)v110, (const String *)v102);
  long long v31 = a4[1];
  long long v125 = *a4;
  long long v126 = v31;
  int v32 = (WebKit::NetworkCache::Entry **)WTF::fastMalloc((WTF *)0x200);
  uint64_t v33 = *a3;
  *a3 = 0;
  __int16 v101 = v33;
  uint64_t v34 = WTF::fastMalloc((WTF *)0x140);
  *(void *)uint64_t v34 = &unk_1EE9CAF20;
  *(void *)(v34 + 8) = *(void *)&v109[0];
  WebKit::NetworkCache::Key::Key(v34 + 16, (uint64_t)v109 + 8);
  WTF::URL::URL(v34 + 88, (uint64_t *)v110);
  WTF::URL::URL(v34 + 128, (uint64_t *)&v112 + 1);
  *(void *)(v34 + 168) = v115;
  *(void *)(v34 + 176) = v116;
  uint64_t v35 = *((void *)&v116 + 1);
  long long v116 = 0u;
  *(void *)(v34 + 184) = v35;
  uint64_t v36 = v117;
  unsigned int v117 = 0;
  *(void *)(v34 + 19objc_destroyWeak(this + 2) = v36;
  uint64_t v37 = v118;
  *(void *)&long long v118 = 0;
  *(void *)(v34 + 200) = v37;
  uint64_t v38 = *((void *)&v118 + 1);
  *((void *)&v118 + objc_destroyWeak(this + 1) = 0;
  *(void *)(v34 + 208) = v38;
  uint64_t v39 = *(void *)v119;
  *(void *)unsigned int v119 = 0;
  *(void *)(v34 + 216) = v39;
  uint64_t v40 = *(void *)&v119[8];
  *(void *)&v119[8] = 0;
  *(void *)(v34 + 224) = v40;
  LODWORD(v39) = *(_DWORD *)&v119[16];
  *(unsigned char *)(v34 + 236) = v119[20];
  *(_DWORD *)(v34 + 23objc_destroyWeak(this + 2) = v39;
  *(void *)(v34 + 240) = v120;
  uint64_t v41 = *((void *)&v120 + 1);
  long long v120 = 0u;
  *(void *)(v34 + 248) = v41;
  *(void *)(v34 + 256) = v121;
  uint64_t v42 = v122;
  *(unsigned char *)(v34 + 27objc_destroyWeak(this + 2) = v123;
  *(void *)(v34 + 264) = v42;
  uint64_t v43 = v124;
  uint64_t v121 = 0;
  uint64_t v124 = 0;
  *(void *)(v34 + 280) = v43;
  long long v44 = v126;
  *(_OWORD *)(v34 + 288) = v125;
  *(_OWORD *)(v34 + 304) = v44;
  uint64_t v100 = v34;
  WebKit::NetworkCache::SpeculativeLoad::SpeculativeLoad((uint64_t)v32, v30, a4, (const String *)v102, (uint64_t *)&v101, a5, a6, a7, &v100);
  if (v100) {
    (*(void (**)(uint64_t))(*(void *)v100 + 8))(v100);
  }
  if (v101)
  {
    WebKit::NetworkCache::Entry::~Entry(v101, v45);
    WTF::fastFree(v67, v68);
  }
  WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,std::optional<WebKit::NavigatingToAppBoundDomain>::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0::~$_0(v109);
  WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v30, v46);
  uint64_t v48 = a1 + 5;
  uint64_t v49 = v97[5];
  if (v49
    || (WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v97 + 5),
        (uint64_t v49 = *v48) != 0))
  {
    int v50 = *(_DWORD *)(v49 - 8);
  }
  else
  {
    int v50 = 0;
  }
  uint64_t v51 = 0;
  unsigned int v52 = *(_DWORD *)(a2 + 32);
  for (int i = 1; ; ++i)
  {
    unsigned int v54 = v52 & v50;
    uint64_t v55 = v49 + 80 * (v52 & v50);
    uint64_t v56 = *(void *)(v55 + 16);
    if (v56 == -1)
    {
      uint64_t v51 = v49 + 80 * v54;
      goto LABEL_37;
    }
    if (!v56) {
      break;
    }
    if (WebKit::NetworkCache::Key::operator==(v49 + 80 * v54, a2, v47))
    {
      WebKit::NetworkCache::SpeculativeLoad::~SpeculativeLoad(v32);
      WTF::fastFree(v59, v60);
      uint64_t v14 = v96;
      goto LABEL_49;
    }
LABEL_37:
    unsigned int v52 = i + v54;
  }
  if (v51)
  {
    *(_OWORD *)uint64_t v51 = 0u;
    *(_OWORD *)(v51 + 16) = 0u;
    *(void *)(v51 + 7objc_destroyWeak(this + 2) = 0;
    --*(_DWORD *)(*v48 - 16);
    uint64_t v55 = v51;
  }
  WebKit::NetworkCache::Key::operator=(v55, a2);
  std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>::reset[abi:sn180100]((WebKit::NetworkCache::Entry ***)(v55 + 72), v32);
  uint64_t v57 = *v48;
  uint64_t v14 = v96;
  if (*v48) {
    int v58 = *(_DWORD *)(v57 - 12) + 1;
  }
  else {
    int v58 = 1;
  }
  *(_DWORD *)(v57 - 1objc_destroyWeak(this + 2) = v58;
  uint64_t v61 = *v48;
  if (*v48) {
    int v62 = *(_DWORD *)(v61 - 12);
  }
  else {
    int v62 = 0;
  }
  uint64_t v63 = (*(_DWORD *)(v61 - 16) + v62);
  unint64_t v64 = *(unsigned int *)(v61 - 4);
  if (v64 > 0x400)
  {
    if (v64 <= 2 * v63) {
LABEL_48:
    }
      WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v48);
  }
  else if (3 * v64 <= 4 * v63)
  {
    goto LABEL_48;
  }
LABEL_49:
  CFTypeRef v65 = cf;
  CFTypeRef cf = 0;
  if (v65) {
    CFRelease(v65);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v102);
  if (v14) {
LABEL_52:
  }
    WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref((_DWORD *)v14, v66);
}

void *WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0::~$_0(void *a1)
{
  WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)(a1 + 11));
  uint64_t v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  int v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v2);
  }
  return a1;
}

uint64_t WebKit::NetworkCache::SpeculativeLoadManager::startSpeculativeRevalidation(uint64_t result, long long *a2, const WTF::StringImpl *a3, unsigned int a4, char a5, __int16 a6, char a7, __int16 a8)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return result;
  }
  uint64_t v8 = (uint64_t)a3;
  uint64_t v9 = result;
  long long v72 = (uint64_t *)(result + 64);
  __int16 v69 = (uint64_t *)(result + 40);
  char v70 = (char *)a3 + 176 * a4;
  uint64_t v67 = result;
  do
  {
    *(unsigned char *)(v8 + 90) = a5;
    if (!*(unsigned char *)(v8 + 88))
    {
      uint64_t result = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(*v69, v8, a3);
      if (result) {
        goto LABEL_79;
      }
      uint64_t v23 = *v69;
      if (*v69
        || (WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v69),
            (uint64_t v23 = *v69) != 0))
      {
        int v24 = *(_DWORD *)(v23 - 8);
      }
      else
      {
        int v24 = 0;
      }
      uint64_t v25 = 0;
      unsigned int v26 = *(_DWORD *)(v8 + 32);
      for (int i = 1; ; ++i)
      {
        unsigned int v28 = v26 & v24;
        uint64_t v29 = v23 + 80 * (v26 & v24);
        uint64_t v30 = *(void *)(v29 + 16);
        if (v30 == -1)
        {
          uint64_t v25 = v23 + 80 * v28;
        }
        else
        {
          if (!v30)
          {
            if (v25)
            {
              *(_OWORD *)uint64_t v25 = 0u;
              *(_OWORD *)(v25 + 16) = 0u;
              *(void *)(v25 + 7objc_destroyWeak(this + 2) = 0;
              --*(_DWORD *)(*v69 - 16);
              uint64_t v29 = v25;
            }
            WebKit::NetworkCache::Key::operator=(v29, v8);
            std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>::reset[abi:sn180100]((WebKit::NetworkCache::Entry ***)(v29 + 72), 0);
            uint64_t v42 = *v69;
            if (*v69) {
              int v43 = *(_DWORD *)(v42 - 12) + 1;
            }
            else {
              int v43 = 1;
            }
            *(_DWORD *)(v42 - 1objc_destroyWeak(this + 2) = v43;
            uint64_t v44 = *v69;
            if (*v69) {
              int v45 = *(_DWORD *)(v44 - 12);
            }
            else {
              int v45 = 0;
            }
            uint64_t v46 = (*(_DWORD *)(v44 - 16) + v45);
            unint64_t v47 = *(unsigned int *)(v44 - 4);
            if (v47 > 0x400)
            {
              if (v47 <= 2 * v46) {
LABEL_65:
              }
                WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v69);
            }
            else if (3 * v47 <= 4 * v46)
            {
              goto LABEL_65;
            }
LABEL_66:
            uint64_t v74 = v9;
            WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v9, v9);
            uint64_t v48 = *(atomic_uint **)v9;
            if (*(void *)v9) {
              atomic_fetch_add(v48, 1u);
            }
            char v75 = (WTF::StringImpl *)v48;
            WebKit::NetworkCache::Key::Key((uint64_t)&v76, v8);
            WebKit::NetworkCache::Key::Key((uint64_t)&v79 + 8, v8);
            *(_OWORD *)unint64_t v81 = *(_OWORD *)(v8 + 72);
            *(_DWORD *)&v81[15] = *(_DWORD *)(v8 + 87);
            uint64_t v49 = *(_DWORD **)(v8 + 96);
            if (v49) {
              *v49 += 2;
            }
            long long v82 = v49;
            long long v50 = *(_OWORD *)(v8 + 120);
            long long v83 = *(_OWORD *)(v8 + 104);
            long long v84 = v50;
            WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v85, (WTF::ASCIILiteral *)(v8 + 136));
            WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v86, (WTF::ASCIILiteral *)(v8 + 152));
            char v87 = *(unsigned char *)(v8 + 168);
            long long v51 = a2[1];
            long long v88 = *a2;
            *(_OWORD *)uint64_t v89 = v51;
            *(_WORD *)&v89[16] = a6;
            v89[18] = a7;
            *(_WORD *)&v89[20] = a8;
            uint64_t v52 = WTF::fastMalloc((WTF *)0x138);
            *(void *)uint64_t v52 = &unk_1EE9CB1A0;
            *(void *)(v52 + 8) = v74;
            int v53 = v75;
            char v75 = 0;
            *(void *)(v52 + 16) = v53;
            WebKit::NetworkCache::Key::Key(v52 + 24, (uint64_t)&v76);
            WebKit::NetworkCache::Key::Key(v52 + 96, (uint64_t)&v79 + 8);
            long long v54 = *(_OWORD *)v81;
            *(_DWORD *)(v52 + 183) = *(_DWORD *)&v81[15];
            *(_OWORD *)(v52 + 168) = v54;
            uint64_t v55 = v82;
            if (v82) {
              *v82 += 2;
            }
            *(void *)(v52 + 19objc_destroyWeak(this + 2) = v55;
            long long v56 = v83;
            *(_OWORD *)(v52 + 216) = v84;
            *(_OWORD *)(v52 + 200) = v56;
            WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)(v52 + 232), (WTF::ASCIILiteral *)v85);
            WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)(v52 + 248), (WTF::ASCIILiteral *)v86);
            *(unsigned char *)(v52 + 264) = v87;
            long long v57 = v88;
            long long v58 = *(_OWORD *)v89;
            *(void *)(v52 + 30objc_destroyWeak(this + 2) = *(void *)&v89[14];
            *(_OWORD *)(v52 + 27objc_destroyWeak(this + 2) = v57;
            *(_OWORD *)(v52 + 288) = v58;
            unsigned int v59 = *(atomic_uchar **)(v9 + 16);
            if (v59)
            {
              WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v73, v59, *(void *)(v9 + 24));
              uint64_t v60 = v73;
            }
            else
            {
              uint64_t v60 = 0;
            }
            int v61 = *(unsigned __int8 *)(v8 + 168);
            int v62 = (atomic_uchar **)WTF::fastMalloc((WTF *)0x10);
            *int v62 = (atomic_uchar *)&unk_1EE9CB128;
            v62[1] = (atomic_uchar *)v52;
            CFTypeRef v73 = v62;
            WebKit::NetworkCache::Storage::retrieve((uint64_t)v60, v8, v61, (uint64_t *)&v73);
            uint64_t v63 = (uint64_t)v73;
            CFTypeRef v73 = 0;
            if (v63)
            {
              (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
              if (v60) {
LABEL_77:
              }
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v60);
            }
            else if (v60)
            {
              goto LABEL_77;
            }
            uint64_t result = (uint64_t)WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0::~$_0(&v74);
            goto LABEL_79;
          }
          if (WebKit::NetworkCache::Key::operator==(v23 + 80 * v28, v8, a3)) {
            goto LABEL_66;
          }
        }
        unsigned int v26 = i + v28;
      }
    }
    uint64_t v74 = v9;
    WebKit::NetworkCache::Key::Key((uint64_t)&v75, v8);
    long long v10 = a2[1];
    long long v79 = *a2;
    long long v80 = v10;
    uint64_t v11 = (WebCore::TimerBase *)WTF::fastMalloc((WTF *)0x38);
    uint64_t v12 = WTF::fastMalloc((WTF *)0x78);
    *(void *)uint64_t v12 = &unk_1EE9CAF48;
    *(void *)(v12 + 8) = v74;
    WebKit::NetworkCache::Key::Key(v12 + 16, (uint64_t)&v75);
    long long v13 = v79;
    *(_OWORD *)(v12 + 104) = v80;
    *(_OWORD *)(v12 + 88) = v13;
    WebCore::TimerBase::TimerBase(v11);
    *(void *)uint64_t v11 = &unk_1EE9BA5F0;
    *((void *)v11 + 6) = v12;
    WebCore::TimerBase::start();
    uint64_t v15 = *(void *)(v9 + 64);
    if (v15
      || (WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v72),
          (uint64_t v15 = *v72) != 0))
    {
      int v16 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      int v16 = 0;
    }
    uint64_t v17 = 0;
    unsigned int v18 = *(_DWORD *)(v8 + 32);
    for (int j = 1; ; ++j)
    {
      unsigned int v20 = v18 & v16;
      uint64_t v21 = v15 + 80 * (v18 & v16);
      uint64_t v22 = *(void *)(v21 + 16);
      if (v22 == -1)
      {
        uint64_t v17 = v15 + 80 * v20;
        goto LABEL_13;
      }
      if (!v22) {
        break;
      }
      if (WebKit::NetworkCache::Key::operator==(v15 + 80 * v20, v8, v14))
      {
        std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>::operator()[abi:sn180100](v11);
        uint64_t v9 = v67;
        goto LABEL_38;
      }
LABEL_13:
      unsigned int v18 = j + v20;
    }
    if (v17)
    {
      *(_OWORD *)uint64_t v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      *(void *)(v17 + 7objc_destroyWeak(this + 2) = 0;
      --*(_DWORD *)(*v72 - 16);
      uint64_t v21 = v17;
    }
    WebKit::NetworkCache::Key::operator=(v21, v8);
    long long v31 = *(WebCore::TimerBase **)(v21 + 72);
    *(void *)(v21 + 7objc_destroyWeak(this + 2) = v11;
    uint64_t v9 = v67;
    if (v31) {
      std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>::operator()[abi:sn180100](v31);
    }
    uint64_t v32 = *v72;
    if (*v72) {
      int v33 = *(_DWORD *)(v32 - 12) + 1;
    }
    else {
      int v33 = 1;
    }
    *(_DWORD *)(v32 - 1objc_destroyWeak(this + 2) = v33;
    uint64_t v35 = *v72;
    if (*v72) {
      int v36 = *(_DWORD *)(v35 - 12);
    }
    else {
      int v36 = 0;
    }
    uint64_t v37 = (*(_DWORD *)(v35 - 16) + v36);
    unint64_t v38 = *(unsigned int *)(v35 - 4);
    if (v38 > 0x400)
    {
      if (v38 <= 2 * v37) {
LABEL_37:
      }
        WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v72);
    }
    else if (3 * v38 <= 4 * v37)
    {
      goto LABEL_37;
    }
LABEL_38:
    uint64_t v39 = v78;
    long long v78 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, v34);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
    uint64_t v40 = v77;
    uint64_t v77 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v34);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    uint64_t v41 = v76;
    long long v76 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, v34);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
    uint64_t result = (uint64_t)v75;
    char v75 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v34);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
LABEL_79:
    v8 += 176;
  }
  while ((char *)v8 != v70);
  return result;
}

WebKit::NetworkCache::Storage::Record *WebKit::NetworkCache::Storage::ReadOperation::cancel(WebKit::NetworkCache::Storage::Record *this)
{
  if (!*((unsigned char *)this + 196))
  {
    uint64_t v1 = this;
    WTF::MonotonicTime::now(this);
    *((void *)v1 + 3objc_destroyWeak(this + 1) = v2;
    *((unsigned char *)v1 + 274) = 1;
    *((unsigned char *)v1 + 196) = 1;
    uint64_t v6 = 0;
    WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()((uint64_t *)v1 + 12, &v6);
    this = v6;
    uint64_t v6 = 0;
    if (this)
    {
      WebKit::NetworkCache::Storage::Record::~Record(this, v3);
      return (WebKit::NetworkCache::Storage::Record *)WTF::fastFree(v4, v5);
    }
  }
  return this;
}

uint64_t WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(uint64_t *a1, WebKit::NetworkCache::Storage::Record **a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v11 = v3;
  uint64_t v12 = v2;
  uint64_t v5 = WTF::Function<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(&v12, &v11);
  uint64_t v6 = v11;
  uint64_t v11 = 0;
  if (v6)
  {
    WebKit::NetworkCache::Storage::Record::~Record(v6, v4);
    WTF::fastFree(v9, v10);
  }
  uint64_t v7 = v12;
  uint64_t v12 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return v5;
}

WebKit::NetworkCache::Storage::Record *WebKit::NetworkCache::Storage::cancelAllReadOperations(WebKit::NetworkCache::Storage::Record *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 18);
  if (!v2)
  {
    uint64_t v5 = 0;
    uint64_t v3 = 0;
    goto LABEL_9;
  }
  uint64_t v3 = *(unsigned int *)(v2 - 4);
  uint64_t v4 = (WebKit::NetworkCache::Storage::Record **)(v2 + 8 * v3);
  if (!*(_DWORD *)(v2 - 12))
  {
    uint64_t v5 = (WebKit::NetworkCache::Storage::Record **)(v2 + 8 * v3);
LABEL_9:
    uint64_t v4 = (WebKit::NetworkCache::Storage::Record **)(v2 + 8 * v3);
    goto LABEL_10;
  }
  uint64_t v5 = (WebKit::NetworkCache::Storage::Record **)*((void *)this + 18);
  if (v3)
  {
    uint64_t v6 = 8 * v3;
    uint64_t v5 = (WebKit::NetworkCache::Storage::Record **)*((void *)this + 18);
    while ((unint64_t)*v5 + 1 <= 1)
    {
      ++v5;
      v6 -= 8;
      if (!v6)
      {
        uint64_t v5 = v4;
        break;
      }
    }
  }
LABEL_10:
  if (v2) {
    uint64_t v7 = (WebKit::NetworkCache::Storage::Record **)(v2 + 8 * *(unsigned int *)(v2 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  while (v5 != v7)
  {
    uint64_t v8 = v5 + 1;
    this = WebKit::NetworkCache::Storage::ReadOperation::cancel(*v5);
    uint64_t v5 = v4;
    if (v8 != v4)
    {
      uint64_t v5 = v8;
      while ((unint64_t)*v5 + 1 <= 1)
      {
        if (++v5 == v4)
        {
          uint64_t v5 = v4;
          break;
        }
      }
    }
  }
  while (*((_DWORD *)v1 + 35))
  {
    WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::dequeue((uint64_t *)v1 + 16, &v11);
    WebKit::NetworkCache::Storage::ReadOperation::cancel(v11);
    this = v11;
    uint64_t v11 = 0;
    if (this)
    {
      WebKit::NetworkCache::Storage::ReadOperation::~ReadOperation(this);
      this = (WebKit::NetworkCache::Storage::Record *)WTF::fastFree(v9, v10);
    }
  }
  return this;
}

uint64_t *WebKit::NetworkCache::Storage::dispatchPendingWriteOperations(uint64_t *this, WTF::StringImpl *a2)
{
  uint64_t v2 = this[27];
  if (this[26] != v2)
  {
    uint64_t v3 = (uint64_t)this;
    uint64_t v4 = this + 30;
    do
    {
      if (*v4 && *(_DWORD *)(*v4 - 12)) {
        return this;
      }
      if (!v2) {
        uint64_t v2 = *(unsigned int *)(v3 + 232);
      }
      uint64_t v5 = v2 - 1;
      uint64_t v6 = *(void *)(v3 + 224);
      uint64_t v7 = *(atomic_uchar ****)(v6 + 8 * v5);
      *(void *)(v6 + 8 * v5) = 0;
      *(void *)(v3 + 216) = v5;
      uint64_t v8 = *(void *)(v3 + 224);
      uint64_t v9 = *(atomic_uchar ****)(v8 + 8 * v5);
      *(void *)(v8 + 8 * v5) = 0;
      if (v9) {
        std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v9, a2);
      }
      uint64_t v10 = *v4;
      if (*v4
        || (WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>>::expand(v4),
            (uint64_t v10 = *v4) != 0))
      {
        int v11 = *(_DWORD *)(v10 - 8);
      }
      else
      {
        int v11 = 0;
      }
      unint64_t v12 = ((unint64_t)v7 + ~((void)v7 << 32)) ^ (((unint64_t)v7 + ~((void)v7 << 32)) >> 22);
      unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
      int v16 = (atomic_uchar ****)(v10 + 8 * v15);
      uint64_t v17 = *v16;
      if (*v16)
      {
        uint64_t v27 = 0;
        int v28 = 1;
        do
        {
          if (v17 == v7)
          {
            int v24 = v7;
            goto LABEL_19;
          }
          if (v17 == (atomic_uchar ***)-1) {
            uint64_t v27 = v16;
          }
          unsigned int v15 = (v15 + v28) & v11;
          int v16 = (atomic_uchar ****)(v10 + 8 * v15);
          uint64_t v17 = *v16;
          ++v28;
        }
        while (*v16);
        if (v27)
        {
          *uint64_t v27 = 0;
          --*(_DWORD *)(*v4 - 16);
          int v16 = v27;
        }
      }
      WTF *v16 = v7;
      uint64_t v18 = *v4;
      if (*v4) {
        int v19 = *(_DWORD *)(v18 - 12) + 1;
      }
      else {
        int v19 = 1;
      }
      *(_DWORD *)(v18 - 1objc_destroyWeak(this + 2) = v19;
      uint64_t v20 = *v4;
      if (*v4) {
        int v21 = *(_DWORD *)(v20 - 12);
      }
      else {
        int v21 = 0;
      }
      uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
      unint64_t v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22) {
          goto LABEL_18;
        }
      }
      else if (3 * v23 > 4 * v22)
      {
        goto LABEL_18;
      }
      WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>>::expand(v4);
LABEL_18:
      int v24 = 0;
LABEL_19:
      WebKit::NetworkCache::Storage::addToRecordFilter(v3, (const WebKit::NetworkCache::Key *)(v7 + 1));
      uint64_t v25 = *(void *)(v3 + 320);
      unsigned int v26 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
      uint64_t *v26 = (uint64_t)&unk_1EE9CB470;
      v26[1] = v3;
      v26[2] = (uint64_t)v7;
      uint64_t v29 = v26;
      MEMORY[0x19972E4D0](v25, &v29);
      this = v29;
      uint64_t v29 = 0;
      if (this) {
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
      }
      if (v24) {
        this = (uint64_t *)std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v24, a2);
      }
      uint64_t v2 = *(void *)(v3 + 216);
    }
    while (*(void *)(v3 + 208) != v2);
  }
  return this;
}

void WebKit::NetworkCache::Storage::~Storage(WebKit::NetworkCache::Storage *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 42);
  *((void *)this + 4objc_destroyWeak(this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 41);
  *((void *)this + 4objc_destroyWeak(this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 38);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    if (v8)
    {
      uint64_t v9 = (WTF **)*((void *)this + 38);
      do
      {
        uint64_t v10 = *v9;
        if (*v9 != (WTF *)-1)
        {
          WTF *v9 = 0;
          if (v10) {
            std::default_delete<WebKit::NetworkCache::Storage::TraverseOperation>::operator()[abi:sn180100](v10, a2);
          }
        }
        ++v9;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  *((void *)this + 3objc_destroyWeak(this + 1) = &unk_1EE9BA5F0;
  uint64_t v11 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  WebCore::TimerBase::~TimerBase((WebKit::NetworkCache::Storage *)((char *)this + 248));
  uint64_t v13 = *((void *)this + 30);
  if (v13)
  {
    uint64_t v14 = *(unsigned int *)(v13 - 4);
    if (v14)
    {
      unsigned int v15 = (atomic_uchar ****)*((void *)this + 30);
      do
      {
        int v16 = *v15;
        if (*v15 != (atomic_uchar ***)-1)
        {
          void *v15 = 0;
          if (v16) {
            std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v16, v12);
          }
        }
        ++v15;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v13 - 16), v12);
  }
  unint64_t v17 = *((void *)this + 26);
  unint64_t v18 = *((void *)this + 27);
  int v19 = (WTF *)*((void *)this + 28);
  if (v17 <= v18)
  {
    if (v17 == v18) {
      goto LABEL_46;
    }
    unint64_t v23 = (atomic_uchar ****)((char *)v19 + 8 * v17);
    uint64_t v24 = 8 * v18 - 8 * v17;
    do
    {
      uint64_t v25 = *v23;
      *unint64_t v23 = 0;
      if (v25) {
        std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v25, v12);
      }
      ++v23;
      v24 -= 8;
    }
    while (v24);
  }
  else
  {
    if (v18)
    {
      uint64_t v20 = 8 * v18;
      do
      {
        int v21 = *(atomic_uchar ****)v19;
        *(void *)int v19 = 0;
        if (v21)
        {
          uint64_t v22 = v19;
          std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v21, v12);
          int v19 = v22;
        }
        int v19 = (WTF *)((char *)v19 + 8);
        v20 -= 8;
      }
      while (v20);
      int v19 = (WTF *)*((void *)this + 28);
      unint64_t v17 = *((void *)this + 26);
    }
    uint64_t v26 = *((unsigned int *)this + 58);
    if (v17 != v26)
    {
      uint64_t v42 = (atomic_uchar ****)((char *)v19 + 8 * v17);
      uint64_t v43 = 8 * v26 - 8 * v17;
      do
      {
        uint64_t v44 = *v42;
        *uint64_t v42 = 0;
        if (v44) {
          std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v44, v12);
        }
        ++v42;
        v43 -= 8;
      }
      while (v43);
    }
  }
  int v19 = (WTF *)*((void *)this + 28);
LABEL_46:
  if (v19)
  {
    *((void *)this + 28) = 0;
    *((_DWORD *)this + 58) = 0;
    WTF::fastFree(v19, v12);
  }
  *((void *)this + 19) = &unk_1EE9BA5F0;
  uint64_t v27 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  WebCore::TimerBase::~TimerBase((WebKit::NetworkCache::Storage *)((char *)this + 152));
  uint64_t v29 = *((void *)this + 18);
  if (v29)
  {
    uint64_t v30 = *(unsigned int *)(v29 - 4);
    if (v30)
    {
      long long v31 = (WebKit::NetworkCache::Storage::ReadOperation **)*((void *)this + 18);
      do
      {
        if (*v31 != (WebKit::NetworkCache::Storage::ReadOperation *)-1) {
          std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100](v31, 0);
        }
        ++v31;
        --v30;
      }
      while (v30);
    }
    WTF::fastFree((WTF *)(v29 - 16), v28);
  }
  uint64_t v32 = *((unsigned int *)this + 35);
  if (v32)
  {
    int v33 = (WebKit::NetworkCache::Storage::ReadOperation **)*((void *)this + 16);
    uint64_t v34 = 8 * v32;
    do
    {
      std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100](v33++, 0);
      v34 -= 8;
    }
    while (v34);
  }
  uint64_t v35 = (WTF *)*((void *)this + 16);
  if (v35)
  {
    *((void *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v35, v28);
  }
  int v36 = (WTF *)*((void *)this + 14);
  if (v36)
  {
    *((void *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v36, v28);
  }
  uint64_t v37 = (WTF *)*((void *)this + 12);
  if (v37)
  {
    *((void *)this + 1objc_destroyWeak(this + 2) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v37, v28);
  }
  unint64_t v38 = (WTF *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v38) {
    WTF::fastFree(v38, v28);
  }
  uint64_t v39 = (WTF *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v39) {
    WTF::fastFree(v39, v28);
  }
  uint64_t v40 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v28);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  uint64_t v41 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v28);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
}

WTF::StringImpl *WebKit::NetworkCache::Storage::versionPath(WebKit::NetworkCache::Storage *this)
{
  WTF::String::isolatedCopy();
  WebKit::NetworkCache::makeVersionedDirectoryPath((WebKit::NetworkCache *)&v4, v1);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::Storage::addToRecordFilter(uint64_t this, const WebKit::NetworkCache::Key *a2)
{
  uint64_t v2 = *(void *)(this + 64);
  if (v2)
  {
    unint64_t v3 = *((void *)a2 + 4);
    *(_DWORD *)(v2 + 4 * ((v3 >> 5) & 0x1FFF)) |= 1 << v3;
    *(_DWORD *)(v2 + 4 * ((v3 >> 37) & 0x1FFF)) |= 1 << SBYTE4(v3);
  }
  if (*(unsigned char *)(this + 80))
  {
    uint64_t v4 = (char *)a2 + 32;
    unsigned int v5 = *(_DWORD *)(this + 108);
    if (v5 == *(_DWORD *)(this + 104))
    {
      return WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::array<unsigned char,20ul> const&>(this + 96, (unint64_t)v4);
    }
    else
    {
      uint64_t v6 = *(void *)(this + 96) + 20 * v5;
      long long v7 = *(_OWORD *)v4;
      *(_DWORD *)(v6 + 16) = *((_DWORD *)v4 + 4);
      *(_OWORD *)uint64_t v6 = v7;
      ++*(_DWORD *)(this + 108);
    }
  }
  return this;
}

uint64_t WebKit::NetworkCache::Storage::mayContain(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(void *)(a2 + 32);
  if ((*(_DWORD *)(v2 + 4 * ((v3 >> 5) & 0x1FFF)) >> v3)) {
    return (*(_DWORD *)(v2 + 4 * ((v3 >> 37) & 0x1FFF)) >> SBYTE4(v3)) & 1;
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WebKit::NetworkCache::Storage::recordDirectoryPathForKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::String::isolatedCopy();
  WebKit::NetworkCache::Key::hashAsString(a3 + 52, &v8);
  uint64_t v4 = v8;
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::pathByAppendingComponent();
  uint64_t v6 = v10;
  uint64_t v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v5);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Storage::recordPathForKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::NetworkCache::Storage::recordDirectoryPathForKey((uint64_t)&v8, a2, a3);
  WebKit::NetworkCache::Key::hashAsString(a3 + 32, &v7);
  uint64_t v4 = v7;
  if (v7)
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v5);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Storage::blobPathForKey(WebKit::NetworkCache::Storage *this, const WebKit::NetworkCache::Key *a2, uint64_t a3)
{
  WebKit::NetworkCache::Storage::recordPathForKey((uint64_t)&v6, (uint64_t)a2, a3);
  WebKit::NetworkCache::blobPathForRecordPath(this, v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::blobPathForRecordPath(WebKit::NetworkCache *this, const WTF::String *a2)
{
  if (a2) {
    *(_DWORD *)a2 += 2;
  }
  unsigned int v5 = a2;
  v6[0] = (uint64_t)"-blob";
  v6[1] = 6;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v5, v6, this);
  if (*(void *)this)
  {
    uint64_t result = v5;
    unsigned int v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

BOOL WebKit::NetworkCache::decodeRecordHeader(dispatch_data_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  char v14 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v8 = &unk_1EE9CAF70;
  v8[1] = a2;
  uint64_t v8[2] = &v14;
  object = v8;
  WebKit::NetworkCache::Data::apply((uint64_t)a1, (uint64_t)&object);
  uint64_t v9 = object;
  object = 0;
  if (v9) {
    (*(void (**)(void *))(*(void *)v9 + 8))(v9);
  }
  BOOL result = 0;
  if (v14 && *(_DWORD *)a2 == 17)
  {
    dispatch_data_t subrange = dispatch_data_create_subrange(*a1, *(void *)(a2 + 160), *(void *)(a2 + 112));
    long long v16 = 0uLL;
    object = subrange;
    char v17 = 0;
    WTF::OSObjectPtr<dispatch_data_s *>::operator=((void **)a3, &object);
    *(_OWORD *)(a3 + 8) = v16;
    *(unsigned char *)(a3 + 24) = v17;
    if (object) {
      os_release(object);
    }
    WebKit::NetworkCache::computeSHA1(a3, a4);
    return *(void **)(a2 + 88) == object
        && *(void *)(a2 + 96) == (void)v16
        && *(_DWORD *)(a2 + 104) == (unint64_t)DWORD2(v16);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Storage::storeBodyAsBlob(uint64_t a1, atomic_ullong *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  WebKit::NetworkCache::Storage::blobPathForKey((WebKit::NetworkCache::Storage *)&v15, (const WebKit::NetworkCache::Key *)a2, a3 + 8);
  WebKit::NetworkCache::BlobStorage::add(a2 + 42, (const WTF::String *)&v15, (const WebKit::NetworkCache::Data *)(a3 + 120), (uint64_t)&object);
  if (object)
  {
    atomic_fetch_add((atomic_uint *volatile)(a3 + 192), 1u);
    WTF::RunLoop::main(v6);
    uint64_t v8 = object;
    if (object) {
      os_retain(object);
    }
    long long v13 = v19;
    char v14 = v20;
    long long v16 = v21;
    int v17 = v22;
    uint64_t v9 = WTF::fastMalloc((WTF *)0x50);
    *(void *)uint64_t v9 = &unk_1EE9CB358;
    *(void *)(v9 + 8) = a2;
    *(void *)(v9 + 16) = v8;
    if (v8) {
      os_retain(v8);
    }
    *(_OWORD *)(v9 + 24) = v13;
    *(unsigned char *)(v9 + 40) = v14;
    *(_OWORD *)(v9 + 48) = v16;
    *(_DWORD *)(v9 + 64) = v17;
    *(void *)(v9 + 7objc_destroyWeak(this + 2) = a3;
    WTF::RunLoop::dispatch();
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    if (v8) {
      os_release(v8);
    }
    uint64_t v10 = object;
    *(void *)a1 = object;
    if (v10)
    {
      os_retain(v10);
      uint64_t v11 = object;
      *(_OWORD *)(a1 + 8) = v19;
      *(unsigned char *)(a1 + 24) = v20;
      *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = v21;
      *(_DWORD *)(a1 + 48) = v22;
      *(unsigned char *)(a1 + 56) = 1;
      if (v11) {
        os_release(v11);
      }
    }
    else
    {
      *(_OWORD *)(a1 + 8) = v19;
      *(unsigned char *)(a1 + 24) = v20;
      *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = v21;
      *(_DWORD *)(a1 + 48) = v22;
      *(unsigned char *)(a1 + 56) = 1;
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 56) = 0;
  }
  BOOL result = v15;
  unsigned int v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Storage::encodeRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](a1, a2, a3);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v3;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  unsigned int v26 = 17;
  WebKit::NetworkCache::Key::Key((uint64_t)&v27, v6);
  size_t v37 = 0;
  unsigned __int8 v38 = 0;
  uint64_t v39 = 0;
  uint64_t v11 = *(void *)(v7 + 72);
  size_t v34 = 0;
  uint64_t v31 = v11;
  unint64_t v12 = (dispatch_data_t *)(v7 + 80);
  uint64_t v13 = v9 + 28;
  WebKit::NetworkCache::computeSHA1(v7 + 80, v13);
  long long v32 = *(_OWORD *)buffer;
  int v33 = *(_DWORD *)&buffer[16];
  if (*(void *)(v7 + 88) || !*v12) {
    size_t size = *(void *)(v7 + 96);
  }
  else {
    size_t size = dispatch_data_get_size(*v12);
  }
  size_t v34 = size;
  if (*(unsigned char *)(v5 + 56))
  {
    *(_OWORD *)buffer = *(_OWORD *)(v5 + 32);
    *(_DWORD *)&buffer[16] = *(_DWORD *)(v5 + 48);
  }
  else
  {
    WebKit::NetworkCache::computeSHA1(v7 + 112, v13);
  }
  long long v35 = *(_OWORD *)buffer;
  int v36 = *(_DWORD *)&buffer[16];
  unsigned int v15 = (dispatch_data_t *)(v7 + 112);
  if (*(void *)(v7 + 120) || !*v15) {
    size_t v16 = *(void *)(v7 + 128);
  }
  else {
    size_t v16 = dispatch_data_get_size(*v15);
  }
  size_t v37 = v16;
  unsigned __int8 v38 = *(unsigned char *)(v5 + 56) ^ 1;
  WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)buffer);
  MEMORY[0x19972DD00](buffer, v26);
  WTF::Persistence::Coder<WebKit::NetworkCache::Key>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::WallTime>::encodeForPersistence();
  WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence();
  WTF::Persistence::Encoder::operator<<();
  MEMORY[0x19972DCD0](buffer, v38);
  WTF::Persistence::Encoder::encodeChecksum((WTF::Persistence::Encoder *)buffer);
  dispatch_data_t v17 = dispatch_data_create(*(const void **)buffer, *(unsigned int *)&buffer[12], 0, 0);
  v24[1] = 0;
  void v24[2] = 0;
  v24[0] = v17;
  char v25 = 0;
  WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)buffer);
  WebKit::NetworkCache::concatenate((WebKit::NetworkCache *)v24, (NSObject **)(v7 + 80), (uint64_t)buffer);
  if (v38)
  {
    WebKit::NetworkCache::concatenate((WebKit::NetworkCache *)buffer, (NSObject **)(v7 + 112), v10);
    long long v19 = *(void **)buffer;
  }
  else
  {
    long long v19 = *(void **)buffer;
    *(void *)uint64_t v10 = *(void *)buffer;
    if (v19) {
      os_retain(v19);
    }
    *(_OWORD *)(v10 + 8) = *(_OWORD *)&buffer[8];
    *(unsigned char *)(v10 + 24) = v41;
  }
  if (v19) {
    os_release(v19);
  }
  if (v17) {
    os_release(v17);
  }
  char v20 = v30;
  uint64_t v30 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v18);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  long long v21 = v29;
  uint64_t v29 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v18);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  int v22 = v28;
  int v28 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v18);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  BOOL result = v27;
  uint64_t v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::Storage::removeFromPendingWriteOperations(WebKit::NetworkCache::Storage *this, const WebKit::NetworkCache::Key *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 208);
  while (1)
  {
    uint64_t result = WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>::findIf<WebKit::NetworkCache::Storage::removeFromPendingWriteOperations(WebKit::NetworkCache::Key const&)::$_0>((uint64_t)v14, v4, (uint64_t)a2);
    unint64_t v7 = v15;
    if (v15 == *((void *)this + 27)) {
      break;
    }
    uint64_t v8 = *((void *)this + 28);
    uint64_t v9 = (atomic_uchar ****)(v8 + 8 * v15);
    uint64_t v10 = *v9;
    void *v9 = 0;
    if (v10)
    {
      unint64_t v12 = v7;
      uint64_t v13 = (atomic_uchar ****)(v8 + 8 * v7);
      uint64_t v11 = v8;
      std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v10, v6);
      uint64_t v8 = v11;
      unint64_t v7 = v12;
      uint64_t v9 = v13;
    }
    if (*v4 <= v7)
    {
      memmove((void *)(v8 + 8 * *v4 + 8), (const void *)(v8 + 8 * *v4), (size_t)v9 - v8 + -8 * *v4);
      *((void *)this + 26) = (*((void *)this + 26) + 1) % (unint64_t)*((unsigned int *)this + 58);
    }
    else
    {
      memmove(v9, v9 + 1, v8 + 8 * *((void *)this + 27) - (void)(v9 + 1));
      *((void *)this + 27) = (*((void *)this + 27) + (unint64_t)*((unsigned int *)this + 58) - 1)
                             % *((unsigned int *)this + 58);
    }
  }
  return result;
}

uint64_t WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>::findIf<WebKit::NetworkCache::Storage::removeFromPendingWriteOperations(WebKit::NetworkCache::Key const&)::$_0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v7[0] = (uint64_t)a2;
  v7[1] = v3;
  v6[0] = a2;
  v6[1] = v4;
  return std::find_if[abi:sn180100]<WTF::DequeIterator<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>,WebKit::NetworkCache::Storage::removeFromPendingWriteOperations(WebKit::NetworkCache::Key const&)::$_0>(a1, v7, (const WTF::StringImpl *)v6, a3);
}

void *WebKit::NetworkCache::Storage::remove(atomic_uchar *volatile *this, const WebKit::NetworkCache::Key *a2)
{
  v10[9] = *MEMORY[0x1E4F143B8];
  uint64_t result = (void *)WebKit::NetworkCache::Storage::mayContain((uint64_t)this, (uint64_t)a2);
  if (result)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this);
    WebKit::NetworkCache::Storage::removeFromPendingWriteOperations((WebKit::NetworkCache::Storage *)this, a2);
    uint64_t v5 = *((void *)this + 41);
    v9[0] = (uint64_t)this;
    v9[1] = (uint64_t)this;
    WebKit::NetworkCache::Key::Key((uint64_t)v10, (uint64_t)a2);
    std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0,void>,WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0>(v9, &v8);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 32))(v5, &v8);
    uint64_t v7 = v8;
    uint64_t v8 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    return WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0::~$_0(v9, v6);
  }
  return result;
}

void *WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (atomic_uchar **)a1[1];
  a1[1] = 0;
  if (v7) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v7);
  }
  return a1;
}

uint64_t WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Storage *a1, const WebKit::NetworkCache::Key **a2, uint64_t *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if (!v5) {
    goto LABEL_28;
  }
  if (v5 >= 0x38E38E4)
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  int v7 = 72 * v5;
  uint64_t v8 = (WTF *)WTF::fastMalloc((WTF *)(72 * v5));
  LODWORD(v5) = (v7 & 0xFFFFFFF8) / 0x48;
  LODWORD(v47) = v5;
  uint64_t v46 = v8;
  uint64_t v9 = *((unsigned int *)a2 + 3);
  if (v9)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = 72 * v9;
    do
    {
      if (WebKit::NetworkCache::Storage::mayContain((uint64_t)a1, (uint64_t)v10))
      {
        WebKit::NetworkCache::Storage::removeFromPendingWriteOperations(a1, v10);
        WebKit::NetworkCache::Key::Key((uint64_t)&v53, (uint64_t)v10);
        char v58 = 1;
        long long v13 = v53;
        long long v14 = v54;
        long long v53 = 0u;
        long long v54 = 0u;
        *(_OWORD *)uint64_t v48 = v13;
        *(_OWORD *)uint64_t v49 = v14;
        long long v50 = v55;
        long long v51 = v56;
        uint64_t v52 = v57;
        int v15 = HIDWORD(v47);
        if (HIDWORD(v47) == v47)
        {
          unint64_t v16 = WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v46, HIDWORD(v47) + 1, (unint64_t)v48);
          int v15 = HIDWORD(v47);
          dispatch_data_t v17 = (char *)v46 + 72 * HIDWORD(v47);
          uint64_t v18 = *(void *)v16;
          *(void *)unint64_t v16 = 0;
          *(void *)dispatch_data_t v17 = v18;
          uint64_t v19 = *(void *)(v16 + 8);
          *(void *)(v16 + 8) = 0;
          *((void *)v17 + objc_destroyWeak(this + 1) = v19;
          uint64_t v20 = *(void *)(v16 + 16);
          *(void *)(v16 + 16) = 0;
          *((void *)v17 + objc_destroyWeak(this + 2) = v20;
          uint64_t v21 = *(void *)(v16 + 24);
          *(void *)(v16 + 24) = 0;
          *((void *)v17 + 3) = v21;
          long long v22 = *(_OWORD *)(v16 + 32);
          long long v23 = *(_OWORD *)(v16 + 48);
          *((void *)v17 + 8) = *(void *)(v16 + 64);
        }
        else
        {
          dispatch_data_t v17 = (char *)v46 + 72 * HIDWORD(v47);
          v48[0] = 0;
          *(void *)dispatch_data_t v17 = v13;
          uint64_t v24 = v48[1];
          v48[1] = 0;
          *((void *)v17 + objc_destroyWeak(this + 1) = v24;
          char v25 = v49[0];
          v49[0] = 0;
          *((void *)v17 + objc_destroyWeak(this + 2) = v25;
          unsigned int v26 = v49[1];
          v49[1] = 0;
          *((void *)v17 + 3) = v26;
          long long v22 = v50;
          long long v23 = v51;
          *((void *)v17 + 8) = v52;
        }
        *((_OWORD *)v17 + objc_destroyWeak(this + 2) = v22;
        *((_OWORD *)v17 + 3) = v23;
        HIDWORD(v47) = v15 + 1;
        uint64_t v27 = v49[1];
        v49[1] = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v12);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
        int v28 = v49[0];
        v49[0] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2) {
            WTF::StringImpl::destroy(v28, v12);
          }
          else {
            *(_DWORD *)v28 -= 2;
          }
        }
        uint64_t v29 = v48[1];
        v48[1] = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, v12);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
        }
        uint64_t v30 = v48[0];
        v48[0] = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2) {
            WTF::StringImpl::destroy(v30, v12);
          }
          else {
            *(_DWORD *)v30 -= 2;
          }
        }
      }
      else
      {
        LOBYTE(v53) = 0;
        char v58 = 0;
      }
      std::__optional_destruct_base<WebKit::NetworkCache::Key,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v53, v12);
      uint64_t v10 = (const WebKit::NetworkCache::Key *)((char *)v10 + 72);
      v11 -= 72;
    }
    while (v11);
    LODWORD(v5) = v47;
    unsigned int v31 = HIDWORD(v47);
    unint64_t v32 = HIDWORD(v47);
  }
  else
  {
LABEL_28:
    unsigned int v31 = 0;
    unint64_t v32 = 0;
  }
  if (v32 >= v5) {
    goto LABEL_40;
  }
  int v33 = v46;
  if (v32 < v31)
  {
    WTF::VectorDestructor<true,WebKit::NetworkCache::Key>::destruct((WTF *)((char *)v46 + 72 * v32), (WTF *)((char *)v46 + 72 * v31));
    HIDWORD(v47) = v32;
    int v33 = v46;
    unsigned int v31 = v32;
  }
  if (v32)
  {
    if (v32 < 0x38E38E4)
    {
      size_t v34 = (WTF *)(72 * v32);
      long long v35 = (WTF *)WTF::fastMalloc(v34);
      LODWORD(v47) = (v34 & 0xFFFFFFF8) / 0x48;
      uint64_t v46 = v35;
      if (v35 != v33) {
        WTF::VectorMover<false,WebKit::NetworkCache::Key>::move(v33, (WTF::StringImpl *)((char *)v33 + 72 * v31), (uint64_t)v35);
      }
      goto LABEL_36;
    }
    __break(0xC471u);
LABEL_47:
    JUMPOUT(0x198C59308);
  }
LABEL_36:
  if (v33)
  {
    if (v46 == v33)
    {
      uint64_t v46 = 0;
      LODWORD(v47) = 0;
    }
    WTF::fastFree(v33, a2);
  }
LABEL_40:
  uint64_t v36 = *((void *)a1 + 41);
  *(void *)&long long v53 = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
  size_t v37 = v46;
  uint64_t v46 = 0;
  uint64_t v38 = *a3;
  *a3 = 0;
  uint64_t v39 = v47;
  uint64_t v47 = 0;
  uint64_t v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v40 = &unk_1EE9CB3A8;
  *((void *)v40 + objc_destroyWeak(this + 1) = a1;
  *((void *)v40 + objc_destroyWeak(this + 2) = a1;
  *((void *)v40 + 3) = v37;
  *((void *)&v53 + objc_destroyWeak(this + 1) = 0;
  long long v54 = 0uLL;
  *((void *)v40 + 4) = v39;
  *((void *)v40 + 5) = v38;
  v48[0] = v40;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v36 + 32))(v36, v48);
  uint64_t v42 = v48[0];
  v48[0] = 0;
  if (v42) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v42 + 8))(v42);
  }
  *(void *)&long long v55 = 0;
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v41);
  uint64_t v44 = (atomic_uchar **)*((void *)&v53 + 1);
  *((void *)&v53 + objc_destroyWeak(this + 1) = 0;
  if (v44) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v44);
  }
  return WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v43);
}

WTF::StringImpl *WebKit::NetworkCache::Storage::deleteFiles(WebKit::NetworkCache::Storage *this, const WebKit::NetworkCache::Key *a2)
{
  WebKit::NetworkCache::Storage::recordPathForKey((uint64_t)&v10, (uint64_t)this, (uint64_t)a2);
  WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v10, v4);
  uint64_t v6 = v10;
  uint64_t v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  WebKit::NetworkCache::Storage::blobPathForKey((WebKit::NetworkCache::Storage *)&v10, this, (uint64_t)a2);
  WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v10, v7);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::Storage::dispatchReadOperation(uint64_t *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (WebKit::NetworkCache::Storage::ReadOperation *)*a2;
  uint64_t v6 = a1 + 18;
  uint64_t v5 = a1[18];
  if (v5
    || (a1 = (uint64_t *)WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>>::expand(a1 + 18),
        (uint64_t v5 = *v6) != 0))
  {
    int v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = (WebKit::NetworkCache::Storage::ReadOperation *)*a2;
  unint64_t v9 = ~(*a2 << 32) + *a2;
  unint64_t v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  unsigned int v12 = v7 & ((v11 >> 31) ^ v11);
  long long v13 = (WebKit::NetworkCache::Storage::ReadOperation **)(v5 + 8 * v12);
  long long v14 = *v13;
  if (*v13)
  {
    int v15 = 0;
    int v16 = 1;
    while (v14 != v8)
    {
      if (v14 == (WebKit::NetworkCache::Storage::ReadOperation *)-1) {
        int v15 = v13;
      }
      unsigned int v12 = (v12 + v16) & v7;
      long long v13 = (WebKit::NetworkCache::Storage::ReadOperation **)(v5 + 8 * v12);
      long long v14 = *v13;
      ++v16;
      if (!*v13)
      {
        if (v15)
        {
          dispatch_data_t *v15 = 0;
          --*(_DWORD *)(*v6 - 16);
          uint64_t v8 = (WebKit::NetworkCache::Storage::ReadOperation *)*a2;
          long long v13 = v15;
        }
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    *a2 = 0;
    a1 = (uint64_t *)std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100](v13, v8);
    uint64_t v17 = *v6;
    if (*v6) {
      int v18 = *(_DWORD *)(v17 - 12) + 1;
    }
    else {
      int v18 = 1;
    }
    *(_DWORD *)(v17 - 1objc_destroyWeak(this + 2) = v18;
    uint64_t v19 = *v6;
    if (*v6) {
      int v20 = *(_DWORD *)(v19 - 12);
    }
    else {
      int v20 = 0;
    }
    uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
    unint64_t v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21) {
        goto LABEL_17;
      }
    }
    else if (3 * v22 > 4 * v21)
    {
      goto LABEL_17;
    }
    a1 = (uint64_t *)WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>>::expand(v6);
  }
LABEL_17:
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  *((void *)v4 + 26) = v23;
  *((_WORD *)v4 + 136) = *((_WORD *)v3 + 40);
  uint64_t v24 = v3[11];
  *((void *)v4 + 33) = v24;
  v3[11] = v24 + 1;
  if (*((_DWORD *)v3 + 6) != 1) {
    WebCore::TimerBase::start();
  }
  uint64_t v25 = v3[9];
  if (v25)
  {
    unint64_t v26 = *((void *)v4 + 5);
    if ((*(_DWORD *)(v25 + 4 * ((v26 >> 5) & 0x1FFF)) >> v26)) {
      int v27 = (*(_DWORD *)(v25 + 4 * ((v26 >> 37) & 0x1FFF)) >> SBYTE4(v26)) & 1;
    }
    else {
      LOBYTE(v27) = 0;
    }
  }
  else
  {
    LOBYTE(v27) = 1;
  }
  int v28 = (atomic_uint *)v3[39];
  atomic_fetch_add(v28 + 2, 1u);
  uint64_t v29 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v29 = &unk_1EE9CB3F8;
  *(void *)(v29 + 8) = v3;
  *(void *)(v29 + 16) = v4;
  *(unsigned char *)(v29 + 24) = v27;
  uint64_t v31 = v29;
  MEMORY[0x19972E4D0](v28, &v31);
  uint64_t result = v31;
  uint64_t v31 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v28)
  {
    if (atomic_fetch_add(v28 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v28 + 2);
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v28 + 8))(v28);
    }
  }
  return result;
}

WTF::RunLoop *WebKit::NetworkCache::Storage::finishReadOperation(WTF::RunLoop *result, uint64_t a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)(a2 + 192), 0xFFFFFFFF) == 1)
  {
    uint64_t v3 = result;
    WTF::RunLoop::main(result);
    uint64_t v4 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v4 = &unk_1EE9CB448;
    *((void *)v4 + objc_destroyWeak(this + 1) = v3;
    *((void *)v4 + objc_destroyWeak(this + 2) = a2;
    uint64_t v5 = v4;
    WTF::RunLoop::dispatch();
    uint64_t result = v5;
    if (v5) {
      return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v5 + 8))(v5);
    }
  }
  return result;
}

uint64_t *WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::dequeue@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((unsigned int *)result + 3);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *result + 8 * v2;
    uint64_t v5 = *(void *)*result;
    *(void *)*uint64_t result = *(void *)(v4 - 8);
    *(void *)(v4 - 8) = v5;
    WTF::Vector<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((WebKit::NetworkCache::Storage::ReadOperation *)result, a2);
    return WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::siftDown(v3, 0);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WebKit::NetworkCache::Storage::ReadOperation *WebKit::NetworkCache::Storage::dispatchPendingReadOperations(WebKit::NetworkCache::Storage::ReadOperation *this)
{
  if (*((_DWORD *)this + 35))
  {
    uint64_t v1 = (uint64_t)this;
    uint64_t v2 = (uint64_t *)((char *)this + 128);
    do
    {
      uint64_t v3 = *(void *)(v1 + 144);
      if (v3 && *(_DWORD *)(v3 - 12) > 5u) {
        break;
      }
      WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::dequeue(v2, &v6);
      WebKit::NetworkCache::Storage::dispatchReadOperation((uint64_t *)v1, &v6);
      this = v6;
      uint64_t v6 = 0;
      if (this)
      {
        WebKit::NetworkCache::Storage::ReadOperation::~ReadOperation(this);
        this = (WebKit::NetworkCache::Storage::ReadOperation *)WTF::fastFree(v4, v5);
      }
    }
    while (*(_DWORD *)(v1 + 140));
  }
  return this;
}

atomic_uchar *WebKit::NetworkCache::Storage::finishWriteOperation(atomic_uchar *result, uint64_t a2, uint64_t a3)
{
  if (atomic_fetch_add((atomic_uint *volatile)(a2 + 192), 0xFFFFFFFF) == 1)
  {
    uint64_t v5 = (uint64_t)result;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)result);
    uint64_t v7 = *(void *)(a2 + 184);
    if (v7)
    {
      *(void *)(a2 + 184) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a3);
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    unint64_t v9 = (uint64_t *)(v5 + 240);
    uint64_t v8 = *(void *)(v5 + 240);
    if (v8)
    {
      unsigned int v10 = *(_DWORD *)(v8 - 8);
      unint64_t v11 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      uint64_t v14 = v10 & ((v13 >> 31) ^ v13);
      uint64_t v15 = *(void *)(v8 + 8 * v14);
      if (v15 != a2)
      {
        int v26 = 1;
        while (v15)
        {
          uint64_t v14 = (v14 + v26) & v10;
          uint64_t v15 = *(void *)(v8 + 8 * v14);
          ++v26;
          if (v15 == a2) {
            goto LABEL_6;
          }
        }
        uint64_t v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_6:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        int v16 = *(atomic_uchar ****)(v8 + 8 * v14);
        *(void *)(v8 + 8 * v14) = -1;
        if (v16) {
          std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v16, v6);
        }
        ++*(_DWORD *)(*v9 - 16);
        uint64_t v17 = *v9;
        if (*v9) {
          int v18 = *(_DWORD *)(v17 - 12) - 1;
        }
        else {
          int v18 = -1;
        }
        *(_DWORD *)(v17 - 1objc_destroyWeak(this + 2) = v18;
        uint64_t v19 = *v9;
        if (*v9)
        {
          unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
          unsigned int v21 = *(_DWORD *)(v19 - 4);
          if (v20 < v21 && v21 >= 9) {
            WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>>::rehash((uint64_t *)(v5 + 240), v21 >> 1);
          }
        }
      }
    }
    WebKit::NetworkCache::Storage::dispatchPendingWriteOperations((uint64_t *)v5, v6);
    if (*(_DWORD *)(v5 + 24) != 1)
    {
      uint64_t v23 = *(void *)(v5 + 48);
      unint64_t v24 = atomic_load((unint64_t *)(v5 + 352));
      if (v24 + v23 > *(void *)(v5 + 40)) {
        WebKit::NetworkCache::Storage::shrink(v5);
      }
    }
    uint64_t v25 = *(atomic_uchar **)v5;
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(v25);
  }
  return result;
}

uint64_t WebKit::NetworkCache::Storage::shrinkIfNeeded(uint64_t this)
{
  if (*(_DWORD *)(this + 24) != 1)
  {
    uint64_t v1 = *(void *)(this + 48);
    unint64_t v2 = atomic_load((unint64_t *)(this + 352));
    if (v2 + v1 > *(void *)(this + 40)) {
      return WebKit::NetworkCache::Storage::shrink(this);
    }
  }
  return this;
}

uint64_t WebKit::NetworkCache::retrieveFromMemory<WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>>(unint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if (*a1 == v4) {
    return 0;
  }
  while (1)
  {
    unint64_t v8 = a1[2];
    unint64_t v9 = (WTF::RunLoop *)WebKit::NetworkCache::Key::operator==(*(void *)(v8 + 8 * v3) + 8, a2, a3);
    if (v9) {
      break;
    }
    unint64_t v10 = *((unsigned int *)a1 + 6);
    v3 += v10 + 1;
    do
      v3 -= v10;
    while (v3 >= v10);
    if (v4 == v3) {
      return 0;
    }
  }
  WTF::RunLoop::main(v9);
  uint64_t v12 = *(void *)(v8 + 8 * v3);
  WebKit::NetworkCache::Key::Key((uint64_t)&v31, v12 + 8);
  unint64_t v13 = *(void **)(v12 + 88);
  uint64_t v36 = *(void *)(v12 + 80);
  object = v13;
  if (v13) {
    os_retain(v13);
  }
  long long v14 = *(_OWORD *)(v12 + 96);
  char v39 = *(unsigned char *)(v12 + 112);
  long long v38 = v14;
  uint64_t v15 = *(void **)(v12 + 120);
  uint64_t v40 = v15;
  if (v15) {
    os_retain(v15);
  }
  long long v16 = *(_OWORD *)(v12 + 128);
  char v42 = *(unsigned char *)(v12 + 144);
  long long v41 = v16;
  uint64_t v17 = *(void *)(v12 + 165);
  *(_OWORD *)uint64_t v43 = *(_OWORD *)(v12 + 152);
  *(void *)&v43[13] = v17;
  uint64_t v18 = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t v44 = v18;
  uint64_t v19 = WTF::fastMalloc((WTF *)0xB8);
  *(void *)uint64_t v19 = &unk_1EE9CB4C0;
  *(_OWORD *)(v19 + 8) = v31;
  *(void *)(v19 + 24) = v32;
  uint64_t v20 = *((void *)&v32 + 1);
  long long v31 = 0u;
  long long v32 = 0u;
  *(void *)(v19 + 3objc_destroyWeak(this + 2) = v20;
  long long v21 = v33;
  long long v22 = v34;
  *(void *)(v19 + 7objc_destroyWeak(this + 2) = v35;
  *(_OWORD *)(v19 + 56) = v22;
  *(_OWORD *)(v19 + 40) = v21;
  *(void *)(v19 + 80) = v36;
  uint64_t v23 = object;
  *(void *)(v19 + 88) = object;
  if (v23) {
    os_retain(v23);
  }
  long long v24 = v38;
  *(unsigned char *)(v19 + 11objc_destroyWeak(this + 2) = v39;
  *(_OWORD *)(v19 + 96) = v24;
  uint64_t v25 = v40;
  *(void *)(v19 + 120) = v40;
  if (v25) {
    os_retain(v25);
  }
  long long v26 = v41;
  *(unsigned char *)(v19 + 144) = v42;
  *(_OWORD *)(v19 + 128) = v26;
  long long v27 = *(_OWORD *)v43;
  *(void *)(v19 + 165) = *(void *)&v43[13];
  *(_OWORD *)(v19 + 15objc_destroyWeak(this + 2) = v27;
  uint64_t v28 = v44;
  uint64_t v44 = 0;
  *(void *)(v19 + 176) = v28;
  WTF::RunLoop::dispatch();
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v30 = v44;
  uint64_t v44 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)&v31, v29);
  return 1;
}

uint64_t WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  v18[22] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  if (!*a1)
  {
    uint64_t v8 = 0;
    uint64_t v6 = 0;
LABEL_23:
    uint64_t v7 = v5 + 8 * v6;
    goto LABEL_8;
  }
  uint64_t v6 = *(unsigned int *)(v5 - 4);
  uint64_t v7 = v5 + 8 * v6;
  if (!*(_DWORD *)(v5 - 12))
  {
    uint64_t v8 = v5 + 8 * v6;
    goto LABEL_23;
  }
  uint64_t v8 = *a1;
  if (v6)
  {
    uint64_t v9 = 8 * v6;
    uint64_t v8 = *a1;
    while ((unint64_t)(*(void *)v8 + 1) <= 1)
    {
      v8 += 8;
      v9 -= 8;
      if (!v9)
      {
        uint64_t v8 = v7;
        break;
      }
    }
  }
LABEL_8:
  if (v5) {
    uint64_t v10 = v5 + 8 * *(unsigned int *)(v5 - 4);
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 == v8) {
    return 0;
  }
  while (1)
  {
    uint64_t v12 = (WTF::RunLoop *)WebKit::NetworkCache::Key::operator==(*(void *)v8 + 8, a2, a3);
    if (v12) {
      break;
    }
    uint64_t v13 = v8 + 8;
    uint64_t v8 = v7;
    if (v13 != v7)
    {
      uint64_t v8 = v13;
      while ((unint64_t)(*(void *)v8 + 1) <= 1)
      {
        v8 += 8;
        if (v8 == v7)
        {
          uint64_t v8 = v7;
          break;
        }
      }
    }
    uint64_t result = 0;
    if (v8 == v10) {
      return result;
    }
  }
  WTF::RunLoop::main(v12);
  WebKit::NetworkCache::Storage::Record::Record((WebKit::NetworkCache::Storage::Record *)v18, (const WebKit::NetworkCache::Storage::Record *)(*(void *)v8 + 8));
  uint64_t v14 = *(void *)a3;
  *(void *)a3 = 0;
  v18[21] = v14;
  uint64_t v15 = WTF::fastMalloc((WTF *)0xB8);
  uint64_t v17 = WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::CallableWrapper(v15, v18);
  WTF::RunLoop::dispatch();
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1}::~CompletionHandler((WebKit::NetworkCache::Storage::Record *)v18, v16);
  return 1;
}

uint64_t *WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::enqueue(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>(a1, (unint64_t)a2);
  }
  else
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *a2;
    *a2 = 0;
    *(void *)(v4 + 8 * v3) = v5;
    *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = v3 + 1;
  }

  return WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::siftUp((uint64_t *)a1, v3);
}

uint64_t WebKit::NetworkCache::Storage::store(uint64_t result, const WebKit::NetworkCache::Key *a2, uint64_t *a3, uint64_t *a4)
{
  if (!*(void *)(result + 40)) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = WTF::fastMalloc((WTF *)0xC8);
  WebKit::NetworkCache::Storage::WriteOperation::WriteOperation(v8, (atomic_uchar *volatile *)v7, (uint64_t)a2, a3, a4);
  uint64_t v9 = *(void *)(v7 + 208);
  uint64_t v10 = *(void *)(v7 + 216);
  unint64_t v11 = (uint64_t *)(v7 + 208);
  if (!v9)
  {
    uint64_t v9 = *(unsigned int *)(v7 + 232);
    if (v10)
    {
      if (v10 == v9 - 1) {
        goto LABEL_16;
      }
    }
    else if (!v9)
    {
      goto LABEL_16;
    }
LABEL_14:
    uint64_t v9 = v9;
    goto LABEL_4;
  }
  if (v10 + 1 == v9)
  {
LABEL_16:
    WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>::expandCapacity((uint64_t *)(v7 + 208));
    uint64_t v9 = *v11;
    if (*v11) {
      goto LABEL_4;
    }
    LODWORD(v9) = *(_DWORD *)(v7 + 232);
    goto LABEL_14;
  }
LABEL_4:
  uint64_t v12 = v9 - 1;
  *(void *)(v7 + 208) = v12;
  *(void *)(*(void *)(v7 + 224) + 8 * v1objc_destroyWeak(this + 2) = v8;
  uint64_t result = WebKit::NetworkCache::Storage::addToRecordFilter(v7, a2);
  unint64_t v13 = *(void *)(v7 + 208);
  unint64_t v14 = *(void *)(v7 + 216);
  if (v13 > v14) {
    v14 += *(unsigned int *)(v7 + 232);
  }
  if (v14 - v13 == 1 && (!*(unsigned char *)(v7 + 80) || *(_DWORD *)(v7 + 24) != 1))
  {
    return WebCore::TimerBase::start();
  }
  return result;
}

uint64_t WebKit::NetworkCache::Storage::traverseWithinRootPath(uint64_t a1, uint64_t a2, _DWORD **a3, char a4, uint64_t *a5)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
  uint64_t v9 = WTF::fastMalloc((WTF *)0x28);
  uint64_t v10 = v9;
  *(void *)uint64_t v9 = a1;
  unint64_t v11 = *a3;
  if (*a3) {
    *v11 += 2;
  }
  *(void *)(v9 + 8) = v11;
  *(unsigned char *)(v9 + 16) = a4;
  uint64_t v12 = *a5;
  *a5 = 0;
  *(void *)(v9 + 24) = v12;
  *(_WORD *)(v9 + 3objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(v9 + 36) = 0;
  unint64_t v13 = (uint64_t *)(a1 + 304);
  uint64_t v14 = *(void *)(a1 + 304);
  if (v14
    || (WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>>::expand((uint64_t *)(a1 + 304)),
        (uint64_t v14 = *v13) != 0))
  {
    int v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    int v15 = 0;
  }
  unint64_t v16 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
  unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
  uint64_t v20 = (uint64_t *)(v14 + 8 * v19);
  uint64_t v21 = *v20;
  if (*v20)
  {
    long long v22 = 0;
    int v23 = 1;
    do
    {
      if (v21 == v10)
      {
        long long v26 = (WTF *)v10;
        goto LABEL_25;
      }
      if (v21 == -1) {
        long long v22 = v20;
      }
      unsigned int v19 = (v19 + v23) & v15;
      uint64_t v20 = (uint64_t *)(v14 + 8 * v19);
      uint64_t v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *long long v22 = 0;
      --*(_DWORD *)(*v13 - 16);
      uint64_t v20 = v22;
    }
  }
  *uint64_t v20 = v10;
  uint64_t v24 = *v13;
  if (*v13) {
    int v25 = *(_DWORD *)(v24 - 12) + 1;
  }
  else {
    int v25 = 1;
  }
  *(_DWORD *)(v24 - 1objc_destroyWeak(this + 2) = v25;
  uint64_t v27 = *v13;
  if (*v13) {
    int v28 = *(_DWORD *)(v27 - 12);
  }
  else {
    int v28 = 0;
  }
  uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
  unint64_t v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (3 * v30 <= 4 * v29) {
LABEL_23:
  }
    WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>>::expand((uint64_t *)(a1 + 304));
LABEL_24:
  long long v26 = 0;
LABEL_25:
  uint64_t v31 = *(void *)(a1 + 312);
  *(void *)&long long v36 = a1;
  *((void *)&v36 + objc_destroyWeak(this + 1) = v10;
  WTF::String::isolatedCopy();
  uint64_t v32 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v32 = &unk_1EE9CB510;
  *(_OWORD *)(v32 + 8) = v36;
  uint64_t v38 = v32;
  *(void *)(v32 + 24) = v37;
  MEMORY[0x19972E4D0](v31, &v38);
  uint64_t v34 = v38;
  uint64_t v38 = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t result = 0;
  if (v26) {
    return std::default_delete<WebKit::NetworkCache::Storage::TraverseOperation>::operator()[abi:sn180100](v26, v33);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Storage::traverse(uint64_t a1, _DWORD **a2, char a3, uint64_t *a4)
{
  WTF::String::isolatedCopy();
  WebKit::NetworkCache::Storage::traverseWithinRootPath(a1, (uint64_t)&v10, a2, a3, a4);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Storage::traverse(uint64_t a1, _DWORD **a2, uint64_t a3, char a4, uint64_t *a5)
{
  void v15[3] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  WebKit::NetworkCache::Key::partitionToPartitionHash(a3, a1 + 28);
  WebKit::NetworkCache::Key::hashAsString((uint64_t)v15, &v14);
  WTF::String::isolatedCopy();
  uint64_t v9 = v14;
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v10);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WebKit::NetworkCache::Storage::traverseWithinRootPath(a1, (uint64_t)v15, a2, a4, a5);
  uint64_t result = v15[0];
  v15[0] = 0;
  if (!result)
  {
LABEL_8:
    if (!v9) {
      return result;
    }
    goto LABEL_11;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_8;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
  if (!v9) {
    return result;
  }
LABEL_11:
  if (*(_DWORD *)v9 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v11);
  }
  *(_DWORD *)v9 -= 2;
  return result;
}

uint64_t WebKit::NetworkCache::Storage::clear(uint64_t a1, double a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *(void **)(a1 + 64);
  if (v7) {
    bzero(v7, 0x8000uLL);
  }
  uint64_t v8 = *(void **)(a1 + 72);
  if (v8) {
    bzero(v8, 0x8000uLL);
  }
  *(void *)(a1 + 48) = 0;
  uint64_t v9 = *(void *)(a1 + 312);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v14 = v10;
  WTF::String::isolatedCopy();
  uint64_t v11 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v11 = &unk_1EE9CB5B0;
  *(void *)(v11 + 8) = a1;
  *(void *)(v11 + 16) = a1;
  *(double *)(v11 + 24) = a2;
  *(void *)(v11 + 3objc_destroyWeak(this + 2) = v14;
  *(void *)(v11 + 40) = v15;
  uint64_t v16 = v11;
  MEMORY[0x19972E4D0](v9, &v16);
  uint64_t v12 = v16;
  uint64_t v16 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return 0;
}

uint64_t WebKit::NetworkCache::Storage::shrink(uint64_t this)
{
  if (!*(unsigned char *)(this + 81))
  {
    uint64_t v1 = this;
    if (!*(unsigned char *)(this + 80))
    {
      *(unsigned char *)(this + 8objc_destroyWeak(this + 1) = 1;
      uint64_t v2 = *(void *)(this + 320);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this);
      unint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unint64_t v3 = &unk_1EE9CB600;
      v3[1] = v1;
      void v3[2] = v1;
      uint64_t v4 = (uint64_t)v3;
      MEMORY[0x19972E4D0](v2, &v4);
      this = v4;
      uint64_t v4 = 0;
      if (this) {
        return (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
    }
  }
  return this;
}

void WebKit::NetworkCache::SubresourcesEntry::encodeAsStorageRecord(WebKit::NetworkCache::SubresourcesEntry *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](this, a2, a3);
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&buffer);
  WTF::Persistence::Encoder::operator<<();
  if (*(_DWORD *)(v5 + 92))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      WTF::Persistence::Coder<WebKit::NetworkCache::SubresourceInfo>::encodeForPersistence((uint64_t)&buffer, (unsigned __int8 *)(*(void *)(v5 + 80) + v7));
      ++v8;
      v7 += 176;
    }
    while (v8 < *(unsigned int *)(v5 + 92));
  }
  WTF::Persistence::Encoder::encodeChecksum((WTF::Persistence::Encoder *)&buffer);
  WebKit::NetworkCache::Key::Key(v6, v5);
  *(void *)(v6 + 7objc_destroyWeak(this + 2) = *(void *)(v5 + 72);
  dispatch_data_t v9 = dispatch_data_create(buffer, size, 0, 0);
  *(void *)(v6 + 88) = 0;
  *(void *)(v6 + 96) = 0;
  *(void *)(v6 + 80) = v9;
  *(unsigned char *)(v6 + 104) = 0;
  *(void *)(v6 + 120) = 0;
  *(void *)(v6 + 128) = 0;
  *(void *)(v6 + 11objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(v6 + 136) = 0;
  *(unsigned char *)(v6 + 144) = 0;
  *(unsigned char *)(v6 + 164) = 0;
  WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&buffer);
}

void WebKit::NetworkCache::SubresourcesEntry::decodeStorageRecord(WebKit::NetworkCache::SubresourcesEntry *this, const WebKit::NetworkCache::Storage::Record *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = WTF::fastMalloc((WTF *)0x60);
  uint64_t v5 = (void *)WebKit::NetworkCache::Key::Key(v4, (uint64_t)a2);
  v5[9] = *((void *)a2 + 9);
  v5[10] = 0;
  v5[11] = 0;
  WebKit::NetworkCache::Data::span((const WebKit::NetworkCache::Storage::Record *)((char *)a2 + 80));
  WTF::Persistence::Decoder::Decoder();
  LOBYTE(v7) = 0;
  char v8 = 0;
  LOBYTE(v10) = 0;
  char v11 = 0;
  WTF::Persistence::Decoder::operator>>();
  *(void *)this = 0;
  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v9);
  std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](v4, v6);
}

WebKit::NetworkCache::SubresourceInfo *WebKit::NetworkCache::SubresourceInfo::SubresourceInfo(WebKit::NetworkCache::SubresourceInfo *this, const WebKit::NetworkCache::Key *a2, const WebCore::ResourceRequest *a3, const WebKit::NetworkCache::SubresourceInfo *a4)
{
  uint64_t v7 = (WTF::WallTime *)WebKit::NetworkCache::Key::Key((uint64_t)this, (uint64_t)a2);
  WTF::WallTime::now(v7);
  *((void *)this + 9) = v8;
  if (a4) {
    uint64_t v8 = *((void *)a4 + 10);
  }
  *((void *)this + 10) = v8;
  *((unsigned char *)this + 88) = a4 == 0;
  *((unsigned char *)this + 89) = WebCore::ResourceRequestBase::isSameSite(a3);
  *((unsigned char *)this + 90) = (*((unsigned char *)a3 + 148) & 4) != 0;
  uint64_t PartyForCookies = WebCore::ResourceRequestBase::firstPartyForCookies(a3);
  uint64_t v10 = *(_DWORD **)PartyForCookies;
  if (*(void *)PartyForCookies) {
    *v10 += 2;
  }
  *((void *)this + 1objc_destroyWeak(this + 2) = v10;
  long long v11 = *(_OWORD *)(PartyForCookies + 8);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)(PartyForCookies + 24);
  *(_OWORD *)((char *)this + 104) = v11;
  uint64_t v12 = WebCore::ResourceRequestBase::httpHeaderFields(a3);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WebKit::NetworkCache::SubresourceInfo *)((char *)this + 136), (WTF::ASCIILiteral *)v12);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WebKit::NetworkCache::SubresourceInfo *)((char *)this + 152), (WTF::ASCIILiteral *)(v12 + 16));
  *((unsigned char *)this + 168) = WebCore::ResourceRequestBase::priority(a3);
  return this;
}

uint64_t WebKit::NetworkCache::makeSubresourceInfoVector(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = a3;
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *((_DWORD *)a2 + 3);
  if (v6)
  {
    if (v6 >= 0x1745D18)
    {
      __break(0xC471u);
LABEL_113:
      JUMPOUT(0x198C5B508);
    }
    int v7 = 176 * v6;
    uint64_t v8 = WTF::fastMalloc((WTF *)(176 * v6));
    *(_DWORD *)(a1 + 8) = (v7 & 0xFFFFFFF0) / 0xB0;
    *(void *)a1 = v8;
  }
  uint64_t v74 = 0;
  long long v72 = (unsigned int *)v3;
  if (!v3 || !*((_DWORD *)v3 + 3)) {
    goto LABEL_5;
  }
  uint64_t v56 = 0;
  do
  {
    uint64_t v57 = *(void *)v3;
    uint64_t v58 = v74;
    if (v74
      || (WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,unsigned int,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(&v74),
          (uint64_t v58 = v74) != 0))
    {
      int v59 = *(_DWORD *)(v58 - 8);
    }
    else
    {
      int v59 = 0;
    }
    uint64_t v60 = 0;
    uint64_t v71 = v56;
    uint64_t v61 = v57 + 176 * v56;
    unsigned int v62 = *(_DWORD *)(v61 + 32);
    for (int i = 1; ; ++i)
    {
      unsigned int v64 = v62 & v59;
      uint64_t v65 = *(void *)(v58 + 80 * (v62 & v59) + 16);
      if (v65 == -1)
      {
        uint64_t v60 = v58 + 80 * v64;
        goto LABEL_95;
      }
      if (!v65) {
        break;
      }
      if (WebKit::NetworkCache::Key::operator==(v58 + 80 * v64, v61, a3)) {
        goto LABEL_101;
      }
LABEL_95:
      unsigned int v62 = i + v64;
    }
    if (v60)
    {
      *(_OWORD *)uint64_t v60 = 0u;
      *(_OWORD *)(v60 + 16) = 0u;
      *(_DWORD *)(v60 + 7objc_destroyWeak(this + 2) = 0;
      --*(_DWORD *)(v58 - 16);
      uint64_t v58 = v74;
      WebKit::NetworkCache::Key::operator=(v60, v61);
      *(_DWORD *)(v60 + 7objc_destroyWeak(this + 2) = v56;
    }
    else
    {
      WebKit::NetworkCache::Key::operator=(v58 + 80 * v64, v61);
      *(_DWORD *)(v58 + 80 * v64 + 7objc_destroyWeak(this + 2) = v56;
    }
    int v66 = *(_DWORD *)(v58 - 16);
    int v67 = *(_DWORD *)(v58 - 12) + 1;
    *(_DWORD *)(v58 - 1objc_destroyWeak(this + 2) = v67;
    uint64_t v68 = (v66 + v67);
    unint64_t v69 = *(unsigned int *)(v58 - 4);
    if (v69 > 0x400)
    {
      if (v69 <= 2 * v68) {
LABEL_100:
      }
        WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,unsigned int,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(&v74);
    }
    else if (3 * v69 <= 4 * v68)
    {
      goto LABEL_100;
    }
LABEL_101:
    uint64_t v3 = (const WTF::StringImpl *)v72;
    ++v56;
  }
  while (v72[3] > (unint64_t)(v71 + 1));
LABEL_5:
  uint64_t v73 = 0;
  uint64_t v9 = *((unsigned int *)a2 + 3);
  if (!v9) {
    goto LABEL_70;
  }
  uint64_t v10 = *(const WebCore::ResourceRequest ***)a2;
  uint64_t v70 = *(void *)a2 + 8 * v9;
  while (2)
  {
    long long v11 = *v10;
    uint64_t v12 = v73;
    if (v73
      || (WTF::HashTable<WebKit::NetworkCache::Key,WebKit::NetworkCache::Key,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(&v73, 0), (uint64_t v12 = v73) != 0))
    {
      int v13 = *(_DWORD *)(v12 - 8);
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = 0;
    uint64_t v15 = (uint64_t)v11 + 200;
    unsigned int v16 = *((_DWORD *)v11 + 58);
    for (int j = 1; ; ++j)
    {
      unsigned int v18 = v16 & v13;
      uint64_t v19 = v12 + 72 * (v16 & v13);
      uint64_t v20 = *(void *)(v19 + 16);
      if (!v20) {
        break;
      }
      if (v20 == -1)
      {
        uint64_t v14 = (_OWORD *)(v12 + 72 * v18);
      }
      else if (WebKit::NetworkCache::Key::operator==(v12 + 72 * v18, v15, a3))
      {
        goto LABEL_37;
      }
      unsigned int v16 = j + v18;
    }
    if (v14)
    {
      _OWORD *v14 = 0u;
      v14[1] = 0u;
      --*(_DWORD *)(v12 - 16);
      uint64_t v19 = (uint64_t)v14;
    }
    WebKit::NetworkCache::Key::Key((uint64_t)&v75, v15);
    WebKit::NetworkCache::Key::operator=(v19, (uint64_t)&v75);
    int v23 = v78;
    long long v78 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v21);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    uint64_t v24 = v77;
    uint64_t v77 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v21);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    int v25 = v76;
    long long v76 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v21);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    long long v26 = v75;
    char v75 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v21);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    uint64_t v27 = v73;
    if (v73) {
      int v28 = *(_DWORD *)(v73 - 12) + 1;
    }
    else {
      int v28 = 1;
    }
    *(_DWORD *)(v73 - 1objc_destroyWeak(this + 2) = v28;
    uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
    unint64_t v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29) {
        goto LABEL_45;
      }
    }
    else
    {
      if (3 * v30 > 4 * v29) {
        goto LABEL_32;
      }
LABEL_45:
      WTF::HashTable<WebKit::NetworkCache::Key,WebKit::NetworkCache::Key,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(&v73, (WTF::StringImpl **)v19);
    }
LABEL_32:
    if (v72)
    {
      uint64_t v51 = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(&v74, (uint64_t)*v10 + 200, v22);
      uint64_t v52 = v74;
      if (v74) {
        uint64_t v52 = v74 + 80 * *(unsigned int *)(v74 - 4);
      }
      if (v52 == v51)
      {
        long long v54 = 0;
      }
      else
      {
        unsigned int v53 = *(_DWORD *)(v51 + 72);
        if (v72[3] <= v53)
        {
          __break(0xC471u);
          JUMPOUT(0x198C5B510);
        }
        long long v54 = (const WebKit::NetworkCache::SubresourceInfo *)(*(void *)v72 + 176 * v53);
      }
      WebKit::NetworkCache::SubresourceInfo::SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)&v75, (const WebCore::ResourceRequest *)((char *)*v10 + 200), *v10, v54);
      unsigned int v55 = *(_DWORD *)(a1 + 12);
      if (v55 == *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::SubresourceInfo>(a1, (unint64_t)&v75);
      }
      else
      {
        WebKit::NetworkCache::SubresourceInfo::SubresourceInfo(*(void *)a1 + 176 * v55, (uint64_t *)&v75);
        *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = v55 + 1;
      }
      WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)&v75);
    }
    else
    {
      WebKit::NetworkCache::SubresourceInfo::SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)&v75, (const WebCore::ResourceRequest *)((char *)*v10 + 200), *v10, 0);
      unsigned int v31 = *(_DWORD *)(a1 + 12);
      if (v31 == *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::SubresourceInfo>(a1, (unint64_t)&v75);
      }
      else
      {
        uint64_t v32 = *(void *)a1 + 176 * v31;
        long long v33 = v75;
        char v75 = 0;
        *(void *)uint64_t v32 = v33;
        uint64_t v34 = v76;
        long long v76 = 0;
        *(void *)(v32 + 8) = v34;
        uint64_t v35 = v77;
        uint64_t v77 = 0;
        *(void *)(v32 + 16) = v35;
        long long v36 = v78;
        long long v78 = 0;
        *(void *)(v32 + 24) = v36;
        long long v38 = v79;
        long long v37 = v80;
        *(void *)(v32 + 64) = v81;
        *(_OWORD *)(v32 + 3objc_destroyWeak(this + 2) = v38;
        *(_OWORD *)(v32 + 48) = v37;
        long long v39 = *(_OWORD *)v82;
        *(_DWORD *)(v32 + 87) = *(_DWORD *)&v82[15];
        *(_OWORD *)(v32 + 7objc_destroyWeak(this + 2) = v39;
        WTF::URL::URL(v32 + 96, v83);
        *(void *)(v32 + 136) = 0;
        *(void *)(v32 + 144) = 0;
        uint64_t v40 = v84;
        uint64_t v84 = 0;
        *(void *)(v32 + 136) = v40;
        LODWORD(v40) = v85;
        int v85 = 0;
        *(_DWORD *)(v32 + 144) = v40;
        LODWORD(v40) = v86;
        int v86 = 0;
        *(_DWORD *)(v32 + 148) = v40;
        *(void *)(v32 + 15objc_destroyWeak(this + 2) = 0;
        *(void *)(v32 + 160) = 0;
        uint64_t v41 = v87;
        uint64_t v87 = 0;
        *(void *)(v32 + 15objc_destroyWeak(this + 2) = v41;
        LODWORD(v4objc_destroyWeak(this + 1) = v88;
        int v88 = 0;
        *(_DWORD *)(v32 + 160) = v41;
        LODWORD(v4objc_destroyWeak(this + 1) = v89;
        int v89 = 0;
        *(_DWORD *)(v32 + 164) = v41;
        *(unsigned char *)(v32 + 168) = v90;
        *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = v31 + 1;
      }
      WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)&v75);
      unsigned int v42 = *(_DWORD *)(a1 + 12);
      if (!v42)
      {
        __break(0xC471u);
        goto LABEL_113;
      }
      *(unsigned char *)(*(void *)a1 + 176 * v42 - 88) = 0;
    }
LABEL_37:
    if (++v10 != (const WebCore::ResourceRequest **)v70) {
      continue;
    }
    break;
  }
  uint64_t v43 = v73;
  if (v73)
  {
    uint64_t v44 = *(unsigned int *)(v73 - 4);
    if (v44)
    {
      uint64_t v45 = (WTF::StringImpl **)(v73 + 16);
      do
      {
        uint64_t v46 = *v45;
        if (*v45 != (WTF::StringImpl *)-1)
        {
          uint64_t v47 = v45[1];
          v45[1] = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
            {
              WTF::StringImpl::destroy(v47, a2);
              uint64_t v46 = *v45;
            }
            else
            {
              *(_DWORD *)v47 -= 2;
            }
          }
          *uint64_t v45 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2) {
              WTF::StringImpl::destroy(v46, a2);
            }
            else {
              *(_DWORD *)v46 -= 2;
            }
          }
          uint64_t v48 = *(v45 - 1);
          *(v45 - objc_destroyWeak(this + 1) = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2) {
              WTF::StringImpl::destroy(v48, a2);
            }
            else {
              *(_DWORD *)v48 -= 2;
            }
          }
          uint64_t v49 = *(v45 - 2);
          *(v45 - objc_destroyWeak(this + 2) = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2) {
              WTF::StringImpl::destroy(v49, a2);
            }
            else {
              *(_DWORD *)v49 -= 2;
            }
          }
        }
        v45 += 9;
        --v44;
      }
      while (v44);
    }
    WTF::fastFree((WTF *)(v43 - 16), a2);
  }
LABEL_70:
  uint64_t result = v74;
  if (v74) {
    return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,unsigned int,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(v74, a2);
  }
  return result;
}

uint64_t WebKit::NetworkCache::SubresourcesEntry::updateSubresourceLoads(_DWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebKit::NetworkCache::SubresourceInfo **)(a1 + 20);
  WebKit::NetworkCache::makeSubresourceInfoVector((uint64_t)&v12, a2, (const WTF::StringImpl *)(a1 + 20));
  unsigned int v5 = a1[23];
  if (v5)
  {
    unsigned int v6 = *v3;
    uint64_t v7 = 176 * v5;
    do
    {
      WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo(v6);
      unsigned int v6 = (WebKit::NetworkCache::SubresourceInfo *)(v8 + 176);
      v7 -= 176;
    }
    while (v7);
  }
  uint64_t v9 = *v3;
  if (*v3)
  {
    *((void *)a1 + 10) = 0;
    a1[22] = 0;
    WTF::fastFree(v9, v4);
  }
  *((void *)a1 + 10) = v12;
  uint64_t v10 = v13;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  *((void *)a1 + 1objc_destroyWeak(this + 1) = v10;
  return WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v4);
}

uint64_t WebKit::PrefetchCache::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(v8 + 40) = v6;
  *(void *)(v8 + 48) = v7;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(v8 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(v8 + 64) = v10;
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a2 + 7objc_destroyWeak(this + 2) = 0;
  *(void *)(v8 + 80) = 0;
  *(void *)(v8 + 88) = 0;
  *(void *)(v8 + 7objc_destroyWeak(this + 2) = v11;
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  *(void *)(v8 + 80) = v12;
  LODWORD(v1objc_destroyWeak(this + 2) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(v8 + 88) = v12;
  LODWORD(v1objc_destroyWeak(this + 2) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 9objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(v8 + 9objc_destroyWeak(this + 2) = v12;
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 104) = 0;
  uint64_t v13 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(v8 + 96) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(v8 + 104) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(v8 + 108) = v13;
  uint64_t v14 = *(void *)(a2 + 112);
  *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
  *(void *)(v8 + 11objc_destroyWeak(this + 2) = v14;
  *(unsigned char *)(v8 + 120) = 0;
  *(unsigned char *)(v8 + 128) = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    uint64_t v31 = *(void *)(a2 + 120);
    *(void *)(a2 + 120) = 0;
    *(void *)(a1 + 120) = v31;
    *(unsigned char *)(a1 + 128) = 1;
  }
  long long v15 = *(_OWORD *)(a2 + 136);
  long long v16 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 15objc_destroyWeak(this + 2) = v16;
  *(_OWORD *)(a1 + 136) = v15;
  long long v17 = *(_OWORD *)(a2 + 184);
  long long v18 = *(_OWORD *)(a2 + 200);
  long long v19 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 23objc_destroyWeak(this + 1) = *(_DWORD *)(a2 + 231);
  *(_OWORD *)(a1 + 216) = v19;
  *(_OWORD *)(a1 + 200) = v18;
  *(_OWORD *)(a1 + 184) = v17;
  uint64_t v20 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  *(void *)(a1 + 240) = v20;
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  WTF::URL::URL(a1 + 272, (uint64_t *)a3);
  WTF::URL::URL(a1 + 312, (uint64_t *)(a3 + 40));
  *(void *)(a1 + 35objc_destroyWeak(this + 2) = *(void *)(a3 + 80);
  uint64_t v21 = *(void *)(a3 + 88);
  *(void *)(a3 + 88) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 360) = v21;
  uint64_t v22 = *(void *)(a3 + 96);
  *(void *)(a3 + 96) = 0;
  *(void *)(a1 + 368) = v22;
  LODWORD(v2objc_destroyWeak(this + 2) = *(_DWORD *)(a3 + 104);
  *(_DWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a1 + 376) = v22;
  LODWORD(v2objc_destroyWeak(this + 2) = *(_DWORD *)(a3 + 108);
  *(_DWORD *)(a3 + 108) = 0;
  *(_DWORD *)(a1 + 380) = v22;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 39objc_destroyWeak(this + 2) = 0;
  uint64_t v23 = *(void *)(a3 + 112);
  *(void *)(a3 + 11objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 384) = v23;
  LODWORD(v23) = *(_DWORD *)(a3 + 120);
  *(_DWORD *)(a3 + 120) = 0;
  *(_DWORD *)(a1 + 39objc_destroyWeak(this + 2) = v23;
  LODWORD(v23) = *(_DWORD *)(a3 + 124);
  *(_DWORD *)(a3 + 124) = 0;
  *(_DWORD *)(a1 + 396) = v23;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  uint64_t v24 = *(void *)(a3 + 128);
  *(void *)(a3 + 128) = 0;
  *(void *)(a1 + 400) = v24;
  LODWORD(v24) = *(_DWORD *)(a3 + 136);
  *(_DWORD *)(a3 + 136) = 0;
  *(_DWORD *)(a1 + 408) = v24;
  LODWORD(v24) = *(_DWORD *)(a3 + 140);
  *(_DWORD *)(a3 + 140) = 0;
  *(_DWORD *)(a1 + 41objc_destroyWeak(this + 2) = v24;
  LODWORD(v24) = *(_DWORD *)(a3 + 144);
  *(unsigned char *)(a1 + 420) = *(unsigned char *)(a3 + 148);
  *(_DWORD *)(a1 + 416) = v24;
  uint64_t v25 = *(void *)(a3 + 152);
  *(void *)(a3 + 15objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 424) = v25;
  uint64_t v26 = *(void *)(a3 + 160);
  *(void *)(a3 + 160) = 0;
  *(void *)(a1 + 43objc_destroyWeak(this + 2) = v26;
  uint64_t v27 = *(void *)(a3 + 168);
  *(void *)(a3 + 168) = 0;
  *(void *)(a1 + 440) = v27;
  uint64_t v28 = *(void *)(a3 + 176);
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a3 + 184);
  *(void *)(a1 + 448) = v28;
  uint64_t v29 = *(void *)(a3 + 192);
  *(void *)(a3 + 19objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 464) = v29;
  return a1;
}

uint64_t WebKit::PrefetchCache::clearExpiredEntries(WebKit::PrefetchCache *this)
{
  uint64_t result = WTF::WallTime::now(this);
  uint64_t v4 = *((void *)this + 1);
  if (v4 == *((void *)this + 2)) {
    return result;
  }
  double v5 = v3;
  while (1)
  {
    uint64_t v6 = *((void *)this + 3) + 48 * v4;
    if (v5 - *(double *)(v6 + 40) <= 5.0) {
      break;
    }
    uint64_t v7 = *(uint64_t **)this;
    uint64_t v8 = WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>,WTF::URL>(*(uint64_t **)this, (WTF::StringImpl **)v6);
    if (*v7)
    {
      uint64_t v9 = *v7 + 48 * *(unsigned int *)(*v7 - 4);
      if (v9 == v8) {
        goto LABEL_11;
      }
    }
    else
    {
      if (!v8) {
        goto LABEL_11;
      }
      uint64_t v9 = 0;
    }
    if (v9 != v8) {
      WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::remove(v7, v8);
    }
LABEL_11:
    uint64_t v10 = *((void *)this + 1);
    if (v10 == *((void *)this + 2))
    {
      uint64_t result = 512;
      __break(0xC471u);
      return result;
    }
    uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct((WTF::StringImpl *)(*((void *)this + 3) + 48 * v10), (WTF::StringImpl *)(*((void *)this + 3) + 48 * v10 + 48));
    uint64_t v11 = *((void *)this + 1);
    uint64_t v12 = *((void *)this + 2);
    if (v11 == *((unsigned int *)this + 8) - 1) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = v11 + 1;
    }
    *((void *)this + objc_destroyWeak(this + 1) = v4;
    if (v4 == v12) {
      return result;
    }
  }

  return WebCore::TimerBase::start();
}

void WebKit::PrefetchCache::~PrefetchCache(WebKit::PrefetchCache *this)
{
  uint64_t v2 = (WebKit::PrefetchCache *)((char *)this + 40);
  *((void *)this + 5) = &unk_1EE9BA5F0;
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 1objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::TimerBase::~TimerBase(v2);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 3);
  if (v4 <= v5)
  {
    uint64_t v9 = (WTF::StringImpl *)((char *)v6 + 48 * v5);
    uint64_t v8 = (WTF::StringImpl *)((char *)v6 + 48 * v4);
  }
  else
  {
    WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct(v6, (WTF::StringImpl *)((char *)v6 + 48 * v5));
    uint64_t v7 = *((void *)this + 3);
    uint64_t v8 = (WTF::StringImpl *)(v7 + 48 * *((void *)this + 1));
    uint64_t v9 = (WTF::StringImpl *)(v7 + 48 * *((unsigned int *)this + 8));
  }
  WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct(v8, v9);
  uint64_t v11 = (WTF *)*((void *)this + 3);
  if (v11)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v11, v10);
  }
  std::unique_ptr<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)this, 0);
}

WTF *WebKit::PrefetchCache::clear(WebKit::PrefetchCache *this)
{
  if ((*((void *)this + 9) & 0xFFFFFFFFFFFFLL) != 0) {
    WebCore::TimerBase::stopSlowCase((WebKit::PrefetchCache *)((char *)this + 40));
  }
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  unint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  if (v2 <= v3)
  {
    uint64_t v7 = (WTF::StringImpl *)((char *)v4 + 48 * v3);
    uint64_t v6 = (WTF::StringImpl *)((char *)v4 + 48 * v2);
  }
  else
  {
    WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct(v4, (WTF::StringImpl *)((char *)v4 + 48 * v3));
    uint64_t v5 = *((void *)this + 3);
    uint64_t v6 = (WTF::StringImpl *)(v5 + 48 * *((void *)this + 1));
    uint64_t v7 = (WTF::StringImpl *)(v5 + 48 * *((unsigned int *)this + 8));
  }
  WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct(v6, v7);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  uint64_t result = (WTF *)*((void *)this + 3);
  if (result)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v8);
  }
  uint64_t v10 = *(WTF ***)this;
  if (*(void *)this)
  {
    uint64_t result = *v10;
    if (*v10)
    {
      void *v10 = 0;
      return (WTF *)WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable((uint64_t)result, (WTF::StringImpl *)v8);
    }
  }
  return result;
}

void WebKit::PrefetchCache::take(uint64_t **this@<X0>, const WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *this;
  if (*this)
  {
    uint64_t v7 = a2;
    WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::removeAllMatching<WebKit::PrefetchCache::take(WTF::URL const&)::$_0>((WTF::StringImpl *)(this + 1), &v7);
    uint64_t v6 = WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>,WTF::URL>(v4, a2);
    WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::take(a3, v4, v6);
  }
  else
  {
    *a3 = 0;
  }
}

WTF::StringImpl *WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::removeAllMatching<WebKit::PrefetchCache::take(WTF::URL const&)::$_0>(WTF::StringImpl *result, const WTF::StringImpl ***a2)
{
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = *(void *)result;
  unint64_t v5 = *((void *)result + 1);
  if (*(void *)result > v5) {
    v5 += *((unsigned int *)result + 6);
  }
  uint64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    do
    {
      if (*(void *)v3 == *(void *)(v3 + 8)
        || (uint64_t v7 = *(void *)(v3 + 16) + 48 * *(void *)v3,
            WTF::URL::URL((uint64_t)v11, (uint64_t *)v7),
            v11[5] = *(WTF::StringImpl **)(v7 + 40),
            *(void *)v3 == *(void *)(v3 + 8)))
      {
        __break(0xC471u);
        JUMPOUT(0x198C5BC88);
      }
      WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct((WTF::StringImpl *)(*(void *)(v3 + 16) + 48 * *(void *)v3), (WTF::StringImpl *)(*(void *)(v3 + 16) + 48 * *(void *)v3 + 48));
      if (*(void *)v3 == *(unsigned int *)(v3 + 24) - 1) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = *(void *)v3 + 1;
      }
      *(void *)uint64_t v3 = v9;
      if ((WTF::equal(v11[0], **a2, v8) & 1) == 0) {
        WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::append(v3, (uint64_t *)v11);
      }
      uint64_t result = v11[0];
      v11[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      --v6;
    }
    while (v6);
  }
  return result;
}

double WebKit::PrefetchCache::store(uint64_t **a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v9 = a1;
  uint64_t v10 = *a1;
  if (!*a1)
  {
    uint64_t v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
    *(void *)uint64_t v11 = 0;
    unsigned int v55 = 0;
    std::unique_ptr<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>>::reset[abi:sn180100](v9, v11);
    std::unique_ptr<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)&v55, 0);
    uint64_t v10 = *v9;
  }
  uint64_t v12 = WTF::fastMalloc((WTF *)0x1D8);
  WTF::URL::URL(v12, (uint64_t *)a3);
  uint64_t v13 = *(void *)(a3 + 40);
  *(void *)(a3 + 40) = 0;
  *(void *)(v14 + 40) = v13;
  *(void *)(v14 + 48) = *(void *)(a3 + 48);
  uint64_t v15 = *(void *)(a3 + 56);
  *(void *)(a3 + 56) = 0;
  *(void *)(v14 + 56) = v15;
  uint64_t v16 = *(void *)(a3 + 64);
  *(void *)(a3 + 64) = 0;
  *(void *)(v14 + 64) = v16;
  uint64_t v17 = *(void *)(a3 + 72);
  *(void *)(a3 + 7objc_destroyWeak(this + 2) = 0;
  *(void *)(v14 + 80) = 0;
  *(void *)(v14 + 88) = 0;
  *(void *)(v14 + 7objc_destroyWeak(this + 2) = v17;
  uint64_t v18 = *(void *)(a3 + 80);
  *(void *)(a3 + 80) = 0;
  *(void *)(v14 + 80) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 88);
  *(_DWORD *)(a3 + 88) = 0;
  *(_DWORD *)(v14 + 88) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 92);
  *(_DWORD *)(a3 + 9objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(v14 + 9objc_destroyWeak(this + 2) = v18;
  *(void *)(v14 + 96) = 0;
  *(void *)(v14 + 104) = 0;
  uint64_t v19 = *(void *)(a3 + 96);
  *(void *)(a3 + 96) = 0;
  *(void *)(v14 + 96) = v19;
  LODWORD(v19) = *(_DWORD *)(a3 + 104);
  *(_DWORD *)(a3 + 104) = 0;
  *(_DWORD *)(v14 + 104) = v19;
  LODWORD(v19) = *(_DWORD *)(a3 + 108);
  *(_DWORD *)(a3 + 108) = 0;
  *(_DWORD *)(v14 + 108) = v19;
  uint64_t v20 = *(void *)(a3 + 112);
  *(void *)(a3 + 11objc_destroyWeak(this + 2) = 0;
  *(void *)(v14 + 11objc_destroyWeak(this + 2) = v20;
  *(unsigned char *)(v14 + 120) = 0;
  *(unsigned char *)(v14 + 128) = 0;
  if (*(unsigned char *)(a3 + 128))
  {
    uint64_t v53 = *(void *)(a3 + 120);
    *(void *)(a3 + 120) = 0;
    *(void *)(v12 + 120) = v53;
    *(unsigned char *)(v12 + 128) = 1;
  }
  long long v21 = *(_OWORD *)(a3 + 136);
  long long v22 = *(_OWORD *)(a3 + 152);
  *(_OWORD *)(v12 + 168) = *(_OWORD *)(a3 + 168);
  *(_OWORD *)(v12 + 15objc_destroyWeak(this + 2) = v22;
  *(_OWORD *)(v12 + 136) = v21;
  long long v23 = *(_OWORD *)(a3 + 184);
  long long v24 = *(_OWORD *)(a3 + 200);
  long long v25 = *(_OWORD *)(a3 + 216);
  *(_DWORD *)(v12 + 23objc_destroyWeak(this + 1) = *(_DWORD *)(a3 + 231);
  *(_OWORD *)(v12 + 216) = v25;
  *(_OWORD *)(v12 + 200) = v24;
  *(_OWORD *)(v12 + 184) = v23;
  uint64_t v26 = *(void *)(a3 + 240);
  *(void *)(a3 + 240) = 0;
  *(void *)(v12 + 240) = v26;
  *(unsigned char *)(v12 + 248) = *(unsigned char *)(a3 + 248);
  *(unsigned char *)(v12 + 256) = a4;
  uint64_t v27 = *a5;
  *a5 = 0;
  *(void *)(v12 + 264) = v27;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(v12 + 272));
  int v59 = (void *)v12;
  unsigned int v55 = (WTF::StringImpl *)&v59;
  uint64_t v28 = *v10;
  if (*v10
    || (WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(v10, 0), (uint64_t v28 = *v10) != 0))
  {
    int v29 = *(_DWORD *)(v28 - 8);
  }
  else
  {
    int v29 = 0;
  }
  unsigned int v30 = *(_DWORD *)(*(void *)a2 + 16);
  if (v30 >= 0x100) {
    unsigned int v31 = v30 >> 8;
  }
  else {
    unsigned int v31 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
  }
  unsigned int v32 = v31 & v29;
  long long v33 = (WTF **)(v28 + 48 * (v31 & v29));
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v33) & 1) == 0)
  {
    long long v54 = v9;
    uint64_t v35 = 0;
    int v36 = 1;
    do
    {
      long long v37 = v33;
      if (*v33 != (WTF *)-1)
      {
        long long v38 = (WTF **)WTF::equal(*v33, *(const WTF::StringImpl **)a2, v34);
        long long v37 = v35;
        if (v38)
        {
          char v46 = 1;
          uint64_t v9 = v54;
          goto LABEL_28;
        }
      }
      unsigned int v32 = (v32 + v36) & v29;
      long long v33 = (WTF **)(v28 + 48 * v32);
      ++v36;
      uint64_t v35 = v37;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v33));
    uint64_t v9 = v54;
    if (v37)
    {
      *((_OWORD *)v37 + objc_destroyWeak(this + 1) = 0u;
      *((_OWORD *)v37 + objc_destroyWeak(this + 2) = 0u;
      *(_OWORD *)long long v37 = 0u;
      --*(_DWORD *)(*v10 - 16);
      long long v33 = v37;
    }
  }
  WTF::HashMapTranslator<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::URL const&,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>,WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>> WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::inlineAdd<WTF::URL const&,std::unique_ptr<WebKit::PrefetchCache::Entry>>(WTF::URL const&,std::unique_ptr<WebKit::PrefetchCache::Entry> &&)::{lambda(void)#1}>((uint64_t)v33, a2, (uint64_t **)&v55);
  uint64_t v40 = *v10;
  if (*v10) {
    int v41 = *(_DWORD *)(v40 - 12) + 1;
  }
  else {
    int v41 = 1;
  }
  *(_DWORD *)(v40 - 1objc_destroyWeak(this + 2) = v41;
  uint64_t v42 = *v10;
  if (*v10) {
    int v43 = *(_DWORD *)(v42 - 12);
  }
  else {
    int v43 = 0;
  }
  uint64_t v44 = (*(_DWORD *)(v42 - 16) + v43);
  unint64_t v45 = *(unsigned int *)(v42 - 4);
  if (v45 > 0x400)
  {
    if (v45 > 2 * v44) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (3 * v45 <= 4 * v44) {
LABEL_26:
  }
    long long v38 = WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(v10, v33);
LABEL_27:
  char v46 = 0;
LABEL_28:
  uint64_t v47 = v59;
  int v59 = 0;
  if (v47)
  {
    std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)&v59, v47);
    if (v46) {
      return result;
    }
  }
  else if (v46)
  {
    return result;
  }
  WTF::WallTime::now((WTF::WallTime *)v38);
  uint64_t v49 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v49 += 2;
  }
  unsigned int v55 = v49;
  long long v50 = *(_OWORD *)(a2 + 24);
  long long v56 = *(_OWORD *)(a2 + 8);
  long long v57 = v50;
  uint64_t v58 = v48;
  WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::append((uint64_t)(v9 + 1), (uint64_t *)&v55);
  uint64_t v52 = v55;
  unsigned int v55 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2) {
      WTF::StringImpl::destroy(v52, v51);
    }
    else {
      *(_DWORD *)v52 -= 2;
    }
  }
  if (((unint64_t)v9[9] & 0xFFFFFFFFFFFFLL) == 0
    || (double result = *(double *)(((unint64_t)v9[9] & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

void WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::append(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)a1)
  {
    if (v4 + 1 != *(void *)a1) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 24);
  if (!v4)
  {
    if (v5)
    {
      uint64_t v4 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v4 == v5 - 1)
  {
LABEL_9:
    WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::expandCapacity(a1);
    uint64_t v4 = *(void *)(a1 + 8);
  }
LABEL_10:
  WTF::URL::URL(*(void *)(a1 + 16) + 48 * v4, a2);
  *(void *)(v6 + 40) = a2[5];
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7 == *(unsigned int *)(a1 + 24) - 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7 + 1;
  }
  *(void *)(a1 + 8) = v8;
}

double WebKit::PrefetchCache::storeRedirect(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *this)
{
  if (!*(void *)a1)
  {
    uint64_t v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
    *(void *)uint64_t v8 = 0;
    uint64_t v19 = 0;
    std::unique_ptr<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)a1, v8);
    std::unique_ptr<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)&v19, 0);
  }
  WebCore::ResourceRequestBase::clearPurpose(this);
  uint64_t v9 = *(uint64_t **)a1;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x1D8);
  long long v23 = (void *)WebKit::PrefetchCache::Entry::Entry(v10, a3, (uint64_t)this);
  WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::inlineSet<WTF::URL const&,std::unique_ptr<WebKit::PrefetchCache::Entry>>(v9, (WTF::StringImpl **)a2, (uint64_t *)&v23, (uint64_t)&v19);
  uint64_t v12 = v23;
  long long v23 = 0;
  if (v12) {
    std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)&v23, v12);
  }
  WTF::WallTime::now(v11);
  uint64_t v14 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v14 += 2;
  }
  uint64_t v19 = v14;
  long long v15 = *(_OWORD *)(a2 + 24);
  long long v20 = *(_OWORD *)(a2 + 8);
  long long v21 = v15;
  uint64_t v22 = v13;
  WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::append(a1 + 8, (uint64_t *)&v19);
  uint64_t v17 = v19;
  uint64_t v19 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v16);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  if ((*(void *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (double result = *(double *)((*(void *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

uint64_t WebKit::webSecItemCopyMatching(WebKit *this, const __CFDictionary *a2, const void **a3)
{
  WebKit::sendSecItemRequest((uint64_t)&v15, 1, this, 0);
  if (!v19) {
    return 4294941988;
  }
  unsigned int v4 = capacity_4;
  if (capacity_4 == -1) {
    uint64_t v5 = -1;
  }
  else {
    uint64_t v5 = capacity_4;
  }
  if (v5 == 2)
  {
    if (capacity_4 != 2) {
      goto LABEL_25;
    }
    uint64_t v10 = v16;
    uint64_t v16 = 0;
LABEL_21:
    *(void *)a2 = v10;
    uint64_t v9 = v15;
LABEL_22:
    ((void (*)(char *, const void ***))off_1EE9CAF88[v4])(&v20, &v16);
    return v9;
  }
  if (v5 != 1)
  {
    if (capacity_4) {
      goto LABEL_25;
    }
    uint64_t v10 = 0;
    goto LABEL_21;
  }
  if (capacity_4 == 1)
  {
    Mutable = CFArrayCreateMutable(0, capacity, MEMORY[0x1E4F1D510]);
    if (capacity)
    {
      uint64_t v7 = v16;
      uint64_t v8 = 8 * capacity;
      do
      {
        if (*v7) {
          CFArrayAppendValue(Mutable, *v7);
        }
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    *(void *)a2 = Mutable;
    if (v19)
    {
      unsigned int v4 = capacity_4;
      uint64_t v9 = v15;
      if (capacity_4 == -1) {
        return v9;
      }
      goto LABEL_22;
    }
    __break(1u);
  }
LABEL_25:
  uint64_t v12 = (WebKit *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::webSecItemAdd(v12, v13, v14);
}

uint64_t WebKit::webSecItemAdd(WebKit *this, const __CFDictionary *a2, const void **a3)
{
  if (a2) {
    return 4294967246;
  }
  WebKit::sendSecItemRequest((uint64_t)&v5, 2, this, 0);
  if (!v8) {
    return 4294941988;
  }
  uint64_t v3 = v5;
  if (v7 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9CAF88[v7])(&v9, &v6);
  }
  return v3;
}

uint64_t WebKit::webSecItemUpdate(WebKit *this, const __CFDictionary *a2, const __CFDictionary *a3)
{
  WebKit::sendSecItemRequest((uint64_t)&v5, 3, this, a2);
  if (!v8) {
    return 4294941988;
  }
  uint64_t v3 = v5;
  if (v7 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9CAF88[v7])(&v9, &v6);
  }
  return v3;
}

uint64_t WebKit::webSecItemDelete(WebKit *this, const __CFDictionary *a2)
{
  WebKit::sendSecItemRequest((uint64_t)&v4, 4, this, 0);
  if (!v7) {
    return 4294941988;
  }
  uint64_t v2 = v4;
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9CAF88[v6])(&v8, &v5);
  }
  return v2;
}

void WebKit::BackgroundFetchStoreImpl::~BackgroundFetchStoreImpl(WebKit::BackgroundFetchStoreImpl *this, void *a2)
{
  *(void *)this = &unk_1EE9CADF8;
  uint64_t v3 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      uint64_t v6 = v4 + 40;
      do
      {
        if (*(void *)(v6 - 40) != -1)
        {
          char v7 = *(WTF::StringImpl **)(v6 + 40);
          *(void *)(v6 + 40) = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
          char v8 = *(WTF::StringImpl **)(v6 + 32);
          *(void *)(v6 + 3objc_destroyWeak(this + 2) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2) {
              WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
            }
            else {
              *(_DWORD *)v8 -= 2;
            }
          }
          uint64_t v9 = *(unsigned int *)(v6 + 24);
          if (v9 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9CAE38[v9])(&v22, v6);
          }
          *(_DWORD *)(v6 + 24) = -1;
          uint64_t v10 = *(unsigned int *)(v6 - 8);
          if (v10 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9CAE38[v10])(&v23, v6 - 32);
          }
          *(_DWORD *)(v6 - 8) = -1;
          uint64_t v11 = *(WTF::StringImpl **)(v6 - 40);
          *(void *)(v6 - 40) = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
        }
        v6 += 88;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v12 = *((void *)this + 4);
  if (!v12) {
    goto LABEL_43;
  }
  uint64_t v13 = *(unsigned int *)(v12 - 4);
  if (!v13) {
    goto LABEL_42;
  }
  uint64_t v14 = *((void *)this + 4);
  while (1)
  {
    int v15 = *(_DWORD *)(v14 + 24);
    if (v15) {
      break;
    }
    if (*(void *)v14 != -1) {
      goto LABEL_31;
    }
LABEL_38:
    v14 += 88;
    if (!--v13) {
      goto LABEL_42;
    }
  }
  if (v15 == 1)
  {
LABEL_31:
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 + 72, a2);
    uint64_t v16 = *(WTF::StringImpl ***)(v14 + 64);
    if (v16) {
      WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v16, (WTF::StringImpl *)a2);
    }
    uint64_t v17 = *(unsigned int *)(v14 + 56);
    if (v17 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9CAE38[v17])(&v24, v14 + 32);
    }
    *(_DWORD *)(v14 + 56) = -1;
    uint64_t v18 = *(unsigned int *)(v14 + 24);
    if (v18 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9CAE38[v18])(&v25, v14);
    }
    *(_DWORD *)(v14 + 24) = -1;
    goto LABEL_38;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_42:
  WTF::fastFree((WTF *)(v12 - 16), a2);
LABEL_43:
  char v19 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v19);
    WTF::fastFree((WTF *)v19, a2);
  }
  uint64_t v20 = *((void *)this + 2);
  if (v20)
  {
    *(void *)(v20 + 8) = 0;
    long long v21 = (unsigned int *)*((void *)this + 2);
    *((void *)this + objc_destroyWeak(this + 2) = 0;
    if (v21)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, a2);
      }
    }
  }
  else
  {
    *((void *)this + objc_destroyWeak(this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::BackgroundFetchStoreImpl::~BackgroundFetchStoreImpl(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t *WebKit::BackgroundFetchStoreImpl::registerFetch(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, WTF::StringImpl **a5)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  v71[0] = 0;
  int v72 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v71, a2);
  v73[0] = 0;
  int v74 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v73, a2 + 32);
  uint64_t v67 = a3;
  uint64_t v11 = *(WTF::StringImpl **)(a3 + 32);
  if (v11) {
    *(_DWORD *)v11 += 2;
  }
  uint64_t v12 = (uint64_t *)(a1 + 40);
  v75[0] = v11;
  uint64_t v13 = *a4;
  if (*a4) {
    *(_DWORD *)v13 += 2;
  }
  v75[1] = v13;
  uint64_t v14 = *v12;
  if (*v12
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 40), 0), (uint64_t v14 = *v12) != 0))
  {
    int v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    int v15 = 0;
  }
  unsigned int v16 = *((_DWORD *)*a5 + 4);
  uint64_t v69 = a1;
  uint64_t v68 = a2;
  if (v16 >= 0x100) {
    unsigned int v17 = v16 >> 8;
  }
  else {
    unsigned int v17 = WTF::StringImpl::hashSlowCase(*a5);
  }
  uint64_t v18 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v20 = v17 & v15;
    long long v21 = (uint64_t *)(v14 + 88 * (v17 & v15));
    char v22 = (WTF *)*v21;
    if (*v21 == -1)
    {
      uint64_t v18 = v14 + 88 * v20;
      goto LABEL_17;
    }
    if (!v22) {
      break;
    }
    if (WTF::equal(v22, *a5, v10)) {
      goto LABEL_49;
    }
LABEL_17:
    unsigned int v17 = i + v20;
  }
  if (v18)
  {
    *(void *)(v18 + 80) = 0;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 3objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)uint64_t v18 = 0u;
    --*(_DWORD *)(*v12 - 16);
    long long v21 = (uint64_t *)v18;
  }
  WTF::String::operator=(v21, a5);
  LOBYTE(v76) = 0;
  int v78 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v76, (uint64_t)v71);
  v79[0] = 0;
  int v80 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v79, (uint64_t)v73);
  long long v24 = *(_OWORD *)v75;
  v75[0] = 0;
  v75[1] = 0;
  long long v81 = v24;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v21 + 1), (uint64_t)&v76);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v21 + 5), (uint64_t)v79);
  uint64_t v25 = v81;
  *(void *)&long long v81 = 0;
  uint64_t v26 = (WTF::StringImpl *)v21[9];
  v21[9] = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v23);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t v27 = *((void *)&v81 + 1);
  *((void *)&v81 + objc_destroyWeak(this + 1) = 0;
  uint64_t v28 = (WTF::StringImpl *)v21[10];
  v21[10] = v27;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::destroy(v28, v23);
      int v29 = (WTF::StringImpl *)*((void *)&v81 + 1);
      *((void *)&v81 + objc_destroyWeak(this + 1) = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v23);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v28 -= 2;
      *((void *)&v81 + objc_destroyWeak(this + 1) = 0;
    }
  }
  unsigned int v30 = (WTF::StringImpl *)v81;
  *(void *)&long long v81 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v23);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  if (v80 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9CAE38[v80])(&v70, v79);
  }
  int v80 = -1;
  if (v78 != -1) {
    ((void (*)(char *, WTF::StringImpl **))off_1EE9CAE38[v78])(&v70, &v76);
  }
  uint64_t v31 = *v12;
  if (*v12) {
    int v32 = *(_DWORD *)(v31 - 12) + 1;
  }
  else {
    int v32 = 1;
  }
  *(_DWORD *)(v31 - 1objc_destroyWeak(this + 2) = v32;
  uint64_t v33 = *v12;
  if (*v12) {
    int v34 = *(_DWORD *)(v33 - 12);
  }
  else {
    int v34 = 0;
  }
  uint64_t v35 = (*(_DWORD *)(v33 - 16) + v34);
  unint64_t v36 = *(unsigned int *)(v33 - 4);
  if (v36 > 0x400)
  {
    if (v36 <= 2 * v35) {
LABEL_48:
    }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v12, (WTF::StringImpl **)v21);
  }
  else if (3 * v36 <= 4 * v35)
  {
    goto LABEL_48;
  }
LABEL_49:
  long long v37 = v75[1];
  v75[1] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v23);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  long long v38 = v75[0];
  v75[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v23);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  if (v74 != -1) {
    ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9CAE38[v74])(&v76, v73);
  }
  int v74 = -1;
  if (v72 != -1) {
    ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9CAE38[v72])(&v76, v71);
  }
  double result = (uint64_t *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(v69 + 32), v68);
  uint64_t v40 = *(uint64_t **)(v69 + 32);
  if (v40) {
    v40 += 11 * *((unsigned int *)v40 - 1);
  }
  if (v40 != result)
  {
    int v41 = *(WTF::StringImpl **)(v67 + 32);
    if (v41) {
      *(_DWORD *)v41 += 2;
    }
    uint64_t v42 = result + 8;
    long long v76 = v41;
    int v43 = *a4;
    if (*a4) {
      *(_DWORD *)v43 += 2;
    }
    uint64_t v77 = v43;
    uint64_t v44 = *v42;
    if (*v42
      || (WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(result + 8),
          (uint64_t v44 = *v42) != 0))
    {
      int v45 = *(_DWORD *)(v44 - 8);
    }
    else
    {
      int v45 = 0;
    }
    unsigned int v46 = WTF::PairHash<WTF::String,WTF::String>::hash(&v76) & v45;
    uint64_t v47 = (WTF::StringImpl **)(v44 + 24 * v46);
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v47, v48, v49) & 1) == 0)
    {
      uint64_t v52 = 0;
      int v53 = 1;
      do
      {
        if (*v47 == (WTF::StringImpl *)-1)
        {
          uint64_t v52 = v47;
        }
        else if (WTF::PairHash<WTF::String,WTF::String>::equal(v47, &v76, v51))
        {
          goto LABEL_101;
        }
        unsigned int v46 = (v46 + v53) & v45;
        uint64_t v47 = (WTF::StringImpl **)(v44 + 24 * v46);
        ++v53;
      }
      while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v47, (uint64_t)v50, v51));
      if (v52)
      {
        *uint64_t v52 = 0;
        v52[1] = 0;
        v52[2] = 0;
        --*(_DWORD *)(*v42 - 16);
        uint64_t v47 = v52;
      }
    }
    long long v54 = v76;
    long long v76 = 0;
    unsigned int v55 = *v47;
    *uint64_t v47 = v54;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2) {
        WTF::StringImpl::destroy(v55, v50);
      }
      else {
        *(_DWORD *)v55 -= 2;
      }
    }
    long long v56 = v77;
    uint64_t v77 = 0;
    long long v57 = v47[1];
    v47[1] = v56;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2) {
        WTF::StringImpl::destroy(v57, v50);
      }
      else {
        *(_DWORD *)v57 -= 2;
      }
    }
    uint64_t v58 = *a5;
    *a5 = 0;
    int v59 = v47[2];
    v47[2] = v58;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2) {
        WTF::StringImpl::destroy(v59, v50);
      }
      else {
        *(_DWORD *)v59 -= 2;
      }
    }
    uint64_t v60 = *v42;
    if (*v42) {
      int v61 = *(_DWORD *)(v60 - 12) + 1;
    }
    else {
      int v61 = 1;
    }
    *(_DWORD *)(v60 - 1objc_destroyWeak(this + 2) = v61;
    uint64_t v62 = *v42;
    if (*v42) {
      int v63 = *(_DWORD *)(v62 - 12);
    }
    else {
      int v63 = 0;
    }
    uint64_t v64 = (*(_DWORD *)(v62 - 16) + v63);
    unint64_t v65 = *(unsigned int *)(v62 - 4);
    if (v65 > 0x400)
    {
      if (v65 <= 2 * v64) {
LABEL_100:
      }
        WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(v42);
    }
    else if (3 * v65 <= 4 * v64)
    {
      goto LABEL_100;
    }
LABEL_101:
    int v66 = v77;
    uint64_t v77 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2) {
        WTF::StringImpl::destroy(v66, v50);
      }
      else {
        *(_DWORD *)v66 -= 2;
      }
    }
    double result = (uint64_t *)v76;
    long long v76 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v50);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebKit::BackgroundFetchStoreImpl::initializeFetches(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  int v10 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v9, a2);
  WebCore::SecurityOriginData::fromURL(v11, (WebCore::SecurityOriginData *)(a2 + 32), v6);
  double result = WebKit::BackgroundFetchStoreImpl::initializeFetches(a1, (uint64_t)v9, a3);
  if (v12 != -1) {
    double result = (unsigned int *)((uint64_t (*)(char *, uint64_t *))off_1EE9CAE38[v12])(&v8, v11);
  }
  int v12 = -1;
  if (v10 != -1) {
    return (unsigned int *)((uint64_t (*)(char *, unsigned char *))off_1EE9CAE38[v10])(&v8, v9);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  unsigned int *result;
  uint64_t v15;
  int v16;
  int v17;
  WTF::StringImpl *v18;
  __n128 v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  __n128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  uint64_t *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::SWServer *v44;
  unsigned int *Engine;
  atomic_uint *v46;
  atomic_uint *v47;
  uint64_t v48;
  _DWORD *v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  WTF::StringImpl **v55;
  unsigned int *v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  __n128 v60;
  WTF::StringImpl **v61;
  uint64_t v62;
  unint64_t v63;
  WTF::StringImpl **v64;
  void v65[2];
  int v66;
  unsigned char v67[24];
  int v68;
  WTF *v69;
  _DWORD *v70;
  WTF *v71;
  uint64_t v72;
  uint64_t vars8;

  int v72 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4 || !*(void *)(v4 + 8))
  {
    int v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (unsigned int *)v13(v12);
  }
  uint64_t v6 = a1;
  char v7 = (uint64_t *)(a1 + 32);
  char v8 = *(void *)(a1 + 32);
  int v61 = 0;
  uint64_t v62 = 0;
  int v63 = 0;
  if (v8
    || (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand((uint64_t *)(a1 + 32), 0), (char v8 = *v7) != 0))
  {
    uint64_t v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  int v10 = WTF::computeHash<WebCore::ClientOrigin>(a2) & v9;
  uint64_t v11 = v8 + 88 * v10;
  int v59 = a3;
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
  {
    uint64_t v60 = 0u;
    goto LABEL_27;
  }
  uint64_t v58 = v6;
  int v15 = 0;
  unsigned int v16 = 1;
  while (1)
  {
    unsigned int v17 = *(_DWORD *)(v11 + 24);
    if (v17) {
      break;
    }
    if (*(void *)v11 != -1) {
      goto LABEL_14;
    }
    int v15 = v11;
LABEL_18:
    int v10 = (v10 + v16) & v9;
    uint64_t v11 = v8 + 88 * v10;
    ++v16;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
      goto LABEL_22;
    }
  }
  if (v17 == 1)
  {
LABEL_14:
    if WebCore::operator==() && (WebCore::operator==())
    {
      unsigned int v20 = 1;
      uint64_t v6 = v58;
      goto LABEL_48;
    }
    goto LABEL_18;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_22:
  char v19 = 0uLL;
  if (v15)
  {
    *(void *)(v15 + 80) = 0;
    *(_OWORD *)(v15 + 48) = 0uLL;
    *(_OWORD *)(v15 + 64) = 0uLL;
    *(_OWORD *)(v15 + 16) = 0uLL;
    *(_OWORD *)(v15 + 3objc_destroyWeak(this + 2) = 0uLL;
    *(_OWORD *)int v15 = 0uLL;
    --*(_DWORD *)(*v7 - 16);
    v19.n128_u64[0] = v63;
    uint64_t v60 = v19;
    uint64_t v11 = v15;
  }
  else
  {
    uint64_t v60 = 0uLL;
  }
  uint64_t v6 = v58;
LABEL_27:
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v11, a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v11 + 32, a2 + 32);
  uint64_t v62 = 0;
  int v63 = 0;
  int v61 = 0;
  uint64_t v64 = 0;
  char v22 = *(WTF::StringImpl ***)(v11 + 64);
  *(void *)(v11 + 64) = 0;
  if (v22) {
    WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v22, v21);
  }
  char v23 = *(unsigned int *)(v11 + 84);
  long long v24 = v60;
  if (v23)
  {
    uint64_t v25 = *(uint64_t **)(v11 + 72);
    uint64_t v26 = 8 * v23;
    do
    {
      uint64_t v27 = *v25;
      *uint64_t v25 = 0;
      if (v27)
      {
        (*(void (**)(uint64_t, __n128))(*(void *)v27 + 8))(v27, v24);
        long long v24 = v60;
      }
      ++v25;
      v26 -= 8;
    }
    while (v26);
  }
  uint64_t v28 = *(WTF **)(v11 + 72);
  if (v28)
  {
    *(void *)(v11 + 7objc_destroyWeak(this + 2) = 0;
    *(_DWORD *)(v11 + 80) = 0;
    WTF::fastFree(v28, v21);
    v24.n128_u64[0] = v60.n128_u64[0];
  }
  v65[0] = 0;
  v65[1] = 0;
  *(void *)(v11 + 7objc_destroyWeak(this + 2) = 0;
  *(void *)(v11 + 80) = v24.n128_u64[0];
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v65, v21);
  if (v64) {
    WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v64, v18);
  }
  int v29 = *v7;
  if (*v7) {
    unsigned int v30 = *(_DWORD *)(v29 - 12) + 1;
  }
  else {
    unsigned int v30 = 1;
  }
  *(_DWORD *)(v29 - 1objc_destroyWeak(this + 2) = v30;
  uint64_t v31 = *v7;
  if (*v7) {
    int v32 = *(_DWORD *)(v31 - 12);
  }
  else {
    int v32 = 0;
  }
  uint64_t v33 = (*(_DWORD *)(v31 - 16) + v32);
  int v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 <= 2 * v33) {
LABEL_46:
    }
      uint64_t v11 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v7, v11);
  }
  else if (3 * v34 <= 4 * v33)
  {
    goto LABEL_46;
  }
  unsigned int v20 = 0;
LABEL_48:
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v18);
  if (v61) {
    WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v61, v35);
  }
  unint64_t v36 = *(unsigned int *)(v11 + 84);
  if (*(_DWORD *)(v11 + 84)) {
    long long v37 = 0;
  }
  else {
    long long v37 = v20;
  }
  if (v37 == 1)
  {
    long long v38 = *v59;
    *int v59 = 0;
    (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  else
  {
    long long v39 = (void *)(v11 + 72);
    uint64_t v40 = v59;
    if (v36 == *(_DWORD *)(v11 + 80))
    {
      uint64_t v40 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v36 + 1, (unint64_t)v59);
      unint64_t v36 = *(unsigned int *)(v11 + 84);
      int v41 = (void *)(*(void *)(v11 + 72) + 8 * v36);
    }
    else
    {
      int v41 = (void *)(*v39 + 8 * v36);
    }
    uint64_t v42 = *v40;
    *uint64_t v40 = 0;
    *int v41 = v42;
    *(_DWORD *)(v11 + 84) = v36 + 1;
    LOBYTE(v64) = 0;
    int v66 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v64, a2);
    v67[0] = 0;
    uint64_t v68 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v67, a2 + 32);
    int v43 = *(void *)(v6 + 48);
    if (v43) {
      uint64_t v44 = *(WebCore::SWServer **)(v43 + 8);
    }
    else {
      uint64_t v44 = 0;
    }
    Engine = (unsigned int *)WebCore::SWServer::backgroundFetchEngine(v44);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Engine, (uint64_t)Engine);
    unsigned int v46 = *(atomic_uint **)Engine;
    if (*(void *)Engine) {
      atomic_fetch_add(v46, 1u);
    }
    ++*(_DWORD *)(v6 + 8);
    uint64_t v69 = (WTF *)v46;
    char v70 = (_DWORD *)v6;
    uint64_t v47 = *(atomic_uint **)(v6 + 24);
    if (v47) {
      atomic_fetch_add(v47, 1u);
    }
    uint64_t v71 = (WTF *)v47;
    uint64_t v48 = WTF::fastMalloc((WTF *)0x60);
    *(void *)uint64_t v48 = &unk_1EE9CB6F0;
    *(unsigned char *)(v48 + 8) = 0;
    *(_DWORD *)(v48 + 3objc_destroyWeak(this + 2) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v48 + 8, (uint64_t)&v64);
    *(unsigned char *)(v48 + 40) = 0;
    *(_DWORD *)(v48 + 64) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v48 + 40, (uint64_t)v67);
    *(void *)(v48 + 7objc_destroyWeak(this + 2) = v69;
    uint64_t v49 = v70;
    uint64_t v69 = 0;
    char v70 = 0;
    *(void *)(v48 + 80) = v49;
    long long v50 = v71;
    uint64_t v71 = 0;
    *(void *)(v48 + 88) = v50;
    uint64_t v51 = *(void *)(v6 + 24);
    if (v51) {
      uint64_t v52 = *(void *)(v51 + 8);
    }
    else {
      uint64_t v52 = 0;
    }
    int v53 = WTF::fastMalloc((WTF *)0x10);
    *(void *)int v53 = &unk_1EE9CB790;
    *(void *)(v53 + 8) = v48;
    int v61 = (WTF::StringImpl **)v53;
    WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v52, a2, (uint64_t *)&v61);
    unsigned int v55 = v61;
    int v61 = 0;
    if (v55) {
      (*((void (**)(WTF::StringImpl **))*v55 + 1))(v55);
    }
    long long v56 = (unsigned int *)v71;
    uint64_t v71 = 0;
    if (v56 && atomic_fetch_add((atomic_uint *volatile)v56, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v56);
      WTF::fastFree((WTF *)v56, v54);
    }
    long long v57 = v70;
    char v70 = 0;
    if (v57)
    {
      if (v57[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v57 + 8))(v57);
      }
      else {
        --v57[2];
      }
    }
    double result = (unsigned int *)v69;
    uint64_t v69 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      double result = (unsigned int *)WTF::fastFree((WTF *)result, v54);
    }
    if (v68 != -1) {
      double result = (unsigned int *)((uint64_t (*)(WTF::StringImpl ***, unsigned char *))off_1EE9CAE38[v68])(&v61, v67);
    }
    uint64_t v68 = -1;
    if (v66 != -1) {
      return (unsigned int *)((uint64_t (*)(WTF::StringImpl ***, WTF::StringImpl ***))off_1EE9CAE38[v66])(&v61, &v64);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::BackgroundFetchStoreImpl::clearFetch(uint64_t a1, WTF::StringImpl **this, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 && *(void *)(v5 + 8))
  {
    WebCore::ServiceWorkerRegistrationKey::clientOrigin(v55, (WebCore::ServiceWorkerRegistrationKey *)this);
    uint64_t v9 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 32), (uint64_t)v55);
    uint64_t v12 = *(void *)(a1 + 32);
    if (v12) {
      v12 += 88 * *(unsigned int *)(v12 - 4);
    }
    if (v12 == v9)
    {
      uint64_t v32 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
      double result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v32 + 8))(v32);
LABEL_64:
      if (v58 != -1) {
        double result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1EE9CAE38[v58])(&v52, &v57);
      }
      int v58 = -1;
      if (v56 != -1) {
        return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1EE9CAE38[v56])(&v52, v55);
      }
      return result;
    }
    uint64_t v13 = this[4];
    if (v13) {
      *(_DWORD *)v13 += 2;
    }
    uint64_t v14 = (uint64_t *)(v9 + 64);
    uint64_t v52 = v13;
    int v15 = *a3;
    if (*a3) {
      *(_DWORD *)v15 += 2;
    }
    int v53 = v15;
    uint64_t v16 = *v14;
    if (!*v14) {
      goto LABEL_28;
    }
    int v17 = *(_DWORD *)(v16 - 8);
    unsigned int v18 = WTF::PairHash<WTF::String,WTF::String>::hash(&v52) & v17;
    char v19 = (WTF **)(v16 + 24 * v18);
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v19, v20, v21))
    {
LABEL_16:
      uint64_t v23 = *v14;
      if (!*v14) {
        goto LABEL_28;
      }
      char v19 = (WTF **)(v23 + 24 * *(unsigned int *)(v23 - 4));
    }
    else
    {
      int v22 = 1;
      while (*v19 == (WTF *)-1 || (WTF::PairHash<WTF::String,WTF::String>::equal(v19, &v52, v11) & 1) == 0)
      {
        unsigned int v18 = (v18 + v22) & v17;
        char v19 = (WTF **)(v16 + 24 * v18);
        ++v22;
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v19, (uint64_t)v10, v11))goto LABEL_16; {
      }
        }
      uint64_t v23 = *v14;
      if (!*v14)
      {
LABEL_19:
        if ((WTF **)v23 != v19)
        {
          long long v24 = v19[2];
          _OWORD v19[2] = 0;
          uint64_t v51 = v24;
          uint64_t v25 = *v14;
          if (!*v14 || (v25 += 24 * *(unsigned int *)(v25 - 4), (WTF **)v25 != v19))
          {
            if ((WTF **)v25 != v19)
            {
              WTF::KeyValuePairHashTraits<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>>::customDeleteBucket(v19, v10);
              ++*(_DWORD *)(*v14 - 16);
              uint64_t v26 = *v14;
              int v27 = *v14 ? *(_DWORD *)(v26 - 12) - 1 : -1;
              *(_DWORD *)(v26 - 1objc_destroyWeak(this + 2) = v27;
              uint64_t v47 = *v14;
              if (*v14)
              {
                unsigned int v48 = 6 * *(_DWORD *)(v47 - 12);
                unsigned int v49 = *(_DWORD *)(v47 - 4);
                if (v48 < v49 && v49 >= 9) {
                  WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::rehash(v14, v49 >> 1);
                }
              }
            }
          }
LABEL_29:
          uint64_t v31 = v53;
          int v53 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2) {
              WTF::StringImpl::destroy(v31, v10);
            }
            else {
              *(_DWORD *)v31 -= 2;
            }
          }
          uint64_t v33 = v52;
          uint64_t v52 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
            {
              WTF::StringImpl::destroy(v33, v10);
              if (!v24) {
                goto LABEL_44;
              }
              goto LABEL_40;
            }
            *(_DWORD *)v33 -= 2;
          }
          if (!v24) {
            goto LABEL_44;
          }
LABEL_40:
          if (*((_DWORD *)v24 + 1))
          {
            uint64_t v34 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 40), &v51, v11);
            uint64_t v35 = *(void *)(a1 + 40);
            if (v35)
            {
              uint64_t v36 = v35 + 88 * *(unsigned int *)(v35 - 4);
              if (v36 == v34) {
                goto LABEL_49;
              }
            }
            else
            {
              if (!v34)
              {
LABEL_49:
                ++*(_DWORD *)(a1 + 8);
                *(_DWORD *)v24 += 2;
                uint64_t v39 = *a4;
                *a4 = 0;
                uint64_t v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
                *(void *)uint64_t v40 = &unk_1EE9CB830;
                *((void *)v40 + objc_destroyWeak(this + 1) = a1;
                *((void *)v40 + objc_destroyWeak(this + 2) = v24;
                *((void *)v40 + 3) = v39;
                uint64_t v41 = *(void *)(a1 + 24);
                if (v41) {
                  uint64_t v42 = *(void *)(v41 + 8);
                }
                else {
                  uint64_t v42 = 0;
                }
                WTF::String::isolatedCopy();
                int v53 = v40;
                int v43 = (void *)WTF::fastMalloc((WTF *)0x18);
                void *v43 = &unk_1EE9CB858;
                v43[1] = v52;
                uint64_t v44 = v53;
                uint64_t v52 = 0;
                int v53 = 0;
                v43[2] = v44;
                long long v54 = v43;
                WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v42, (uint64_t)v55, (uint64_t *)&v54);
                uint64_t v45 = (uint64_t)v54;
                long long v54 = 0;
                if (v45) {
                  (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
                }
                unsigned int v46 = v53;
                int v53 = 0;
                if (v46) {
                  (*(void (**)(WTF::StringImpl *))(*(void *)v46 + 8))(v46);
                }
                double result = v52;
                uint64_t v52 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2) {
                    double result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
                  }
                  else {
                    *(_DWORD *)result -= 2;
                  }
                }
                long long v24 = v51;
                goto LABEL_60;
              }
              uint64_t v36 = 0;
            }
            if (v36 != v34) {
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(a1 + 40), v34);
            }
            goto LABEL_49;
          }
LABEL_44:
          uint64_t v37 = *a4;
          *a4 = 0;
          (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
          double result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v37 + 8))(v37);
LABEL_60:
          uint64_t v51 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              double result = (WTF::StringImpl *)WTF::StringImpl::destroy(v24, v38);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          goto LABEL_64;
        }
LABEL_28:
        long long v24 = 0;
        uint64_t v51 = 0;
        goto LABEL_29;
      }
    }
    v23 += 24 * *(unsigned int *)(v23 - 4);
    goto LABEL_19;
  }
  uint64_t v28 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v28 + 16))(v28, this);
  int v29 = *(uint64_t (**)(uint64_t))(*(void *)v28 + 8);

  return (WTF::StringImpl *)v29(v28);
}

uint64_t WebKit::BackgroundFetchStoreImpl::clearAllFetches(uint64_t a1, const WTF::StringImpl **this, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4 || !*(void *)(v4 + 8))
  {
    uint64_t v27 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, const WTF::StringImpl **))(*(void *)v27 + 16))(v27, this);
    uint64_t v28 = *(uint64_t (**)(uint64_t))(*(void *)v27 + 8);
    return v28(v27);
  }
  WebCore::ServiceWorkerRegistrationKey::clientOrigin(v72, (WebCore::ServiceWorkerRegistrationKey *)this);
  uint64_t v7 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 32), (uint64_t)v72);
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    v10 += 88 * *(unsigned int *)(v10 - 4);
  }
  if (v10 == v7)
  {
    uint64_t v30 = *v3;
    *uint64_t v3 = 0;
    (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 8))(v30);
    goto LABEL_67;
  }
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v13 = *(void *)(v7 + 64);
  uint64_t v11 = (uint64_t *)(v7 + 64);
  uint64_t v12 = v13;
  if (!v13) {
    goto LABEL_54;
  }
  int v14 = *(_DWORD *)(v12 - 4);
  if (!v14) {
    goto LABEL_54;
  }
  uint64_t v60 = v3;
  int v61 = v11;
  int v15 = 0;
  uint64_t v16 = (void *)(a1 + 40);
  unsigned int v17 = v14 - 1;
  do
  {
    uint64_t v18 = v17;
    char v19 = (WTF **)(v12 + 24 * v17);
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v19, v8, v9) & 1) == 0&& *v19 != (WTF *)-1&& WTF::equal(*v19, this[4], v9))
    {
      uint64_t v20 = (_DWORD **)(v12 + 24 * v17 + 16);
      uint64_t v21 = HIDWORD(v67);
      if (HIDWORD(v67) == v67)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v66, v12 + 24 * v17 + 16);
      }
      else
      {
        uint64_t v22 = v66;
        uint64_t v23 = *v20;
        if (*v20) {
          *v23 += 2;
        }
        *(void *)(v22 + 8 * v2objc_destroyWeak(this + 1) = v23;
        HIDWORD(v67) = v21 + 1;
      }
      uint64_t v24 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 40), (WTF::StringImpl **)(v12 + 24 * v17 + 16), v9);
      uint64_t v25 = (WTF::StringImpl *)v24;
      if (*v16)
      {
        uint64_t v26 = *v16 + 88 * *(unsigned int *)(*v16 - 4);
        if (v26 == v24) {
          goto LABEL_23;
        }
      }
      else
      {
        if (!v24)
        {
LABEL_23:
          WTF::KeyValuePairHashTraits<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>>::customDeleteBucket((WTF::StringImpl **)(v12 + 24 * v17), v25);
          ++v15;
          goto LABEL_24;
        }
        uint64_t v26 = 0;
      }
      if (v26 != v24) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(a1 + 40), v24);
      }
      goto LABEL_23;
    }
LABEL_24:
    --v17;
  }
  while (v18);
  uint64_t v31 = *v61;
  if (v15)
  {
    *(_DWORD *)(v31 - 16) += v15;
    uint64_t v32 = *v61;
    if (*v61) {
      int v33 = *(_DWORD *)(v32 - 12);
    }
    else {
      int v33 = 0;
    }
    uint64_t v3 = v60;
    *(_DWORD *)(v32 - 1objc_destroyWeak(this + 2) = v33 - v15;
    uint64_t v31 = *v61;
  }
  else
  {
    uint64_t v3 = v60;
  }
  if (v31)
  {
    unsigned int v34 = *(_DWORD *)(v31 - 4);
    uint64_t v35 = *(unsigned int *)(v31 - 12);
    if (v34 >= 9 && 6 * (int)v35 < v34)
    {
      unsigned int v37 = (v35 - 1) | ((v35 - 1) >> 1) | (((v35 - 1) | ((v35 - 1) >> 1)) >> 2);
      unsigned int v38 = v37 | (v37 >> 4) | ((v37 | (v37 >> 4)) >> 8);
      unint64_t v39 = (v38 | HIWORD(v38)) + 1;
      if (v39 > 0x400)
      {
        if (v39 <= 2 * v35)
        {
LABEL_44:
          LODWORD(v39) = 2 * v39;
          if (v39 <= 0x400) {
            goto LABEL_45;
          }
        }
        double v40 = (double)v35;
        double v41 = (double)v39;
        double v42 = 0.416666667;
      }
      else
      {
        if (3 * v39 <= 4 * v35) {
          goto LABEL_44;
        }
LABEL_45:
        double v40 = (double)v35;
        double v41 = (double)v39;
        double v42 = 0.604166667;
      }
      if (v41 * v42 <= v40) {
        LODWORD(v39) = 2 * v39;
      }
      if (v39 <= 8) {
        unsigned int v43 = 8;
      }
      else {
        unsigned int v43 = v39;
      }
      WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::rehash(v61, v43);
    }
  }
LABEL_54:
  ++*(_DWORD *)(a1 + 8);
  uint64_t v62 = (_DWORD *)a1;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v63, (uint64_t)&v66);
  uint64_t v44 = *v3;
  *uint64_t v3 = 0;
  uint64_t v65 = v44;
  uint64_t v45 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v45 = &unk_1EE9CB8A8;
  v45[1] = v62;
  uint64_t v46 = v63;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  v45[2] = v46;
  v45[3] = v64;
  uint64_t v47 = v65;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  v45[4] = v47;
  uint64_t v48 = *(void *)(a1 + 24);
  if (v48) {
    uint64_t v49 = *(void *)(v48 + 8);
  }
  else {
    uint64_t v49 = 0;
  }
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS6_EUlRT_E_S6_S9_vE3mapERS6_S9_RKSC_((uint64_t)&v68, &v66);
  char v70 = v45;
  long long v50 = (void *)WTF::fastMalloc((WTF *)0x20);
  *long long v50 = &unk_1EE9CB8D0;
  v50[1] = v68;
  uint64_t v51 = v69;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  v50[2] = v51;
  uint64_t v52 = v70;
  char v70 = 0;
  uint64_t v71 = v50;
  v50[3] = v52;
  WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v49, (uint64_t)v72, (uint64_t *)&v71);
  uint64_t v54 = (uint64_t)v71;
  uint64_t v71 = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  unsigned int v55 = v70;
  char v70 = 0;
  if (v55) {
    (*(void (**)(void *))(*v55 + 8))(v55);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v53);
  uint64_t v57 = v65;
  uint64_t v65 = 0;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v56);
  uint64_t v59 = v62;
  uint64_t v62 = 0;
  if (v59)
  {
    if (v59[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v59 + 8))(v59);
    }
    else {
      --v59[2];
    }
  }
  uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v58);
LABEL_67:
  if (v75 != -1) {
    uint64_t result = ((uint64_t (*)(_DWORD **, uint64_t *))off_1EE9CAE38[v75])(&v62, &v74);
  }
  int v75 = -1;
  if (v73 != -1) {
    return ((uint64_t (*)(_DWORD **, uint64_t *))off_1EE9CAE38[v73])(&v62, v72);
  }
  return result;
}

WTF::StringImpl *WebKit::BackgroundFetchStoreImpl::storeFetch(uint64_t a1, WebCore::ServiceWorkerRegistrationKey *this, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9 && *(void *)(v9 + 8))
  {
    WebCore::ServiceWorkerRegistrationKey::clientOrigin(v84, this);
    uint64_t v18 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 32), (uint64_t)v84);
    uint64_t v19 = *(void *)(a1 + 32);
    if (v19) {
      v19 += 88 * *(unsigned int *)(v19 - 4);
    }
    if (v19 == v18)
    {
      uint64_t v27 = *a9;
      *a9 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, 2);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
    else
    {
      uint64_t v20 = (WTF::StringImpl *)*((void *)this + 4);
      if (v20) {
        *(_DWORD *)v20 += 2;
      }
      char v70 = v20;
      uint64_t v21 = *a3;
      if (*a3) {
        *(_DWORD *)v21 += 2;
      }
      v71[0] = v21;
      WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>>,std::pair<WTF::String,WTF::String>>((uint64_t)&v63, *(void *)(v18 + 64), &v70);
      uint64_t v23 = v71[0];
      v71[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v22);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      uint64_t v28 = v70;
      char v70 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          uint64_t v28 = (WTF::StringImpl *)WTF::StringImpl::destroy(v28, v22);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
      uint64_t v59 = a3;
      *(void *)&long long v60 = a4;
      char v61 = a7;
      uint64_t v62 = a8;
      int v29 = v63;
      *((void *)&v60 + objc_destroyWeak(this + 1) = a5;
      if (v63 && *((_DWORD *)v63 + 1))
      {
        char v30 = 0;
      }
      else
      {
        WebKit::BackgroundFetchStoreManager::createNewStorageIdentifier(v28, &v70);
        uint64_t v32 = v70;
        char v70 = 0;
        uint64_t v63 = v32;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
          {
            WTF::StringImpl::destroy(v29, v31);
            unsigned int v34 = v70;
            char v70 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2) {
                WTF::StringImpl::destroy(v34, v33);
              }
              else {
                *(_DWORD *)v34 -= 2;
              }
            }
          }
          else
          {
            *(_DWORD *)v29 -= 2;
          }
        }
        char v30 = 1;
        int v29 = v32;
      }
      ++*(_DWORD *)(a1 + 8);
      char v70 = (WTF::StringImpl *)a1;
      LOBYTE(v71[0]) = 0;
      int v72 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v71, (uint64_t)v84);
      v73[0] = 0;
      int v74 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v73, (uint64_t)v86);
      v75[0] = 0;
      int v76 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v75, (uint64_t)this);
      uint64_t v35 = (_DWORD *)*((void *)this + 4);
      if (v35) {
        *v35 += 2;
      }
      uint64_t v77 = v35;
      long long v36 = *(_OWORD *)((char *)this + 56);
      long long v78 = *(_OWORD *)((char *)this + 40);
      long long v79 = v36;
      unsigned int v37 = *v59;
      if (*v59) {
        *(_DWORD *)v37 += 2;
      }
      int v80 = v37;
      if (v29) {
        *(_DWORD *)v29 += 2;
      }
      long long v81 = v29;
      char v82 = v30;
      uint64_t v38 = *a9;
      *a9 = 0;
      uint64_t v83 = v38;
      uint64_t v39 = WTF::fastMalloc((WTF *)0xB8);
      *(void *)uint64_t v39 = &unk_1EE9CB920;
      double v40 = v70;
      char v70 = 0;
      *(void *)(v39 + 8) = v40;
      *(unsigned char *)(v39 + 16) = 0;
      *(_DWORD *)(v39 + 40) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v39 + 16, (uint64_t)v71);
      *(unsigned char *)(v39 + 48) = 0;
      *(_DWORD *)(v39 + 7objc_destroyWeak(this + 2) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v39 + 48, (uint64_t)v73);
      *(unsigned char *)(v39 + 80) = 0;
      *(_DWORD *)(v39 + 104) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v39 + 80, (uint64_t)v75);
      double v41 = v77;
      if (v77) {
        *v77 += 2;
      }
      *(void *)(v39 + 11objc_destroyWeak(this + 2) = v41;
      long long v42 = v78;
      *(_OWORD *)(v39 + 136) = v79;
      *(_OWORD *)(v39 + 120) = v42;
      unsigned int v43 = v80;
      if (v80) {
        *(_DWORD *)v80 += 2;
      }
      *(void *)(v39 + 15objc_destroyWeak(this + 2) = v43;
      *(void *)(v39 + 160) = v81;
      *(unsigned char *)(v39 + 168) = v82;
      uint64_t v44 = v83;
      long long v81 = 0;
      uint64_t v83 = 0;
      *(void *)(v39 + 176) = v44;
      uint64_t v45 = *(void *)(a1 + 24);
      if (v45) {
        uint64_t v46 = *(void *)(v45 + 8);
      }
      else {
        uint64_t v46 = 0;
      }
      WTF::String::isolatedCopy();
      *(_OWORD *)uint64_t v65 = v60;
      *(void *)&v65[16] = a6;
      v65[24] = v61;
      uint64_t v47 = *(WTF **)v62;
      *(void *)uint64_t v62 = 0;
      uint64_t v66 = v47;
      uint64_t v48 = *(void *)(v62 + 8);
      *(void *)(v62 + 8) = 0;
      uint64_t v67 = v48;
      uint64_t v68 = v39;
      uint64_t v49 = WTF::fastMalloc((WTF *)0x48);
      *(void *)uint64_t v49 = &unk_1EE9CB948;
      *(void *)(v49 + 8) = v64;
      long long v50 = *(_OWORD *)v65;
      *(_OWORD *)(v49 + 25) = *(_OWORD *)&v65[9];
      *(_OWORD *)(v49 + 16) = v50;
      uint64_t v51 = v66;
      uint64_t v64 = 0;
      uint64_t v66 = 0;
      *(void *)(v49 + 48) = v51;
      *(void *)&long long v50 = v67;
      uint64_t v67 = 0;
      *(void *)(v49 + 56) = v50;
      uint64_t v52 = v68;
      uint64_t v68 = 0;
      uint64_t v69 = v49;
      *(void *)(v49 + 64) = v52;
      WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v46, (uint64_t)v84, &v69);
      uint64_t v54 = v69;
      uint64_t v69 = 0;
      if (v54) {
        (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
      }
      uint64_t v55 = v68;
      uint64_t v68 = 0;
      if (v55) {
        (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
      }
      int v56 = v66;
      if (v66)
      {
        uint64_t v66 = 0;
        LODWORD(v67) = 0;
        WTF::fastFree(v56, v53);
      }
      uint64_t v57 = v64;
      uint64_t v64 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2) {
          WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v53);
        }
        else {
          *(_DWORD *)v57 -= 2;
        }
      }
      WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::~$_0((uint64_t)&v70, (WTF::StringImpl *)v53);
      uint64_t result = v63;
      uint64_t v63 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v58);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (v87 != -1) {
      uint64_t result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1EE9CAE38[v87])(&v70, v86);
    }
    int v87 = -1;
    if (v85 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1EE9CAE38[v85])(&v70, v84);
    }
  }
  else
  {
    uint64_t v24 = *a9;
    *a9 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, 2);
    uint64_t v25 = *(uint64_t (**)(uint64_t))(*(void *)v24 + 8);
    return (WTF::StringImpl *)v25(v24);
  }
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 152);
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(unsigned int *)(a1 + 96);
  if (v7 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CAE38[v7])(&v12, a1 + 72);
  }
  *(_DWORD *)(a1 + 96) = -1;
  uint64_t v8 = *(unsigned int *)(a1 + 64);
  if (v8 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CAE38[v8])(&v13, a1 + 40);
  }
  *(_DWORD *)(a1 + 64) = -1;
  uint64_t v9 = *(unsigned int *)(a1 + 32);
  if (v9 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CAE38[v9])(&v14, a1 + 8);
  }
  *(_DWORD *)(a1 + 3objc_destroyWeak(this + 2) = -1;
  uint64_t v10 = *(_DWORD **)a1;
  *(void *)a1 = 0;
  if (v10)
  {
    if (v10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
    }
    else {
      --v10[2];
    }
  }
  return a1;
}

WTF::StringImpl *WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunk(uint64_t a1, WTF::StringImpl **this, WTF::StringImpl **a3, WTF::StringImpl *a4, WTF::StringImpl *a5, uint64_t *a6)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7 && *(void *)(v7 + 8))
  {
    WebCore::ServiceWorkerRegistrationKey::clientOrigin(v41, (WebCore::ServiceWorkerRegistrationKey *)this);
    uint64_t v13 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 32), (uint64_t)v41);
    uint64_t v14 = *(void *)(a1 + 32);
    if (v14) {
      v14 += 88 * *(unsigned int *)(v14 - 4);
    }
    if (v14 == v13)
    {
      uint64_t v22 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, 2);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    else
    {
      int v15 = this[4];
      if (v15) {
        *(_DWORD *)v15 += 2;
      }
      unsigned int v37 = v15;
      uint64_t v16 = *a3;
      if (*a3) {
        *(_DWORD *)v16 += 2;
      }
      v38[0] = v16;
      WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>>,std::pair<WTF::String,WTF::String>>((uint64_t)&v36, *(void *)(v13 + 64), &v37);
      uint64_t v18 = v38[0];
      v38[0] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v17);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      uint64_t v23 = v37;
      unsigned int v37 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v17);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      uint64_t v24 = v36;
      if (v36 && *((_DWORD *)v36 + 1))
      {
        ++*(_DWORD *)(a1 + 8);
        *(_DWORD *)v24 += 2;
        uint64_t v25 = *a6;
        *a6 = 0;
        uint64_t v26 = (void *)WTF::fastMalloc((WTF *)0x20);
        void *v26 = &unk_1EE9CB9E8;
        v26[1] = a1;
        v26[2] = v24;
        v26[3] = v25;
        uint64_t v27 = *(void *)(a1 + 24);
        if (v27) {
          uint64_t v28 = *(void *)(v27 + 8);
        }
        else {
          uint64_t v28 = 0;
        }
        WTF::String::isolatedCopy();
        v38[0] = a4;
        v38[1] = a5;
        atomic_fetch_add((atomic_uint *volatile)a5, 1u);
        uint64_t v39 = v26;
        uint64_t v29 = WTF::fastMalloc((WTF *)0x28);
        *(void *)uint64_t v29 = &unk_1EE9CBA10;
        *(void *)(v29 + 8) = v37;
        *(_OWORD *)(v29 + 16) = *(_OWORD *)v38;
        char v30 = v39;
        unsigned int v37 = 0;
        v38[1] = 0;
        uint64_t v39 = 0;
        *(void *)(v29 + 3objc_destroyWeak(this + 2) = v30;
        uint64_t v40 = v29;
        WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v28, (uint64_t)v41, &v40);
        uint64_t v32 = v40;
        uint64_t v40 = 0;
        if (v32) {
          (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
        }
        int v33 = v39;
        uint64_t v39 = 0;
        if (v33) {
          (*(void (**)(void *))(*v33 + 8))(v33);
        }
        unsigned int v34 = (unsigned int *)v38[1];
        v38[1] = 0;
        if (v34) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v34, v31);
        }
        uint64_t result = v37;
        unsigned int v37 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v31);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        uint64_t v24 = v36;
      }
      else
      {
        uint64_t v35 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, 2);
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
      long long v36 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v31);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
    }
    if (v44 != -1) {
      uint64_t result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1EE9CAE38[v44])(&v37, &v43);
    }
    int v44 = -1;
    if (v42 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1EE9CAE38[v42])(&v37, v41);
    }
  }
  else
  {
    uint64_t v19 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, 2);
    uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)v19 + 8);
    return (WTF::StringImpl *)v20(v19);
  }
  return result;
}

WTF::StringImpl *WebKit::BackgroundFetchStoreImpl::retrieveResponseBody(uint64_t a1, WTF::StringImpl **this, WTF::StringImpl **a3, WTF::StringImpl *a4, void *a5)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6 || !*(void *)(v6 + 8))
  {
    uint64_t v17 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
    if (v17)
    {
      if (v17 == 1)
      {
        uint64_t v18 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v18 = v57[0];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    int v53 = 0;
    WTF::URL::invalidate((WTF::URL *)&v53);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v19 = v57[0];
    if (v18) {
      *(_DWORD *)v18 += 2;
    }
    uint64_t v20 = v53;
    if (v53) {
      *(_DWORD *)v53 += 2;
    }
    long long v21 = v54;
    long long v22 = v55;
    if (v19) {
      *(_DWORD *)v19 += 2;
    }
    v57[0] = v18;
    v57[1] = v20;
    long long v58 = v21;
    long long v59 = v22;
    long long v60 = v19;
    int v61 = 0;
    __int16 v62 = 1;
    uint64_t v63 = 0;
    char v64 = 1;
    int v65 = 1;
    (*(void (**)(void, WTF::StringImpl **))(*(void *)*a5 + 16))(*a5, v57);
    if (v65 != -1) {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9CB040[v65])(&v49, v57);
    }
    int v65 = -1;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v23);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t result = v53;
    int v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
        if (!v18) {
          return result;
        }
        goto LABEL_48;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v18) {
      return result;
    }
LABEL_48:
    if (*(_DWORD *)v18 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v18, v23);
    }
    *(_DWORD *)v18 -= 2;
    return result;
  }
  WebCore::ServiceWorkerRegistrationKey::clientOrigin((uint64_t *)&v53, (WebCore::ServiceWorkerRegistrationKey *)this);
  uint64_t v11 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 32), (uint64_t)&v53);
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12) {
    v12 += 88 * *(unsigned int *)(v12 - 4);
  }
  if (v12 != v11)
  {
    uint64_t v13 = this[4];
    if (v13) {
      *(_DWORD *)v13 += 2;
    }
    v57[0] = v13;
    uint64_t v14 = *a3;
    if (*a3) {
      *(_DWORD *)v14 += 2;
    }
    v57[1] = v14;
    WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>>,std::pair<WTF::String,WTF::String>>((uint64_t)&v48, *(void *)(v11 + 64), v57);
    uint64_t v16 = v57[1];
    v57[1] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v32 = v57[0];
    v57[0] = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v15);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    if (v48 && *((_DWORD *)v48 + 1))
    {
      uint64_t v33 = *(void *)(a1 + 24);
      if (v33) {
        uint64_t v34 = *(void *)(v33 + 8);
      }
      else {
        uint64_t v34 = 0;
      }
      WTF::String::isolatedCopy();
      uint64_t v35 = *a5;
      *a5 = 0;
      v57[1] = a4;
      *(void *)&long long v58 = v35;
      uint64_t v36 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v36 = &unk_1EE9CBAB0;
      *(_OWORD *)(v36 + 8) = *(_OWORD *)v57;
      uint64_t v37 = v58;
      v57[0] = 0;
      *(void *)&long long v58 = 0;
      *(void *)(v36 + 24) = v37;
      uint64_t v49 = (WTF::StringImpl *)v36;
      WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v34, (uint64_t)&v53, (uint64_t *)&v49);
      uint64_t v38 = v49;
      uint64_t v49 = 0;
      if (v38) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v38 + 8))(v38);
      }
      uint64_t v39 = v58;
      *(void *)&long long v58 = 0;
      if (v39) {
        (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
      }
      uint64_t v40 = v57[0];
      v57[0] = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 != 2)
        {
          *(_DWORD *)v40 -= 2;
          goto LABEL_102;
        }
LABEL_101:
        WTF::StringImpl::destroy(v40, v30);
      }
LABEL_102:
      uint64_t result = v48;
      uint64_t v48 = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          goto LABEL_106;
        }
LABEL_105:
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
        goto LABEL_106;
      }
      goto LABEL_106;
    }
    uint64_t v41 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
    if (v41)
    {
      if (v41 == 1)
      {
        int v42 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        int v42 = v57[0];
      }
    }
    else
    {
      int v42 = 0;
    }
    uint64_t v49 = 0;
    WTF::URL::invalidate((WTF::URL *)&v49);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v43 = v57[0];
    if (v42) {
      *(_DWORD *)v42 += 2;
    }
    int v44 = v49;
    if (v49) {
      *(_DWORD *)v49 += 2;
    }
    long long v45 = v50;
    long long v46 = v51;
    if (v43) {
      *(_DWORD *)v43 += 2;
    }
    v57[0] = v42;
    v57[1] = v44;
    long long v58 = v45;
    long long v59 = v46;
    long long v60 = v43;
    int v61 = 0;
    __int16 v62 = 1;
    uint64_t v63 = 0;
    char v64 = 1;
    int v65 = 1;
    (*(void (**)(void, WTF::StringImpl **))(*(void *)*a5 + 16))(*a5, v57);
    if (v65 != -1) {
      ((void (*)(char *, WTF::StringImpl **))off_1EE9CB040[v65])(&v52, v57);
    }
    int v65 = -1;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, v30);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
    uint64_t v47 = v49;
    uint64_t v49 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::destroy(v47, v30);
        if (!v42) {
          goto LABEL_102;
        }
        goto LABEL_98;
      }
      *(_DWORD *)v47 -= 2;
    }
    if (!v42) {
      goto LABEL_102;
    }
LABEL_98:
    if (*(_DWORD *)v42 != 2)
    {
      *(_DWORD *)v42 -= 2;
      goto LABEL_102;
    }
    uint64_t v40 = v42;
    goto LABEL_101;
  }
  uint64_t v24 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
  if (v24)
  {
    if (v24 == 1)
    {
      uint64_t v25 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v25 = v57[0];
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  uint64_t v49 = 0;
  WTF::URL::invalidate((WTF::URL *)&v49);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v26 = v57[0];
  if (v25) {
    *(_DWORD *)v25 += 2;
  }
  uint64_t v27 = v49;
  if (v49) {
    *(_DWORD *)v49 += 2;
  }
  long long v28 = v50;
  long long v29 = v51;
  if (v26) {
    *(_DWORD *)v26 += 2;
  }
  v57[0] = v25;
  v57[1] = v27;
  long long v58 = v28;
  long long v59 = v29;
  long long v60 = v26;
  int v61 = 0;
  __int16 v62 = 1;
  uint64_t v63 = 0;
  char v64 = 1;
  int v65 = 1;
  (*(void (**)(void, WTF::StringImpl **))(*(void *)*a5 + 16))(*a5, v57);
  if (v65 != -1) {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9CB040[v65])(&v48, v57);
  }
  int v65 = -1;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v30);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t result = v49;
  uint64_t v49 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
      if (!v25) {
        goto LABEL_106;
      }
      goto LABEL_88;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v25) {
    goto LABEL_106;
  }
LABEL_88:
  if (*(_DWORD *)v25 == 2)
  {
    uint64_t result = v25;
    goto LABEL_105;
  }
  *(_DWORD *)v25 -= 2;
LABEL_106:
  if (v56 != -1) {
    uint64_t result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, char *))off_1EE9CAE38[v56])(v57, (char *)&v55 + 8);
  }
  int v56 = -1;
  if (v55 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9CAE38[v55])(v57, &v53);
  }
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  ++*(_DWORD *)(a1 + 8);
  uint64_t v4 = *a2;
  if (*a2) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v6 = &unk_1EE9CBB50;
  v6[1] = a1;
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  void v6[2] = v4;
  uint64_t v6[3] = v5;
  uint64_t v9 = v6;
  WebKit::BackgroundFetchStoreImpl::loadAllFetches(a1, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    uint64_t result = (*(uint64_t (**)(void *))(*v9 + 8))(v9);
    if (!v4) {
      return result;
    }
  }
  else if (!v4)
  {
    return result;
  }
  if (*(_DWORD *)v4 == 2)
  {
    return WTF::StringImpl::destroy(v4, v7);
  }
  else
  {
    *(_DWORD *)v4 -= 2;
  }
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::loadAllFetches(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2 && *(void *)(v2 + 8))
  {
    ++*(_DWORD *)(a1 + 8);
    uint64_t v4 = *a2;
    *a2 = 0;
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v5 = &unk_1EE9CBB78;
    v5[1] = a1;
    v5[2] = v4;
    uint64_t v9 = v5;
    WebCore::SWServer::getAllOrigins();
    uint64_t result = (uint64_t)v9;
    if (v9) {
      return (*(uint64_t (**)(void *))(*v9 + 8))(v9);
    }
  }
  else
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::getAllBackgroundFetchIdentifiers(uint64_t a1, uint64_t *a2)
{
  ++*(_DWORD *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v4 = &unk_1EE9CBBC8;
  v4[1] = a1;
  void v4[2] = v3;
  uint64_t v7 = v4;
  WebKit::BackgroundFetchStoreImpl::loadAllFetches(a1, (uint64_t *)&v7);
  uint64_t result = (uint64_t)v7;
  if (v7)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*v7 + 8);
    return v6();
  }
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::getBackgroundFetchState(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    uint64_t v7 = *(WebCore::SWServer **)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  Engine = (unsigned int *)WebCore::SWServer::backgroundFetchEngine(v7);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Engine, (uint64_t)Engine);
  uint64_t v9 = *(atomic_uint **)Engine;
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  uint64_t v10 = *a3;
  *a3 = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v11 = &unk_1EE9CBBF0;
  v11[1] = v9;
  void v11[2] = v10;
  uint64_t v14 = v11;
  WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(a1, a2, (uint64_t *)&v14);
  uint64_t result = (uint64_t)v14;
  if (v14)
  {
    uint64_t v13 = *(uint64_t (**)(void))(*v14 + 8);
    return v13();
  }
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::abortBackgroundFetch(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    uint64_t v7 = *(WebCore::SWServer **)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  Engine = (unsigned int *)WebCore::SWServer::backgroundFetchEngine(v7);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Engine, (uint64_t)Engine);
  uint64_t v9 = *(atomic_uint **)Engine;
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  uint64_t v10 = *a3;
  *a3 = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v11 = &unk_1EE9CBC18;
  v11[1] = v9;
  void v11[2] = v10;
  uint64_t v14 = v11;
  WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(a1, a2, (uint64_t *)&v14);
  uint64_t result = (uint64_t)v14;
  if (v14)
  {
    uint64_t v13 = *(uint64_t (**)(void))(*v14 + 8);
    return v13();
  }
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::pauseBackgroundFetch(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    uint64_t v7 = *(WebCore::SWServer **)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  Engine = (unsigned int *)WebCore::SWServer::backgroundFetchEngine(v7);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Engine, (uint64_t)Engine);
  uint64_t v9 = *(atomic_uint **)Engine;
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  uint64_t v10 = *a3;
  *a3 = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v11 = &unk_1EE9CBC40;
  v11[1] = v9;
  void v11[2] = v10;
  uint64_t v14 = v11;
  WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(a1, a2, (uint64_t *)&v14);
  uint64_t result = (uint64_t)v14;
  if (v14)
  {
    uint64_t v13 = *(uint64_t (**)(void))(*v14 + 8);
    return v13();
  }
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::resumeBackgroundFetch(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    uint64_t v7 = *(WebCore::SWServer **)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  Engine = (unsigned int *)WebCore::SWServer::backgroundFetchEngine(v7);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Engine, (uint64_t)Engine);
  uint64_t v9 = *(atomic_uint **)Engine;
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  uint64_t v10 = *a3;
  *a3 = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v11 = &unk_1EE9CBC68;
  v11[1] = v9;
  void v11[2] = v10;
  uint64_t v14 = v11;
  WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(a1, a2, (uint64_t *)&v14);
  uint64_t result = (uint64_t)v14;
  if (v14)
  {
    uint64_t v13 = *(uint64_t (**)(void))(*v14 + 8);
    return v13();
  }
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::clickBackgroundFetch(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    uint64_t v7 = *(WebCore::SWServer **)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  Engine = (unsigned int *)WebCore::SWServer::backgroundFetchEngine(v7);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Engine, (uint64_t)Engine);
  uint64_t v9 = *(atomic_uint **)Engine;
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  uint64_t v10 = *a3;
  *a3 = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v11 = &unk_1EE9CBC90;
  v11[1] = v9;
  void v11[2] = v10;
  uint64_t v14 = v11;
  WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(a1, a2, (uint64_t *)&v14);
  uint64_t result = (uint64_t)v14;
  if (v14)
  {
    uint64_t v13 = *(uint64_t (**)(void))(*v14 + 8);
    return v13();
  }
  return result;
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::isSynchronous(WebKit::NetworkCache::SpeculativeLoad *this)
{
  return 0;
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::isAllowedToAskUserForCredentials(WebKit::NetworkCache::SpeculativeLoad *this)
{
  return 0;
}

WTF::StringImpl **WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>::~KeyValuePair(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>::operator()[abi:sn180100](v3);
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (v3) {
    std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100](v3);
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~KeyValuePair(uint64_t a1)
{
  std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((uint64_t *)(a1 + 72), 0);
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>::~KeyValuePair(uint64_t a1)
{
  std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>::reset[abi:sn180100]((WebKit::NetworkCache::Entry ***)(a1 + 72), 0);
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100](uint64_t a1)
{
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)(a1 + 64));
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 56), 0);
  *(void *)a1 = &unk_1EE9BA5F0;
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)a1);

  return WTF::fastFree(v3, v4);
}

void WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::saveToDiskIfReady(WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *this)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 200) && *((unsigned char *)this + 201) && *((_DWORD *)this + 27))
  {
    uint64_t v2 = (WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)((char *)this + 96);
    uint64_t v3 = (atomic_uchar *)*((void *)this + 1);
    if (v3) {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v36, v3, *((void *)this + 2));
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t v4 = (_DWORD *)*((void *)this + 22);
    if (v4)
    {
      WebKit::NetworkCache::SubresourcesEntry::updateSubresourceLoads(v4, (WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)((char *)this + 96));
      uint64_t v6 = v36;
      WebKit::NetworkCache::SubresourcesEntry::encodeAsStorageRecord((WebKit::NetworkCache::SubresourcesEntry *)v44, *((void *)this + 22), v28);
      long long v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(void *)long long v29 = &unk_1EE9CAE58;
      v37[0] = v29;
      uint64_t v35 = 0;
      WebKit::NetworkCache::Storage::store((uint64_t)v6, (const WebKit::NetworkCache::Key *)v44, (uint64_t *)v37, (uint64_t *)&v35);
      uint64_t v31 = (uint64_t)v35;
      uint64_t v35 = 0;
      if (v31) {
        (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      }
      uint64_t v32 = v37[0];
      v37[0] = 0;
      if (v32) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v32 + 8))(v32);
      }
      WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)v44, v30);
    }
    else
    {
      uint64_t v5 = (_DWORD **)((char *)this + 24);
      uint64_t v6 = v36;
      uint64_t v7 = (uint64_t)v36 + 28;
      if ((_MergedGlobals_75 & 1) == 0)
      {
        v44[0] = (WTF::StringImpl *)"SubResources";
        v44[1] = (WTF::StringImpl *)13;
        uint64_t v33 = (uint64_t)v36 + 28;
        WTF::NeverDestroyed<WTF::AtomString const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1EB359910, (uint64_t)v44);
        uint64_t v7 = v33;
        uint64_t v5 = (_DWORD **)((char *)this + 24);
        _MergedGlobals_75 = 1;
      }
      uint64_t v8 = (WTF::WallTime *)WebKit::NetworkCache::Key::Key(v44, v5, &qword_1EB359910, (_DWORD **)this + 6, (_DWORD **)this + 5, v7);
      long long v9 = *(_OWORD *)v44;
      *(_OWORD *)int v44 = 0u;
      long long v10 = v45;
      long long v45 = 0u;
      *(_OWORD *)uint64_t v37 = v9;
      *(_OWORD *)uint64_t v38 = v10;
      long long v39 = v46;
      long long v40 = v47;
      uint64_t v41 = v48;
      WTF::WallTime::now(v8);
      uint64_t v42 = v11;
      WebKit::NetworkCache::makeSubresourceInfoVector((uint64_t)v43, v2, 0);
      uint64_t v14 = (WTF::StringImpl *)*((void *)&v45 + 1);
      *((void *)&v45 + objc_destroyWeak(this + 1) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      int v15 = (WTF::StringImpl *)v45;
      *(void *)&long long v45 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v12);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      uint64_t v16 = v44[1];
      v44[1] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v12);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      uint64_t v17 = v44[0];
      v44[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v12);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      WebKit::NetworkCache::SubresourcesEntry::encodeAsStorageRecord((WebKit::NetworkCache::SubresourcesEntry *)v44, (uint64_t)v37, v13);
      uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v18 = &unk_1EE9CAE80;
      uint64_t v34 = 0;
      uint64_t v35 = v18;
      WebKit::NetworkCache::Storage::store((uint64_t)v6, (const WebKit::NetworkCache::Key *)v44, (uint64_t *)&v35, &v34);
      uint64_t v20 = v34;
      uint64_t v34 = 0;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
      uint64_t v21 = (uint64_t)v35;
      uint64_t v35 = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)v44, v19);
      WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v22);
      uint64_t v24 = v38[1];
      v38[1] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v23);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      uint64_t v25 = v38[0];
      v38[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v23);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
      uint64_t v26 = v37[1];
      v37[1] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v23);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
      uint64_t v27 = v37[0];
      v37[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v23);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
    if (v6) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v6);
    }
  }
}

unsigned char *PAL::HysteresisActivity::impulse(unsigned char *this)
{
  if (!this[48])
  {
    uint64_t v1 = this;
    if ((WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(this + 16)) & 1) == 0)
    {
      v1[48] = 1;
      (*(void (**)(void, void))(**(void **)v1 + 16))(*(void *)v1, 0);
      v1[48] = 0;
    }
    return (unsigned char *)WTF::RunLoop::TimerBase::start();
  }
  return this;
}

unsigned char *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::PendingFrameLoad(WebKit::NetworkCache::Storage &,WebKit::NetworkCache::Key const&,WTF::Function<void ()(void)> &&)::{lambda(PAL::HysteresisState)#1},void,PAL>::call(unsigned char *result, int a2)
{
  if (a2) {
    return WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::markLoadAsCompleted(*((unsigned char **)result + 1));
  }
  return result;
}

uint64_t PAL::HysteresisActivity::hysteresisTimerFired(PAL::HysteresisActivity *this)
{
  WTF::RunLoop::TimerBase::stop((PAL::HysteresisActivity *)((char *)this + 16));
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)this + 16);

  return v2();
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (PAL::HysteresisActivity::*&)(void),PAL::HysteresisActivity*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

unint64_t WTF::Vector<std::unique_ptr<WebKit::NetworkCache::SubresourceLoad>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1 <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(a1 + 12) > a3)
  {
    unint64_t v9 = a3 - (void)v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  return v3;
}

void WebKit::NetworkCache::SubresourceLoad::~SubresourceLoad(WebKit::NetworkCache::SubresourceLoad *this, WTF::StringImpl *a2)
{
  unint64_t v3 = (WTF::StringImpl *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = (WTF::StringImpl *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  unint64_t v7 = (const void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v7) {
    CFRelease(v7);
  }

  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::addPreloadedEntry(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebCore::ResourceRequest> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CAEF8;
  unint64_t v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::addPreloadedEntry(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebCore::ResourceRequest> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CAEF8;
  unint64_t v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::addPreloadedEntry(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebCore::ResourceRequest> &&)::$_0,void>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>((uint64_t *)(v4 + 56), a1 + 16, a3);
  unint64_t v6 = (WebCore::DiagnosticLoggingKeys *)WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::take(&v13, (WTF::StringImpl *)(v4 + 56), v5);
  int v7 = *(unsigned __int8 *)(v13 + 264);
  uint64_t v8 = *(atomic_uint **)(*(void *)(*(void *)(v4 + 8) + 8) + 24);
  atomic_fetch_add(v8 + 32, 1u);
  if (v7) {
    WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithRevalidationKey((uint64_t *)&v12, v6);
  }
  else {
    WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithoutRevalidationKey((uint64_t *)&v12, v6);
  }
  WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage((WebCore::DiagnosticLoggingKeys *)v8, *(void *)(a1 + 88), (uint64_t)&v12);
  unint64_t v10 = v12;
  uint64_t v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  if (atomic_fetch_add(v8 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v8 + 32);
    (*(void (**)(atomic_uint *))(*(void *)v8 + 8))(v8);
  }
  uint64_t result = v13;
  if (v13) {
    return std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100](v13);
  }
  return result;
}

uint64_t std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = (uint64_t)a2;
  if (result)
  {
    uint64_t v4 = (WTF *)WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WebCore::ResourceRequest *WebCore::ResourceRequest::ResourceRequest(WebCore::ResourceRequest *this, const WTF::String *a2)
{
  v8[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v8);
  MEMORY[0x19972E8B0](v9, v8, a2, 0);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)this, (const String *)v9, 0);
  uint64_t v5 = v9[0];
  v9[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  *((void *)this + 24) = 0;
  return this;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(WebKit::NetworkCache::SubresourceInfo const&,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CAF20;
  WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,std::optional<WebKit::NavigatingToAppBoundDomain>::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0::~$_0(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(WebKit::NetworkCache::SubresourceInfo const&,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9CAF20;
  WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,std::optional<WebKit::NavigatingToAppBoundDomain>::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0::~$_0((void *)a1 + 1);

  return WTF::fastFree(a1, v2);
}

WebCore::DiagnosticLoggingKeys *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(WebKit::NetworkCache::SubresourceInfo const&,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::call(uint64_t a1, WebKit::NetworkCache::Entry **a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = v5 + 5;
  int v7 = (const WebKit::NetworkCache::Key *)(a1 + 16);
  uint64_t v8 = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(v5 + 5, a1 + 16, a3);
  uint64_t v9 = v5[5];
  if (v9) {
    v9 += 80 * *(unsigned int *)(v9 - 4);
  }
  if (v9 == v8)
  {
    unint64_t v10 = 0;
    goto LABEL_12;
  }
  unint64_t v10 = *(WebKit::NetworkCache::Entry ***)(v8 + 72);
  *(void *)(v8 + 7objc_destroyWeak(this + 2) = 0;
  if (*v6)
  {
    uint64_t v11 = *v6 + 80 * *(unsigned int *)(*v6 - 4);
    if (v11 == v8) {
      goto LABEL_12;
    }
  }
  else
  {
    if (!v8) {
      goto LABEL_12;
    }
    uint64_t v11 = 0;
  }
  if (v11 != v8) {
    WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::remove(v5 + 5, v8);
  }
LABEL_12:
  uint64_t result = (WebCore::DiagnosticLoggingKeys *)WebKit::NetworkCache::SpeculativeLoadManager::satisfyPendingRequests((WebKit::NetworkCache::SpeculativeLoadManager *)v5, v7, v4);
  if (!result)
  {
    if (!v4) {
      goto LABEL_24;
    }
    uint64_t v23 = v4;
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)v21, (const String *)(a1 + 88));
    char v22 = 1;
    WebKit::NetworkCache::SpeculativeLoadManager::addPreloadedEntry((uint64_t)v5, (uint64_t *)&v23, (long long *)(a1 + 288), (uint64_t)v21);
    std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v21);
    uint64_t result = v23;
    if (v23)
    {
      WebKit::NetworkCache::Entry::~Entry(v23, v13);
      uint64_t result = (WebCore::DiagnosticLoggingKeys *)WTF::fastFree(v19, v20);
    }
    uint64_t v4 = 0;
    if (!v10) {
      goto LABEL_26;
    }
LABEL_25:
    WebKit::NetworkCache::SpeculativeLoad::~SpeculativeLoad(v10);
    uint64_t result = (WebCore::DiagnosticLoggingKeys *)WTF::fastFree(v15, v16);
    goto LABEL_26;
  }
  if (!v4) {
    goto LABEL_24;
  }
  uint64_t v14 = *(atomic_uint **)(*(void *)(v5[1] + 8) + 24);
  atomic_fetch_add(v14 + 32, 1u);
  WebCore::DiagnosticLoggingKeys::successfulSpeculativeWarmupWithRevalidationKey((uint64_t *)v21, result);
  WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage((WebCore::DiagnosticLoggingKeys *)v14, *(void *)(a1 + 288), (uint64_t)v21);
  uint64_t result = v21[0];
  v21[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WebCore::DiagnosticLoggingKeys *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (atomic_fetch_add(v14 + 32, 0xFFFFFFFF) != 1)
  {
LABEL_24:
    if (!v10) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  atomic_store(1u, (unsigned int *)v14 + 32);
  uint64_t result = (WebCore::DiagnosticLoggingKeys *)(*(uint64_t (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
  if (v10) {
    goto LABEL_25;
  }
LABEL_26:
  if (v4)
  {
    WebKit::NetworkCache::Entry::~Entry(v4, v13);
    return (WebCore::DiagnosticLoggingKeys *)WTF::fastFree(v17, v18);
  }
  return result;
}

WebKit::NetworkCache::Entry **WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::remove(uint64_t *a1, uint64_t a2)
{
  WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebKit::NetworkCache::Key>,WebKit::NetworkCache::Key>((WTF::StringImpl **)a2, (WTF::StringImpl *)a2);
  uint64_t result = std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>::reset[abi:sn180100]((WebKit::NetworkCache::Entry ***)(a2 + 72), 0);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v5 = *a1;
  if (*a1) {
    int v6 = *(_DWORD *)(v5 - 12) - 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v5 - 1objc_destroyWeak(this + 2) = v6;
  uint64_t v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
    {
      return (WebKit::NetworkCache::Entry **)WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(a1, v9 >> 1);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  if (a2)
  {
    uint64_t v8 = a2;
    unsigned int v9 = (void *)(result + 88);
    do
    {
      *(_OWORD *)(v9 - 7) = 0uLL;
      *(_OWORD *)(v9 - 9) = 0uLL;
      void *v9 = 0;
      v9 += 10;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v4;
    do
    {
      uint64_t v12 = (uint64_t *)(v3 + 80 * v10);
      uint64_t v13 = v12[2];
      if (v13 != -1)
      {
        if (v13)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          int v16 = 0;
          int v17 = *((_DWORD *)v12 + 8);
          do
          {
            unsigned int v18 = v17 & v15;
            uint64_t v19 = v14 + 80 * (v17 & v15);
            int v17 = ++v16 + (v17 & v15);
          }
          while (*(void *)(v19 + 16));
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>::~KeyValuePair(v14 + 80 * v18);
          uint64_t v20 = *v12;
          uint64_t *v12 = 0;
          *(void *)uint64_t v19 = v20;
          uint64_t v21 = v12[1];
          v12[1] = 0;
          *(void *)(v19 + 8) = v21;
          uint64_t v22 = v12[2];
          uint64_t v12[2] = 0;
          *(void *)(v19 + 16) = v22;
          uint64_t v23 = v12[3];
          _OWORD v12[3] = 0;
          *(void *)(v19 + 24) = v23;
          long long v24 = *((_OWORD *)v12 + 2);
          long long v25 = *((_OWORD *)v12 + 3);
          *(void *)(v19 + 64) = v12[8];
          *(_OWORD *)(v19 + 3objc_destroyWeak(this + 2) = v24;
          *(_OWORD *)(v19 + 48) = v25;
          uint64_t v26 = v3 + 80 * v10;
          uint64_t v27 = *(void *)(v26 + 72);
          *(void *)(v26 + 7objc_destroyWeak(this + 2) = 0;
          *(void *)(v14 + 80 * v18 + 7objc_destroyWeak(this + 2) = v27;
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>::~KeyValuePair(v26);
        }
        else
        {
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>::~KeyValuePair(v3 + 80 * v10);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v3)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v3 - 16), v7);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v6 = 0;
  int v7 = *(_DWORD *)(v3 - 8);
  for (unsigned int i = *(_DWORD *)(a2 + 32); ; unsigned int i = ++v6 + v9)
  {
    unsigned int v9 = i & v7;
    uint64_t v10 = v3 + 80 * (i & v7);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11 == -1) {
      continue;
    }
    if (!v11) {
      break;
    }
    if (WebKit::NetworkCache::Key::operator==(v3 + 80 * v9, a2, a3)) {
      return v10;
    }
  }
  if (!*a1) {
    return 0;
  }
  return *a1 + 80 * *(unsigned int *)(*a1 - 4);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::startSpeculativeRevalidation(WebKit::NetworkCache::GlobalFrameID const&,WebKit::NetworkCache::SubresourcesEntry &,BOOL,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CAF48;
  uint64_t v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unsigned int v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::startSpeculativeRevalidation(WebKit::NetworkCache::GlobalFrameID const&,WebKit::NetworkCache::SubresourcesEntry &,BOOL,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CAF48;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unsigned int v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::startSpeculativeRevalidation(WebKit::NetworkCache::GlobalFrameID const&,WebKit::NetworkCache::SubresourcesEntry &,BOOL,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(atomic_uint **)(*(void *)(*(void *)(v2 + 8) + 8) + 24);
  atomic_fetch_add(v3 + 32, 1u);
  WebCore::DiagnosticLoggingKeys::entryRightlyNotWarmedUpKey((uint64_t *)&v24, (WebCore::DiagnosticLoggingKeys *)a1);
  WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage((WebCore::DiagnosticLoggingKeys *)v3, *(void *)(a1 + 88), (uint64_t)&v24);
  uint64_t result = (uint64_t)v24;
  long long v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (atomic_fetch_add(v3 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3 + 32);
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v9 = *(void *)(v2 + 64);
  int v7 = (uint64_t *)(v2 + 64);
  uint64_t v8 = v9;
  if (v9)
  {
    int v10 = 0;
    uint64_t v11 = a1 + 16;
    unsigned int v12 = *(_DWORD *)(v8 - 8);
    for (int i = *(_DWORD *)(a1 + 48); ; int i = v10 + v14)
    {
      unsigned int v14 = i & v12;
      uint64_t v15 = v8 + 80 * (i & v12);
      uint64_t v16 = *(void *)(v15 + 16);
      if (v16 != -1)
      {
        if (!v16)
        {
          uint64_t v17 = *v7;
          if (!*v7) {
            return result;
          }
          uint64_t v15 = v17 + 80 * *(unsigned int *)(v17 - 4);
          goto LABEL_16;
        }
        uint64_t result = WebKit::NetworkCache::Key::operator==(v8 + 80 * v14, v11, v5);
        if (result) {
          break;
        }
      }
      ++v10;
    }
    uint64_t v17 = *v7;
    if (!*v7) {
      goto LABEL_17;
    }
LABEL_16:
    v17 += 80 * *(unsigned int *)(v17 - 4);
    if (v17 == v15) {
      return result;
    }
LABEL_17:
    if (v17 != v15)
    {
      WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebKit::NetworkCache::Key>,WebKit::NetworkCache::Key>((WTF::StringImpl **)v15, v4);
      uint64_t result = *(void *)(v15 + 72);
      *(void *)(v15 + 7objc_destroyWeak(this + 2) = 0;
      if (result) {
        uint64_t result = std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>::operator()[abi:sn180100]((WebCore::TimerBase *)result);
      }
      ++*(_DWORD *)(*v7 - 16);
      uint64_t v18 = *v7;
      if (*v7) {
        int v19 = *(_DWORD *)(v18 - 12) - 1;
      }
      else {
        int v19 = -1;
      }
      *(_DWORD *)(v18 - 1objc_destroyWeak(this + 2) = v19;
      uint64_t v20 = *v7;
      if (*v7)
      {
        unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
        unsigned int v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9) {
          return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(v7, v22 >> 1);
        }
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  if (a2)
  {
    uint64_t v8 = a2;
    uint64_t v9 = (void *)(result + 88);
    do
    {
      *(_OWORD *)(v9 - 7) = 0uLL;
      *(_OWORD *)(v9 - 9) = 0uLL;
      void *v9 = 0;
      v9 += 10;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v4;
    do
    {
      unsigned int v12 = (uint64_t *)(v3 + 80 * v10);
      uint64_t v13 = v12[2];
      if (v13 != -1)
      {
        if (v13)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          int v16 = 0;
          int v17 = *((_DWORD *)v12 + 8);
          do
          {
            unsigned int v18 = v17 & v15;
            uint64_t v19 = v14 + 80 * (v17 & v15);
            int v17 = ++v16 + (v17 & v15);
          }
          while (*(void *)(v19 + 16));
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>::~KeyValuePair((WTF::StringImpl **)(v14 + 80 * v18), v7);
          uint64_t v20 = *v12;
          uint64_t *v12 = 0;
          *(void *)uint64_t v19 = v20;
          uint64_t v21 = v12[1];
          v12[1] = 0;
          *(void *)(v19 + 8) = v21;
          uint64_t v22 = v12[2];
          uint64_t v12[2] = 0;
          *(void *)(v19 + 16) = v22;
          uint64_t v23 = v12[3];
          _OWORD v12[3] = 0;
          *(void *)(v19 + 24) = v23;
          long long v24 = *((_OWORD *)v12 + 2);
          long long v25 = *((_OWORD *)v12 + 3);
          *(void *)(v19 + 64) = v12[8];
          *(_OWORD *)(v19 + 3objc_destroyWeak(this + 2) = v24;
          *(_OWORD *)(v19 + 48) = v25;
          uint64_t v26 = v3 + 80 * v10;
          uint64_t v27 = *(void *)(v26 + 72);
          *(void *)(v26 + 7objc_destroyWeak(this + 2) = 0;
          *(void *)(v14 + 80 * v18 + 7objc_destroyWeak(this + 2) = v27;
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>::~KeyValuePair((WTF::StringImpl **)v26, v28);
        }
        else
        {
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>::~KeyValuePair((WTF::StringImpl **)(v3 + 80 * v10), v7);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v3)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v3 - 16), v7);
}

uint64_t std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>::operator()[abi:sn180100](WebCore::TimerBase *this)
{
  *(void *)this = &unk_1EE9BA5F0;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebCore::TimerBase::~TimerBase(this);

  return WTF::fastFree(v3, v4);
}

WebKit::NetworkCache::Storage::Record *std::unique_ptr<WebKit::NetworkCache::Storage::Record>::reset[abi:sn180100](WebKit::NetworkCache::Storage::Record **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkCache::Storage::Record::~Record(result, a2);
    return (WebKit::NetworkCache::Storage::Record *)WTF::fastFree(v4, v5);
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(char *result, int8x16_t *a2, int a3, unsigned int a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    int v5 = &result[2 * (a3 & 0xFFFFFFC0)];
    long long v6 = 0uLL;
    do
    {
      v19.val[0] = *a2;
      int8x16_t v7 = a2[1];
      v20.val[0] = a2[2];
      int8x16_t v8 = a2[3];
      a2 += 4;
      int8x16_t v9 = v8;
      v20.val[1] = 0uLL;
      v21.val[0] = v7;
      v19.val[1] = 0uLL;
      uint64_t v10 = result;
      vst2q_s8(v10, v19);
      v10 += 32;
      v21.val[1] = 0uLL;
      vst2q_s8(v10, v21);
      uint64_t v11 = result + 64;
      vst2q_s8(v11, v20);
      unsigned int v12 = result + 96;
      vst2q_s8(v12, *(int8x16x2_t *)(&v6 - 1));
      result += 128;
    }
    while (result != v5);
    uint64_t result = v5;
  }
  while (result != v4)
  {
    __int16 v13 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)uint64_t result = v13;
    result += 2;
  }
  uint64_t v14 = 0;
  do
  {
    v17[v14-- + 12] = (a4 % 0xA) | 0x30;
    BOOL v15 = a4 > 9;
    a4 /= 0xAu;
  }
  while (v15);
  if (v14 + 14 <= 13)
  {
    do
    {
      *(_WORD *)unsigned int v4 = *((unsigned __int8 *)&v18 + v14);
      v4 += 2;
    }
    while (!__CFADD__(v14++, 1));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::decodeRecordMetaData(WebKit::NetworkCache::RecordMetaData &,WebKit::NetworkCache::Data const&)::$_0,BOOL,std::span<unsigned char const,18446744073709551615ul>>::call()
{
  v1[36] = *MEMORY[0x1E4F143B8];
  WTF::Persistence::Decoder::Decoder();
  WTF::Persistence::Decoder::operator>>();
  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v1);
  return 0;
}

WebKit::NetworkCache::Storage::ReadOperation *std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100](WebKit::NetworkCache::Storage::ReadOperation **a1, WebKit::NetworkCache::Storage::ReadOperation *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkCache::Storage::ReadOperation::~ReadOperation(result);
    return (WebKit::NetworkCache::Storage::ReadOperation *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::NetworkCache::Storage::ReadOperation::~ReadOperation(WebKit::NetworkCache::Storage::ReadOperation *this)
{
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2) {
    os_release(v2);
  }
  std::unique_ptr<WebKit::NetworkCache::Storage::Record>::reset[abi:sn180100]((WebKit::NetworkCache::Storage::Record **)this + 13, 0);
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 1objc_destroyWeak(this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  long long v6 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  int8x16_t v7 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v3);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int8x16_t v8 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v3);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  int8x16_t v9 = *(atomic_uchar ***)this;
  *(void *)this = 0;
  if (v9) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v9);
  }
}

uint64_t std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](atomic_uchar ***a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[23];
  a1[23] = 0;
  if (v3) {
    (*((void (**)(atomic_uchar **))*v3 + 1))(v3);
  }
  uint64_t v4 = a1[22];
  a1[22] = 0;
  if (v4) {
    (*((void (**)(atomic_uchar **))*v4 + 1))(v4);
  }
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)(a1 + 1), a2);
  long long v6 = *a1;
  *a1 = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v6);
  }

  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WebKit::NetworkCache::Storage::ReadOperation::ReadOperation(uint64_t a1, atomic_uchar *volatile *a2, uint64_t a3, int a4, uint64_t *a5)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a2);
  *(void *)a1 = a2;
  WebKit::NetworkCache::Key::Key(a1 + 8, a3);
  *(void *)(a1 + 80) = ++WebKit::NetworkCache::nextReadOperationOrdinal(void)::ordinal;
  *(_DWORD *)(a1 + 88) = a4;
  uint64_t v10 = *a5;
  *a5 = 0;
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 19objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(a1 + 196) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 23objc_destroyWeak(this + 2) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 259) = 0u;
  return a1;
}

uint64_t WebKit::NetworkCache::Storage::WriteOperation::WriteOperation(uint64_t a1, atomic_uchar *volatile *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a2);
  *(void *)a1 = a2;
  WebKit::NetworkCache::Key::Key(a1 + 8, a3);
  *(void *)(a1 + 80) = *(void *)(a3 + 72);
  uint64_t v10 = *(void **)(a3 + 80);
  *(void *)(a1 + 88) = v10;
  if (v10) {
    os_retain(v10);
  }
  long long v11 = *(_OWORD *)(a3 + 88);
  *(unsigned char *)(a1 + 11objc_destroyWeak(this + 2) = *(unsigned char *)(a3 + 104);
  *(_OWORD *)(a1 + 96) = v11;
  unsigned int v12 = *(void **)(a3 + 112);
  *(void *)(a1 + 120) = v12;
  if (v12) {
    os_retain(v12);
  }
  long long v13 = *(_OWORD *)(a3 + 120);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a3 + 136);
  *(_OWORD *)(a1 + 128) = v13;
  long long v14 = *(_OWORD *)(a3 + 144);
  *(void *)(a1 + 165) = *(void *)(a3 + 157);
  *(_OWORD *)(a1 + 15objc_destroyWeak(this + 2) = v14;
  uint64_t v15 = *a4;
  *a4 = 0;
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *a5;
  *a5 = 0;
  *(void *)(a1 + 184) = v16;
  *(_DWORD *)(a1 + 19objc_destroyWeak(this + 2) = 0;
  return a1;
}

WebKit::NetworkCache::Storage::Record *WebKit::NetworkCache::Storage::Record::Record(WebKit::NetworkCache::Storage::Record *this, const WebKit::NetworkCache::Storage::Record *a2)
{
  *(void *)(WebKit::NetworkCache::Key::Key((uint64_t)this, (uint64_t)a2) + 7objc_destroyWeak(this + 2) = *((void *)a2 + 9);
  uint64_t v4 = (void *)*((void *)a2 + 10);
  *((void *)this + 10) = v4;
  if (v4) {
    os_retain(v4);
  }
  long long v5 = *(_OWORD *)((char *)a2 + 88);
  *((unsigned char *)this + 104) = *((unsigned char *)a2 + 104);
  *(_OWORD *)((char *)this + 88) = v5;
  long long v6 = (void *)*((void *)a2 + 14);
  *((void *)this + 14) = v6;
  if (v6) {
    os_retain(v6);
  }
  long long v7 = *(_OWORD *)((char *)a2 + 120);
  *((unsigned char *)this + 136) = *((unsigned char *)a2 + 136);
  *(_OWORD *)((char *)this + 120) = v7;
  long long v8 = *((_OWORD *)a2 + 9);
  *(void *)((char *)this + 157) = *(void *)((char *)a2 + 157);
  *((_OWORD *)this + 9) = v8;
  return this;
}

uint64_t std::default_delete<WebKit::NetworkCache::Storage::TraverseOperation>::operator()[abi:sn180100](WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  long long v5 = *(atomic_uchar ***)this;
  *(void *)this = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v2 = (WTF::StringImpl **)result;
    WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result + 80, a2);
    uint64_t v4 = v2[3];
    v2[3] = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    long long v5 = v2[2];
    v2[2] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    long long v6 = v2[1];
    v2[1] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v3);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    long long v7 = *v2;
    *uint64_t v2 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v3);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    return WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,unsigned int,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    int v2 = *(_DWORD *)(v1 - 4);
    int v3 = *(_DWORD *)(v1 - 12);
    if (v2)
    {
      unsigned int v4 = v2 << (6 * v3 >= (2 * v2));
      goto LABEL_6;
    }
  }
  else
  {
    int v2 = 0;
    int v3 = 0;
  }
  unsigned int v4 = 8;
LABEL_6:
  uint64_t result = WTF::fastMalloc((WTF *)(80 * v4 + 16));
  if (v4)
  {
    uint64_t v7 = v4;
    long long v8 = (_DWORD *)(result + 88);
    do
    {
      *(_OWORD *)(v8 - 14) = 0uLL;
      *(_OWORD *)(v8 - 18) = 0uLL;
      *long long v8 = 0;
      v8 += 20;
      --v7;
    }
    while (v7);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v3;
  if (v2)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = v1 + 80 * v9;
      long long v11 = *(WTF::StringImpl **)(v10 + 16);
      if (v11 == (WTF::StringImpl *)-1) {
        goto LABEL_66;
      }
      if (v11) {
        break;
      }
      unsigned int v12 = *(WTF::StringImpl **)(v10 + 24);
      *(void *)(v10 + 24) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v6);
          long long v11 = *(WTF::StringImpl **)(v10 + 16);
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
      *(void *)(v10 + 16) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v6);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      int8x16x2_t v21 = *(WTF::StringImpl **)(v10 + 8);
      *(void *)(v10 + 8) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v6);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      uint64_t v22 = *(WTF::StringImpl **)v10;
      *(void *)uint64_t v10 = 0;
      if (!v22) {
        goto LABEL_66;
      }
      if (*(_DWORD *)v22 == 2)
      {
LABEL_65:
        WTF::StringImpl::destroy(v22, v6);
        goto LABEL_66;
      }
      *(_DWORD *)v22 -= 2;
LABEL_66:
      if (++v9 == v2) {
        goto LABEL_69;
      }
    }
    uint64_t v13 = *a1;
    if (*a1) {
      unsigned int v14 = *(_DWORD *)(v13 - 8);
    }
    else {
      unsigned int v14 = 0;
    }
    int v15 = 0;
    int v16 = *(_DWORD *)(v10 + 32);
    do
    {
      unsigned int v17 = v16 & v14;
      uint64_t v18 = v13 + 80 * (v16 & v14);
      int v16 = ++v15 + (v16 & v14);
    }
    while (*(void *)(v18 + 16));
    int8x16x2_t v19 = *(WTF::StringImpl **)(v18 + 24);
    *(void *)(v18 + 24) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v6);
        int8x16x2_t v20 = *(WTF::StringImpl **)(v18 + 16);
        *(void *)(v18 + 16) = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v6);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        goto LABEL_42;
      }
      *(_DWORD *)v19 -= 2;
    }
    *(void *)(v18 + 16) = 0;
LABEL_42:
    uint64_t v23 = *(WTF::StringImpl **)(v18 + 8);
    *(void *)(v18 + 8) = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v6);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    long long v24 = *(WTF::StringImpl **)v18;
    *(void *)uint64_t v18 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v6);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    long long v25 = *(WTF::StringImpl **)v10;
    *(void *)uint64_t v10 = 0;
    *(void *)uint64_t v18 = v25;
    uint64_t v26 = *(void *)(v10 + 8);
    *(void *)(v10 + 8) = 0;
    *(void *)(v18 + 8) = v26;
    uint64_t v27 = *(void *)(v10 + 16);
    *(void *)(v10 + 16) = 0;
    *(void *)(v18 + 16) = v27;
    uint64_t v28 = *(void *)(v10 + 24);
    *(void *)(v10 + 24) = 0;
    *(void *)(v18 + 24) = v28;
    long long v29 = *(_OWORD *)(v10 + 32);
    long long v30 = *(_OWORD *)(v10 + 48);
    *(void *)(v18 + 64) = *(void *)(v10 + 64);
    *(_OWORD *)(v18 + 3objc_destroyWeak(this + 2) = v29;
    *(_OWORD *)(v18 + 48) = v30;
    *(_DWORD *)(v13 + 80 * v17 + 7objc_destroyWeak(this + 2) = *(_DWORD *)(v1 + 80 * v9 + 72);
    uint64_t v31 = *(WTF::StringImpl **)(v10 + 24);
    *(void *)(v10 + 24) = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v6);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
    uint64_t v32 = *(WTF::StringImpl **)(v10 + 16);
    *(void *)(v10 + 16) = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v6);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    uint64_t v33 = *(WTF::StringImpl **)(v10 + 8);
    *(void *)(v10 + 8) = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v6);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
    uint64_t v22 = *(WTF::StringImpl **)v10;
    *(void *)uint64_t v10 = 0;
    if (!v22) {
      goto LABEL_66;
    }
    if (*(_DWORD *)v22 == 2) {
      goto LABEL_65;
    }
    *(_DWORD *)v22 -= 2;
    goto LABEL_66;
  }
  if (v1)
  {
LABEL_69:
    return WTF::fastFree((WTF *)(v1 - 16), v6);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WebKit::NetworkCache::Key,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    unsigned int v3 = 0;
    int v4 = 0;
    goto LABEL_3;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 4);
  int v4 = *(_DWORD *)(v2 - 12);
  if (!v3)
  {
LABEL_3:
    unsigned int v5 = 8;
    goto LABEL_4;
  }
  unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
LABEL_4:
  uint64_t result = WTF::fastMalloc((WTF *)(72 * v5 + 16));
  if (v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = (_OWORD *)(result + 16);
    do
    {
      _OWORD *v9 = 0uLL;
      v9[1] = 0uLL;
      uint64_t v9 = (_OWORD *)((char *)v9 + 72);
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    long long v11 = 0;
    uint64_t v55 = v3;
    uint64_t v53 = v2;
    while (1)
    {
      unsigned int v12 = (WTF::StringImpl **)(v2 + 72 * v10);
      unsigned int v14 = v12 + 2;
      uint64_t v13 = v12[2];
      if (!v13)
      {
        uint64_t v47 = v2 + 72 * v10;
        uint64_t v48 = *(WTF::StringImpl **)(v47 + 24);
        *(void *)(v47 + 24) = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
          {
            WTF::StringImpl::destroy(v48, v7);
            uint64_t v13 = *v14;
          }
          else
          {
            *(_DWORD *)v48 -= 2;
          }
        }
        atomic_uint *v14 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v7);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
        uint64_t v49 = v2 + 72 * v10;
        long long v50 = *(WTF::StringImpl **)(v49 + 8);
        *(void *)(v49 + 8) = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2) {
            WTF::StringImpl::destroy(v50, v7);
          }
          else {
            *(_DWORD *)v50 -= 2;
          }
        }
        long long v51 = *v12;
        WTF::StringImpl *v12 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2) {
            WTF::StringImpl::destroy(v51, v7);
          }
          else {
            *(_DWORD *)v51 -= 2;
          }
        }
        goto LABEL_39;
      }
      if (v13 != (WTF::StringImpl *)-1) {
        break;
      }
LABEL_39:
      if (++v10 == v55) {
        goto LABEL_69;
      }
    }
    long long v58 = (WTF::StringImpl **)(v2 + 72 * v10);
    uint64_t v15 = *a1;
    uint64_t v57 = v11;
    if (*a1) {
      unsigned int v16 = *(_DWORD *)(v15 - 8);
    }
    else {
      unsigned int v16 = 0;
    }
    int v17 = 0;
    uint64_t v18 = v2 + 72 * v10;
    int v21 = *(_DWORD *)(v18 + 32);
    int8x16x2_t v20 = (long long *)(v18 + 32);
    int v19 = v21;
    do
    {
      unsigned int v22 = v19 & v16;
      uint64_t v23 = v15 + 72 * (v19 & v16);
      uint64_t v25 = *(void *)(v23 + 16);
      long long v24 = (WTF::StringImpl **)(v23 + 16);
      int v19 = ++v17 + (v19 & v16);
    }
    while (v25);
    uint64_t v26 = (WTF::StringImpl **)(v15 + 72 * v22);
    uint64_t v28 = v26 + 3;
    uint64_t v27 = v26[3];
    v26[3] = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::destroy(v27, v7);
        uint64_t v26 = (WTF::StringImpl **)(v15 + 72 * v22);
        char v52 = *v24;
        *long long v24 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
          {
            WTF::StringImpl::destroy(v52, v7);
            uint64_t v26 = (WTF::StringImpl **)(v15 + 72 * v22);
          }
          else
          {
            *(_DWORD *)v52 -= 2;
          }
        }
        goto LABEL_19;
      }
      *(_DWORD *)v27 -= 2;
    }
    *long long v24 = 0;
LABEL_19:
    uint64_t v29 = v15 + 72 * v22;
    uint64_t v32 = *(WTF::StringImpl **)(v29 + 8);
    uint64_t v31 = (void *)(v29 + 8);
    long long v30 = v32;
    *uint64_t v31 = 0;
    if (v32)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::destroy(v30, v7);
        uint64_t v26 = (WTF::StringImpl **)(v15 + 72 * v22);
      }
      else
      {
        *(_DWORD *)v30 -= 2;
      }
    }
    uint64_t v33 = *v26;
    WTF::StringImpl *v26 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::destroy(v33, v7);
        uint64_t v26 = (WTF::StringImpl **)(v15 + 72 * v22);
      }
      else
      {
        *(_DWORD *)v33 -= 2;
      }
    }
    uint64_t v34 = *v58;
    *long long v58 = 0;
    WTF::StringImpl *v26 = v34;
    uint64_t v35 = v2 + 72 * v10;
    uint64_t v37 = *(void *)(v35 + 8);
    uint64_t v36 = (WTF::StringImpl **)(v35 + 8);
    *uint64_t v36 = 0;
    *uint64_t v31 = v37;
    uint64_t v38 = *v14;
    atomic_uint *v14 = 0;
    *long long v24 = v38;
    long long v39 = v36[2];
    v36[2] = 0;
    *uint64_t v28 = v39;
    uint64_t v40 = v15 + 72 * v22;
    long long v41 = *v20;
    long long v42 = v20[1];
    *(void *)(v40 + 64) = *((void *)v20 + 4);
    *(_OWORD *)(v40 + 3objc_destroyWeak(this + 2) = v41;
    *(_OWORD *)(v40 + 48) = v42;
    uint64_t v43 = v36[2];
    v36[2] = 0;
    long long v11 = v57;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::destroy(v43, v7);
        uint64_t v26 = (WTF::StringImpl **)(v15 + 72 * v22);
      }
      else
      {
        *(_DWORD *)v43 -= 2;
      }
    }
    int v44 = *v14;
    atomic_uint *v14 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::destroy(v44, v7);
        uint64_t v26 = (WTF::StringImpl **)(v15 + 72 * v22);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
    long long v45 = *v36;
    *uint64_t v36 = 0;
    uint64_t v2 = v53;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::destroy(v45, v7);
        uint64_t v26 = (WTF::StringImpl **)(v15 + 72 * v22);
      }
      else
      {
        *(_DWORD *)v45 -= 2;
      }
    }
    long long v46 = *v58;
    *long long v58 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::destroy(v46, v7);
        uint64_t v26 = (WTF::StringImpl **)(v15 + 72 * v22);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    if (v58 == a2) {
      long long v11 = v26;
    }
    goto LABEL_39;
  }
  if (v2)
  {
LABEL_69:
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

uint64_t WebKit::NetworkCache::SubresourceInfo::SubresourceInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  uint64_t v5 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  a2[2] = 0;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a2[3];
  a2[3] = 0;
  *(void *)(a1 + 24) = v7;
  long long v8 = *((_OWORD *)a2 + 2);
  long long v9 = *((_OWORD *)a2 + 3);
  *(void *)(a1 + 64) = a2[8];
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  long long v10 = *(_OWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 87) = *(_DWORD *)((char *)a2 + 87);
  *(_OWORD *)(a1 + 7objc_destroyWeak(this + 2) = v10;
  WTF::URL::URL(a1 + 96, a2 + 12);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v11 = a2[17];
  a2[17] = 0;
  *(void *)(a1 + 136) = v11;
  LODWORD(v1objc_destroyWeak(this + 1) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = 0;
  *(_DWORD *)(a1 + 144) = v11;
  LODWORD(v1objc_destroyWeak(this + 1) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = 0;
  *(_DWORD *)(a1 + 148) = v11;
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v12 = a2[19];
  a2[19] = 0;
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = v12;
  LODWORD(v1objc_destroyWeak(this + 2) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = 0;
  *(_DWORD *)(a1 + 160) = v12;
  LODWORD(v1objc_destroyWeak(this + 2) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 4objc_destroyWeak(this + 1) = 0;
  *(_DWORD *)(a1 + 164) = v12;
  *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
  return a1;
}

void WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::SubresourceInfo>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 176 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  *(void *)(v4 + 8) = v6;
  uint64_t v7 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v4 + 16) = v7;
  uint64_t v8 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = 0;
  *(void *)(v4 + 24) = v8;
  uint64_t v9 = *(void *)(v3 + 64);
  long long v10 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v4 + 3objc_destroyWeak(this + 2) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 48) = v10;
  *(void *)(v4 + 64) = v9;
  long long v11 = *(_OWORD *)(v3 + 72);
  *(_DWORD *)(v4 + 87) = *(_DWORD *)(v3 + 87);
  *(_OWORD *)(v4 + 7objc_destroyWeak(this + 2) = v11;
  WTF::URL::URL(v4 + 96, (uint64_t *)(v3 + 96));
  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 144) = 0;
  uint64_t v12 = *(void *)(v3 + 136);
  *(void *)(v3 + 136) = 0;
  *(void *)(v4 + 136) = v12;
  LODWORD(v1objc_destroyWeak(this + 2) = *(_DWORD *)(v3 + 144);
  *(_DWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v4 + 144) = v12;
  LODWORD(v1objc_destroyWeak(this + 2) = *(_DWORD *)(v3 + 148);
  *(_DWORD *)(v3 + 148) = 0;
  *(_DWORD *)(v4 + 148) = v12;
  *(void *)(v4 + 15objc_destroyWeak(this + 2) = 0;
  *(void *)(v4 + 160) = 0;
  uint64_t v13 = *(void *)(v3 + 152);
  *(void *)(v3 + 15objc_destroyWeak(this + 2) = 0;
  *(void *)(v4 + 15objc_destroyWeak(this + 2) = v13;
  LODWORD(v13) = *(_DWORD *)(v3 + 160);
  *(_DWORD *)(v3 + 160) = 0;
  *(_DWORD *)(v4 + 160) = v13;
  LODWORD(v13) = *(_DWORD *)(v3 + 164);
  *(_DWORD *)(v3 + 164) = 0;
  *(_DWORD *)(v4 + 164) = v13;
  *(unsigned char *)(v4 + 168) = *(unsigned char *)(v3 + 168);
  ++*(_DWORD *)(a1 + 12);
}

unint64_t WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 176 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1745D18)
    {
      __break(0xC471u);
      JUMPOUT(0x198C62C1CLL);
    }
    unint64_t v3 = *(uint64_t **)a1;
    uint64_t v4 = (uint64_t *)(*(void *)a1 + 176 * *(unsigned int *)(a1 + 12));
    int v5 = 176 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(176 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0xB0;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::NetworkCache::SubresourceInfo>::move(v3, v4, v6);
    if (v3)
    {
      if (*(uint64_t **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebKit::NetworkCache::SubresourceInfo>::move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a3 + 96;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      *(void *)(v5 - 96) = v6;
      uint64_t v7 = v4[1];
      v4[1] = 0;
      *(void *)(v5 - 88) = v7;
      uint64_t v8 = v4[2];
      void v4[2] = 0;
      *(void *)(v5 - 80) = v8;
      uint64_t v9 = v4[3];
      v4[3] = 0;
      *(void *)(v5 - 7objc_destroyWeak(this + 2) = v9;
      long long v10 = *((_OWORD *)v4 + 2);
      long long v11 = *((_OWORD *)v4 + 3);
      *(void *)(v5 - 3objc_destroyWeak(this + 2) = v4[8];
      *(_OWORD *)(v5 - 64) = v10;
      *(_OWORD *)(v5 - 48) = v11;
      long long v12 = *(_OWORD *)(v4 + 9);
      *(_DWORD *)(v5 - 9) = *(_DWORD *)((char *)v4 + 87);
      *(_OWORD *)(v5 - 24) = v12;
      WTF::URL::URL(v5, v4 + 12);
      *(void *)(v5 + 40) = 0;
      *(void *)(v5 + 48) = 0;
      uint64_t v13 = v4[17];
      v4[17] = 0;
      *(void *)(v5 + 40) = v13;
      LODWORD(v13) = *((_DWORD *)v4 + 36);
      *((_DWORD *)v4 + 36) = 0;
      *(_DWORD *)(v5 + 48) = v13;
      LODWORD(v13) = *((_DWORD *)v4 + 37);
      *((_DWORD *)v4 + 37) = 0;
      *(_DWORD *)(v5 + 5objc_destroyWeak(this + 2) = v13;
      *(void *)(v5 + 56) = 0;
      *(void *)(v5 + 64) = 0;
      uint64_t v14 = v4[19];
      v4[19] = 0;
      *(void *)(v5 + 56) = v14;
      LODWORD(v14) = *((_DWORD *)v4 + 40);
      *((_DWORD *)v4 + 40) = 0;
      *(_DWORD *)(v5 + 64) = v14;
      LODWORD(v14) = *((_DWORD *)v4 + 41);
      *((_DWORD *)v4 + 4objc_destroyWeak(this + 1) = 0;
      *(_DWORD *)(v5 + 68) = v14;
      *(unsigned char *)(v5 + 7objc_destroyWeak(this + 2) = *((unsigned char *)v4 + 168);
      WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)v4);
      v5 += 176;
      v4 += 22;
    }
    while (v4 != a2);
  }
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,unsigned int,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl **)(a1 + 16);
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        uint64_t v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
          {
            WTF::StringImpl::destroy(v6, a2);
            uint64_t v5 = *v4;
          }
          else
          {
            *(_DWORD *)v6 -= 2;
          }
        }
        *uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
        uint64_t v7 = *(v4 - 1);
        *(v4 - objc_destroyWeak(this + 1) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2) {
            WTF::StringImpl::destroy(v7, a2);
          }
          else {
            *(_DWORD *)v7 -= 2;
          }
        }
        uint64_t v8 = *(v4 - 2);
        *(v4 - objc_destroyWeak(this + 2) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, a2);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
      v4 += 10;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t **std::unique_ptr<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>>::reset[abi:sn180100](uint64_t **result, WTF::StringImpl *a2)
{
  uint64_t v2 = *result;
  *uint64_t result = (uint64_t *)a2;
  if (v2)
  {
    if (*v2) {
      WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(*v2, a2);
    }
    return (uint64_t **)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl **)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 5);
      if (v5 != (WTF::StringImpl *)-1)
      {
        a2 = *v4;
        *uint64_t v4 = 0;
        if (a2)
        {
          std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v4, a2);
          uint64_t v5 = *(v4 - 5);
        }
        *(v4 - 5) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 6;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebKit::sendSecItemRequest(uint64_t a1, char a2, const void *a3, const void *a4)
{
  char v38 = a2;
  uint64_t v36 = a4;
  uint64_t v37 = a3;
  uint64_t v8 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  isCurrent = (WTF::RunLoop *)WTF::RunLoop::isCurrent(v8);
  if (isCurrent)
  {
    uint64_t v10 = *(void *)(*(void *)(qword_1EB359918 + 8) + 40);
    v27[0] = a2;
    uint64_t v28 = a3;
    if (a3) {
      CFRetain(a3);
    }
    uint64_t v29 = a4;
    if (a4) {
      CFRetain(a4);
    }
    uint64_t v47 = 0;
    IPC::Connection::createSyncMessageEncoder(3737, 0, &v47, &v46);
    IPC::ArgumentCoder<WebKit::SecItemRequestData,void>::encode(v46, (uint64_t)v27);
    IPC::Connection::sendSyncMessage(v10, v47, (uint64_t *)&v46, 0, (uint64_t)&v44, INFINITY);
    if (v45)
    {
      if (v45 == 1)
      {
        LOBYTE(v30) = (_BYTE)v44;
        int v11 = 1;
        int v35 = 1;
LABEL_47:
        ((void (*)(uint64_t **, uint64_t **))off_1EE9CAFB8[v11])(&v48, &v44);
LABEL_48:
        uint64_t v18 = v46;
        long long v46 = 0;
        if (v18)
        {
          IPC::Encoder::~Encoder(v18, v14);
          WTF::fastFree(v21, v22);
          if (!a4)
          {
LABEL_50:
            if (!a3)
            {
LABEL_51:
              if (v35)
              {
                LOBYTE(v48) = 0;
                *(unsigned char *)a1 = 0;
                *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 0;
              }
              else
              {
                std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v48, (uint64_t)v31);
                int v19 = v52;
                *(unsigned char *)a1 = 0;
                *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 0;
                if (v19)
                {
                  uint64_t v20 = v51;
                  *(_DWORD *)a1 = v48;
                  *(unsigned char *)(a1 + 8) = 0;
                  *(_DWORD *)(a1 + 24) = -1;
                  if (v20 != -1)
                  {
                    ((void (*)(int *, uint64_t, uint64_t *))off_1EE9CAFC8[v20])(&v39, a1 + 8, &v49);
                    *(_DWORD *)(a1 + 24) = v20;
                  }
                  *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 1;
                  if ((_BYTE)v52 && v51 != -1) {
                    ((void (*)(int *, uint64_t *))off_1EE9CAF88[v51])(&v39, &v49);
                  }
                }
              }
              if (v35 != -1) {
                ((void (*)(uint64_t **, uint64_t *))off_1EE9CAFE0[v35])(&v48, &v30);
              }
              return;
            }
LABEL_64:
            CFRelease(a3);
            goto LABEL_51;
          }
        }
        else if (!a4)
        {
          goto LABEL_50;
        }
        CFRelease(a4);
        if (!a3) {
          goto LABEL_51;
        }
        goto LABEL_64;
      }
LABEL_65:
      uint64_t v25 = (unsigned char *)std::__throw_bad_variant_access[abi:sn180100]();
      IPC::Decoder::decode<std::tuple<std::optional<WebKit::SecItemResponseData>>>(v25, v26);
      return;
    }
    LOBYTE(v39) = 0;
    char v43 = 0;
    IPC::Decoder::decode<std::tuple<std::optional<WebKit::SecItemResponseData>>>(&v30, v44);
    if (v43 == v34)
    {
      if (v43)
      {
        if (v42 == v33)
        {
          if (v42)
          {
            int v39 = v30;
            std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v40, (uint64_t)v31);
          }
        }
        else if (v42)
        {
          if (v41 != -1) {
            ((void (*)(uint64_t **, unsigned char *))off_1EE9CAF88[v41])(&v48, v40);
          }
          int v41 = -1;
          char v42 = 0;
        }
        else
        {
          int v39 = v30;
          v40[0] = 0;
          int v41 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v40, (uint64_t)v31);
          char v42 = 1;
        }
      }
    }
    else if (v43)
    {
      if (v42)
      {
        if (v41 != -1) {
          ((void (*)(uint64_t **, unsigned char *))off_1EE9CAF88[v41])(&v48, v40);
        }
        int v41 = -1;
      }
      char v43 = 0;
    }
    else
    {
      std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v39, (uint64_t)&v30);
      char v43 = 1;
    }
    if (v34 && v33 && v32 != -1) {
      ((void (*)(uint64_t **, _DWORD *))off_1EE9CAF88[v32])(&v48, v31);
    }
    if (v43)
    {
      if (v45) {
        goto LABEL_65;
      }
      uint64_t v15 = v44;
      int v44 = 0;
      uint64_t v48 = v15;
      std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v49, (uint64_t)&v39);
      uint64_t v16 = (uint64_t)v48;
      uint64_t v48 = 0;
      uint64_t v30 = v16;
      std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)v31, (uint64_t)&v49);
      int v35 = 0;
      if (v53)
      {
        if (v52 != -1) {
          ((void (*)(char *, uint64_t *))off_1EE9CAF88[v52])(&v54, &v50);
        }
        int v52 = -1;
      }
      int v17 = (IPC::Decoder *)v48;
      uint64_t v48 = 0;
      if (v17)
      {
        IPC::Decoder::~Decoder(v17);
        WTF::fastFree(v23, v24);
      }
      if (v43 && v42 && v41 != -1) {
        ((void (*)(uint64_t **, unsigned char *))off_1EE9CAF88[v41])(&v48, v40);
      }
    }
    else
    {
      LOBYTE(v30) = 13;
      int v35 = 1;
    }
    int v11 = v45;
    if (v45 == -1) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  LOWORD(v48) = 0;
  BYTE2(v48) = 0;
  WTF::RunLoop::main(isCurrent);
  long long v12 = (void *)WTF::fastMalloc((WTF *)0x30);
  void *v12 = &unk_1EE9CB000;
  v12[1] = &v48;
  uint64_t v12[2] = &v38;
  _OWORD v12[3] = &v37;
  v12[4] = &v36;
  void v12[5] = a1;
  uint64_t v30 = (uint64_t)v12;
  WTF::RunLoop::dispatch();
  uint64_t v13 = v30;
  uint64_t v30 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v30 = 0x7FF0000000000000;
  v31[0] = 0;
  WTF::BinarySemaphore::waitUntil();
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebKit::SecItemResponseData>>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *a2;
        uint64_t v12 = a2[1];
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_19;
  }
  uint64_t v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v12 = v6;
    uint64_t v13 = 0;
LABEL_19:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_20;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v16 = a2[3];
    if (v16 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v5);
    }
    goto LABEL_31;
  }
  if (v9)
  {
    IPC::ArgumentCoder<WebKit::SecItemResponseData,void>::decode(a2, &v30);
    if (!v33)
    {
      uint64_t v22 = *a2;
      uint64_t v23 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v24 = a2[3];
      if (!v24 || !v23 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22), !v33))
      {
LABEL_31:
        LOBYTE(v25) = 0;
        unsigned __int8 v29 = 0;
        goto LABEL_12;
      }
    }
    int v25 = v30;
    v26[0] = 0;
    int v27 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v26, (uint64_t)v31);
    char v28 = 1;
    unsigned __int8 v29 = 1;
    if (v33 && v32 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9CAF88[v32])(&v34, v31);
    }
  }
  else
  {
    LOBYTE(v30) = 0;
    char v33 = 0;
    std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v25, (uint64_t)&v30);
    unsigned __int8 v29 = 1;
    if (v33 && v32 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9CAF88[v32])(&v34, v31);
    }
  }
LABEL_12:
  if (v29
    || (uint64_t v17 = *a2, v18 = a2[1], *a2 = 0, a2[1] = 0, (v19 = a2[3]) != 0)
    && v18
    && ((*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17), v29))
  {
    uint64_t result = std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)a1, (uint64_t)&v25);
    int v11 = v29;
    a1[40] = 1;
    if (!v11) {
      return result;
    }
    if (!v28) {
      return result;
    }
    if (v27 == -1) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(int *, unsigned char *))off_1EE9CAF88[v27])(&v30, v26);
    if (a1[40]) {
      return result;
    }
  }
  else
  {
    *a1 = 0;
    a1[40] = 0;
  }
  uint64_t v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v20)
  {
    int v21 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v21();
  }
  return result;
}

uint64_t std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(unsigned char *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>(a1 + 8, a2 + 8);
    *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 1;
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 16);
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9CAF88[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 16) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE9CAFA0[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6VectorINS8_9RetainPtrIP16__SecCertificateEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IPKvEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJDnSG_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(unsigned int *)(*(void *)result + 16);
  if (v3 != -1)
  {
    if (!v3)
    {
      *a2 = 0;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CAF88[v3])(&v4, v2);
  }
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 16) = 0;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6VectorINS8_9RetainPtrIP16__SecCertificateEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IPKvEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJDnSG_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<1ul,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6VectorINS8_9RetainPtrIP16__SecCertificateEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IPKvEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJDnSG_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t *a1, const void **a2, const void **a3)
{
}

WTF *std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<1ul,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 16) == 1)
  {
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v5)
    {
      char v6 = *(const void ***)a2;
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6;
        *char v6 = 0;
        if (v8) {
          CFRelease(v8);
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
  }
  else
  {
    return (WTF *)std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__emplace[abi:sn180100]<1ul,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__emplace[abi:sn180100]<1ul,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CAF88[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)a1 = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(a1 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = v5;
  *(_DWORD *)(a1 + 16) = 1;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<2ul,WTF::RetainPtr<void const*>,WTF::RetainPtr<void const*>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_1EE9CAF88[v5])(&v9, a1);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)a1 = v8;
    *(_DWORD *)(a1 + 16) = 2;
    return;
  }
  char v6 = *a3;
  *a3 = 0;
  char v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    CFRelease(v7);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6VectorINS8_9RetainPtrIP16__SecCertificateEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IPKvEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJDnSG_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, void *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6VectorINS8_9RetainPtrIP16__SecCertificateEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IPKvEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJDnSG_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a3 + 12);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 1objc_destroyWeak(this + 2) = v3;
  if (v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v6 = WTF::fastMalloc((WTF *)(8 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(void *)a2 = v6;
      uint64_t v7 = *(unsigned int *)(a3 + 12);
      if (v7)
      {
        uint64_t v8 = (void *)v6;
        char v9 = *(const void ***)a3;
        uint64_t v10 = 8 * v7;
        do
        {
          int v11 = *v9;
          *uint64_t v8 = *v9;
          if (v11) {
            CFRetain(v11);
          }
          ++v8;
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
    }
  }
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6VectorINS8_9RetainPtrIP16__SecCertificateEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IPKvEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJDnSG_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result = *a3;
  *a2 = *a3;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages16SecItemShimProxy18SecItemRequestSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v3 = *(unsigned int *)(a2 + 32);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9CAF88[v3])(&v5, a2 + 16);
    }
    *(_DWORD *)(a2 + 3objc_destroyWeak(this + 2) = -1;
  }
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

void WTF::Detail::CallableWrapper<WebKit::sendSecItemRequest(WebKit::SecItemRequestData::Type,__CFDictionary const*,__CFDictionary const*)::$_0,void>::call(uint64_t a1)
{
  if ((byte_1EB359909 & 1) == 0)
  {
    qword_1EB359918 = 0;
    byte_1EB359909 = 1;
LABEL_18:
    uint64_t v16 = *(WTF::BinarySemaphore **)(a1 + 8);
    WTF::BinarySemaphore::signal(v16);
    return;
  }
  if (!qword_1EB359918) {
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)(qword_1EB359918 + 8);
  if (!v2) {
    goto LABEL_18;
  }
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 40);
  uint64_t v4 = **(const void ***)(a1 + 24);
  char v5 = **(const void ***)(a1 + 32);
  v17[0] = **(unsigned char **)(a1 + 16);
  uint64_t v18 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v19 = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v8 = &unk_1EE9CB028;
  v8[1] = v6;
  uint64_t v8[2] = v7;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 1454;
  *((void *)v10 + objc_destroyWeak(this + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v21 = v10;
  IPC::ArgumentCoder<WebKit::SecItemRequestData,void>::encode(v10, (uint64_t)v17);
  v20[0] = (uint64_t)v8;
  v20[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(v3, &v21, v20, 0, 0);
  uint64_t v12 = v20[0];
  v20[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v21;
  int v21 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
    if (!v5)
    {
LABEL_12:
      if (!v4) {
        return;
      }
LABEL_16:
      CFRelease(v4);
      return;
    }
  }
  else if (!v5)
  {
    goto LABEL_12;
  }
  CFRelease(v5);
  if (v4) {
    goto LABEL_16;
  }
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::SecItemShimProxy::SecItemRequest,WebKit::sendSecItemRequest(WebKit::SecItemRequestData::Type,__CFDictionary const*,__CFDictionary const*)::$_0::operator() const(void)::{lambda(Messages::SecItemShimProxy::SecItemRequest)#1}>(WebKit::sendSecItemRequest(WebKit::SecItemRequestData::Type,__CFDictionary const*,__CFDictionary const*)::$_0::operator() const(void)::{lambda(Messages::SecItemShimProxy::SecItemRequest)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebKit::SecItemResponseData>>>(v8, a2);
    if (v12)
    {
      std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v13, (uint64_t)v8);
      if (v16)
      {
        uint64_t v3 = *(void *)(a1 + 8);
        int v4 = *(unsigned __int8 *)(v3 + 32);
        *(_DWORD *)uint64_t v3 = v13;
        uint64_t v5 = v3 + 8;
        if (v4)
        {
          std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)v14);
        }
        else
        {
          *(unsigned char *)(v3 + 8) = 0;
          *(_DWORD *)(v3 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)v14);
          *(unsigned char *)(v3 + 3objc_destroyWeak(this + 2) = 1;
        }
      }
      uint64_t result = WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 16));
      if (v16 && v15 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9CAF88[v15])(&v17, v14);
      }
      if (v12 && v11 && v10 != -1) {
        return ((uint64_t (*)(int *, uint64_t *))off_1EE9CAF88[v10])(&v13, &v9);
      }
    }
    else
    {
      return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 16));
    }
  }
  else
  {
    uint64_t v6 = *(WTF::BinarySemaphore **)(a1 + 16);
    return WTF::BinarySemaphore::signal(v6);
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    int v4 = a1;
    do
    {
      if (*v4 != (WTF::StringImpl *)-1)
      {
        uint64_t v5 = v4[2];
        void v4[2] = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
        uint64_t v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, a2);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
        uint64_t v7 = *v4;
        *int v4 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2) {
            WTF::StringImpl::destroy(v7, a2);
          }
          else {
            *(_DWORD *)v7 -= 2;
          }
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS6_EUlRT_E_S6_S9_vE3mapERS6_S9_RKSC_(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 3);
  if (v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = result;
      uint64_t result = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(v4 + 8) = v2;
      *(void *)uint64_t v4 = result;
      uint64_t v5 = *((unsigned int *)a2 + 3);
      if (v5)
      {
        uint64_t v6 = *a2;
        uint64_t v7 = 8 * v5;
        do
        {
          WTF::String::isolatedCopy();
          uint64_t v8 = *(unsigned int *)(v4 + 12);
          *(void *)(*(void *)v4 + 8 * v8) = v9;
          *(_DWORD *)(v4 + 1objc_destroyWeak(this + 2) = v8 + 1;
          uint64_t result = 0;
          uint64_t v9 = 0;
          v6 += 8;
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12SharedBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12SharedBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)a2 + 8);
  *((void *)a2 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + objc_destroyWeak(this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoad::SpeculativeLoad(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CB060;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoad::SpeculativeLoad(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CB060;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WebKit::NetworkCache::Entry *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoad::SpeculativeLoad(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v5 = 0;
  WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()((uint64_t *)(a1 + 8), &v5);
  uint64_t result = v5;
  if (v5)
  {
    WebKit::NetworkCache::Entry::~Entry(v5, v1);
    return (WebKit::NetworkCache::Entry *)WTF::fastFree(v3, v4);
  }
  return result;
}

_DWORD *WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(_DWORD *result, void *a2)
{
  uint64_t v2 = result;
  if (*result == 1)
  {
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(result + 46), a2);
    uint64_t v4 = *((void *)v2 + 22);
    *((void *)v2 + 2objc_destroyWeak(this + 2) = 0;
    if (v4) {
      std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](v4, v3);
    }
    *((void *)v2 + 17) = &unk_1EE9B3390;
    uint64_t v5 = *((void *)v2 + 20);
    *((void *)v2 + 20) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v2 + 34));
    uint64_t v7 = *((void *)v2 + 15);
    *((void *)v2 + 15) = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)v2 + 14);
    *((void *)v2 + 14) = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = v2[27];
    if (v9)
    {
      int v10 = (WebKit::NetworkCache::SubresourceLoad **)*((void *)v2 + 12);
      uint64_t v11 = 8 * v9;
      do
      {
        char v12 = *v10;
        IPC::Encoder *v10 = 0;
        if (v12)
        {
          WebKit::NetworkCache::SubresourceLoad::~SubresourceLoad(v12, v6);
          WTF::fastFree(v13, v14);
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
    int v15 = (WTF *)*((void *)v2 + 12);
    if (v15)
    {
      *((void *)v2 + 1objc_destroyWeak(this + 2) = 0;
      v2[26] = 0;
      WTF::fastFree(v15, v6);
    }
    char v16 = (WTF::StringImpl *)*((void *)v2 + 6);
    *((void *)v2 + 6) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v6);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    char v17 = (WTF::StringImpl *)*((void *)v2 + 5);
    *((void *)v2 + 5) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v6);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = (WTF::StringImpl *)*((void *)v2 + 4);
    *((void *)v2 + 4) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v6);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t v19 = (WTF::StringImpl *)*((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v6);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t v20 = (atomic_uchar *)*((void *)v2 + 1);
    *((void *)v2 + objc_destroyWeak(this + 1) = 0;
    if (v20) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v20, v6);
    }
    return (_DWORD *)WTF::fastFree((WTF *)v2, v6);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebKit::NetworkCache::SubresourceInfo **)a1;
    uint64_t v5 = 176 * v3;
    do
    {
      WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo(v4);
      uint64_t v4 = (WebKit::NetworkCache::SubresourceInfo *)(v6 + 176);
      v5 -= 176;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void *WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::take(void *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  if (*(void *)a2) {
    v5 += 80 * *(unsigned int *)(v5 - 4);
  }
  if (v5 == a3)
  {
    *uint64_t result = 0;
    return result;
  }
  uint64_t v6 = *(void *)(a3 + 72);
  *(void *)(a3 + 7objc_destroyWeak(this + 2) = 0;
  *uint64_t result = v6;
  if (*(void *)a2)
  {
    uint64_t v7 = *(void *)a2 + 80 * *(unsigned int *)(*(void *)a2 - 4);
    if (v7 == a3) {
      return result;
    }
  }
  else
  {
    if (!a3) {
      return result;
    }
    uint64_t v7 = 0;
  }
  if (v7 != a3)
  {
    WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebKit::NetworkCache::Key>,WebKit::NetworkCache::Key>((WTF::StringImpl **)a3, a2);
    uint64_t result = *(void **)(a3 + 72);
    *(void *)(a3 + 7objc_destroyWeak(this + 2) = 0;
    if (result) {
      uint64_t result = (void *)std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100]((uint64_t)result);
    }
    ++*(_DWORD *)(*(void *)a2 - 16);
    uint64_t v8 = *(void *)a2;
    if (*(void *)a2) {
      int v9 = *(_DWORD *)(v8 - 12) - 1;
    }
    else {
      int v9 = -1;
    }
    *(_DWORD *)(v8 - 1objc_destroyWeak(this + 2) = v9;
    uint64_t v10 = *(void *)a2;
    if (*(void *)a2)
    {
      unsigned int v11 = 6 * *(_DWORD *)(v10 - 12);
      unsigned int v12 = *(_DWORD *)(v10 - 4);
      if (v11 < v12 && v12 >= 9)
      {
        return (void *)WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash((uint64_t *)a2, v12 >> 1);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  if (a2)
  {
    uint64_t v8 = a2;
    int v9 = (void *)(result + 88);
    do
    {
      *(_OWORD *)(v9 - 7) = 0uLL;
      *(_OWORD *)(v9 - 9) = 0uLL;
      void *v9 = 0;
      v9 += 10;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v4;
    do
    {
      unsigned int v12 = (uint64_t *)(v3 + 80 * v10);
      uint64_t v13 = v12[2];
      if (v13 != -1)
      {
        if (v13)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          int v16 = 0;
          int v17 = *((_DWORD *)v12 + 8);
          do
          {
            unsigned int v18 = v17 & v15;
            uint64_t v19 = v14 + 80 * (v17 & v15);
            int v17 = ++v16 + (v17 & v15);
          }
          while (*(void *)(v19 + 16));
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>::~KeyValuePair(v14 + 80 * v18, v7);
          uint64_t v20 = *v12;
          uint64_t *v12 = 0;
          *(void *)uint64_t v19 = v20;
          uint64_t v21 = v12[1];
          v12[1] = 0;
          *(void *)(v19 + 8) = v21;
          uint64_t v22 = v12[2];
          uint64_t v12[2] = 0;
          *(void *)(v19 + 16) = v22;
          uint64_t v23 = v12[3];
          _OWORD v12[3] = 0;
          *(void *)(v19 + 24) = v23;
          long long v24 = *((_OWORD *)v12 + 2);
          long long v25 = *((_OWORD *)v12 + 3);
          *(void *)(v19 + 64) = v12[8];
          *(_OWORD *)(v19 + 3objc_destroyWeak(this + 2) = v24;
          *(_OWORD *)(v19 + 48) = v25;
          uint64_t v26 = v3 + 80 * v10;
          uint64_t v27 = *(void *)(v26 + 72);
          *(void *)(v26 + 7objc_destroyWeak(this + 2) = 0;
          *(void *)(v14 + 80 * v18 + 7objc_destroyWeak(this + 2) = v27;
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>::~KeyValuePair(v26, v28);
        }
        else
        {
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>::~KeyValuePair(v3 + 80 * v10, v7);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v3)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v3 - 16), v7);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v6 = 0;
  unsigned int v7 = *(_DWORD *)(v3 - 8);
  for (int i = *(_DWORD *)(a2 + 32); ; int i = v6 + v9)
  {
    unsigned int v9 = i & v7;
    uint64_t v10 = v3 + 80 * (i & v7);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11 == -1) {
      goto LABEL_6;
    }
    if (!v11) {
      break;
    }
    if (WebKit::NetworkCache::Key::operator==(v3 + 80 * v9, a2, a3)) {
      return v10;
    }
LABEL_6:
    ++v6;
  }
  if (*a1) {
    return *a1 + 80 * *(unsigned int *)(*a1 - 4);
  }
  else {
    return 0;
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieve(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9CB0B0;
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 16), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9CB0B0;
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 16), 0);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

WebKit::NetworkCache::Entry *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieve(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(WebKit::NetworkCache::Entry **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  unsigned int v7 = v2;
  WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(v1, &v7);
  uint64_t result = v7;
  if (v7)
  {
    WebKit::NetworkCache::Entry::~Entry(v7, v3);
    return (WebKit::NetworkCache::Entry *)WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = (void *)(v7 + 88);
    do
    {
      *(_OWORD *)(v10 - 7) = 0uLL;
      *(_OWORD *)(v10 - 9) = 0uLL;
      void *v10 = 0;
      v10 += 10;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    do
    {
      uint64_t v14 = (uint64_t *)(v4 + 80 * v11);
      uint64_t v15 = v14[2];
      if (v15 != -1)
      {
        if (v15)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          int v18 = 0;
          int v19 = *((_DWORD *)v14 + 8);
          do
          {
            unsigned int v20 = v19 & v17;
            uint64_t v21 = v16 + 80 * (v19 & v17);
            int v19 = ++v18 + (v19 & v17);
          }
          while (*(void *)(v21 + 16));
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~KeyValuePair(v16 + 80 * v20);
          uint64_t v22 = *v14;
          uint64_t *v14 = 0;
          *(void *)uint64_t v21 = v22;
          uint64_t v23 = v14[1];
          v14[1] = 0;
          *(void *)(v21 + 8) = v23;
          uint64_t v24 = v14[2];
          void v14[2] = 0;
          *(void *)(v21 + 16) = v24;
          uint64_t v25 = v14[3];
          void v14[3] = 0;
          *(void *)(v21 + 24) = v25;
          long long v26 = *((_OWORD *)v14 + 2);
          long long v27 = *((_OWORD *)v14 + 3);
          *(void *)(v21 + 64) = v14[8];
          *(_OWORD *)(v21 + 3objc_destroyWeak(this + 2) = v26;
          *(_OWORD *)(v21 + 48) = v27;
          uint64_t v28 = v4 + 80 * v11;
          uint64_t v29 = *(void *)(v28 + 72);
          *(void *)(v28 + 7objc_destroyWeak(this + 2) = 0;
          *(void *)(v16 + 80 * v20 + 7objc_destroyWeak(this + 2) = v29;
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~KeyValuePair(v28);
          if (v14 == a3) {
            uint64_t v12 = v16 + 80 * v20;
          }
        }
        else
        {
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~KeyValuePair(v4 + 80 * v11);
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

unint64_t WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      void v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        uint64_t v8 = 8 * v5;
        unint64_t v9 = (unsigned int **)v4;
        do
        {
          unint64_t v10 = *v9;
          void *v9 = 0;
          *(void *)unint64_t v7 = v10;
          uint64_t result = *v9;
          void *v9 = 0;
          if (result) {
            uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
          }
          v7 += 2;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          void v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result - 8);
    unsigned int v11 = -1640531527;
    __int16 v12 = 0;
    char v13 = 0;
    WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v11, a2 + 1, a2 + 2);
    int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v11);
    for (i = 0; ; int v5 = i + v7)
    {
      unsigned int v7 = v5 & v4;
      uint64_t v8 = (void *)(v3 + 40 * (v5 & v4));
      uint64_t v9 = v8[1];
      if (v9 == a2[1] && v8[2] == a2[2] && v8[3] == a2[3]) {
        return *(void *)(v3 + 40 * v7 + 32);
      }
      if (!v9 && *((_OWORD *)v8 + 1) == 0) {
        break;
      }
      ++i;
    }
    return 0;
  }
  return result;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>::hash<WebKit::NetworkCache::GlobalFrameID>(uint64_t a1)
{
  unsigned int v2 = -1640531527;
  __int16 v3 = 0;
  char v4 = 0;
  WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v2, (void *)(a1 + 8), (void *)(a1 + 16));
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::registerLoad(WebKit::NetworkCache::GlobalFrameID,WebCore::ResourceRequest const&,WebKit::NetworkCache::Key const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::call(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v4 = *(void *)(v1 + 32);
  unsigned int v2 = (uint64_t *)(v1 + 32);
  uint64_t v3 = v4;
  if (v4)
  {
    unsigned int v6 = *(_DWORD *)(v3 - 8);
    unsigned int v21 = -1640531527;
    __int16 v22 = 0;
    char v23 = 0;
    WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v21, a1 + 3, a1 + 4);
    int v7 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v21);
    for (i = 0; ; int v7 = i + (v7 & v6))
    {
      unint64_t v10 = (void *)(v3 + 40 * (v7 & v6));
      uint64_t v11 = v10[1];
      if (v11 == a1[3] && v10[2] == a1[4] && v10[3] == a1[5]) {
        break;
      }
      if (!v11 && *((_OWORD *)v10 + 1) == 0)
      {
        uint64_t v13 = *v2;
        if (!*v2) {
          return;
        }
        unint64_t v10 = (void *)(v13 + 40 * *(unsigned int *)(v13 - 4));
        goto LABEL_12;
      }
      ++i;
    }
    uint64_t v13 = *v2;
    if (!*v2) {
      goto LABEL_13;
    }
LABEL_12:
    v13 += 40 * *(unsigned int *)(v13 - 4);
    if ((void *)v13 == v10) {
      return;
    }
LABEL_13:
    if ((void *)v13 != v10)
    {
      v10[1] = -1;
      uint64_t v14 = (_DWORD *)v10[4];
      v10[4] = 0;
      if (v14) {
        WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v14, v8);
      }
      ++*(_DWORD *)(*v2 - 16);
      uint64_t v15 = *v2;
      if (*v2) {
        int v16 = *(_DWORD *)(v15 - 12) - 1;
      }
      else {
        int v16 = -1;
      }
      *(_DWORD *)(v15 - 1objc_destroyWeak(this + 2) = v16;
      uint64_t v17 = *v2;
      if (*v2)
      {
        unsigned int v18 = 6 * *(_DWORD *)(v17 - 12);
        unsigned int v19 = *(_DWORD *)(v17 - 4);
        if (v18 < v19 && v19 >= 9)
        {
          WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::rehash(v2, v19 >> 1);
        }
      }
    }
  }
}

void WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 40 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v11 = v5;
    uint64_t v12 = v4;
    do
    {
      uint64_t v13 = *(void *)(v12 + 8);
      if (v13 != -1)
      {
        if (v13 || *(_OWORD *)(v12 + 16) != 0)
        {
          WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::reinsert(*a1, v12);
          uint64_t v15 = *(_DWORD **)(v12 + 32);
          *(void *)(v12 + 3objc_destroyWeak(this + 2) = 0;
          if (v15) {
            WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v15, v8);
          }
        }
        else
        {
          uint64_t v14 = *(_DWORD **)(v12 + 32);
          *(void *)(v12 + 3objc_destroyWeak(this + 2) = 0;
          if (v14) {
            WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v14, v8);
          }
        }
      }
      v12 += 40;
      --v11;
    }
    while (v11);
  }
  else if (!v4)
  {
    return;
  }

  WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::reinsert(uint64_t a1, uint64_t a2)
{
  if (a1) {
    unsigned int v4 = *(_DWORD *)(a1 - 8);
  }
  else {
    unsigned int v4 = 0;
  }
  int v5 = WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>::hash<WebKit::NetworkCache::GlobalFrameID>(a2);
  for (i = 0; ; int v5 = i + v8)
  {
    unsigned int v8 = v5 & v4;
    uint64_t v9 = a1 + 40 * (v5 & v4);
    if (!*(void *)(v9 + 8) && *(_OWORD *)(v9 + 16) == 0) {
      break;
    }
    ++i;
  }
  uint64_t v10 = a1 + 40 * v8;
  uint64_t v13 = *(_DWORD **)(v10 + 32);
  uint64_t v12 = (void *)(v10 + 32);
  uint64_t v11 = v13;
  void *v12 = 0;
  if (v13) {
    WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v11, v6);
  }
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 16) = v14;
  uint64_t v15 = *(void *)(a2 + 32);
  *(void *)(a2 + 3objc_destroyWeak(this + 2) = 0;
  void *v12 = v15;
  return v9;
}

void WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::rehash(a1, v3);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::registerLoad(WebKit::NetworkCache::GlobalFrameID,WebCore::ResourceRequest const&,WebKit::NetworkCache::Key const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_1,void,std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CB100;
  unsigned int v3 = (_DWORD *)a1[7];
  a1[7] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v3, a2);
  }
  unsigned int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::registerLoad(WebKit::NetworkCache::GlobalFrameID,WebCore::ResourceRequest const&,WebKit::NetworkCache::Key const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_1,void,std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CB100;
  unsigned int v3 = (_DWORD *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v3, a2);
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::registerLoad(WebKit::NetworkCache::GlobalFrameID,WebCore::ResourceRequest const&,WebKit::NetworkCache::Key const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_1,void,std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(void *)(v3 + 8))
  {
    if (v2) {
      WebKit::NetworkCache::SpeculativeLoadManager::startSpeculativeRevalidation(*(void *)(a1 + 8), (long long *)(a1 + 24), *(const WTF::StringImpl **)(v2 + 80), *(_DWORD *)(v2 + 92), *(unsigned char *)(a1 + 64), *(_WORD *)(a1 + 65), *(unsigned char *)(a1 + 67), *(_WORD *)(a1 + 68));
    }
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(v5 + 176);
    *(void *)(v5 + 176) = v2;
    if (v6) {
      std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](v6, a2);
    }
    *(unsigned char *)(v5 + 20objc_destroyWeak(this + 1) = 1;
    WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::saveToDiskIfReady((WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)v5);
  }
  else if (v2)
  {
    std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](v2, a2);
  }
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(a1, v3);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieveEntryFromStorage(WebKit::NetworkCache::SubresourceInfo const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::SpeculativeLoadManager::retrieveEntryFromStorage(WebKit::NetworkCache::SubresourceInfo const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0::Timings const&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CB128;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieveEntryFromStorage(WebKit::NetworkCache::SubresourceInfo const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::SpeculativeLoadManager::retrieveEntryFromStorage(WebKit::NetworkCache::SubresourceInfo const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0::Timings const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CB128;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieveEntryFromStorage(WebKit::NetworkCache::SubresourceInfo const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::SpeculativeLoadManager::retrieveEntryFromStorage(WebKit::NetworkCache::SubresourceInfo const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0::Timings const&>::call(uint64_t a1, WebKit::NetworkCache::Entry **a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    WebKit::NetworkCache::Entry::decodeStorageRecord(v3, &v25);
    BOOL v4 = v25 != 0;
    if (v25)
    {
      if ((WebCore::ResourceResponseBase::cacheControlContainsNoCache((WebKit::NetworkCache::Entry *)((char *)v25 + 80)) & 1) != 0
        || (WebCore::computeCurrentAge(), double v6 = v5, WebCore::computeFreshnessLifetimeForHTTPFamily(), v6 - v7 > 0.0))
      {
        unsigned int v8 = v25;
        if (*((unsigned char *)v25 + 552))
        {
          char v23 = 0;
          WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(*(void *)(a1 + 8), &v23);
          uint64_t v10 = v23;
          if (v23) {
            goto LABEL_19;
          }
LABEL_12:
          uint64_t v12 = v25;
          uint64_t v25 = 0;
          if (v12)
          {
            WebKit::NetworkCache::Entry::~Entry(v12, v9);
            WTF::fastFree(v18, v19);
          }
          WebKit::NetworkCache::Storage::Record::~Record(v3, v9);
          WTF::fastFree(v13, v14);
          return v4;
        }
        *((_WORD *)v25 + 156) = *((_WORD *)v25 + 156) & 0xC3FF | 0xC00;
      }
      else
      {
        unsigned int v8 = v25;
      }
      uint64_t v25 = 0;
      __int16 v22 = v8;
      WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(*(void *)(a1 + 8), &v22);
      uint64_t v10 = v22;
      if (!v22) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v24 = 0;
      WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(*(void *)(a1 + 8), &v24);
      uint64_t v10 = v24;
      if (!v24) {
        goto LABEL_12;
      }
    }
LABEL_19:
    WebKit::NetworkCache::Entry::~Entry(v10, v9);
    WTF::fastFree(v16, v17);
    goto LABEL_12;
  }
  long long v26 = 0;
  WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(*(void *)(a1 + 8), &v26);
  if (v26)
  {
    WebKit::NetworkCache::Entry::~Entry(v26, v11);
    WTF::fastFree(v20, v21);
  }
  return 0;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  if (result)
  {
    uint64_t v4 = result;
    int v5 = 0;
    unsigned int v6 = *(_DWORD *)(result - 8);
    for (int i = *(_DWORD *)(a2 + 32); ; int i = v5 + v8)
    {
      int v8 = i & v6;
      uint64_t v9 = v4 + 80 * (i & v6);
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10 != -1)
      {
        if (!v10) {
          return 0;
        }
        if (WebKit::NetworkCache::Key::operator==(v9, a2, a3)) {
          break;
        }
      }
      ++v5;
    }
    return 1;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(WebKit::NetworkCache::SubresourceInfo const&,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9CB178;
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 192), 0);
  WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)(a1 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(WebKit::NetworkCache::SubresourceInfo const&,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_1,void>::~CallableWrapper(WebKit::NetworkCache::Entry **a1)
{
  *a1 = (WebKit::NetworkCache::Entry *)&unk_1EE9CB178;
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100](a1 + 24, 0);
  WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)(a1 + 2));

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(WebKit::NetworkCache::SubresourceInfo const&,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_1,void>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = a1 + 16;
  uint64_t result = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(v4[5], a1 + 16, a3);
  if ((result & 1) == 0)
  {
    double v7 = *(WebKit::NetworkCache::Entry **)(a1 + 192);
    *(void *)(a1 + 19objc_destroyWeak(this + 2) = 0;
    uint64_t v11 = v7;
    WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(v4, v5, &v11, (long long *)(a1 + 200), *(_WORD *)(a1 + 232), *(unsigned char *)(a1 + 234), *(_WORD *)(a1 + 236));
    uint64_t result = (uint64_t)v11;
    if (v11)
    {
      WebKit::NetworkCache::Entry::~Entry(v11, v8);
      return WTF::fastFree(v9, v10);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(a1, v3);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CB1A0;
  WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0::~$_0(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9CB1A0;
  WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0::~$_0((void *)a1 + 1);

  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::call(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v4 = *(void *)(result + 16);
  if (!v4 || !*(void *)(v4 + 8)) {
    goto LABEL_21;
  }
  uint64_t v5 = result;
  unsigned int v6 = *(uint64_t **)(result + 8);
  double v7 = (const WebKit::NetworkCache::Key *)(result + 24);
  uint64_t v8 = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(v6 + 5, result + 24, a3);
  uint64_t v9 = v6[5];
  if (v9)
  {
    uint64_t v10 = v9 + 80 * *(unsigned int *)(v9 - 4);
    if (v10 == v8) {
      goto LABEL_10;
    }
  }
  else
  {
    if (!v8) {
      goto LABEL_10;
    }
    uint64_t v10 = 0;
  }
  if (v10 != v8) {
    WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::remove(v6 + 5, v8);
  }
LABEL_10:
  uint64_t result = WebKit::NetworkCache::SpeculativeLoadManager::satisfyPendingRequests((WebKit::NetworkCache::SpeculativeLoadManager *)v6, v7, (WebKit::NetworkCache::Entry *)v3);
  if (!result)
  {
    if (v3)
    {
      if (WebCore::ResourceResponseBase::source((WebCore::ResourceResponseBase *)(v3 + 80)) != 3)
      {
        uint64_t v22 = v3;
        LOBYTE(v20[0]) = 0;
        char v21 = 0;
        WebKit::NetworkCache::SpeculativeLoadManager::addPreloadedEntry((uint64_t)v6, &v22, (long long *)(v5 + 272), (uint64_t)v20);
        std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v20);
        uint64_t result = v22;
        if (!v22) {
          return result;
        }
        goto LABEL_35;
      }
      uint64_t v13 = v5 + 96;
      uint64_t result = WebCore::ResourceResponseBase::hasCacheValidatorFields((WebCore::ResourceResponseBase *)(v3 + 80));
      if (result)
      {
LABEL_29:
        char v23 = (const WebKit::NetworkCache::Entry *)v3;
        WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(v6, v13, &v23, (long long *)(v5 + 272), *(_WORD *)(v5 + 304), *(unsigned char *)(v5 + 306), *(_WORD *)(v5 + 308));
        uint64_t result = (uint64_t)v23;
        if (!v23) {
          return result;
        }
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v13 = v5 + 96;
    }
    double v14 = *(double *)(v5 + 168) - *(double *)(v5 + 176);
    if (v14 != 0.0)
    {
      uint64_t result = WTF::WallTime::now((WTF::WallTime *)result);
      if (v14 > 0.0)
      {
        double v16 = v15 - *(double *)(v5 + 176);
        if (v16 > 0.0)
        {
          double v17 = v15 - *(double *)(v5 + 168);
          if (v17 > 0.0 && v14 / v16 > dbl_1994F6660[v17 > 300.0]) {
            goto LABEL_29;
          }
        }
      }
    }
LABEL_21:
    if (!v3) {
      return result;
    }
    goto LABEL_34;
  }
  if (!v3) {
    return result;
  }
  uint64_t v11 = *(atomic_uint **)(*(void *)(v6[1] + 8) + 24);
  atomic_fetch_add(v11 + 32, 1u);
  WebCore::DiagnosticLoggingKeys::successfulSpeculativeWarmupWithoutRevalidationKey((uint64_t *)v20, (WebCore::DiagnosticLoggingKeys *)result);
  WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage((WebCore::DiagnosticLoggingKeys *)v11, *(void *)(v5 + 272), (uint64_t)v20);
  uint64_t v12 = v20[0];
  v20[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (atomic_fetch_add(v11 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v11 + 32);
    (*(void (**)(atomic_uint *))(*(void *)v11 + 8))(v11);
  }
LABEL_34:
  uint64_t result = v3;
LABEL_35:
  WebKit::NetworkCache::Entry::~Entry((WebKit::NetworkCache::Entry *)result, a2);
  return WTF::fastFree(v18, v19);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(a1, v3);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieveSubresourcesEntry(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)> &&)::$_0,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::SpeculativeLoadManager::retrieveSubresourcesEntry(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)> &&)::$_0::Timings const&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CB1C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieveSubresourcesEntry(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)> &&)::$_0,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::SpeculativeLoadManager::retrieveSubresourcesEntry(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)> &&)::$_0::Timings const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CB1C8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieveSubresourcesEntry(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)> &&)::$_0,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::SpeculativeLoadManager::retrieveSubresourcesEntry(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)> &&)::$_0::Timings const&>::call(uint64_t a1, const WebKit::NetworkCache::Storage::Record **a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    WebKit::NetworkCache::SubresourcesEntry::decodeStorageRecord((WebKit::NetworkCache::SubresourcesEntry *)&v13, v3);
    BOOL v5 = v13 != 0;
    if (v13)
    {
      uint64_t v11 = v13;
      WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)>::operator()(*(void *)(a1 + 8), &v11);
      uint64_t v8 = v11;
      if (!v11)
      {
LABEL_8:
        WebKit::NetworkCache::Storage::Record::~Record(v3, v7);
        WTF::fastFree(v9, v10);
        return v5;
      }
    }
    else
    {
      uint64_t v12 = 0;
      WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)>::operator()(*(void *)(a1 + 8), &v12);
      uint64_t v8 = v12;
      if (!v12) {
        goto LABEL_8;
      }
    }
    std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](v8, v7);
    goto LABEL_8;
  }
  uint64_t v14 = 0;
  WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)>::operator()(*(void *)(a1 + 8), &v14);
  if (v14) {
    std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](v14, v4);
  }
  return 0;
}

uint64_t WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v5 = v2;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](result, v3);
  }
  return result;
}

uint64_t WTF::Function<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(uint64_t *a1, WebKit::NetworkCache::Storage::Record **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v10 = v3;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, WebKit::NetworkCache::Storage::Record **))(*(void *)v2 + 16))(v2, &v10);
  unsigned int v6 = v10;
  uint64_t v10 = 0;
  if (v6)
  {
    WebKit::NetworkCache::Storage::Record::~Record(v6, v4);
    WTF::fastFree(v8, v9);
  }
  return v5;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NetworkCache::Storage::*&)(void),WebKit::NetworkCache::Storage*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CB218;
  uint64_t v2 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v2);
  }
  return a1;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::traverseRecordsFiles(WTF::String const&,WTF::String const&,WTF::Function<void ()(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)> const&)::$_0,void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(uint64_t a1, uint64_t *a2, int a3)
{
  return WebKit::NetworkCache::traverseRecordsFiles(WTF::String const&,WTF::String const&,WTF::Function<void ()(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)> const&)::$_0::operator()((WTF::StringImpl *)(a1 + 8), *a2, a3);
}

WTF::StringImpl *WebKit::NetworkCache::traverseRecordsFiles(WTF::String const&,WTF::String const&,WTF::Function<void ()(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)> const&)::$_0::operator()(WTF::StringImpl *result, uint64_t a2, int a3)
{
  if (!a3)
  {
    uint64_t v3 = result;
    WTF::FileSystemImpl::pathByAppendingComponent();
    uint64_t v4 = *((void *)v3 + 1);
    uint64_t v5 = *((void *)v3 + 2);
    unsigned int v6 = (void *)WTF::fastMalloc((WTF *)0x20);
    *unsigned int v6 = &unk_1EE9CB268;
    v6[1] = v4;
    void v6[2] = &v9;
    uint64_t v6[3] = v5;
    uint64_t v8 = v6;
    WebKit::NetworkCache::traverseDirectory((WTF::FileSystemImpl *)&v9, (const WTF::String *)&v8);
    (*(void (**)(void *))(*v6 + 8))(v6);
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::traverseRecordsFiles(WTF::String const&,WTF::String const&,WTF::Function<void ()(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)> const&)::$_0::operator() const(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)::{lambda(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)#1},void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(WTF::StringImpl *result, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  if (!a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = (WTF *)**((void **)result + 1);
    if (!v5 || !*((_DWORD *)v5 + 1) || (uint64_t result = (WTF::StringImpl *)WTF::equal(v5, *a2, a3), result))
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      uint64_t v6 = *((void *)v4 + 3);
      double v7 = (void *)WTF::fastMalloc((WTF *)0x20);
      *double v7 = &unk_1EE9CB290;
      v7[1] = v6;
      uint64_t v7[2] = &v10;
      uint64_t v7[3] = a2;
      uint64_t v9 = v7;
      WebKit::NetworkCache::traverseDirectory((WTF::FileSystemImpl *)&v10, (const WTF::String *)&v9);
      (*(void (**)(void *))(*v7 + 8))(v7);
      uint64_t result = v10;
      uint64_t v10 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::traverseRecordsFiles(WTF::String const&,WTF::String const&,WTF::Function<void ()(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)> const&)::$_0::operator() const(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)::{lambda(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)#1}::operator() const(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)::{lambda(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)#1},void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(WTF::StringImpl *result, WTF::StringImpl **this, int a3)
{
  if (a3 == 1)
  {
    uint64_t v9[3] = v3;
    v9[4] = v4;
    if (*this)
    {
      if (*((_DWORD *)*this + 1) >= 0x28u)
      {
        uint64_t v6 = result;
        WTF::String::left(this, 0x28u, v9);
        if (*this && *((_DWORD *)*this + 1) >= 0x29u) {
          uint64_t v7 = WTF::StringImpl::endsWith();
        }
        else {
          uint64_t v7 = 0;
        }
        (*(void (**)(void, WTF::StringImpl **, WTF::StringImpl **, void, uint64_t, void))(***((void ***)v6 + 1) + 16))(**((void **)v6 + 1), this, v9, *((void *)v6 + 3), v7, *((void *)v6 + 2));
        uint64_t result = v9[0];
        v9[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()(void)::{lambda(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)#1},void,WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&>::call(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  v29[3] = *MEMORY[0x1E4F143B8];
  WTF::FileSystemImpl::pathByAppendingComponent();
  uint64_t v9 = *a3;
  if (*a3 && *(_DWORD *)(v9 + 4) == 40)
  {
    uint64_t v10 = *(unsigned __int16 **)(v9 + 8);
    if ((*(unsigned char *)(v9 + 16) & 4) != 0)
    {
      if (WebKit::NetworkCache::hexDigitsToHash<unsigned char>((BOOL)v10, 0x28uLL, (uint64_t)v29))
      {
LABEL_24:
        if (a5)
        {
          ++**(_DWORD **)(a1 + 8);
          char v23 = *(uint64_t **)(a1 + 16);
        }
        else
        {
          ++**(_DWORD **)(a1 + 24);
          char v23 = *(uint64_t **)(a1 + 32);
        }
        uint64_t v24 = *v23;
        unint64_t v25 = v29[0];
        uint64_t v26 = HIDWORD(v29[0]);
        *(_DWORD *)(v24 + 4 * ((v29[0] >> 5) & 0x1FFFLL)) |= 1 << SLOBYTE(v29[0]);
        *(_DWORD *)(v24 + 4 * ((v25 >> 37) & 0x1FFF)) |= 1 << v26;
        goto LABEL_30;
      }
    }
    else
    {
      int v11 = *v10;
      if ((v11 - 48) < 0xA || (unsigned __int16)((v11 | 0x20) - 97) <= 5u)
      {
        int v13 = v10[1];
        if ((v13 - 48) < 0xA || (unsigned __int16)((v13 | 0x20) - 97) <= 5u)
        {
          unint64_t v15 = 0;
          double v16 = v10 + 3;
          while (1)
          {
            unint64_t v17 = v15;
            unsigned int v18 = (unsigned __int16)v13;
            char v19 = v13 - 48;
            char v20 = (v13 + 9) & 0xF;
            if (v18 < 0x41) {
              char v20 = v19;
            }
            char v21 = (unsigned __int16)v11 >= 0x41u ? 9 : 0;
            *((unsigned char *)v29 + v17) = v20 | (16 * (v21 + v11));
            if (v17 == 19) {
              goto LABEL_24;
            }
            int v11 = *(v16 - 1);
            if ((v11 - 48) < 0xA || (unsigned __int16)((v11 | 0x20) - 97) <= 5u)
            {
              int v22 = *v16;
              v16 += 2;
              LOWORD(v13) = v22;
              unint64_t v15 = v17 + 1;
              if ((v22 - 48) < 0xA || (unsigned __int16)((v13 | 0x20) - 97) <= 5u) {
                continue;
              }
            }
            if (v17 <= 0x12) {
              break;
            }
            goto LABEL_24;
          }
        }
      }
    }
  }
  WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v28, v8);
LABEL_30:
  uint64_t result = v28;
  uint64_t v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::deleteEmptyRecordsDirectories(WTF::String const&)::$_0,void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(uint64_t a1, uint64_t a2, int a3)
{
  return WebKit::NetworkCache::deleteEmptyRecordsDirectories(WTF::String const&)::$_0::operator()((WTF::StringImpl *)(a1 + 8), a2, a3);
}

WTF::StringImpl *WebKit::NetworkCache::deleteEmptyRecordsDirectories(WTF::String const&)::$_0::operator()(WTF::StringImpl *result, uint64_t a2, int a3)
{
  if (!a3)
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    uint64_t v3 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v3 = &unk_1EE9CB308;
    *((void *)v3 + objc_destroyWeak(this + 1) = &v8;
    uint64_t v7 = v3;
    WebKit::NetworkCache::traverseDirectory((WTF::FileSystemImpl *)&v8, (const WTF::String *)&v7);
    (*(void (**)(WTF::StringImpl *))(*(void *)v3 + 8))(v3);
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v7, v4);
    uint64_t v6 = v7;
    uint64_t v7 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::deleteEmptyRecordsDirectories(WTF::String const&)::$_0::operator() const(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)::{lambda(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)#1},void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v6, v3);
    uint64_t v5 = v6;
    uint64_t v6 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CB330;
  uint64_t v3 = (WTF *)a1[4];
  a1[4] = 0;
  if (v3) {
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = (WTF *)a1[3];
  a1[3] = 0;
  if (v4) {
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v5);
  }
  return a1;
}

uint64_t WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::array<unsigned char,20ul> const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 20 * *(unsigned int *)(a1 + 12);
  long long v5 = *(_OWORD *)v3;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v4 = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  long long v5 = *(void **)a1;
  if (*(void *)a1 <= a3 && (unint64_t)v5 + 20 * *(unsigned int *)(a1 + 12) > a3)
  {
    unint64_t v9 = a3 - (void)v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  return v3;
}

void **WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0xCCCCCCD)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *result;
      uint64_t v4 = *((unsigned int *)result + 3);
      int v5 = 20 * a2;
      unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(20 * a2));
      *((_DWORD *)v2 + objc_destroyWeak(this + 2) = (v5 & 0xFFFFFFFC) / 0x14;
      *uint64_t v2 = v6;
      uint64_t result = (void **)memcpy(v6, v3, 20 * v4);
      if (v3)
      {
        if (*v2 == v3)
        {
          *uint64_t v2 = 0;
          *((_DWORD *)v2 + objc_destroyWeak(this + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v3, v7);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::storeBodyAsBlob(WebKit::NetworkCache::Storage::WriteOperation &)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CB358;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    os_release(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::storeBodyAsBlob(WebKit::NetworkCache::Storage::WriteOperation &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CB358;
  unint64_t v3 = (void *)*((void *)this + 2);
  if (v3) {
    os_release(v3);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::storeBodyAsBlob(WebKit::NetworkCache::Storage::WriteOperation &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3)
  {
    unint64_t v4 = *(void *)(*(void *)(a1 + 72) + 40);
    *(_DWORD *)(v3 + 4 * ((v4 >> 5) & 0x1FFF)) |= 1 << v4;
    *(_DWORD *)(v3 + 4 * ((v4 >> 37) & 0x1FFF)) |= 1 << SBYTE4(v4);
  }
  if (*(unsigned char *)(v2 + 80))
  {
    uint64_t v8 = (long long *)(*(void *)(a1 + 72) + 40);
    unsigned int v9 = *(_DWORD *)(v2 + 124);
    if (v9 == *(_DWORD *)(v2 + 120))
    {
      WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::array<unsigned char,20ul> const&>(v2 + 112, (unint64_t)v8);
    }
    else
    {
      uint64_t v10 = *(void *)(v2 + 112) + 20 * v9;
      long long v11 = *v8;
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(*(void *)(a1 + 72) + 56);
      *(_OWORD *)uint64_t v10 = v11;
      ++*(_DWORD *)(v2 + 124);
    }
  }
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(v5 + 176);
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a1 + 16);
    uint64_t v5 = *(void *)(a1 + 72);
  }

  return WebKit::NetworkCache::Storage::finishWriteOperation((atomic_uchar *)v2, v5, 0);
}

uint64_t std::find_if[abi:sn180100]<WTF::DequeIterator<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>,WebKit::NetworkCache::Storage::removeFromPendingWriteOperations(WebKit::NetworkCache::Key const&)::$_0>(uint64_t result, uint64_t *a2, const WTF::StringImpl *a3, uint64_t a4)
{
  unint64_t v4 = (void *)result;
  uint64_t v5 = *a2;
  for (unint64_t i = a2[1]; *((void *)a3 + 1) != i; a2[1] = i)
  {
    uint64_t result = WebKit::NetworkCache::Key::operator==(*(void *)(*(void *)(v5 + 16) + 8 * i) + 8, a4, a3);
    uint64_t v5 = *a2;
    unint64_t i = a2[1];
    if (result) {
      break;
    }
    unint64_t v10 = *(unsigned int *)(v5 + 24);
    i += v10 + 1;
    do
      i -= v10;
    while (i >= v10);
  }
  *unint64_t v4 = v5;
  v4[1] = i;
  return result;
}

uint64_t std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0,void>,WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x60);
  uint64_t v5 = *a1;
  *unint64_t v4 = &unk_1EE9CB380;
  v4[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = 0;
  void v4[2] = v6;
  uint64_t result = WebKit::NetworkCache::Key::Key((uint64_t)(v4 + 3), (uint64_t)(a1 + 2));
  *a2 = v4;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CB380;
  WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CB380;
  WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0::~$_0((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::NetworkCache::Storage::deleteFiles(*(WebKit::NetworkCache::Storage **)(a1 + 8), (const WebKit::NetworkCache::Key *)(a1 + 24));
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CB3A8;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  unint64_t v4 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CB3A8;
  uint64_t v3 = *((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  uint64_t v5 = (atomic_uchar **)*((void *)a1 + 2);
  *((void *)a1 + objc_destroyWeak(this + 2) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v5);
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(WTF::StringImpl *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *((unsigned int *)a1 + 9);
  if (v2)
  {
    uint64_t v3 = (WebKit::NetworkCache::Storage *)*((void *)a1 + 1);
    unint64_t v4 = (const WebKit::NetworkCache::Key *)*((void *)a1 + 3);
    uint64_t v5 = 72 * v2;
    do
    {
      a1 = WebKit::NetworkCache::Storage::deleteFiles(v3, v4);
      unint64_t v4 = (const WebKit::NetworkCache::Key *)((char *)v4 + 72);
      v5 -= 72;
    }
    while (v5);
  }
  WTF::RunLoop::main(a1);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, (uint64_t *)v1 + 5);
  WTF::RunLoop::dispatch();
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::updateFileModificationTime(WTF::String &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9CB3D0;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::updateFileModificationTime(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CB3D0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::updateFileModificationTime(WTF::String &&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  return WebKit::NetworkCache::updateFileModificationTimeIfNeeded((WebKit::NetworkCache *)(a1 + 8), a2);
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v5;
    do
    {
      long long v11 = (WebKit::NetworkCache::Storage::ReadOperation **)(v4 + 8 * v9);
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v12 != (WebKit::NetworkCache::Storage::ReadOperation *)-1)
        {
          uint64_t v13 = *a1;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          unint64_t v15 = ((unint64_t)v12 + ~((void)v12 << 32)) ^ (((unint64_t)v12 + ~((void)v12 << 32)) >> 22);
          unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
          int v19 = 1;
          do
          {
            unsigned int v20 = v18;
            uint64_t v21 = *(void *)(v13 + 8 * v18);
            unsigned int v18 = (v18 + v19++) & v14;
          }
          while (v21);
          int v22 = (WebKit::NetworkCache::Storage::ReadOperation **)(v13 + 8 * v20);
          std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100](v22, 0);
          char v23 = *v11;
          atomic_uint *v11 = 0;
          *int v22 = v23;
          std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100]((WebKit::NetworkCache::Storage::ReadOperation **)(v4 + 8 * v9), 0);
        }
      }
      else
      {
        std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100]((WebKit::NetworkCache::Storage::ReadOperation **)(v4 + 8 * v9), 0);
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::dispatchReadOperation(std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v2 = *(void **)(a1 + 8);
  unsigned int v3 = WebKit::NetworkCache::Storage::recordPathForKey((uint64_t)&v19, (uint64_t)v2, *(void *)(a1 + 16) + 8);
  atomic_fetch_add((atomic_uint *volatile)(*(void *)(a1 + 16) + 192), 1u);
  if (*(unsigned char *)(a1 + 24)) {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)(a1 + 16) + 192), 1u);
  }
  WTF::MonotonicTime::now(v3);
  *(void *)(*(void *)(a1 + 16) + 216) = v4;
  WebKit::NetworkCache::IOChannel::open((uint64_t *)&v18, (uint64_t)&v19, 0);
  unsigned int v5 = v18;
  int v6 = (atomic_uint *)v2[39];
  atomic_fetch_add(v6 + 2, 1u);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v8 = &unk_1EE9CB420;
  v8[1] = v2;
  uint64_t v8[2] = v7;
  object = v8;
  WebKit::NetworkCache::IOChannel::read((uint64_t)v5, 0, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v6, (uint64_t *)&object);
  uint64_t v10 = (WTF::MonotonicTime *)object;
  if (object) {
    uint64_t v10 = (WTF::MonotonicTime *)(*(uint64_t (**)(void *))(*(void *)object + 8))(object);
  }
  if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v6 + 2);
    uint64_t v10 = (WTF::MonotonicTime *)(*(uint64_t (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    WTF::MonotonicTime::now(v10);
    *(void *)(*(void *)(a1 + 16) + 23objc_destroyWeak(this + 2) = v12;
    WebKit::NetworkCache::Storage::blobPathForKey((WebKit::NetworkCache::Storage *)&v17, (const WebKit::NetworkCache::Key *)v2, *(void *)(a1 + 16) + 8);
    WebKit::NetworkCache::BlobStorage::get((WebKit::NetworkCache::BlobStorage *)(v2 + 42), (uint64_t)&object);
    uint64_t v13 = *(void *)(a1 + 16);
    WTF::OSObjectPtr<dispatch_data_s *>::operator=((void **)(v13 + 136), &object);
    *(_OWORD *)(v13 + 144) = v21;
    *(unsigned char *)(v13 + 160) = v22;
    *(_OWORD *)(v13 + 168) = v23;
    *(_DWORD *)(v13 + 184) = v24;
    int v14 = (WTF::MonotonicTime *)object;
    if (object) {
      os_release(object);
    }
    WTF::MonotonicTime::now(v14);
    *(void *)(*(void *)(a1 + 16) + 240) = v15;
    WebKit::NetworkCache::Storage::finishReadOperation((WTF::RunLoop *)v2, *(void *)(a1 + 16));
    unint64_t v16 = v17;
    unint64_t v17 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v9);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
  if (v18) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v18, v9);
  }
  uint64_t result = v19;
  int v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::IOChannel::open(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5 = WTF::fastMalloc((WTF *)0x28);
  WTF::String::isolatedCopy();
  WebKit::NetworkCache::IOChannel::IOChannel(v5, (const WTF::String *)&v8, a3, 0);
  *a1 = v5;
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::RunLoop *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::dispatchReadOperation(std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>)::$_0::operator() const(void)::{lambda(WebKit::NetworkCache::Data const&,int)#1},void,WebKit::NetworkCache::Data&,int>::call(WTF::MonotonicTime *a1, uint64_t a2, int a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  int v6 = (WTF::RunLoop *)*((void *)a1 + 1);
  WTF::MonotonicTime::now(a1);
  *(void *)(*((void *)a1 + 2) + 224) = v7;
  if (!a3)
  {
    uint64_t v8 = *((void *)a1 + 2);
    long long v63 = 0u;
    long long v64 = 0u;
    double v65 = 0.0;
    uint64_t v66 = 0;
    size_t v69 = 0;
    char v70 = 0;
    uint64_t v71 = 0;
    dispatch_data_t data = 0;
    long long v46 = 0uLL;
    char v47 = 0;
    if (WebKit::NetworkCache::decodeRecordHeader((dispatch_data_t *)a2, (uint64_t)v62, (uint64_t)&data, (uint64_t)v6 + 28))
    {
      long long v11 = (WTF::WallTime *)WebKit::NetworkCache::Key::operator==((uint64_t)&v63, v8 + 8, v10);
      if (v11)
      {
        WTF::WallTime::now(v11);
        if (v65 <= v12)
        {
          char v42 = 0;
          long long v43 = 0uLL;
          char v44 = 0;
          if (!v70) {
            goto LABEL_23;
          }
          uint64_t v13 = v71;
          if ((void)v46 || !data) {
            size_t size = *((void *)&v46 + 1);
          }
          else {
            size_t size = dispatch_data_get_size(data);
          }
          size_t v15 = size + v13;
          size_t v16 = v69;
          size_t v17 = v15 + v69;
          if (*(void *)(a2 + 8) || !*(void *)a2) {
            size_t v18 = *(void *)(a2 + 16);
          }
          else {
            size_t v18 = dispatch_data_get_size(*(dispatch_data_t *)a2);
          }
          if (v17 == v18)
          {
            dispatch_data_t subrange = dispatch_data_create_subrange(*(dispatch_data_t *)a2, v15, v16);
            long long v49 = 0uLL;
            object = subrange;
            LOBYTE(v50) = 0;
            WTF::OSObjectPtr<dispatch_data_s *>::operator=(&v42, &object);
            long long v43 = v49;
            char v44 = v50;
            if (object) {
              os_release(object);
            }
            WebKit::NetworkCache::computeSHA1((uint64_t)&v42, (uint64_t)v6 + 28);
            BOOL v20 = (void *)v67 == object && *((void *)&v67 + 1) == (void)v49;
            if (v20 && v68 == (unint64_t)DWORD2(v49))
            {
LABEL_23:
              long long v22 = v67;
              *(_DWORD *)(v8 + 128) = v68;
              *(_OWORD *)(v8 + 11objc_destroyWeak(this + 2) = v22;
              WebKit::NetworkCache::Key::Key((uint64_t)&object, (uint64_t)&v63);
              double v54 = v65;
              uint64_t v55 = data;
              if (data) {
                os_retain(data);
              }
              long long v56 = v46;
              char v57 = v47;
              long long v58 = v42;
              if (v42) {
                os_retain(v42);
              }
              long long v59 = v43;
              char v60 = v44;
              *(_OWORD *)int v61 = v67;
              *(_DWORD *)&v61[16] = v68;
              v61[20] = 1;
              uint64_t v23 = WTF::fastMalloc((WTF *)0xA8);
              int v24 = object;
              object = 0;
              *(void *)uint64_t v23 = v24;
              uint64_t v25 = v49;
              *(void *)&long long v49 = 0;
              *(void *)(v23 + 8) = v25;
              uint64_t v26 = *((void *)&v49 + 1);
              *((void *)&v49 + objc_destroyWeak(this + 1) = 0;
              *(void *)(v23 + 16) = v26;
              uint64_t v27 = v50;
              uint64_t v50 = 0;
              *(void *)(v23 + 24) = v27;
              long long v29 = v51;
              long long v28 = v52;
              *(void *)(v23 + 64) = v53;
              *(_OWORD *)(v23 + 3objc_destroyWeak(this + 2) = v29;
              *(_OWORD *)(v23 + 48) = v28;
              *(double *)(v23 + 7objc_destroyWeak(this + 2) = v54;
              int v30 = v55;
              *(void *)(v23 + 80) = v55;
              if (v30) {
                os_retain(v30);
              }
              long long v31 = v56;
              *(unsigned char *)(v23 + 104) = v57;
              *(_OWORD *)(v23 + 88) = v31;
              int v32 = v58;
              *(void *)(v23 + 11objc_destroyWeak(this + 2) = v58;
              if (v32) {
                os_retain(v32);
              }
              long long v33 = v59;
              *(unsigned char *)(v23 + 136) = v60;
              *(_OWORD *)(v23 + 120) = v33;
              long long v34 = *(_OWORD *)v61;
              *(void *)(v23 + 157) = *(void *)&v61[13];
              *(_OWORD *)(v23 + 144) = v34;
              std::unique_ptr<WebKit::NetworkCache::Storage::Record>::reset[abi:sn180100]((WebKit::NetworkCache::Storage::Record **)(v8 + 104), (WTF::StringImpl *)v23);
              WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)&object, v35);
            }
          }
          if (v42) {
            os_release(v42);
          }
        }
      }
    }
    if (data) {
      os_release(data);
    }
    uint64_t v36 = (WTF::StringImpl *)*((void *)&v64 + 1);
    *((void *)&v64 + objc_destroyWeak(this + 1) = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v9);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
    uint64_t v37 = (WTF::StringImpl *)v64;
    *(void *)&long long v64 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v9);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    char v38 = (WTF::StringImpl *)*((void *)&v63 + 1);
    *((void *)&v63 + objc_destroyWeak(this + 1) = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, v9);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
    int v39 = (WTF::StringImpl *)v63;
    *(void *)&long long v63 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, v9);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
  }
  uint64_t v40 = *((void *)a1 + 2);

  return WebKit::NetworkCache::Storage::finishReadOperation(v6, v40);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::finishReadOperation(WebKit::NetworkCache::Storage::ReadOperation &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v3 + 196)) {
    goto LABEL_44;
  }
  uint64_t v4 = (WebKit::NetworkCache::Storage::Record **)(v3 + 104);
  uint64_t v5 = *(void *)(v3 + 104);
  if (v5 && !*(void *)(v5 + 112))
  {
    if (*(void *)(v3 + 168) == *(void *)(v3 + 112)
      && *(void *)(v3 + 176) == *(void *)(v3 + 120)
      && *(_DWORD *)(v3 + 184) == (unint64_t)*(unsigned int *)(v3 + 128))
    {
      uint64_t v4 = (WebKit::NetworkCache::Storage::Record **)WTF::OSObjectPtr<dispatch_data_s *>::operator=((void **)(v5 + 112), (void **)(v3 + 136));
      *(_OWORD *)(v5 + 120) = *(_OWORD *)(v3 + 144);
      *(unsigned char *)(v5 + 136) = *(unsigned char *)(v3 + 160);
    }
    else
    {
      uint64_t v4 = (WebKit::NetworkCache::Storage::Record **)std::unique_ptr<WebKit::NetworkCache::Storage::Record>::reset[abi:sn180100](v4, 0);
    }
  }
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v4);
  *(void *)(v3 + 248) = v6;
  uint64_t v7 = *(WebKit::NetworkCache::Storage::Record **)(v3 + 104);
  *(void *)(v3 + 104) = 0;
  long long v43 = v7;
  int v9 = WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()((uint64_t *)(v3 + 96), &v43);
  uint64_t v10 = v43;
  long long v43 = 0;
  if (v10)
  {
    WebKit::NetworkCache::Storage::Record::~Record(v10, v8);
    WTF::fastFree(v38, v39);
    if (v9) {
      goto LABEL_6;
    }
LABEL_44:
    uint64_t v40 = *(void *)(a1 + 16);
    if (!*(unsigned char *)(v40 + 196)) {
      WebKit::NetworkCache::Storage::remove((atomic_uchar *volatile *)v2, (const WebKit::NetworkCache::Key *)(v40 + 8));
    }
    goto LABEL_14;
  }
  if (!v9) {
    goto LABEL_44;
  }
LABEL_6:
  WebKit::NetworkCache::Storage::recordPathForKey((uint64_t)&v41, v2, *(void *)(a1 + 16) + 8);
  uint64_t v11 = *(void *)(v2 + 328);
  WTF::String::isolatedCopy();
  double v12 = (WebKit::NetworkCache::Storage::Record *)WTF::fastMalloc((WTF *)0x10);
  *(void *)double v12 = &unk_1EE9CB3D0;
  uint64_t v13 = v42;
  char v42 = 0;
  long long v43 = v12;
  *((void *)v12 + objc_destroyWeak(this + 1) = v13;
  (*(void (**)(uint64_t, WebKit::NetworkCache::Storage::Record **))(*(void *)v11 + 32))(v11, &v43);
  size_t v15 = v43;
  long long v43 = 0;
  if (v15) {
    (*(void (**)(WebKit::NetworkCache::Storage::Record *))(*(void *)v15 + 8))(v15);
  }
  size_t v16 = v42;
  char v42 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  size_t v17 = v41;
  int v41 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v14);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
LABEL_14:
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)v2);
  int v19 = (uint64_t *)(v2 + 144);
  uint64_t v18 = *(void *)(v2 + 144);
  if (!v18) {
    goto LABEL_47;
  }
  uint64_t v20 = *(void *)(a1 + 16);
  unsigned int v21 = *(_DWORD *)(v18 - 8);
  unint64_t v22 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
  unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  uint64_t v25 = v21 & ((v24 >> 31) ^ v24);
  uint64_t v26 = *(void *)(v18 + 8 * v25);
  if (v26 != v20)
  {
    int v37 = 1;
    while (v26)
    {
      uint64_t v25 = (v25 + v37) & v21;
      uint64_t v26 = *(void *)(v18 + 8 * v25);
      ++v37;
      if (v26 == v20) {
        goto LABEL_16;
      }
    }
    uint64_t v25 = *(unsigned int *)(v18 - 4);
  }
LABEL_16:
  if (v25 != *(_DWORD *)(v18 - 4))
  {
    uint64_t v27 = *(WebKit::NetworkCache::Storage::ReadOperation **)(v18 + 8 * v25);
    *(void *)(v18 + 8 * v25) = -1;
    if (v27)
    {
      WebKit::NetworkCache::Storage::ReadOperation::~ReadOperation(v27);
      WTF::fastFree(v28, v29);
    }
    ++*(_DWORD *)(*v19 - 16);
    uint64_t v30 = *v19;
    int v31 = *v19 ? *(_DWORD *)(v30 - 12) - 1 : -1;
    *(_DWORD *)(v30 - 1objc_destroyWeak(this + 2) = v31;
    uint64_t v18 = *v19;
    if (!*v19) {
      goto LABEL_47;
    }
    unsigned int v32 = *(_DWORD *)(v18 - 4);
    if (6 * *(_DWORD *)(v18 - 12) < v32 && v32 >= 9)
    {
      WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>>::rehash((uint64_t *)(v2 + 144), v32 >> 1);
      uint64_t v18 = *v19;
      if (!*v19) {
        goto LABEL_47;
      }
    }
  }
  if (!*(_DWORD *)(v18 - 12))
  {
LABEL_47:
    if ((*(void *)(v2 + 184) & 0xFFFFFFFFFFFFLL) != 0) {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 152));
    }
  }
  WebKit::NetworkCache::Storage::dispatchPendingReadOperations((WebKit::NetworkCache::Storage::ReadOperation *)v2);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*(atomic_uchar **)v2);
}

WebKit::NetworkCache::Storage::ReadOperation *WTF::Vector<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast@<X0>(WebKit::NetworkCache::Storage::ReadOperation *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((unsigned int *)result + 3);
  if (v2)
  {
    uint64_t v3 = result;
    int v4 = v2 - 1;
    uint64_t v5 = *(void *)(*(void *)result + 8 * (v2 - 1));
    *(void *)(*(void *)result + 8 * (v2 - 1)) = 0;
    *a2 = v5;
    uint64_t result = std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100]((WebKit::NetworkCache::Storage::ReadOperation **)(*(void *)result + 8 * (v2 - 1)), 0);
    *((_DWORD *)v3 + 3) = v4;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t *WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::siftDown(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = *((unsigned int *)result + 3);
  unint64_t v3 = (2 * a2) | 1;
  if (v3 < v2)
  {
    uint64_t v4 = 2 * a2;
    while (1)
    {
      unint64_t v5 = v4 + 2;
      if (v5 >= v2)
      {
        unint64_t v11 = v3;
        goto LABEL_8;
      }
      uint64_t v6 = *(void *)(*result + 8 * v3);
      unsigned int v7 = *(_DWORD *)(v6 + 88);
      uint64_t v8 = *(void *)(*result + 8 * v5);
      unsigned int v9 = *(_DWORD *)(v8 + 88);
      if (v7 != v9) {
        break;
      }
      unint64_t v10 = *(void *)(v6 + 80);
      unint64_t v11 = v3;
      if (v10 >= *(void *)(v8 + 80)) {
        goto LABEL_7;
      }
LABEL_8:
      if (a2 >= v2 || v11 >= v2)
      {
        __break(0xC471u);
        JUMPOUT(0x198C67DC4);
      }
      uint64_t v12 = *result;
      uint64_t v13 = *(void *)(*result + 8 * a2);
      unsigned int v14 = *(_DWORD *)(v13 + 88);
      uint64_t v15 = *(void *)(*result + 8 * v11);
      unsigned int v16 = *(_DWORD *)(v15 + 88);
      if (v14 == v16)
      {
        if (*(void *)(v13 + 80) < *(void *)(v15 + 80)) {
          return result;
        }
      }
      else if (v14 > v16)
      {
        return result;
      }
      *(void *)(v12 + 8 * aobjc_destroyWeak(this + 2) = v15;
      *(void *)(v12 + 8 * v1objc_destroyWeak(this + 1) = v13;
      uint64_t v4 = 2 * v11;
      unint64_t v3 = (2 * v11) | 1;
      a2 = v11;
      if (v3 >= v2) {
        return result;
      }
    }
    unint64_t v11 = v3;
    if (v7 > v9) {
      goto LABEL_8;
    }
LABEL_7:
    unint64_t v11 = v5;
    goto LABEL_8;
  }
  return result;
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (unsigned int v2 = *(_DWORD *)(v1 - 4)) != 0)
  {
    if (6 * *(_DWORD *)(v1 - 12) >= 2 * v2) {
      v2 *= 2;
    }
  }
  else
  {
    unsigned int v2 = 8;
  }
  return WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>>::rehash(a1, v2);
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v5;
    do
    {
      unint64_t v11 = (atomic_uchar ****)(v4 + 8 * v9);
      uint64_t v12 = *v11;
      if (*v11 != (atomic_uchar ***)-1)
      {
        if (v12)
        {
          uint64_t v13 = *a1;
          if (*a1) {
            unsigned int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            unsigned int v14 = 0;
          }
          unint64_t v15 = ((unint64_t)v12 + ~((void)v12 << 32)) ^ (((unint64_t)v12 + ~((void)v12 << 32)) >> 22);
          unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          uint64_t v18 = v14 & ((v17 >> 31) ^ v17);
          if (*(void *)(v13 + 8 * v18))
          {
            int v22 = 1;
            do
              uint64_t v18 = (v18 + v22++) & v14;
            while (*(void *)(v13 + 8 * v18));
          }
          int v19 = (atomic_uchar ****)(v13 + 8 * v18);
          *int v19 = 0;
          uint64_t v20 = *v11;
          WTF::WallTime *v11 = 0;
          *int v19 = v20;
          unsigned int v21 = *v11;
          WTF::WallTime *v11 = 0;
          if (v21)
          {
            uint64_t v23 = v10;
            std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v21, v8);
            uint64_t v10 = v23;
          }
        }
        else
        {
          WTF::WallTime *v11 = 0;
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::dispatchWriteOperation(std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(atomic_ullong **)(a1 + 8);
  WebKit::NetworkCache::Storage::recordDirectoryPathForKey((uint64_t)&v24, (uint64_t)v2, *(void *)(a1 + 16) + 8);
  WebKit::NetworkCache::Storage::recordPathForKey((uint64_t)&v23, (uint64_t)v2, *(void *)(a1 + 16) + 8);
  AllDirectories = WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v24, v3);
  atomic_fetch_add((atomic_uint *volatile)(*(void *)(a1 + 16) + 192), 1u);
  unsigned int v5 = *(void **)(a1 + 16);
  if (v5[16] || (AllDirectories = v5[15]) == 0)
  {
    unint64_t v6 = v5[17];
  }
  else
  {
    AllDirectories = dispatch_data_get_size(AllDirectories);
    unint64_t v6 = (unint64_t)AllDirectories;
  }
  if (v6 > WTF::pageSize((WTF *)AllDirectories))
  {
    WebKit::NetworkCache::Storage::storeBodyAsBlob((uint64_t)&object, v2, *(void *)(a1 + 16));
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v7 = v18 + 8;
    LOBYTE(v25) = 0;
    char v30 = 0;
    if (v36)
    {
      int v19 = object;
      uint64_t v25 = object;
      if (object)
      {
        os_retain(object);
        long long v26 = v32;
        char v27 = v33;
        long long v28 = v34;
        int v29 = v35;
        char v30 = 1;
        WebKit::NetworkCache::Storage::encodeRecord((uint64_t)data, (uint64_t)v2, v7);
        os_release(v19);
      }
      else
      {
        long long v26 = v32;
        char v27 = v33;
        long long v28 = v34;
        int v29 = v35;
        char v30 = 1;
        WebKit::NetworkCache::Storage::encodeRecord((uint64_t)data, (uint64_t)v2, v18 + 8);
      }
      char v8 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    LOBYTE(object) = 0;
    uint64_t v7 = *(void *)(a1 + 16) + 8;
    LOBYTE(v25) = 0;
    char v30 = 0;
  }
  WebKit::NetworkCache::Storage::encodeRecord((uint64_t)data, (uint64_t)v2, v7);
  char v8 = 1;
LABEL_7:
  size_t size = WebKit::NetworkCache::IOChannel::open((uint64_t *)&v21, (uint64_t)&v23, 2);
  if (data[1] || (size_t size = (WTF::WorkQueue *)data[0]) == 0)
  {
    dispatch_data_t v10 = data[2];
  }
  else
  {
    size_t size = (WTF::WorkQueue *)dispatch_data_get_size(data[0]);
    dispatch_data_t v10 = (dispatch_data_t)size;
  }
  unint64_t v11 = v21;
  uint64_t v12 = WTF::WorkQueue::main(size);
  uint64_t v13 = *(void *)(a1 + 16);
  unsigned int v14 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v14 = &unk_1EE9CB498;
  v14[1] = v2;
  void v14[2] = v13;
  void v14[3] = v10;
  uint64_t v20 = v14;
  WebKit::NetworkCache::IOChannel::write((uint64_t)v11, 0, data, v12, (uint64_t *)&v20);
  if (v20) {
    (*(void (**)(void *))(*v20 + 8))(v20);
  }
  if (v11) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v11, v15);
  }
  if (data[0]) {
    os_release(data[0]);
  }
  if ((v8 & 1) == 0 && object) {
    os_release(object);
  }
  unint64_t v16 = v23;
  uint64_t v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t result = v24;
  unint64_t v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::dispatchWriteOperation(std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>)::$_0::operator() const(void)::{lambda(int)#1},void,int>::call(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[1];
  *(void *)(v4 + 48) += a1[3];
  return WebKit::NetworkCache::Storage::finishWriteOperation((atomic_uchar *)v4, v3, a2);
}

void *WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>>(WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CB4C0;
  uint64_t v3 = a1[22];
  a1[22] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>>(WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CB4C0;
  uint64_t v3 = a1[22];
  a1[22] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)(a1 + 1), a2);

  return WTF::fastFree((WTF *)a1, v4);
}

WebKit::NetworkCache::Storage::Record *WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>>(WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = (uint64_t *)(a1 + 176);
  uint64_t v4 = WTF::fastMalloc((WTF *)0xA8);
  *(void *)(WebKit::NetworkCache::Key::Key(v4, v2) + 7objc_destroyWeak(this + 2) = *(void *)(a1 + 80);
  unsigned int v5 = *(void **)(a1 + 88);
  *(void *)(v4 + 80) = v5;
  if (v5) {
    os_retain(v5);
  }
  long long v6 = *(_OWORD *)(a1 + 96);
  *(unsigned char *)(v4 + 104) = *(unsigned char *)(a1 + 112);
  *(_OWORD *)(v4 + 88) = v6;
  uint64_t v7 = *(void **)(a1 + 120);
  *(void *)(v4 + 11objc_destroyWeak(this + 2) = v7;
  if (v7) {
    os_retain(v7);
  }
  long long v8 = *(_OWORD *)(a1 + 128);
  *(unsigned char *)(v4 + 136) = *(unsigned char *)(a1 + 144);
  *(_OWORD *)(v4 + 120) = v8;
  long long v9 = *(_OWORD *)(a1 + 152);
  *(void *)(v4 + 157) = *(void *)(a1 + 165);
  *(_OWORD *)(v4 + 144) = v9;
  unsigned int v14 = (WebKit::NetworkCache::Storage::Record *)v4;
  WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(v3, &v14);
  uint64_t result = v14;
  unsigned int v14 = 0;
  if (result)
  {
    WebKit::NetworkCache::Storage::Record::~Record(result, v10);
    return (WebKit::NetworkCache::Storage::Record *)WTF::fastFree(v12, v13);
  }
  return result;
}

__n128 std::make_unique[abi:sn180100]<WebKit::NetworkCache::Storage::Record,WebKit::NetworkCache::Storage::Record&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0xA8);
  *(void *)(WebKit::NetworkCache::Key::Key(v4, a2) + 7objc_destroyWeak(this + 2) = *(void *)(a2 + 72);
  unsigned int v5 = *(void **)(a2 + 80);
  *(void *)(v4 + 80) = v5;
  if (v5) {
    os_retain(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(v4 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(v4 + 88) = v6;
  uint64_t v7 = *(void **)(a2 + 112);
  *(void *)(v4 + 11objc_destroyWeak(this + 2) = v7;
  if (v7) {
    os_retain(v7);
  }
  long long v8 = *(_OWORD *)(a2 + 120);
  *(unsigned char *)(v4 + 136) = *(unsigned char *)(a2 + 136);
  *(_OWORD *)(v4 + 120) = v8;
  __n128 result = *(__n128 *)(a2 + 144);
  *(void *)(v4 + 157) = *(void *)(a2 + 157);
  *(__n128 *)(v4 + 144) = result;
  *a1 = v4;
  return result;
}

void WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1}::~CompletionHandler(WebKit::NetworkCache::Storage::Record *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 21);
  *((void *)this + 2objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  WebKit::NetworkCache::Storage::Record::~Record(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::CallableWrapper(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = &unk_1EE9CB4E8;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[2];
  a2[2] = 0;
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = a2[3];
  a2[3] = 0;
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = v7;
  long long v8 = *((_OWORD *)a2 + 2);
  long long v9 = *((_OWORD *)a2 + 3);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = a2[8];
  *(_OWORD *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 40) = v8;
  *(void *)(a1 + 80) = a2[9];
  dispatch_data_t v10 = (void *)a2[10];
  *(void *)(a1 + 88) = v10;
  if (v10) {
    os_retain(v10);
  }
  long long v11 = *(_OWORD *)(a2 + 11);
  *(unsigned char *)(a1 + 11objc_destroyWeak(this + 2) = *((unsigned char *)a2 + 104);
  *(_OWORD *)(a1 + 96) = v11;
  uint64_t v12 = (void *)a2[14];
  *(void *)(a1 + 120) = v12;
  if (v12) {
    os_retain(v12);
  }
  long long v13 = *(_OWORD *)(a2 + 15);
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 136);
  *(_OWORD *)(a1 + 128) = v13;
  long long v14 = *((_OWORD *)a2 + 9);
  *(void *)(a1 + 165) = *(uint64_t *)((char *)a2 + 157);
  *(_OWORD *)(a1 + 15objc_destroyWeak(this + 2) = v14;
  uint64_t v15 = a2[21];
  a2[21] = 0;
  *(void *)(a1 + 176) = v15;
  return a1;
}

void *WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CB4E8;
  uint64_t v3 = a1[22];
  a1[22] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CB4E8;
  uint64_t v3 = a1[22];
  a1[22] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)(a1 + 1), a2);

  return WTF::fastFree((WTF *)a1, v4);
}

WebKit::NetworkCache::Storage::Record *WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 176);
  std::make_unique[abi:sn180100]<WebKit::NetworkCache::Storage::Record,WebKit::NetworkCache::Storage::Record&>((uint64_t *)&v6, a1 + 8);
  WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(v1, &v6);
  __n128 result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    WebKit::NetworkCache::Storage::Record::~Record(result, v2);
    return (WebKit::NetworkCache::Storage::Record *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t *WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::siftUp(uint64_t *result, unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = *((unsigned int *)result + 3);
    do
    {
      unint64_t v3 = a2 - 1;
      unint64_t v4 = (a2 - 1) >> 1;
      if (v4 >= v2 || a2 >= v2)
      {
        __break(0xC471u);
        JUMPOUT(0x198C6888CLL);
      }
      uint64_t v5 = *result;
      uint64_t v6 = *(void *)(*result + 8 * v4);
      unsigned int v7 = *(_DWORD *)(v6 + 88);
      uint64_t v8 = *(void *)(*result + 8 * a2);
      unsigned int v9 = *(_DWORD *)(v8 + 88);
      if (v7 == v9)
      {
        if (*(void *)(v6 + 80) < *(void *)(v8 + 80)) {
          return result;
        }
      }
      else if (v7 > v9)
      {
        return result;
      }
      *(void *)(v5 + 8 * v4) = v8;
      *(void *)(v5 + 8 * aobjc_destroyWeak(this + 2) = v6;
      a2 = (a2 - 1) >> 1;
    }
    while (v3 > 1);
  }
  return result;
}

uint64_t WTF::Vector<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = (uint64_t *)WTF::Vector<WebKit::NetworkLoad *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *v3;
  *unint64_t v3 = 0;
  *(void *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = v4 + 1;
  return 1;
}

uint64_t *WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>::expandCapacity(uint64_t *result)
{
  unint64_t v1 = *((unsigned int *)result + 6);
  unint64_t v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF) {
    unint64_t v2 = 15;
  }
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    unint64_t v3 = result;
    uint64_t v4 = (char *)result[2];
    int v5 = v2 + 1;
    uint64_t v6 = (char *)WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
    *((_DWORD *)v3 + 6) = v5;
    void v3[2] = (uint64_t)v6;
    unint64_t v7 = v3[1];
    if (*v3 <= v7)
    {
      __n128 result = (uint64_t *)memcpy(&v6[8 * *v3], &v4[8 * *v3], 8 * v7 - 8 * *v3);
    }
    else
    {
      memcpy(v6, v4, 8 * v7);
      uint64_t v8 = *v3 - v1 + *((unsigned int *)v3 + 6);
      __n128 result = (uint64_t *)memcpy((void *)(v3[2] + 8 * v8), &v4[8 * *v3], 8 * v1 - 8 * *v3);
      *unint64_t v3 = v8;
    }
    if (v4)
    {
      if ((char *)v3[2] == v4)
      {
        void v3[2] = 0;
        *((_DWORD *)v3 + 6) = 0;
      }
      return (uint64_t *)WTF::fastFree((WTF *)v4, v9);
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      dispatch_data_t v10 = (WTF **)(v4 + 8 * i);
      long long v11 = *v10;
      if (*v10 != (WTF *)-1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = ((unint64_t)v11 + ~((void)v11 << 32)) ^ (((unint64_t)v11 + ~((void)v11 << 32)) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 8 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          unsigned int v21 = (WTF **)(v12 + 8 * v19);
          *unsigned int v21 = 0;
          int v22 = *v10;
          void *v10 = 0;
          *unsigned int v21 = v22;
          uint64_t v23 = *v10;
          void *v10 = 0;
          if (v23) {
            std::default_delete<WebKit::NetworkCache::Storage::TraverseOperation>::operator()[abi:sn180100](v23, v8);
          }
        }
        else
        {
          void *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::traverseWithinRootPath(WTF::String const&,WTF::String const&,WTF::OptionSet<WebKit::NetworkCache::Storage::TraverseFlag>,WTF::Function<void ()(WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CB510;
  unsigned int v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::traverseWithinRootPath(WTF::String const&,WTF::String const&,WTF::OptionSet<WebKit::NetworkCache::Storage::TraverseFlag>,WTF::Function<void ()(WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CB510;
  unsigned int v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::traverseWithinRootPath(WTF::String const&,WTF::String const&,WTF::OptionSet<WebKit::NetworkCache::Storage::TraverseFlag>,WTF::Function<void ()(WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&)> &&)::$_0,void>::call(void *a1)
{
  int v2 = (WTF::FileSystemImpl *)(a1 + 3);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  int v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v5 = &unk_1EE9CB538;
  v5[1] = v4;
  v5[2] = v3;
  uint64_t v14 = (uint64_t)v5;
  WebKit::NetworkCache::traverseRecordsFiles(v2, v3 + 8, (uint64_t)&v14);
  int v6 = (WTF::RunLoop *)v14;
  uint64_t v14 = 0;
  if (v6) {
    int v6 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v6 + 8))(v6);
  }
  char v7 = 0;
  uint64_t v8 = (atomic_uchar *)(a1[2] + 32);
  atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    int v6 = (WTF::RunLoop *)MEMORY[0x19972E8D0](v8);
  }
  for (uint64_t i = a1[2];
        *(_DWORD *)(i + 36);
        int v6 = (WTF::RunLoop *)WTF::Condition::waitUntilUnchecked<WTF::Lock>(i + 33, (atomic_uchar *)(i + 32), (WTF::TimeWithDynamicClockType *)&v14))
  {
    uint64_t v14 = 0x7FF0000000000000;
    int v15 = 0;
  }
  int v10 = 1;
  atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    int v6 = (WTF::RunLoop *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
  }
  WTF::RunLoop::main(v6);
  uint64_t v11 = a1[2];
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v12 = &unk_1EE9CB588;
  v12[1] = v4;
  uint64_t v12[2] = v11;
  uint64_t v14 = (uint64_t)v12;
  WTF::RunLoop::dispatch();
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::traverseWithinRootPath(WTF::String const&,WTF::String const&,WTF::OptionSet<WebKit::NetworkCache::Storage::TraverseFlag>,WTF::Function<void ()(WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&)> &&)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)#1},void,WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&>::call(WTF::StringImpl *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return result;
  }
  int v5 = result;
  uint64_t v6 = *((void *)result + 1);
  WTF::FileSystemImpl::pathByAppendingComponent();
  uint64_t v8 = *((void *)v5 + 2);
  if (*(unsigned char *)(v8 + 16))
  {
    double v15 = WebKit::NetworkCache::fileTimes((WebKit::NetworkCache *)&v36, v7);
    double v17 = v16;
    WTF::WallTime::now(v18);
    double v20 = v19 - v15;
    double v21 = v17 - v15;
    BOOL v23 = v17 - v15 <= v20 && v21 >= 0.0 && v20 > 0.0;
    double v24 = v21 / v20;
    if (v23) {
      double v9 = v24;
    }
    else {
      double v9 = 0.0;
    }
    uint64_t v8 = *((void *)v5 + 2);
    if ((*(unsigned char *)(v8 + 16) & 2) != 0) {
      goto LABEL_4;
    }
  }
  else
  {
    double v9 = -1.0;
    if ((*(unsigned char *)(v8 + 16) & 2) != 0)
    {
LABEL_4:
      WebKit::NetworkCache::blobPathForRecordPath((WebKit::NetworkCache *)&v37, v36);
      int v12 = WTF::FileSystemImpl::hardLinkCount((WTF::FileSystemImpl *)&v37, v10) - 1;
      if ((_BYTE)v11) {
        int v13 = v12;
      }
      else {
        int v13 = 0;
      }
      uint64_t v14 = v37;
      uint64_t v37 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v11);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t v8 = *((void *)v5 + 2);
      goto LABEL_23;
    }
  }
  int v13 = 0;
LABEL_23:
  char v25 = 0;
  long long v26 = (atomic_uchar *)(v8 + 32);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v8 + 32), (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
  if (v25) {
    MEMORY[0x19972E8D0](v26);
  }
  ++*(_DWORD *)(*((void *)v5 + 2) + 36);
  char v27 = WebKit::NetworkCache::IOChannel::open((uint64_t *)&v35, (uint64_t)&v36, 0);
  long long v28 = v35;
  uint64_t v29 = WTF::WorkQueue::main(v27);
  uint64_t v30 = *((void *)v5 + 2);
  uint64_t v31 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v31 = &unk_1EE9CB560;
  *(void *)(v31 + 8) = v6;
  *(void *)(v31 + 16) = v30;
  *(double *)(v31 + 24) = v9;
  *(_DWORD *)(v31 + 3objc_destroyWeak(this + 2) = v13;
  uint64_t v37 = (WTF::StringImpl *)v31;
  WebKit::NetworkCache::IOChannel::read((uint64_t)v28, 0, 0xFFFFFFFFFFFFFFFFLL, v29, (uint64_t *)&v37);
  if (v37) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v37 + 8))(v37);
  }
  uint64_t v33 = *((void *)v5 + 2);
  if (*(_DWORD *)(v33 + 36) >= 6u)
  {
    do
    {
      uint64_t v37 = (WTF::StringImpl *)0x7FF0000000000000;
      int v38 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v33 + 33, (atomic_uchar *)(v33 + 32), (WTF::TimeWithDynamicClockType *)&v37);
    }
    while (*(_DWORD *)(v33 + 36) > 5u);
  }
  if (v28) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v28, v32);
  }
  int v34 = 1;
  atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
  if (v34 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
  }
  uint64_t result = v36;
  char v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::traverseWithinRootPath(WTF::String const&,WTF::String const&,WTF::OptionSet<WebKit::NetworkCache::Storage::TraverseFlag>,WTF::Function<void ()(WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&)> &&)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)#1}::operator() const(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)::{lambda(WebKit::NetworkCache::Data &,int)#1},void,WebKit::NetworkCache::Data,int>::call(uint64_t a1, dispatch_data_t *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  long long v37 = 0u;
  long long v38 = 0u;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v43 = 0;
  char v44 = 0;
  uint64_t v45 = 0;
  object = 0;
  long long v22 = 0uLL;
  char v23 = 0;
  if (WebKit::NetworkCache::decodeRecordHeader(a2, (uint64_t)v36, (uint64_t)&object, v3 + 28))
  {
    WebKit::NetworkCache::Key::Key((uint64_t)v24, (uint64_t)&v37);
    uint64_t v25 = v39;
    long long v26 = object;
    if (object) {
      os_retain(object);
    }
    long long v27 = v22;
    char v28 = v23;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v29 = 0;
    char v32 = 0;
    long long v33 = v41;
    int v34 = v42;
    char v35 = 1;
    v18[0] = v43;
    uint64_t v4 = *(void *)(a1 + 24);
    int v19 = *(_DWORD *)(a1 + 32);
    v18[1] = v4;
    WTF::SHA1::hexDigest();
    WTF::String::fromUTF8();
    if (v17)
    {
      if (*(_DWORD *)v17 == 1) {
        WTF::fastFree(v17, v5);
      }
      else {
        --*(_DWORD *)v17;
      }
    }
    (*(void (**)(void, unsigned char *, void *))(**(void **)(*(void *)(a1 + 16) + 24) + 16))(*(void *)(*(void *)(a1 + 16) + 24), v24, v18);
    char v7 = v20;
    double v20 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)v24, v6);
  }
  char v8 = 0;
  double v9 = (atomic_uchar *)(*(void *)(a1 + 16) + 32);
  int v10 = 1;
  atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x19972E8D0](v9);
  }
  uint64_t v11 = *(void *)(a1 + 16);
  --*(_DWORD *)(v11 + 36);
  WTF::Condition::notifyOne((WTF::Condition *)(v11 + 33));
  atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  if (object) {
    os_release(object);
  }
  int v13 = (WTF::StringImpl *)*((void *)&v38 + 1);
  *((void *)&v38 + objc_destroyWeak(this + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = (WTF::StringImpl *)v38;
  *(void *)&long long v38 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  double v15 = (WTF::StringImpl *)*((void *)&v37 + 1);
  *((void *)&v37 + objc_destroyWeak(this + 1) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v12);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t result = (WTF::StringImpl *)v37;
  *(void *)&long long v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::traverseWithinRootPath(WTF::String const&,WTF::String const&,WTF::OptionSet<WebKit::NetworkCache::Storage::TraverseFlag>,WTF::Function<void ()(WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&)> &&)::$_0::operator() const(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  long long v27 = 0;
  v25[0] = 0;
  v25[1] = 0;
  int v26 = 0;
  (*(void (**)(void, void, void *))(**(void **)(v2 + 24) + 16))(*(void *)(v2 + 24), 0, v25);
  int v5 = v27;
  long long v27 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)v3);
  uint64_t v7 = *(void *)(v3 + 304);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unsigned int v9 = *(_DWORD *)(v7 - 8);
    unint64_t v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
    unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    uint64_t v13 = v9 & ((v12 >> 31) ^ v12);
    uint64_t v14 = *(void *)(v7 + 8 * v13);
    if (v14 != v8)
    {
      int v15 = 1;
      while (v14)
      {
        uint64_t v13 = (v13 + v15) & v9;
        uint64_t v14 = *(void *)(v7 + 8 * v13);
        ++v15;
        if (v14 == v8) {
          goto LABEL_12;
        }
      }
      uint64_t v13 = *(unsigned int *)(v7 - 4);
    }
LABEL_12:
    if (v13 != *(_DWORD *)(v7 - 4))
    {
      double v16 = (uint64_t *)(v3 + 304);
      double v17 = *(WTF **)(v7 + 8 * v13);
      *(void *)(v7 + 8 * v13) = -1;
      if (v17) {
        std::default_delete<WebKit::NetworkCache::Storage::TraverseOperation>::operator()[abi:sn180100](v17, v6);
      }
      ++*(_DWORD *)(*v16 - 16);
      uint64_t v18 = *v16;
      if (*v16) {
        int v19 = *(_DWORD *)(v18 - 12) - 1;
      }
      else {
        int v19 = -1;
      }
      *(_DWORD *)(v18 - 1objc_destroyWeak(this + 2) = v19;
      uint64_t v20 = *v16;
      if (*v16)
      {
        unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
        unsigned int v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9) {
          WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>>::rehash((uint64_t *)(v3 + 304), v22 >> 1);
        }
      }
    }
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*(atomic_uchar **)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::clear(WTF::String &&,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CB5B0;
  uint64_t v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[4];
  a1[4] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::clear(WTF::String &&,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CB5B0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v5);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::clear(WTF::String &&,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = a1[1];
  WTF::String::isolatedCopy();
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9CB5D8;
  v4[1] = v3;
  unint64_t v11 = v4;
  WebKit::NetworkCache::traverseRecordsFiles((WTF::FileSystemImpl *)&v12, (uint64_t)(a1 + 5), (uint64_t)&v11);
  uint64_t v6 = v11;
  unint64_t v11 = 0;
  if (v6) {
    (*(void (**)(void *))(*v6 + 8))(v6);
  }
  WebKit::NetworkCache::deleteEmptyRecordsDirectories((WebKit::NetworkCache *)&v12, v5);
  uint64_t v7 = WebKit::NetworkCache::BlobStorage::synchronize((WebKit::NetworkCache::BlobStorage *)(v2 + 336));
  WTF::RunLoop::main(v7);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v11, a1 + 4);
  WTF::RunLoop::dispatch();
  unsigned int v9 = v11;
  unint64_t v11 = 0;
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::clear(WTF::String &&,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::String const&,$_0,$_0,BOOL,$_0)#1},void,$_0,$_0,$_0,BOOL,$_0>::call(uint64_t a1)
{
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (*(double *)(a1 + 8) <= -INFINITY
    || (WebKit::NetworkCache::fileTimes((WebKit::NetworkCache *)&v5, v2), v3 >= *(double *)(a1 + 8)))
  {
    WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v5, v2);
  }
  uint64_t result = v5;
  int v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CB600;
  uint64_t v2 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CB600;
  double v3 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::String::isolatedCopy();
  unint64_t v12 = 0;
  double v3 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
  *(void *)double v3 = &unk_1EE9CB628;
  *((void *)v3 + objc_destroyWeak(this + 1) = v2;
  unint64_t v11 = v3;
  WebKit::NetworkCache::traverseRecordsFiles((WTF::FileSystemImpl *)&v13, (uint64_t)&v12, (uint64_t)&v11);
  uint64_t v4 = v11;
  unint64_t v11 = 0;
  if (v4) {
    uint64_t v4 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v4 + 8))(v4);
  }
  WTF::RunLoop::main(v4);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v6 = &unk_1EE9CB650;
  *((void *)v6 + objc_destroyWeak(this + 1) = v2;
  *((void *)v6 + objc_destroyWeak(this + 2) = v5;
  unint64_t v11 = v6;
  WTF::RunLoop::dispatch();
  uint64_t v8 = v11;
  unint64_t v11 = 0;
  if (v8) {
    (*(void (**)(WTF::RunLoop *))(*(void *)v8 + 8))(v8);
  }
  unsigned int v9 = v12;
  unint64_t v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0::operator()(void)::{lambda(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)#1},void,WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    WebKit::NetworkCache::blobPathForRecordPath((WebKit::NetworkCache *)&v28, v29);
    double v6 = WebKit::NetworkCache::fileTimes((WebKit::NetworkCache *)&v29, v5);
    double v8 = v7;
    unint64_t v10 = (WTF::WallTime *)WTF::FileSystemImpl::hardLinkCount((WTF::FileSystemImpl *)&v28, v9);
    int v11 = (int)v10;
    uint64_t v13 = v12;
    uint64_t v14 = (WTF *)WTF::WallTime::now(v10);
    double v16 = v15 - v6;
    double v17 = v8 - v6;
    BOOL v19 = v8 - v6 <= v16 && v17 >= 0.0 && v16 > 0.0;
    double v20 = v17 / v16 * 1.1;
    if (!v19) {
      double v20 = 0.0;
    }
    if (v20 <= 1.0) {
      double v21 = (1.0 - v20) * 0.33;
    }
    else {
      double v21 = 0.0;
    }
    if (v13)
    {
      unsigned int v22 = v11 - 1;
      if (v11 != 1)
      {
        if (v22 >= 5) {
          unsigned int v22 = 5;
        }
        double v21 = v21 / (double)v22;
      }
    }
    WTF::cryptographicallyRandomUnitInterval(v14);
    if (v24 < v21)
    {
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v29, v23);
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v28, v25);
    }
    int v26 = v28;
    char v28 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v23);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    long long v27 = v29;
    uint64_t v29 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v23);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CB650;
  uint64_t v2 = (atomic_uchar **)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CB650;
  double v3 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(unsigned char *)(v1 + 8objc_destroyWeak(this + 1) = 0;
  return WebKit::NetworkCache::Storage::synchronize(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::deleteOldVersions(void)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  double v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9CB678;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::parseInteger<unsigned int,char16_t>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = 0;
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  if (!a1 || !a2) {
    return v3 | v4 | v2;
  }
  uint64_t v5 = (unsigned __int16 *)(a1 + 2);
  while (1)
  {
    int v6 = *(v5 - 1);
    if ((v6 - 9) >= 5 && v6 != 32) {
      break;
    }
    ++v5;
    if (!--a2) {
      goto LABEL_41;
    }
  }
  if (v6 == 43)
  {
    if (!--a2)
    {
LABEL_41:
      uint64_t v3 = 0;
      unsigned int v2 = 0;
      unsigned int v4 = 0;
      return v3 | v4 | v2;
    }
    int v6 = *v5;
  }
  else
  {
    --v5;
  }
  if ((v6 - 48) > 9) {
    goto LABEL_41;
  }
  unsigned int v2 = 0;
  char v7 = 0;
  while (1)
  {
    int v8 = v6 - 48;
    uint64_t v9 = 10 * v2;
    if ((v9 & 0xFFFFFFFF00000000) == 0) {
      v2 *= 10;
    }
    BOOL v10 = __CFADD__(v2, v8);
    unsigned int v11 = v2 + v8;
    int v12 = v10;
    if (!v10) {
      unsigned int v2 = v11;
    }
    if ((v9 & 0xFFFFFFFF00000000) != 0) {
      int v13 = 1;
    }
    else {
      int v13 = v12;
    }
    if (v13) {
      char v7 = 1;
    }
    if (!--a2) {
      break;
    }
    int v14 = v5[1];
    ++v5;
    int v6 = v14;
    unsigned int v15 = v14 - 48;
    if ((v14 - 48) > 9 || v15 >= 0xA)
    {
      if (!v7)
      {
        uint64_t v17 = 0;
        while (1)
        {
          int v18 = v5[v17];
          if ((v18 - 9) >= 5 && v18 != 32) {
            break;
          }
          if (a2 == ++v17) {
            goto LABEL_40;
          }
        }
      }
      goto LABEL_41;
    }
  }
  if (v7) {
    goto LABEL_41;
  }
LABEL_40:
  unsigned int v4 = v2 & 0xFFFFFF00;
  unsigned int v2 = v2;
  uint64_t v3 = 0x100000000;
  return v3 | v4 | v2;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::PrefetchCache::*&)(void),WebKit::PrefetchCache*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  unsigned int v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::take(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (*a2) {
    v3 += 48 * *(unsigned int *)(v3 - 4);
  }
  if (v3 == a3)
  {
    *a1 = 0;
    return;
  }
  uint64_t v4 = *(void *)(a3 + 40);
  *(void *)(a3 + 40) = 0;
  *a1 = v4;
  if (*a2)
  {
    uint64_t v5 = *a2 + 48 * *(unsigned int *)(*a2 - 4);
    if (v5 == a3) {
      return;
    }
  }
  else
  {
    if (!a3) {
      return;
    }
    uint64_t v5 = 0;
  }
  if (v5 != a3) {
    WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::remove(a2, a3);
  }
}

void WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::remove(uint64_t *a1, uint64_t a2)
{
  WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>((WTF::StringImpl **)a2, (WTF::StringImpl *)a2);
  int v6 = *(void **)(a2 + 40);
  uint64_t v5 = (void *)(a2 + 40);
  uint64_t v4 = v6;
  *uint64_t v5 = 0;
  if (v6) {
    std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v5, v4);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v7 = *a1;
  if (*a1) {
    int v8 = *(_DWORD *)(v7 - 12) - 1;
  }
  else {
    int v8 = -1;
  }
  *(_DWORD *)(v7 - 1objc_destroyWeak(this + 2) = v8;
  uint64_t v9 = *a1;
  if (*a1)
  {
    unsigned int v10 = 6 * *(_DWORD *)(v9 - 12);
    unsigned int v11 = *(_DWORD *)(v9 - 4);
    if (v10 < v11 && v11 >= 9)
    {
      WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(a1, v11 >> 1, 0);
    }
  }
}

WTF **WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(48 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    uint64_t v5 = v5;
    uint64_t v34 = v5;
    do
    {
      unsigned int v11 = (WTF::StringImpl **)(v4 + 48 * v9);
      if (*v11 != (WTF::StringImpl *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)(v4 + 48 * v9)))
        {
          uint64_t v12 = v4 + 48 * v9;
          int v14 = *(WTF::StringImpl **)(v12 + 40);
          int v13 = (void *)(v12 + 40);
          int v8 = v14;
          void *v13 = 0;
          if (v14) {
            std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v13, v8);
          }
          unsigned int v15 = *v11;
          WTF::RunLoop *v11 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v8);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
        else
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unsigned int v18 = *((_DWORD *)*v11 + 4);
          if (v18 >= 0x100) {
            unsigned int v19 = v18 >> 8;
          }
          else {
            unsigned int v19 = WTF::StringImpl::hashSlowCase(*v11);
          }
          int v20 = 0;
          do
          {
            unsigned int v21 = v19 & v17;
            unsigned int v22 = (WTF **)(v16 + 48 * (v19 & v17));
            int v23 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v22);
            unsigned int v19 = ++v20 + v21;
          }
          while (!v23);
          uint64_t v24 = v16 + 48 * v21;
          long long v27 = *(WTF::StringImpl **)(v24 + 40);
          int v26 = (void *)(v24 + 40);
          uint64_t v25 = v27;
          void *v26 = 0;
          if (v27) {
            std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v26, v25);
          }
          char v28 = *v22;
          *unsigned int v22 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v25);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          WTF::URL::URL((uint64_t)v22, (uint64_t *)(v4 + 48 * v9));
          uint64_t v29 = v4 + 48 * v9;
          uint64_t v31 = *(void *)(v29 + 40);
          uint64_t v30 = (WTF::StringImpl **)(v29 + 40);
          *uint64_t v30 = 0;
          void *v26 = v31;
          int v8 = *v30;
          *uint64_t v30 = 0;
          if (v8) {
            std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v30, v8);
          }
          char v32 = *v11;
          WTF::RunLoop *v11 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, v8);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
          uint64_t v5 = v34;
          if (v11 == a3) {
            unsigned int v10 = v22;
          }
        }
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
    unsigned int v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>,WTF::URL>(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v6 = *((_DWORD *)*a2 + 4);
  if (v6 >= 0x100) {
    unsigned int v7 = v6 >> 8;
  }
  else {
    unsigned int v7 = WTF::StringImpl::hashSlowCase(*a2);
  }
  unsigned int v9 = v7 & v5;
  int v8 = (WTF **)(v2 + 48 * (v7 & v5));
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v8))
  {
LABEL_11:
    if (*a1) {
      return *a1 + 48 * *(unsigned int *)(*a1 - 4);
    }
    else {
      return 0;
    }
  }
  else
  {
    int v11 = 1;
    while (*v8 == (WTF *)-1 || (WTF::equal(*v8, *a2, v10) & 1) == 0)
    {
      unsigned int v9 = (v9 + v11) & v5;
      int v8 = (WTF **)(v2 + 48 * v9);
      ++v11;
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v8)) {
        goto LABEL_11;
      }
    }
  }
  return (uint64_t)v8;
}

WTF **WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(a1, v5, a2);
}

void WTF::HashMapTranslator<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::URL const&,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>,WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>> WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::inlineAdd<WTF::URL const&,std::unique_ptr<WebKit::PrefetchCache::Entry>>(WTF::URL const&,std::unique_ptr<WebKit::PrefetchCache::Entry> &&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  WTF::String::operator=((uint64_t *)a1, (WTF::StringImpl **)a2);
  long long v6 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v6;
  uint64_t v7 = **a3;
  **a3 = 0;
  unsigned int v10 = *(void **)(a1 + 40);
  unsigned int v9 = (void *)(a1 + 40);
  int v8 = v10;
  void *v9 = v7;
  if (v10)
  {
    std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v9, v8);
  }
}

WTF::StringImpl *WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::expandCapacity(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 24);
  unint64_t v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF) {
    unint64_t v2 = 15;
  }
  if (v2 >= 0x5555555)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6A574);
  }
  int v4 = *(WTF::StringImpl **)(a1 + 16);
  int v5 = 48 * v2 + 48;
  uint64_t v6 = WTF::fastMalloc((WTF *)(48 * v2 + 48));
  *(_DWORD *)(a1 + 24) = (v5 & 0xFFFFFFF0) / 0x30;
  *(void *)(a1 + 16) = v6;
  unint64_t v7 = *(void *)(a1 + 8);
  if (*(void *)a1 <= v7)
  {
    uint64_t result = WTF::VectorMover<false,std::tuple<WTF::URL,WTF::WallTime>>::move((WTF::StringImpl *)((char *)v4 + 48 * *(void *)a1), (uint64_t *)v4 + 6 * v7, v6 + 48 * *(void *)a1);
    if (!v4) {
      return result;
    }
  }
  else
  {
    WTF::VectorMover<false,std::tuple<WTF::URL,WTF::WallTime>>::move(v4, (uint64_t *)v4 + 6 * v7, v6);
    uint64_t v8 = *(void *)a1 - v1 + *(unsigned int *)(a1 + 24);
    uint64_t result = WTF::VectorMover<false,std::tuple<WTF::URL,WTF::WallTime>>::move((WTF::StringImpl *)((char *)v4 + 48 * *(void *)a1), (uint64_t *)v4 + 6 * v1, *(void *)(a1 + 16) + 48 * v8);
    *(void *)a1 = v8;
    if (!v4) {
      return result;
    }
  }
  if (*(WTF::StringImpl **)(a1 + 16) == v4)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }

  return (WTF::StringImpl *)WTF::fastFree(v4, v10);
}

WTF::StringImpl *WTF::VectorMover<false,std::tuple<WTF::URL,WTF::WallTime>>::move(WTF::StringImpl *result, uint64_t *a2, uint64_t a3)
{
  if (result != (WTF::StringImpl *)a2)
  {
    int v5 = (uint64_t *)result;
    do
    {
      WTF::URL::URL(a3, v5);
      *(void *)(a3 + 40) = v5[5];
      uint64_t result = (WTF::StringImpl *)*v5;
      *int v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      a3 += 48;
      v5 += 6;
    }
    while (v5 != a2);
  }
  return result;
}

void WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::inlineSet<WTF::URL const&,std::unique_ptr<WebKit::PrefetchCache::Entry>>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v12 = v11 & v9;
  int v13 = (WTF **)(v8 + 48 * v12);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v13) & 1) == 0)
  {
    uint64_t v30 = a3;
    unsigned int v15 = 0;
    int v16 = 1;
    do
    {
      if (*v13 == (WTF *)-1)
      {
        unsigned int v15 = v13;
      }
      else if (WTF::equal(*v13, *a2, v14))
      {
        uint64_t v23 = *a1;
        if (*a1) {
          unsigned int v24 = *(_DWORD *)(v23 - 4);
        }
        else {
          unsigned int v24 = 0;
        }
        *(void *)a4 = v13;
        *(void *)(a4 + 8) = v23 + 48 * v24;
        *(unsigned char *)(a4 + 16) = 0;
        uint64_t v25 = v8 + 48 * v12;
        uint64_t v26 = *v30;
        *uint64_t v30 = 0;
        uint64_t v29 = *(void **)(v25 + 40);
        long long v27 = (uint64_t *)(v25 + 40);
        char v28 = v29;
        *long long v27 = v26;
        if (v29)
        {
          std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v27, v28);
        }
        return;
      }
      uint64_t v12 = (v12 + v16) & v9;
      int v13 = (WTF **)(v8 + 48 * v12);
      ++v16;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v13));
    if (v15)
    {
      *((_OWORD *)v15 + objc_destroyWeak(this + 1) = 0u;
      *((_OWORD *)v15 + objc_destroyWeak(this + 2) = 0u;
      *(_OWORD *)unsigned int v15 = 0u;
      --*(_DWORD *)(*a1 - 16);
      int v13 = v15;
    }
  }
  WTF::HashMapTranslator<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::URL const&,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>,WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>> WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::inlineAdd<WTF::URL const&,std::unique_ptr<WebKit::PrefetchCache::Entry>>(WTF::URL const&,std::unique_ptr<WebKit::PrefetchCache::Entry> &&)::{lambda(void)#1}>((uint64_t)v13, (uint64_t)a2, &v31);
  uint64_t v17 = *a1;
  if (*a1) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 1objc_destroyWeak(this + 2) = v18;
  uint64_t v19 = *a1;
  if (*a1) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_24:
      int v13 = WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(a1, v13);
      uint64_t v19 = *a1;
      if (*a1) {
        LODWORD(v2objc_destroyWeak(this + 2) = *(_DWORD *)(v19 - 4);
      }
      else {
        LODWORD(v2objc_destroyWeak(this + 2) = 0;
      }
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_24;
  }
  *(void *)a4 = v13;
  *(void *)(a4 + 8) = v19 + 48 * v22;
  *(unsigned char *)(a4 + 16) = 1;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v4 = *(_DWORD *)(v2 - 8);
  unsigned int v5 = WTF::computeHash<WebCore::ClientOrigin>(a2) & v4;
  uint64_t v6 = v2 + 88 * v5;
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
  {
LABEL_3:
    if (*a1) {
      return *a1 + 88 * *(unsigned int *)(*a1 - 4);
    }
    return 0;
  }
  int v8 = 1;
  while (1)
  {
    int v9 = *(_DWORD *)(v6 + 24);
    if (!v9)
    {
      if (*(void *)v6 == -1) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
    if (v9 != 1) {
      break;
    }
LABEL_10:
    if WebCore::operator==() && (WebCore::operator==()) {
      return v6;
    }
LABEL_12:
    unsigned int v5 = (v5 + v8) & v4;
    uint64_t v6 = v2 + 88 * v5;
    ++v8;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
      goto LABEL_3;
    }
  }
  uint64_t v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>>,std::pair<WTF::String,WTF::String>>(v10);
}

uint64_t WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>>,std::pair<WTF::String,WTF::String>>(uint64_t result, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v3 = (void *)result;
  if (!a2
    || (unsigned int v6 = *(_DWORD *)(a2 - 8),
        uint64_t v7 = WTF::PairHash<WTF::String,WTF::String>::hash(a3) & v6,
        int v8 = (WTF **)(a2 + 24 * v7),
        uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v8, v9, v10), (result & 1) != 0))
  {
LABEL_7:
    int v14 = 0;
  }
  else
  {
    int v13 = 1;
    while (1)
    {
      if (*v8 != (WTF *)-1)
      {
        uint64_t result = WTF::PairHash<WTF::String,WTF::String>::equal(v8, a3, v12);
        if (result) {
          break;
        }
      }
      uint64_t v7 = (v7 + v13) & v6;
      int v8 = (WTF **)(a2 + 24 * v7);
      uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v8, v11, v12);
      ++v13;
      if (result) {
        goto LABEL_7;
      }
    }
    int v14 = *(_DWORD **)(a2 + 24 * v7 + 16);
    if (v14) {
      *v14 += 2;
    }
  }
  *uint64_t v3 = v14;
  return result;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(88 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 88 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    uint64_t v67 = v5;
    uint64_t v68 = v4;
    do
    {
      int v14 = (WTF::StringImpl **)(v4 + 88 * v11);
      unsigned int v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          unsigned int v20 = *((_DWORD *)v15 + 4);
          uint64_t v72 = v12;
          if (v20 >= 0x100) {
            int v21 = v20 >> 8;
          }
          else {
            int v21 = WTF::StringImpl::hashSlowCase(v15);
          }
          int v22 = 0;
          do
          {
            unsigned int v23 = v21 & v19;
            unsigned int v24 = (WTF::StringImpl **)(v18 + 88 * (v21 & v19));
            int v21 = ++v22 + (v21 & v19);
          }
          while (*v24);
          uint64_t v25 = v18 + 88 * v23;
          char v28 = *(WTF::StringImpl **)(v25 + 80);
          long long v27 = (WTF::StringImpl **)(v25 + 80);
          uint64_t v26 = v28;
          *long long v27 = 0;
          if (v28)
          {
            if (*(_DWORD *)v26 == 2) {
              WTF::StringImpl::destroy(v26, v8);
            }
            else {
              *(_DWORD *)v26 -= 2;
            }
          }
          uint64_t v30 = *(v27 - 1);
          *(v27 - objc_destroyWeak(this + 1) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, v8);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          int v73 = (WTF::StringImpl **)(v4 + 88 * v11);
          uint64_t v40 = v18 + 88 * v23;
          unsigned int v43 = *(_DWORD *)(v40 + 64);
          int v42 = (_DWORD *)(v40 + 64);
          uint64_t v41 = v43;
          if (v43 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9CAE38[v41])(&v78, v18 + 88 * v23 + 40);
          }
          *int v42 = -1;
          uint64_t v44 = v18 + 88 * v23;
          unsigned int v47 = *(_DWORD *)(v44 + 32);
          uint64_t v46 = (_DWORD *)(v44 + 32);
          uint64_t v45 = v47;
          if (v47 != -1) {
            ((void (*)(char *, WTF::StringImpl **))off_1EE9CAE38[v45])(&v79, v27 - 9);
          }
          *uint64_t v46 = -1;
          uint64_t v48 = *v24;
          *unsigned int v24 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2) {
              WTF::StringImpl::destroy(v48, v8);
            }
            else {
              *(_DWORD *)v48 -= 2;
            }
          }
          long long v49 = *v73;
          *int v73 = 0;
          *unsigned int v24 = v49;
          uint64_t v50 = v4 + 88 * v11;
          *((unsigned char *)v27 - 7objc_destroyWeak(this + 2) = 0;
          *uint64_t v46 = -1;
          uint64_t v71 = v50 + 8;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v27 - 9), v50 + 8);
          uint64_t v51 = v18 + 88 * v23;
          uint64_t v52 = v50 + 40;
          *(unsigned char *)(v51 + 40) = 0;
          *int v42 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v51 + 40, v50 + 40);
          double v54 = *(WTF::StringImpl **)(v50 + 72);
          uint64_t v53 = (WTF::StringImpl **)(v50 + 72);
          *uint64_t v53 = 0;
          uint64_t v12 = v72;
          *(v27 - objc_destroyWeak(this + 1) = v54;
          uint64_t v55 = v53[1];
          v53[1] = 0;
          *long long v27 = v55;
          long long v56 = v53[1];
          v53[1] = 0;
          uint64_t v13 = v67;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2) {
              WTF::StringImpl::destroy(v56, v8);
            }
            else {
              *(_DWORD *)v56 -= 2;
            }
          }
          char v57 = *v53;
          *uint64_t v53 = 0;
          uint64_t v4 = v68;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2) {
              WTF::StringImpl::destroy(v57, v8);
            }
            else {
              *(_DWORD *)v57 -= 2;
            }
          }
          uint64_t v58 = v68 + 88 * v11;
          unsigned int v61 = *(_DWORD *)(v58 + 64);
          char v60 = (_DWORD *)(v58 + 64);
          uint64_t v59 = v61;
          if (v61 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9CAE38[v59])(&v76, v52);
          }
          *char v60 = -1;
          uint64_t v62 = v68 + 88 * v11;
          unsigned int v65 = *(_DWORD *)(v62 + 32);
          long long v64 = (_DWORD *)(v62 + 32);
          uint64_t v63 = v65;
          if (v65 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9CAE38[v63])(&v77, v71);
          }
          *long long v64 = -1;
          uint64_t v66 = *v73;
          *int v73 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2) {
              WTF::StringImpl::destroy(v66, v8);
            }
            else {
              *(_DWORD *)v66 -= 2;
            }
          }
          if (v73 == a3) {
            uint64_t v12 = v24;
          }
        }
        else
        {
          uint64_t v16 = v4 + 88 * v11;
          uint64_t v17 = *(WTF::StringImpl **)(v16 + 80);
          *(void *)(v16 + 80) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v8);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          uint64_t v29 = *(WTF::StringImpl **)(v16 + 72);
          *(void *)(v16 + 7objc_destroyWeak(this + 2) = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v8);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          uint64_t v31 = v4 + 88 * v11;
          unsigned int v34 = *(_DWORD *)(v31 + 64);
          long long v33 = (_DWORD *)(v31 + 64);
          uint64_t v32 = v34;
          if (v34 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9CAE38[v32])(&v74, v4 + 88 * v11 + 40);
          }
          *long long v33 = -1;
          uint64_t v35 = v4 + 88 * v11;
          unsigned int v38 = *(_DWORD *)(v35 + 32);
          long long v37 = (_DWORD *)(v35 + 32);
          uint64_t v36 = v38;
          if (v38 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9CAE38[v36])(&v75, v16 + 8);
          }
          *long long v37 = -1;
          uint64_t v39 = *v14;
          _DWORD *v14 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2) {
              WTF::StringImpl::destroy(v39, v8);
            }
            else {
              *(_DWORD *)v39 -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    LODWORD(v4) = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    LODWORD(v4) = 0;
    int v5 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v5;
  if (v4)
  {
    uint64_t v9 = 0;
    uint64_t v4 = v4;
    uint64_t v35 = v3;
    while (1)
    {
      uint64_t v10 = (WTF::StringImpl **)(v3 + 24 * v9);
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)(v3 + 24 * v9), (uint64_t)v7, v8))
        {
          uint64_t v11 = v3 + 24 * v9;
          uint64_t v12 = *(WTF::StringImpl **)(v11 + 16);
          *(void *)(v11 + 16) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2) {
              WTF::StringImpl::destroy(v12, v7);
            }
            else {
              *(_DWORD *)v12 -= 2;
            }
          }
          uint64_t v25 = v10[1];
          v10[1] = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2) {
              WTF::StringImpl::destroy(v25, v7);
            }
            else {
              *(_DWORD *)v25 -= 2;
            }
          }
          long long v27 = *v10;
          const WTF::StringImpl *v10 = 0;
          if (!v27) {
            goto LABEL_49;
          }
          if (*(_DWORD *)v27 == 2)
          {
LABEL_48:
            WTF::StringImpl::destroy(v27, v7);
            goto LABEL_49;
          }
          *(_DWORD *)v27 -= 2;
        }
        else
        {
          uint64_t v13 = v4;
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unsigned int v16 = WTF::PairHash<WTF::String,WTF::String>::hash(v10);
          int v17 = 0;
          do
          {
            unsigned int v18 = v16 & v15;
            unsigned int v19 = (WTF **)(v14 + 24 * (v16 & v15));
            int v20 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v19, (uint64_t)v7, v8);
            unsigned int v16 = ++v17 + v18;
          }
          while (!v20);
          uint64_t v21 = v14 + 24 * v18;
          unsigned int v24 = *(WTF::StringImpl **)(v21 + 16);
          unsigned int v23 = (void *)(v21 + 16);
          int v22 = v24;
          *unsigned int v23 = 0;
          uint64_t v4 = v13;
          uint64_t v3 = v35;
          if (v24)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v7);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          uint64_t v26 = v19[1];
          v19[1] = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2) {
              WTF::StringImpl::destroy(v26, v7);
            }
            else {
              *(_DWORD *)v26 -= 2;
            }
          }
          char v28 = *v19;
          *unsigned int v19 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v7);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          uint64_t v29 = *v10;
          const WTF::StringImpl *v10 = 0;
          *unsigned int v19 = v29;
          uint64_t v30 = v10[1];
          v10[1] = 0;
          v19[1] = v30;
          uint64_t v31 = v35 + 24 * v9;
          uint64_t v32 = *(void *)(v31 + 16);
          *(void *)(v31 + 16) = 0;
          *unsigned int v23 = v32;
          long long v33 = *(WTF::StringImpl **)(v31 + 16);
          *(void *)(v31 + 16) = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, v7);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          unsigned int v34 = v10[1];
          v10[1] = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2) {
              WTF::StringImpl::destroy(v34, v7);
            }
            else {
              *(_DWORD *)v34 -= 2;
            }
          }
          long long v27 = *v10;
          const WTF::StringImpl *v10 = 0;
          if (!v27) {
            goto LABEL_49;
          }
          if (*(_DWORD *)v27 == 2) {
            goto LABEL_48;
          }
          *(_DWORD *)v27 -= 2;
        }
      }
LABEL_49:
      if (++v9 == v4) {
        goto LABEL_52;
      }
    }
  }
  if (v3)
  {
LABEL_52:
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastMalloc((WTF *)(88 * v5 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5) {
    bzero((void *)(v6 + 16), 88 * v5);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 1objc_destroyWeak(this + 2) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v3;
    uint64_t v44 = v2;
    while (1)
    {
      uint64_t v13 = v2 + 88 * v10;
      int v14 = *(_DWORD *)(v13 + 24);
      if (v14) {
        break;
      }
      if (*(void *)v13 != -1) {
        goto LABEL_12;
      }
LABEL_39:
      if (++v10 == v12) {
        goto LABEL_44;
      }
    }
    if (v14 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_43;
    }
LABEL_12:
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
    {
      uint64_t v16 = v2 + 88 * v10;
      WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16 + 72, v15);
      int v17 = *(WTF::StringImpl ***)(v16 + 64);
      if (v17) {
        WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v17, v7);
      }
      uint64_t v18 = *(unsigned int *)(v13 + 56);
      if (v18 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CAE38[v18])(&v48, v13 + 32);
      }
      *(_DWORD *)(v13 + 56) = -1;
      uint64_t v19 = *(unsigned int *)(v13 + 24);
      if (v19 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CAE38[v19])(&v49, v2 + 88 * v10);
      }
      *(_DWORD *)(v13 + 24) = -1;
    }
    else
    {
      uint64_t v20 = *a1;
      uint64_t v47 = v11;
      if (*a1) {
        int v21 = *(_DWORD *)(v20 - 8);
      }
      else {
        int v21 = 0;
      }
      unsigned int v22 = WTF::computeHash<WebCore::ClientOrigin>(v2 + 88 * v10);
      int v23 = 0;
      do
      {
        unsigned int v24 = v22 & v21;
        uint64_t v11 = v20 + 88 * (v22 & v21);
        int v26 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
        unsigned int v22 = ++v23 + v24;
      }
      while (!v26);
      uint64_t v27 = v20 + 88 * v24;
      char v28 = (void *)(v27 + 72);
      WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27 + 72, v25);
      uint64_t v32 = *(WTF::StringImpl ***)(v27 + 64);
      uint64_t v31 = (void *)(v27 + 64);
      uint64_t v30 = v32;
      if (v32) {
        WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v30, v29);
      }
      uint64_t v33 = *(unsigned int *)(v11 + 56);
      if (v33 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CAE38[v33])(&v52, v11 + 32);
      }
      *(_DWORD *)(v11 + 56) = -1;
      uint64_t v34 = *(unsigned int *)(v11 + 24);
      if (v34 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CAE38[v34])(&v53, v20 + 88 * v24);
      }
      *(unsigned char *)uint64_t v11 = 0;
      *(_DWORD *)(v11 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v20 + 88 * v24, v2 + 88 * v10);
      *(unsigned char *)(v11 + 3objc_destroyWeak(this + 2) = 0;
      *(_DWORD *)(v11 + 56) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v11 + 32, v13 + 32);
      uint64_t v35 = v2 + 88 * v10;
      *uint64_t v31 = 0;
      uint64_t v36 = *(void *)(v35 + 64);
      *(void *)(v35 + 64) = 0;
      *uint64_t v31 = v36;
      *char v28 = 0;
      v28[1] = 0;
      uint64_t v37 = *(void *)(v35 + 72);
      *(void *)(v35 + 7objc_destroyWeak(this + 2) = 0;
      *char v28 = v37;
      LODWORD(v37) = *(_DWORD *)(v35 + 80);
      *(_DWORD *)(v35 + 80) = 0;
      uint64_t v38 = v20 + 88 * v24;
      *(_DWORD *)(v38 + 80) = v37;
      LODWORD(v37) = *(_DWORD *)(v35 + 84);
      *(_DWORD *)(v35 + 84) = 0;
      *(_DWORD *)(v38 + 84) = v37;
      WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v35 + 72, v39);
      uint64_t v40 = *(WTF::StringImpl ***)(v35 + 64);
      if (v40) {
        WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v40, v7);
      }
      uint64_t v41 = *(unsigned int *)(v13 + 56);
      uint64_t v12 = v3;
      if (v41 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CAE38[v41])(&v50, v13 + 32);
      }
      *(_DWORD *)(v13 + 56) = -1;
      uint64_t v42 = *(unsigned int *)(v13 + 24);
      uint64_t v2 = v44;
      if (v42 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9CAE38[v42])(&v51, v13);
      }
      *(_DWORD *)(v13 + 24) = -1;
      if (v13 != a2) {
        uint64_t v11 = v47;
      }
    }
    goto LABEL_39;
  }
LABEL_43:
  uint64_t v11 = 0;
  uint64_t result = 0;
  if (v2)
  {
LABEL_44:
    WTF::fastFree((WTF *)(v2 - 16), v7);
    return v11;
  }
  return result;
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::initializeFetches(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CB6F0;
  unint64_t v3 = *(unsigned int **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  int v4 = *(_DWORD **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = *(unsigned int **)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 64);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CAE38[v6])(&v9, a1 + 40);
  }
  *(_DWORD *)(a1 + 64) = -1;
  uint64_t v7 = *(unsigned int *)(a1 + 32);
  if (v7 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CAE38[v7])(&v10, a1 + 8);
  }
  *(_DWORD *)(a1 + 3objc_destroyWeak(this + 2) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::initializeFetches(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CB6F0;
  unint64_t v3 = (unsigned int *)*((void *)this + 11);
  *((void *)this + 1objc_destroyWeak(this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  int v4 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = *((unsigned int *)this + 16);
  if (v6 != -1) {
    ((void (*)(char *, char *))off_1EE9CAE38[v6])(&v9, (char *)this + 40);
  }
  *((_DWORD *)this + 16) = -1;
  uint64_t v7 = *((unsigned int *)this + 8);
  if (v7 != -1) {
    ((void (*)(char *, char *))off_1EE9CAE38[v7])(&v10, (char *)this + 8);
  }
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::initializeFetches(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(void *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t)(a1 + 1);
  uint64_t v4 = a1[9];
  if (v4)
  {
    if (*(void *)(v4 + 8))
    {
      uint64_t v5 = a1[11];
      if (v5)
      {
        if (*(void *)(v5 + 8))
        {
          uint64_t v6 = *(unsigned int *)(a2 + 12);
          if (v6)
          {
            uint64_t v7 = *(WebCore::SharedBuffer ***)a2;
            uint64_t v8 = 16 * v6;
            do
            {
              WebCore::SharedBuffer::data(*v7);
              char v9 = (void *)WTF::fastMalloc((WTF *)0x28);
              void *v9 = &unk_1EE9CB718;
              v9[1] = a1 + 11;
              uint64_t v9[2] = v3;
              uint64_t v9[3] = v7;
              v9[4] = a1 + 10;
              uint64_t v20 = v9;
              WebCore::BackgroundFetchEngine::addFetchFromStore();
              char v10 = v20;
              uint64_t v20 = 0;
              if (v10) {
                (*(void (**)(void *))(*v10 + 8))(v10);
              }
              v7 += 2;
              v8 -= 16;
            }
            while (v8);
          }
        }
      }
    }
  }
  uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1[10] + 32), v3);
  uint64_t v13 = *(void *)(a1[10] + 32);
  if (v13) {
    v13 += 88 * *(unsigned int *)(v13 - 4);
  }
  if (v13 != result)
  {
    int v14 = *(void **)(result + 72);
    uint64_t v20 = v14;
    uint64_t v15 = *(unsigned int *)(result + 84);
    int v21 = *(_DWORD *)(result + 80);
    int v22 = v15;
    v19[0] = 0;
    *(void *)(result + 7objc_destroyWeak(this + 2) = 0;
    v19[1] = 0;
    *(void *)(result + 80) = 0;
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v12);
    if (v15)
    {
      uint64_t v17 = 8 * v15;
      do
      {
        uint64_t v18 = *v14;
        *v14++ = 0;
        (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        v17 -= 8;
      }
      while (v17);
    }
    return WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v16);
  }
  return result;
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl17initializeFetchesERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEENK3__0clEONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISH_EENS_21DefaultRefDerefTraitsISH_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEUlRT_RT0_E_vJRKNS4_28ServiceWorkerRegistrationKeyERKSN_EE4callES10_S12_(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  if (*a3 && *((_DWORD *)*a3 + 1))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = (WTF::StringImpl **)(*(void *)(a1 + 24) + 8);
    uint64_t v7 = **(void **)(a1 + 32);
    return WebKit::BackgroundFetchStoreImpl::registerFetch(v7, v5, a2, a3, v6);
  }
  else
  {
    uint64_t v9 = **(void **)(a1 + 8);
    if (v9) {
      uint64_t v10 = *(void *)(v9 + 8);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void *)(a1 + 16);
    WTF::String::isolatedCopy();
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v12 = &unk_1EE9CB740;
    uint64_t v15 = v12;
    v12[1] = v14;
    WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v10, v11, (uint64_t *)&v15);
    uint64_t v13 = (uint64_t)v15;
    uint64_t v15 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    return 0;
  }
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl17initializeFetchesERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEENK3__0clEONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISH_EENS_21DefaultRefDerefTraitsISH_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUlRT_RT0_E_clIKNS4_28ServiceWorkerRegistrationKeyEKSN_EEDaSU_SW_EUlPST_E_vJPNS2_27BackgroundFetchStoreManagerEEED1Ev(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9CB740;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl17initializeFetchesERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEENK3__0clEONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISH_EENS_21DefaultRefDerefTraitsISH_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUlRT_RT0_E_clIKNS4_28ServiceWorkerRegistrationKeyEKSN_EEDaSU_SW_EUlPST_E_vJPNS2_27BackgroundFetchStoreManagerEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CB740;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl17initializeFetchesERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEENK3__0clEONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISH_EENS_21DefaultRefDerefTraitsISH_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUlRT_RT0_E_clIKNS4_28ServiceWorkerRegistrationKeyEKSN_EEDaSU_SW_EUlPST_E_vJPNS2_27BackgroundFetchStoreManagerEEE4callES16_(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (WTF::StringImpl **)(result + 8);
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v4 = &unk_1EE9CB768;
    uint64_t v5 = v4;
    WebKit::BackgroundFetchStoreManager::clearFetch(a2, v3, (const WTF::StringImpl *)&v5);
    uint64_t result = (uint64_t)v5;
    uint64_t v5 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::initializeFetchesInternal(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CB790;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::initializeFetchesInternal(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CB790;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::initializeFetchesInternal(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::call(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v4 = &unk_1EE9CB7E0;
    v4[1] = v3;
    uint64_t v8 = v4;
    WebKit::BackgroundFetchStoreManager::initializeFetches(a2, (uint64_t *)&v8);
    uint64_t result = (uint64_t)v8;
    uint64_t v8 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v7 = &unk_1EE9CB7B8;
    v7[1] = v6;
    uint64_t v8 = v7;
    WTF::callOnMainRunLoop();
    uint64_t result = (uint64_t)v8;
    uint64_t v8 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CB7B8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CB7B8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

uint64_t WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>>::destruct(*(unsigned int **)a1, (WTF::StringImpl *)(*(void *)a1 + 16 * v3));
  }
  uint64_t v4 = *(unsigned int **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

unsigned int *WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>>::destruct(unsigned int *result, WTF::StringImpl *a2)
{
  if (result != (unsigned int *)a2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = (WTF::StringImpl *)*((void *)v3 + 1);
      *((void *)v3 + objc_destroyWeak(this + 1) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      uint64_t result = *(unsigned int **)v3;
      *(void *)uint64_t v3 = 0;
      if (result) {
        uint64_t result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
      }
      v3 += 4;
    }
    while (v3 != (unsigned int *)a2);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlOSW_E_vJSO_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CB7E0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlOSW_E_vJSO_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CB7E0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlOSW_E_vJSO_EE4callESO_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a2[1];
  a2[1] = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v5 = &unk_1EE9CB808;
  v5[1] = v2;
  v9[0] = 0;
  v9[1] = 0;
  v5[2] = v4;
  v5[3] = v3;
  uint64_t v10 = v5;
  WTF::callOnMainRunLoop();
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    (*(void (**)(void *))(*v7 + 8))(v7);
  }
  uint64_t v9[2] = 0;
  return WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlOSW_E_clISN_EESV_SY_EUlvE_vJEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9CB808;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlOSW_E_clISN_EESV_SY_EUlvE_vJEED0Ev(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CB808;
  uint64_t v3 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v4);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlOSW_E_clISN_EESV_SY_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

WTF::StringImpl *WTF::KeyValuePairHashTraits<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>>::customDeleteBucket(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  *a1 = (WTF::StringImpl *)-1;
  uint64_t result = a1[2];
  a1[2] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, uint64_t a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a2, (WTF::StringImpl *)a2);
  uint64_t v5 = *(WTF::StringImpl **)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)(a2 + 72);
  *(void *)(a2 + 7objc_destroyWeak(this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(unsigned int *)(a2 + 64);
  if (v7 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CAE38[v7])(&v15, a2 + 40);
  }
  int v8 = -1;
  *(_DWORD *)(a2 + 64) = -1;
  uint64_t v9 = *(unsigned int *)(a2 + 32);
  if (v9 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9CAE38[v9])(&v16, a2 + 8);
  }
  *(_DWORD *)(a2 + 3objc_destroyWeak(this + 2) = -1;
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v10 = *a1;
  if (*a1) {
    int v8 = *(_DWORD *)(v10 - 12) - 1;
  }
  *(_DWORD *)(v10 - 1objc_destroyWeak(this + 2) = v8;
  uint64_t v11 = *a1;
  if (*a1)
  {
    unsigned int v12 = 6 * *(_DWORD *)(v11 - 12);
    unsigned int v13 = *(_DWORD *)(v11 - 4);
    if (v12 < v13 && v13 >= 9)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v13 >> 1, 0);
    }
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  int v8 = v7 >= 0x100 ? v7 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; int v8 = ++i + v10)
  {
    int v10 = v8 & v6;
    uint64_t v11 = (WTF **)(v3 + 88 * (v8 & v6));
    unsigned int v12 = *v11;
    if (*v11 == (WTF *)-1) {
      continue;
    }
    if (!v12) {
      break;
    }
    if (WTF::equal(v12, *a2, a3)) {
      return (uint64_t)v11;
    }
  }
  if (!*a1) {
    return 0;
  }
  return *a1 + 88 * *(unsigned int *)(*a1 - 4);
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CB830;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CB830;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 312);
      v8[0] = v3 + 40;
      v8[1] = a1 + 16;
      char v9 = 1;
      IPC::Connection::send<Messages::NetworkProcessProxy::NotifyBackgroundFetchChange>(v4, (uint64_t)v8, 0, 0, 0);
    }
  }
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  unsigned int v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearFetchInternal(WebCore::ClientOrigin const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CB858;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearFetchInternal(WebCore::ClientOrigin const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CB858;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearFetchInternal(WebCore::ClientOrigin const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::call(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (WTF::StringImpl **)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v5 = &unk_1EE9CB880;
    v5[1] = v4;
    unsigned int v7 = v5;
    WebKit::BackgroundFetchStoreManager::clearFetch(a2, v3, (const WTF::StringImpl *)&v7);
  }
  else
  {
    WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, (uint64_t *)(a1 + 16));
    WTF::callOnMainRunLoop();
  }
  uint64_t result = (uint64_t)v7;
  unsigned int v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18clearFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEONS_17CompletionHandlerIFvvEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CB880;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18clearFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEONS_17CompletionHandlerIFvvEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CB880;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18clearFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEONS_17CompletionHandlerIFvvEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v2, (uint64_t *)(a1 + 8));
  WTF::callOnMainRunLoop();
  uint64_t result = v2;
  uint64_t v2 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearAllFetches(WebCore::ServiceWorkerRegistrationKey const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CB8A8;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  uint64_t v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearAllFetches(WebCore::ServiceWorkerRegistrationKey const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CB8A8;
  uint64_t v3 = *((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  uint64_t v5 = (_DWORD *)*((void *)a1 + 1);
  *((void *)a1 + objc_destroyWeak(this + 1) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearAllFetches(WebCore::ServiceWorkerRegistrationKey const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 24);
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      uint64_t v3 = *(unsigned int *)(a1 + 28);
      if (v3)
      {
        uint64_t v4 = *(void *)(a1 + 16);
        uint64_t v5 = 8 * v3;
        do
        {
          uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 24);
          if (v6) {
            uint64_t v6 = *(void *)(v6 + 8);
          }
          uint64_t v7 = *(void *)(v6 + 312);
          v11[0] = v6 + 40;
          v11[1] = v4;
          char v12 = 1;
          IPC::Connection::send<Messages::NetworkProcessProxy::NotifyBackgroundFetchChange>(v7, (uint64_t)v11, 0, 0, 0);
          v4 += 8;
          v5 -= 8;
        }
        while (v5);
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  char v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v9(v8);
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearAllFetchesInternal(WebCore::ClientOrigin const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CB8D0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearAllFetchesInternal(WebCore::ClientOrigin const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CB8D0;
  uint64_t v3 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearAllFetchesInternal(WebCore::ClientOrigin const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::call(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a1 + 8;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v5 = &unk_1EE9CB8F8;
    v5[1] = v4;
    uint64_t v7 = v5;
    WebKit::BackgroundFetchStoreManager::clearAllFetches(a2, v3, (const WTF::StringImpl *)&v7);
  }
  else
  {
    WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, (uint64_t *)(a1 + 24));
    WTF::callOnMainRunLoop();
  }
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl23clearAllFetchesInternalERKN7WebCore12ClientOriginERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CB8F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl23clearAllFetchesInternalERKN7WebCore12ClientOriginERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CB8F8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl23clearAllFetchesInternalERKN7WebCore12ClientOriginERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v2, (uint64_t *)(a1 + 8));
  WTF::callOnMainRunLoop();
  uint64_t result = v2;
  uint64_t v2 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebCore::BackgroundFetchStore>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CB920;
  WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebCore::BackgroundFetchStore>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CB920;
  WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebCore::BackgroundFetchStore>::call(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        BOOL v7 = *(unsigned char *)(a1 + 168) == 0;
        uint64_t v8 = *(void *)(v6 + 312);
        v12[0] = v6 + 40;
        v12[1] = a1 + 160;
        char v13 = 2 * v7;
        IPC::Connection::send<Messages::NetworkProcessProxy::NotifyBackgroundFetchChange>(v8, (uint64_t)v12, 0, 0, 0);
        uint64_t v4 = *(void *)(a1 + 8);
      }
    }
    WebKit::BackgroundFetchStoreImpl::registerFetch(v4, a1 + 16, a1 + 80, (WTF::StringImpl **)(a1 + 152), (WTF::StringImpl **)(a1 + 160));
  }
  uint64_t v9 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, a2);
  int v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);

  return v10(v9);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchInternal(WebCore::ClientOrigin const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CB948;
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchInternal(WebCore::ClientOrigin const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CB948;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)*((void *)this + 6);
  if (v4)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchInternal(WebCore::ClientOrigin const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::call(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (WTF::StringImpl **)(a1 + 1);
    uint64_t v4 = a1[2];
    uint64_t v5 = a1[3];
    uint64_t v6 = a1[4];
    uint64_t v7 = a1[5];
    uint64_t v8 = a1 + 6;
    uint64_t v9 = a1[8];
    a1[8] = 0;
    int v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v10 = &unk_1EE9CB998;
    v10[1] = v9;
    int v14 = v10;
    WebKit::BackgroundFetchStoreManager::storeFetch(a2, v3, v4, v5, v6, v7, v8, (uint64_t *)&v14);
    uint64_t result = (uint64_t)v14;
    int v14 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v12 = a1[8];
    a1[8] = 0;
    char v13 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v13 = &unk_1EE9CB970;
    v13[1] = v12;
    int v14 = v13;
    WTF::callOnMainRunLoop();
    uint64_t result = (uint64_t)v14;
    int v14 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CB970;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CB970;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, 2);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlST_E_vJSL_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CB998;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlST_E_vJSL_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CB998;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlST_E_vJSL_EE4callESL_(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9CB9C0;
  *(unsigned char *)(v4 + 8) = a2;
  *(void *)(v4 + 16) = v3;
  uint64_t v6 = v4;
  WTF::callOnMainRunLoop();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlST_E_clISL_EESS_ST_EUlvE_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9CB9C0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlST_E_clISL_EESS_ST_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CB9C0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlST_E_clISL_EESS_ST_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunk(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebCore::BackgroundFetchStore::StoreResult>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CB9E8;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunk(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebCore::BackgroundFetchStore::StoreResult>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CB9E8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunk(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebCore::BackgroundFetchStore::StoreResult>::call(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 24);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 312);
        v10[0] = v5 + 40;
        v10[1] = a1 + 16;
        char v11 = 2;
        IPC::Connection::send<Messages::NetworkProcessProxy::NotifyBackgroundFetchChange>(v6, (uint64_t)v10, 0, 0, 0);
      }
    }
  }
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunkInternal(WebCore::ClientOrigin const&,WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CBA10;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunkInternal(WebCore::ClientOrigin const&,WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBA10;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunkInternal(WebCore::ClientOrigin const&,WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::call(void *a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (const WTF::String **)(a1 + 1);
    unint64_t v4 = a1[2];
    uint64_t v5 = (atomic_uint *)a1[3];
    uint64_t v6 = a1[4];
    a1[4] = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v7 = &unk_1EE9CBA60;
    v7[1] = v6;
    char v11 = v7;
    WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(a2, v3, v4, v5, (uint64_t *)&v11);
    uint64_t result = (uint64_t)v11;
    char v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v9 = a1[4];
    a1[4] = 0;
    int v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v10 = &unk_1EE9CBA38;
    v10[1] = v9;
    char v11 = v10;
    WTF::callOnMainRunLoop();
    uint64_t result = (uint64_t)v11;
    char v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CBA38;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CBA38;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, 2);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlSO_E_vJSG_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CBA60;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlSO_E_vJSG_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CBA60;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlSO_E_vJSG_EE4callESG_(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9CBA88;
  *(unsigned char *)(v4 + 8) = a2;
  *(void *)(v4 + 16) = v3;
  uint64_t v6 = v4;
  WTF::callOnMainRunLoop();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlSO_E_clISG_EESN_SO_EUlvE_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9CBA88;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlSO_E_clISG_EESN_SO_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBA88;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlSO_E_clISG_EESN_SO_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::retrieveResponseBody(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CBAB0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::retrieveResponseBody(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CBAB0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::retrieveResponseBody(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::call(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (const WTF::String **)(a1 + 8);
    unint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v6 = &unk_1EE9CBB00;
    v6[1] = v5;
    int v10 = v6;
    WebKit::BackgroundFetchStoreManager::retrieveResponseBody(a2, v3, v4, (uint64_t *)&v10);
    uint64_t result = (uint64_t)v10;
    int v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v9 = &unk_1EE9CBAD8;
    v9[1] = v8;
    int v10 = v9;
    WTF::callOnMainRunLoop();
    uint64_t result = (uint64_t)v10;
    int v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CBAD8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CBAD8;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  int v4 = 0;
  uint64_t result = (*(uint64_t (**)(void, void *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v3);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9CB040[v4])(&v2, v3);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlSW_E_vJOSL_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CBB00;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlSW_E_vJOSL_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CBB00;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlSW_E_vJOSL_EE4callESZ_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  int v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v4 = &unk_1EE9CBB28;
  v4[1] = v2;
  void v4[2] = v3;
  uint64_t v6 = v4;
  WTF::callOnMainRunLoop();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlSW_E_clISL_EESV_SW_EUlvE_vJEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9CBB28;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlSW_E_clISL_EESV_SW_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBB28;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlSW_E_clISL_EESV_SW_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(atomic_uint **)(a1 + 8);
  if (v1) {
    atomic_fetch_add(v1, 1u);
  }
  v4[0] = v1;
  int v5 = 0;
  uint64_t result = (*(uint64_t (**)(void, void *))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), v4);
  if (v5 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9CB040[v5])(&v3, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CBB50;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CBB50;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (_DWORD *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&)> &&)::$_0,void>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*(void *)(a1 + 8) + 40), (WTF::StringImpl **)(a1 + 16), a3);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 40);
  if (v6) {
    v6 += 88 * *(unsigned int *)(v6 - 4);
  }
  if (v6 == v4)
  {
    uint64_t v25 = 0;
    *(_OWORD *)int v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    WTF::URL::invalidate((WTF::URL *)v23);
    v18[0] = 0;
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, long long *, WTF::StringImpl **))(*(void *)v9 + 16))(v9, &v21, v18);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    char v11 = v18[0];
    v18[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t result = v23[0];
    v23[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (DWORD2(v22) != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, long long *))off_1EE9CAE38[DWORD2(v22)])(v18, &v21);
    }
  }
  else
  {
    v19[0] = 0;
    int v20 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v19, v4 + 8);
    v17[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v17);
    MEMORY[0x19972E8B0](v18, v17, v5 + 72, 0);
    MEMORY[0x199738D30](&v21, v19, v18);
    uint64_t v8 = v18[0];
    v18[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v12 = v17[0];
    v17[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v7);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    if (v20 != -1) {
      ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9CAE38[v20])(v18, v19);
    }
    uint64_t v13 = v5 + 80;
    uint64_t v14 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v14 + 16))(v14, &v21, v13);
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    uint64_t result = v23[0];
    v23[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (DWORD2(v22) != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, long long *))off_1EE9CAE38[DWORD2(v22)])(v18, &v21);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::loadAllFetches(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::HashSet<WebCore::ClientOrigin,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CBB78;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::loadAllFetches(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::HashSet<WebCore::ClientOrigin,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBB78;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::loadAllFetches(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::HashSet<WebCore::ClientOrigin,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v4 = 1;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(a2);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  unint64_t v10 = 0;
  if (*a2) {
    unint64_t v10 = *a2 + ((unint64_t)*(unsigned int *)(*a2 - 4) << 6);
  }
  if (v10 != v6)
  {
    do
    {
      uint64_t v11 = *(void *)(a1 + 8);
      atomic_fetch_add((atomic_uint *volatile)v4, 1u);
      uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v12 = &unk_1EE9CBBA0;
      v12[1] = v4;
      char v15 = v12;
      WebKit::BackgroundFetchStoreImpl::initializeFetches(v11, v7, (uint64_t *)&v15);
      uint64_t v13 = (uint64_t)v15;
      char v15 = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      while (1)
      {
        v7 += 64;
        if (v7 == v9) {
          break;
        }
        if (!WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v7)) {
          goto LABEL_10;
        }
      }
      uint64_t v7 = v9;
LABEL_10:
      ;
    }
    while (v7 != v10);
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v4);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::makeConstIterator(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *a1;
  if (*a1) {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v3 + (v4 << 6);
  if (v5 != a2)
  {
    while (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v2))
    {
      v2 += 64;
      if (v2 == v5) {
        return v5;
      }
    }
  }
  return v2;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl14loadAllFetchesEONS_17CompletionHandlerIFvvEEEEN3__0clINS_7HashSetIN7WebCore12ClientOriginENS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEEEEDaOT_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9CBBA0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl14loadAllFetchesEONS_17CompletionHandlerIFvvEEEEN3__0clINS_7HashSetIN7WebCore12ClientOriginENS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CBBA0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::getAllBackgroundFetchIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CBBC8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::getAllBackgroundFetchIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBBC8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::getAllBackgroundFetchIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 40);
  if (v2)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    uint64_t v4 = (void *)(v2 + 88 * v3);
    if (*(_DWORD *)(v2 - 12))
    {
      uint64_t v5 = *(void **)(*(void *)(result + 8) + 40);
      if (v3)
      {
        uint64_t v6 = 88 * v3;
        uint64_t v5 = *(void **)(*(void *)(result + 8) + 40);
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 11;
          v6 -= 88;
          if (!v6)
          {
            uint64_t v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v5 = (void *)(v2 + 88 * v3);
  }
  else
  {
    uint64_t v5 = 0;
    unsigned int v3 = 0;
  }
  uint64_t v4 = (void *)(v2 + 88 * v3);
  if (!v2)
  {
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v7 = (void *)(v2 + 88 * *(unsigned int *)(v2 - 4));
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v8 = *(unsigned int *)(v2 - 12);
  if (v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v9 = WTF::fastMalloc((WTF *)(8 * v8));
    LODWORD(v16) = v8;
    uint64_t v15 = v9;
  }
  else
  {
    uint64_t v9 = 0;
  }
LABEL_15:
  if (v7 != v5)
  {
    unsigned int v10 = 0;
    do
    {
      uint64_t v11 = (_DWORD *)*v5;
      if (*v5) {
        *v11 += 2;
      }
      *(void *)(v9 + 8 * v10) = v11;
      uint64_t v12 = v5 + 11;
      uint64_t v5 = v4;
      if (v12 != v4)
      {
        uint64_t v5 = v12;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 11;
          if (v5 == v4)
          {
            uint64_t v5 = v4;
            break;
          }
        }
      }
      ++v10;
    }
    while (v5 != v7);
    HIDWORD(v16) = v10;
  }
  uint64_t v13 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 16))(v13, &v15);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v14);
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::getBackgroundFetchState(WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CBBF0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::getBackgroundFetchState(WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBBF0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::getBackgroundFetchState(WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::call(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  v45[0] = 0;
  int v46 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v45, a2);
  uint64_t v6 = *(WTF::StringImpl **)(a2 + 32);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v47 = v6;
  long long v48 = *(_OWORD *)(a2 + 40);
  long long v49 = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *a3;
  if (*a3) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v37 = v7;
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8 || (uint64_t v9 = *(WebCore::BackgroundFetchEngine **)(v8 + 8)) == 0)
  {
    unsigned int v43 = 0;
LABEL_32:
    v65[0] = 0;
    v65[152] = 0;
    uint64_t v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v29 + 16))(v29, v65);
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v65, v30);
    goto LABEL_33;
  }
  WebCore::BackgroundFetchEngine::backgroundFetch((uint64_t *)&v43, v9, (const WebCore::ServiceWorkerRegistrationKey *)v45, (const WTF::String *)&v37);
  if (!v43) {
    goto LABEL_32;
  }
  unsigned int v10 = (WebCore::BackgroundFetch *)*((void *)v43 + 1);
  if (!v10) {
    goto LABEL_32;
  }
  WebCore::BackgroundFetch::information(&v38, v10);
  v50[0] = 0;
  int v51 = -1;
  uint64_t result = (WTF::StringImpl *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v50, (uint64_t)v45);
  uint64_t v12 = v47;
  if (v47) {
    *(_DWORD *)v47 += 2;
  }
  char v52 = v12;
  long long v53 = v48;
  long long v54 = v49;
  uint64_t v13 = *((void *)v43 + 1);
  uint64_t v14 = *(WTF::StringImpl **)(v13 + 8);
  if (v14) {
    *(_DWORD *)v14 += 2;
  }
  uint64_t v55 = v14;
  uint64_t v15 = *(unsigned int *)(v13 + 44);
  long long v56 = 0;
  int v57 = 0;
  int v58 = v15;
  if (v15)
  {
    if (v15 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v16 = (void *)WTF::fastMalloc((WTF *)(32 * v15));
    int v57 = v15;
    long long v56 = v16;
    uint64_t v17 = *(unsigned int *)(v13 + 44);
    if (v17)
    {
      uint64_t v18 = *(void *)(v13 + 32);
      uint64_t v19 = v18 + 32 * v17;
      do
      {
        int v20 = *(_DWORD **)v18;
        if (*(void *)v18) {
          *v20 += 2;
        }
        void *v16 = v20;
        long long v21 = *(_DWORD **)(v18 + 8);
        if (v21) {
          *v21 += 2;
        }
        v16[1] = v21;
        long long v22 = *(_DWORD **)(v18 + 16);
        if (v22) {
          *v22 += 2;
        }
        v16[2] = v22;
        int v23 = *(_DWORD **)(v18 + 24);
        if (v23) {
          *v23 += 2;
        }
        v16[3] = v23;
        v18 += 32;
        v16 += 4;
      }
      while (v18 != v19);
    }
  }
  long long v24 = *(WTF::StringImpl **)(v13 + 48);
  if (v24) {
    *(_DWORD *)v24 += 2;
  }
  uint64_t v59 = v24;
  uint64_t v60 = *(void *)(v13 + 56);
  long long v61 = v41;
  long long v62 = v40;
  __int16 v63 = v42;
  char v64 = *(unsigned char *)(*((void *)v43 + 1) + 148);
  std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::__optional_destruct_base[abi:sn180100]<WebKit::BackgroundFetchState>((uint64_t)v65, (uint64_t)v50);
  uint64_t v25 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v25 + 16))(v25, v65);
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v65, v26);
  char v28 = v59;
  uint64_t v59 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v27);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v27);
  uint64_t v34 = v55;
  uint64_t v55 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v31);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  uint64_t v35 = v52;
  char v52 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, v31);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  if (v51 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9CAE38[v51])(&v44, v50);
  }
  uint64_t v36 = v39;
  uint64_t v39 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v31);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
LABEL_33:
  uint64_t v32 = (unsigned int *)v43;
  unsigned int v43 = 0;
  if (v32 && atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v32);
    WTF::fastFree((WTF *)v32, v31);
  }
  uint64_t v33 = v37;
  uint64_t v37 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v31);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  uint64_t result = v47;
  uint64_t v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v46 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9CAE38[v46])(v65, v45);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::abortBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CBC18;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::abortBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBC18;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::abortBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::call(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v14[0] = 0;
  int v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v14, a2);
  uint64_t v6 = *(WTF::StringImpl **)(a2 + 32);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v16 = v6;
  long long v17 = *(_OWORD *)(a2 + 40);
  long long v18 = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *a3;
  if (*a3) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v12 = v7;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 && v7 && *(void *)(v8 + 8)) {
    WebCore::BackgroundFetchEngine::abortBackgroundFetch();
  }
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v15 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))off_1EE9CAE38[v15])(&v13, v14);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::pauseBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CBC40;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::pauseBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBC40;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::pauseBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::call(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v14[0] = 0;
  int v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v14, a2);
  uint64_t v6 = *(WTF::StringImpl **)(a2 + 32);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v16 = v6;
  long long v17 = *(_OWORD *)(a2 + 40);
  long long v18 = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *a3;
  if (*a3) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v12 = v7;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 && v7 && *(void *)(v8 + 8)) {
    WebCore::BackgroundFetchEngine::pauseBackgroundFetch();
  }
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v15 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))off_1EE9CAE38[v15])(&v13, v14);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::resumeBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CBC68;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::resumeBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBC68;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::resumeBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::call(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v14[0] = 0;
  int v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v14, a2);
  uint64_t v6 = *(WTF::StringImpl **)(a2 + 32);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v16 = v6;
  long long v17 = *(_OWORD *)(a2 + 40);
  long long v18 = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *a3;
  if (*a3) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v12 = v7;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 && v7 && *(void *)(v8 + 8)) {
    WebCore::BackgroundFetchEngine::resumeBackgroundFetch();
  }
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v15 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))off_1EE9CAE38[v15])(&v13, v14);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clickBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CBC90;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clickBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBC90;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clickBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::call(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v14[0] = 0;
  int v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v14, a2);
  uint64_t v6 = *(WTF::StringImpl **)(a2 + 32);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v16 = v6;
  long long v17 = *(_OWORD *)(a2 + 40);
  long long v18 = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *a3;
  if (*a3) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v12 = v7;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 && v7 && *(void *)(v8 + 8)) {
    WebCore::BackgroundFetchEngine::clickBackgroundFetch();
  }
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v15 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))off_1EE9CAE38[v15])(&v13, v14);
  }
  return result;
}

void sub_198C70A3C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t toUserContentRuleListStoreError(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = [(id)result code];
    if ((unint64_t)(v2 - 6) >= 4)
    {
      uint64_t result = 55;
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = qword_1994F6688[v2 - 6];
      uint64_t v4 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v5 = [v1 userInfo];
      return [v4 errorWithDomain:@"WKErrorDomain" code:v3 userInfo:v5];
    }
  }
  return result;
}

void sub_198C70C08(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198C71338(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 + 64, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 + 48, v25);
  uint64_t v27 = a23;
  a23 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v26);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  char v28 = a22;
  a22 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v26);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v26);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, v29);
  uint64_t v31 = a16;
  a16 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v30);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  uint64_t v32 = a21;
  a21 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v30);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *API::Object::constructInWrapper<API::UserStyleSheet,WebCore::UserStyleSheet,API::ContentWorld &>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = [a1 _apiObject];
  uint64_t v7 = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  long long v17 = v7;
  WTF::URL::URL((uint64_t)&v18, (uint64_t *)(a2 + 8));
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  v19[0] = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  v19[1] = v9;
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  v20[0] = v10;
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a2 + 7objc_destroyWeak(this + 2) = 0;
  v20[1] = v11;
  long long v21 = *(_OWORD *)(a2 + 80);
  char v22 = *(unsigned char *)(a2 + 96);
  API::UserStyleSheet::UserStyleSheet(v6, (uint64_t)&v17, a3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v13);
  int v15 = v18;
  long long v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t result = v17;
  long long v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  *(void *)(v6 + 8) = a1;
  return result;
}

void sub_198C71520(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C71720(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 + 64, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 + 48, v25);
  uint64_t v27 = a23;
  a23 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v26);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  char v28 = a22;
  a22 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v26);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v26);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, v29);
  uint64_t v31 = a16;
  a16 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v30);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  uint64_t v32 = a21;
  a21 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v30);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198C719D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C71A70(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C71B20(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C71BC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198C71D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_198C71E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(a1);
}

void WebCore::AuthenticatorAssertionResponse::setLAContext(WebCore::AuthenticatorAssertionResponse *this, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = (const void *)*((void *)this + 24);
  *((void *)this + 24) = cf;
  if (v4)
  {
    CFRelease(v4);
  }
}

void API::UserInitiatedAction::~UserInitiatedAction(API::UserInitiatedAction *this)
{
}

uint64_t API::ObjectImpl<(API::Object::Type)105>::type()
{
  return 105;
}

WTF::StringImpl *WebKit::BackgroundFetchStoreManager::createNewStorageIdentifier@<X0>(WebKit::BackgroundFetchStoreManager *this@<X0>, void *a2@<X8>)
{
  WTF::createVersion4UUIDString((uint64_t *)&v5, this);
  v6[0] = (uint64_t)"-backgroundfetch";
  v6[1] = 17;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v5, v6, a2);
  if (*a2)
  {
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void *WebKit::BackgroundFetchStoreManager::BackgroundFetchStoreManager(void *a1, _DWORD **a2, uint64_t *a3, uint64_t *a4)
{
  *a1 = 0;
  uint64_t v6 = *a2;
  if (*a2) {
    *v6 += 2;
  }
  a1[1] = v6;
  uint64_t v7 = *a3;
  *a3 = 0;
  a1[2] = v7;
  WTF::WorkQueue::create();
  uint64_t v8 = *a4;
  *a4 = 0;
  a1[4] = v8;
  a1[5] = 0;
  uint64_t v9 = a1[3];
  WTF::String::isolatedCopy();
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9CBDE0;
  uint64_t v14 = v10;
  v10[1] = v13;
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, &v14);
  uint64_t v11 = v14;
  uint64_t v14 = 0;
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  return a1;
}

void WebKit::BackgroundFetchStoreManager::~BackgroundFetchStoreManager(WebKit::BackgroundFetchStoreManager *this, void *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = v3 + 8;
      do
      {
        if (*(void *)(v5 - 8) != -1)
        {
          WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
          uint64_t v6 = *(WTF::StringImpl **)(v5 - 8);
          *(void *)(v5 - 8) = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2) {
              WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
            }
            else {
              *(_DWORD *)v6 -= 2;
            }
          }
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 56))(v8);
  }
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 56))(v9);
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  if (*(void *)this)
  {
    *(void *)(*(void *)this + 8) = 0;
    uint64_t v11 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v11)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

uint64_t WebKit::BackgroundFetchStoreManager::initializeFetches(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[1];
  if (v3 && *(_DWORD *)(v3 + 4))
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = a1[3];
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
    uint64_t v17 = v4;
    WTF::String::isolatedCopy();
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v19 = v6;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v7 = &unk_1EE9CBE08;
    v7[1] = v17;
    uint64_t v8 = v18;
    uint64_t v17 = 0;
    long long v18 = 0;
    uint64_t v7[2] = v8;
    uint64_t v9 = v19;
    uint64_t v19 = 0;
    int v20 = v7;
    uint64_t v7[3] = v9;
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, &v20);
    uint64_t v11 = v20;
    int v20 = 0;
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
    uint64_t v12 = v19;
    uint64_t v19 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    char v13 = v18;
    long long v18 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v10);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t result = v17;
    uint64_t v17 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
    }
  }
  else
  {
    uint64_t v17 = 0;
    long long v18 = 0;
    uint64_t v14 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 16))(v14, &v17);
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    return WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v15);
  }
  return result;
}

WTF::StringImpl *WebKit::BackgroundFetchStoreManager::clearFetch(void *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[1];
  if (v5 && *(_DWORD *)(v5 + 4))
  {
    *(void *)&long long v34 = 0;
    uint64_t v6 = *a2;
    if (*a2)
    {
      unsigned int v7 = *((unsigned __int8 *)v6 + 16);
      uint64_t v8 = *((void *)v6 + 1);
      LODWORD(v6) = *((_DWORD *)v6 + 1);
      *(void *)&long long v34 = v8;
      int v9 = (v7 >> 2) & 1;
    }
    else
    {
      LOBYTE(v9) = 1;
    }
    DWORD2(v34) = v6;
    BYTE12(v34) = v9;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v31, &v34, 1uLL);
    WTF::FileSystemImpl::pathByAppendingComponents();
    uint64_t v11 = v31[0];
    if (v31[0])
    {
      v31[0] = 0;
      LODWORD(v31[1]) = 0;
      WTF::fastFree(v11, v10);
    }
    uint64_t v14 = a1 + 2;
    uint64_t v12 = (WTF::StringImpl *)a1[2];
    uint64_t v13 = v14[1];
    (*(void (**)(WTF::StringImpl *))(*(void *)v12 + 48))(v12);
    v31[0] = v12;
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    int v15 = *(WTF::StringImpl **)a3;
    *(void *)a3 = 0;
    v32[1] = v15;
    uint64_t v16 = WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v16 = &unk_1EE9CBE58;
    *(WTF::StringImpl **)(v16 + 8) = v31[0];
    *(WTF::StringImpl **)(v16 + 16) = v31[1];
    *(WTF::StringImpl **)(v16 + 24) = v32[0];
    uint64_t v17 = v32[1];
    *(_OWORD *)uint64_t v31 = 0u;
    *(_OWORD *)uint64_t v32 = 0u;
    *(void *)(v16 + 3objc_destroyWeak(this + 2) = v17;
    *(void *)&long long v34 = v16;
    (*(void (**)(uint64_t, long long *))(*(void *)v13 + 32))(v13, &v34);
    uint64_t v19 = v34;
    *(void *)&long long v34 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    int v20 = v32[1];
    v32[1] = 0;
    if (v20) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v20 + 8))(v20);
    }
    long long v21 = v32[0];
    v32[0] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v18);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v29 = v31[1];
    v31[1] = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v18);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    uint64_t v30 = v31[0];
    v31[0] = 0;
    if (v30) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v30 + 56))(v30);
    }
    uint64_t result = v33;
    uint64_t v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  char v22 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1 + 5, a2, a3);
  uint64_t v23 = v22;
  uint64_t v24 = a1[5];
  if (v24)
  {
    uint64_t v25 = (WTF::StringImpl **)(v24 + 24 * *(unsigned int *)(v24 - 4));
    if (v25 == v22) {
      goto LABEL_21;
    }
LABEL_19:
    if (v25 != v22) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(a1 + 5, v22);
    }
    goto LABEL_21;
  }
  if (v22)
  {
    uint64_t v25 = 0;
    goto LABEL_19;
  }
LABEL_21:
  uint64_t v26 = *(WTF::StringImpl **)a3;
  *(void *)a3 = 0;
  (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(void *)v26 + 16))(v26, v23);
  uint64_t v27 = *(uint64_t (**)(WTF::StringImpl *))(*(void *)v26 + 8);

  return (WTF::StringImpl *)v27(v26);
}

uint64_t WebKit::BackgroundFetchStoreManager::clearAllFetches(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = result;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(result + 8);
  if (!v6 || !*(_DWORD *)(v6 + 4))
  {
    uint64_t v21 = *(unsigned int *)(a2 + 12);
    if (!v21)
    {
LABEL_24:
      uint64_t v27 = *(void *)a3;
      *(void *)a3 = 0;
      (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
      char v28 = *(uint64_t (**)(uint64_t))(*(void *)v27 + 8);
      return v28(v27);
    }
    char v22 = *(WTF::StringImpl ***)a2;
    uint64_t v23 = (uint64_t *)(result + 40);
    uint64_t v24 = 8 * v21;
    while (1)
    {
      uint64_t v25 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v23, v22, a3);
      if (*v23)
      {
        uint64_t v26 = *v23 + 24 * *(unsigned int *)(*v23 - 4);
        if ((WTF::StringImpl **)v26 != v25) {
          goto LABEL_21;
        }
      }
      else if (v25)
      {
        uint64_t v26 = 0;
LABEL_21:
        if ((WTF::StringImpl **)v26 != v25) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v23, v25);
        }
      }
      ++v22;
      v24 -= 8;
      if (!v24) {
        goto LABEL_24;
      }
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v7 = *(unsigned int *)(a2 + 12);
  if (v7)
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v8 = WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v46) = v7;
    uint64_t v45 = v8;
    uint64_t v9 = *(unsigned int *)(a2 + 12);
    if (v9)
    {
      uint64_t v10 = v8;
      uint64_t v11 = 0;
      uint64_t v12 = *(WTF::StringImpl ***)a2;
      uint64_t v13 = 8 * v9;
      do
      {
        *(void *)&long long v48 = 0;
        uint64_t v14 = v12[v11];
        if (v14)
        {
          unsigned int v15 = *((unsigned __int8 *)v14 + 16);
          uint64_t v16 = *((void *)v14 + 1);
          LODWORD(v14) = *((_DWORD *)v14 + 1);
          *(void *)&long long v48 = v16;
          int v17 = (v15 >> 2) & 1;
        }
        else
        {
          LOBYTE(v17) = 1;
        }
        DWORD2(v48) = v14;
        BYTE12(v48) = v17;
        WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v41, &v48, 1uLL);
        WTF::FileSystemImpl::pathByAppendingComponents();
        uint64_t v19 = v41;
        if (v41)
        {
          long long v41 = 0;
          LODWORD(v4objc_destroyWeak(this + 2) = 0;
          WTF::fastFree(v19, v18);
        }
        int v20 = v11 + 1;
        *(void *)(v10 + 8 * v11++) = v47;
        v13 -= 8;
      }
      while (v13);
      HIDWORD(v46) = v20;
    }
  }
  uint64_t v31 = v5 + 16;
  uint64_t v29 = *(WTF **)(v5 + 16);
  uint64_t v30 = *(void *)(v31 + 8);
  (*(void (**)(WTF *))(*(void *)v29 + 48))(v29);
  long long v41 = v29;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((unsigned int *)&v45, (uint64_t)&v42);
  uint64_t v32 = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t v44 = v32;
  uint64_t v33 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v33 = &unk_1EE9CBE80;
  v33[1] = v41;
  uint64_t v34 = v42;
  long long v41 = 0;
  uint64_t v42 = 0;
  void v33[2] = v34;
  v33[3] = v43;
  uint64_t v35 = v44;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  v33[4] = v35;
  *(void *)&long long v48 = v33;
  (*(void (**)(uint64_t, long long *))(*(void *)v30 + 32))(v30, &v48);
  uint64_t v37 = v48;
  *(void *)&long long v48 = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t v38 = v44;
  uint64_t v44 = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v36);
  long long v40 = v41;
  long long v41 = 0;
  if (v40) {
    (*(void (**)(WTF *))(*(void *)v40 + 56))(v40);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v39);
}

uint64_t WebKit::BackgroundFetchStoreManager::storeFetch(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v9 = a3 + a4;
  if (__CFADD__(a3, a4) || (uint64_t v11 = *((unsigned int *)a7 + 3), v12 = __CFADD__(v9, v11), v13 = v9 + v11, v12))
  {
    uint64_t v14 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, 1);
    unsigned int v15 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 8);
    return v15(v14);
  }
  else
  {
    uint64_t v32 = v13;
    uint64_t v23 = *(void *)a1;
    if (*(void *)a1) {
      goto LABEL_12;
    }
    uint64_t v23 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v23 = 1;
    *(void *)(v23 + 8) = a1;
    uint64_t v25 = *(unsigned int **)a1;
    *(void *)a1 = v23;
    if (!v25) {
      goto LABEL_12;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v24);
    }
    uint64_t v23 = *(void *)a1;
    if (*(void *)a1) {
LABEL_12:
    }
      atomic_fetch_add((atomic_uint *volatile)v23, 1u);
    uint64_t v26 = *a2;
    if (v26) {
      *(_DWORD *)v26 += 2;
    }
    uint64_t v27 = *a7;
    uint64_t v28 = a7[1];
    *a7 = 0;
    a7[1] = 0;
    uint64_t v29 = *a8;
    *a8 = 0;
    uint64_t v30 = WTF::fastMalloc((WTF *)0x50);
    *(void *)uint64_t v30 = &unk_1EE9CBEA8;
    *(void *)(v30 + 8) = v23;
    if (v26) {
      *(_DWORD *)v26 += 2;
    }
    *(void *)(v30 + 16) = v26;
    *(void *)(v30 + 24) = a3;
    *(void *)(v30 + 3objc_destroyWeak(this + 2) = a4;
    *(void *)(v30 + 40) = a5;
    *(unsigned char *)(v30 + 48) = a6;
    *(void *)(v30 + 56) = v27;
    *(void *)(v30 + 64) = v28;
    *(void *)(v30 + 7objc_destroyWeak(this + 2) = v29;
    uint64_t v33 = v30;
    (*(void (**)(void, uint64_t, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), v32, &v33);
    uint64_t result = v33;
    uint64_t v33 = 0;
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      if (!v26) {
        return result;
      }
    }
    else if (!v26)
    {
      return result;
    }
    if (*(_DWORD *)v26 == 2) {
      return WTF::StringImpl::destroy(v26, v31);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(void *a1, const WTF::String **a2, unint64_t a3, atomic_uint *a4, uint64_t *a5)
{
  uint64_t v10 = a1[1];
  if (v10 && *(_DWORD *)(v10 + 4))
  {
    WebKit::createFetchResponseBodyFile((WebKit *)v58, *a2, a3);
    uint64_t v11 = v58[0];
    if (v58[0])
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v12);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    else
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
    }
    uint64_t v34 = a1 + 2;
    uint64_t v33 = (WTF::StringImpl *)a1[2];
    uint64_t v32 = v34[1];
    (*(void (**)(WTF::StringImpl *))(*(void *)v33 + 48))(v33);
    v58[0] = v33;
    WTF::String::isolatedCopy();
    atomic_fetch_add(a4, 1u);
    uint64_t v35 = *a5;
    *a5 = 0;
    *(void *)&long long v59 = a4;
    *((void *)&v59 + objc_destroyWeak(this + 1) = v35;
    uint64_t v36 = WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v36 = &unk_1EE9CBF20;
    *(WTF::StringImpl **)(v36 + 8) = v58[0];
    *(WTF::StringImpl **)(v36 + 16) = v58[1];
    *(void *)(v36 + 24) = v59;
    uint64_t v37 = *((void *)&v59 + 1);
    *(_OWORD *)int v58 = 0u;
    long long v59 = 0u;
    *(void *)(v36 + 3objc_destroyWeak(this + 2) = v37;
    uint64_t v60 = v36;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v32 + 32))(v32, &v60);
    uint64_t v39 = v60;
    uint64_t v60 = 0;
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
    }
    uint64_t v40 = *((void *)&v59 + 1);
    *((void *)&v59 + objc_destroyWeak(this + 1) = 0;
    if (v40) {
      (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
    }
    long long v41 = (unsigned int *)v59;
    *(void *)&long long v59 = 0;
    if (v41) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v41, v38);
    }
    uint64_t v42 = v58[1];
    v58[1] = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v38);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
    uint64_t v43 = v58[0];
    v58[0] = 0;
    if (v43) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v43 + 56))(v43);
    }
    uint64_t result = v61;
    long long v61 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v38);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  uint64_t v13 = a1 + 5;
  uint64_t v14 = a1[5];
  if (v14
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v13, 0), (uint64_t v14 = *v13) != 0))
  {
    int v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    int v15 = 0;
  }
  unsigned int v16 = *((_DWORD *)*a2 + 4);
  int v57 = a5;
  if (v16 >= 0x100) {
    unsigned int v17 = v16 >> 8;
  }
  else {
    unsigned int v17 = WTF::StringImpl::hashSlowCase(*a2);
  }
  long long v18 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v20 = v17 & v15;
    uint64_t v21 = v14 + 24 * (v17 & v15);
    char v22 = *(WTF **)v21;
    if (*(void *)v21 == -1)
    {
      long long v18 = (void *)(v14 + 24 * v20);
      goto LABEL_18;
    }
    if (!v22) {
      break;
    }
    if (WTF::equal(v22, *a2, (const WTF::StringImpl *)a3)) {
      goto LABEL_54;
    }
LABEL_18:
    unsigned int v17 = i + v20;
  }
  if (v18)
  {
    void *v18 = 0;
    v18[1] = 0;
    void v18[2] = 0;
    --*(_DWORD *)(*v13 - 16);
    uint64_t v21 = (uint64_t)v18;
  }
  WTF::String::operator=((uint64_t *)v21, a2);
  v58[0] = 0;
  v58[1] = 0;
  uint64_t v25 = *(unsigned int *)(v21 + 20);
  if (v25)
  {
    uint64_t v26 = *(unsigned int ***)(v21 + 8);
    uint64_t v27 = 8 * v25;
    do
    {
      uint64_t v28 = *v26;
      WTF::StringImpl *v26 = 0;
      if (v28) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v28, v24);
      }
      ++v26;
      v27 -= 8;
    }
    while (v27);
  }
  uint64_t v29 = *(WTF **)(v21 + 8);
  if (v29)
  {
    *(void *)(v21 + 8) = 0;
    *(_DWORD *)(v21 + 16) = 0;
    WTF::fastFree(v29, v24);
  }
  v58[0] = 0;
  *(void *)(v21 + 8) = 0;
  v58[1] = 0;
  *(void *)(v21 + 16) = 0;
  WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v58, v24);
  uint64_t v30 = *v13;
  if (*v13) {
    int v31 = *(_DWORD *)(v30 - 12) + 1;
  }
  else {
    int v31 = 1;
  }
  *(_DWORD *)(v30 - 1objc_destroyWeak(this + 2) = v31;
  uint64_t v45 = *v13;
  if (*v13) {
    int v46 = *(_DWORD *)(v45 - 12);
  }
  else {
    int v46 = 0;
  }
  uint64_t v47 = (*(_DWORD *)(v45 - 16) + v46);
  unint64_t v48 = *(unsigned int *)(v45 - 4);
  if (v48 > 0x400)
  {
    if (v48 <= 2 * v47) {
LABEL_53:
    }
      uint64_t v21 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v13, (WTF::StringImpl **)v21);
  }
  else if (3 * v48 <= 4 * v47)
  {
    goto LABEL_53;
  }
LABEL_54:
  uint64_t v49 = (void *)(v21 + 8);
  unint64_t v50 = *(unsigned int *)(v21 + 20);
  if (v50 <= a3)
  {
    LODWORD(v5objc_destroyWeak(this + 1) = *(_DWORD *)(v21 + 20);
    do
    {
      v58[0] = 0;
      if (v51 == *(_DWORD *)(v21 + 16))
      {
        char v52 = (uint64_t *)WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(v21 + 8), v50 + 1, (unint64_t)v58);
        uint64_t v51 = *(unsigned int *)(v21 + 20);
        uint64_t v53 = *(void *)(v21 + 8);
        uint64_t v54 = *v52;
        *char v52 = 0;
        *(void *)(v53 + 8 * v5objc_destroyWeak(this + 1) = v54;
      }
      else
      {
        *(void *)(*v49 + 8 * v50) = 0;
      }
      LODWORD(v5objc_destroyWeak(this + 1) = v51 + 1;
      *(_DWORD *)(v21 + 20) = v51;
      uint64_t v55 = (unsigned int *)v58[0];
      v58[0] = 0;
      if (v55)
      {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v55, v23);
        LODWORD(v5objc_destroyWeak(this + 1) = *(_DWORD *)(v21 + 20);
      }
      unint64_t v50 = v51;
    }
    while (v51 <= a3);
  }
  WebCore::SharedBufferBuilder::ensureBuffer((WebCore::SharedBufferBuilder *)(*v49 + 8 * a3));
  WebCore::FragmentedSharedBuffer::append();
  uint64_t v56 = *v57;
  *int v57 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v56 + 16))(v56, 0);
  return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v56 + 8))(v56);
}

uint64_t WebKit::createFetchResponseBodyFile(WebKit *this, const WTF::String *a2, unint64_t a3)
{
  if (a2)
  {
    *(_DWORD *)a2 += 2;
    uint64_t result = WTF::makeString<WTF::String,char,unsigned long>((uint64_t)this, (uint64_t)a2, a3);
    if (*(_DWORD *)a2 == 2)
    {
      return WTF::StringImpl::destroy(a2, v5);
    }
    else
    {
      *(_DWORD *)a2 -= 2;
    }
  }
  else
  {
    return WTF::makeString<WTF::String,char,unsigned long>((uint64_t)this, 0, a3);
  }
  return result;
}

unsigned int *WebKit::BackgroundFetchStoreManager::retrieveResponseBody(void *a1, const WTF::String **a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v7 = a1[1];
  if (v7 && *(_DWORD *)(v7 + 4))
  {
    WebKit::createFetchResponseBodyFile((WebKit *)&v31, *a2, a3);
    uint64_t v8 = (WTF::StringImpl *)v31;
    if (v31)
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v9);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    else
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
    }
    uint64_t v21 = a1 + 2;
    uint64_t v19 = (unsigned int *)a1[2];
    uint64_t v20 = v21[1];
    (*(void (**)(unsigned int *))(*(void *)v19 + 48))(v19);
    int v31 = v19;
    WTF::String::isolatedCopy();
    uint64_t v22 = *a4;
    *a4 = 0;
    uint64_t v33 = v22;
    uint64_t v23 = (WebCore::FragmentedSharedBuffer *)WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v23 = &unk_1EE9CBF70;
    *((void *)v23 + objc_destroyWeak(this + 1) = v31;
    uint64_t v24 = v32;
    int v31 = 0;
    uint64_t v32 = 0;
    *((void *)v23 + objc_destroyWeak(this + 2) = v24;
    uint64_t v25 = v33;
    uint64_t v33 = 0;
    *((void *)v23 + 3) = v25;
    uint64_t v34 = v23;
    (*(void (**)(uint64_t, WebCore::FragmentedSharedBuffer **))(*(void *)v20 + 32))(v20, &v34);
    uint64_t v27 = v34;
    uint64_t v34 = 0;
    if (v27) {
      (*(void (**)(WebCore::FragmentedSharedBuffer *))(*(void *)v27 + 8))(v27);
    }
    uint64_t v28 = v33;
    uint64_t v33 = 0;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    uint64_t v29 = v32;
    uint64_t v32 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v26);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    uint64_t v30 = v31;
    int v31 = 0;
    if (v30) {
      (*(void (**)(unsigned int *))(*(void *)v30 + 56))(v30);
    }
    uint64_t result = (unsigned int *)v35;
    uint64_t v35 = 0;
    if (result)
    {
      if (*result == 2) {
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
      }
      else {
        *result -= 2;
      }
    }
    return result;
  }
  uint64_t v10 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1 + 5, a2, (const WTF::StringImpl *)a3);
  uint64_t v11 = a1[5];
  if (v11) {
    v11 += 24 * *(unsigned int *)(v11 - 4);
  }
  if (v11 == v10 || *(unsigned int *)(v10 + 20) <= a3)
  {
    int v31 = 0;
    uint64_t v18 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned int **))(*(void *)v18 + 16))(v18, &v31);
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    uint64_t result = v31;
    int v31 = 0;
    if (!result) {
      return result;
    }
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v14);
  }
  WebCore::SharedBufferBuilder::copy((WebCore::SharedBufferBuilder *)(*(void *)(v10 + 8) + 8 * a3), (uint64_t *)&v34);
  WebCore::FragmentedSharedBuffer::makeContiguous((uint64_t *)&v35, v34);
  BOOL v12 = v35;
  uint64_t v35 = 0;
  int v31 = (unsigned int *)v12;
  uint64_t v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(void *)v13 + 16))(v13, &v31);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  int v15 = v31;
  int v31 = 0;
  if (v15) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v15, v14);
  }
  unsigned int v16 = (unsigned int *)v35;
  uint64_t v35 = 0;
  if (v16) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v16, v14);
  }
  uint64_t result = (unsigned int *)v34;
  uint64_t v34 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v14);
  }
  return result;
}

uint64_t *WebCore::SharedBufferBuilder::copy@<X0>(WebCore::SharedBufferBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)this) {
    return (uint64_t *)MEMORY[0x1F4175970]();
  }
  else {
    return WebCore::FragmentedSharedBuffer::create(a2, 0);
  }
}

uint64_t WebKit::CacheStorageCache::CacheStorageCache(uint64_t a1, unsigned int *a2, _DWORD **a3, _DWORD **a4, uint64_t a5, uint64_t *a6)
{
  *(void *)a1 = 0;
  uint64_t IdentifierInternal = (WebCore::Process *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  uint64_t v13 = WebCore::Process::identifier(IdentifierInternal);
  *(void *)(a1 + 8) = IdentifierInternal;
  *(void *)(a1 + 16) = v13;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2, (uint64_t)a2);
  uint64_t v14 = *(atomic_uint **)a2;
  if (*(void *)a2) {
    atomic_fetch_add(v14, 1u);
  }
  *(void *)(a1 + 24) = v14;
  *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  int v15 = *a3;
  if (*a3) {
    *v15 += 2;
  }
  *(void *)(a1 + 56) = v15;
  unsigned int v16 = *a4;
  if (*a4) {
    *v16 += 2;
  }
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (*(void *)a5 && *(_DWORD *)(*(void *)a5 + 4))
  {
    uint64_t v17 = WTF::fastMalloc((WTF *)0x38);
    uint64_t v18 = v17;
    uint64_t v19 = *a4;
    *(_DWORD *)(v17 + 8) = 1;
    *(void *)uint64_t v17 = &unk_1EE9CBCE0;
    if (v19) {
      *v19 += 2;
    }
    *(void *)(v17 + 16) = v19;
    uint64_t v20 = *(_DWORD **)a5;
    if (*(void *)a5) {
      *v20 += 2;
    }
    *(void *)(v17 + 24) = v20;
    WebKit::CacheStorageDiskStore::versionDirectoryPath((WebKit::CacheStorageDiskStore *)&v30);
    WTF::FileSystemImpl::pathByAppendingComponent();
    uint64_t v22 = v30;
    uint64_t v30 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v21);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t Salt = WTF::FileSystemImpl::readOrMakeSalt((WTF::FileSystemImpl *)&v29, v21);
    if ((_BYTE)v24) {
      uint64_t v25 = Salt;
    }
    else {
      uint64_t v25 = 0;
    }
    *(void *)(v18 + 3objc_destroyWeak(this + 2) = v25;
    uint64_t v26 = v29;
    uint64_t v29 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v24);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    uint64_t v27 = *a6;
    *a6 = 0;
    *(void *)(v18 + 40) = v27;
    WTF::WorkQueue::create();
  }
  else
  {
    uint64_t v18 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v18 + 8) = 1;
    *(void *)uint64_t v18 = &unk_1EE9CBD20;
    *(void *)(v18 + 16) = 0;
  }
  *(void *)(a1 + 80) = v18;
  return a1;
}

void WebKit::CacheStorageCache::~CacheStorageCache(WebKit::CacheStorageCache *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)this + 13);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)*((void *)this + 5);
    uint64_t v5 = 8 * v3;
    do
    {
      v17[0] = 4;
      int v18 = 1;
      uint64_t v6 = *v4;
      *v4++ = 0;
      (*(void (**)(uint64_t, char *))(*(void *)v6 + 16))(v6, v17);
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
  }
  uint64_t v8 = *((void *)this + 9);
  if (v8) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, a2);
  }
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = *((unsigned int *)this + 13);
  BOOL v12 = (WTF *)*((void *)this + 5);
  if (v11)
  {
    uint64_t v13 = 8 * v11;
    do
    {
      uint64_t v14 = *(void *)v12;
      *(void *)BOOL v12 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      BOOL v12 = (WTF *)((char *)v12 + 8);
      v13 -= 8;
    }
    while (v13);
    BOOL v12 = (WTF *)*((void *)this + 5);
  }
  if (v12)
  {
    *((void *)this + 5) = 0;
    *((_DWORD *)this + 1objc_destroyWeak(this + 2) = 0;
    WTF::fastFree(v12, a2);
  }
  int v15 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, a2);
  }
  if (*(void *)this)
  {
    *(void *)(*(void *)this + 8) = 0;
    unsigned int v16 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v16)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, a2);
      }
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

unsigned int *WebKit::CacheStorageCache::open(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = a2;
  if (*(unsigned char *)(a1 + 32))
  {
    long long v13 = *(_OWORD *)(a1 + 8);
    char v14 = 0;
    int v15 = 0;
    uint64_t v4 = *(void *)a2;
    *(void *)a2 = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v4 + 16))(v4, &v13);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  else
  {
    uint64_t result = (unsigned int *)(a1 + 40);
    uint64_t v6 = *(unsigned int *)(a1 + 52);
    if (v6 == *(_DWORD *)(a1 + 48))
    {
      uint64_t result = (unsigned int *)WTF::Vector<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v6 + 1, (unint64_t)a2);
      uint64_t v2 = result;
      uint64_t v6 = *(unsigned int *)(a1 + 52);
      uint64_t v7 = (void *)(*(void *)(a1 + 40) + 8 * v6);
    }
    else
    {
      uint64_t v7 = (void *)(*(void *)result + 8 * v6);
    }
    uint64_t v8 = *(void *)v2;
    *(void *)uint64_t v2 = 0;
    *uint64_t v7 = v8;
    unsigned int v9 = v6 + 1;
    *(_DWORD *)(a1 + 5objc_destroyWeak(this + 2) = v9;
    if (v9 <= 1)
    {
      uint64_t v10 = *(void *)(a1 + 80);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
      uint64_t v11 = *(atomic_uint **)a1;
      if (*(void *)a1) {
        atomic_fetch_add(v11, 1u);
      }
      BOOL v12 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v12 = &unk_1EE9CBFE8;
      v12[1] = a1;
      void v12[2] = v11;
      *(void *)&long long v13 = v12;
      (*(void (**)(uint64_t, long long *))(*(void *)v10 + 16))(v10, &v13);
      uint64_t result = (unsigned int *)v13;
      *(void *)&long long v13 = 0;
      if (result) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebKit::CacheStorageCache::retrieveRecords(uint64_t a1, WebCore::ResourceRequestBase *this, uint64_t *a3)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v6 = WebCore::ResourceRequestBase::url(this);
  uint64_t v7 = *(WTF::StringImpl **)v6;
  if (*(void *)v6)
  {
    *(_DWORD *)v7 += 2;
    char v82 = v7;
    long long v83 = *(_OWORD *)(v6 + 8);
    long long v84 = *(_OWORD *)(v6 + 24);
    if (!*((unsigned char *)this + 233))
    {
      uint64_t v8 = (void *)WebCore::ResourceRequestBase::httpMethod(this);
      if ((MEMORY[0x19972E990](*v8, "GET", 3) & 1) == 0) {
        goto LABEL_25;
      }
    }
    unsigned int v9 = (uint64_t *)(a1 + 72);
    WebKit::computeKeyURL((WebKit *)v87, (const WTF::URL *)&v82);
    uint64_t v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 72), v87, v10);
    if (v87[0])
    {
      if (*(_DWORD *)v87[0] == 2) {
        WTF::StringImpl::destroy(v87[0], v11);
      }
      else {
        *(_DWORD *)v87[0] -= 2;
      }
    }
    uint64_t v13 = *v9;
    if (*v9) {
      v13 += 24 * *(unsigned int *)(v13 - 4);
    }
    if (v13 == v12) {
      goto LABEL_25;
    }
    LOBYTE(v87[0]) = *((unsigned char *)this + 232);
    *(_WORD *)((char *)v87 + objc_destroyWeak(this + 1) = *(_WORD *)((char *)this + 233);
    uint64_t v14 = *(unsigned int *)(v12 + 20);
    if (v14)
    {
      uint64_t v15 = *(void *)(v12 + 8) + 104;
      uint64_t v16 = 160 * v14;
      while ((*(unsigned char *)(*(void *)v15 + 16) & 0x10) == 0)
      {
        if (WebCore::DOMCacheEngine::queryCacheMatch())
        {
          unsigned int v17 = HIDWORD(v86);
          if (HIDWORD(v86) == v86)
          {
            WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation&>((uint64_t)&v85, v15 - 104);
          }
          else
          {
            uint64_t v18 = v85;
            uint64_t v19 = WebKit::NetworkCache::Key::Key(v85 + 160 * HIDWORD(v86), v15 - 104);
            long long v20 = *(_OWORD *)(v15 - 32);
            *(_OWORD *)(v19 + 88) = *(_OWORD *)(v15 - 16);
            *(_OWORD *)(v19 + 7objc_destroyWeak(this + 2) = v20;
            uint64_t v21 = *(_DWORD **)v15;
            if (*(void *)v15) {
              *v21 += 2;
            }
            uint64_t v22 = v18 + 160 * v17;
            *(void *)(v22 + 104) = v21;
            long long v23 = *(_OWORD *)(v15 + 24);
            *(_OWORD *)(v22 + 11objc_destroyWeak(this + 2) = *(_OWORD *)(v15 + 8);
            *(_OWORD *)(v22 + 128) = v23;
            *(unsigned char *)(v22 + 144) = *(unsigned char *)(v15 + 40);
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v22 + 152), (void **)(v15 + 48));
            ++HIDWORD(v86);
          }
        }
        v15 += 160;
        v16 -= 160;
        if (!v16) {
          goto LABEL_21;
        }
      }
      __break(0xC471u);
LABEL_65:
      JUMPOUT(0x198C74384);
    }
  }
  else
  {
    char v82 = 0;
    long long v83 = *(_OWORD *)(v6 + 8);
    long long v84 = *(_OWORD *)(v6 + 24);
    uint64_t v55 = *(void **)(a1 + 72);
    uint64_t v56 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v55);
    int v58 = v56;
    long long v59 = v57;
    if (v55) {
      uint64_t v60 = (WTF::StringImpl *)&v55[3 * *((unsigned int *)v55 - 1)];
    }
    else {
      uint64_t v60 = 0;
    }
    if (v60 != v56)
    {
      char v79 = v60;
      do
      {
        int v80 = 0;
        uint64_t v81 = 0;
        uint64_t v61 = *((unsigned int *)v58 + 5);
        if (v61)
        {
          if (v61 >= 0x199999A)
          {
            __break(0xC471u);
            goto LABEL_65;
          }
          int v62 = 160 * v61;
          uint64_t v63 = WTF::fastMalloc((WTF *)(160 * v61));
          LODWORD(v8objc_destroyWeak(this + 1) = (v62 & 0xFFFFFFE0) / 0xA0;
          int v80 = (uint64_t *)v63;
          unsigned int v64 = *((_DWORD *)v58 + 5);
          if (v64)
          {
            uint64_t v65 = *((void *)v58 + 1);
            uint64_t v66 = v65 + 160 * v64;
            do
            {
              WebKit::NetworkCache::Key::Key((uint64_t)v87, v65);
              long long v67 = *(_OWORD *)(v65 + 88);
              long long v90 = *(_OWORD *)(v65 + 72);
              long long v91 = v67;
              uint64_t v68 = *(_DWORD **)(v65 + 104);
              if (v68) {
                *v68 += 2;
              }
              long long v92 = v68;
              long long v69 = *(_OWORD *)(v65 + 128);
              long long v93 = *(_OWORD *)(v65 + 112);
              long long v94 = v69;
              LOBYTE(v95) = *(unsigned char *)(v65 + 144);
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v97, (void **)(v65 + 152));
              WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t)&v80, (uint64_t *)v87);
              WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v87, v70);
              v65 += 160;
            }
            while (v65 != v66);
          }
        }
        uint64_t v71 = HIDWORD(v81);
        unint64_t v72 = HIDWORD(v81) + (unint64_t)HIDWORD(v86);
        if (v72 > v86)
        {
          unint64_t v73 = v86 + ((unint64_t)v86 >> 2);
          if (v73 >= 0x10) {
            unint64_t v74 = v73 + 1;
          }
          else {
            unint64_t v74 = 16;
          }
          if (v74 <= v72) {
            unint64_t v75 = HIDWORD(v81) + (unint64_t)HIDWORD(v86);
          }
          else {
            unint64_t v75 = v74;
          }
          WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v85, v75);
          uint64_t v71 = HIDWORD(v81);
        }
        if (v71)
        {
          char v76 = v80;
          uint64_t v77 = 160 * v71;
          do
          {
            WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t)&v85, v76);
            v76 += 20;
            v77 -= 160;
          }
          while (v77);
        }
        WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v57);
        int v58 = (WTF::StringImpl *)((char *)v58 + 24);
        if (v58 == v59)
        {
          int v58 = v59;
          char v78 = v79;
        }
        else
        {
          char v78 = v79;
          while ((unint64_t)(*(void *)v58 + 1) <= 1)
          {
            int v58 = (WTF::StringImpl *)((char *)v58 + 24);
            if (v58 == v59)
            {
              int v58 = v59;
              break;
            }
          }
        }
      }
      while (v58 != v78);
    }
  }
LABEL_21:
  if (HIDWORD(v86))
  {
    uint64_t v24 = *(void *)(a1 + 80);
    WTF::URL::URL((uint64_t)v87, (uint64_t *)this);
    WTF::URL::URL((uint64_t)v89, (uint64_t *)this + 5);
    uint64_t v25 = *((void *)this + 10);
    long long v26 = *(_OWORD *)((char *)this + 88);
    *(_OWORD *)((char *)this + 88) = 0u;
    long long v91 = v26;
    *(void *)&long long v26 = *((void *)this + 13);
    *((void *)this + 13) = 0;
    *((void *)&v90 + objc_destroyWeak(this + 1) = v25;
    long long v92 = (_DWORD *)v26;
    uint64_t v27 = *((void *)this + 14);
    *((void *)this + 14) = 0;
    *(void *)&long long v93 = v27;
    uint64_t v28 = *((void *)this + 15);
    *((void *)this + 15) = 0;
    *((void *)&v93 + objc_destroyWeak(this + 1) = v28;
    uint64_t v29 = *((void *)this + 16);
    *((void *)this + 16) = 0;
    *(void *)&long long v94 = v29;
    uint64_t v30 = *((void *)this + 17);
    *((void *)this + 17) = 0;
    *((void *)&v94 + objc_destroyWeak(this + 1) = v30;
    LODWORD(v29) = *((_DWORD *)this + 36);
    char v96 = *((unsigned char *)this + 148);
    int v95 = v29;
    long long v31 = *(_OWORD *)((char *)this + 152);
    *(_OWORD *)((char *)this + 15objc_destroyWeak(this + 2) = 0u;
    long long v97 = v31;
    char v100 = *((unsigned char *)this + 184);
    uint64_t v32 = *((void *)this + 21);
    uint64_t v33 = *((void *)this + 22);
    *((void *)this + 2objc_destroyWeak(this + 1) = 0;
    uint64_t v98 = v32;
    uint64_t v99 = v33;
    uint64_t v34 = *((void *)this + 24);
    *((void *)this + 24) = 0;
    uint64_t v101 = v34;
    __int16 v102 = *((_WORD *)this + 100);
    long long v35 = *((_OWORD *)this + 13);
    *((_OWORD *)this + 13) = 0u;
    long long v103 = v35;
    uint64_t v36 = *((void *)this + 28);
    *((void *)this + 28) = 0;
    uint64_t v104 = v36;
    int v105 = *((_DWORD *)this + 58);
    uint64_t v37 = *a3;
    *a3 = 0;
    uint64_t v106 = v37;
    uint64_t v38 = WTF::fastMalloc((WTF *)0x100);
    *(void *)uint64_t v38 = &unk_1EE9CC010;
    WTF::URL::URL(v38 + 8, (uint64_t *)v87);
    WTF::URL::URL(v38 + 48, v89);
    *(void *)(v38 + 88) = *((void *)&v90 + 1);
    *(void *)(v38 + 96) = v91;
    uint64_t v39 = *((void *)&v91 + 1);
    long long v91 = 0u;
    *(void *)(v38 + 104) = v39;
    uint64_t v40 = v92;
    long long v92 = 0;
    *(void *)(v38 + 11objc_destroyWeak(this + 2) = v40;
    uint64_t v41 = v93;
    *(void *)&long long v93 = 0;
    *(void *)(v38 + 120) = v41;
    uint64_t v42 = *((void *)&v93 + 1);
    *((void *)&v93 + objc_destroyWeak(this + 1) = 0;
    *(void *)(v38 + 128) = v42;
    uint64_t v43 = v94;
    *(void *)&long long v94 = 0;
    *(void *)(v38 + 136) = v43;
    uint64_t v44 = *((void *)&v94 + 1);
    *((void *)&v94 + objc_destroyWeak(this + 1) = 0;
    *(void *)(v38 + 144) = v44;
    LODWORD(v43) = v95;
    *(unsigned char *)(v38 + 156) = v96;
    *(_DWORD *)(v38 + 15objc_destroyWeak(this + 2) = v43;
    *(void *)(v38 + 160) = v97;
    uint64_t v45 = *((void *)&v97 + 1);
    long long v97 = 0u;
    *(void *)(v38 + 168) = v45;
    *(void *)(v38 + 176) = v98;
    uint64_t v46 = v99;
    *(unsigned char *)(v38 + 19objc_destroyWeak(this + 2) = v100;
    *(void *)(v38 + 184) = v46;
    uint64_t v47 = v101;
    uint64_t v98 = 0;
    uint64_t v101 = 0;
    *(void *)(v38 + 200) = v47;
    *(_WORD *)(v38 + 208) = v102;
    *(void *)(v38 + 216) = v103;
    uint64_t v48 = *((void *)&v103 + 1);
    long long v103 = 0u;
    *(void *)(v38 + 224) = v48;
    *(void *)(v38 + 23objc_destroyWeak(this + 2) = v104;
    *(_DWORD *)(v38 + 240) = v105;
    uint64_t v49 = v106;
    uint64_t v104 = 0;
    uint64_t v106 = 0;
    *(void *)(v38 + 248) = v49;
    int v80 = (uint64_t *)v38;
    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v24 + 24))(v24, &v85, &v80);
    uint64_t v51 = v80;
    int v80 = 0;
    if (v51) {
      (*(void (**)(uint64_t *))(*v51 + 8))(v51);
    }
    WebKit::CacheStorageCache::retrieveRecords(WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::RetrieveRecordsOptions &&::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WebCore::RetrieveRecordsOptions &&::CrashOnOverflow,16ul,WebCore::RetrieveRecordsOptions &&::FastMalloc>,WebCore::RetrieveRecordsOptions &&::Vector::Error> &&)> &&)::$_1::~$_1((WebCore::ResourceRequestBase *)v87, v50);
    goto LABEL_27;
  }
LABEL_25:
  v87[0] = 0;
  v87[1] = 0;
  int v88 = 0;
  uint64_t v53 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v53 + 16))(v53, v87);
  (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  if (v88 != -1) {
    ((void (*)(uint64_t **, WTF::StringImpl **))off_1EE9CBD50[v88])(&v80, v87);
  }
LABEL_27:
  if (v82)
  {
    if (*(_DWORD *)v82 == 2) {
      WTF::StringImpl::destroy(v82, v52);
    }
    else {
      *(_DWORD *)v82 -= 2;
    }
  }
  return WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85, v52);
}

WTF::StringImpl *WebKit::computeKeyURL(WebKit *this, const WTF::URL *a2)
{
  if ((*((unsigned char *)a2 + 8) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C74638);
  }
  uint64_t v2 = *(WTF::StringImpl **)a2;
  if (!*(void *)a2 || !*((_DWORD *)v2 + 1))
  {
    __break(0xC471u);
    goto LABEL_14;
  }
  *(_DWORD *)v2 += 2;
  unsigned int v9 = v2;
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  long long v10 = *(_OWORD *)((char *)a2 + 8);
  long long v11 = v4;
  WTF::URL::removeQueryAndFragmentIdentifier((WTF::URL *)&v9);
  uint64_t result = v9;
  if (!v9)
  {
    *(void *)this = 0;
    goto LABEL_13;
  }
  int v7 = *(_DWORD *)v9;
  int v8 = *((_DWORD *)v9 + 1);
  *(_DWORD *)v9 += 2;
  *(void *)this = result;
  if (!v8)
  {
LABEL_13:
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x198C74604);
  }
  unsigned int v9 = 0;
  if (!v7) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  }
  *(_DWORD *)uint64_t result = v7;
  return result;
}

void WebKit::CacheStorageCache::retrieveRecords(WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::RetrieveRecordsOptions &&::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WebCore::RetrieveRecordsOptions &&::CrashOnOverflow,16ul,WebCore::RetrieveRecordsOptions &&::FastMalloc>,WebCore::RetrieveRecordsOptions &&::Vector::Error> &&)> &&)::$_1::~$_1(WebCore::ResourceRequestBase *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  int v7 = (const void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v7) {
    CFRelease(v7);
  }

  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

WTF::StringImpl *WebKit::CacheStorageCache::removeRecords(void *a1, WebCore::ResourceRequestBase *this, uint64_t a3, void *a4)
{
  if (*(unsigned char *)(a3 + 1)
    || (int v7 = (void *)WebCore::ResourceRequestBase::httpMethod(this), (MEMORY[0x19972E990](*v7, "GET", 3) & 1) != 0))
  {
    int v8 = a1 + 9;
    unsigned int v9 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
    WebKit::computeKeyURL((WebKit *)&v67, v9);
    uint64_t v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1 + 9, &v67, v10);
    if (v67)
    {
      if (*(_DWORD *)v67 == 2) {
        WTF::StringImpl::destroy(v67, v11);
      }
      else {
        *(_DWORD *)v67 -= 2;
      }
    }
    uint64_t v13 = *v8;
    if (*v8) {
      v13 += 24 * *(unsigned int *)(v13 - 4);
    }
    if (v13 != v12)
    {
      long long v67 = 0;
      uint64_t v68 = 0;
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      uint64_t v14 = *(void *)(v12 + 8);
      unsigned int v15 = *(_DWORD *)(v12 + 20);
      unint64_t v16 = v14 + 160 * v15;
      uint64_t v60 = v12 + 8;
      if (v15)
      {
        uint64_t v61 = a4;
        uint64_t v62 = v12;
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        int v63 = 0;
        uint64_t v19 = (uint64_t *)(v14 + 160 * v15);
        unint64_t v20 = (unint64_t)v19;
        do
        {
          uint64_t v21 = v14 + v17;
          if (WebCore::DOMCacheEngine::queryCacheMatch())
          {
            uint64_t v22 = (void *)(v21 + 80);
            int v23 = HIDWORD(v68);
            uint64_t v24 = v18;
            if (HIDWORD(v68) == v68)
            {
              uint64_t v22 = (void *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v67, HIDWORD(v68) + 1, (unint64_t)v22);
              int v23 = HIDWORD(v68);
            }
            *((void *)v67 + HIDWORD(v6WebKit::WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection((WebKit::WebSharedWorkerServerToContextConnection *)((char *)this - 8)) = *v22;
            HIDWORD(v68) = v23 + 1;
            unsigned int v25 = HIDWORD(v66);
            if (HIDWORD(v66) == v66)
            {
              WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation&>((uint64_t)&v65, v14 + v17);
            }
            else
            {
              uint64_t v27 = v65;
              uint64_t v28 = WebKit::NetworkCache::Key::Key(v65 + 160 * HIDWORD(v66), v14 + v17);
              uint64_t v29 = v14 + v17;
              long long v30 = *(_OWORD *)(v14 + v17 + 72);
              *(_OWORD *)(v28 + 88) = *(_OWORD *)(v14 + v17 + 88);
              *(_OWORD *)(v28 + 7objc_destroyWeak(this + 2) = v30;
              long long v31 = *(_DWORD **)(v21 + 104);
              if (v31) {
                *v31 += 2;
              }
              uint64_t v32 = v27 + 160 * v25;
              *(void *)(v32 + 104) = v31;
              long long v33 = *(_OWORD *)(v29 + 128);
              *(_OWORD *)(v32 + 11objc_destroyWeak(this + 2) = *(_OWORD *)(v29 + 112);
              *(_OWORD *)(v32 + 128) = v33;
              *(unsigned char *)(v32 + 144) = *(unsigned char *)(v21 + 144);
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v32 + 152), (void **)(v14 + v17 + 152));
              ++HIDWORD(v66);
            }
            uint64_t v34 = *(void *)(v14 + v17 + 96);
            unint64_t v35 = v14 + v17;
            if (v20 != *(void *)(v62 + 8) + 160 * *(unsigned int *)(v62 + 20))
            {
              if ((uint64_t *)v21 == v19)
              {
                unint64_t v35 = v20;
              }
              else
              {
                WTF::VectorMover<false,WebKit::CacheStorageRecordInformation>::moveOverlapping(v19, (uint64_t *)(v14 + v17), v20);
                unint64_t v35 = v20 + v14 + v17 - (void)v19;
              }
            }
            uint64_t v18 = v34 + v24;
            uint64_t v19 = (uint64_t *)(v14 + v17 + 160);
            WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)(v14 + v17), v26);
            ++v63;
            unint64_t v20 = v35;
          }
          v17 += 160;
        }
        while (v14 + v17 < v16);
        a4 = v61;
        uint64_t v12 = v62;
        uint64_t v14 = *(void *)(v62 + 8);
        unsigned int v15 = *(_DWORD *)(v62 + 20);
        unint64_t v16 = v20;
        int v8 = a1 + 9;
        int v36 = v63;
      }
      else
      {
        uint64_t v18 = 0;
        int v36 = 0;
        uint64_t v19 = *(uint64_t **)(v12 + 8);
      }
      uint64_t v39 = (uint64_t *)(v14 + 160 * v15);
      if (v19 != v39)
      {
        WTF::VectorMover<false,WebKit::CacheStorageRecordInformation>::moveOverlapping(v19, v39, v16);
        unsigned int v15 = *(_DWORD *)(v12 + 20);
      }
      int v40 = v15 - v36;
      *(_DWORD *)(v12 + 20) = v40;
      if (v40) {
        goto LABEL_46;
      }
      if (*v8)
      {
        uint64_t v41 = *v8 + 24 * *(unsigned int *)(*v8 - 4);
        if (v41 == v12)
        {
LABEL_46:
          uint64_t v48 = a1[3];
          if (v48)
          {
            uint64_t v49 = *(void *)(v48 + 8);
            BOOL v50 = !v49 || v18 == 0;
            if (!v50 && *(unsigned char *)(v49 + 32))
            {
              uint64_t v51 = (const WTF::String *)(*(void *)(v49 + 24) - v18);
              *(void *)(v49 + 24) = v51;
              *(unsigned char *)(v49 + 3objc_destroyWeak(this + 2) = 1;
              WebKit::writeSizeFile(*(WTF::StringImpl **)(v49 + 56), v51);
            }
          }
          uint64_t v52 = a1[10];
          uint64_t v53 = v67;
          uint64_t v54 = *a4;
          *a4 = 0;
          uint64_t v55 = v68;
          long long v67 = 0;
          uint64_t v68 = 0;
          uint64_t v56 = (void *)WTF::fastMalloc((WTF *)0x20);
          *uint64_t v56 = &unk_1EE9CC050;
          v56[1] = v53;
          v56[2] = v55;
          v56[3] = v54;
          unsigned int v64 = v56;
          (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v52 + 32))(v52, &v65, &v64);
          int v58 = v64;
          unsigned int v64 = 0;
          if (v58) {
            (*(void (**)(void *))(*v58 + 8))(v58);
          }
          WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v57);
          uint64_t result = v67;
          if (v67)
          {
            long long v67 = 0;
            LODWORD(v68) = 0;
            return (WTF::StringImpl *)WTF::fastFree(result, v59);
          }
          return result;
        }
      }
      else
      {
        if (!v12) {
          goto LABEL_46;
        }
        uint64_t v41 = 0;
      }
      if (v41 != v12)
      {
        WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v12, (WTF::StringImpl *)v39);
        WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v60, v42);
        ++*(_DWORD *)(*v8 - 16);
        uint64_t v43 = *v8;
        int v44 = *v8 ? *(_DWORD *)(v43 - 12) - 1 : -1;
        *(_DWORD *)(v43 - 1objc_destroyWeak(this + 2) = v44;
        uint64_t v45 = *v8;
        if (*v8)
        {
          unsigned int v46 = 6 * *(_DWORD *)(v45 - 12);
          unsigned int v47 = *(_DWORD *)(v45 - 4);
          if (v46 < v47 && v47 >= 9) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v8, v47 >> 1, 0);
          }
        }
      }
      goto LABEL_46;
    }
  }
  long long v67 = 0;
  uint64_t v68 = 0;
  int v69 = 0;
  uint64_t v37 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v37 + 16))(v37, &v67);
  uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v37 + 8))(v37);
  if (v69 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1EE9CBD88[v69])(&v65, &v67);
  }
  return result;
}

uint64_t WebKit::CacheStorageCache::findExistingRecord(uint64_t a1, WebCore::ResourceRequestBase *this, uint64_t a3, char a4)
{
  uint64_t v6 = (uint64_t *)(a1 + 72);
  int v7 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
  WebKit::computeKeyURL((WebKit *)&v18, v7);
  uint64_t v10 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v6, &v18, v8);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v9);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  uint64_t v11 = *v6;
  if (*v6) {
    v11 += 24 * *(unsigned int *)(v11 - 4);
  }
  if (v11 == v10) {
    return 0;
  }
  unint64_t v12 = *(unsigned int *)(v10 + 20);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  while (1)
  {
    uint64_t v15 = *(void *)(v10 + 8);
    if ((*(unsigned char *)(*(void *)(v15 + v13 + 104) + 16) & 0x10) != 0) {
      goto LABEL_18;
    }
    if (!a4 || a3 == *(void *)(v15 + v13 + 80))
    {
      char CacheMatch = WebCore::DOMCacheEngine::queryCacheMatch();
      unint64_t v12 = *(unsigned int *)(v10 + 20);
      if (CacheMatch) {
        break;
      }
    }
    ++v14;
    v13 += 160;
    if (v14 >= v12) {
      return 0;
    }
  }
  if (v14 >= v12)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x198C74DC4);
  }
  return *(void *)(v10 + 8) + v13;
}

uint64_t WebKit::CacheStorageCache::putRecords(WTF::StringImpl *a1, uint64_t a2, uint64_t *a3)
{
  v161[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a1 + 3);
  if (!v4 || !*(void *)(v4 + 8))
  {
    LOBYTE(v140) = 4;
    LODWORD(v142[0]) = 1;
    uint64_t v59 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v59 + 16))(v59, &v140);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 8))(v59);
    if (LODWORD(v142[0]) != -1) {
      return ((uint64_t (*)(_OWORD *, WTF::StringImpl **))off_1EE9CBD88[LODWORD(v142[0])])(v145, &v140);
    }
    return result;
  }
  uint64_t v6 = a1;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (!v7) {
    goto LABEL_70;
  }
  if (v7 >= 0x590B22)
  {
    __break(0xC471u);
    JUMPOUT(0x198C75820);
  }
  int v8 = 736 * v7;
  uint64_t v9 = WTF::fastMalloc((WTF *)(736 * v7));
  LODWORD(v134) = (v8 & 0xFFFFFFE0) / 0x2E0;
  uint64_t v133 = v9;
  unsigned int v10 = *(_DWORD *)(a2 + 12);
  if (!v10)
  {
LABEL_70:
    int v12 = 0;
    uint64_t v132 = 0;
    BOOL v13 = 0;
    goto LABEL_73;
  }
  uint64_t v11 = v9;
  int v12 = 0;
  unint64_t v131 = 0;
  uint64_t v132 = 0;
  BOOL v13 = 0;
  char v128 = 0;
  unint64_t v14 = *(uint64_t **)a2;
  uint64_t v130 = *(void *)a2 + 592 * v10;
  int v15 = 1;
  do
  {
    if (!v15) {
      goto LABEL_17;
    }
    uint64_t v16 = v14[73];
    unint64_t v17 = v132;
    BOOL v56 = __CFADD__(v132, v16);
    unint64_t v18 = v132 + v16;
    if (v56) {
      BOOL v13 = 1;
    }
    else {
      unint64_t v17 = v18;
    }
    uint64_t ExistingRecord = WebKit::CacheStorageCache::findExistingRecord((uint64_t)v6, (WebCore::ResourceRequestBase *)(v14 + 3), 0, 0);
    if (ExistingRecord)
    {
      uint64_t v20 = *(void *)(ExistingRecord + 96);
      BOOL v56 = __CFADD__(v131, v20);
      unint64_t v21 = v131 + v20;
      if (v56)
      {
        uint64_t v132 = v17;
        goto LABEL_54;
      }
      unint64_t v22 = v21;
    }
    else
    {
      unint64_t v22 = v131;
    }
    if (v13)
    {
      unint64_t v131 = v22;
      uint64_t v132 = v17;
      int v15 = 0;
      BOOL v13 = 1;
LABEL_17:
      int v129 = 1;
      goto LABEL_18;
    }
    if (v128)
    {
      unint64_t v131 = v22;
      uint64_t v132 = v17;
      BOOL v13 = 0;
LABEL_54:
      int v15 = 0;
      char v128 = 1;
      int v129 = 1;
      goto LABEL_18;
    }
    if (v22 >= v17) {
      unint64_t v54 = v17;
    }
    else {
      unint64_t v54 = v22;
    }
    unint64_t v55 = v22;
    BOOL v13 = v17 < v54;
    if (v17 >= v54) {
      v17 -= v54;
    }
    BOOL v56 = v22 >= v54;
    unint64_t v57 = v22 - v54;
    char v58 = !v56;
    char v128 = v58;
    int v129 = 0;
    if (v56) {
      unint64_t v55 = v57;
    }
    unint64_t v131 = v55;
    uint64_t v132 = v17;
    int v15 = 1;
LABEL_18:
    v161[0] = *(void *)(*(void *)(*((void *)v6 + 3) + 8) + 64);
    int v23 = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(void *)&v145[0] = 0;
    WTF::createVersion4UUIDString((uint64_t *)&v139, v23);
    WebKit::NetworkCache::Key::Key(&v156, (_DWORD **)&v140, (_DWORD **)v6 + 8, (_DWORD **)v145, (_DWORD **)&v139, (uint64_t)v161);
    unsigned int v25 = v139;
    v139 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v24);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    long long v26 = v140;
    v140 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        long long v26 = (WTF::StringImpl *)WTF::StringImpl::destroy(v26, v24);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    long long v27 = v156;
    long long v28 = v157;
    long long v156 = 0u;
    long long v157 = 0u;
    v145[0] = v27;
    v145[1] = v28;
    v145[2] = v158;
    v145[3] = v159;
    uint64_t v146 = v160;
    WTF::MonotonicTime::now(v26);
    double v147 = v29 * 1000.0;
    uint64_t v148 = *v14;
    uint64_t v149 = 0;
    uint64_t v150 = v14[73];
    long long v30 = v14 + 3;
    uint64_t v31 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v30);
    uint64_t v32 = *(_DWORD **)v31;
    if (*(void *)v31) {
      *v32 += 2;
    }
    long long v151 = v32;
    long long v33 = *(_OWORD *)(v31 + 24);
    long long v152 = *(_OWORD *)(v31 + 8);
    long long v153 = v33;
    char v154 = 0;
    uint64_t v155 = 0;
    WebKit::CacheStorageRecordInformation::updateVaryHeaders((WebKit::CacheStorageRecordInformation *)v145, (const WebCore::ResourceRequest *)v30, (const WebCore::ResourceResponseData *)(v30 + 33));
    char v36 = *((unsigned char *)v30 - 8);
    unint64_t v35 = v30 - 1;
    char v34 = v36;
    int v37 = *((_DWORD *)v35 + 52);
    *(_DWORD *)((char *)&v135 + 3) = *(_DWORD *)((char *)v35 + 211);
    LODWORD(v135) = v37;
    uint64_t v38 = (WTF::StringImpl *)v35[27];
    if (v38) {
      *(_DWORD *)v38 += 2;
    }
    uint64_t v136 = v38;
    long long v39 = *((_OWORD *)v35 + 15);
    long long v137 = *((_OWORD *)v35 + 14);
    long long v138 = v39;
    char v40 = *((unsigned char *)v35 + 264);
    uint64_t v41 = v35[71];
    uint64_t v42 = (const String *)(v35 + 1);
    uint64_t v43 = (_DWORD **)(v35 + 32);
    uint64_t v44 = (uint64_t)(v35 + 34);
    uint64_t v45 = (uint64_t)(v35 + 69);
    WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)&v140, (uint64_t)v145, v34, v42, (int *)&v135, v43, v40, v44, v41, v45);
    unsigned int v47 = v136;
    uint64_t v136 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2) {
        WTF::StringImpl::destroy(v47, v46);
      }
      else {
        *(_DWORD *)v47 -= 2;
      }
    }
    WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v145, v46);
    uint64_t v49 = (WTF::StringImpl *)*((void *)&v157 + 1);
    *((void *)&v157 + objc_destroyWeak(this + 1) = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2) {
        WTF::StringImpl::destroy(v49, v48);
      }
      else {
        *(_DWORD *)v49 -= 2;
      }
    }
    BOOL v50 = (WTF::StringImpl *)v157;
    *(void *)&long long v157 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2) {
        WTF::StringImpl::destroy(v50, v48);
      }
      else {
        *(_DWORD *)v50 -= 2;
      }
    }
    uint64_t v51 = (WTF::StringImpl *)*((void *)&v156 + 1);
    *((void *)&v156 + objc_destroyWeak(this + 1) = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2) {
        WTF::StringImpl::destroy(v51, v48);
      }
      else {
        *(_DWORD *)v51 -= 2;
      }
    }
    uint64_t v52 = (WTF::StringImpl *)v156;
    *(void *)&long long v156 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2) {
        WTF::StringImpl::destroy(v52, v48);
      }
      else {
        *(_DWORD *)v52 -= 2;
      }
    }
    WebKit::CacheStorageRecord::CacheStorageRecord(v11, (uint64_t *)&v140);
    WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)&v140, v53);
    v11 += 736;
    ++v12;
    unint64_t v14 = (uint64_t *)(v45 + 24);
  }
  while (v14 != (uint64_t *)v130);
  HIDWORD(v134) = v12;
  if (v129)
  {
    char v61 = 0;
    uint64_t v132 = 0;
    BOOL v13 = 0;
    goto LABEL_74;
  }
LABEL_73:
  char v61 = 1;
LABEL_74:
  uint64_t v62 = *((void *)v6 + 3);
  if (v62) {
    uint64_t v63 = *(void *)(v62 + 8);
  }
  else {
    uint64_t v63 = 0;
  }
  if (v13) {
    goto LABEL_173;
  }
  v140 = v6;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v6, (uint64_t)v6);
  unsigned int v64 = *(atomic_uint **)v6;
  if (*(void *)v6)
  {
    atomic_fetch_add(v64, 1u);
    int v12 = HIDWORD(v134);
    uint64_t v6 = v140;
  }
  uint64_t v65 = v133;
  uint64_t v133 = 0;
  int v66 = v134;
  uint64_t v134 = 0;
  uint64_t v67 = *a3;
  *a3 = 0;
  uint64_t v143 = v67;
  char v144 = v61;
  uint64_t v68 = WTF::fastMalloc((WTF *)0x38);
  *(void *)uint64_t v68 = &unk_1EE9CC078;
  *(void *)(v68 + 8) = v6;
  *(void *)(v68 + 16) = v64;
  *(void *)(v68 + 24) = v65;
  v141 = 0;
  v142[0] = 0;
  v142[1] = 0;
  *(_DWORD *)(v68 + 3objc_destroyWeak(this + 2) = v66;
  *(_DWORD *)(v68 + 36) = v12;
  *(void *)(v68 + 40) = v67;
  *(unsigned char *)(v68 + 48) = v61;
  uint64_t v135 = v68;
  if (*(unsigned char *)(v63 + 32))
  {
    (*(void (**)(void, uint64_t, uint64_t *))(**(void **)(v63 + 80) + 16))(*(void *)(v63 + 80), v132, &v135);
    goto LABEL_164;
  }
  uint64_t v70 = v68;
  uint64_t v135 = 0;
  unint64_t v72 = *(void *)(v63 + 136);
  uint64_t v71 = *(void *)(v63 + 144);
  uint64_t v73 = v132;
  if (!v72)
  {
    uint64_t v74 = *(unsigned int *)(v63 + 160);
    if (v71)
    {
      if (v71 != v74 - 1)
      {
        unint64_t v72 = 0;
        goto LABEL_101;
      }
    }
    else if (v74)
    {
      unint64_t v72 = 0;
      uint64_t v71 = 0;
      goto LABEL_101;
    }
LABEL_90:
    uint64_t v75 = v74;
    unint64_t v76 = ((unint64_t)v74 >> 2) + v74;
    if (v76 <= 0xF) {
      unint64_t v76 = 15;
    }
    if (v76 < 0xFFFFFFF)
    {
      uint64_t v77 = *(WTF **)(v63 + 152);
      int v78 = v76 + 1;
      char v79 = (void *)WTF::fastMalloc((WTF *)(16 * (v76 + 1)));
      *(_DWORD *)(v63 + 160) = v78;
      *(void *)(v63 + 15objc_destroyWeak(this + 2) = v79;
      unint64_t v81 = *(void *)(v63 + 136);
      unint64_t v80 = *(void *)(v63 + 144);
      if (v81 <= v80)
      {
        WTF::VectorMover<false,std::pair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>>::move((uint64_t)v77 + 16 * v81, (uint64_t *)v77 + 2 * v80, &v79[2 * v81]);
      }
      else
      {
        WTF::VectorMover<false,std::pair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>>::move((uint64_t)v77, (uint64_t *)v77 + 2 * v80, v79);
        uint64_t v82 = *(void *)(v63 + 136);
        uint64_t v83 = v82 - v75 + *(unsigned int *)(v63 + 160);
        WTF::VectorMover<false,std::pair<unsigned long long,WTF::CompletionHandler<void ()(BOOL)>>>::move((uint64_t)v77 + 16 * v82, (uint64_t *)v77 + 2 * v75, (void *)(*(void *)(v63 + 152) + 16 * v83));
        *(void *)(v63 + 136) = v83;
      }
      uint64_t v73 = v132;
      if (v77)
      {
        if (*(WTF **)(v63 + 152) == v77)
        {
          *(void *)(v63 + 15objc_destroyWeak(this + 2) = 0;
          *(_DWORD *)(v63 + 160) = 0;
        }
        WTF::fastFree(v77, v69);
      }
      unint64_t v72 = *(void *)(v63 + 136);
      uint64_t v71 = *(void *)(v63 + 144);
      goto LABEL_101;
    }
LABEL_173:
    __break(0xC471u);
    JUMPOUT(0x198C75818);
  }
  if (v71 + 1 == v72)
  {
    LODWORD(v74) = *(_DWORD *)(v63 + 160);
    goto LABEL_90;
  }
LABEL_101:
  long long v84 = (void *)(*(void *)(v63 + 152) + 16 * v71);
  *long long v84 = v73;
  v84[1] = v70;
  uint64_t v85 = *(unsigned int *)(v63 + 160);
  if (v71 == v85 - 1) {
    unint64_t v86 = 0;
  }
  else {
    unint64_t v86 = v71 + 1;
  }
  *(void *)(v63 + 144) = v86;
  BOOL v56 = v86 >= v72;
  unint64_t v87 = v86 - v72;
  if (v56) {
    uint64_t v88 = 0;
  }
  else {
    uint64_t v88 = v85;
  }
  if (v87 + v88 <= 1)
  {
    long long v90 = (uint64_t *)(v63 + 48);
    uint64_t v89 = *(void *)(v63 + 48);
    *(void *)(v63 + 40) = 0;
    *(void *)(v63 + 48) = 0;
    if (v89) {
      WTF::fastFree((WTF *)(v89 - 16), v69);
    }
    uint64_t v91 = *(unsigned int *)(v63 + 100);
    if (v91)
    {
      uint64_t v92 = *(void *)(v63 + 88);
      uint64_t v93 = v92 + 8 * v91;
      while (1)
      {
        v145[0] = *(_OWORD *)(*(void *)v92 + 8);
        uint64_t v94 = *v90;
        if (*v90
          || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand((uint64_t *)(v63 + 48), 0), (uint64_t v94 = *v90) != 0))
        {
          int v95 = *(_DWORD *)(v94 - 8);
        }
        else
        {
          int v95 = 0;
        }
        LODWORD(v156) = -1640531527;
        WORD2(v156) = 0;
        BYTE6(v156) = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)&v156, v145);
        unsigned int v96 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v156) & v95;
        long long v97 = (unint64_t *)(v94 + 16 * v96);
        unint64_t v99 = *v97;
        unint64_t v98 = v97[1];
        unint64_t v101 = *((void *)&v145[0] + 1);
        unint64_t v100 = *(void *)&v145[0];
        if (*(_OWORD *)v97 != 0)
        {
          __int16 v102 = 0;
          int v103 = 1;
          while (__PAIR128__(v98, v99) != v145[0])
          {
            if (v98 == -1) {
              __int16 v102 = v97;
            }
            unsigned int v96 = (v96 + v103) & v95;
            long long v97 = (unint64_t *)(v94 + 16 * v96);
            unint64_t v99 = *v97;
            unint64_t v98 = v97[1];
            ++v103;
            if (*(_OWORD *)v97 == 0)
            {
              if (v102)
              {
                *__int16 v102 = 0;
                v102[1] = 0;
                --*(_DWORD *)(*v90 - 16);
                unint64_t v101 = *((void *)&v145[0] + 1);
                unint64_t v100 = *(void *)&v145[0];
                long long v97 = v102;
              }
              goto LABEL_123;
            }
          }
          goto LABEL_132;
        }
LABEL_123:
        *long long v97 = v100;
        v97[1] = v101;
        uint64_t v104 = *v90;
        int v105 = *v90 ? *(_DWORD *)(v104 - 12) + 1 : 1;
        *(_DWORD *)(v104 - 1objc_destroyWeak(this + 2) = v105;
        uint64_t v106 = *v90;
        int v107 = *v90 ? *(_DWORD *)(v106 - 12) : 0;
        uint64_t v108 = (*(_DWORD *)(v106 - 16) + v107);
        unint64_t v109 = *(unsigned int *)(v106 - 4);
        if (v109 > 0x400) {
          break;
        }
        if (3 * v109 <= 4 * v108) {
          goto LABEL_131;
        }
LABEL_132:
        v92 += 8;
        if (v92 == v93) {
          goto LABEL_137;
        }
      }
      if (v109 > 2 * v108) {
        goto LABEL_132;
      }
LABEL_131:
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand((uint64_t *)(v63 + 48), (uint64_t)v97);
      goto LABEL_132;
    }
LABEL_137:
    uint64_t v110 = *(void *)(v63 + 104);
    uint64_t v111 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(v110);
    long long v112 = (uint64_t *)v111;
    uint64_t v114 = v113;
    if (v110) {
      v110 += 24 * *(unsigned int *)(v110 - 4);
    }
    if (v110 != v111)
    {
      do
      {
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::add((uint64_t)v145, (uint64_t *)(v63 + 48), v112);
        while (1)
        {
          v112 += 3;
          if (v112 == v114) {
            break;
          }
          if (*(_OWORD *)v112 != 0 && v112[1] != -1) {
            goto LABEL_148;
          }
        }
        long long v112 = v114;
LABEL_148:
        ;
      }
      while (v112 != (uint64_t *)v110);
    }
    uint64_t v116 = *(unsigned int *)(v63 + 100);
    if (v116)
    {
      unsigned int v117 = *(WebKit::CacheStorageCache ***)(v63 + 88);
      uint64_t v118 = 8 * v116;
      do
      {
        unsigned int v119 = *v117++;
        WebKit::CacheStorageManager::initializeCacheSize((WebKit::CacheStorageManager *)v63, v119);
        v118 -= 8;
      }
      while (v118);
    }
    uint64_t v120 = *(void *)(v63 + 104);
    uint64_t v121 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(v120);
    uint64_t v122 = v121;
    uint64_t v123 = v69;
    if (v120) {
      v120 += 24 * *(unsigned int *)(v120 - 4);
    }
    if (v120 != v121)
    {
      do
      {
        WebKit::CacheStorageManager::initializeCacheSize((WebKit::CacheStorageManager *)v63, *(WebKit::CacheStorageCache **)(v122 + 16));
        while (1)
        {
          v122 += 24;
          if ((void *)v122 == v123) {
            break;
          }
          if (*(_OWORD *)v122 != 0 && *(void *)(v122 + 8) != -1) {
            goto LABEL_163;
          }
        }
        uint64_t v122 = (uint64_t)v123;
LABEL_163:
        ;
      }
      while (v122 != v120);
    }
  }
LABEL_164:
  uint64_t v125 = v135;
  uint64_t v135 = 0;
  if (v125) {
    (*(void (**)(uint64_t))(*(void *)v125 + 8))(v125);
  }
  uint64_t v143 = 0;
  WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v142, (WTF::StringImpl *)v69);
  char v127 = (unsigned int *)v141;
  v141 = 0;
  if (v127)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v127, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v127);
      WTF::fastFree((WTF *)v127, v126);
    }
  }
  return WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v133, (WTF::StringImpl *)v126);
}

WTF::StringImpl *WebKit::CacheStorageRecordInformation::updateVaryHeaders(WebKit::CacheStorageRecordInformation *this, const WebCore::ResourceRequest *a2, const WebCore::ResourceResponseData *a3)
{
  WebCore::HTTPHeaderMap::get();
  if (!v12 || (*((unsigned char *)a3 + 258) & 0xFE) == 2)
  {
    *((unsigned char *)this + 144) = 0;
LABEL_7:
    uint64_t v9 = (WTF::StringImpl **)*((void *)this + 19);
    *((void *)this + 19) = 0;
    if (v9) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v6);
    }
    goto LABEL_9;
  }
  unsigned int v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  *unsigned int v7 = &unk_1EE9CBDA8;
  v7[1] = this;
  uint64_t v7[2] = a2;
  uint64_t v11 = v7;
  MEMORY[0x19973CA20](&v12, 44, &v11);
  int v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    (*(void (**)(void *))(*v8 + 8))(v8);
  }
  if (*((unsigned char *)this + 144)) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t result = v12;
  int v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::CacheStorageCache::removeAllRecords(WebKit::CacheStorageCache *this)
{
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v1 = (void *)*((void *)this + 9);
  uint64_t v2 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v1);
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  if (v1) {
    uint64_t v6 = (WTF::StringImpl *)&v1[3 * *((unsigned int *)v1 - 1)];
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v31 = v6;
    do
    {
      uint64_t v8 = *((unsigned int *)v4 + 5);
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *((void *)v4 + 1);
        uint64_t v11 = 160 * v8;
        do
        {
          uint64_t v12 = v10 + v9;
          unsigned int v13 = HIDWORD(v34);
          if (HIDWORD(v34) == v34)
          {
            WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation&>((uint64_t)&v33, v10 + v9);
          }
          else
          {
            uint64_t v14 = v33;
            uint64_t v15 = WebKit::NetworkCache::Key::Key(v33 + 160 * HIDWORD(v34), v10 + v9);
            long long v16 = *(_OWORD *)(v12 + 72);
            *(_OWORD *)(v15 + 88) = *(_OWORD *)(v12 + 88);
            *(_OWORD *)(v15 + 7objc_destroyWeak(this + 2) = v16;
            unint64_t v17 = *(_DWORD **)(v12 + 104);
            if (v17) {
              *v17 += 2;
            }
            uint64_t v18 = v14 + 160 * v13;
            *(void *)(v18 + 104) = v17;
            long long v19 = *(_OWORD *)(v10 + v9 + 128);
            *(_OWORD *)(v18 + 11objc_destroyWeak(this + 2) = *(_OWORD *)(v10 + v9 + 112);
            *(_OWORD *)(v18 + 128) = v19;
            *(unsigned char *)(v18 + 144) = *(unsigned char *)(v10 + v9 + 144);
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v18 + 152), (void **)(v10 + v9 + 152));
            HIDWORD(v34) = v13 + 1;
          }
          v7 += *(void *)(v10 + v9 + 96);
          v9 += 160;
        }
        while (v11 != v9);
      }
      while (1)
      {
        uint64_t v4 = (WTF::StringImpl *)((char *)v4 + 24);
        if (v4 == v5) {
          break;
        }
        if ((unint64_t)(*(void *)v4 + 1) > 1) {
          goto LABEL_18;
        }
      }
      uint64_t v4 = v5;
LABEL_18:
      ;
    }
    while (v4 != v31);
  }
  uint64_t v20 = *((void *)this + 3);
  if (v20)
  {
    uint64_t v21 = *(void *)(v20 + 8);
    BOOL v22 = !v21 || v7 == 0;
    if (!v22 && *(unsigned char *)(v21 + 32))
    {
      int v23 = (const WTF::String *)(*(void *)(v21 + 24) - v7);
      *(void *)(v21 + 24) = v23;
      *(unsigned char *)(v21 + 3objc_destroyWeak(this + 2) = 1;
      WebKit::writeSizeFile(*(WTF::StringImpl **)(v21 + 56), v23);
    }
  }
  uint64_t v24 = *((void *)this + 9);
  if (v24)
  {
    *((void *)this + 9) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v24, v3);
  }
  uint64_t v25 = *((void *)this + 10);
  long long v26 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v26 = &unk_1EE9CC0F0;
  uint64_t v32 = v26;
  (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v25 + 32))(v25, &v33, &v32);
  long long v28 = v32;
  uint64_t v32 = 0;
  if (v28) {
    (*(void (**)(void *))(*v28 + 8))(v28);
  }
  return WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v27);
}

WTF::StringImpl *WebKit::CacheStorageDiskStore::versionDirectoryPath(WebKit::CacheStorageDiskStore *this)
{
  v5[0] = (uint64_t)"Version ";
  v5[1] = 9;
  unsigned int v4 = 16;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>(v5, &v4, &v3);
  if (v3)
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    uint64_t result = v3;
    uint64_t v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::CacheStorageDiskStore::recordsDirectoryPath(WebKit::CacheStorageDiskStore *this)
{
  WebKit::CacheStorageDiskStore::versionDirectoryPath((WebKit::CacheStorageDiskStore *)&v3);
  WTF::FileSystemImpl::pathByAppendingComponent();
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::CacheStorageDiskStore::recordFilePath(WebKit::CacheStorageDiskStore *this, const WebKit::NetworkCache::Key *a2, uint64_t a3)
{
  WebKit::CacheStorageDiskStore::recordsDirectoryPath((WebKit::CacheStorageDiskStore *)&v7);
  WebKit::recordFilePathWithDirectory((uint64_t)this, (uint64_t)v7, a3);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::recordFilePathWithDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  WebKit::NetworkCache::Key::hashAsString(a3 + 52, &v19);
  *(void *)&long long v22 = 0;
  int v4 = (int)v19;
  if (v19)
  {
    unsigned int v5 = *((unsigned __int8 *)v19 + 16);
    int v4 = *((_DWORD *)v19 + 1);
    *(void *)&long long v22 = *((void *)v19 + 1);
    int v6 = (v5 >> 2) & 1;
  }
  else
  {
    LOBYTE(v6) = 1;
  }
  DWORD2(v2objc_destroyWeak(this + 2) = v4;
  BYTE12(v2objc_destroyWeak(this + 2) = v6;
  uint64_t v23 = 0;
  uint64_t v7 = *(void *)(a3 + 8);
  if (v7)
  {
    unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
    uint64_t v9 = *(void *)(v7 + 8);
    LODWORD(v7) = *(_DWORD *)(v7 + 4);
    uint64_t v23 = v9;
    int v10 = (v8 >> 2) & 1;
  }
  else
  {
    LOBYTE(v10) = 1;
  }
  int v24 = v7;
  char v25 = v10;
  WebKit::NetworkCache::Key::hashAsString(a3 + 32, &v18);
  uint64_t v26 = 0;
  int v11 = (int)v18;
  if (v18)
  {
    unsigned int v12 = *((unsigned __int8 *)v18 + 16);
    int v11 = *((_DWORD *)v18 + 1);
    uint64_t v26 = *((void *)v18 + 1);
    int v13 = (v12 >> 2) & 1;
  }
  else
  {
    LOBYTE(v13) = 1;
  }
  int v27 = v11;
  char v28 = v13;
  WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v20, &v22, 3uLL);
  WTF::FileSystemImpl::pathByAppendingComponents();
  uint64_t v15 = v20;
  if (v20)
  {
    uint64_t v20 = 0;
    int v21 = 0;
    WTF::fastFree(v15, v14);
  }
  long long v16 = v18;
  uint64_t v18 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t result = v19;
  long long v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::CacheStorageDiskStore::recordBlobFilePath(WebKit::CacheStorageDiskStore *this, const WTF::String *a2)
{
  if (a2) {
    *(_DWORD *)a2 += 2;
  }
  unsigned int v5 = a2;
  v6[0] = (uint64_t)"-blob";
  v6[1] = 6;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v5, v6, this);
  if (*(void *)this)
  {
    uint64_t result = v5;
    unsigned int v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void WebKit::readRecordInfoFromFileData(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v177 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    WTF::Persistence::Decoder::Decoder();
    memset(&v72[1], 0, 24);
    *((void *)&v75 + objc_destroyWeak(this + 1) = 0;
    *(void *)&long long v78 = 0;
    uint64_t v80 = 0;
    LOBYTE(v8objc_destroyWeak(this + 1) = 0;
    uint64_t v82 = 0;
    WTF::Persistence::Decoder::operator>>();
    LOBYTE(v154) = 0;
    char v166 = 0;
    *(void *)&v73[0] = 0;
    int v10 = v72[3];
    uint64_t v72[3] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    int v11 = v72[2];
    v72[2] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    unsigned int v12 = v72[1];
    v72[1] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v9);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)&v124);
    if (v166)
    {
      if (v154 == 16)
      {
        WTF::WallTime::now(v13);
        if (*(double *)&v160 <= v15)
        {
          if (!v166) {
            goto LABEL_74;
          }
          unint64_t v16 = a4 - v165;
          if (a4 < v165) {
            goto LABEL_74;
          }
          uint64_t v17 = v162;
          if ((void)v162 == -1)
          {
            uint64_t v17 = v16;
          }
          else if (v16 < (unint64_t)v162)
          {
            goto LABEL_74;
          }
          WebKit::computeSHA1((uint64_t)v72, a3 + v165, v17, *a2);
          BOOL v18 = *((WTF::StringImpl **)&v160 + 1) == v72[0] && (WTF::StringImpl *)v161 == v72[1];
          if (v18 && DWORD2(v161) == (unint64_t)LODWORD(v72[2]))
          {
            int v4 = &v124;
            WTF::Persistence::Decoder::Decoder();
            WTF::Persistence::Decoder::operator>>();
            LOBYTE(v124) = 0;
            char v153 = 0;
            while (1)
            {
              WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v176);
              if (!v153) {
                break;
              }
              if (v166)
              {
                WebKit::NetworkCache::Key::Key((uint64_t)v167, (uint64_t)&v155);
                if (v153)
                {
                  long long v168 = (unint64_t)v124;
                  *(void *)&long long v169 = 0;
                  *((void *)&v169 + objc_destroyWeak(this + 1) = v152;
                  uint64_t v24 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&v126);
                  char v25 = *(_DWORD **)v24;
                  if (*(void *)v24) {
                    *v25 += 2;
                  }
                  long long v170 = v25;
                  long long v26 = *(_OWORD *)(v24 + 8);
                  long long v172 = *(_OWORD *)(v24 + 24);
                  long long v171 = v26;
                  char v173 = 0;
                  int8x16x2_t v174 = 0;
                  if (v153)
                  {
                    WebKit::CacheStorageRecordInformation::updateVaryHeaders((WebKit::CacheStorageRecordInformation *)v167, (const WebCore::ResourceRequest *)&v126, (const WebCore::ResourceResponseData *)v151);
                    WebKit::NetworkCache::Key::Key((uint64_t)v72, (uint64_t)v167);
                    long long v75 = v168;
                    long long v76 = v169;
                    uint64_t v27 = (uint64_t)v170;
                    if (v170) {
                      *v170 += 2;
                    }
                    uint64_t v77 = v27;
                    long long v78 = v171;
                    long long v79 = v172;
                    LOBYTE(v80) = v173;
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v81, &v174);
                    if (v166)
                    {
                      int v69 = (WTF::StringImpl *)&v126;
                      LODWORD(v8objc_destroyWeak(this + 2) = v154;
                      long long v28 = v155;
                      long long v155 = 0u;
                      long long v83 = v28;
                      long long v29 = v156;
                      long long v156 = 0u;
                      long long v84 = v29;
                      long long v85 = v157;
                      long long v86 = v158;
                      unint64_t v87 = v159;
                      long long v88 = v160;
                      long long v89 = v161;
                      unint64_t v93 = v165;
                      long long v91 = v163;
                      long long v92 = v164;
                      *(_OWORD *)long long v90 = v162;
                      if (v153)
                      {
                        long long v94 = v124;
                        char v95 = v125;
                        uint64_t v30 = v126;
                        uint64_t v126 = 0;
                        uint64_t v96 = v30;
                        long long v97 = v127;
                        long long v98 = v128;
                        LODWORD(v127) = v127 & 0xFFFFFFFE;
                        uint64_t v31 = v129;
                        uint64_t v129 = 0;
                        uint64_t v99 = v31;
                        long long v32 = *(long long *)((char *)v4 + 88);
                        long long v100 = *(long long *)((char *)v4 + 72);
                        long long v101 = v32;
                        int v130 = v100 & 0xFFFFFFFE;
                        uint64_t v102 = v131;
                        long long v33 = v132;
                        long long v132 = 0uLL;
                        long long v103 = v33;
                        *(void *)&long long v33 = v133;
                        uint64_t v133 = 0;
                        uint64_t v104 = v33;
                        uint64_t v34 = v134;
                        uint64_t v134 = 0;
                        uint64_t v105 = v34;
                        *(void *)&long long v33 = v135;
                        uint64_t v135 = 0;
                        uint64_t v106 = v33;
                        uint64_t v35 = v136;
                        uint64_t v136 = 0;
                        uint64_t v107 = v35;
                        *(void *)&long long v33 = v137;
                        uint64_t v137 = 0;
                        uint64_t v108 = v33;
                        char v110 = v139;
                        int v109 = v138;
                        long long v36 = v140;
                        long long v140 = 0uLL;
                        long long v111 = v36;
                        uint64_t v112 = v141;
                        char v114 = v143;
                        uint64_t v113 = v142;
                        CFTypeRef v37 = cf;
                        uint64_t v141 = 0;
                        CFTypeRef cf = 0;
                        CFTypeRef v115 = v37;
                        *(_DWORD *)((char *)v116 + 3) = *(_DWORD *)((char *)v4 + 227);
                        v116[0] = v145;
                        unsigned int v117 = v146;
                        long long v118 = v147;
                        long long v119 = v148;
                        uint64_t v38 = v149;
                        uint64_t v146 = 0;
                        uint64_t v149 = 0;
                        uint64_t v120 = v38;
                        char v121 = v150;
                        WebCore::ResourceResponseData::ResourceResponseData((uint64_t)v122, (uint64_t)v151);
                        long long v39 = *(_OWORD *)&v72[2];
                        *(_OWORD *)a1 = *(_OWORD *)v72;
                        *(_OWORD *)(a1 + 16) = v39;
                        long long v40 = v73[1];
                        *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = v73[0];
                        *(_OWORD *)(a1 + 48) = v40;
                        long long v41 = v76;
                        *(_OWORD *)(a1 + 7objc_destroyWeak(this + 2) = v75;
                        uint64_t v123 = v152;
                        memset(v72, 0, sizeof(v72));
                        *(void *)(a1 + 64) = v74;
                        *(_OWORD *)(a1 + 88) = v41;
                        WTF::URL::URL(a1 + 104, &v77);
                        *(unsigned char *)(a1 + 144) = v80;
                        uint64_t v42 = v81;
                        uint64_t v81 = 0;
                        *(void *)(a1 + 15objc_destroyWeak(this + 2) = v42;
                        *(_DWORD *)(a1 + 160) = v82;
                        long long v43 = v83;
                        long long v83 = 0u;
                        *(_OWORD *)(a1 + 168) = v43;
                        long long v44 = v84;
                        long long v84 = 0u;
                        *(_OWORD *)(a1 + 184) = v44;
                        long long v45 = v86;
                        *(_OWORD *)(a1 + 200) = v85;
                        *(_OWORD *)(a1 + 216) = v45;
                        *(void *)(a1 + 23objc_destroyWeak(this + 2) = v87;
                        long long v46 = v89;
                        *(_OWORD *)(a1 + 240) = v88;
                        *(_OWORD *)(a1 + 256) = v46;
                        long long v47 = *(_OWORD *)v90;
                        long long v48 = v91;
                        long long v49 = v92;
                        *(void *)(a1 + 320) = v93;
                        *(_OWORD *)(a1 + 288) = v48;
                        *(_OWORD *)(a1 + 304) = v49;
                        *(_OWORD *)(a1 + 27objc_destroyWeak(this + 2) = v47;
                        long long v50 = v94;
                        *(unsigned char *)(a1 + 35objc_destroyWeak(this + 2) = v95;
                        *(_OWORD *)(a1 + 336) = v50;
                        WTF::URL::URL(a1 + 360, &v96);
                        WTF::URL::URL(a1 + 400, &v99);
                        *(void *)(a1 + 440) = v102;
                        long long v51 = v103;
                        long long v103 = 0u;
                        *(_OWORD *)(a1 + 448) = v51;
                        *(void *)&long long v51 = v104;
                        uint64_t v104 = 0;
                        *(void *)(a1 + 464) = v51;
                        uint64_t v52 = v105;
                        uint64_t v105 = 0;
                        *(void *)(a1 + 47objc_destroyWeak(this + 2) = v52;
                        *(void *)&long long v51 = v106;
                        uint64_t v106 = 0;
                        *(void *)(a1 + 480) = v51;
                        uint64_t v53 = v107;
                        uint64_t v107 = 0;
                        *(void *)(a1 + 488) = v53;
                        *(void *)&long long v51 = v108;
                        uint64_t v108 = 0;
                        *(void *)(a1 + 496) = v51;
                        LODWORD(v53) = v109;
                        *(unsigned char *)(a1 + 508) = v110;
                        *(_DWORD *)(a1 + 504) = v53;
                        long long v54 = v111;
                        long long v111 = 0u;
                        *(_OWORD *)(a1 + 51objc_destroyWeak(this + 2) = v54;
                        uint64_t v55 = v112;
                        uint64_t v112 = 0;
                        *(void *)(a1 + 528) = v55;
                        uint64_t v56 = v113;
                        *(unsigned char *)(a1 + 544) = v114;
                        *(void *)(a1 + 536) = v56;
                        CFTypeRef v57 = v115;
                        CFTypeRef v115 = 0;
                        *(void *)(a1 + 55objc_destroyWeak(this + 2) = v57;
                        int v58 = v116[0];
                        *(_DWORD *)(a1 + 563) = *(_DWORD *)((char *)v116 + 3);
                        *(_DWORD *)(a1 + 560) = v58;
                        uint64_t v59 = v117;
                        unsigned int v117 = 0;
                        *(void *)(a1 + 568) = v59;
                        long long v60 = v119;
                        *(_OWORD *)(a1 + 576) = v118;
                        *(_OWORD *)(a1 + 59objc_destroyWeak(this + 2) = v60;
                        char v61 = v120;
                        uint64_t v120 = 0;
                        *(void *)(a1 + 608) = v61;
                        *(unsigned char *)(a1 + 616) = v121;
                        WebCore::ResourceResponseData::ResourceResponseData(a1 + 624, (uint64_t)v122);
                        *(void *)(a1 + 904) = v123;
                        *(unsigned char *)(a1 + 91objc_destroyWeak(this + 2) = 1;
                        WebKit::StoredRecordInformation::~StoredRecordInformation((WebKit::StoredRecordInformation *)v72, v62);
                        WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v167, v63);
                        if (v153)
                        {
                          WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v151, v14);
                          uint64_t v65 = v149;
                          uint64_t v149 = 0;
                          if (v65)
                          {
                            if (*(_DWORD *)v65 == 2) {
                              WTF::StringImpl::destroy(v65, v64);
                            }
                            else {
                              *(_DWORD *)v65 -= 2;
                            }
                          }
                          int v66 = v146;
                          uint64_t v146 = 0;
                          if (v66)
                          {
                            if (*(_DWORD *)v66 == 2) {
                              WTF::StringImpl::destroy(v66, v64);
                            }
                            else {
                              *(_DWORD *)v66 -= 2;
                            }
                          }
                          CFTypeRef v67 = cf;
                          CFTypeRef cf = 0;
                          if (v67) {
                            CFRelease(v67);
                          }
                          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v126);
                        }
                        goto LABEL_31;
                      }
                    }
                  }
                }
              }
LABEL_74:
              __break(1u);
              LOBYTE(v124) = 0;
              char v153 = 0;
              if (v71)
              {
                uint64_t v68 = v70;
                uint64_t v70 = 0;
                if (v68)
                {
                  if (*(_DWORD *)v68 == 2) {
                    WTF::StringImpl::destroy(v68, v14);
                  }
                  else {
                    *(_DWORD *)v68 -= 2;
                  }
                }
              }
              if (v69)
              {
                if (*(_DWORD *)v69 == 2) {
                  WTF::StringImpl::destroy(v69, v14);
                }
                else {
                  *(_DWORD *)v69 -= 2;
                }
              }
              std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v175);
            }
          }
        }
      }
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 91objc_destroyWeak(this + 2) = 0;
LABEL_31:
    if (v166)
    {
      uint64_t v20 = (WTF::StringImpl *)*((void *)&v156 + 1);
      *((void *)&v156 + objc_destroyWeak(this + 1) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v14);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      int v21 = (WTF::StringImpl *)v156;
      *(void *)&long long v156 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v14);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      long long v22 = (WTF::StringImpl *)*((void *)&v155 + 1);
      *((void *)&v155 + objc_destroyWeak(this + 1) = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v14);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      uint64_t v23 = (WTF::StringImpl *)v155;
      *(void *)&long long v155 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v14);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 91objc_destroyWeak(this + 2) = 0;
  }
}

uint64_t WebKit::computeSHA1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  v8[0] = a4;
  WTF::SHA1::SHA1((WTF::SHA1 *)v7);
  MEMORY[0x19972E910](v7, v8, 8);
  MEMORY[0x19972E910](v7, a2, a3);
  return WTF::SHA1::computeHash();
}

WTF::StringImpl *WebKit::CacheStorageDiskStore::readAllRecordInfos(uint64_t a1, uint64_t *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  ++*(_DWORD *)(a1 + 8);
  uint64_t v19 = a1;
  uint64_t v20 = (_DWORD *)a1;
  WebKit::CacheStorageDiskStore::recordsDirectoryPath((WebKit::CacheStorageDiskStore *)&v17);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x38);
  *uint64_t v7 = &unk_1EE9CC118;
  v7[1] = v19;
  uint64_t v7[2] = v20;
  unsigned int v8 = v21;
  uint64_t v20 = 0;
  int v21 = 0;
  uint64_t v7[3] = v8;
  v7[4] = v22;
  void v7[5] = v23;
  uint64_t v9 = v24;
  long long v22 = 0;
  uint64_t v24 = 0;
  v7[6] = v9;
  BOOL v18 = v7;
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, &v18);
  int v11 = v18;
  BOOL v18 = 0;
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  uint64_t v12 = v24;
  uint64_t v24 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  int v13 = v22;
  long long v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v10);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v21;
  int v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v10);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  double v15 = v20;
  uint64_t v20 = 0;
  if (v15)
  {
    if (v15[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
    }
    else {
      --v15[2];
    }
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::CacheStorageDiskStore::readRecords(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v42[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 48);
  ++*(_DWORD *)(a1 + 8);
  uint64_t v29 = a1;
  uint64_t v30 = (_DWORD *)a1;
  WebKit::CacheStorageDiskStore::recordsDirectoryPath((WebKit::CacheStorageDiskStore *)&v28);
  uint64_t result = (WTF::StringImpl *)WTF::String::isolatedCopy();
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v7 = *(unsigned int *)(a2 + 12);
  if (v7)
  {
    if (v7 >= 0x199999A)
    {
      __break(0xC471u);
      return result;
    }
    int v8 = 160 * v7;
    uint64_t v9 = WTF::fastMalloc((WTF *)(160 * v7));
    LODWORD(v33) = (v8 & 0xFFFFFFE0) / 0xA0;
    uint64_t v32 = v9;
    unsigned int v10 = *(_DWORD *)(a2 + 12);
    if (v10)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = v11 + 160 * v10;
      do
      {
        WebKit::NetworkCache::Key::Key((uint64_t)v35, v11);
        long long v13 = *(_OWORD *)(v11 + 88);
        long long v36 = *(_OWORD *)(v11 + 72);
        long long v37 = v13;
        uint64_t v14 = *(_DWORD **)(v11 + 104);
        if (v14) {
          *v14 += 2;
        }
        uint64_t v38 = v14;
        long long v15 = *(_OWORD *)(v11 + 128);
        long long v39 = *(_OWORD *)(v11 + 112);
        long long v40 = v15;
        char v41 = *(unsigned char *)(v11 + 144);
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(v42, (void **)(v11 + 152));
        WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t)&v32, v35);
        WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v35, v16);
        v11 += 160;
      }
      while (v11 != v12);
    }
  }
  uint64_t v17 = *a3;
  *a3 = 0;
  uint64_t v34 = v17;
  BOOL v18 = (void *)WTF::fastMalloc((WTF *)0x38);
  void *v18 = &unk_1EE9CC168;
  v18[1] = v29;
  void v18[2] = v30;
  uint64_t v19 = v31;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  void v18[3] = v19;
  v18[4] = v32;
  uint64_t v20 = v33;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  v18[5] = v20;
  uint64_t v21 = v34;
  uint64_t v34 = 0;
  v35[0] = (uint64_t)v18;
  v18[6] = v21;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 32))(v5, v35);
  uint64_t v23 = v35[0];
  v35[0] = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = v34;
  uint64_t v34 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v22);
  long long v26 = v31;
  uint64_t v31 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v25);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t v27 = v30;
  uint64_t v30 = 0;
  if (v27)
  {
    if (v27[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
    }
    else {
      --v27[2];
    }
  }
  uint64_t result = v28;
  long long v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::CacheStorageDiskStore::deleteRecords(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  v42[1] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v7 = WTF::fastMalloc((WTF *)(8 * v5));
    LODWORD(v29) = v5;
    uint64_t v28 = v7;
    unsigned int v8 = *(_DWORD *)(a2 + 12);
    if (v8)
    {
      uint64_t v9 = v7;
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = v11 + 160 * v8;
      do
      {
        WebKit::NetworkCache::Key::Key((uint64_t)&v31, v11);
        long long v13 = *(_OWORD *)(v11 + 88);
        long long v36 = *(_OWORD *)(v11 + 72);
        long long v37 = v13;
        uint64_t v14 = *(_DWORD **)(v11 + 104);
        if (v14) {
          *v14 += 2;
        }
        uint64_t v38 = v14;
        long long v15 = *(_OWORD *)(v11 + 128);
        long long v39 = *(_OWORD *)(v11 + 112);
        long long v40 = v15;
        char v41 = *(unsigned char *)(v11 + 144);
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(v42, (void **)(v11 + 152));
        WebKit::CacheStorageDiskStore::recordFilePath((WebKit::CacheStorageDiskStore *)&v30, *(const WebKit::NetworkCache::Key **)(v4 + 24), (uint64_t)&v31);
        int v16 = v10 + 1;
        *(void *)(v9 + 8 * v10) = v30;
        uint64_t v30 = 0;
        WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)&v31, v17);
        v11 += 160;
        ++v10;
      }
      while (v11 != v12);
      HIDWORD(v29) = v16;
    }
  }
  uint64_t v18 = *(void *)(v4 + 48);
  ++*(_DWORD *)(v4 + 8);
  uint64_t v31 = v4;
  uint64_t v32 = (_DWORD *)v4;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((unsigned int *)&v28, (uint64_t)&v33);
  uint64_t v19 = *a3;
  *a3 = 0;
  uint64_t v35 = v19;
  uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x30);
  *uint64_t v20 = &unk_1EE9CC1B8;
  v20[1] = v31;
  void v20[2] = v32;
  uint64_t v21 = v33;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  v20[3] = v21;
  v20[4] = v34;
  uint64_t v22 = v35;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  v20[5] = v22;
  uint64_t v30 = v20;
  (*(void (**)(uint64_t, void **))(*(void *)v18 + 32))(v18, &v30);
  uint64_t v24 = v30;
  uint64_t v30 = 0;
  if (v24) {
    (*(void (**)(void *))(*v24 + 8))(v24);
  }
  uint64_t v25 = v35;
  uint64_t v35 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v23);
  uint64_t v27 = v32;
  uint64_t v32 = 0;
  if (v27)
  {
    if (v27[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
    }
    else {
      --v27[2];
    }
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v26);
}

uint64_t WebKit::CacheStorageDiskStore::computeRealBodySizeForStorage(uint64_t a1)
{
  WebKit::encodeRecordBody(a1, &v5);
  uint64_t v2 = v7;
  uint64_t v3 = v5;
  if (v5)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    WTF::fastFree(v3, v1);
  }
  return v2;
}

uint64_t WebKit::encodeRecordBody@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  int v3 = *(_DWORD *)(result + 8);
  if (v3 == -1) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = *(unsigned int *)(result + 8);
  }
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      if (v3 != 1) {
        goto LABEL_14;
      }
LABEL_13:
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
    if (!v3) {
      goto LABEL_13;
    }
LABEL_14:
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::CacheStorageDiskStore::writeRecords(v8);
  }
  if (v3 != 2) {
    goto LABEL_14;
  }
  uint64_t v5 = *(WebCore::SharedBuffer **)result;
  int v6 = (char *)WebCore::SharedBuffer::data(*(WebCore::SharedBuffer **)result);
  unsigned int v7 = (WTF *)*((void *)v5 + 6);

  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)a2, v6, v7);
}

uint64_t WebKit::CacheStorageDiskStore::writeRecords(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](a1, a2, a3);
  long long v75 = v5;
  uint64_t v6 = v3;
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  unsigned int v7 = *(_DWORD *)(v4 + 12);
  if (v7)
  {
    uint64_t v8 = *(void *)v4;
    uint64_t v9 = *(void *)v4 + 736 * v7;
    do
    {
      WebKit::CacheStorageDiskStore::recordFilePath((WebKit::CacheStorageDiskStore *)&v84, *(const WebKit::NetworkCache::Key **)(v6 + 24), v8);
      LODWORD(v1objc_destroyWeak(this + 1) = HIDWORD(v83);
      if (HIDWORD(v83) == v83)
      {
        long long v48 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v82, HIDWORD(v83) + 1, (unint64_t)&v84);
        uint64_t v11 = HIDWORD(v83);
        uint64_t v49 = v82;
        uint64_t v50 = *v48;
        *long long v48 = 0;
        *(void *)(v49 + 8 * v1objc_destroyWeak(this + 1) = v50;
      }
      else
      {
        uint64_t v12 = v84;
        long long v84 = 0;
        *(void *)(v82 + 8 * HIDWORD(v83)) = v12;
      }
      HIDWORD(v83) = v11 + 1;
      long long v13 = v84;
      long long v84 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v10);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      WebKit::encodeRecordBody(v8 + 720, &__src);
      v96[0] = 0;
      v96[1] = 0;
      int v97 = 0;
      uint64_t v14 = (WTF *)WebKit::computeSHA1((uint64_t)v96, (uint64_t)__src, HIDWORD(__n), *(void *)(v6 + 32));
      unint64_t v15 = HIDWORD(__n);
      unint64_t v16 = WTF::pageSize(v14);
      WebKit::NetworkCache::Key::Key((uint64_t)&v92, v8);
      WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&v84);
      MEMORY[0x19972DCE0](&v84, *(double *)(v8 + 72));
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Coder<WebCore::ResourceRequest>::encodeForPersistence();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      MEMORY[0x19972DCD0](&v84, *(unsigned __int8 *)(v8 + 374));
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      WTF::Persistence::Encoder::operator<<();
      MEMORY[0x19972DCD0](&v84, 0);
      WTF::Persistence::Coder<WebCore::ResourceResponseData>::encodeForPersistence();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::encodeChecksum((WTF::Persistence::Encoder *)&v84);
      size_t v17 = DWORD1(v85);
      if (DWORD1(v85))
      {
        uint64_t v18 = v84;
        uint64_t v19 = WTF::fastMalloc((WTF *)DWORD1(v85));
        uint64_t v20 = (void *)v19;
        uint64_t v21 = 0;
        do
        {
          *(unsigned char *)(v19 + v2objc_destroyWeak(this + 1) = *((unsigned char *)v18 + v21);
          ++v21;
        }
        while (v17 != v21);
      }
      else
      {
        uint64_t v20 = 0;
      }
      WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&v84);
      uint64_t v22 = *(void *)(v6 + 32);
      WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&v84);
      MEMORY[0x19972DD00](&v84, 16);
      WTF::Persistence::Coder<WebKit::NetworkCache::Key>::encodeForPersistence();
      long long v98 = 0;
      WTF::Persistence::Coder<WTF::WallTime>::encodeForPersistence();
      WebKit::computeSHA1((uint64_t)&v98, (uint64_t)v20, v17, v22);
      WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence();
      WTF::Persistence::Encoder::operator<<();
      MEMORY[0x19972DCD0](&v84, v16 >= v15);
      WTF::Persistence::Encoder::encodeChecksum((WTF::Persistence::Encoder *)&v84);
      uint64_t v23 = v84;
      size_t v24 = DWORD1(v85);
      long long v98 = 0;
      uint64_t v99 = 0;
      if (DWORD1(v85))
      {
        if (DWORD1(v85) <= 0x10uLL) {
          uint64_t v25 = 16;
        }
        else {
          uint64_t v25 = DWORD1(v85);
        }
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v98, (WTF::FastMalloc *)v25);
        if (v24 < HIDWORD(v99))
        {
LABEL_86:
          __break(0xC471u);
          JUMPOUT(0x198C78234);
        }
        memcpy((char *)v98 + HIDWORD(v99), v23, v24);
        HIDWORD(v99) = v24;
      }
      if (v17)
      {
        unint64_t v26 = v24 + v17;
        if (v24 + v17 > v99)
        {
          unint64_t v27 = v99 + ((unint64_t)v99 >> 2);
          unint64_t v28 = v27 >= 0x10 ? v27 + 1 : 16;
          uint64_t v29 = (WTF::FastMalloc *)(v28 <= v26 ? v24 + v17 : v28);
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v98, v29);
          size_t v24 = HIDWORD(v99);
          if (v26 < HIDWORD(v99))
          {
            __break(0xC471u);
            JUMPOUT(0x198C7823CLL);
          }
        }
        memcpy((char *)v98 + v24, v20, v17);
        size_t v24 = v26;
        HIDWORD(v99) = v26;
      }
      if (v16 >= v15)
      {
        size_t v30 = HIDWORD(__n);
        if (HIDWORD(__n))
        {
          uint64_t v31 = __src;
          unint64_t v32 = HIDWORD(__n) + v24;
          if (v32 > v99)
          {
            unint64_t v33 = v99 + ((unint64_t)v99 >> 2);
            unint64_t v34 = v33 >= 0x10 ? v33 + 1 : 16;
            uint64_t v35 = (WTF::FastMalloc *)(v34 <= v32 ? HIDWORD(__n) + v24 : v34);
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v98, v35);
            size_t v24 = HIDWORD(v99);
            if (v32 < HIDWORD(v99)) {
              goto LABEL_86;
            }
          }
          memcpy((char *)v98 + v24, v31, v30);
          HIDWORD(v99) = v32;
        }
      }
      WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&v84);
      if (HIDWORD(v81) == v81)
      {
        WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v80, (unint64_t)&v98);
      }
      else
      {
        uint64_t v37 = v80 + 16 * HIDWORD(v81);
        *(void *)uint64_t v37 = 0;
        *(void *)(v37 + 8) = 0;
        uint64_t v38 = v98;
        long long v98 = 0;
        *(void *)uint64_t v37 = v38;
        LODWORD(v38) = v99;
        LODWORD(v99) = 0;
        *(_DWORD *)(v37 + 8) = v38;
        LODWORD(v38) = HIDWORD(v99);
        HIDWORD(v99) = 0;
        *(_DWORD *)(v37 + 1objc_destroyWeak(this + 2) = v38;
        ++HIDWORD(v81);
      }
      if (v16 >= v15)
      {
        long long v39 = (WTF *)__src;
        if (__src)
        {
          int __src = 0;
          LODWORD(__n) = 0;
          WTF::fastFree(v39, v36);
        }
        int __src = 0;
        size_t __n = 0;
      }
      if (HIDWORD(v79) == v79)
      {
        WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v78, (unint64_t)&__src);
      }
      else
      {
        uint64_t v40 = v78 + 16 * HIDWORD(v79);
        *(void *)uint64_t v40 = 0;
        *(void *)(v40 + 8) = 0;
        char v41 = __src;
        int __src = 0;
        *(void *)uint64_t v40 = v41;
        LODWORD(v4objc_destroyWeak(this + 1) = __n;
        LODWORD(__n) = 0;
        *(_DWORD *)(v40 + 8) = v41;
        LODWORD(v4objc_destroyWeak(this + 1) = HIDWORD(__n);
        HIDWORD(__n) = 0;
        *(_DWORD *)(v40 + 1objc_destroyWeak(this + 2) = v41;
        ++HIDWORD(v79);
      }
      uint64_t v42 = v98;
      if (v98)
      {
        long long v98 = 0;
        LODWORD(v99) = 0;
        WTF::fastFree(v42, v36);
      }
      if (v20) {
        WTF::fastFree((WTF *)v20, v36);
      }
      long long v43 = v95;
      char v95 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2) {
          WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v36);
        }
        else {
          *(_DWORD *)v43 -= 2;
        }
      }
      long long v44 = v94;
      long long v94 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2) {
          WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v36);
        }
        else {
          *(_DWORD *)v44 -= 2;
        }
      }
      long long v45 = v93;
      unint64_t v93 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v36);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
      long long v46 = v92;
      long long v92 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2) {
          WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v36);
        }
        else {
          *(_DWORD *)v46 -= 2;
        }
      }
      long long v47 = (WTF *)__src;
      if (__src)
      {
        int __src = 0;
        LODWORD(__n) = 0;
        WTF::fastFree(v47, v36);
      }
      v8 += 736;
    }
    while (v8 != v9);
  }
  uint64_t v51 = *(void *)(v6 + 48);
  ++*(_DWORD *)(v6 + 8);
  long long v84 = (WTF::StringImpl *)v6;
  *(void *)&long long v85 = v6;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((unsigned int *)&v82, (uint64_t)&v85 + 8);
  uint64_t v52 = v80;
  uint64_t v80 = 0;
  uint64_t v87 = v52;
  uint64_t v53 = v81;
  uint64_t v81 = 0;
  uint64_t v88 = v53;
  uint64_t v54 = v78;
  uint64_t v78 = 0;
  uint64_t v89 = v54;
  uint64_t v55 = v79;
  uint64_t v79 = 0;
  uint64_t v90 = v55;
  uint64_t v56 = *v75;
  *long long v75 = 0;
  uint64_t v91 = v56;
  CFTypeRef v57 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x50);
  *(void *)CFTypeRef v57 = &unk_1EE9CC208;
  *((void *)v57 + objc_destroyWeak(this + 1) = v84;
  *((void *)v57 + objc_destroyWeak(this + 2) = v85;
  uint64_t v58 = *((void *)&v85 + 1);
  long long v85 = 0uLL;
  *((void *)v57 + 3) = v58;
  uint64_t v59 = v86;
  uint64_t v86 = 0;
  *((void *)v57 + 4) = v59;
  uint64_t v60 = v87;
  uint64_t v87 = 0;
  *((void *)v57 + 5) = v60;
  uint64_t v61 = v88;
  uint64_t v88 = 0;
  *((void *)v57 + 6) = v61;
  uint64_t v62 = v89;
  uint64_t v89 = 0;
  *((void *)v57 + 7) = v62;
  uint64_t v63 = v90;
  uint64_t v90 = 0;
  *((void *)v57 + 8) = v63;
  uint64_t v64 = v91;
  uint64_t v91 = 0;
  *((void *)v57 + 9) = v64;
  long long v92 = v57;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v51 + 32))(v51, &v92);
  int v66 = v92;
  long long v92 = 0;
  if (v66) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v66 + 8))(v66);
  }
  uint64_t v67 = v91;
  uint64_t v91 = 0;
  if (v67) {
    (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
  }
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v65);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v68);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85 + 8, v69);
  char v71 = (_DWORD *)v85;
  *(void *)&long long v85 = 0;
  if (v71)
  {
    if (v71[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v71 + 8))(v71);
    }
    else {
      --v71[2];
    }
  }
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, v70);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v72);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82, v73);
}

void WebKit::NetworkCache::Key::~Key(WebKit::NetworkCache::Key *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
}

void WebKit::CacheStorageManager::cacheStorageOriginDirectory(const WTF::String **this@<X0>, const WTF::String *a2@<X1>, void *a3@<X8>)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *this;
  if (*this && *((_DWORD *)v6 + 1))
  {
    WebKit::saltFilePath(v20, v6);
    v22[0] = WebKit::readOrMakeSalt((WebKit *)v20, v7);
    uint64_t v9 = v20[0];
    v20[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    WebCore::SecurityOriginData::toString((uint64_t *)&v19, a2);
    WebCore::SecurityOriginData::toString((uint64_t *)&v18, (const WTF::String *)((char *)a2 + 32));
    unint64_t v16 = 0;
    size_t v17 = 0;
    WebKit::NetworkCache::Key::Key(v20, (_DWORD **)&v19, (_DWORD **)&v18, &v17, &v16, (uint64_t)v22);
    uint64_t v11 = v18;
    uint64_t v18 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v19;
    uint64_t v19 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    WebKit::NetworkCache::Key::hashAsString((uint64_t)&v21, &v19);
    WTF::FileSystemImpl::pathByAppendingComponent();
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    WebKit::NetworkCache::Key::~Key((WebKit::NetworkCache::Key *)v20, v13);
  }
  else
  {
    unint64_t v15 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v15 += 2;
    }
    *a3 = v15;
  }
}

uint64_t WebKit::readOrMakeSalt(WebKit *this, const WTF::String *a2)
{
  if (!*(void *)this || !*(_DWORD *)(*(void *)this + 4)) {
    return 0;
  }
  uint64_t result = WTF::FileSystemImpl::readOrMakeSalt(this, a2);
  if (!v3) {
    return 0;
  }
  return result;
}

void *WebKit::saltFilePath(void *this, const WTF::String *a2)
{
  if (a2 && *((_DWORD *)a2 + 1)) {
    return (void *)WTF::FileSystemImpl::pathByAppendingComponent();
  }
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *this = v2;
  return this;
}

WTF::StringImpl *WebKit::CacheStorageManager::copySaltFileToOriginDirectory(const WTF::String **this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t result = (WTF::StringImpl *)WTF::FileSystemImpl::fileExists(a2, a2);
  if (result)
  {
    WebKit::saltFilePath(&v11, *(const WTF::String **)a2);
    if ((WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v11, v6) & 1) == 0)
    {
      WebKit::saltFilePath(&v10, *this);
      WTF::FileSystemImpl::hardLinkOrCopyFile((WTF::FileSystemImpl *)&v10, (const WTF::String *)&v11, v8);
      uint64_t v9 = v10;
      uint64_t v10 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v7);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unint64_t WebKit::CacheStorageManager::cacheStorageSize(WebKit::CacheStorageManager *this, const WTF::String *a2)
{
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v36, v3))
    {
      WTF::FileSystemImpl::readEntireFile((uint64_t *)v39, (WTF::FileSystemImpl *)&v36, v4);
      if ((_BYTE)v40)
      {
        unint64_t v5 = WTF::parseInteger<unsigned long long>((uint64_t)v39[0], HIDWORD(v39[1]) | 0x100000000, 0xAu);
        unsigned __int8 v6 = v5;
        char v7 = (char)v4;
        unint64_t v8 = v5 >> 8;
        if ((_BYTE)v40)
        {
          uint64_t v9 = v39[0];
          if (v39[0])
          {
            v39[0] = 0;
            LODWORD(v39[1]) = 0;
            WTF::fastFree(v9, v4);
          }
        }
      }
      else
      {
        unint64_t v8 = 0;
        char v7 = 0;
        unsigned __int8 v6 = 0;
      }
    }
    else
    {
      unsigned __int8 v6 = 0;
      char v7 = 0;
      unint64_t v8 = 0;
    }
    uint64_t v10 = v36;
    long long v36 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v4);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    if (v7) {
      return v6 | (v8 << 8);
    }
  }
  *(_OWORD *)long long v39 = 0u;
  long long v40 = 0u;
  WTF::Deque<WTF::String,0ul>::expandCapacity((uint64_t *)v39);
  uint64_t v12 = v39[1];
  long long v13 = (WTF *)v40;
  uint64_t v14 = *(_DWORD **)this;
  if (*(void *)this) {
    *v14 += 2;
  }
  *((void *)v13 + (void)v1objc_destroyWeak(this + 2) = v14;
  if (v12 == (WTF *)(DWORD2(v40) - 1)) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = (WTF *)((char *)v12 + 1);
  }
  v39[1] = v15;
  unint64_t v16 = v39[0];
  if (v39[0] == v15)
  {
    WTF::VectorDestructor<true,WTF::String>::destruct((WTF *)((char *)v13 + 8 * (void)v15), (WTF *)((char *)v13 + 8 * (void)v15));
    uint64_t v11 = 0;
    goto LABEL_23;
  }
  uint64_t v11 = 0;
  do
  {
    uint64_t v18 = (WTF::StringImpl **)((char *)v13 + 8 * (void)v16);
    uint64_t v19 = *v18;
    WTF::StringImpl *v18 = 0;
    uint64_t v38 = v19;
    WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)v18, (WTF::StringImpl *)(v18 + 1));
    uint64_t v21 = DWORD2(v40);
    if (v39[0] == (WTF *)(DWORD2(v40) - 1)) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = (WTF *)((char *)v39[0] + 1);
    }
    v39[0] = v22;
    uint64_t v23 = WTF::FileSystemImpl::fileType((WTF::FileSystemImpl *)&v38, v20);
    if ((v23 & 0xFF00000000) != 0 && v23 == 1)
    {
      WTF::FileSystemImpl::listDirectory((uint64_t *)&v36, (WTF::FileSystemImpl *)&v38, v24);
      if (v37)
      {
        unint64_t v26 = v36;
        uint64_t v27 = 8 * v37;
        while ((MEMORY[0x19972E990](*(void *)v26, "Blobs", 5) & 1) != 0)
        {
LABEL_46:
          unint64_t v26 = (WTF::StringImpl *)((char *)v26 + 8);
          v27 -= 8;
          if (!v27) {
            goto LABEL_52;
          }
        }
        WTF::FileSystemImpl::pathByAppendingComponent();
        unint64_t v28 = v39[1];
        if (v39[0])
        {
          if ((WTF *)((char *)v39[1] + 1) != v39[0]) {
            goto LABEL_42;
          }
        }
        else if (v39[1])
        {
          if (v39[1] != (WTF *)(v21 - 1)) {
            goto LABEL_42;
          }
        }
        else if (v21)
        {
          unint64_t v28 = 0;
LABEL_42:
          long long v13 = (WTF *)v40;
          *(void *)(v40 + 8 * (void)v28) = v35;
          if (v28 == (WTF *)(v21 - 1)) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = (WTF *)((char *)v28 + 1);
          }
          v39[1] = v29;
          uint64_t v35 = 0;
          goto LABEL_46;
        }
        WTF::Deque<WTF::String,0ul>::expandCapacity((uint64_t *)v39);
        unint64_t v28 = v39[1];
        uint64_t v21 = DWORD2(v40);
        goto LABEL_42;
      }
LABEL_52:
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v25);
    }
    else
    {
      uint64_t v30 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)&v38, v24);
      if ((_BYTE)v31) {
        uint64_t v32 = v30;
      }
      else {
        uint64_t v32 = 0;
      }
      v11 += v32;
    }
    unint64_t v33 = v38;
    uint64_t v38 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v31);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
    unint64_t v16 = v39[0];
  }
  while (v39[0] != v39[1]);
  long long v13 = (WTF *)v40;
  WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(v40 + 8 * (uint64_t)v39[0]), (WTF::StringImpl *)(v40 + 8 * (uint64_t)v39[0]));
  if (!v13) {
    return v11;
  }
LABEL_23:
  WTF::fastFree(v13, v17);
  return v11;
}

uint64_t WebKit::CacheStorageManager::hasCacheList(WebKit::CacheStorageManager *this, const WTF::String *a2)
{
  WTF::FileSystemImpl::pathByAppendingComponent();
  uint64_t v4 = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v7, v2);
  unint64_t v5 = v7;
  char v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

uint64_t WebKit::CacheStorageManager::CacheStorageManager(uint64_t a1, const WTF::String **a2, atomic_uint *a3, const WTF::String *a4, uint64_t *a5, uint64_t *a6)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = atomic_fetch_add(&WebKit::nextUpdateNumber(void)::currentUpdateNumber, 1uLL) + 1;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v11 = *a2;
  if (v11) {
    *(_DWORD *)v11 += 2;
  }
  *(void *)(a1 + 56) = v11;
  WebKit::saltFilePath(&v22, v11);
  *(void *)(a1 + 64) = WebKit::readOrMakeSalt((WebKit *)&v22, v12);
  uint64_t v14 = v22;
  uint64_t v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = a3;
  atomic_fetch_add(a3, 1u);
  uint64_t v15 = *a5;
  *a5 = 0;
  *(void *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  uint64_t v16 = *a6;
  *a6 = 0;
  *(void *)(a1 + 128) = v16;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 15objc_destroyWeak(this + 2) = 0u;
  uint64_t v17 = *(void *)(a1 + 56);
  if (!v17 || !*(_DWORD *)(v17 + 4) || !*((unsigned char *)a4 + 64)) {
    return a1;
  }
  uint64_t result = WTF::FileSystemImpl::pathByAppendingComponent();
  if (*((unsigned char *)a4 + 64))
  {
    WebCore::StorageUtilities::writeOriginToFile((WebCore::StorageUtilities *)&v22, a4, v19);
    uint64_t v21 = v22;
    uint64_t v22 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v20);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::CacheStorageManager::reset(WebKit::CacheStorageManager *this, void *a2)
{
  uint64_t v3 = *((void *)this + 17);
  for (uint64_t i = *((void *)this + 18); v3 != i; uint64_t i = *((void *)this + 18))
  {
    uint64_t v5 = *((void *)this + 19) + 16 * v3;
    uint64_t v6 = *(void *)(v5 + 8);
    *(void *)(v5 + 8) = 0;
    uint64_t v7 = *((void *)this + 19) + 16 * v3;
    uint64_t v8 = *(void *)(v7 + 8);
    *(void *)(v7 + 8) = 0;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      uint64_t v3 = *((void *)this + 17);
    }
    if (v3 == *((unsigned int *)this + 40) - 1) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    *((void *)this + 17) = v9;
    (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t v3 = *((void *)this + 17);
  }
  uint64_t v10 = *((unsigned int *)this + 25);
  if (v10)
  {
    uint64_t v11 = (uint64_t *)*((void *)this + 11);
    uint64_t v12 = 8 * v10;
    do
    {
      uint64_t v13 = *v11++;
      WebKit::CacheStorageRegistry::unregisterCache(*((void *)this + 9), *(void *)(v13 + 8), *(void *)(v13 + 16));
      v12 -= 8;
    }
    while (v12);
  }
  if (*((_DWORD *)this + 24))
  {
    uint64_t v14 = *((unsigned int *)this + 25);
    uint64_t v15 = (WebKit::CacheStorageCache **)*((void *)this + 11);
    if (v14)
    {
      uint64_t v16 = 8 * v14;
      do
      {
        std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100](v15++, 0);
        v16 -= 8;
      }
      while (v16);
      *((_DWORD *)this + 25) = 0;
      uint64_t v15 = (WebKit::CacheStorageCache **)*((void *)this + 11);
    }
    if (v15)
    {
      *((void *)this + 1objc_destroyWeak(this + 1) = 0;
      *((_DWORD *)this + 24) = 0;
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  uint64_t v17 = *((void *)this + 13);
  uint64_t v18 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(v17);
  uint64_t v20 = (uint64_t *)v18;
  uint64_t v21 = v19;
  if (v17) {
    uint64_t v22 = (uint64_t *)(v17 + 24 * *(unsigned int *)(v17 - 4));
  }
  else {
    uint64_t v22 = 0;
  }
  if (v22 != (uint64_t *)v18)
  {
    do
    {
      WebKit::CacheStorageRegistry::unregisterCache(*((void *)this + 9), *v20, v20[1]);
      while (1)
      {
        v20 += 3;
        if (v20 == v21) {
          break;
        }
        if (*(_OWORD *)v20 != 0 && v20[1] != -1) {
          goto LABEL_31;
        }
      }
      uint64_t v20 = v21;
LABEL_31:
      ;
    }
    while (v20 != v22);
    uint64_t v17 = *((void *)this + 13);
  }
  if (v17)
  {
    *((void *)this + 13) = 0;
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v17, v19);
  }
  uint64_t result = *((void *)this + 14);
  if (result)
  {
    *((void *)this + 14) = 0;
    uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(result, v19);
  }
  if (*((unsigned char *)this + 32)) {
    *((unsigned char *)this + 3objc_destroyWeak(this + 2) = 0;
  }
  uint64_t v25 = *((void *)this + 6);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  if (v25) {
    uint64_t result = WTF::fastFree((WTF *)(v25 - 16), v19);
  }
  *((unsigned char *)this + 8) = 0;
  *((void *)this + objc_destroyWeak(this + 2) = atomic_fetch_add(&WebKit::nextUpdateNumber(void)::currentUpdateNumber, 1uLL) + 1;
  return result;
}

void WebKit::CacheStorageManager::~CacheStorageManager(WebKit::CacheStorageManager *this, void *a2)
{
  WebKit::CacheStorageManager::reset(this, a2);
  unint64_t v4 = *((void *)this + 17);
  unint64_t v5 = *((void *)this + 18);
  uint64_t v6 = (WTF *)*((void *)this + 19);
  if (v4 <= v5)
  {
    if (v4 == v5) {
      goto LABEL_16;
    }
    uint64_t v10 = 16 * v5 - 16 * v4;
    uint64_t v11 = (uint64_t *)((char *)v6 + 16 * v4 + 8);
    do
    {
      uint64_t v12 = *v11;
      uint64_t *v11 = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      v11 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  else
  {
    if (v5)
    {
      uint64_t v7 = 16 * v5;
      uint64_t v8 = (uint64_t *)((char *)v6 + 8);
      do
      {
        uint64_t v9 = *v8;
        *uint64_t v8 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
        v8 += 2;
        v7 -= 16;
      }
      while (v7);
      uint64_t v6 = (WTF *)*((void *)this + 19);
      unint64_t v4 = *((void *)this + 17);
    }
    uint64_t v13 = *((unsigned int *)this + 40);
    if (v4 != v13)
    {
      uint64_t v28 = 16 * v13 - 16 * v4;
      uint64_t v29 = (uint64_t *)((char *)v6 + 16 * v4 + 8);
      do
      {
        uint64_t v30 = *v29;
        *uint64_t v29 = 0;
        if (v30) {
          (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
        }
        v29 += 2;
        v28 -= 16;
      }
      while (v28);
    }
  }
  uint64_t v6 = (WTF *)*((void *)this + 19);
LABEL_16:
  if (v6)
  {
    *((void *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v6, v3);
  }
  uint64_t v14 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 56))(v14);
  }
  uint64_t v15 = *((void *)this + 15);
  if (v15) {
    WTF::fastFree((WTF *)(v15 - 16), v3);
  }
  uint64_t v16 = *((void *)this + 14);
  if (v16) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v16, v3);
  }
  uint64_t v17 = *((void *)this + 13);
  if (v17) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v17, v3);
  }
  uint64_t v18 = *((unsigned int *)this + 25);
  if (v18)
  {
    uint64_t v19 = (WebKit::CacheStorageCache **)*((void *)this + 11);
    uint64_t v20 = 8 * v18;
    do
    {
      std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100](v19++, 0);
      v20 -= 8;
    }
    while (v20);
  }
  uint64_t v21 = (WTF *)*((void *)this + 11);
  if (v21)
  {
    *((void *)this + 1objc_destroyWeak(this + 1) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v21, v3);
  }
  uint64_t v22 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v23)
  {
    if (!atomic_load(v23))
    {
      __break(0xC471u);
      return;
    }
    atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF);
  }
  uint64_t v25 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v3);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  uint64_t v26 = *((void *)this + 6);
  if (v26) {
    WTF::fastFree((WTF *)(v26 - 16), v3);
  }
  if (*(void *)this)
  {
    *(void *)(*(void *)this + 8) = 0;
    uint64_t v27 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v27)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v3);
      }
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

uint64_t *WebKit::CacheStorageRegistry::unregisterCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = a2;
  v8[1] = a3;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)(a1 + 8), v8);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4));
    if (v7 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v7 = 0;
  }
  if (v7 != result) {
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(v4, result);
  }
  return result;
}

uint64_t WebKit::CacheStorageManager::initializeCaches(WebKit::CacheStorageManager *this, void *a2)
{
  if (*((unsigned char *)this + 8)) {
    return 1;
  }
  unint64_t v5 = (char *)this + 56;
  uint64_t v4 = *((void *)this + 7);
  long long v39 = 0;
  uint64_t v40 = 0;
  if (!v4 || !*(_DWORD *)(v4 + 4))
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    char v31 = 1;
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, a2);
    *((unsigned char *)this + 8) = 1;
LABEL_29:
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v10);
    return 1;
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v38, v6))
  {
    uint64_t v8 = (WTF::FileSystemImpl *)WTF::FileSystemImpl::openFile();
    int v37 = (int)v8;
    if (v8 == -1)
    {
      int v12 = 0;
      LOBYTE(v29) = 0;
      char v31 = 0;
    }
    else
    {
      WTF::FileSystemImpl::readEntireFile(v8);
      if (v36)
      {
        WTF::Persistence::Decoder::Decoder();
        LOBYTE(v3objc_destroyWeak(this + 2) = 0;
        char v33 = 0;
        WTF::Persistence::Decoder::operator>>();
        int v12 = 0;
        LOBYTE(v29) = 0;
        char v31 = 0;
        WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v34);
        if (v36)
        {
          uint64_t v28 = (WTF *)v35;
          if ((void)v35)
          {
            *(void *)&long long v35 = 0;
            DWORD2(v35) = 0;
            WTF::fastFree(v28, v9);
          }
        }
      }
      else
      {
        int v12 = 0;
        LOBYTE(v29) = 0;
        char v31 = 0;
      }
      WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v37, (int *)v9);
    }
  }
  else
  {
    uint64_t v29 = v39;
    unsigned int v11 = v40;
    unsigned int v2 = HIDWORD(v40);
    long long v39 = 0;
    uint64_t v40 = 0;
    unint64_t v30 = __PAIR64__(v2, v11);
    int v12 = 1;
    char v31 = 1;
  }
  uint64_t v13 = v38;
  uint64_t v38 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v7);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v7);
  if (v12)
  {
    *((unsigned char *)this + 8) = 1;
    if (v2)
    {
      uint64_t v14 = v29;
      uint64_t v15 = (char *)v29 + 16 * v2;
      do
      {
        uint64_t v16 = *((void *)this + 16);
        (*(void (**)(uint64_t))(*(void *)v16 + 48))(v16);
        v34[0] = v16;
        uint64_t v17 = WTF::fastMalloc((WTF *)0x58);
        uint64_t v18 = (char *)v14 + 8;
        long long v39 = (WTF::StringImpl *)WebKit::CacheStorageCache::CacheStorageCache(v17, (unsigned int *)this, (_DWORD **)v14, (_DWORD **)v14 + 1, (uint64_t)v5, v34);
        if (v34[0])
        {
          (*(void (**)(uint64_t))(*(void *)v34[0] + 56))(v34[0]);
          uint64_t v17 = (uint64_t)v39;
        }
        uint64_t v19 = *((void *)this + 9);
        long long v35 = *(_OWORD *)(v17 + 8);
        WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::CacheStorageCache&>((uint64_t)v34, (uint64_t *)(v19 + 8), &v35, (unsigned int *)v17);
        uint64_t v20 = *((unsigned int *)this + 25);
        if (v20 == *((_DWORD *)this + 24))
        {
          uint64_t v21 = (WTF::StringImpl **)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 88, v20 + 1, (unint64_t)&v39);
          uint64_t v20 = *((unsigned int *)this + 25);
          uint64_t v22 = *((void *)this + 11);
          uint64_t v23 = *v21;
          *uint64_t v21 = 0;
        }
        else
        {
          uint64_t v22 = *((void *)this + 11);
          uint64_t v23 = v39;
          long long v39 = 0;
        }
        *(void *)(v22 + 8 * v20) = v23;
        *((_DWORD *)this + 25) = v20 + 1;
        size_t v24 = v39;
        long long v39 = 0;
        if (v24)
        {
          WebKit::CacheStorageCache::~CacheStorageCache(v24, (WTF::StringImpl *)v10);
          WTF::fastFree(v25, v26);
        }
        uint64_t v14 = (WTF::StringImpl *)((char *)v14 + 16);
      }
      while (v18 + 8 != v15);
    }
    goto LABEL_29;
  }
  return 0;
}

unsigned int *WebKit::CacheStorageManager::openCache(uint64_t a1, const WTF::StringImpl **a2, unsigned int *a3)
{
  uint64_t v6 = WebKit::CacheStorageManager::initializeCaches((WebKit::CacheStorageManager *)a1, a2);
  if ((v6 & 1) == 0)
  {
    LOBYTE(v31[0]) = 1;
    int v32 = 1;
    uint64_t v22 = *(void *)a3;
    *(void *)a3 = 0;
    (*(void (**)(uint64_t, WebKit::CacheStorageCache **))(*(void *)v22 + 16))(v22, v31);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v8 = (void *)(a1 + 88);
  if (!*(_DWORD *)(a1 + 100))
  {
LABEL_6:
    WTF::createVersion4UUIDString((uint64_t *)v33, (WTF *)v6);
    uint64_t v10 = *(void *)(a1 + 128);
    (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
    uint64_t v30 = v10;
    uint64_t v11 = WTF::fastMalloc((WTF *)0x58);
    int v12 = (WebKit::CacheStorageCache *)WebKit::CacheStorageCache::CacheStorageCache(v11, (unsigned int *)a1, (_DWORD **)a2, (_DWORD **)v33, a1 + 56, &v30);
    v31[0] = v12;
    uint64_t v14 = *(unsigned int *)(a1 + 100);
    if (v14 == *(_DWORD *)(a1 + 96))
    {
      uint64_t v15 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v14 + 1, (unint64_t)v31);
      uint64_t v16 = *(unsigned int *)(a1 + 100);
      uint64_t v17 = *(void *)(a1 + 88);
      uint64_t v18 = *v15;
      uint64_t *v15 = 0;
      *(void *)(v17 + 8 * v16) = v18;
      uint64_t v19 = v31[0];
      *(_DWORD *)(a1 + 100) = v16 + 1;
      v31[0] = 0;
      if (v19)
      {
        WebKit::CacheStorageCache::~CacheStorageCache(v19, v13);
        WTF::fastFree(v20, v21);
      }
    }
    else
    {
      *(void *)(*(void *)(a1 + 88) + 8 * v14) = v12;
      *(_DWORD *)(a1 + 100) = v14 + 1;
      v31[0] = 0;
    }
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 56))(v30);
    }
    size_t v24 = v33[0];
    v33[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v13);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    WebKit::writeCachesList(*(void *)(a1 + 56), a1 + 88, 0);
    *(void *)(a1 + 16) = atomic_fetch_add(&WebKit::nextUpdateNumber(void)::currentUpdateNumber, 1uLL) + 1;
    uint64_t v26 = *(unsigned int *)(a1 + 100);
    if (v26)
    {
      uint64_t v27 = *(void *)(a1 + 88) + 8 * v26;
      uint64_t v28 = *(void *)(a1 + 72);
      uint64_t v29 = *(void *)(v27 - 8);
      *(_OWORD *)char v33 = *(_OWORD *)(v29 + 8);
      WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::CacheStorageCache&>((uint64_t)v31, (uint64_t *)(v28 + 8), v33, (unsigned int *)v29);
      return WebKit::CacheStorageCache::open(*(void *)(v27 - 8), a3);
    }
    __break(0xC471u);
LABEL_26:
    JUMPOUT(0x198C79898);
  }
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v6 = WTF::equal(*(WTF **)(*(void *)(*v8 + 8 * v9) + 56), *a2, v7);
    if (v6) {
      break;
    }
    if (++v9 >= *(unsigned int *)(a1 + 100)) {
      goto LABEL_6;
    }
  }
  if (v9 >= *(unsigned int *)(a1 + 100))
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)(*v8 + 8 * v9);

  return WebKit::CacheStorageCache::open(v25, a3);
}

WTF::StringImpl *WebKit::writeCachesList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (WTF::StringImpl *)MEMORY[0x1F4188790](a1, a2, a3);
  if (result && *((_DWORD *)result + 1))
  {
    char v7 = v6;
    uint64_t v8 = v5;
    uint64_t v9 = v4;
    WTF::FileSystemImpl::pathByAppendingComponent();
    if (*(_DWORD *)(v9 + 12))
    {
      WTF::FileSystemImpl::parentPath((uint64_t *)&v17, (WTF::FileSystemImpl *)&v18, v10);
      WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v17, v11);
      uint64_t v13 = v17;
      uint64_t v17 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&v17);
      WTF::Persistence::Encoder::operator<<();
      unint64_t v15 = *(unsigned int *)(v9 + 12);
      if (v15)
      {
        for (unint64_t i = 0; i < v15; ++i)
        {
          if (!v7 || v8 != i)
          {
            uint64_t result = (WTF::StringImpl *)WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
            if (i >= *(unsigned int *)(v9 + 12))
            {
              __break(0xC471u);
              return result;
            }
            WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
            unint64_t v15 = *(unsigned int *)(v9 + 12);
          }
        }
      }
      WTF::FileSystemImpl::overwriteEntireFile();
      WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&v17);
    }
    else
    {
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v18, v10);
    }
    uint64_t result = v18;
    uint64_t v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::CacheStorageManager::removeCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *(void *)&long long v36 = a2;
  *((void *)&v36 + objc_destroyWeak(this + 1) = a3;
  uint64_t v5 = *(unsigned int *)(a1 + 100);
  if (!v5)
  {
LABEL_8:
    LOBYTE(v37) = 0;
LABEL_32:
    int v38 = 0;
    uint64_t v35 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)v35 + 16))(v35, &v37);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v7 = 0;
  uint64_t v8 = -v5;
  uint64_t v9 = 8;
  while (1)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 88) + v9 - 8);
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v12 == a2 && v11 == a3) {
      break;
    }
    v9 += 8;
    if (v8 == --v7) {
      goto LABEL_8;
    }
  }
  unint64_t v14 = -v7;
  uint64_t result = WebKit::writeCachesList(*(void *)(a1 + 56), a1 + 88, -v7);
  *(void *)(a1 + 16) = atomic_fetch_add(&WebKit::nextUpdateNumber(void)::currentUpdateNumber, 1uLL) + 1;
  if (v14 < *(unsigned int *)(a1 + 100))
  {
    uint64_t v16 = (uint64_t *)(a1 + 104);
    uint64_t v17 = *(void *)(a1 + 104);
    uint64_t v18 = *(void *)(a1 + 88) + v9;
    if (v17
      || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand((uint64_t *)(a1 + 104), 0), (uint64_t v17 = *v16) != 0))
    {
      int v19 = *(_DWORD *)(v17 - 8);
    }
    else
    {
      int v19 = 0;
    }
    unsigned int v37 = -1640531527;
    LOWORD(v38) = 0;
    BYTE2(v38) = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v37, &v36);
    unsigned int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v37) & v19;
    uint64_t v21 = v17 + 24 * v20;
    unint64_t v23 = *(void *)v21;
    unint64_t v22 = *(void *)(v21 + 8);
    if (*(_OWORD *)v21 != 0)
    {
      size_t v24 = 0;
      int v25 = 1;
      do
      {
        if (__PAIR128__(v22, v23) == v36)
        {
          char v33 = *(WTF::StringImpl **)(v18 - 8);
          *(void *)(v18 - 8) = 0;
          std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)(v21 + 16), v33);
          goto LABEL_31;
        }
        if (v22 == -1) {
          size_t v24 = (void *)v21;
        }
        unsigned int v20 = (v20 + v25) & v19;
        uint64_t v21 = v17 + 24 * v20;
        unint64_t v23 = *(void *)v21;
        unint64_t v22 = *(void *)(v21 + 8);
        ++v25;
      }
      while (*(_OWORD *)v21 != 0);
      if (v24)
      {
        *size_t v24 = 0;
        v24[1] = 0;
        void v24[2] = 0;
        --*(_DWORD *)(*v16 - 16);
        uint64_t v21 = (uint64_t)v24;
      }
    }
    *(_OWORD *)uint64_t v21 = v36;
    uint64_t v26 = *(WTF::StringImpl **)(v18 - 8);
    *(void *)(v18 - 8) = 0;
    std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)(v21 + 16), v26);
    uint64_t v27 = *v16;
    if (*v16) {
      int v28 = *(_DWORD *)(v27 - 12) + 1;
    }
    else {
      int v28 = 1;
    }
    *(_DWORD *)(v27 - 1objc_destroyWeak(this + 2) = v28;
    uint64_t v29 = *v16;
    if (*v16) {
      int v30 = *(_DWORD *)(v29 - 12);
    }
    else {
      int v30 = 0;
    }
    uint64_t v31 = (*(_DWORD *)(v29 - 16) + v30);
    unint64_t v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 > 2 * v31) {
        goto LABEL_31;
      }
    }
    else if (3 * v32 > 4 * v31)
    {
LABEL_31:
      uint64_t v34 = *(void *)(a1 + 88);
      std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)(v34 + v9 - 8), 0);
      memmove((void *)(v34 + v9 - 8), (const void *)(v34 + v9), *(void *)(a1 + 88) + 8 * *(unsigned int *)(a1 + 100) - v34 - v9);
      --*(_DWORD *)(a1 + 100);
      LOBYTE(v37) = 1;
      goto LABEL_32;
    }
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand((uint64_t *)(a1 + 104), v21);
    goto LABEL_31;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::CacheStorageManager::allCaches(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t result = WebKit::CacheStorageManager::initializeCaches((WebKit::CacheStorageManager *)a1, a2);
  if (result)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 100);
    if (v6)
    {
      if (v6 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      int v7 = 24 * v6;
      uint64_t v8 = WTF::fastMalloc((WTF *)(24 * v6));
      uint64_t v9 = v8;
      unsigned int v10 = (v7 & 0xFFFFFFF8) / 0x18;
      uint64_t v11 = *(unsigned int *)(a1 + 100);
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = *(void *)(a1 + 88);
        uint64_t v15 = 24 * v11;
        do
        {
          uint64_t v16 = *(void *)(v14 + 8 * v13);
          long long v17 = *(_OWORD *)(v16 + 8);
          uint64_t v18 = *(_DWORD **)(v16 + 56);
          if (v18) {
            *v18 += 2;
          }
          uint64_t v19 = v8 + v12;
          *(_OWORD *)uint64_t v19 = v17;
          *(void *)(v19 + 16) = v18;
          ++v13;
          v12 += 24;
        }
        while (v15 != v12);
      }
      else
      {
        LODWORD(v13) = 0;
      }
    }
    else
    {
      LODWORD(v13) = 0;
      unsigned int v10 = 0;
      uint64_t v9 = 0;
    }
    uint64_t v21 = *a3;
    *a3 = 0;
    v34[0] = 0;
    v34[1] = 0;
    uint64_t v37 = *(void *)(a1 + 16);
    uint64_t v22 = v37;
    uint64_t v23 = WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v23 = &unk_1EE9CC258;
    *(void *)(v23 + 8) = v21;
    uint64_t v35 = 0;
    v36[0] = 0;
    *(void *)(v23 + 16) = v9;
    v36[1] = 0;
    *(_DWORD *)(v23 + 24) = v10;
    *(_DWORD *)(v23 + 28) = v13;
    *(void *)(v23 + 3objc_destroyWeak(this + 2) = v22;
    uint64_t v24 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v24 = 1;
    *(void *)(v24 + 8) = v23;
    WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v36, v25);
    uint64_t v26 = v35;
    uint64_t v35 = 0;
    if (v26) {
      (*(void (**)(void *))(*v26 + 8))(v26);
    }
    uint64_t v27 = *(unsigned int *)(a1 + 100);
    if (v27)
    {
      int v28 = *(uint64_t **)(a1 + 88);
      uint64_t v29 = 8 * v27;
      do
      {
        uint64_t v30 = *v28;
        atomic_fetch_add((atomic_uint *volatile)v24, 1u);
        uint64_t v31 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v31 = &unk_1EE9CC280;
        v31[1] = v24;
        uint64_t v35 = v31;
        WebKit::CacheStorageCache::open(v30, (unsigned int *)&v35);
        unint64_t v32 = v35;
        uint64_t v35 = 0;
        if (v32) {
          (*(void (**)(void *))(*v32 + 8))(v32);
        }
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v24);
    return WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v33);
  }
  else
  {
    LOBYTE(v35) = 1;
    LODWORD(v37) = 1;
    uint64_t v20 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v20 + 16))(v20, &v35);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
    if (v37 != -1) {
      return ((uint64_t (*)(void *, void **))off_1EE9CBDC0[v37])(v34, &v35);
    }
  }
  return result;
}

uint64_t WebKit::CacheStorageManager::initializeCacheSize(WebKit::CacheStorageManager *this, WebKit::CacheStorageCache *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
  uint64_t v4 = *(atomic_uint **)this;
  if (*(void *)this) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = *((void *)a2 + 2);
  int v7 = (void *)WTF::fastMalloc((WTF *)0x28);
  *int v7 = &unk_1EE9CC2A8;
  v7[1] = this;
  uint64_t v7[2] = v4;
  uint64_t v7[3] = v5;
  v7[4] = v6;
  if (*((unsigned char *)a2 + 32))
  {
    uint64_t v8 = (void *)*((void *)a2 + 9);
    uint64_t v9 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v8);
    if (v8) {
      uint64_t v11 = &v8[3 * *((unsigned int *)v8 - 1)];
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11 == v9)
    {
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = *((unsigned int *)v9 + 5);
        if (v16)
        {
          uint64_t v17 = 160 * v16;
          uint64_t v18 = (uint64_t *)(v9[1] + 96);
          do
          {
            uint64_t v19 = *v18;
            v18 += 20;
            v15 += v19;
            v17 -= 160;
          }
          while (v17);
        }
        while (1)
        {
          v9 += 3;
          if (v9 == v10) {
            break;
          }
          if ((unint64_t)(*v9 + 1) > 1) {
            goto LABEL_19;
          }
        }
        uint64_t v9 = v10;
LABEL_19:
        ;
      }
      while (v9 != v11);
    }
    WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::initializeCacheSize(WebKit::CacheStorageCache &)::$_0,void,unsigned long long>::call(v7, v15);
    uint64_t v20 = *(uint64_t (**)(void *))(*v7 + 8);
    return v20(v7);
  }
  else
  {
    uint64_t v12 = *((void *)a2 + 10);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v13 = &unk_1EE9CBFC0;
    v13[1] = v7;
    uint64_t v21 = (uint64_t)v13;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 16))(v12, &v21);
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::writeSizeFile(WTF::StringImpl *this, const WTF::String *a2)
{
  if (this && *((_DWORD *)this + 1))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::String::number(a2);
    WTF::String::utf8();
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    WTF::FileSystemImpl::overwriteEntireFile();
    if (v6)
    {
      if (*(_DWORD *)v6 == 1) {
        WTF::fastFree(v6, v4);
      }
      else {
        --*(_DWORD *)v6;
      }
    }
    this = v7;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v4);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return this;
}

uint64_t *WebKit::CacheStorageManager::reference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *((void *)&v25 + objc_destroyWeak(this + 1) = a4;
  uint64_t v26 = a2;
  *(void *)&long long v25 = a3;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 112);
  if (v5
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand((uint64_t *)(a1 + 112), 0), (uint64_t v5 = *v4) != 0))
  {
    unsigned int v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    unsigned int v6 = 0;
  }
  unsigned int v27 = -1640531527;
  __int16 v28 = 0;
  char v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v27, &v25);
  uint64_t v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27) & v6;
  uint64_t v9 = v5 + 32 * v8;
  unint64_t v11 = *(void *)v9;
  unint64_t v10 = *(void *)(v9 + 8);
  if (*(_OWORD *)v9 == 0)
  {
LABEL_12:
    *(_OWORD *)uint64_t v9 = v25;
    uint64_t v14 = *(WTF **)(v9 + 16);
    if (v14)
    {
      *(void *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 24) = 0;
      WTF::fastFree(v14, v7);
    }
    *(void *)(v9 + 16) = 0;
    *(void *)(v9 + 24) = 0;
    uint64_t v15 = *v4;
    if (*v4) {
      int v16 = *(_DWORD *)(v15 - 12) + 1;
    }
    else {
      int v16 = 1;
    }
    *(_DWORD *)(v15 - 1objc_destroyWeak(this + 2) = v16;
    uint64_t v17 = *v4;
    if (*v4) {
      int v18 = *(_DWORD *)(v17 - 12);
    }
    else {
      int v18 = 0;
    }
    uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
    unint64_t v20 = *(unsigned int *)(v17 - 4);
    if (v20 > 0x400)
    {
      if (v20 > 2 * v19) {
        goto LABEL_23;
      }
    }
    else if (3 * v20 > 4 * v19)
    {
      goto LABEL_23;
    }
    uint64_t v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v4, v9);
    goto LABEL_23;
  }
  uint64_t v12 = 0;
  int v13 = 1;
  while (__PAIR128__(v10, v11) != v25)
  {
    if (v10 == -1) {
      uint64_t v12 = (_OWORD *)v9;
    }
    uint64_t v8 = (v8 + v13) & v6;
    uint64_t v9 = v5 + 32 * v8;
    unint64_t v11 = *(void *)v9;
    unint64_t v10 = *(void *)(v9 + 8);
    ++v13;
    if (*(_OWORD *)v9 == 0)
    {
      if (v12)
      {
        _OWORD *v12 = 0u;
        v12[1] = 0u;
        --*(_DWORD *)(*v4 - 16);
        uint64_t v9 = (uint64_t)v12;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  uint64_t result = (uint64_t *)(v9 + 16);
  uint64_t v22 = *(unsigned int *)(v9 + 28);
  if (v22 == *(_DWORD *)(v9 + 24))
  {
    uint64_t result = (uint64_t *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v22 + 1, (unint64_t)&v26);
    uint64_t v22 = *(unsigned int *)(v9 + 28);
    uint64_t v23 = *(void *)(v9 + 16);
    uint64_t v24 = *result;
  }
  else
  {
    uint64_t v23 = *result;
    uint64_t v24 = v26;
  }
  *(void *)(v23 + 8 * v2objc_destroyWeak(this + 2) = v24;
  ++*(_DWORD *)(v9 + 28);
  return result;
}

WebKit::CacheStorageCache *WebKit::CacheStorageManager::dereference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t result = (WebKit::CacheStorageCache *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)(a1 + 112), &v12);
  int v7 = result;
  uint64_t v8 = *(WebKit::CacheStorageCache **)(a1 + 112);
  if (v8) {
    uint64_t v8 = (WebKit::CacheStorageCache *)((char *)v8 + 32 * *((unsigned int *)v8 - 1));
  }
  if (v8 != result)
  {
    uint64_t v9 = *((unsigned int *)result + 7);
    if (v9)
    {
      uint64_t result = (WebKit::CacheStorageCache *)*((void *)result + 2);
      size_t v10 = 8 * v9 - 8;
      while (*(void *)result != a2)
      {
        v10 -= 8;
        uint64_t result = (WebKit::CacheStorageCache *)((char *)result + 8);
        if (v10 == -8) {
          return result;
        }
      }
      if (v10)
      {
        uint64_t result = (WebKit::CacheStorageCache *)memmove(result, (char *)result + 8, v10);
        LODWORD(v9) = *((_DWORD *)v7 + 7);
      }
      int v11 = v9 - 1;
      *((_DWORD *)v7 + 7) = v11;
      if (!v11) {
        return WebKit::CacheStorageManager::removeUnusedCache(a1, v12, v13);
      }
    }
  }
  return result;
}

WebKit::CacheStorageCache *WebKit::CacheStorageManager::removeUnusedCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v4 = (uint64_t *)(a1 + 104);
  uint64_t v5 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)(a1 + 104), &v17);
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::take(v4, (uint64_t)v5, &v16);
  uint64_t result = v16;
  if (v16)
  {
    WebKit::CacheStorageCache::removeAllRecords(v16);
    WebKit::CacheStorageRegistry::unregisterCache(*(void *)(a1 + 72), v17, v18);
    uint64_t result = v16;
    int v16 = 0;
    if (result)
    {
      WebKit::CacheStorageCache::~CacheStorageCache(result, v8);
      return (WebKit::CacheStorageCache *)WTF::fastFree(v9, v10);
    }
  }
  else
  {
    uint64_t v11 = *(unsigned int *)(a1 + 100);
    if (v11)
    {
      uint64_t v12 = *(uint64_t **)(a1 + 88);
      uint64_t v13 = 8 * v11;
      while (1)
      {
        uint64_t v14 = *v12;
        if (*(void *)(*v12 + 8) == v17 && *(void *)(*v12 + 16) == v18) {
          break;
        }
        ++v12;
        v13 -= 8;
        if (!v13) {
          return result;
        }
      }
      uint64_t result = *(WebKit::CacheStorageCache **)(v14 + 72);
      if (result)
      {
        *(void *)(v14 + 7objc_destroyWeak(this + 2) = 0;
        uint64_t result = (WebKit::CacheStorageCache *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)result, v6);
      }
      *(unsigned char *)(v14 + 3objc_destroyWeak(this + 2) = 0;
    }
  }
  return result;
}

uint64_t *WebKit::CacheStorageManager::unlockStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 120);
  uint64_t result = (uint64_t *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 120), &v7);
  uint64_t v5 = *(void *)(a1 + 120);
  if (v5)
  {
    unsigned int v6 = (uint64_t *)(v5 + 8 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    unsigned int v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
  }
  return result;
}

uint64_t WebKit::CacheStorageManager::connectionClosed(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 120);
  uint64_t result = WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 120), &v54);
  uint64_t v5 = (void *)result;
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6)
  {
    uint64_t v7 = v6 + 8 * *(unsigned int *)(v6 - 4);
    if (v7 == result) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_8;
    }
    uint64_t v7 = 0;
  }
  if (v7 != result) {
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, (void *)result);
  }
LABEL_8:
  uint64_t v53 = 0;
  uint64_t v9 = (uint64_t *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 112);
  if (!v8)
  {
    uint64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_21:
    uint64_t v11 = v8 + 32 * v10;
    goto LABEL_22;
  }
  uint64_t v10 = *(unsigned int *)(v8 - 4);
  uint64_t v11 = v8 + 32 * v10;
  if (!*(_DWORD *)(v8 - 12))
  {
    uint64_t v12 = v8 + 32 * v10;
    goto LABEL_21;
  }
  uint64_t v12 = *(void *)(a1 + 112);
  if (v10)
  {
    uint64_t v13 = 32 * v10;
    uint64_t v12 = *(void *)(a1 + 112);
    while (*(_OWORD *)v12 == 0 || *(void *)(v12 + 8) == -1)
    {
      v12 += 32;
      v13 -= 32;
      if (!v13)
      {
        uint64_t v12 = v11;
        break;
      }
    }
  }
LABEL_22:
  if (v8) {
    uint64_t v15 = v8 + 32 * *(unsigned int *)(v8 - 4);
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15 != v12)
  {
    do
    {
      int v16 = *(char **)(v12 + 16);
      uint64_t v17 = *(unsigned int *)(v12 + 28);
      uint64_t v18 = &v16[8 * v17];
      if (v17)
      {
        LODWORD(v17) = 0;
        uint64_t v19 = v18;
        unint64_t v20 = v18;
        do
        {
          if (v54 == *(void *)v16)
          {
            uint64_t v21 = v16;
            if (v19 != (char *)(*(void *)(v12 + 16) + 8 * *(unsigned int *)(v12 + 28)))
            {
              if (v20 == v16)
              {
                uint64_t v21 = v19;
              }
              else
              {
                if (v20 <= v19)
                {
                  uint64_t v26 = 0;
                  uint64_t v25 = (v16 - v20) >> 3;
                  do
                  {
                    *(void *)&v19[((v16 - v20) & 0xFFFFFFFFFFFFFFF8) - 8 + v26] = *(void *)&v16[v26 - 8];
                    v26 -= 8;
                  }
                  while (&v16[v26] != v20);
                }
                else
                {
                  uint64_t v22 = v19;
                  uint64_t v23 = v20;
                  do
                  {
                    uint64_t v24 = *(void *)v23;
                    v23 += 8;
                    *(void *)uint64_t v22 = v24;
                    v22 += 8;
                  }
                  while (v23 != v16);
                  uint64_t v25 = (v16 - v20) >> 3;
                }
                uint64_t v21 = &v19[8 * v25];
              }
            }
            unint64_t v20 = v16 + 8;
            LODWORD(v17) = v17 + 1;
            uint64_t v19 = v21;
          }
          v16 += 8;
        }
        while (v16 < v18);
        int v16 = *(char **)(v12 + 16);
        uint64_t v27 = *(unsigned int *)(v12 + 28);
        uint64_t v18 = v20;
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v19 = &v16[8 * v17];
      }
      __int16 v28 = &v16[8 * v27];
      if (v18 != v28)
      {
        if (v18 <= v19)
        {
          uint64_t v30 = &v19[((v28 - v18) & 0xFFFFFFFFFFFFFFF8) - 8];
          do
          {
            uint64_t v31 = *((void *)v28 - 1);
            v28 -= 8;
            *(void *)uint64_t v30 = v31;
            v30 -= 8;
          }
          while (v28 != v18);
        }
        else
        {
          do
          {
            uint64_t v29 = *(void *)v18;
            v18 += 8;
            *(void *)uint64_t v19 = v29;
            v19 += 8;
          }
          while (v18 != v28);
        }
      }
      int v32 = *(_DWORD *)(v12 + 28) - v17;
      *(_DWORD *)(v12 + 28) = v32;
      if (!v32)
      {
        WebKit::CacheStorageManager::removeUnusedCache(a1, *(void *)v12, *(void *)(v12 + 8));
        uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::add((uint64_t)v52, (uint64_t *)&v53, (uint64_t *)v12);
      }
      uint64_t v33 = v12 + 32;
      uint64_t v12 = v11;
      if (v33 != v11)
      {
        uint64_t v12 = v33;
        while (*(_OWORD *)v12 == 0 || *(void *)(v12 + 8) == -1)
        {
          v12 += 32;
          if (v12 == v11)
          {
            uint64_t v12 = v11;
            break;
          }
        }
      }
    }
    while (v12 != v15);
    uint64_t v35 = (uint64_t)v53;
    if (v53)
    {
      uint64_t v36 = *((unsigned int *)v53 - 1);
      uint64_t v37 = &v53[2 * v36];
      int v38 = v37;
      if (*((_DWORD *)v53 - 3))
      {
        int v38 = v53;
        if (v36)
        {
          uint64_t v39 = 16 * v36;
          int v38 = v53;
          while (*(_OWORD *)v38 == 0 || v38[1] == -1)
          {
            v38 += 2;
            v39 -= 16;
            if (!v39)
            {
              int v38 = v37;
              break;
            }
          }
        }
      }
      char v41 = &v53[2 * *((unsigned int *)v53 - 1)];
      if (v41 != v38)
      {
        while (1)
        {
          uint64_t result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v9, v38);
          if (*v9)
          {
            uint64_t v42 = *v9 + 32 * *(unsigned int *)(*v9 - 4);
            if (v42 != result) {
              goto LABEL_78;
            }
          }
          else if (result)
          {
            uint64_t v42 = 0;
LABEL_78:
            if (v42 != result)
            {
              *(void *)uint64_t result = -1;
              *(void *)(result + 8) = -1;
              long long v43 = *(WTF **)(result + 16);
              if (v43)
              {
                *(void *)(result + 16) = 0;
                *(_DWORD *)(result + 24) = 0;
                uint64_t result = WTF::fastFree(v43, v5);
              }
              ++*(_DWORD *)(*v9 - 16);
              uint64_t v44 = *v9;
              if (*v9) {
                int v45 = *(_DWORD *)(v44 - 12) - 1;
              }
              else {
                int v45 = -1;
              }
              *(_DWORD *)(v44 - 1objc_destroyWeak(this + 2) = v45;
              uint64_t v46 = *v9;
              if (*v9)
              {
                unsigned int v47 = 6 * *(_DWORD *)(v46 - 12);
                unsigned int v48 = *(_DWORD *)(v46 - 4);
                if (v47 < v48 && v48 >= 9) {
                  uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(v9, v48 >> 1, 0);
                }
              }
            }
          }
          uint64_t v50 = v38 + 2;
          int v38 = v37;
          if (v50 != v37)
          {
            int v38 = v50;
            while (*(_OWORD *)v38 == 0 || v38[1] == -1)
            {
              v38 += 2;
              if (v38 == v37)
              {
                int v38 = v37;
                break;
              }
            }
          }
          if (v38 == v41)
          {
            uint64_t v35 = (uint64_t)v53;
            break;
          }
        }
      }
      if (v35) {
        return WTF::fastFree((WTF *)(v35 - 16), v5);
      }
    }
  }
  return result;
}

BOOL WebKit::CacheStorageManager::isActive(WebKit::CacheStorageManager *this)
{
  uint64_t v1 = *((void *)this + 14);
  if (v1 && *(_DWORD *)(v1 - 12)) {
    return 1;
  }
  uint64_t v3 = *((void *)this + 15);
  return v3 && *(_DWORD *)(v3 - 12) != 0;
}

WTF::StringImpl *WebKit::CacheStorageManager::representationString@<X0>(WebKit::CacheStorageManager *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v23 = 0;
  char v24 = 1;
  WTF::StringBuilder::append();
  uint64_t v4 = *((unsigned int *)this + 25);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)this + 11);
    uint64_t v6 = 8 * v4;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        WTF::StringBuilder::append();
      }
      uint64_t v8 = *v5++;
      char v27 = 34;
      uint64_t v26 = *(void *)(v8 + 56);
      char v25 = 34;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v21, &v27, &v26, &v25);
      char v7 = 0;
      v6 -= 8;
    }
    while (v6);
  }
  WTF::StringBuilder::append();
  uint64_t v9 = *((void *)this + 13);
  uint64_t v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(v9);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  if (v9) {
    uint64_t v14 = v9 + 24 * *(unsigned int *)(v9 - 4);
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14 != v10)
  {
    char v15 = 1;
    do
    {
      if ((v15 & 1) == 0) {
        WTF::StringBuilder::append();
      }
      uint64_t v16 = *(void *)(v11 + 16);
      char v27 = 34;
      uint64_t v26 = *(void *)(v16 + 56);
      char v25 = 34;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v21, &v27, &v26, &v25);
      while (1)
      {
        v11 += 24;
        if (v11 == v13) {
          break;
        }
        if (*(_OWORD *)v11 != 0 && *(void *)(v11 + 8) != -1) {
          goto LABEL_21;
        }
      }
      uint64_t v11 = v13;
LABEL_21:
      char v15 = 0;
    }
    while (v11 != v14);
  }
  WTF::StringBuilder::append();
  uint64_t result = v21;
  if (v21
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v21),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v21),
        (uint64_t result = v21) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  unint64_t v20 = v22;
  uint64_t v22 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy(v20, v18);
      uint64_t result = v21;
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::CacheStorageMemoryStore::readAllRecordInfos(uint64_t a1, uint64_t *a2)
{
  v28[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = (void *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      uint64_t v6 = *(void **)(a1 + 16);
      if (v4)
      {
        uint64_t v7 = 16 * v4;
        uint64_t v6 = *(void **)(a1 + 16);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            uint64_t v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v6 = (void *)(v3 + 16 * v4);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v5 = (void *)(v3 + 16 * v4);
  if (!v3)
  {
    uint64_t v8 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v8 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v9 = *(unsigned int *)(v3 - 12);
  if (v9)
  {
    if (v9 >= 0x199999A)
    {
      __break(0xC471u);
      goto LABEL_28;
    }
    LODWORD(v20) = 160 * (int)v9 / 0xA0u;
    uint64_t v19 = WTF::fastMalloc((WTF *)(160 * v9));
  }
LABEL_15:
  if (v8 != v6)
  {
    while (1)
    {
      uint64_t v10 = v6[1];
      if (!v10) {
        break;
      }
      WebKit::NetworkCache::Key::Key((uint64_t)v21, v6[1]);
      long long v11 = *(_OWORD *)(v10 + 88);
      long long v22 = *(_OWORD *)(v10 + 72);
      long long v23 = v11;
      uint64_t v12 = *(_DWORD **)(v10 + 104);
      if (v12) {
        *v12 += 2;
      }
      char v24 = v12;
      long long v13 = *(_OWORD *)(v10 + 128);
      long long v25 = *(_OWORD *)(v10 + 112);
      long long v26 = v13;
      char v27 = *(unsigned char *)(v10 + 144);
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(v28, (void **)(v10 + 152));
      WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t)&v19, v21);
      WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v21, v14);
      char v15 = v6 + 2;
      uint64_t v6 = v5;
      if (v15 != v5)
      {
        uint64_t v6 = v15;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            uint64_t v6 = v5;
            break;
          }
        }
      }
      if (v6 == v8) {
        goto LABEL_25;
      }
    }
    __break(0xC471u);
LABEL_28:
    JUMPOUT(0x198C7AFB8);
  }
LABEL_25:
  uint64_t v16 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 16))(v16, &v19);
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  return WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v17);
}

uint64_t WebKit::CacheStorageMemoryStore::readRecords(uint64_t result, unsigned int *a2, uint64_t *a3)
{
  uint64_t v30 = result;
  v42[92] = *MEMORY[0x1E4F143B8];
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unsigned int v3 = a2[3];
  if (!v3)
  {
LABEL_23:
    uint64_t v26 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v26 + 16))(v26, &v31);
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    return WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v27);
  }
  if (v3 < 0x572621)
  {
    LODWORD(v3objc_destroyWeak(this + 2) = 752 * v3 / 0x2F0;
    uint64_t v29 = WTF::fastMalloc((WTF *)(752 * v3));
    uint64_t v31 = v29;
    uint64_t v5 = a2[3];
    if (v5)
    {
      unsigned int v6 = 0;
      uint64_t v7 = 160 * v5;
      uint64_t v8 = (uint64_t *)(*(void *)a2 + 80);
      while (1)
      {
        uint64_t v9 = *(void *)(v30 + 16);
        uint64_t v10 = *v8;
        v8 += 20;
        uint64_t v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9, v10);
        if (v9) {
          uint64_t v12 = v9 + 16 * *(unsigned int *)(v9 - 4);
        }
        else {
          uint64_t v12 = 0;
        }
        if (v12 == v11)
        {
          uint64_t v21 = (unsigned char *)(v29 + 752 * v6);
          *uint64_t v21 = 0;
          v21[736] = 0;
        }
        else
        {
          uint64_t v13 = *(void *)(v11 + 8);
          char v14 = *(unsigned char *)(v13 + 160);
          v35[0] = *(_DWORD *)(v13 + 368);
          *(int *)((char *)v35 + 3) = *(_DWORD *)(v13 + 371);
          char v15 = *(WTF::StringImpl **)(v13 + 376);
          if (v15) {
            *(_DWORD *)v15 += 2;
          }
          uint64_t v36 = v15;
          long long v16 = *(_OWORD *)(v13 + 400);
          long long v37 = *(_OWORD *)(v13 + 384);
          long long v38 = v16;
          char v17 = *(unsigned char *)(v13 + 424);
          WebCore::ResourceResponseData::isolatedCopy(v40, (WebCore::ResourceResponseData *)(v13 + 432));
          uint64_t v18 = *(void *)(v13 + 712);
          WebCore::DOMCacheEngine::copyResponseBody();
          WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v42, v13, v14, (const String *)(v13 + 168), v35, (_DWORD **)(v13 + 416), v17, (uint64_t)v40, v18, (uint64_t)v33);
          if (v34 != -1) {
            ((void (*)(char *, unsigned char *))off_1EE9CBD60[v34])(&v39, v33);
          }
          WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v40, v19);
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v20);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v40, v42);
          unsigned __int8 v41 = 1;
          WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v42, v22);
          int v23 = v41;
          char v24 = (unsigned char *)(v29 + 752 * v6);
          *char v24 = 0;
          v24[736] = 0;
          if (v23)
          {
            *(unsigned char *)(WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v24, v40) + 736) = 1;
            HIDWORD(v3objc_destroyWeak(this + 2) = ++v6;
            if (v41) {
              WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v40, v25);
            }
            goto LABEL_22;
          }
        }
        HIDWORD(v3objc_destroyWeak(this + 2) = ++v6;
LABEL_22:
        v7 -= 160;
        if (!v7) {
          goto LABEL_23;
        }
      }
    }
    goto LABEL_23;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::CacheStorageMemoryStore::deleteRecords(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4 = a2[3];
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(a1 + 16);
    uint64_t v6 = 160 * v4;
    uint64_t v7 = (uint64_t *)(*(void *)a2 + 80);
    do
    {
      uint64_t v8 = *v5;
      uint64_t v9 = *v7;
      v7 += 20;
      uint64_t v10 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*v5, v9);
      if (v8)
      {
        uint64_t v11 = v8 + 16 * *(unsigned int *)(v8 - 4);
        if (v11 != v10) {
          goto LABEL_8;
        }
      }
      else if (v10)
      {
        uint64_t v11 = 0;
LABEL_8:
        if (v11 != v10)
        {
          *(void *)uint64_t v10 = -1;
          std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100]((WebKit::CacheStorageRecord **)(v10 + 8), 0);
          ++*(_DWORD *)(*v5 - 16);
          uint64_t v12 = *v5;
          int v13 = *v5 ? *(_DWORD *)(v12 - 12) - 1 : -1;
          *(_DWORD *)(v12 - 1objc_destroyWeak(this + 2) = v13;
          uint64_t v14 = *v5;
          if (*v5)
          {
            unsigned int v15 = 6 * *(_DWORD *)(v14 - 12);
            unsigned int v16 = *(_DWORD *)(v14 - 4);
            if (v15 < v16 && v16 >= 9) {
              WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v5, v16 >> 1);
            }
          }
        }
      }
      v6 -= 160;
    }
    while (v6);
  }
  uint64_t v18 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, 1);
  uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v18 + 8);

  return v19(v18);
}

uint64_t WebKit::CacheStorageMemoryStore::writeRecords(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)a2;
    uint64_t v6 = *(void *)a2 + 736 * v4;
    uint64_t v7 = (uint64_t *)(a1 + 16);
    while (1)
    {
      uint64_t v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x2E0);
      WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v8, v5);
      uint64_t v9 = *v7;
      if (*v7
        || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v7),
            (uint64_t v9 = *v7) != 0))
      {
        int v10 = *(_DWORD *)(v9 - 8);
      }
      else
      {
        int v10 = 0;
      }
      uint64_t v11 = v5[10];
      unint64_t v12 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
      unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
      unsigned int v16 = (WebKit::CacheStorageRecord **)(v9 + 16 * v15);
      char v17 = *v16;
      if (*v16)
      {
        uint64_t v18 = 0;
        int v19 = 1;
        do
        {
          if (v17 == (WebKit::CacheStorageRecord *)v11)
          {
            std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100](v16 + 1, v8);
            goto LABEL_24;
          }
          if (v17 == (WebKit::CacheStorageRecord *)-1) {
            uint64_t v18 = v16;
          }
          unsigned int v15 = (v15 + v19) & v10;
          unsigned int v16 = (WebKit::CacheStorageRecord **)(v9 + 16 * v15);
          char v17 = *v16;
          ++v19;
        }
        while (*v16);
        if (v18)
        {
          WTF::StringImpl *v18 = 0;
          v18[1] = 0;
          --*(_DWORD *)(*v7 - 16);
          uint64_t v11 = v5[10];
          unsigned int v16 = v18;
        }
      }
      char *v16 = (WebKit::CacheStorageRecord *)v11;
      std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100](v16 + 1, v8);
      uint64_t v20 = *v7;
      int v21 = *v7 ? *(_DWORD *)(v20 - 12) + 1 : 1;
      *(_DWORD *)(v20 - 1objc_destroyWeak(this + 2) = v21;
      uint64_t v22 = *v7;
      int v23 = *v7 ? *(_DWORD *)(v22 - 12) : 0;
      uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
      unint64_t v25 = *(unsigned int *)(v22 - 4);
      if (v25 > 0x400) {
        break;
      }
      if (3 * v25 <= 4 * v24) {
        goto LABEL_23;
      }
LABEL_24:
      v5 += 92;
      if (v5 == (uint64_t *)v6) {
        goto LABEL_29;
      }
    }
    if (v25 > 2 * v24) {
      goto LABEL_24;
    }
LABEL_23:
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v7);
    goto LABEL_24;
  }
LABEL_29:
  uint64_t v26 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, 1);
  char v27 = *(uint64_t (**)(uint64_t))(*(void *)v26 + 8);

  return v27(v26);
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::CacheStorageCache&>(uint64_t a1, uint64_t *a2, void *a3, unsigned int *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v29 = -1640531527;
  __int16 v30 = 0;
  char v31 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v29, a3);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
  unsigned int v11 = result & v9;
  unint64_t v12 = (void *)(v8 + 24 * (result & v9));
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    unsigned int v15 = 0;
    int v16 = 1;
    do
    {
      if (v14 == *a3 && v13 == a3[1])
      {
        uint64_t v25 = *a2;
        if (*a2) {
          unsigned int v26 = *(_DWORD *)(v25 - 4);
        }
        else {
          unsigned int v26 = 0;
        }
        char v28 = 0;
        uint64_t v27 = v25 + 24 * v26;
        goto LABEL_35;
      }
      if (v13 == -1) {
        unsigned int v15 = v12;
      }
      unsigned int v11 = (v11 + v16) & v9;
      unint64_t v12 = (void *)(v8 + 24 * v11);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      void *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      unint64_t v12 = v15;
    }
  }
  *(_OWORD *)unint64_t v12 = *(_OWORD *)a3;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a4, (uint64_t)a4);
  uint64_t v18 = *(atomic_uint **)a4;
  if (*(void *)a4) {
    atomic_fetch_add(v18, 1u);
  }
  uint64_t result = v12[2];
  void v12[2] = v18;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = WTF::fastFree((WTF *)result, v17);
  }
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 1objc_destroyWeak(this + 2) = v20;
  uint64_t v21 = *a2;
  if (*a2) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_26:
      uint64_t result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, (uint64_t)v12);
      unint64_t v12 = (void *)result;
      uint64_t v21 = *a2;
      if (*a2) {
        LODWORD(v24) = *(_DWORD *)(v21 - 4);
      }
      else {
        LODWORD(v24) = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_26;
  }
  uint64_t v27 = v21 + 24 * v24;
  char v28 = 1;
LABEL_35:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v27;
  *(unsigned char *)(a1 + 16) = v28;
  return result;
}

uint64_t WebKit::CacheStorageRegistry::cache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = a2;
  v8[1] = a3;
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1 + 8, v8, (atomic_uint **)&v7);
  unsigned int v4 = (unsigned int *)v7;
  if (!v7) {
    return 0;
  }
  uint64_t v5 = *((void *)v7 + 1);
  uint64_t v7 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  return v5;
}

uint64_t WebKit::FileSystemStorageHandle::create@<X0>(WTF::FileSystemImpl *this@<X2>, unsigned int *a2@<X0>, const WTF::String *a3@<X1>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  char v7 = (char)a3;
  if (a3 == 1)
  {
    if (WTF::FileSystemImpl::makeAllDirectories(this, a3)) {
      goto LABEL_6;
    }
LABEL_7:
    uint64_t result = 0;
    goto LABEL_8;
  }
  if (a3) {
    goto LABEL_7;
  }
  int v13 = WTF::FileSystemImpl::openFile();
  if (v13 == -1) {
    goto LABEL_7;
  }
  WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v13, v10);
LABEL_6:
  uint64_t v11 = WTF::fastMalloc((WTF *)0x48);
  uint64_t result = WebKit::FileSystemStorageHandle::FileSystemStorageHandle(v11, a2, v7, (uint64_t *)this, a4);
LABEL_8:
  *a5 = result;
  return result;
}

uint64_t WebKit::FileSystemStorageHandle::FileSystemStorageHandle(uint64_t a1, unsigned int *a2, char a3, uint64_t *a4, uint64_t *a5)
{
  *(void *)a1 = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
  *(void *)(a1 + 8) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2, (uint64_t)a2);
  int v10 = *(atomic_uint **)a2;
  if (*(void *)a2) {
    atomic_fetch_add(v10, 1u);
  }
  *(void *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 24) = a3;
  uint64_t v11 = *a4;
  *a4 = 0;
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = v11;
  uint64_t v12 = *a5;
  *a5 = 0;
  *(void *)(a1 + 40) = v12;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  return a1;
}

void WebKit::FileSystemStorageHandle::close(WebKit::FileSystemStorageHandle *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    unsigned int v3 = *(WebKit::FileSystemStorageManager **)(v1 + 8);
    if (v3)
    {
      if (*((unsigned char *)this + 64))
      {
        WebKit::FileSystemStorageHandle::closeSyncAccessHandle((uint64_t)this, *((void *)this + 6));
        uint64_t v4 = *((void *)this + 2);
        if (v4) {
          unsigned int v3 = *(WebKit::FileSystemStorageManager **)(v4 + 8);
        }
        else {
          unsigned int v3 = 0;
        }
      }
      WebKit::FileSystemStorageManager::closeHandle(v3, this);
    }
  }
}

uint64_t WebKit::FileSystemStorageHandle::closeSyncAccessHandle(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64)
    && *(void *)(a1 + 48) == a2
    && (uint64_t v3 = *(void *)(a1 + 16)) != 0
    && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    WebKit::FileSystemStorageManager::releaseLockForFile(v4, (WTF::StringImpl **)(a1 + 32), *(const WTF::StringImpl **)(a1 + 8));
    int v5 = *(unsigned __int8 *)(a1 + 64);
    int v6 = 0;
    if (*(unsigned char *)(a1 + 64))
    {
      int v5 = 0;
      *(unsigned char *)(a1 + 64) = 0;
    }
  }
  else
  {
    int v5 = 1;
    int v6 = 7;
  }
  return v6 | (v5 << 8);
}

uint64_t WebKit::FileSystemStorageHandle::isSameEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v15 = a2;
  uint64_t v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(v4 + 40), &v15);
  uint64_t v8 = *(void *)(v4 + 40);
  if (v8) {
    v8 += 16 * *(unsigned int *)(v8 - 4);
  }
  if (v8 == v5) {
    int v9 = (int **)MEMORY[0x1E4F30980];
  }
  else {
    int v9 = (int **)(*(void *)(v5 + 8) + 32);
  }
  int v10 = *v9;
  if (!*v9) {
    return 0;
  }
  int v11 = *v10;
  int v12 = v10[1];
  *v10 += 2;
  if (!v12)
  {
    uint64_t v13 = 0;
    if (v11) {
      goto LABEL_12;
    }
LABEL_14:
    WTF::StringImpl::destroy((WTF::StringImpl *)v10, v6);
    return v13;
  }
  uint64_t v13 = WTF::equal(*(WTF **)(a1 + 32), (const WTF::StringImpl *)v10, v7);
  int v11 = *v10 - 2;
  if (*v10 == 2) {
    goto LABEL_14;
  }
LABEL_12:
  int *v10 = v11;
  return v13;
}

uint64_t WebKit::FileSystemStorageHandle::requestCreateHandle@<X0>(WTF::String *a1@<X3>, uint64_t result@<X0>, const WTF::String *a3@<X1>, const WTF::String *a4@<X2>, char a5@<W4>, uint64_t a6@<X8>)
{
  if (*(unsigned char *)(result + 24) != 1)
  {
    char v15 = 6;
LABEL_10:
    *(unsigned char *)a6 = v15;
    *(_DWORD *)(a6 + 8) = 1;
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 16);
  if (!v8 || !*(void *)(v8 + 8))
  {
    char v15 = 7;
    goto LABEL_10;
  }
  uint64_t result = WebKit::isValidFileName((WebKit *)(result + 32), a1, a4);
  if ((result & 1) == 0)
  {
    char v15 = 4;
    goto LABEL_10;
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  uint64_t v13 = *(void *)(v7 + 16);
  if (v13) {
    uint64_t v14 = *(void *)(v13 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  WebKit::FileSystemStorageManager::createHandle((WTF::FileSystemImpl *)&v17, v14, a3, (BOOL)a4, (uint64_t *)a1, a5, a6);
  uint64_t result = (uint64_t)v17;
  char v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::isValidFileName(WebKit *this, const WTF::String *a2, const WTF::String *a3)
{
  if (!*(void *)a2
    || !*(_DWORD *)(*(void *)a2 + 4)
    || (MEMORY[0x19972E990]() & 1) != 0
    || (MEMORY[0x19972E990](*(void *)a2, "..", 2) & 1) != 0
    || *(void *)a2 && WTF::StringImpl::find(*(void *)a2, 0x2Fu, 0, v4, v5, v6) != -1)
  {
    return 0;
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::pathFileName((uint64_t *)&v15, (WTF::FileSystemImpl *)&v14, v9);
  uint64_t v7 = WTF::equal(v15, *(const WTF::StringImpl **)a2, v10);
  int v12 = v15;
  char v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v14;
  uint64_t v14 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  return v7;
}

uint64_t WebKit::FileSystemStorageHandle::removeEntry(WebKit::FileSystemStorageHandle *this, const WTF::String *a2, const WTF::String *a3)
{
  if (*((unsigned char *)this + 24) != 1)
  {
    int v8 = 1;
    int v7 = 6;
    return v7 | (v8 << 8);
  }
  char v3 = (char)a3;
  if (!WebKit::isValidFileName((WebKit::FileSystemStorageHandle *)((char *)this + 32), a2, a3))
  {
    int v8 = 1;
    int v7 = 4;
    return v7 | (v8 << 8);
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (!WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v12, v4))
  {
    int v8 = 1;
    int v7 = 2;
    goto LABEL_21;
  }
  uint64_t v6 = WTF::FileSystemImpl::fileType((WTF::FileSystemImpl *)&v12, v5);
  if ((v6 & 0xFF00000000) == 0)
  {
    int v8 = 1;
    int v7 = 6;
LABEL_21:
    int v10 = v12;
    int v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v5);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    return v7 | (v8 << 8);
  }
  if (!v6)
  {
    int v9 = WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v12, v5);
    goto LABEL_17;
  }
  if (v6 == 1)
  {
    if (v3) {
      int v9 = WTF::FileSystemImpl::deleteNonEmptyDirectory((WTF::FileSystemImpl *)&v12, v5);
    }
    else {
      int v9 = WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v12, v5);
    }
LABEL_17:
    if (v9) {
      int v7 = 0;
    }
    else {
      int v7 = 7;
    }
    int v8 = v9 ^ 1;
    goto LABEL_21;
  }
  if (v6 != 2)
  {
    int v7 = 0;
    int v8 = 0;
    goto LABEL_21;
  }
  uint64_t result = 163;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::FileSystemStorageHandle::resolve@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(result + 16);
  if (!v4) {
    goto LABEL_18;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    goto LABEL_18;
  }
  uint64_t v6 = result;
  uint64_t v17 = a2;
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(v5 + 40), &v17);
  uint64_t v8 = *(void *)(v5 + 40);
  if (v8) {
    v8 += 16 * *(unsigned int *)(v8 - 4);
  }
  int v9 = (WTF::StringImpl **)(v8 == result ? MEMORY[0x1E4F30980] : *(void *)(result + 8) + 32);
  int v10 = *v9;
  if (*v9)
  {
    int v11 = *((_DWORD *)v10 + 1);
    *(_DWORD *)v10 += 2;
    if (v11)
    {
      if (WTF::StringImpl::startsWith())
      {
        uint64_t v13 = *(void *)(v6 + 32);
        if (v13 && *(_DWORD *)(v13 + 4) || (*((_DWORD *)v10 + 1) & 0x80000000) != 0)
        {
          WTF::StringImpl::substring(v10);
        }
        else
        {
          *(_DWORD *)v10 += 2;
          int v16 = v10;
        }
        WTF::String::split();
        *(void *)a3 = v17;
        uint64_t v14 = v18;
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        *(void *)(a3 + 8) = v14;
        *(_DWORD *)(a3 + 16) = 0;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v15);
        uint64_t result = (uint64_t)v16;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            uint64_t result = WTF::StringImpl::destroy(v16, v7);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
      }
      else
      {
        uint64_t v17 = 0;
        *(void *)a3 = 0;
        uint64_t v18 = 0;
        *(void *)(a3 + 8) = 0;
        *(_DWORD *)(a3 + 16) = 0;
        uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v12);
      }
    }
    else
    {
      *(unsigned char *)a3 = 7;
      *(_DWORD *)(a3 + 16) = 1;
    }
    if (*(_DWORD *)v10 == 2) {
      return WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  else
  {
LABEL_18:
    *(unsigned char *)a3 = 7;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

uint64_t WebKit::FileSystemStorageHandle::createSyncAccessHandle@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 16);
  if (!v3 || (uint64_t v4 = this, (this = *(void *)(v3 + 8)) == 0))
  {
    char v11 = 7;
LABEL_16:
    *(unsigned char *)a2 = v11;
    *(_DWORD *)(a2 + 40) = 1;
    return this;
  }
  this = WebKit::FileSystemStorageManager::acquireLockForFile(this, (WTF::StringImpl **)(v4 + 32), *(const WTF::StringImpl **)(v4 + 8));
  if ((this & 1) == 0)
  {
    char v11 = 5;
    goto LABEL_16;
  }
  this = WTF::FileSystemImpl::openFile();
  if (this == -1)
  {
    *(unsigned char *)a2 = 7;
    *(_DWORD *)(a2 + 40) = 1;
    return this;
  }
  int v17 = -1;
  IPC::SharedFileHandle::create((uint64_t)v15);
  if (v16)
  {
    uint64_t IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    int v8 = *(unsigned __int8 *)(v4 + 64);
    *(void *)(v4 + 48) = IdentifierInternal;
    *(void *)(v4 + 56) = 0;
    if (!v8) {
      *(unsigned char *)(v4 + 64) = 1;
    }
    this = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)(v4 + 32), v7);
    if (v9) {
      uint64_t v10 = this;
    }
    else {
      uint64_t v10 = 0;
    }
    if (!*(unsigned char *)(v4 + 64) || (uint64_t v12 = *(void *)(v4 + 48), !v16))
    {
      __break(1u);
      return this;
    }
    WebCore::FileHandle::FileHandle();
    uint64_t v14 = v10;
    *(void *)a2 = v12;
    WebCore::FileHandle::FileHandle();
    *(void *)(a2 + 3objc_destroyWeak(this + 2) = v14;
    *(_DWORD *)(a2 + 40) = 0;
    this = MEMORY[0x19972F510](&v13);
  }
  else
  {
    this = WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v17, v5);
    *(unsigned char *)a2 = 1;
    *(_DWORD *)(a2 + 40) = 1;
  }
  if (v16) {
    return MEMORY[0x19972F510](v15);
  }
  return this;
}

uint64_t WebKit::FileSystemStorageHandle::getHandleNames@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(this + 24) == 1)
  {
    WTF::FileSystemImpl::listDirectory(&v7, (WTF::FileSystemImpl *)(this + 32), a2);
    *(void *)a3 = v7;
    uint64_t v4 = v8;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)(a3 + 8) = v4;
    this = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v5);
    int v6 = 0;
  }
  else
  {
    *(unsigned char *)a3 = 6;
    int v6 = 1;
  }
  *(_DWORD *)(a3 + 16) = v6;
  return this;
}

uint64_t WebKit::FileSystemStorageHandle::getHandle@<X0>(WTF::String *a1@<X2>, uint64_t a2@<X0>, const WTF::String *a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t result = WebKit::FileSystemStorageHandle::requestCreateHandle(a1, a2, a3, (const WTF::String *)2, 0, (uint64_t)&v13);
  int v7 = v14;
  if (v14)
  {
    if (v14 == 1)
    {
      *(unsigned char *)a4 = v13;
LABEL_9:
      *(_DWORD *)(a4 + 16) = v7;
      return result;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 16);
    if (v8) {
      uint64_t v9 = *(void *)(v8 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t result = WebKit::FileSystemStorageManager::getType(v9, v13);
    if (!v14)
    {
      *(void *)a4 = v13;
      *(unsigned char *)(a4 + 8) = result == 1;
      goto LABEL_9;
    }
  }
  uint64_t v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::FileSystemStorageHandle::move(v10, v11, v12);
}

uint64_t WebKit::FileSystemStorageHandle::move(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || (uint64_t v5 = *(void *)(v3 + 8)) == 0)
  {
    int v7 = 1;
    int v6 = 7;
    return v6 | (v7 << 8);
  }
  if (*(unsigned char *)(a1 + 64))
  {
    int v6 = 0;
LABEL_5:
    int v7 = 1;
    return v6 | (v7 << 8);
  }
  if (WebKit::FileSystemStorageManager::getType(v5, a2) != 1)
  {
    int v7 = 1;
    int v6 = 6;
    return v6 | (v7 << 8);
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11) {
    uint64_t v12 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  int v22 = (WTF::StringImpl *)a2;
  uint64_t v13 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(v12 + 40), &v22);
  uint64_t v16 = *(void *)(v12 + 40);
  if (v16) {
    v16 += 16 * *(unsigned int *)(v16 - 4);
  }
  if (v16 == v13) {
    int v17 = (WTF::StringImpl **)MEMORY[0x1E4F30980];
  }
  else {
    int v17 = (WTF::StringImpl **)(*(void *)(v13 + 8) + 32);
  }
  uint64_t v18 = *v17;
  if (!*v17)
  {
    int v6 = 7;
    goto LABEL_5;
  }
  *(_DWORD *)v18 += 2;
  int v22 = v18;
  if (*((_DWORD *)v18 + 1))
  {
    if (WebKit::isValidFileName((WebKit *)&v22, (const WTF::String *)a3, v15))
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      if (WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)(a1 + 32), (const WTF::String *)&v21, v19))
      {
        WTF::String::operator=((uint64_t *)(a1 + 32), &v21);
        WTF::String::operator=((uint64_t *)(a1 + 40), a3);
        int v6 = 0;
        int v7 = 0;
      }
      else
      {
        int v7 = 1;
        int v6 = 7;
      }
      int v20 = v21;
      uint64_t v21 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v14);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    else
    {
      int v7 = 1;
      int v6 = 4;
    }
  }
  else
  {
    int v7 = 1;
    int v6 = 7;
  }
  if (*(_DWORD *)v18 == 2) {
    WTF::StringImpl::destroy(v18, v14);
  }
  else {
    *(_DWORD *)v18 -= 2;
  }
  return v6 | (v7 << 8);
}

unint64_t WebKit::FileSystemStorageHandle::allocatedUnusedCapacity(WebKit::FileSystemStorageHandle *this, const WTF::String *a2)
{
  if (!*((unsigned char *)this + 64)) {
    return 0;
  }
  unint64_t result = WTF::FileSystemImpl::fileSize((WebKit::FileSystemStorageHandle *)((char *)this + 32), a2);
  if (*((unsigned char *)this + 64))
  {
    if (v4) {
      unint64_t v5 = result;
    }
    else {
      unint64_t v5 = 0;
    }
    unint64_t v6 = *((void *)this + 7);
    BOOL v7 = v6 >= v5;
    unint64_t v8 = v6 - v5;
    if (v7) {
      return v8;
    }
    else {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebKit::FileSystemStorageHandle::requestNewCapacityForSyncAccessHandle(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 64) && *(void *)(a1 + 48) == a2)
  {
    unint64_t v7 = *(void *)(a1 + 56);
    if (v7 >= a3)
    {
      uint64_t v11 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)v11 + 16))(v11, v7, 1);
      goto LABEL_9;
    }
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9)
      {
        if (a3 >= 0x100000)
        {
          if (a3 >> 28)
          {
            unint64_t v10 = (a3 & 0xFFFFFFFFF8000000) + 0x8000000;
          }
          else
          {
            long double v14 = log2((double)a3);
            unint64_t v10 = (unint64_t)ldexp(1.0, (int)v14 + 1);
            uint64_t v9 = *(void *)(v8 + 8);
          }
        }
        else
        {
          unint64_t v10 = 0x100000;
        }
        unint64_t v15 = v10 - v7;
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
        uint64_t v16 = *(atomic_uint **)a1;
        if (*(void *)a1) {
          atomic_fetch_add(v16, 1u);
        }
        uint64_t v17 = *a4;
        *a4 = 0;
        uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x30);
        void *v18 = &unk_1EE9CC2D0;
        v18[1] = a1;
        void v18[2] = v16;
        void v18[3] = a2;
        v18[4] = v10;
        v18[5] = v17;
        uint64_t v19 = v18;
        (*(void (**)(void, unint64_t, void **))(**(void **)(v9 + 24) + 16))(*(void *)(v9 + 24), v15, &v19);
        uint64_t result = (uint64_t)v19;
        uint64_t v19 = 0;
        if (result) {
          return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
        return result;
      }
    }
  }
  uint64_t v11 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void, void))(*(void *)v11 + 16))(v11, 0, 0);
LABEL_9:
  uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);

  return v12(v11);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::FileSystemStorageHandle&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v30 = v8 + 16 * v24;
        goto LABEL_34;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a3, (uint64_t)a3);
  uint64_t v21 = *(atomic_uint **)a3;
  if (*(void *)a3) {
    atomic_fetch_add(v21, 1u);
  }
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
  }
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 1objc_destroyWeak(this + 2) = v23;
  uint64_t v25 = *v6;
  if (*v6) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_27:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v25 = *v6;
      if (*v6) {
        unint64_t v28 = *(unsigned int *)(v25 - 4);
      }
      else {
        unint64_t v28 = 0;
      }
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_27;
  }
  uint64_t v30 = v25 + 16 * v28;
  char v29 = 1;
LABEL_34:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + 16) = v29;
  return result;
}

uint64_t *WebKit::FileSystemStorageHandleRegistry::unregisterHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 8), &v7);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    unint64_t v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
  }
  return result;
}

uint64_t WebKit::FileSystemStorageHandleRegistry::getHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((atomic_uint **)(a1 + 8), &v7, (atomic_uint **)&v6);
  uint64_t v3 = (unsigned int *)v6;
  if (!v6) {
    return 0;
  }
  uint64_t v4 = *((void *)v6 + 1);
  unint64_t v6 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
    if (v4) {
      return v4;
    }
    return 0;
  }
  if (!v4) {
    return 0;
  }
  return v4;
}

void WebKit::CacheStorageDiskStore::~CacheStorageDiskStore(WebKit::CacheStorageDiskStore *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
  }
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
  }
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  WTF::fastFree(this, a2);
}

void WebKit::CacheStorageMemoryStore::~CacheStorageMemoryStore(WebKit::CacheStorageMemoryStore *this, void *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v2, a2);
  }
}

{
  uint64_t v3;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v3, a2);
  }

  WTF::fastFree(this, a2);
}

uint64_t WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(unsigned int ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      unint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, a2);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::makeString<WTF::String,char,unsigned long>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = (void *)result;
  v23[4] = *MEMORY[0x1E4F143B8];
  if (a2) {
    int v6 = *(_DWORD *)(a2 + 4);
  }
  else {
    int v6 = 0;
  }
  int v7 = 0;
  unint64_t v8 = a3;
  do
  {
    ++v7;
    BOOL v9 = v8 > 9;
    v8 /= 0xAuLL;
  }
  while (v9);
  if ((v7 & 0x80000000) == 0)
  {
    BOOL v10 = __OFADD__(v7, 1);
    int v11 = v7 + 1;
    BOOL v12 = v10;
    if ((v6 & 0x80000000) == 0 && !v12)
    {
      uint64_t v13 = (v6 + v11);
      if (!__OFADD__(v6, v11))
      {
        if (!a2 || (*(unsigned char *)(a2 + 16) & 4) != 0)
        {
          if ((v13 & 0x80000000) == 0)
          {
            uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
            uint64_t v14 = v23[0];
            if (v23[0])
            {
              *(_DWORD *)v23[0] = 2;
              *(_DWORD *)(v14 + 4) = v13;
              *(void *)(v14 + 8) = v14 + 20;
              *(_DWORD *)(v14 + 16) = 4;
              uint64_t v22 = a2;
              uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v22, (char *)(v14 + 20));
              uint64_t v19 = v22;
              if (v22) {
                uint64_t v19 = *(unsigned int *)(v22 + 4);
              }
              uint64_t v20 = 0;
              uint64_t v21 = (unsigned char *)(v14 + 20 + v19);
              *uint64_t v21 = 45;
              do
              {
                *((unsigned char *)&v23[3] + v20--) = (v3 % 0xA) | 0x30;
                BOOL v9 = v3 > 9;
                v3 /= 0xAuLL;
              }
              while (v9);
              if (v20 + 26 <= 25) {
                uint64_t result = (uint64_t)memcpy(v21 + 1, (char *)&v23[3] + v20 + 1, -v20);
              }
              goto LABEL_33;
            }
          }
        }
        else if (v13 <= 0x7FFFFFEF)
        {
          uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * (v6 + v11) + 20));
          uint64_t v14 = v23[0];
          if (v23[0])
          {
            *(_DWORD *)v23[0] = 2;
            *(_DWORD *)(v14 + 4) = v13;
            *(void *)(v14 + 8) = v14 + 20;
            *(_DWORD *)(v14 + 16) = 0;
            uint64_t v22 = a2;
            uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v22, (char *)(v14 + 20));
            if (v22) {
              uint64_t v15 = *(unsigned int *)(v22 + 4);
            }
            else {
              uint64_t v15 = 0;
            }
            uint64_t v16 = 0;
            *(_WORD *)(v14 + 20 + 2 * v15) = 45;
            do
            {
              *((unsigned char *)&v23[3] + v16--) = (v3 % 0xA) | 0x30;
              BOOL v9 = v3 > 9;
              v3 /= 0xAuLL;
            }
            while (v9);
            if (v16 + 26 <= 25)
            {
              uint64_t v17 = (_WORD *)(v14 + 2 * v15 + 22);
              do
                *v17++ = *((unsigned __int8 *)&v23[3] + v16 + 1);
              while (!__CFADD__(v16++, 1));
            }
LABEL_33:
            *uint64_t v5 = v14;
            return result;
          }
        }
      }
    }
  }
  *uint64_t v5 = 0;
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(void *)(v4 - 8) != -1)
      {
        WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        uint64_t v5 = *(WTF::StringImpl **)(v4 - 8);
        *(void *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + objc_destroyWeak(this + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::CacheStorageRecordInformation::updateVaryHeaders(WebCore::ResourceRequest const&,WebCore::ResourceResponseData const&)::{lambda(WTF::StringView)#1},void,WTF::StringView>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 144)) {
    goto LABEL_8;
  }
  uint64_t v4 = (char *)WTF::StringView::trim<BOOL ()(char16_t)>((uint64_t)&v14, (uint64_t (*)(void))WTF::isASCIIWhitespaceWithoutFF<char16_t>);
  if (v4 == "*" || v5 != 1)
  {
    if (v4 != "*" || v5 != 1) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if ((v5 & 0xFF00000000) != 0) {
    int v6 = *v4;
  }
  else {
    int v6 = *(unsigned __int16 *)v4;
  }
  if (v6 == 42) {
LABEL_7:
  }
    *(unsigned char *)(v3 + 144) = 1;
LABEL_8:
  int v7 = (uint64_t *)(v3 + 152);
  if (BYTE4(v15)) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  WebCore::ResourceRequestBase::httpHeaderField();
  WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>(v7, &v13, (uint64_t *)&v12, (uint64_t)v11);
  BOOL v9 = v12;
  BOOL v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Persistence::Decoder::operator>><WebCore::FetchHeadersGuard,(void *)0>(uint64_t a1)
{
  return a1;
}

uint64_t WebCore::ResourceResponseData::operator=(uint64_t a1, uint64_t a2)
{
  WTF::URL::operator=(a1, a2);
  WTF::String::operator=((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  WTF::String::operator=((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  WTF::String::operator=((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 72));
  WTF::String::operator=((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
  uint64_t v4 = *(unsigned int *)(a1 + 100);
  if (v4) {
    WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::CommonHeader>::destruct(*(WebCore::ExceptionData **)(a1 + 88), (WebCore::ExceptionData *)(*(void *)(a1 + 88) + 16 * v4));
  }
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1 + 88, (uint64_t *)(a2 + 88));
  uint64_t v5 = *(unsigned int *)(a1 + 116);
  if (v5) {
    WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*(WebCore::HTTPHeaderMap::UncommonHeader **)(a1 + 104), (WebCore::HTTPHeaderMap::UncommonHeader *)(*(void *)(a1 + 104) + 16 * v5));
  }
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1 + 104, (uint64_t *)(a2 + 104));
  int v7 = (_OWORD *)(a1 + 120);
  unint64_t v8 = (_OWORD *)(a2 + 120);
  if (*(unsigned __int8 *)(a1 + 248) == *(unsigned __int8 *)(a2 + 248))
  {
    if (*(unsigned char *)(a1 + 248))
    {
      long long v9 = *(_OWORD *)(a2 + 136);
      *int v7 = *v8;
      *(_OWORD *)(a1 + 136) = v9;
      long long v10 = *(_OWORD *)(a2 + 152);
      long long v11 = *(_OWORD *)(a2 + 168);
      long long v12 = *(_OWORD *)(a2 + 184);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(_OWORD *)(a1 + 168) = v11;
      *(_OWORD *)(a1 + 184) = v12;
      *(_OWORD *)(a1 + 15objc_destroyWeak(this + 2) = v10;
      WTF::String::operator=((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
      long long v13 = *(_OWORD *)(a2 + 216);
      *(void *)(a1 + 23objc_destroyWeak(this + 2) = *(void *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = v13;
      uint64_t v14 = *(void *)(a2 + 240);
      *(void *)(a2 + 240) = 0;
      uint64_t v15 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(a1 + 240);
      *(void *)(a1 + 240) = v14;
      if (v15) {
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v15);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 248))
  {
    uint64_t v16 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(a1 + 240);
    *(void *)(a1 + 240) = 0;
    if (v16) {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v16);
    }
    uint64_t v17 = *(WTF::StringImpl **)(a1 + 208);
    *(void *)(a1 + 208) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v6);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    *(unsigned char *)(a1 + 248) = 0;
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 136);
    *int v7 = *v8;
    *(_OWORD *)(a1 + 136) = v18;
    long long v19 = *(_OWORD *)(a2 + 152);
    long long v20 = *(_OWORD *)(a2 + 168);
    long long v21 = *(_OWORD *)(a2 + 184);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(_OWORD *)(a1 + 168) = v20;
    *(_OWORD *)(a1 + 184) = v21;
    *(_OWORD *)(a1 + 15objc_destroyWeak(this + 2) = v19;
    uint64_t v22 = *(void *)(a2 + 208);
    *(void *)(a2 + 208) = 0;
    *(void *)(a1 + 208) = v22;
    long long v23 = *(_OWORD *)(a2 + 216);
    *(void *)(a1 + 23objc_destroyWeak(this + 2) = *(void *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = v23;
    uint64_t v24 = *(void *)(a2 + 240);
    *(void *)(a2 + 240) = 0;
    *(void *)(a1 + 240) = v24;
    *(unsigned char *)(a1 + 248) = 1;
  }
  int v25 = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 259) = *(_DWORD *)(a2 + 259);
  *(_DWORD *)(a1 + 256) = v25;
  std::__optional_storage_base<WebCore::CertificateInfo,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CertificateInfo,false>>(a1 + 264, (uint64_t *)(a2 + 264));
  return a1;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, void **a2)
{
  *a1 = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    int v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      unsigned int v6 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(16 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 1objc_destroyWeak(this + 2) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      unint64_t v8 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
      long long v9 = v8;
      long long v11 = v10;
      uint64_t v12 = *a2 ? (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)] : 0;
      if ((WTF::StringImpl **)v12 != v8)
      {
        do
        {
          long long v20 = v9;
          uint64_t v13 = *a1;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          unsigned int v15 = *((_DWORD *)*v9 + 4);
          if (v15 >= 0x100) {
            unsigned int v16 = v15 >> 8;
          }
          else {
            unsigned int v16 = WTF::StringImpl::hashSlowCase(*v9);
          }
          int v17 = 0;
          do
          {
            uint64_t v18 = v16 & v14;
            unsigned int v16 = ++v17 + v18;
          }
          while (*(void *)(v13 + 16 * v18));
          WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::String>,WTF::String,WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>((WTF::StringImpl **)(v13 + 16 * v18), (WTF::StringImpl *)v9, &v20);
          while (1)
          {
            v9 += 2;
            if (v9 == v11) {
              break;
            }
            if ((unint64_t)*v9 + 1 > 1) {
              goto LABEL_19;
            }
          }
          long long v9 = v11;
LABEL_19:
          ;
        }
        while (v9 != (WTF::StringImpl **)v12);
      }
    }
  }
  return a1;
}

WTF::StringImpl *WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::String>,WTF::String,WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(WTF::StringImpl **a1, WTF::StringImpl *a2, WTF::StringImpl ***a3)
{
  int v4 = *a3;
  uint64_t v5 = **a3;
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  unsigned int v6 = v4[1];
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v7 = *a1;
  *a1 = v5;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t result = a1[1];
  a1[1] = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::StoredRecordInformation::~StoredRecordInformation(WebKit::StoredRecordInformation *this, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseData::~ResourceResponseData((WebKit::StoredRecordInformation *)((char *)this + 624), a2);
  int v4 = (WTF::StringImpl *)*((void *)this + 76);
  *((void *)this + 76) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 71);
  *((void *)this + 7objc_destroyWeak(this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unsigned int v6 = (const void *)*((void *)this + 69);
  *((void *)this + 69) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::StoredRecordInformation *)((char *)this + 360));
  unint64_t v8 = (WTF::StringImpl *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  long long v9 = (WTF::StringImpl *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  long long v10 = (WTF::StringImpl *)*((void *)this + 22);
  *((void *)this + 2objc_destroyWeak(this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  long long v11 = (WTF::StringImpl *)*((void *)this + 21);
  *((void *)this + 2objc_destroyWeak(this + 1) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }

  WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation(this, v7);
}

void WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation(WebKit::CacheStorageRecordInformation *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 19);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unsigned int v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  unint64_t v8 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__assign_alt[abi:sn180100]<2ul,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  int v4 = result;
  uint64_t v5 = result[2];
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1EE9CBD60[v5])(&v8, result);
LABEL_8:
    uint64_t v7 = *a3;
    *a3 = 0;
    *(void *)int v4 = v7;
    void v4[2] = 2;
    return result;
  }
  unsigned int v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
  }
  return result;
}

uint64_t WebKit::CacheStorageRecord::CacheStorageRecord(uint64_t a1, uint64_t a2, char a3, const String *a4, int *a5, _DWORD **a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18 = WebKit::NetworkCache::Key::Key(a1, a2);
  long long v19 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v18 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v18 + 7objc_destroyWeak(this + 2) = v19;
  long long v20 = *(_DWORD **)(a2 + 104);
  if (v20) {
    *v20 += 2;
  }
  *(void *)(a1 + 104) = v20;
  long long v21 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 11objc_destroyWeak(this + 2) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v21;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(a1 + 152), (void **)(a2 + 152));
  *(unsigned char *)(a1 + 160) = a3;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 168), a4);
  int v22 = *a5;
  *(_DWORD *)(a1 + 37objc_destroyWeak(this + 1) = *(int *)((char *)a5 + 3);
  *(_DWORD *)(a1 + 368) = v22;
  long long v23 = (_DWORD *)*((void *)a5 + 1);
  if (v23) {
    *v23 += 2;
  }
  *(void *)(a1 + 376) = v23;
  long long v24 = *((_OWORD *)a5 + 2);
  *(_OWORD *)(a1 + 384) = *((_OWORD *)a5 + 1);
  *(_OWORD *)(a1 + 400) = v24;
  int v25 = *a6;
  if (*a6) {
    *v25 += 2;
  }
  *(void *)(a1 + 416) = v25;
  *(unsigned char *)(a1 + 424) = a7;
  WebCore::ResourceResponseData::ResourceResponseData(a1 + 432, a8);
  *(void *)(a1 + 71objc_destroyWeak(this + 2) = a9;
  *(unsigned char *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 728) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>>(a1 + 720, a10);
  return a1;
}

uint64_t WebKit::CacheStorageRecord::CacheStorageRecord(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  uint64_t v5 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  a2[2] = 0;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a2[3];
  a2[3] = 0;
  *(void *)(a1 + 24) = v7;
  long long v8 = *((_OWORD *)a2 + 2);
  long long v9 = *((_OWORD *)a2 + 3);
  *(void *)(a1 + 64) = a2[8];
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  long long v10 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 7objc_destroyWeak(this + 2) = v10;
  WTF::URL::URL(a1 + 104, a2 + 13);
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
  uint64_t v11 = a2[19];
  a2[19] = 0;
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = v11;
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  WTF::URL::URL(a1 + 168, a2 + 21);
  WTF::URL::URL(a1 + 208, a2 + 26);
  *(void *)(a1 + 248) = a2[31];
  uint64_t v12 = a2[32];
  a2[32] = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 27objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 256) = v12;
  uint64_t v13 = a2[33];
  a2[33] = 0;
  *(void *)(a1 + 264) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = 0;
  *(_DWORD *)(a1 + 27objc_destroyWeak(this + 2) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = 0;
  *(_DWORD *)(a1 + 276) = v13;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v14 = a2[35];
  a2[35] = 0;
  *(void *)(a1 + 280) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 7objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(a1 + 288) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = 0;
  *(_DWORD *)(a1 + 29objc_destroyWeak(this + 2) = v14;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  uint64_t v15 = a2[37];
  a2[37] = 0;
  *(void *)(a1 + 296) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 76);
  *((_DWORD *)a2 + 76) = 0;
  *(_DWORD *)(a1 + 304) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 77);
  *((_DWORD *)a2 + 77) = 0;
  *(_DWORD *)(a1 + 308) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 78);
  *(unsigned char *)(a1 + 316) = *((unsigned char *)a2 + 316);
  *(_DWORD *)(a1 + 31objc_destroyWeak(this + 2) = v15;
  uint64_t v16 = a2[40];
  a2[40] = 0;
  *(void *)(a1 + 320) = v16;
  uint64_t v17 = a2[41];
  a2[41] = 0;
  *(void *)(a1 + 328) = v17;
  uint64_t v18 = a2[42];
  a2[42] = 0;
  *(void *)(a1 + 336) = v18;
  uint64_t v19 = a2[43];
  *(unsigned char *)(a1 + 35objc_destroyWeak(this + 2) = *((unsigned char *)a2 + 352);
  *(void *)(a1 + 344) = v19;
  uint64_t v20 = a2[45];
  a2[45] = 0;
  *(void *)(a1 + 360) = v20;
  int v21 = *((_DWORD *)a2 + 92);
  *(_DWORD *)(a1 + 37objc_destroyWeak(this + 1) = *(_DWORD *)((char *)a2 + 371);
  *(_DWORD *)(a1 + 368) = v21;
  uint64_t v22 = a2[47];
  a2[47] = 0;
  *(void *)(a1 + 376) = v22;
  long long v23 = *((_OWORD *)a2 + 25);
  *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
  *(_OWORD *)(a1 + 400) = v23;
  uint64_t v24 = a2[52];
  a2[52] = 0;
  *(void *)(a1 + 416) = v24;
  *(unsigned char *)(a1 + 424) = *((unsigned char *)a2 + 424);
  WebCore::ResourceResponseData::ResourceResponseData(a1 + 432, (uint64_t)(a2 + 54));
  *(void *)(a1 + 71objc_destroyWeak(this + 2) = a2[89];
  *(unsigned char *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 728) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>>(a1 + 720, (uint64_t)(a2 + 90));
  return a1;
}

void WebKit::CacheStorageRecord::~CacheStorageRecord(WebKit::CacheStorageRecord *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)this + 182);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1EE9CBD60[v3])(&v9, (char *)this + 720);
  }
  *((_DWORD *)this + 18objc_destroyWeak(this + 2) = -1;
  WebCore::ResourceResponseData::~ResourceResponseData((WebKit::CacheStorageRecord *)((char *)this + 432), a2);
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 52);
  *((void *)this + 5objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (const void *)*((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::CacheStorageRecord *)((char *)this + 168));
  WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation(this, v8);
}

void WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1 + 160 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  *(void *)(v4 + 8) = v6;
  uint64_t v7 = a2[2];
  a2[2] = 0;
  *(void *)(v4 + 16) = v7;
  uint64_t v8 = a2[3];
  a2[3] = 0;
  *(void *)(v4 + 24) = v8;
  long long v9 = *((_OWORD *)a2 + 2);
  long long v10 = *((_OWORD *)a2 + 3);
  *(void *)(v4 + 64) = a2[8];
  *(_OWORD *)(v4 + 3objc_destroyWeak(this + 2) = v9;
  *(_OWORD *)(v4 + 48) = v10;
  long long v11 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(v4 + 7objc_destroyWeak(this + 2) = v11;
  WTF::URL::URL(v4 + 104, a2 + 13);
  *(unsigned char *)(v4 + 144) = *((unsigned char *)a2 + 144);
  *(void *)(v4 + 15objc_destroyWeak(this + 2) = 0;
  uint64_t v12 = a2[19];
  a2[19] = 0;
  *(void *)(v4 + 15objc_destroyWeak(this + 2) = v12;
  ++*(_DWORD *)(a1 + 12);
}

uint64_t *WTF::Deque<WTF::String,0ul>::expandCapacity(uint64_t *result)
{
  unint64_t v1 = *((unsigned int *)result + 6);
  unint64_t v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF) {
    unint64_t v2 = 15;
  }
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = (char *)result[2];
  int v5 = v2 + 1;
  uint64_t v6 = (char *)WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
  *((_DWORD *)v3 + 6) = v5;
  void v3[2] = (uint64_t)v6;
  unint64_t v7 = v3[1];
  if (*v3 <= v7)
  {
    uint64_t result = (uint64_t *)memcpy(&v6[8 * *v3], &v4[8 * *v3], 8 * v7 - 8 * *v3);
    if (!v4) {
      return result;
    }
  }
  else
  {
    memcpy(v6, v4, 8 * v7);
    uint64_t v8 = *v3 - v1 + *((unsigned int *)v3 + 6);
    uint64_t result = (uint64_t *)memcpy((void *)(v3[2] + 8 * v8), &v4[8 * *v3], 8 * v1 - 8 * *v3);
    *uint64_t v3 = v8;
    if (!v4) {
      return result;
    }
  }
  if ((char *)v3[2] == v4)
  {
    void v3[2] = 0;
    *((_DWORD *)v3 + 6) = 0;
  }

  return (uint64_t *)WTF::fastFree((WTF *)v4, v9);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 16;
    do
    {
      if (*(void *)(v4 - 8) != -1)
      {
        int v5 = *(WTF **)v4;
        if (*(void *)v4)
        {
          *(void *)uint64_t v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
          WTF::fastFree(v5, a2);
        }
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::CacheStorageCache **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (WebKit::CacheStorageCache *)-1) {
        std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100](v4, 0);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::CacheStorageCache *std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100](WebKit::CacheStorageCache **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::CacheStorageCache::~CacheStorageCache(result, a2);
    return (WebKit::CacheStorageCache *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WebKit::CacheStorageRecord *std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100](WebKit::CacheStorageRecord **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::CacheStorageRecord::~CacheStorageRecord(result, a2);
    return (WebKit::CacheStorageRecord *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::StringImpl::find(uint64_t result, unsigned int a2, unint64_t a3, double a4, double a5, float a6)
{
  uint64_t v6 = *(void *)(result + 8);
  unint64_t v7 = *(unsigned int *)(result + 4);
  if ((*(unsigned char *)(result + 16) & 4) != 0)
  {
    if (a2 > 0xFF) {
      return -1;
    }
    BOOL v15 = v7 > a3;
    unint64_t v16 = v7 - a3;
    if (!v15) {
      return -1;
    }
    uint64_t v17 = 16;
    if (v16 < 0x10) {
      uint64_t v17 = v16;
    }
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = (unsigned __int8 *)(v6 + a3);
      while (*v19 != a2)
      {
        ++v19;
        if (!--v18) {
          goto LABEL_21;
        }
      }
    }
    else
    {
LABEL_21:
      if (v16 < 0x11) {
        return -1;
      }
      uint64_t v19 = (unsigned __int8 *)memchr((void *)(v6 + a3 + v17), a2, v16 - v17);
      if (!v19) {
        return -1;
      }
    }
    return (uint64_t)&v19[-v6];
  }
  if (v7 <= a3) {
    return -1;
  }
  uint64_t v8 = (int16x8_t *)(v6 + 2 * a3);
  unint64_t v9 = v6 + 2 * v7;
  unint64_t v10 = v9 - (void)v8;
  if ((uint64_t)(v9 - (void)v8) <= -2)
  {
    __break(1u);
    return result;
  }
  if (v10 <= 0x3E)
  {
    while (v8->u16[0] != a2)
    {
      uint64_t v8 = (int16x8_t *)((char *)v8 + 2);
      v10 -= 2;
      if (!v10) {
        return -1;
      }
    }
    goto LABEL_28;
  }
  int16x8_t v11 = vdupq_n_s16(a2);
  if ((unint64_t)&v8->u64[1] + 6 >= v9)
  {
    uint64_t v13 = (int16x8_t *)(v6 + 2 * a3);
LABEL_25:
    if ((unint64_t)v13 < v9)
    {
      uint64_t v8 = (int16x8_t *)(v9 - 16);
      int8x16_t v12 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v9 - 16), v11);
      v11.i16[0] = vmaxvq_u16((uint16x8_t)v12);
      if (v11.i32[0]) {
        goto LABEL_27;
      }
    }
    return -1;
  }
  while (1)
  {
    int8x16_t v12 = (int8x16_t)vceqq_s16(*v8, v11);
    LOWORD(a6) = vmaxvq_u16((uint16x8_t)v12);
    if (a6 != 0.0) {
      break;
    }
    uint64_t v13 = v8 + 1;
    uint64_t v14 = &v8[1].i8[14];
    ++v8;
    if ((unint64_t)v14 >= v9) {
      goto LABEL_25;
    }
  }
LABEL_27:
  uint64_t v8 = (int16x8_t *)((char *)v8
                   + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_1994F66B0, v12)));
LABEL_28:
  if (v8 == (int16x8_t *)v9) {
    return -1;
  }
  else {
    return ((uint64_t)v8->i64 - v6) >> 1;
  }
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::CacheStorageRecord **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::CacheStorageRecord *)-1) {
        std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100](v4, 0);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::BackgroundFetchStoreManager(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9CBDE0;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::BackgroundFetchStoreManager(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9CBDE0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::BackgroundFetchStoreManager(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&)> &&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  return WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)(a1 + 8), a2);
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::initializeFetches(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CBE08;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::initializeFetches(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CBE08;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::initializeFetches(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(void *a1, const WTF::String *a2)
{
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  WTF::FileSystemImpl::listDirectory((uint64_t *)&v33, (WTF::FileSystemImpl *)(a1 + 2), a2);
  if (HIDWORD(v34[0]))
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = v33;
    uint64_t v7 = 8 * HIDWORD(v34[0]);
    do
    {
      if (*v6 && WTF::StringImpl::endsWith())
      {
        WTF::FileSystemImpl::pathByAppendingComponent();
        unint64_t v9 = (WTF *)WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)&v38, v8);
        if ((_BYTE)v3)
        {
          WTF::pageSize(v9);
          WebCore::SharedBuffer::createWithContentsOfFile();
          unint64_t v10 = v37;
          long long v37 = 0;
          uint64_t v35 = v10;
          int16x8_t v11 = *v6;
          *uint64_t v6 = 0;
          uint64_t v36 = v11;
          if (v5 == v40)
          {
            int8x16_t v12 = (void *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, v5 + 1, (unint64_t)&v35);
            unsigned int v5 = HIDWORD(v40);
            uint64_t v4 = v39;
            uint64_t v13 = (void *)(v39 + 16 * HIDWORD(v40));
            uint64_t v14 = *v12;
            void *v12 = 0;
            BOOL v15 = (WTF::StringImpl **)(v12 + 1);
            void *v13 = v14;
            unint64_t v16 = (WTF::StringImpl **)(v13 + 1);
          }
          else
          {
            uint64_t v17 = (unsigned int **)(v4 + 16 * v5);
            uint64_t v35 = 0;
            WTF::StringImpl *v17 = v10;
            unint64_t v16 = (WTF::StringImpl **)(v17 + 1);
            BOOL v15 = &v36;
          }
          uint64_t v18 = *v15;
          WebCore::AdditionalNetworkLoadMetricsForWebInspector *v15 = 0;
          WebCore::AdditionalNetworkLoadMetricsForWebInspector *v16 = v18;
          HIDWORD(v40) = ++v5;
          uint64_t v19 = v36;
          uint64_t v36 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v3);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
          uint64_t v20 = v35;
          uint64_t v35 = 0;
          if (v20) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v20, v3);
          }
          int v21 = v37;
          long long v37 = 0;
          if (v21) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v21, v3);
          }
        }
        uint64_t v22 = v38;
        long long v38 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v3);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
    uint64_t v23 = v39;
    int v24 = v40;
  }
  else
  {
    unsigned int v5 = 0;
    int v24 = 0;
    uint64_t v23 = 0;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v3);
  uint64_t v25 = a1[1];
  uint64_t v26 = a1[3];
  a1[3] = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v27 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v27 = &unk_1EE9CBE30;
  *(void *)(v27 + 8) = v26;
  uint64_t v33 = 0;
  v34[0] = 0;
  *(void *)(v27 + 16) = v23;
  v34[1] = 0;
  *(_DWORD *)(v27 + 24) = v24;
  *(_DWORD *)(v27 + 28) = v5;
  uint64_t v35 = (unsigned int *)v27;
  (*(void (**)(uint64_t, unsigned int **))(*(void *)v25 + 32))(v25, &v35);
  char v29 = v35;
  uint64_t v35 = 0;
  if (v29) {
    (*(void (**)(unsigned int *))(*(void *)v29 + 8))(v29);
  }
  WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v28);
  uint64_t v31 = (uint64_t)v33;
  uint64_t v33 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  return WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v30);
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::initializeFetches(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CBE30;
  WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::initializeFetches(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CBE30;
  WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  uint64_t v4 = *((void *)a1 + 1);
  *((void *)a1 + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::initializeFetches(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 16);
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  uint64_t result = WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 1), v4);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 1objc_destroyWeak(this + 2) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v10 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v5;
    do
    {
      int8x16_t v12 = (WTF::StringImpl **)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          unsigned int v17 = *((_DWORD *)v13 + 4);
          if (v17 >= 0x100) {
            int v18 = v17 >> 8;
          }
          else {
            int v18 = WTF::StringImpl::hashSlowCase(v13);
          }
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v16;
            int v21 = (WTF::StringImpl **)(v15 + 24 * (v18 & v16));
            int v18 = ++v19 + (v18 & v16);
          }
          while (*v21);
          uint64_t v22 = (void *)(v15 + 24 * v20 + 8);
          WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v8);
          int v24 = *v21;
          *int v21 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v23);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          uint64_t v25 = *v12;
          void *v12 = 0;
          *int v21 = v25;
          uint64_t v26 = v4 + 24 * v9;
          *uint64_t v22 = 0;
          *(void *)(v15 + 24 * v20 + 16) = 0;
          uint64_t v27 = *(void *)(v26 + 8);
          v26 += 8;
          *(void *)uint64_t v26 = 0;
          *uint64_t v22 = v27;
          LODWORD(v25) = *(_DWORD *)(v26 + 8);
          *(_DWORD *)(v26 + 8) = 0;
          uint64_t v28 = v15 + 24 * v20;
          *(_DWORD *)(v28 + 16) = v25;
          LODWORD(v25) = *(_DWORD *)(v26 + 12);
          *(_DWORD *)(v26 + 1objc_destroyWeak(this + 2) = 0;
          *(_DWORD *)(v28 + 20) = v25;
          WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26, v23);
          char v29 = *v12;
          void *v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v8);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          if (v12 == a3) {
            uint64_t v10 = v15 + 24 * v20;
          }
        }
        else
        {
          WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v9 + 8, v8);
          uint64_t v14 = *v12;
          void *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v8);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::clearFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CBE58;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::clearFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CBE58;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::clearFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1, const WTF::String *a2)
{
  WTF::FileSystemImpl::listDirectory((uint64_t *)&v12, (WTF::FileSystemImpl *)(a1 + 2), a2);
  if (v13)
  {
    uint64_t v4 = v12;
    uint64_t v5 = 8 * v13;
    while (1)
    {
      uint64_t v6 = a1[3];
      if (!v6) {
        break;
      }
      if (*v4) {
        goto LABEL_5;
      }
      if (!*(_DWORD *)(v6 + 4))
      {
LABEL_6:
        WTF::FileSystemImpl::pathByAppendingComponent();
        WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v11, v7);
        uint64_t v8 = v11;
        uint64_t v11 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v3);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
LABEL_10:
      ++v4;
      v5 -= 8;
      if (!v5) {
        goto LABEL_16;
      }
    }
    if (!*v4) {
      goto LABEL_6;
    }
LABEL_5:
    if (WTF::StringImpl::startsWith()) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }
LABEL_16:
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v3);
  uint64_t v9 = a1[1];
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v12, a1 + 4);
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, &v12);
  uint64_t result = (uint64_t)v12;
  int8x16_t v12 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::clearAllFetches(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CBE80;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::clearAllFetches(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CBE80;
  uint64_t v3 = *((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  uint64_t v5 = *((void *)a1 + 1);
  *((void *)a1 + objc_destroyWeak(this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }

  return WTF::fastFree(a1, v4);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::clearAllFetches(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(uint64_t a1, const WTF::String *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 28);
  if (!v3) {
    goto LABEL_21;
  }
  uint64_t v4 = *(WTF::FileSystemImpl **)(a1 + 16);
  uint64_t v5 = (WTF::FileSystemImpl *)((char *)v4 + 8 * v3);
  do
  {
    WTF::FileSystemImpl::deleteFile(v4, a2);
    unint64_t v6 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v7 = *(WTF::StringImpl **)v4;
      if (*(void *)v4) {
        *(_DWORD *)v7 += 2;
      }
      WTF::makeString<WTF::String,char,unsigned long>((uint64_t)&v13, (uint64_t)v7, v6);
      uint64_t v9 = v14;
      uint64_t v14 = v13;
      if (!v9) {
        goto LABEL_9;
      }
      if (*(_DWORD *)v9 != 2)
      {
        *(_DWORD *)v9 -= 2;
LABEL_9:
        if (!v7) {
          goto LABEL_15;
        }
        goto LABEL_12;
      }
      WTF::StringImpl::destroy(v9, v8);
      if (!v7) {
        goto LABEL_15;
      }
LABEL_12:
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v8);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
LABEL_15:
      ++v6;
    }
    while ((WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v14, v8) & 1) != 0);
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, a2);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v4 = (WTF::FileSystemImpl *)((char *)v4 + 8);
  }
  while (v4 != v5);
LABEL_21:
  uint64_t v11 = *(void *)(a1 + 8);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v14, (uint64_t *)(a1 + 32));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v11 + 32))(v11, &v14);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetch(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CBEA8;
  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 56);
  if (v4)
  {
    *(void *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetch(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBEA8;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetch(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,BOOL>::call(void *a1, char a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[1];
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    if (a2)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5 && *(_DWORD *)(v5 + 4))
      {
        uint64_t v7 = a1[5];
        uint64_t v6 = a1[6];
        uint64_t v8 = a1[2];
        *(void *)&long long v41 = 0;
        if (v8)
        {
          unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
          int v10 = *(_DWORD *)(v8 + 4);
          *(void *)&long long v41 = *(void *)(v8 + 8);
          int v11 = (v9 >> 2) & 1;
        }
        else
        {
          int v10 = 0;
          LOBYTE(v1objc_destroyWeak(this + 1) = 1;
        }
        DWORD2(v4objc_destroyWeak(this + 1) = v10;
        BYTE12(v4objc_destroyWeak(this + 1) = v11;
        WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v34, &v41, 1uLL);
        WTF::FileSystemImpl::pathByAppendingComponents();
        unsigned int v13 = v34;
        if (v34)
        {
          int v34 = 0;
          LODWORD(v35) = 0;
          WTF::fastFree(v13, v12);
        }
        uint64_t v16 = v4 + 16;
        uint64_t v15 = *(WTF **)(v4 + 16);
        uint64_t v14 = *(void *)(v16 + 8);
        (*(void (**)(WTF *))(*(void *)v15 + 48))(v15);
        int v34 = v15;
        WTF::String::isolatedCopy();
        *(void *)&long long v36 = v7;
        BYTE8(v36) = v6;
        unsigned int v17 = (WTF *)a1[7];
        a1[7] = 0;
        long long v37 = v17;
        uint64_t v18 = a1[8];
        a1[8] = 0;
        uint64_t v38 = v18;
        uint64_t v19 = a1[9];
        a1[9] = 0;
        uint64_t v39 = v19;
        uint64_t v20 = WTF::fastMalloc((WTF *)0x40);
        *(void *)uint64_t v20 = &unk_1EE9CBED0;
        *(void *)(v20 + 8) = v34;
        int v21 = v35;
        int v34 = 0;
        uint64_t v35 = 0;
        *(void *)(v20 + 16) = v21;
        *(_OWORD *)(v20 + 24) = v36;
        uint64_t v22 = v37;
        long long v37 = 0;
        *(void *)(v20 + 40) = v22;
        uint64_t v23 = v38;
        uint64_t v38 = 0;
        *(void *)(v20 + 48) = v23;
        uint64_t v24 = v39;
        uint64_t v39 = 0;
        *(void *)(v20 + 56) = v24;
        *(void *)&long long v41 = v20;
        (*(void (**)(uint64_t, long long *))(*(void *)v14 + 32))(v14, &v41);
        uint64_t v26 = v41;
        *(void *)&long long v41 = 0;
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
        }
        uint64_t v27 = v39;
        uint64_t v39 = 0;
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        }
        uint64_t v28 = v37;
        if (v37)
        {
          long long v37 = 0;
          LODWORD(v38) = 0;
          WTF::fastFree(v28, v25);
        }
        char v29 = v35;
        uint64_t v35 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v25);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
        }
        uint64_t v33 = v34;
        int v34 = 0;
        if (v33) {
          (*(void (**)(WTF *))(*(void *)v33 + 56))(v33);
        }
        uint64_t result = v40;
        uint64_t v40 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v25);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        return result;
      }
      uint64_t v30 = a1[9];
      a1[9] = 0;
      (*(void (**)(uint64_t, void))(*(void *)v30 + 16))(v30, 0);
    }
    else
    {
      uint64_t v30 = a1[9];
      a1[9] = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, 1);
    }
  }
  else
  {
    uint64_t v30 = a1[9];
    a1[9] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, 2);
  }
  uint64_t v31 = *(uint64_t (**)(uint64_t))(*(void *)v30 + 8);

  return (WTF::StringImpl *)v31(v30);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchAfterQuotaCheck(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9CBED0;
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 40);
  if (v4)
  {
    *(void *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchAfterQuotaCheck(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBED0;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 5) = 0;
    *((_DWORD *)this + 1objc_destroyWeak(this + 2) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchAfterQuotaCheck(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void>::call(uint64_t a1)
{
  unint64_t v2 = (WTF::StringImpl **)(a1 + 16);
  if (*(_DWORD *)(a1 + 52) != (uint64_t)(int)WTF::FileSystemImpl::overwriteEntireFile())
  {
    uint64_t v7 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13[0]) = 0;
      char v8 = 2;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "BackgroundFetchStoreManager::storeFetch failed writing", (uint8_t *)v13, 2u);
    }
    else
    {
      char v8 = 2;
    }
    goto LABEL_17;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *v2;
    if (v3) {
      *(_DWORD *)v3 += 2;
    }
    WTF::makeString<WTF::String,char,unsigned long>((uint64_t)v13, (uint64_t)v3, *(void *)(a1 + 24));
    WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)v13, v4);
    uint64_t v6 = v13[0];
    v13[0] = 0;
    if (!v6)
    {
LABEL_8:
      if (!v3) {
        goto LABEL_16;
      }
LABEL_13:
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v5);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)v6 != 2)
    {
      *(_DWORD *)v6 -= 2;
      goto LABEL_8;
    }
    WTF::StringImpl::destroy(v6, v5);
    if (v3) {
      goto LABEL_13;
    }
  }
LABEL_16:
  char v8 = 0;
LABEL_17:
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v11 = &unk_1EE9CBEF8;
  *(unsigned char *)(v11 + 8) = v8;
  *(void *)(v11 + 16) = v10;
  v13[0] = (WTF::StringImpl *)v11;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v9 + 32))(v9, v13);
  uint64_t result = v13[0];
  v13[0] = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchAfterQuotaCheck(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CBEF8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchAfterQuotaCheck(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBEF8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchAfterQuotaCheck(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

unint64_t WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      int v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      void v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        uint64_t v8 = 8 * v5;
        unint64_t v9 = (unsigned int **)v4;
        do
        {
          unint64_t v10 = *v9;
          WTF::StringImpl *v9 = 0;
          *(void *)unint64_t v7 = v10;
          uint64_t result = *v9;
          WTF::StringImpl *v9 = 0;
          if (result) {
            uint64_t result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v6);
          }
          v7 += 2;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          void v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CBF20;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBF20;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_1,void>::call(uint64_t a1)
{
  int v13 = WTF::FileSystemImpl::openFile();
  if (v13 == -1
    || (WebCore::SharedBuffer::data(*(WebCore::SharedBuffer **)(a1 + 24)),
        uint64_t v2 = WTF::FileSystemImpl::writeToFile(),
        uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 48),
        WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v13, v4),
        v2 != v3))
  {
    uint64_t v6 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      char v5 = 2;
      _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "BackgroundFetchStoreManager::storeFetchResponseBodyChunk failed writing", buf, 2u);
    }
    else
    {
      char v5 = 2;
    }
  }
  else
  {
    char v5 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v9 = &unk_1EE9CBF48;
  *(unsigned char *)(v9 + 8) = v5;
  *(void *)(v9 + 16) = v8;
  uint64_t v11 = v9;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 32))(v7, &v11);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9CBF48;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBF48;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::retrieveResponseBody(WTF::String const&,unsigned long,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CBF70;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::retrieveResponseBody(WTF::String const&,unsigned long,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9CBF70;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::retrieveResponseBody(WTF::String const&,unsigned long,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0,void>::call(void *a1, const WTF::String *a2)
{
  uint64_t v3 = (WTF *)WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)(a1 + 2), a2);
  if (v4)
  {
    WTF::pageSize(v3);
    WebCore::SharedBuffer::createWithContentsOfFile();
    uint64_t v5 = v10;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[3];
  a1[3] = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v8 = &unk_1EE9CBF98;
  v8[1] = v5;
  void v8[2] = v7;
  unint64_t v10 = v8;
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, &v10);
  uint64_t result = (uint64_t)v10;
  unint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::retrieveResponseBody(WTF::String const&,unsigned long,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CBF98;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::retrieveResponseBody(WTF::String const&,unsigned long,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBF98;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::retrieveResponseBody(WTF::String const&,unsigned long,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::getSize(WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9CBFC0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::getSize(WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9CBFC0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::getSize(WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 3);
  if (v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *a2;
    uint64_t v6 = 160 * v2;
    uint64_t v7 = (uint64_t *)(v5 + 96);
    do
    {
      uint64_t v8 = *v7;
      v7 += 20;
      v4 += v8;
      v6 -= 160;
    }
    while (v6);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v4);
  unint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);

  return v10(v9);
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      void v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        uint64_t v8 = 8 * v5;
        unint64_t v9 = (unsigned int **)v4;
        do
        {
          unint64_t v10 = *v9;
          WTF::StringImpl *v9 = 0;
          *(void *)unint64_t v7 = v10;
          uint64_t result = *v9;
          WTF::StringImpl *v9 = 0;
          if (result) {
            uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
          }
          v7 += 2;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          void v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::open(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)> &&)::$_0,void,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9CBFE8;
  unint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::open(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)> &&)::$_0,void,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9CBFE8;
  unint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::open(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)> &&)::$_0,void,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2 || !*(void *)(v2 + 8)) {
    return;
  }
  uint64_t v50 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(unsigned int *)(a2 + 12);
  uint64_t v6 = (double *)(*(void *)a2 + 160 * v5);
  unint64_t v7 = 126 - 2 * __clz(v5);
  if (v5) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_Lb0EEEvT1_SZ_SU_NS_15iterator_traitsISZ_E15difference_typeEb(v4, v6, v8, 1);
  unsigned int v10 = *(_DWORD *)(a2 + 12);
  if (!v10) {
    goto LABEL_49;
  }
  unint64_t v11 = *(void *)a2;
  unint64_t v51 = v11 + 160 * v10;
  uint64_t v52 = (uint64_t *)(v50 + 72);
  do
  {
    if ((*(unsigned char *)(*(void *)(v11 + 104) + 16) & 0x10) != 0)
    {
      __break(0xC471u);
      return;
    }
    *(void *)(v11 + 80) = atomic_fetch_add(&WebKit::nextRecordIdentifier(void)::currentRecordIdentifier, 1uLL) + 1;
    WebKit::computeKeyURL((WebKit *)&v56, (const WTF::URL *)(v11 + 104));
    uint64_t v14 = *v52;
    if (*v52
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v52, 0), (uint64_t v14 = *v52) != 0))
    {
      int v15 = *(_DWORD *)(v14 - 8);
    }
    else
    {
      int v15 = 0;
    }
    uint64_t v16 = v56;
    unsigned int v17 = *((_DWORD *)v56 + 4);
    if (v17 >= 0x100) {
      unsigned int v18 = v17 >> 8;
    }
    else {
      unsigned int v18 = WTF::StringImpl::hashSlowCase(v56);
    }
    uint64_t v19 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v21 = v18 & v15;
      uint64_t v22 = v14 + 24 * (v18 & v15);
      uint64_t v23 = *(WTF **)v22;
      if (*(void *)v22 == -1)
      {
        uint64_t v19 = (void *)(v14 + 24 * v21);
        goto LABEL_21;
      }
      if (!v23) {
        break;
      }
      if (WTF::equal(v23, v16, v13)) {
        goto LABEL_38;
      }
LABEL_21:
      unsigned int v18 = i + v21;
    }
    if (v19)
    {
      *uint64_t v19 = 0;
      v19[1] = 0;
      void v19[2] = 0;
      --*(_DWORD *)(*v52 - 16);
      uint64_t v22 = (uint64_t)v19;
    }
    uint64_t v56 = 0;
    uint64_t v24 = *(WTF::StringImpl **)v22;
    *(void *)uint64_t v22 = v16;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v12);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    long long v53 = 0uLL;
    WTF::GenericHashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v22 + 8, (WTF::StringImpl *)&v53);
    WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v25);
    uint64_t v26 = *v52;
    if (*v52) {
      int v27 = *(_DWORD *)(v26 - 12) + 1;
    }
    else {
      int v27 = 1;
    }
    *(_DWORD *)(v26 - 1objc_destroyWeak(this + 2) = v27;
    uint64_t v28 = *v52;
    if (*v52) {
      int v29 = *(_DWORD *)(v28 - 12);
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
    unint64_t v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 <= 2 * v30) {
LABEL_37:
      }
        uint64_t v22 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v52, (WTF::StringImpl **)v22);
    }
    else if (3 * v31 <= 4 * v30)
    {
      goto LABEL_37;
    }
LABEL_38:
    unsigned int v32 = *(_DWORD *)(v22 + 20);
    if (v32 == *(_DWORD *)(v22 + 16))
    {
      WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation>(v22 + 8, v11);
    }
    else
    {
      uint64_t v33 = *(void *)(v22 + 8) + 160 * v32;
      uint64_t v34 = *(void *)v11;
      *(void *)unint64_t v11 = 0;
      *(void *)uint64_t v33 = v34;
      uint64_t v35 = *(void *)(v11 + 8);
      *(void *)(v11 + 8) = 0;
      *(void *)(v33 + 8) = v35;
      uint64_t v36 = *(void *)(v11 + 16);
      *(void *)(v11 + 16) = 0;
      *(void *)(v33 + 16) = v36;
      uint64_t v37 = *(void *)(v11 + 24);
      *(void *)(v11 + 24) = 0;
      *(void *)(v33 + 24) = v37;
      long long v38 = *(_OWORD *)(v11 + 32);
      long long v39 = *(_OWORD *)(v11 + 48);
      *(void *)(v33 + 64) = *(void *)(v11 + 64);
      *(_OWORD *)(v33 + 3objc_destroyWeak(this + 2) = v38;
      *(_OWORD *)(v33 + 48) = v39;
      long long v40 = *(_OWORD *)(v11 + 72);
      *(_OWORD *)(v33 + 88) = *(_OWORD *)(v11 + 88);
      *(_OWORD *)(v33 + 7objc_destroyWeak(this + 2) = v40;
      WTF::URL::URL(v33 + 104, (uint64_t *)(v11 + 104));
      *(unsigned char *)(v33 + 144) = *(unsigned char *)(v11 + 144);
      *(void *)(v33 + 15objc_destroyWeak(this + 2) = 0;
      uint64_t v41 = *(void *)(v11 + 152);
      *(void *)(v11 + 15objc_destroyWeak(this + 2) = 0;
      *(void *)(v33 + 15objc_destroyWeak(this + 2) = v41;
      ++*(_DWORD *)(v22 + 20);
    }
    if (v56)
    {
      if (*(_DWORD *)v56 == 2) {
        WTF::StringImpl::destroy(v56, v9);
      }
      else {
        *(_DWORD *)v56 -= 2;
      }
    }
    v11 += 160;
  }
  while (v11 != v51);
LABEL_49:
  *(unsigned char *)(v50 + 3objc_destroyWeak(this + 2) = 1;
  uint64_t v42 = *(unsigned int *)(v50 + 52);
  if (v42)
  {
    long long v43 = *(uint64_t **)(v50 + 40);
    uint64_t v44 = 8 * v42;
    do
    {
      long long v53 = *(_OWORD *)(v50 + 8);
      char v54 = 0;
      int v55 = 0;
      uint64_t v45 = *v43;
      *v43++ = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)v45 + 16))(v45, &v53);
      (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
      v44 -= 8;
    }
    while (v44);
  }
  if (*(_DWORD *)(v50 + 48))
  {
    uint64_t v46 = *(unsigned int *)(v50 + 52);
    unsigned int v47 = *(WTF **)(v50 + 40);
    if (v46)
    {
      uint64_t v48 = 8 * v46;
      do
      {
        uint64_t v49 = *(void *)v47;
        *(void *)unsigned int v47 = 0;
        if (v49) {
          (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
        }
        unsigned int v47 = (WTF *)((char *)v47 + 8);
        v48 -= 8;
      }
      while (v48);
      *(_DWORD *)(v50 + 5objc_destroyWeak(this + 2) = 0;
      unsigned int v47 = *(WTF **)(v50 + 40);
    }
    if (v47)
    {
      *(void *)(v50 + 40) = 0;
      *(_DWORD *)(v50 + 48) = 0;
      WTF::fastFree(v47, v9);
    }
  }
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_Lb0EEEvT1_SZ_SU_NS_15iterator_traitsISZ_E15difference_typeEb(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  uint64_t v213 = *MEMORY[0x1E4F143B8];
LABEL_2:
  uint64_t v194 = (uint64_t)(a2 - 20);
  unint64_t v9 = (double *)a1;
  while (1)
  {
    a1 = (uint64_t)v9;
    uint64_t v10 = (char *)a2 - (char *)v9;
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v9) >> 5);
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*(a2 - 11) >= *(double *)(a1 + 72)) {
            return;
          }
          uint64_t v65 = a1;
          uint64_t v66 = (uint64_t)(a2 - 20);
          break;
        case 3uLL:
          _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(a1, a1 + 160, v194);
          return;
        case 4uLL:
          _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEvT1_SZ_SZ_SZ_SU_(a1, a1 + 160, a1 + 320, v194);
          return;
        case 5uLL:
          _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEvT1_SZ_SZ_SZ_SU_(a1, a1 + 160, a1 + 320, a1 + 480);
          if (*(a2 - 11) >= *(double *)(a1 + 552)) {
            return;
          }
          std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1 + 480, v194);
          if (*(double *)(a1 + 552) >= *(double *)(a1 + 392)) {
            return;
          }
          std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1 + 320, a1 + 480);
          if (*(double *)(a1 + 392) >= *(double *)(a1 + 232)) {
            return;
          }
          std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1 + 160, a1 + 320);
          if (*(double *)(a1 + 232) >= *(double *)(a1 + 72)) {
            return;
          }
          uint64_t v65 = a1;
          uint64_t v66 = a1 + 160;
          break;
        default:
          JUMPOUT(0);
      }
      std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(v65, v66);
      return;
    }
    if (v10 <= 3839) {
      break;
    }
    if (!a3)
    {
      if ((double *)a1 != a2)
      {
        int64_t v196 = (v11 - 2) >> 1;
        int64_t v89 = v196;
        do
        {
          int64_t v90 = v89;
          if (v196 >= v89)
          {
            uint64_t v91 = (2 * v89) | 1;
            uint64_t v92 = a1 + 160 * v91;
            if (2 * v89 + 2 < (uint64_t)v11 && *(double *)(a1 + 160 * v91 + 72) < *(double *)(v92 + 232))
            {
              v92 += 160;
              uint64_t v91 = 2 * v89 + 2;
            }
            uint64_t v93 = a1 + 160 * v89;
            double v95 = *(double *)(v93 + 72);
            long long v94 = (long long *)(v93 + 72);
            if (*(double *)(v92 + 72) >= v95)
            {
              uint64_t v96 = a1 + 160 * v90;
              uint64_t v97 = *(void *)v96;
              *(void *)uint64_t v96 = 0;
              *(void *)v204 = v97;
              uint64_t v98 = *(void *)(v96 + 8);
              *(void *)(v96 + 8) = 0;
              *(void *)&v204[8] = v98;
              uint64_t v99 = *(void *)(v96 + 16);
              *(void *)(v96 + 16) = 0;
              *(void *)&v204[16] = v99;
              uint64_t v100 = *(void *)(v96 + 24);
              *(void *)(v96 + 24) = 0;
              *(void *)&v204[24] = v100;
              long long v101 = *(_OWORD *)(v96 + 32);
              long long v102 = *(_OWORD *)(v96 + 48);
              uint64_t v207 = *(void *)(v96 + 64);
              long long v205 = v101;
              long long v206 = v102;
              long long v103 = v94[1];
              long long v208 = *v94;
              long long v209 = v103;
              WTF::URL::URL((uint64_t)v210, (uint64_t *)(v96 + 104));
              char v211 = *(unsigned char *)(v96 + 144);
              uint64_t v104 = *(WTF::StringImpl ***)(v96 + 152);
              *(void *)(v96 + 15objc_destroyWeak(this + 2) = 0;
              v212 = v104;
              do
              {
                uint64_t v105 = v92;
                WebKit::NetworkCache::Key::operator=(v96, v92);
                long long v106 = *(_OWORD *)(v92 + 88);
                *(_OWORD *)(v96 + 7objc_destroyWeak(this + 2) = *(_OWORD *)(v92 + 72);
                *(_OWORD *)(v96 + 88) = v106;
                uint64_t v107 = v92 + 104;
                WTF::URL::operator=(v96 + 104, v92 + 104);
                *(unsigned char *)(v96 + 144) = *(unsigned char *)(v92 + 144);
                uint64_t v109 = *(void *)(v92 + 152);
                *(void *)(v92 + 15objc_destroyWeak(this + 2) = 0;
                char v110 = *(WTF::StringImpl ***)(v96 + 152);
                *(void *)(v96 + 15objc_destroyWeak(this + 2) = v109;
                if (v110) {
                  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v110, v108);
                }
                if (v196 < v91) {
                  break;
                }
                uint64_t v111 = (2 * v91) | 1;
                uint64_t v92 = a1 + 160 * v111;
                if (2 * v91 + 2 < (uint64_t)v11 && *(double *)(a1 + 160 * v111 + 72) < *(double *)(v92 + 232))
                {
                  v92 += 160;
                  uint64_t v111 = 2 * v91 + 2;
                }
                uint64_t v96 = v105;
                uint64_t v91 = v111;
              }
              while (*(double *)(v92 + 72) >= *(double *)&v208);
              WebKit::NetworkCache::Key::operator=(v105, (uint64_t)v204);
              long long v112 = v209;
              *(_OWORD *)(v105 + 7objc_destroyWeak(this + 2) = v208;
              *(_OWORD *)(v105 + 88) = v112;
              WTF::URL::operator=(v107, (uint64_t)v210);
              *(unsigned char *)(v105 + 144) = v211;
              char v114 = v212;
              v212 = 0;
              CFTypeRef v115 = *(WTF::StringImpl ***)(v105 + 152);
              *(void *)(v105 + 15objc_destroyWeak(this + 2) = v114;
              if (v115) {
                WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v115, v113);
              }
              WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v204, v113);
            }
          }
          int64_t v89 = v90 - 1;
        }
        while (v90);
        int64_t v116 = v10 / 0xA0uLL;
        do
        {
          unsigned int v117 = a2;
          long long v118 = *(_OWORD *)a1;
          long long v119 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = 0u;
          *(_OWORD *)(a1 + 16) = 0u;
          v197[0] = v118;
          v197[1] = v119;
          long long v120 = *(_OWORD *)(a1 + 32);
          long long v121 = *(_OWORD *)(a1 + 48);
          uint64_t v198 = *(void *)(a1 + 64);
          v197[2] = v120;
          v197[3] = v121;
          long long v122 = *(_OWORD *)(a1 + 88);
          long long v199 = *(_OWORD *)(a1 + 72);
          long long v200 = v122;
          WTF::URL::URL((uint64_t)v201, (uint64_t *)(a1 + 104));
          uint64_t v123 = 0;
          char v202 = *(unsigned char *)(a1 + 144);
          uint64_t v124 = *(void *)(a1 + 152);
          *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
          uint64_t v203 = v124;
          uint64_t v125 = a1;
          do
          {
            uint64_t v126 = v123 + 1;
            uint64_t v127 = v125 + 160 * (v123 + 1);
            uint64_t v128 = 2 * v123;
            uint64_t v123 = (2 * v123) | 1;
            int64_t v129 = v128 + 2;
            if (v129 < v116 && *(double *)(v125 + 160 * v126 + 72) < *(double *)(v127 + 232))
            {
              v127 += 160;
              uint64_t v123 = v129;
            }
            WebKit::NetworkCache::Key::operator=(v125, v127);
            long long v130 = *(_OWORD *)(v127 + 88);
            *(_OWORD *)(v125 + 7objc_destroyWeak(this + 2) = *(_OWORD *)(v127 + 72);
            *(_OWORD *)(v125 + 88) = v130;
            WTF::URL::operator=(v125 + 104, v127 + 104);
            *(unsigned char *)(v125 + 144) = *(unsigned char *)(v127 + 144);
            uint64_t v132 = *(void *)(v127 + 152);
            *(void *)(v127 + 15objc_destroyWeak(this + 2) = 0;
            uint64_t v133 = *(WTF::StringImpl ***)(v125 + 152);
            *(void *)(v125 + 15objc_destroyWeak(this + 2) = v132;
            if (v133) {
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v133, v131);
            }
            uint64_t v125 = v127;
          }
          while (v123 <= (uint64_t)((unint64_t)(v116 - 2) >> 1));
          uint64_t v134 = (double *)(v127 + 72);
          a2 = v117 - 20;
          if ((double *)v127 == v117 - 20)
          {
            WebKit::NetworkCache::Key::operator=(v127, (uint64_t)v197);
            long long v163 = v200;
            *(_OWORD *)uint64_t v134 = v199;
            *(_OWORD *)(v127 + 88) = v163;
            WTF::URL::operator=(v127 + 104, (uint64_t)v201);
            *(unsigned char *)(v127 + 144) = v202;
            uint64_t v164 = v203;
            uint64_t v203 = 0;
            unint64_t v165 = *(WTF::StringImpl ***)(v127 + 152);
            *(void *)(v127 + 15objc_destroyWeak(this + 2) = v164;
            if (v165) {
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v165, v140);
            }
          }
          else
          {
            WebKit::NetworkCache::Key::operator=(v127, (uint64_t)(v117 - 20));
            long long v135 = *(_OWORD *)(v117 - 9);
            *(_OWORD *)uint64_t v134 = *(_OWORD *)(v117 - 11);
            *(_OWORD *)(v127 + 88) = v135;
            WTF::URL::operator=(v127 + 104, (uint64_t)(v117 - 7));
            *(unsigned char *)(v127 + 144) = *((unsigned char *)v117 - 16);
            uint64_t v137 = *((void *)v117 - 1);
            *(v117 - objc_destroyWeak(this + 1) = 0.0;
            int v138 = *(WTF::StringImpl ***)(v127 + 152);
            *(void *)(v127 + 15objc_destroyWeak(this + 2) = v137;
            if (v138) {
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v138, v136);
            }
            WebKit::NetworkCache::Key::operator=((uint64_t)(v117 - 20), (uint64_t)v197);
            long long v139 = v200;
            *(_OWORD *)(v117 - 1objc_destroyWeak(this + 1) = v199;
            *(_OWORD *)(v117 - 9) = v139;
            WTF::URL::operator=((uint64_t)(v117 - 7), (uint64_t)v201);
            *((unsigned char *)v117 - 16) = v202;
            uint64_t v141 = v203;
            uint64_t v203 = 0;
            uint64_t v142 = (WTF::StringImpl **)*((void *)v117 - 1);
            *((void *)v117 - objc_destroyWeak(this + 1) = v141;
            if (v142) {
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v142, v140);
            }
            uint64_t v143 = v127 + 160 - a1;
            if (v143 >= 161)
            {
              unint64_t v144 = (v143 / 0xA0uLL - 2) >> 1;
              if (*(double *)(a1 + 160 * v144 + 72) < *v134)
              {
                uint64_t v145 = *(void *)v127;
                *(void *)uint64_t v127 = 0;
                *(void *)v204 = v145;
                uint64_t v146 = *(void *)(v127 + 8);
                *(void *)(v127 + 8) = 0;
                *(void *)&v204[8] = v146;
                uint64_t v147 = *(void *)(v127 + 16);
                *(void *)(v127 + 16) = 0;
                *(void *)&v204[16] = v147;
                uint64_t v148 = *(void *)(v127 + 24);
                *(void *)(v127 + 24) = 0;
                *(void *)&v204[24] = v148;
                long long v149 = *(_OWORD *)(v127 + 32);
                long long v150 = *(_OWORD *)(v127 + 48);
                uint64_t v207 = *(void *)(v127 + 64);
                long long v205 = v149;
                long long v206 = v150;
                long long v151 = *(_OWORD *)(v127 + 88);
                long long v208 = *(_OWORD *)v134;
                long long v209 = v151;
                WTF::URL::URL((uint64_t)v210, (uint64_t *)(v127 + 104));
                char v211 = *(unsigned char *)(v127 + 144);
                uint64_t v152 = *(WTF::StringImpl ***)(v127 + 152);
                *(void *)(v127 + 15objc_destroyWeak(this + 2) = 0;
                v212 = v152;
                while (1)
                {
                  uint64_t v153 = v127;
                  uint64_t v127 = a1 + 160 * v144;
                  WebKit::NetworkCache::Key::operator=(v153, v127);
                  long long v154 = *(_OWORD *)(v127 + 88);
                  *(_OWORD *)(v153 + 7objc_destroyWeak(this + 2) = *(_OWORD *)(v127 + 72);
                  *(_OWORD *)(v153 + 88) = v154;
                  WTF::URL::operator=(v153 + 104, v127 + 104);
                  *(unsigned char *)(v153 + 144) = *(unsigned char *)(v127 + 144);
                  long long v157 = (WTF::StringImpl ***)(v127 + 152);
                  uint64_t v156 = *(void *)(v127 + 152);
                  *(void *)(v127 + 15objc_destroyWeak(this + 2) = 0;
                  long long v158 = *(WTF::StringImpl ***)(v153 + 152);
                  *(void *)(v153 + 15objc_destroyWeak(this + 2) = v156;
                  if (v158)
                  {
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v158, v155);
                    if (!v144)
                    {
LABEL_136:
                      WebKit::NetworkCache::Key::operator=(v127, (uint64_t)v204);
                      long long v159 = v209;
                      *(_OWORD *)(v127 + 7objc_destroyWeak(this + 2) = v208;
                      *(_OWORD *)(v127 + 88) = v159;
                      WTF::URL::operator=(v127 + 104, (uint64_t)v210);
                      *(unsigned char *)(v127 + 144) = v211;
                      long long v161 = v212;
                      v212 = 0;
                      long long v162 = *v157;
                      *long long v157 = v161;
                      if (v162) {
                        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v162, v160);
                      }
                      WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v204, v160);
                      break;
                    }
                  }
                  else if (!v144)
                  {
                    goto LABEL_136;
                  }
                  unint64_t v144 = (v144 - 1) >> 1;
                  if (*(double *)(a1 + 160 * v144 + 72) >= *(double *)&v208) {
                    goto LABEL_136;
                  }
                }
              }
            }
          }
          WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v197, v140);
        }
        while (v116-- > 2);
      }
      return;
    }
    uint64_t v12 = a1 + 160 * (v11 >> 1);
    if ((unint64_t)v10 > 0x5000)
    {
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(a1, a1 + 160 * (v11 >> 1), v194);
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(a1 + 160, a1 + 160 * (v11 >> 1) - 160, (uint64_t)(a2 - 40));
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(a1 + 320, a1 + 160 + 160 * (v11 >> 1), (uint64_t)(a2 - 60));
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(a1 + 160 * (v11 >> 1) - 160, v12, a1 + 160 + 160 * (v11 >> 1));
      std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1, v12);
    }
    else
    {
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(a1 + 160 * (v11 >> 1), a1, v194);
    }
    --a3;
    if ((a4 & 1) != 0 || *(double *)(a1 - 88) < *(double *)(a1 + 72))
    {
      long long v13 = *(_OWORD *)a1;
      long long v14 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)v204 = v13;
      *(_OWORD *)&v204[16] = v14;
      long long v15 = *(_OWORD *)(a1 + 32);
      long long v16 = *(_OWORD *)(a1 + 48);
      uint64_t v207 = *(void *)(a1 + 64);
      long long v205 = v15;
      long long v206 = v16;
      long long v17 = *(_OWORD *)(a1 + 88);
      long long v208 = *(_OWORD *)(a1 + 72);
      long long v209 = v17;
      WTF::URL::URL((uint64_t)v210, (uint64_t *)(a1 + 104));
      uint64_t v18 = 0;
      char v211 = *(unsigned char *)(a1 + 144);
      uint64_t v19 = *(WTF::StringImpl ***)(a1 + 152);
      *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
      v212 = v19;
      do
      {
        if ((double *)(a1 + v18 + 160) == a2) {
          goto LABEL_158;
        }
        double v20 = *(double *)(a1 + v18 + 232);
        v18 += 160;
      }
      while (v20 < *(double *)&v208);
      unsigned int v21 = (double *)(a1 + v18);
      uint64_t v22 = a2;
      if (v18 != 160)
      {
        while (v22 != (double *)a1)
        {
          unint64_t v23 = (unint64_t)(v22 - 20);
          double v24 = *(v22 - 11);
          v22 -= 20;
          if (v24 < *(double *)&v208) {
            goto LABEL_24;
          }
        }
LABEL_158:
        __break(1u);
      }
      uint64_t v25 = a2;
      while (v21 < v25)
      {
        unint64_t v23 = (unint64_t)(v25 - 20);
        double v26 = *(v25 - 11);
        v25 -= 20;
        if (v26 < *(double *)&v208) {
          goto LABEL_24;
        }
      }
      unint64_t v23 = (unint64_t)v25;
LABEL_24:
      unint64_t v9 = v21;
      if ((unint64_t)v21 < v23)
      {
        uint64_t v27 = v23;
        do
        {
          std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)v9, v27);
          uint64_t v28 = v9 + 20;
          do
          {
            if (v28 == a2) {
              goto LABEL_158;
            }
            double v29 = v28[9];
            v28 += 20;
          }
          while (v29 < *(double *)&v208);
          unint64_t v9 = v28 - 20;
          do
          {
            if (v27 == a1) {
              goto LABEL_158;
            }
            unint64_t v30 = v27 - 160;
            double v31 = *(double *)(v27 - 88);
            v27 -= 160;
          }
          while (v31 >= *(double *)&v208);
          uint64_t v27 = v30;
        }
        while ((unint64_t)v9 < v30);
      }
      if (v9 - 20 != (double *)a1)
      {
        WebKit::NetworkCache::Key::operator=(a1, (uint64_t)(v9 - 20));
        long long v32 = *(_OWORD *)(v9 - 9);
        *(_OWORD *)(a1 + 7objc_destroyWeak(this + 2) = *(_OWORD *)(v9 - 11);
        *(_OWORD *)(a1 + 88) = v32;
        WTF::URL::operator=(a1 + 104, (uint64_t)(v9 - 7));
        *(unsigned char *)(a1 + 144) = *((unsigned char *)v9 - 16);
        uint64_t v34 = *((void *)v9 - 1);
        *(v9 - objc_destroyWeak(this + 1) = 0.0;
        uint64_t v35 = *(WTF::StringImpl ***)(a1 + 152);
        *(void *)(a1 + 15objc_destroyWeak(this + 2) = v34;
        if (v35) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v35, v33);
        }
      }
      WebKit::NetworkCache::Key::operator=((uint64_t)(v9 - 20), (uint64_t)v204);
      long long v36 = v209;
      *(_OWORD *)(v9 - 1objc_destroyWeak(this + 1) = v208;
      *(_OWORD *)(v9 - 9) = v36;
      WTF::URL::operator=((uint64_t)(v9 - 7), (uint64_t)v210);
      *((unsigned char *)v9 - 16) = v211;
      long long v38 = v212;
      v212 = 0;
      long long v39 = (WTF::StringImpl **)*((void *)v9 - 1);
      *((void *)v9 - objc_destroyWeak(this + 1) = v38;
      if (v39) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v39, v37);
      }
      WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v204, v37);
      if ((unint64_t)v21 < v23) {
        goto LABEL_41;
      }
      char v40 = _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEbT1_SZ_SU_((double *)a1, v9 - 20);
      if (_ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEbT1_SZ_SU_(v9, a2))
      {
        a2 = v9 - 20;
        if (v40) {
          return;
        }
        goto LABEL_2;
      }
      if ((v40 & 1) == 0)
      {
LABEL_41:
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_Lb0EEEvT1_SZ_SU_NS_15iterator_traitsISZ_E15difference_typeEb(a1, v9 - 20, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      long long v41 = *(_OWORD *)a1;
      long long v42 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)v204 = v41;
      *(_OWORD *)&v204[16] = v42;
      long long v43 = *(_OWORD *)(a1 + 32);
      long long v44 = *(_OWORD *)(a1 + 48);
      uint64_t v207 = *(void *)(a1 + 64);
      long long v205 = v43;
      long long v206 = v44;
      long long v45 = *(_OWORD *)(a1 + 88);
      long long v208 = *(_OWORD *)(a1 + 72);
      long long v209 = v45;
      WTF::URL::URL((uint64_t)v210, (uint64_t *)(a1 + 104));
      char v211 = *(unsigned char *)(a1 + 144);
      uint64_t v46 = *(WTF::StringImpl ***)(a1 + 152);
      *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
      v212 = v46;
      unsigned int v47 = (double *)(a1 + 160);
      if (*(double *)&v208 >= *(a2 - 11))
      {
        do
        {
          unint64_t v9 = v47;
          if (v47 >= a2) {
            break;
          }
          double v49 = v47[9];
          v47 += 20;
        }
        while (*(double *)&v208 >= v49);
      }
      else
      {
        do
        {
          if (v47 == a2) {
            goto LABEL_158;
          }
          double v48 = v47[9];
          v47 += 20;
        }
        while (*(double *)&v208 >= v48);
        unint64_t v9 = v47 - 20;
      }
      unint64_t v50 = (unint64_t)a2;
      if (v9 < a2)
      {
        unint64_t v51 = a2;
        while (v51 != (double *)a1)
        {
          unint64_t v50 = (unint64_t)(v51 - 20);
          double v52 = *(v51 - 11);
          v51 -= 20;
          if (*(double *)&v208 >= v52) {
            goto LABEL_52;
          }
        }
        goto LABEL_158;
      }
LABEL_52:
      if ((unint64_t)v9 < v50)
      {
        do
        {
          std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)v9, v50);
          long long v53 = v9 + 20;
          do
          {
            if (v53 == a2) {
              goto LABEL_158;
            }
            double v54 = v53[9];
            v53 += 20;
          }
          while (*(double *)&v208 >= v54);
          unint64_t v9 = v53 - 20;
          do
          {
            if (v50 == a1) {
              goto LABEL_158;
            }
            unint64_t v55 = v50 - 160;
            double v56 = *(double *)(v50 - 88);
            v50 -= 160;
          }
          while (*(double *)&v208 < v56);
          unint64_t v50 = v55;
        }
        while ((unint64_t)v9 < v55);
      }
      if (v9 - 20 != (double *)a1)
      {
        WebKit::NetworkCache::Key::operator=(a1, (uint64_t)(v9 - 20));
        long long v57 = *(_OWORD *)(v9 - 9);
        *(_OWORD *)(a1 + 7objc_destroyWeak(this + 2) = *(_OWORD *)(v9 - 11);
        *(_OWORD *)(a1 + 88) = v57;
        WTF::URL::operator=(a1 + 104, (uint64_t)(v9 - 7));
        *(unsigned char *)(a1 + 144) = *((unsigned char *)v9 - 16);
        uint64_t v59 = *((void *)v9 - 1);
        *(v9 - objc_destroyWeak(this + 1) = 0.0;
        uint64_t v60 = *(WTF::StringImpl ***)(a1 + 152);
        *(void *)(a1 + 15objc_destroyWeak(this + 2) = v59;
        if (v60) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v60, v58);
        }
      }
      WebKit::NetworkCache::Key::operator=((uint64_t)(v9 - 20), (uint64_t)v204);
      long long v61 = v209;
      *(_OWORD *)(v9 - 1objc_destroyWeak(this + 1) = v208;
      *(_OWORD *)(v9 - 9) = v61;
      WTF::URL::operator=((uint64_t)(v9 - 7), (uint64_t)v210);
      *((unsigned char *)v9 - 16) = v211;
      uint64_t v63 = v212;
      v212 = 0;
      uint64_t v64 = (WTF::StringImpl **)*((void *)v9 - 1);
      *((void *)v9 - objc_destroyWeak(this + 1) = v63;
      if (v64) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v64, v62);
      }
      WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v204, v62);
      a4 = 0;
    }
  }
  if ((a4 & 1) == 0)
  {
    if ((double *)a1 == a2) {
      return;
    }
    long long v167 = (uint64_t *)(a1 + 160);
    if ((double *)(a1 + 160) == a2) {
      return;
    }
    uint64_t v168 = 0;
    long long v169 = v210;
    uint64_t v170 = a1 - 88;
    uint64_t v171 = -2;
    uint64_t v172 = 1;
    uint64_t v173 = a1;
    while (1)
    {
      uint64_t v174 = a1 + 160 * v168;
      uint64_t v168 = v172;
      if (*(double *)(v173 + 232) < *(double *)(v174 + 72))
      {
        uint64_t v175 = *v167;
        *long long v167 = 0;
        long long v176 = *(_OWORD *)(v173 + 168);
        *(void *)(v173 + 168) = 0;
        *(void *)(v173 + 176) = 0;
        *(_OWORD *)&v204[8] = v176;
        uint64_t v177 = *(void *)(v173 + 184);
        *(void *)(v173 + 184) = 0;
        *(void *)v204 = v175;
        *(void *)&v204[24] = v177;
        long long v178 = *(_OWORD *)(v173 + 208);
        long long v205 = *(_OWORD *)(v173 + 192);
        long long v206 = v178;
        uint64_t v207 = *(void *)(v173 + 224);
        long long v179 = *(_OWORD *)(v173 + 248);
        long long v208 = *(_OWORD *)(v173 + 232);
        long long v209 = v179;
        uint64_t v180 = (uint64_t)v169;
        WTF::URL::URL((uint64_t)v169, (uint64_t *)(v173 + 264));
        char v211 = *(unsigned char *)(v173 + 304);
        v181 = *(WTF::StringImpl ***)(v173 + 312);
        *(void *)(v173 + 31objc_destroyWeak(this + 2) = 0;
        v212 = v181;
        uint64_t v182 = v171;
        uint64_t v183 = v170;
        do
        {
          WebKit::NetworkCache::Key::operator=(v183 + 248, v183 + 88);
          long long v184 = *(_OWORD *)(v183 + 176);
          *(_OWORD *)(v183 + 320) = *(_OWORD *)(v183 + 160);
          *(_OWORD *)(v183 + 336) = v184;
          WTF::URL::operator=(v183 + 352, v183 + 192);
          *(unsigned char *)(v183 + 39objc_destroyWeak(this + 2) = *(unsigned char *)(v183 + 232);
          uint64_t v186 = *(void *)(v183 + 240);
          *(void *)(v183 + 240) = 0;
          v187 = *(WTF::StringImpl ***)(v183 + 400);
          *(void *)(v183 + 400) = v186;
          if (v187) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v187, v185);
          }
          BOOL v4 = __CFADD__(v182++, 1);
          if (v4) {
            goto LABEL_158;
          }
          uint64_t v188 = v183 - 160;
          BOOL v189 = *(double *)&v208 < *(double *)v183;
          v183 -= 160;
        }
        while (v189);
        WebKit::NetworkCache::Key::operator=(v188 + 248, (uint64_t)v204);
        long long v190 = v209;
        *(_OWORD *)(v188 + 320) = v208;
        *(_OWORD *)(v188 + 336) = v190;
        long long v169 = (unsigned char *)v180;
        WTF::URL::operator=(v188 + 352, v180);
        *(unsigned char *)(v188 + 39objc_destroyWeak(this + 2) = v211;
        v192 = v212;
        v212 = 0;
        v193 = *(WTF::StringImpl ***)(v188 + 400);
        *(void *)(v188 + 400) = v192;
        if (v193) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v193, v191);
        }
        WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v204, v191);
      }
      uint64_t v173 = a1 + 160 * v168;
      uint64_t v172 = v168 + 1;
      long long v167 = (uint64_t *)(v173 + 160);
      v170 += 160;
      --v171;
      if ((double *)(v173 + 160) == a2) {
        return;
      }
    }
  }
  if ((double *)a1 == a2) {
    return;
  }
  uint64_t v67 = (void *)(a1 + 160);
  if ((double *)(a1 + 160) == a2) {
    return;
  }
  uint64_t v68 = 0;
  uint64_t v69 = a1;
  do
  {
    uint64_t v70 = v67;
    if (*(double *)(v69 + 232) >= *(double *)(v69 + 72)) {
      goto LABEL_94;
    }
    uint64_t v71 = *v67;
    *uint64_t v67 = 0;
    long long v72 = *(_OWORD *)(v69 + 168);
    *(void *)(v69 + 168) = 0;
    *(void *)(v69 + 176) = 0;
    *(_OWORD *)&v204[8] = v72;
    uint64_t v73 = *(void *)(v69 + 184);
    *(void *)(v69 + 184) = 0;
    *(void *)v204 = v71;
    *(void *)&v204[24] = v73;
    long long v74 = *(_OWORD *)(v69 + 208);
    long long v205 = *(_OWORD *)(v69 + 192);
    long long v206 = v74;
    uint64_t v207 = *(void *)(v69 + 224);
    long long v75 = *(_OWORD *)(v69 + 248);
    long long v208 = *(_OWORD *)(v69 + 232);
    long long v209 = v75;
    WTF::URL::URL((uint64_t)v210, (uint64_t *)(v69 + 264));
    char v211 = *(unsigned char *)(v69 + 304);
    long long v76 = *(WTF::StringImpl ***)(v69 + 312);
    *(void *)(v69 + 31objc_destroyWeak(this + 2) = 0;
    v212 = v76;
    uint64_t v77 = v68;
    while (1)
    {
      uint64_t v78 = v77;
      uint64_t v79 = a1 + v77;
      WebKit::NetworkCache::Key::operator=(a1 + v77 + 160, a1 + v77);
      *(_OWORD *)(v79 + 23objc_destroyWeak(this + 2) = *(_OWORD *)(v79 + 72);
      *(_OWORD *)(v79 + 248) = *(_OWORD *)(v79 + 88);
      WTF::URL::operator=(v79 + 264, v79 + 104);
      *(unsigned char *)(v79 + 304) = *(unsigned char *)(v79 + 144);
      uint64_t v81 = *(void *)(v79 + 152);
      *(void *)(v79 + 15objc_destroyWeak(this + 2) = 0;
      uint64_t v82 = *(WTF::StringImpl ***)(v79 + 312);
      *(void *)(v79 + 31objc_destroyWeak(this + 2) = v81;
      if (v82) {
        break;
      }
      if (!v78) {
        goto LABEL_90;
      }
LABEL_87:
      uint64_t v77 = v78 - 160;
      if (*(double *)&v208 >= *(double *)(a1 + v78 - 88))
      {
        uint64_t v83 = a1 + v78;
        goto LABEL_91;
      }
    }
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v82, v80);
    if (v78) {
      goto LABEL_87;
    }
LABEL_90:
    uint64_t v83 = a1;
LABEL_91:
    WebKit::NetworkCache::Key::operator=(v83, (uint64_t)v204);
    uint64_t v84 = a1 + v78;
    long long v85 = v209;
    *(_OWORD *)(v84 + 7objc_destroyWeak(this + 2) = v208;
    *(_OWORD *)(v84 + 88) = v85;
    WTF::URL::operator=(a1 + v78 + 104, (uint64_t)v210);
    *(unsigned char *)(v83 + 144) = v211;
    uint64_t v87 = v212;
    v212 = 0;
    uint64_t v88 = *(WTF::StringImpl ***)(v83 + 152);
    *(void *)(v83 + 15objc_destroyWeak(this + 2) = v87;
    if (v88) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v88, v86);
    }
    WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v204, v86);
LABEL_94:
    uint64_t v67 = v70 + 20;
    v68 += 160;
    uint64_t v69 = (uint64_t)v70;
  }
  while (v70 + 20 != (void *)a2);
}

void _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  double v6 = *(double *)(a2 + 72);
  double v7 = *(double *)(a3 + 72);
  if (v6 >= *(double *)(a1 + 72))
  {
    if (v7 >= v6) {
      return;
    }
    std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a2, a3);
    if (*(double *)(a2 + 72) >= *(double *)(v5 + 72)) {
      return;
    }
    a1 = v5;
    uint64_t v8 = a2;
  }
  else
  {
    if (v7 >= v6)
    {
      std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1, a2);
      if (*(double *)(a3 + 72) >= *(double *)(a2 + 72)) {
        return;
      }
      a1 = a2;
    }
    uint64_t v8 = a3;
  }

  std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1, v8);
}

uint64_t _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEbT1_SZ_SU_(double *a1, double *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  BOOL v4 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 5))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      if (*(a2 - 11) < a1[9]) {
        std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)a1, (uint64_t)(a2 - 20));
      }
      return v4;
    case 3uLL:
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_((uint64_t)a1, (uint64_t)(a1 + 20), (uint64_t)(a2 - 20));
      return v4;
    case 4uLL:
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEvT1_SZ_SZ_SZ_SU_((uint64_t)a1, (uint64_t)(a1 + 20), (uint64_t)(a1 + 40), (uint64_t)(a2 - 20));
      return v4;
    case 5uLL:
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEvT1_SZ_SZ_SZ_SU_((uint64_t)a1, (uint64_t)(a1 + 20), (uint64_t)(a1 + 40), (uint64_t)(a1 + 60));
      if (*(a2 - 11) < a1[69])
      {
        std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)(a1 + 60), (uint64_t)(a2 - 20));
        if (a1[69] < a1[49])
        {
          std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)(a1 + 40), (uint64_t)(a1 + 60));
          if (a1[49] < a1[29])
          {
            std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)(a1 + 20), (uint64_t)(a1 + 40));
            if (a1[29] < a1[9]) {
              std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)a1, (uint64_t)(a1 + 20));
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v5 = a1 + 40;
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_((uint64_t)a1, (uint64_t)(a1 + 20), (uint64_t)(a1 + 40));
      double v6 = a1 + 60;
      if (a1 + 60 == a2) {
        return 1;
      }
      uint64_t v7 = 0;
      int v8 = 0;
      break;
  }
  while (v6[9] >= v5[9])
  {
LABEL_18:
    uint64_t v5 = v6;
    v7 += 160;
    v6 += 20;
    if (v6 == a2) {
      return 1;
    }
  }
  long long v9 = *(_OWORD *)v6;
  long long v10 = *((_OWORD *)v6 + 1);
  *(_OWORD *)double v6 = 0u;
  *((_OWORD *)v6 + objc_destroyWeak(this + 1) = 0u;
  v28[0] = v9;
  v28[1] = v10;
  long long v11 = *((_OWORD *)v6 + 3);
  uint64_t v28[2] = *((_OWORD *)v6 + 2);
  v28[3] = v11;
  uint64_t v29 = *((void *)v6 + 8);
  long long v12 = *(_OWORD *)(v6 + 11);
  long long v30 = *(_OWORD *)(v6 + 9);
  long long v31 = v12;
  WTF::URL::URL((uint64_t)v32, (uint64_t *)v6 + 13);
  char v33 = *((unsigned char *)v6 + 144);
  uint64_t v13 = *((void *)v6 + 19);
  v6[19] = 0.0;
  uint64_t v34 = v13;
  uint64_t v14 = v7;
  while (1)
  {
    uint64_t v15 = v14;
    long long v16 = (char *)a1 + v14;
    WebKit::NetworkCache::Key::operator=((uint64_t)a1 + v14 + 480, (uint64_t)a1 + v14 + 320);
    long long v17 = *(_OWORD *)(v16 + 408);
    *(_OWORD *)(v16 + 55objc_destroyWeak(this + 2) = *(_OWORD *)(v16 + 392);
    *(_OWORD *)(v16 + 568) = v17;
    WTF::URL::operator=((uint64_t)(v16 + 584), (uint64_t)(v16 + 424));
    v16[624] = v16[464];
    uint64_t v19 = *((void *)v16 + 59);
    *((void *)v16 + 59) = 0;
    double v20 = (WTF::StringImpl **)*((void *)v16 + 79);
    *((void *)v16 + 79) = v19;
    if (v20) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v20, v18);
    }
    if (v15 == -320) {
      break;
    }
    uint64_t v14 = v15 - 160;
    if (*(double *)&v30 >= *(double *)((char *)a1 + v15 + 232))
    {
      uint64_t v21 = (uint64_t)a1 + v14 + 480;
      goto LABEL_14;
    }
  }
  uint64_t v21 = (uint64_t)a1;
LABEL_14:
  WebKit::NetworkCache::Key::operator=(v21, (uint64_t)v28);
  uint64_t v22 = (_OWORD *)((char *)a1 + v15 + 392);
  long long v23 = v31;
  *uint64_t v22 = v30;
  v22[1] = v23;
  WTF::URL::operator=((uint64_t)a1 + v15 + 424, (uint64_t)v32);
  *(unsigned char *)(v21 + 144) = v33;
  uint64_t v25 = v34;
  uint64_t v34 = 0;
  double v26 = *(WTF::StringImpl ***)(v21 + 152);
  *(void *)(v21 + 15objc_destroyWeak(this + 2) = v25;
  if (v26) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v24);
  }
  if (++v8 != 8)
  {
    WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v28, v24);
    goto LABEL_18;
  }
  BOOL v4 = v6 + 20 == a2;
  WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v28, v24);
  return v4;
}

void std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v4 = *(_OWORD *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v17[0] = v4;
  v17[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  void v17[2] = *(_OWORD *)(a1 + 32);
  v17[3] = v6;
  uint64_t v18 = *(void *)(a1 + 64);
  long long v19 = *(_OWORD *)(a1 + 72);
  long long v20 = *(_OWORD *)(a1 + 88);
  uint64_t v7 = a1 + 104;
  WTF::URL::URL((uint64_t)v21, (uint64_t *)(a1 + 104));
  char v22 = *(unsigned char *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 152);
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
  uint64_t v23 = v8;
  WebKit::NetworkCache::Key::operator=(a1, a2);
  long long v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 7objc_destroyWeak(this + 2) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v9;
  WTF::URL::operator=(v7, a2 + 104);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a2 + 15objc_destroyWeak(this + 2) = 0;
  long long v12 = *(WTF::StringImpl ***)(a1 + 152);
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = v11;
  if (v12) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v10);
  }
  WebKit::NetworkCache::Key::operator=(a2, (uint64_t)v17);
  long long v13 = v20;
  *(_OWORD *)(a2 + 7objc_destroyWeak(this + 2) = v19;
  *(_OWORD *)(a2 + 88) = v13;
  WTF::URL::operator=(a2 + 104, (uint64_t)v21);
  *(unsigned char *)(a2 + 144) = v22;
  uint64_t v15 = v23;
  uint64_t v23 = 0;
  long long v16 = *(WTF::StringImpl ***)(a2 + 152);
  *(void *)(a2 + 15objc_destroyWeak(this + 2) = v15;
  if (v16) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v14);
  }
  WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v17, v14);
}

void _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEvT1_SZ_SZ_SZ_SU_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(a1, a2, a3);
  if (*(double *)(a4 + 72) < *(double *)(a3 + 72))
  {
    std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a3, a4);
    if (*(double *)(a3 + 72) < *(double *)(a2 + 72))
    {
      std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a2, a3);
      if (*(double *)(a2 + 72) < *(double *)(a1 + 72))
      {
        std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1, a2);
      }
    }
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v5;
    do
    {
      long long v12 = (WTF::StringImpl **)(v4 + 24 * v9);
      long long v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          unsigned int v17 = *((_DWORD *)v13 + 4);
          if (v17 >= 0x100) {
            int v18 = v17 >> 8;
          }
          else {
            int v18 = WTF::StringImpl::hashSlowCase(v13);
          }
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v16;
            uint64_t v21 = (WTF::StringImpl **)(v15 + 24 * (v18 & v16));
            int v18 = ++v19 + (v18 & v16);
          }
          while (*v21);
          char v22 = (void *)(v15 + 24 * v20 + 8);
          WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v8);
          uint64_t v24 = *v21;
          *uint64_t v21 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v23);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          uint64_t v25 = *v12;
          WTF::StringImpl *v12 = 0;
          *uint64_t v21 = v25;
          uint64_t v26 = v4 + 24 * v9;
          *char v22 = 0;
          *(void *)(v15 + 24 * v20 + 16) = 0;
          uint64_t v27 = *(void *)(v26 + 8);
          v26 += 8;
          *(void *)uint64_t v26 = 0;
          *char v22 = v27;
          LODWORD(v25) = *(_DWORD *)(v26 + 8);
          *(_DWORD *)(v26 + 8) = 0;
          uint64_t v28 = v15 + 24 * v20;
          *(_DWORD *)(v28 + 16) = v25;
          LODWORD(v25) = *(_DWORD *)(v26 + 12);
          *(_DWORD *)(v26 + 1objc_destroyWeak(this + 2) = 0;
          *(_DWORD *)(v28 + 20) = v25;
          WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26, v23);
          uint64_t v29 = *v12;
          WTF::StringImpl *v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v8);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          if (v12 == a3) {
            uint64_t v10 = v15 + 24 * v20;
          }
        }
        else
        {
          WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v9 + 8, v8);
          uint64_t v14 = *v12;
          WTF::StringImpl *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v8);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

WTF *WTF::GenericHashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4)
  {
    unsigned int v5 = *(WebKit::CacheStorageRecordInformation **)a1;
    uint64_t v6 = 160 * v4;
    do
    {
      WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation(v5, a2);
      unsigned int v5 = (WebKit::CacheStorageRecordInformation *)(v7 + 160);
      v6 -= 160;
    }
    while (v6);
  }
  uint64_t result = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, a2);
  }
  uint64_t v9 = *(void *)a2;
  *(void *)a2 = 0;
  *(void *)a1 = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(a1 + 8) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = v9;
  return result;
}

void WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 160 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  *(void *)(v4 + 8) = v6;
  uint64_t v7 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v4 + 16) = v7;
  uint64_t v8 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = 0;
  *(void *)(v4 + 24) = v8;
  uint64_t v9 = *(void *)(v3 + 64);
  long long v10 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v4 + 3objc_destroyWeak(this + 2) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 48) = v10;
  *(void *)(v4 + 64) = v9;
  long long v11 = *(_OWORD *)(v3 + 72);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(v3 + 88);
  *(_OWORD *)(v4 + 7objc_destroyWeak(this + 2) = v11;
  WTF::URL::URL(v4 + 104, (uint64_t *)(v3 + 104));
  *(unsigned char *)(v4 + 144) = *(unsigned char *)(v3 + 144);
  *(void *)(v4 + 15objc_destroyWeak(this + 2) = 0;
  uint64_t v12 = *(void *)(v3 + 152);
  *(void *)(v3 + 15objc_destroyWeak(this + 2) = 0;
  *(void *)(v4 + 15objc_destroyWeak(this + 2) = v12;
  ++*(_DWORD *)(a1 + 12);
}

unint64_t WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 160 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x199999A)
    {
      __break(0xC471u);
      JUMPOUT(0x198C82B8CLL);
    }
    unint64_t v3 = *(uint64_t **)a1;
    uint64_t v4 = (uint64_t *)(*(void *)a1 + 160 * *(unsigned int *)(a1 + 12));
    int v5 = 160 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(160 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFE0) / 0xA0;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::CacheStorageRecordInformation>::move(v3, v4, v6);
    if (v3)
    {
      if (*(uint64_t **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebKit::CacheStorageRecordInformation>::move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a3 + 104;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      *(void *)(v5 - 104) = v6;
      uint64_t v7 = v4[1];
      v4[1] = 0;
      *(void *)(v5 - 96) = v7;
      uint64_t v8 = v4[2];
      void v4[2] = 0;
      *(void *)(v5 - 88) = v8;
      uint64_t v9 = v4[3];
      v4[3] = 0;
      *(void *)(v5 - 80) = v9;
      long long v10 = *((_OWORD *)v4 + 2);
      long long v11 = *((_OWORD *)v4 + 3);
      *(void *)(v5 - 40) = v4[8];
      *(_OWORD *)(v5 - 56) = v11;
      *(_OWORD *)(v5 - 7objc_destroyWeak(this + 2) = v10;
      long long v12 = *(_OWORD *)(v4 + 11);
      *(_OWORD *)(v5 - 3objc_destroyWeak(this + 2) = *(_OWORD *)(v4 + 9);
      *(_OWORD *)(v5 - 16) = v12;
      WTF::URL::URL(v5, v4 + 13);
      *(unsigned char *)(v5 + 40) = *((unsigned char *)v4 + 144);
      *(void *)(v5 + 48) = 0;
      uint64_t v13 = v4[19];
      v4[19] = 0;
      *(void *)(v5 + 48) = v13;
      WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v4, v14);
      v5 += 160;
      v4 += 20;
    }
    while (v4 != a2);
  }
}

uint64_t WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebKit::CacheStorageRecordInformation **)a1;
    uint64_t v5 = 160 * v3;
    do
    {
      WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation(v4, a2);
      uint64_t v4 = (WebKit::CacheStorageRecordInformation *)(v6 + 160);
      v5 -= 160;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t *WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = WebKit::NetworkCache::Key::Key(*(void *)a1 + 160 * v4, v3);
  long long v7 = *(_OWORD *)(v3 + 72);
  *(_OWORD *)(v6 + 88) = *(_OWORD *)(v3 + 88);
  *(_OWORD *)(v6 + 7objc_destroyWeak(this + 2) = v7;
  uint64_t v8 = *(_DWORD **)(v3 + 104);
  if (v8) {
    *v8 += 2;
  }
  uint64_t v9 = v5 + 160 * v4;
  *(void *)(v9 + 104) = v8;
  long long v10 = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(v9 + 11objc_destroyWeak(this + 2) = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(v9 + 128) = v10;
  *(unsigned char *)(v9 + 144) = *(unsigned char *)(v3 + 144);
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v9 + 152), (void **)(v3 + 152));
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::retrieveRecords(WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::Error> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::CacheStorageRecord>,0ul,WebCore::DOMCacheEngine::CrossThreadRecord,16ul,WTF::CrashOnOverflow> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9CC010;
  WebKit::CacheStorageCache::retrieveRecords(WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::RetrieveRecordsOptions &&::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WebCore::RetrieveRecordsOptions &&::CrashOnOverflow,16ul,WebCore::RetrieveRecordsOptions &&::FastMalloc>,WebCore::RetrieveRecordsOptions &&::Vector::Error> &&)> &&)::$_1::~$_1((WebCore::ResourceRequestBase *)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::retrieveRecords(WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::Error> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::CacheStorageRecord>,0ul,WebCore::DOMCacheEngine::CrossThreadRecord,16ul,WTF::CrashOnOverflow> &&>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9CC010;
  WebKit::CacheStorageCache::retrieveRecords(WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::RetrieveRecordsOptions &&::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WebCore::RetrieveRecordsOptions &&::CrashOnOverflow,16ul,WebCore::RetrieveRecordsOptions &&::FastMalloc>,WebCore::RetrieveRecordsOptions &&::Vector::Error> &&)> &&)::$_1::~$_1((WebCore::ResourceRequestBase *)(a1 + 8), a2);

  return WTF::fastFree((WTF *)a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::retrieveRecords(WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::Error> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::CacheStorageRecord>,0ul,WebCore::DOMCacheEngine::CrossThreadRecord,16ul,WTF::CrashOnOverflow> &&>::call(WTF::StringImpl *result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  unsigned int v3 = *((_DWORD *)a2 + 3);
  if (!v3)
  {
    long long v32 = 0;
LABEL_51:
    char v33 = v32;
    goto LABEL_52;
  }
  if (v3 >= 0x6EB3E5)
  {
    __break(0xC471u);
LABEL_57:
    __break(1u);
    return result;
  }
  unsigned int v5 = 592 * v3;
  uint64_t v6 = WTF::fastMalloc((WTF *)(592 * v3));
  LODWORD(v7objc_destroyWeak(this + 2) = v5 / 0x250;
  uint64_t v71 = (long long *)v6;
  unsigned int v7 = *((_DWORD *)a2 + 3);
  if (!v7)
  {
    long long v32 = (long long *)v6;
    goto LABEL_51;
  }
  uint64_t v8 = 0;
  uint64_t v9 = *a2;
  uint64_t v37 = 752 * v7;
  do
  {
    uint64_t v10 = v9 + v8;
    if (!*(unsigned char *)(v9 + v8 + 736)) {
      goto LABEL_45;
    }
    uint64_t v11 = *(void *)(v10 + 80);
    char v12 = *(unsigned char *)(v10 + 160);
    int v13 = *(_DWORD *)(v10 + 368);
    *(_DWORD *)((char *)v57 + 3) = *(_DWORD *)(v10 + 371);
    v57[0] = v13;
    uint64_t v14 = *(WTF::StringImpl **)(v10 + 376);
    if (v14) {
      *(_DWORD *)v14 += 2;
    }
    uint64_t v58 = v14;
    long long v15 = *(_OWORD *)(v9 + v8 + 400);
    long long v59 = *(_OWORD *)(v9 + v8 + 384);
    long long v60 = v15;
    char v16 = *(unsigned char *)(v9 + v8 + 424);
    uint64_t v56 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    memset(v45, 0, sizeof(v45));
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v40 = 0u;
    WTF::URL::invalidate((WTF::URL *)&v40);
    *((void *)&v42 + objc_destroyWeak(this + 1) = 0;
    *((void *)&v43 + objc_destroyWeak(this + 1) = 0;
    *((void *)&v44 + objc_destroyWeak(this + 1) = 0;
    *(void *)&v45[0] = 0;
    WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)((char *)v45 + 8));
    BYTE8(v46) = 0;
    BYTE8(v54) = 0;
    BYTE8(v55) = 0;
    LOBYTE(v56) = 0;
    long long v38 = 0;
    int v39 = 0;
    WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v61, v11, 0, v12, v10 + 168, (uint64_t)v57, (uint64_t *)(v9 + v8 + 416), v16, (uint64_t)&v40, (uint64_t)&v38, 0);
    if (v39 != -1) {
      ((void (*)(unsigned char *, WTF::StringImpl **))off_1EE9CBD60[v39])(v73, &v38);
    }
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v40, v17);
    uint64_t result = v58;
    uint64_t v58 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (*((unsigned char *)v2 + 243))
    {
      if (!*(unsigned char *)(v10 + 736)) {
        goto LABEL_57;
      }
      uint64_t result = (WTF::StringImpl *)WebCore::ResourceResponseData::operator=((uint64_t)v67, v9 + v8 + 432);
      if (!*(unsigned char *)(v10 + 736)) {
        goto LABEL_57;
      }
      uint64_t result = (WTF::StringImpl *)std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v68, v9 + v8 + 720);
      if (!*(unsigned char *)(v10 + 736)) {
        goto LABEL_57;
      }
      uint64_t v70 = *(void *)(v9 + v8 + 712);
    }
    if (v67[257] != 4)
    {
LABEL_28:
      if (HIDWORD(v72) == v72)
      {
        WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DOMCacheEngine::CrossThreadRecord>((uint64_t)&v71, (unint64_t)&v61);
      }
      else
      {
        WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v71[37 * HIDWORD(v72)], &v61);
        ++HIDWORD(v72);
      }
      int v26 = 1;
      goto LABEL_32;
    }
    WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v63);
    int v19 = (WebCore::EmptyOriginAccessPatterns *)WebCore::HTTPHeaderMap::get();
    WebCore::EmptyOriginAccessPatterns::singleton(v19);
    WebCore::validateCrossOriginResourcePolicy();
    int v20 = LOBYTE(v45[0]);
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v40, v21);
    uint64_t v23 = v38;
    long long v38 = 0;
    if (!v23) {
      goto LABEL_23;
    }
    if (*(_DWORD *)v23 != 2)
    {
      *(_DWORD *)v23 -= 2;
LABEL_23:
      if (!v20) {
        goto LABEL_28;
      }
      goto LABEL_24;
    }
    WTF::StringImpl::destroy(v23, v22);
    if (!v20) {
      goto LABEL_28;
    }
LABEL_24:
    LOBYTE(v40) = 6;
    LODWORD(v4objc_destroyWeak(this + 1) = 1;
    uint64_t v24 = *((void *)v2 + 31);
    *((void *)v2 + 3objc_destroyWeak(this + 1) = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v24 + 16))(v24, &v40);
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    if (v41 != -1) {
      ((void (*)(WTF::StringImpl **, long long *))off_1EE9CBD50[v41])(&v38, &v40);
    }
    int v26 = 0;
LABEL_32:
    if (v69 != -1) {
      ((void (*)(long long *, uint64_t *))off_1EE9CBD60[v69])(&v40, &v68);
    }
    int v69 = -1;
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v67, v25);
    uint64_t v28 = v66;
    uint64_t v66 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v27);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    uint64_t v29 = v65;
    uint64_t v65 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v27);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    CFTypeRef v30 = cf;
    CFTypeRef cf = 0;
    if (v30) {
      CFRelease(v30);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v63);
    if (!v26) {
      return (WTF::StringImpl *)WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v31);
    }
LABEL_45:
    v8 += 752;
  }
  while (v37 != v8);
  char v33 = v71;
  long long v32 = &v71[37 * HIDWORD(v72)];
  if (HIDWORD(v72))
  {
    uint64_t v34 = 126 - 2 * __clz(HIDWORD(v72));
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v34 = 0;
LABEL_53:
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_Lb0EEEvT1_S13_SY_NS_15iterator_traitsIS13_E15difference_typeEb(v33, v32, v34, 1);
  *(void *)&long long v61 = v71;
  uint64_t v35 = v72;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  *((void *)&v61 + objc_destroyWeak(this + 1) = v35;
  int v62 = 0;
  uint64_t v36 = *((void *)v2 + 31);
  *((void *)v2 + 3objc_destroyWeak(this + 1) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v36 + 16))(v36, &v61);
  (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  if (v62 != -1) {
    ((void (*)(long long *, long long *))off_1EE9CBD50[v62])(&v40, &v61);
  }
  return (WTF::StringImpl *)WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v31);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9CBD60[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE9CC028[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(unsigned int *)(*(void *)result + 8);
  if (v3 != -1)
  {
    if (!v3)
    {
      *a2 = 0;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9CBD60[v3])(&v4, v2);
  }
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  return result;
}

WTF::RefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(WTF::RefCountedBase *result, WTF::RefCountedBase **a2, WTF::RefCountedBase **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 1)
  {
    uint64_t result = (WTF::RefCountedBase *)((uint64_t (*)(char *, uint64_t))off_1EE9CBD60[v5])(&v8, v4);
LABEL_8:
    unsigned int v7 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  char v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    return (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(result);
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__assign_alt[abi:sn180100]<2ul,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(*a1, a2, a3);
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_Lb0EEEvT1_S13_SY_NS_15iterator_traitsIS13_E15difference_typeEb(long long *a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a2 - 37;
    uint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = 0x14C1BACF914C1BADLL * (a2 - v11);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(void *)v10 >= *(void *)v11) {
                  return;
                }
                long long v43 = v11;
                long long v44 = a2 - 37;
                break;
              case 3uLL:
                _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(v11, v11 + 37, a2 - 37);
                return;
              case 4uLL:
                _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_S13_S13_S13_SY_(v11, v11 + 37, v11 + 74, a2 - 37);
                return;
              case 5uLL:
                long long v45 = v11 + 37;
                long long v46 = v11 + 74;
                long long v47 = v11 + 111;
                _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_S13_S13_S13_SY_(a1, a1 + 37, a1 + 74, a1 + 111);
                if (*(void *)v10 >= *((void *)a1 + 222)) {
                  return;
                }
                std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1 + 111, a2 - 37);
                if (*v47 >= *v46) {
                  return;
                }
                std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1 + 74, a1 + 111);
                if (*v46 >= *v45) {
                  return;
                }
                std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1 + 37, a1 + 74);
                if (*((void *)a1 + 74) >= *(void *)a1) {
                  return;
                }
                long long v43 = a1;
                long long v44 = a1 + 37;
                break;
              default:
                JUMPOUT(0);
            }
            std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(v43, v44);
            return;
          }
          if (v12 <= 14207)
          {
            if (a4)
            {
              if (v11 != a2)
              {
                long long v48 = v11 + 37;
                if (v11 + 37 != a2)
                {
                  uint64_t v49 = 0;
                  long long v50 = v11;
                  do
                  {
                    unint64_t v51 = *((void *)v50 + 74);
                    unint64_t v52 = *(void *)v50;
                    long long v50 = v48;
                    if (v51 < v52)
                    {
                      WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v73, v48);
                      uint64_t v53 = v49;
                      while (1)
                      {
                        WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)v11 + v53 + 592, (long long *)((char *)v11 + v53));
                        if (!v53) {
                          break;
                        }
                        v53 -= 592;
                        if ((unint64_t)v73 >= *(void *)((char *)v11 + v53))
                        {
                          uint64_t v54 = (uint64_t)v11 + v53 + 592;
                          goto LABEL_108;
                        }
                      }
                      uint64_t v54 = (uint64_t)v11;
LABEL_108:
                      WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v54, &v73);
                      if (v80 != -1) {
                        ((void (*)(unsigned char *, uint64_t *))off_1EE9CBD60[v80])(v81, &v79);
                      }
                      int v80 = -1;
                      WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v78, v55);
                      long long v57 = v77;
                      uint64_t v77 = 0;
                      if (v57)
                      {
                        if (*(_DWORD *)v57 == 2) {
                          WTF::StringImpl::destroy(v57, v56);
                        }
                        else {
                          *(_DWORD *)v57 -= 2;
                        }
                      }
                      uint64_t v58 = v76;
                      long long v76 = 0;
                      if (v58)
                      {
                        if (*(_DWORD *)v58 == 2) {
                          WTF::StringImpl::destroy(v58, v56);
                        }
                        else {
                          *(_DWORD *)v58 -= 2;
                        }
                      }
                      CFTypeRef v59 = cf;
                      CFTypeRef cf = 0;
                      if (v59) {
                        CFRelease(v59);
                      }
                      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v74);
                    }
                    long long v48 = v50 + 37;
                    v49 += 592;
                  }
                  while (v50 + 37 != a2);
                }
              }
            }
            else if (v11 != a2)
            {
              long long v60 = v11 + 37;
              if (v11 + 37 != a2)
              {
                uint64_t v61 = 0;
                uint64_t v62 = -2;
                uint64_t v63 = 1;
                uint64_t v64 = v11;
                do
                {
                  uint64_t v65 = 37 * v61;
                  uint64_t v61 = v63;
                  if (*(void *)v60 < *(void *)&v11[v65])
                  {
                    WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v73, v60);
                    uint64_t v66 = v62;
                    uint64_t v67 = v64;
                    do
                    {
                      WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)(v67 + 37), v67);
                      BOOL v4 = __CFADD__(v66++, 1);
                      if (v4) {
                        goto LABEL_147;
                      }
                      v67 -= 37;
                    }
                    while ((unint64_t)v73 < *(void *)v67);
                    WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)(v67 + 37), &v73);
                    if (v80 != -1) {
                      ((void (*)(unsigned char *, uint64_t *))off_1EE9CBD60[v80])(v81, &v79);
                    }
                    int v80 = -1;
                    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v78, v68);
                    uint64_t v70 = v77;
                    uint64_t v77 = 0;
                    if (v70)
                    {
                      if (*(_DWORD *)v70 == 2) {
                        WTF::StringImpl::destroy(v70, v69);
                      }
                      else {
                        *(_DWORD *)v70 -= 2;
                      }
                    }
                    uint64_t v71 = v76;
                    long long v76 = 0;
                    if (v71)
                    {
                      if (*(_DWORD *)v71 == 2) {
                        WTF::StringImpl::destroy(v71, v69);
                      }
                      else {
                        *(_DWORD *)v71 -= 2;
                      }
                    }
                    CFTypeRef v72 = cf;
                    CFTypeRef cf = 0;
                    if (v72) {
                      CFRelease(v72);
                    }
                    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v74);
                  }
                  uint64_t v63 = v61 + 1;
                  long long v60 = &v11[37 * v61 + 37];
                  v64 += 37;
                  --v62;
                }
                while (v60 != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            _ZNSt3__114__partial_sortB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_S12_EET1_S13_S13_T2_SZ_(v11, a2, a2);
            return;
          }
          unint64_t v14 = v13 >> 1;
          long long v15 = &v11[37 * (v13 >> 1)];
          if ((unint64_t)v12 >= 0x12801)
          {
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(a1, &a1[37 * (v13 >> 1)], a2 - 37);
            uint64_t v16 = 37 * v14;
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(a1 + 37, &a1[v16 - 37], a2 - 74);
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(a1 + 74, &a1[v16 + 37], a2 - 111);
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(&a1[v16 - 37], v15, &a1[v16 + 37]);
            std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1, v15);
          }
          else
          {
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(&a1[37 * (v13 >> 1)], a1, a2 - 37);
          }
          --a3;
          if ((a4 & 1) != 0 || *((void *)a1 - 74) < *(void *)a1) {
            break;
          }
          WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v73, a1);
          if ((unint64_t)v73 >= *(void *)v10)
          {
            uint64_t v34 = a1 + 37;
            do
            {
              uint64_t v11 = v34;
              if (v34 >= a2) {
                break;
              }
              v34 += 37;
            }
            while ((unint64_t)v73 >= *(void *)v11);
          }
          else
          {
            long long v32 = a1 + 37;
            do
            {
              if (v32 == a2) {
                goto LABEL_147;
              }
              unint64_t v33 = *(void *)v32;
              v32 += 37;
            }
            while ((unint64_t)v73 >= v33);
            uint64_t v11 = v32 - 37;
          }
          uint64_t v35 = a2;
          if (v11 < a2)
          {
            uint64_t v35 = a2;
            while (v35 != a1)
            {
              v35 -= 37;
              if ((unint64_t)v73 >= *(void *)v35) {
                goto LABEL_69;
              }
            }
LABEL_147:
            __break(1u);
            JUMPOUT(0x198C83D94);
          }
LABEL_69:
          if (v11 < v35)
          {
            std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(v11, v35);
            uint64_t v36 = v11 + 37;
            do
            {
              if (v36 == a2) {
                goto LABEL_147;
              }
              unint64_t v37 = *(void *)v36;
              v36 += 37;
            }
            while ((unint64_t)v73 >= v37);
            uint64_t v11 = v36 - 37;
            while (v35 != a1)
            {
              v35 -= 37;
              if ((unint64_t)v73 >= *(void *)v35) {
                goto LABEL_69;
              }
            }
            goto LABEL_147;
          }
          if (v11 - 37 != a1) {
            WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)a1, v11 - 37);
          }
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)(v11 - 37), &v73);
          if (v80 != -1) {
            ((void (*)(unsigned char *, uint64_t *))off_1EE9CBD60[v80])(v81, &v79);
          }
          int v80 = -1;
          WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v78, v38);
          long long v40 = v77;
          uint64_t v77 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2) {
              WTF::StringImpl::destroy(v40, v39);
            }
            else {
              *(_DWORD *)v40 -= 2;
            }
          }
          long long v41 = v76;
          long long v76 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2) {
              WTF::StringImpl::destroy(v41, v39);
            }
            else {
              *(_DWORD *)v41 -= 2;
            }
          }
          CFTypeRef v42 = cf;
          CFTypeRef cf = 0;
          if (v42) {
            CFRelease(v42);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v74);
          a4 = 0;
        }
        WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v73, a1);
        uint64_t v17 = 0;
        do
        {
          int v18 = &a1[v17 + 37];
          if (v18 == a2) {
            goto LABEL_147;
          }
          v17 += 37;
        }
        while (*(void *)v18 < (unint64_t)v73);
        int v19 = &a1[v17];
        int v20 = a2;
        if (v17 != 37)
        {
          while (v20 != a1)
          {
            v20 -= 37;
            if (*(void *)v20 < (unint64_t)v73) {
              goto LABEL_21;
            }
          }
          goto LABEL_147;
        }
        int v20 = a2;
        do
        {
          if (v19 >= v20) {
            break;
          }
          v20 -= 37;
        }
        while (*(void *)v20 >= (unint64_t)v73);
LABEL_21:
        if (v19 >= v20)
        {
          uint64_t v25 = v19 - 37;
        }
        else
        {
          uint64_t v21 = &a1[v17];
          char v22 = v20;
          do
          {
            std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(v21, v22);
            uint64_t v23 = v21 + 37;
            do
            {
              if (v23 == a2) {
                goto LABEL_147;
              }
              unint64_t v24 = *(void *)v23;
              v23 += 37;
            }
            while (v24 < (unint64_t)v73);
            uint64_t v21 = v23 - 37;
            do
            {
              if (v22 == a1) {
                goto LABEL_147;
              }
              v22 -= 37;
            }
            while (*(void *)v22 >= (unint64_t)v73);
          }
          while (v21 < v22);
          uint64_t v25 = v23 - 74;
        }
        if (v25 != a1) {
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)a1, v25);
        }
        WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)v25, &v73);
        if (v80 != -1) {
          ((void (*)(unsigned char *, uint64_t *))off_1EE9CBD60[v80])(v81, &v79);
        }
        int v80 = -1;
        WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v78, v26);
        uint64_t v28 = v77;
        uint64_t v77 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2) {
            WTF::StringImpl::destroy(v28, v27);
          }
          else {
            *(_DWORD *)v28 -= 2;
          }
        }
        uint64_t v29 = v76;
        long long v76 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, v27);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
        }
        CFTypeRef v30 = cf;
        CFTypeRef cf = 0;
        if (v30) {
          CFRelease(v30);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v74);
        if (v19 >= v20) {
          break;
        }
LABEL_49:
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_Lb0EEEvT1_S13_SY_NS_15iterator_traitsIS13_E15difference_typeEb(a1, v25, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v25 + 37;
      }
      BOOL RecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEbT1_S13_SY = _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEbT1_S13_SY_(a1, v25);
      uint64_t v11 = v25 + 37;
      if (_ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEbT1_S13_SY_(v25 + 37, a2))
      {
        break;
      }
      if (!RecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEbT1_S13_SY) {
        goto LABEL_49;
      }
    }
    a2 = v25;
    if (!RecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEbT1_S13_SY) {
      continue;
    }
    break;
  }
}