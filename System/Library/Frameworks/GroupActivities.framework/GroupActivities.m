uint64_t type metadata instantiation function for GroupActivityTransferRepresentation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t type metadata instantiation function for GroupSession.Timestamps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t type metadata instantiation function for GroupSession()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t type metadata instantiation function for GroupSession.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t destroy for GroupSessionObserver(id *a1)
{
  swift_unknownObjectRelease();

  return swift_release();
}

ValueMetadata *type metadata accessor for GroupSessionTable.Storage()
{
  return &type metadata for GroupSessionTable.Storage;
}

uint64_t partial apply for closure #4 in GroupSessionObserver.receive<A>(subscriber:)(unint64_t *a1)
{
  return closure #4 in GroupSessionObserver.receive<A>(subscriber:)(a1, v1 + 48);
}

uint64_t type metadata completion function for AnyGroupActivity()
{
  uint64_t result = type metadata accessor for AnyGroupActivity.MetadataProvider(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for AnyGroupActivity.MetadataProvider()
{
  uint64_t result = type metadata accessor for GroupActivityMetadata(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for GroupActivityMetadata(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for GroupActivityMetadata);
}

uint64_t instantiation function for generic protocol witness table for AnyGroupActivity(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
  uint64_t result = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for AnyGroupActivity.MetadataProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for AnyGroupActivity(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for AnyGroupActivity);
}

uint64_t type metadata accessor for AnyGroupActivity.MetadataProvider(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for AnyGroupActivity.MetadataProvider);
}

uint64_t type metadata accessor for Conversation()
{
  uint64_t result = type metadata singleton initialization cache for Conversation;
  if (!type metadata singleton initialization cache for Conversation) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for GroupSession.Sessions()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for GroupSession.Sessions.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in _PublisherElements<A>.Iterator.Inner()
{
  return swift_getWitnessTable();
}

void type metadata completion function for GroupSession.Timestamps()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Date?()
{
  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
    }
  }
}

uint64_t _PublisherElements.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](_PublisherElements.Iterator.next(), 0, 0);
}

void type metadata completion function for Conversation()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Conversation.State>(319, &lazy cache variable for type metadata for Published<Conversation.State>);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<Set<Participant>>(319, (unint64_t *)&lazy cache variable for type metadata for Published<Set<Participant>>, &demangling cache variable for type metadata for Set<Participant>);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Published<Conversation.State>(319, &lazy cache variable for type metadata for Published<UInt64>);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Published<Set<Participant>>(319, &lazy cache variable for type metadata for Published<[GroupSession<AnyGroupActivity>]>, &demangling cache variable for type metadata for [GroupSession<AnyGroupActivity>]);
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

void type metadata accessor for Published<Set<Participant>>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for Published<Conversation.State>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Published();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t base witness table accessor for Equatable in Participant()
{
  return _s10Foundation4UUIDVACSHAAWlTm_3(&lazy protocol witness table cache variable for type Participant and conformance Participant, (void (*)(uint64_t))type metadata accessor for Participant);
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_1(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_5(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t one-time initialization function for client()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.client);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  return Logger.init(subsystem:category:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t closure #4 in GroupSessionObserver.receive<A>(subscriber:)(unint64_t *a1, uint64_t a2)
{
  uint64_t isUniquelyReferenced_nonNull_native = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(isUniquelyReferenced_nonNull_native - 8);
  MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
  uint64_t v50 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = *a1;
  if (one-time initialization token for client != -1) {
LABEL_27:
  }
    swift_once();
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.client);
  swift_bridgeObjectRetain_n();
  v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v42 = a2;
  if (v10)
  {
    v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v52 = (void *)v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>);
    uint64_t v14 = MEMORY[0x1A624E120](v6, v13);
    uint64_t v15 = isUniquelyReferenced_nonNull_native;
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v17, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t isUniquelyReferenced_nonNull_native = v15;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v8, v9, "Received updated sessions: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v12, -1, -1);
    MEMORY[0x1A624F870](v11, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v18 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    if (v19) {
      goto LABEL_7;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void *)(v42 + 16);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 40))(ObjectType, v37);
    (*(void (**)(void *))(*(void *)v39 + 152))(v18);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v19 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v19) {
    goto LABEL_29;
  }
LABEL_7:
  unint64_t v47 = v6 & 0xC000000000000001;
  v48 = (void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
  v44 = (void (**)(uint64_t, uint64_t))(v43 + 8);
  uint64_t v45 = v19;
  a2 = 4;
  v46 = (void (*)(void, void, void))v6;
  while (1)
  {
    uint64_t v20 = a2 - 4;
    if (v47)
    {
      uint64_t v21 = MEMORY[0x1A624E900](a2 - 4, v6);
      uint64_t v22 = a2 - 3;
      if (__OFADD__(v20, 1)) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v21 = *(void *)(v6 + 8 * a2);
      swift_retain();
      uint64_t v22 = a2 - 3;
      if (__OFADD__(v20, 1))
      {
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    uint64_t v49 = v22;
    unint64_t v6 = (unint64_t)*v48;
    uint64_t v23 = v50;
    uint64_t v24 = isUniquelyReferenced_nonNull_native;
    (*v48)(v50, v21 + direct field offset for GroupSession.id, isUniquelyReferenced_nonNull_native);
    uint64_t v25 = *(void *)(v21 + *(void *)(*(void *)v21 + 360));
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52 = v18;
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
    uint64_t v28 = v18[2];
    BOOL v29 = (v26 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      goto LABEL_25;
    }
    char v31 = v26;
    if (v18[3] < v30) {
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
LABEL_21:
    uint64_t isUniquelyReferenced_nonNull_native = v24;
    v18 = v52;
    if (v31)
    {
      *(void *)(v52[7] + 8 * v27) = v25;
    }
    else
    {
      v52[(v27 >> 6) + 8] |= 1 << v27;
      ((void (*)(unint64_t, uint64_t, uint64_t))v6)(v18[6] + *(void *)(v43 + 72) * v27, v50, v24);
      *(void *)(v18[7] + 8 * v27) = v25;
      uint64_t v34 = v18[2];
      BOOL v35 = __OFADD__(v34, 1);
      uint64_t v36 = v34 + 1;
      if (v35) {
        goto LABEL_26;
      }
      v18[2] = v36;
    }
    swift_bridgeObjectRelease();
    (*v44)(v50, v24);
    swift_release();
    ++a2;
    unint64_t v6 = (unint64_t)v46;
    if (v49 == v45) {
      goto LABEL_29;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
  unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
  if ((v31 & 1) == (v33 & 1))
  {
    unint64_t v27 = v32;
    goto LABEL_21;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, Int));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Int>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, Int));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, GroupSessionTable.Storage));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionTable.Storage>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, GroupSessionTable.Storage));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = outlined init with take of GroupSessionTable.Storage(v9, v7[7] + 24 * v16);
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, TypedPayloadDecoding>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v6, (uint64_t)&v15, (uint64_t *)&demangling cache variable for type metadata for (String, TypedPayloadDecoding));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint8_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = outlined init with take of TypedPayloadDecoding(&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSDictionary>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    uint64_t v8 = v7;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint8_t *v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v7, v8);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint8_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (uint64_t *)(v2[7] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    char v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer), &demangling cache variable for type metadata for _DictionaryStorage<UUID, TUConversationActivitySessionContainer>);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CIImageRepresentationOption, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v6, (uint64_t)&v13, (uint64_t *)&demangling cache variable for type metadata for (CIImageRepresentationOption, Any));
    uint64_t v7 = v13;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    unint64_t v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplatePreferenceOutput>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v21 = v2 + 64;
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v22 = v4;
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    uint64_t v9 = *((unsigned char *)v5 + 8);
    uint64_t v10 = v5[2];
    unint64_t v11 = v5[3];
    uint64_t v12 = v5[4];
    uint64_t v13 = *((unsigned char *)v5 + 40);
    swift_bridgeObjectRetain();
    outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v10, v11, v12, v13);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v15) {
      break;
    }
    *(void *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v16 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v16 = v6;
    v16[1] = v7;
    uint64_t v17 = v3[7] + 48 * result;
    *(void *)uint64_t v17 = v8;
    *(unsigned char *)(v17 + 8) = v9;
    *(void *)(v17 + 16) = v10;
    *(void *)(v17 + 24) = v11;
    *(void *)(v17 + 32) = v12;
    *(unsigned char *)(v17 + 40) = v13;
    uint64_t v18 = v3[2];
    uint64_t v19 = __OFADD__(v18, 1);
    BOOL v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v5 += 8;
    v3[2] = v20;
    uint64_t v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint8_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    char v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplatePreference>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (char *)(a1 + 57);
  while (1)
  {
    uint64_t v5 = *(void *)(v4 - 25);
    uint64_t v6 = *(void *)(v4 - 17);
    uint64_t v7 = *(void *)(v4 - 9);
    uint64_t v8 = *(v4 - 1);
    uint64_t v9 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v12 = v5;
    v12[1] = v6;
    uint64_t v13 = v2[7] + 16 * result;
    *(void *)uint64_t v13 = v7;
    *(unsigned char *)(v13 + 8) = v8;
    *(unsigned char *)(v13 + 9) = v9;
    uint64_t v14 = v2[2];
    char v15 = __OFADD__(v14, 1);
    unint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4 += 32;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, SystemCoordinatorConfiguration), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorConfiguration>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, TopicManager.ConversationClient), &demangling cache variable for type metadata for _DictionaryStorage<UUID, TopicManager.ConversationClient>);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 v13[8];
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<TopicManager.ServiceName, TopicManager.ConversationClient.Service>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v6, (uint64_t)v13, &demangling cache variable for type metadata for (TopicManager.ServiceName, TopicManager.ConversationClient.Service));
    uint64_t v7 = v13[0];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13[0]);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v7;
    unint64_t result = outlined init with take of TopicManager.ConversationClient.Service((uint64_t)&v14, v3[7] + 48 * result);
    uint64_t v10 = v3[2];
    unint64_t v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  long long v7;
  char v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _OWORD *v14;
  char v15;
  long long v16;
  long long v17;

  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, GroupSessionMessenger.MessageStreamStore.Storage>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v16 = *(_OWORD *)(a1 + 48);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  uint64_t v7 = v16;
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v9 = (_OWORD *)(a1 + 80);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    uint64_t v10 = v3[7] + 24 * result;
    *(void *)uint64_t v10 = v5;
    *(_OWORD *)(v10 + 8) = v7;
    unint64_t v11 = v3[2];
    uint64_t v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 2;
    uint64_t v4 = *((void *)v9 - 2);
    uint64_t v5 = *((void *)v9 - 1);
    uint64_t v17 = *v9;
    swift_retain();
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    uint64_t v9 = v14;
    uint64_t v7 = v17;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for InternalGroupSessionProvider.groupSessionTable.getter in conformance ConversationManager()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t ConversationManager.groupSessionTable.getter()
{
  if (*(void *)(v0 + 88))
  {
    uint64_t v1 = *(void *)(v0 + 88);
  }
  else
  {
    type metadata accessor for GroupSessionTable();
    uint64_t v1 = swift_allocObject();
    type metadata accessor for Lock();
    swift_allocObject();
    *(void *)(v1 + 16) = Lock.init()();
    *(void *)(v1 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    *(void *)(v0 + 88) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

Swift::Void __swiftcall GroupSessionTable.cleanUpIfNotPresent(_:)(Swift::OpaquePointer a1)
{
}

uint64_t type metadata accessor for GroupSessionTable()
{
  return self;
}

double static GroupActivity.sessions()@<D0>(uint64_t a1@<X8>)
{
  GroupSessionObserver.init(for:)((uint64_t)v8);
  v6[0] = v8[0];
  v6[1] = v8[1];
  uint64_t v7 = v9;
  uint64_t v2 = type metadata accessor for GroupSessionObserver();
  swift_getWitnessTable();
  _PublisherElements.init(_:)((uint64_t)v6, v2, (uint64_t)v10);
  uint64_t v3 = v11;
  double result = *(double *)v10;
  long long v5 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v3;
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _PublisherElements.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t GroupSession.Sessions.makeAsyncIterator()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for GroupSessionObserver();
  swift_getWitnessTable();
  type metadata accessor for _PublisherElements();
  uint64_t result = _PublisherElements.makeAsyncIterator()();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for _PublisherElements()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized _PublisherElements.Iterator.init(_:)()
{
  type metadata accessor for _PublisherElements.Iterator.Inner();
  uint64_t v0 = swift_allocObject();
  _PublisherElements.Iterator.Inner.init()();
  swift_getWitnessTable();
  Publisher.subscribe<A>(_:)();
  return v0;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance GroupSessionObserver<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return GroupSessionObserver.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata accessor for _PublisherElements.Iterator.Inner()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _PublisherElements.Iterator.Inner.init()()
{
  *(void *)(v0 + 16) = swift_slowAlloc();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  *(void *)(v0 + 24) = Array.init()();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = static Subscribers.Demand.none.getter();
  **(_DWORD **)(v0 + 16) = 0;
  return v0;
}

uint64_t _PublisherElements.makeAsyncIterator()()
{
  return specialized _PublisherElements.Iterator.init(_:)();
}

uint64_t GroupSession.Sessions.Iterator.next()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  type metadata accessor for GroupSessionObserver();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for _PublisherElements.Iterator();
  *uint64_t v1 = v0;
  v1[1] = GroupSession.Sessions.Iterator.next();
  return _PublisherElements.Iterator.next()(v0 + 16, v2);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](GroupSession.Sessions.Iterator.next(), 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

void type metadata completion function for GroupSession()
{
  type metadata accessor for Participant();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F)
    {
      type metadata accessor for GroupSession.State();
      type metadata accessor for Published();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Published();
        if (v3 <= 0x3F)
        {
          type metadata accessor for Published<Set<Participant>>();
          if (v4 <= 0x3F)
          {
            type metadata accessor for GroupSession.Timestamps();
            if (v5 <= 0x3F) {
              swift_initClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Participant()
{
  uint64_t result = type metadata singleton initialization cache for Participant;
  if (!type metadata singleton initialization cache for Participant) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for GroupSession.State()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Published<Set<Participant>>()
{
  if (!lazy cache variable for type metadata for Published<Set<Participant>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<Participant>);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Set<Participant>>);
    }
  }
}

uint64_t type metadata accessor for GroupSession.Timestamps()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for GroupSessionObserver()
{
  return __swift_instantiateGenericMetadata();
}

double GroupSessionObserver.init(for:)@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  unint64_t v2 = (void *)static OS_dispatch_queue.main.getter();
  GroupSessionObserver.init(for:queue:)(v2, v6);
  uint64_t v3 = v7;
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v3;
  return result;
}

uint64_t GroupSessionObserver.init(for:queue:)@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.client);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = v15;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2112;
    id v12 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl(&dword_1A375F000, v6, v7, "Initialized observer for %s on queue: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v15, -1, -1);
    MEMORY[0x1A624F870](v8, -1, -1);
  }
  else
  {
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v13 = static ConversationManager.shared;
  *a2 = v5;
  a2[1] = v13;
  a2[2] = &protocol witness table for ConversationManager;
  a2[3] = protocol witness for static GroupActivity._identifiable(by:) in conformance AnyGroupActivity;
  a2[4] = 0;
  return swift_retain();
}

uint64_t type metadata accessor for _PublisherElements.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

void closure #1 in GroupSessionObserver.receive<A>(subscriber:)()
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v8 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    type metadata accessor for UUID();
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    swift_bridgeObjectRetain();
    uint64_t v5 = Dictionary.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v1, v2, "Received updated conversation containers: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v4, -1, -1);
    MEMORY[0x1A624F870](v3, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void closure #11 in GroupSessionObserver.receive<A>(subscriber:)()
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    os_log_type_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v3 = swift_slowAlloc();
    uint64_t v7 = v3;
    *(_DWORD *)os_log_type_t v2 = 136315138;
    uint64_t v4 = Subscribers.Demand.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, oslog, v1, "Received request for next activity session with demand: %s", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v3, -1, -1);
    MEMORY[0x1A624F870](v2, -1, -1);
  }
  else
  {
  }
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_5(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #5 in GroupSessionObserver.receive<A>(subscriber:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<GroupSession<AnyGroupActivity>>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v21 - v9;
  uint64_t v11 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (!v12)
  {
LABEL_15:
    uint64_t v23 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Just<GroupSession<AnyGroupActivity>>]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<GroupSession<AnyGroupActivity>> and conformance Just<A>, &demangling cache variable for type metadata for Just<GroupSession<AnyGroupActivity>>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [Just<GroupSession<AnyGroupActivity>>] and conformance [A], &demangling cache variable for type metadata for [Just<GroupSession<AnyGroupActivity>>]);
    return Publishers.MergeMany.init<A>(_:)();
  }
  uint64_t v23 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    v21[1] = a2;
    uint64_t v13 = v23;
    if ((v11 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v22 = MEMORY[0x1A624E900](i, v11);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>);
        Just.init(_:)();
        uint64_t v23 = v13;
        unint64_t v17 = *(void *)(v13 + 16);
        unint64_t v16 = *(void *)(v13 + 24);
        if (v17 >= v16 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
          uint64_t v13 = v23;
        }
        *(void *)(v13 + 16) = v17 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v17, v10, v4);
      }
    }
    else
    {
      uint64_t v18 = (uint64_t *)(v11 + 32);
      do
      {
        uint64_t v22 = *v18;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>);
        Just.init(_:)();
        uint64_t v23 = v13;
        unint64_t v20 = *(void *)(v13 + 16);
        unint64_t v19 = *(void *)(v13 + 24);
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          uint64_t v13 = v23;
        }
        *(void *)(v13 + 16) = v20 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v20, v8, v4);
        ++v18;
        --v12;
      }
      while (v12);
    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t specialized GroupStateObserver.init(conversationManagerClient:queue:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v62 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  v59 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  v60 = (char *)&v44 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v10 - 8);
  v54 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>);
  uint64_t v45 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  v44 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>);
  uint64_t v48 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  unint64_t v47 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, OS_dispatch_queue>);
  uint64_t v53 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  v52 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, Bool>);
  uint64_t v57 = *(void *)(v16 - 8);
  uint64_t v58 = v16;
  MEMORY[0x1F4188790](v16);
  v56 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v64 = a1;
  uint64_t v51 = a3;
  uint64_t v22 = a3 + OBJC_IVAR____TtC15GroupActivities18GroupStateObserver__isEligibleForGroupSession;
  LOBYTE(v63) = 0;
  Published.init(initialValue:)();
  uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  uint64_t v46 = v22;
  uint64_t v49 = v18;
  v23(v22, v21, v18);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.client);
  uint64_t v25 = a2;
  char v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    BOOL v29 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 138412290;
    uint64_t v63 = (uint64_t)v25;
    uint64_t v30 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *BOOL v29 = v25;

    _os_log_impl(&dword_1A375F000, v26, v27, "Initialized group state observer on queue: %@", v28, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v29, -1, -1);
    MEMORY[0x1A624F870](v28, -1, -1);
  }
  else
  {

    char v26 = v25;
  }

  type metadata accessor for ConversationManagerClient();
  uint64_t v63 = dispatch thunk of ActivitySessionContainerProvider.onActivitySessionsChanged.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  char v31 = v56;
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, Bool> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, Bool>);
  uint64_t v32 = v58;
  uint64_t v63 = Publisher.eraseToAnyPublisher()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  char v33 = v44;
  Publisher<>.removeDuplicates()();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>);
  uint64_t v34 = v47;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v12);
  uint64_t v63 = (uint64_t)v25;
  uint64_t v35 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v36 = (uint64_t)v54;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v54, 1, 1, v35);
  type metadata accessor for OS_dispatch_queue();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  uint64_t v37 = v52;
  uint64_t v38 = v50;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v36, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v34, v38);
  swift_beginAccess();
  uint64_t v39 = v60;
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, OS_dispatch_queue>);
  uint64_t v40 = v55;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v37, v40);
  uint64_t v41 = v61;
  uint64_t v42 = v62;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v59, v39, v62);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v42);

  swift_release();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v31, v32);

  return v51;
}

uint64_t GroupSessionObserver.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v100 = a3;
  uint64_t v101 = a4;
  uint64_t v99 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v6 - 8);
  v98 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>);
  uint64_t v75 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76);
  v74 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>, Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>>);
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  v78 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Filter<Publishers.FlatMap<Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>, Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>>>);
  uint64_t v84 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  v83 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v14 = type metadata accessor for GroupSession();
  uint64_t v15 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Filter<Publishers.FlatMap<Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>, Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>>> and conformance Publishers.Filter<A>, &demangling cache variable for type metadata for Publishers.Filter<Publishers.FlatMap<Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>, Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>>>);
  uint64_t v85 = v10;
  uint64_t v79 = v14;
  uint64_t v77 = v15;
  uint64_t v16 = type metadata accessor for Publishers.CompactMap();
  uint64_t v93 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  v90 = (char *)&v69 - v17;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v94 = v16;
  uint64_t v82 = WitnessTable;
  uint64_t v19 = type metadata accessor for Publishers.HandleEvents();
  uint64_t v96 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  v95 = (char *)&v69 - v20;
  uint64_t v21 = type metadata accessor for OS_dispatch_queue(255, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v22 = swift_getWitnessTable();
  unint64_t v23 = lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  uint64_t v97 = v19;
  *(void *)&long long v103 = v19;
  *((void *)&v103 + 1) = v21;
  uint64_t v89 = v21;
  uint64_t v87 = v22;
  *(void *)&long long v104 = v22;
  *((void *)&v104 + 1) = v23;
  unint64_t v86 = v23;
  uint64_t v24 = type metadata accessor for Publishers.ReceiveOn();
  uint64_t v91 = *(void *)(v24 - 8);
  uint64_t v92 = v24;
  MEMORY[0x1F4188790](v24);
  v88 = (char *)&v69 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>>);
  uint64_t v70 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>>, [Conversation]>);
  uint64_t v71 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  char v31 = (char *)&v69 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>>, [GroupSession<AnyGroupActivity>]>);
  uint64_t v72 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73);
  char v33 = (char *)&v69 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v34 = v4[1];
  long long v103 = *v4;
  long long v104 = v34;
  uint64_t v105 = *((void *)v4 + 4);
  uint64_t v35 = (void *)*((void *)&v103 + 1);
  uint64_t v36 = v34;
  uint64_t ObjectType = swift_getObjectType();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if (v35 == static ConversationManager.shared)
  {
    type metadata accessor for ConversationManagerClient();
    id v69 = (id)static ConversationManagerClient.shared.getter();
    id v102 = (id)ConversationManagerClient.onActivitySessionsChanged.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
    Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Conversation]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>>);
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v28, v26);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSession<AnyGroupActivity>]);
    Publishers.Map.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v31, v29);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>>, [GroupSession<AnyGroupActivity>]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>>, [GroupSession<AnyGroupActivity>]>);
    uint64_t v39 = v73;
    uint64_t v38 = (void *)Publisher.eraseToAnyPublisher()();

    (*(void (**)(char *, uint64_t))(v72 + 8))(v33, v39);
  }
  else
  {
    uint64_t v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v36 + 16))(ObjectType, v36);
  }
  id v102 = v38;
  uint64_t v40 = swift_allocObject();
  uint64_t v73 = (uint64_t)v38;
  uint64_t v42 = v100;
  uint64_t v41 = v101;
  *(void *)(v40 + 16) = v13;
  *(void *)(v40 + 24) = v42;
  *(void *)(v40 + 32) = v12;
  *(void *)(v40 + 40) = v41;
  long long v43 = v104;
  *(_OWORD *)(v40 + 48) = v103;
  *(_OWORD *)(v40 + 64) = v43;
  *(void *)(v40 + 80) = v105;
  swift_retain();
  outlined retain of GroupSessionObserver<A>((id *)&v103);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[GroupSession<AnyGroupActivity>], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[GroupSession<AnyGroupActivity>], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[GroupSession<AnyGroupActivity>], Never>);
  v44 = v74;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  static Subscribers.Demand.unlimited.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>> and conformance Publishers.MergeMany<A>, &demangling cache variable for type metadata for Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>);
  uint64_t v45 = v78;
  uint64_t v46 = v76;
  Publisher<>.flatMap<A>(maxPublishers:_:)();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v44, v46);
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = v13;
  *(void *)(v47 + 24) = v42;
  *(void *)(v47 + 32) = v12;
  *(void *)(v47 + 40) = v41;
  long long v48 = v104;
  *(_OWORD *)(v47 + 48) = v103;
  *(_OWORD *)(v47 + 64) = v48;
  *(void *)(v47 + 80) = v105;
  outlined retain of GroupSessionObserver<A>((id *)&v103);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>, Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>, Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>>);
  uint64_t v49 = v83;
  uint64_t v50 = v81;
  Publisher.filter(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v45, v50);
  uint64_t v51 = (void *)v103;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = v13;
  *(void *)(v52 + 24) = v42;
  *(void *)(v52 + 32) = v12;
  *(void *)(v52 + 40) = v41;
  long long v53 = v104;
  *(_OWORD *)(v52 + 48) = v103;
  *(_OWORD *)(v52 + 64) = v53;
  *(void *)(v52 + 80) = v105;
  *(void *)(v52 + 88) = v51;
  outlined retain of GroupSessionObserver<A>((id *)&v103);
  id v54 = v51;
  uint64_t v55 = v90;
  uint64_t v56 = v85;
  Publisher.compactMap<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v49, v56);
  uint64_t v57 = (void *)swift_allocObject();
  v57[2] = v13;
  v57[3] = v42;
  v57[4] = v12;
  v57[5] = v41;
  uint64_t v58 = (void *)swift_allocObject();
  v58[2] = v13;
  v58[3] = v42;
  v58[4] = v12;
  v58[5] = v41;
  v59 = (void *)swift_allocObject();
  v59[2] = v13;
  v59[3] = v42;
  v59[4] = v12;
  v59[5] = v41;
  uint64_t v60 = v94;
  uint64_t v61 = v95;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v93 + 8))(v55, v60);
  id v102 = v54;
  uint64_t v62 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v63 = (uint64_t)v98;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v98, 1, 1, v62);
  id v64 = v54;
  v65 = v88;
  uint64_t v66 = v97;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v63);

  (*(void (**)(char *, uint64_t))(v96 + 8))(v61, v66);
  uint64_t v67 = v92;
  Publishers.ReceiveOn.receive<A>(subscriber:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v65, v67);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for GroupSession()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

id *outlined retain of GroupSessionObserver<A>(id *a1)
{
  id v2 = *a1;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for OS_dispatch_queue(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue)
  {
    type metadata accessor for OS_dispatch_queue(255, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue);
  }
  return result;
}

uint64_t outlined destroy of OS_dispatch_queue.SchedulerOptions?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of OS_dispatch_queue.SchedulerOptions?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t GroupStateObserver.__allocating_init()()
{
  type metadata accessor for OS_dispatch_queue();
  uint64_t v0 = (void *)static OS_dispatch_queue.main.getter();
  type metadata accessor for ConversationManagerClient();
  uint64_t v1 = (void *)static ConversationManagerClient.shared.getter();
  uint64_t v2 = swift_allocObject();

  return specialized GroupStateObserver.init(conversationManagerClient:queue:)(v1, v0, v2);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t objectdestroy_2Tm(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v1, a1, 7);
}

uint64_t objectdestroy_2Tm_0()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 88, 7);
}

void partial apply for closure #10 in GroupSessionObserver.receive<A>(subscriber:)()
{
}

uint64_t type metadata accessor for GroupStateObserver()
{
  uint64_t result = type metadata singleton initialization cache for GroupStateObserver;
  if (!type metadata singleton initialization cache for GroupStateObserver) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t withUnsafeContinuation<A>(isolation:_:)()
{
  uint64_t v1 = (void (*)(uint64_t))v0[11];
  uint64_t v2 = v0[10];
  v0[2] = v0;
  v0[7] = v2;
  v0[3] = withUnsafeContinuation<A>(isolation:_:);
  uint64_t v3 = swift_continuation_init();
  v1(v3);
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(*(void *)v0 + 8);
  return v1();
}

void partial apply for closure #1 in _PublisherElements.Iterator.Inner.next()(uint64_t a1)
{
  closure #1 in _PublisherElements.Iterator.Inner.next()(a1, v1);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance _PublisherElements<A>.Iterator.Inner(void *a1)
{
  return _PublisherElements.Iterator.Inner.receive(subscription:)(a1);
}

uint64_t _PublisherElements.Iterator.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for _PublisherElements.Iterator.Inner.State();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v10, v1 + 32, v4);
  uint64_t v6 = v11;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v10, v4);
  if (v6)
  {
    os_unfair_lock_unlock(v3);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    return dispatch thunk of Cancellable.cancel()();
  }
  else
  {
    outlined init with copy of AudioSessionAssertionManager((uint64_t)a1, (uint64_t)v10);
    swift_beginAccess();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 40))(v1 + 32, v10, v4);
    swift_endAccess();
    swift_beginAccess();
    unint64_t v8 = *(void *)(v1 + 72);
    *(void *)(v1 + 72) = static Subscribers.Demand.none.getter();
    os_unfair_lock_unlock(v3);
    unint64_t v9 = static Subscribers.Demand.none.getter();
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0
      || (static Subscribers.Demand.unlimited.getter(),
          uint64_t result = static Subscribers.Demand.== infix(_:_:)(),
          (result & 1) == 0))
    {
      static Subscribers.Demand.unlimited.getter();
      if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0
        || (static Subscribers.Demand.unlimited.getter(),
            uint64_t result = static Subscribers.Demand.== infix(_:_:)(),
            (result & 1) == 0)
        && v9 < v8)
      {
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        return dispatch thunk of Subscription.request(_:)();
      }
    }
  }
  return result;
}

uint64_t outlined init with copy of AudioSessionAssertionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t destroy for _PublisherElements.Iterator.Inner.State(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  return a1;
}

uint64_t assignWithTake for _PublisherElements.Iterator.Inner.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

void closure #1 in _PublisherElements.Iterator.Inner.next()(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)v14 - v7;
  unint64_t v9 = *(os_unfair_lock_s **)(a2 + 16);
  os_unfair_lock_lock(v9);
  swift_beginAccess();
  uint64_t v10 = type metadata accessor for _PublisherElements.Iterator.Inner.State();
  (*(void (**)(long long *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(&v16, a2 + 32, v10);
  if (!v17)
  {
    v14[1] = a1;
    swift_beginAccess();
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    uint64_t v11 = (uint64_t *)(a2 + 72);
    swift_beginAccess();
    uint64_t v12 = *(void *)(a2 + 72);
    static Subscribers.Demand.unlimited.getter();
    if (static Subscribers.Demand.== infix(_:_:)()) {
      goto LABEL_8;
    }
    if (v12 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v13 = v12 + 1;
    if (__OFADD__(v12, 1)) {
LABEL_8:
    }
      uint64_t v13 = static Subscribers.Demand.unlimited.getter();
    uint64_t *v11 = v13;
    swift_endAccess();
    os_unfair_lock_unlock(v9);
    return;
  }
  if (v17 == 1)
  {
    os_unfair_lock_unlock(v9);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v8, 1, 1, AssociatedTypeWitness);
    (*(void (**)(void, char *, uint64_t))(v6 + 32))(*(void *)(*(void *)(a1 + 64) + 40), v8, v5);
    swift_continuation_resume();
  }
  else
  {
    outlined init with take of TypedPayloadDecoding(&v16, (uint64_t)v15);
    v14[4] = a1;
    swift_beginAccess();
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    os_unfair_lock_unlock(v9);
    __swift_project_boxed_opaque_existential_1(v15, v15[3]);
    dispatch thunk of Subscription.request(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
  }
}

uint64_t initializeWithCopy for _PublisherElements.Iterator.Inner.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t type metadata accessor for _PublisherElements.Iterator.Inner.State()
{
  return __swift_instantiateGenericMetadata();
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t one-time initialization function for shared()
{
  type metadata accessor for AVAudioSessionAssertionManager();
  uint64_t v0 = swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  uint64_t result = Lock.init()();
  uint64_t v2 = MEMORY[0x1E4FBC870];
  *(void *)(v0 + 16) = result;
  *(void *)(v0 + 24) = v2;
  static AVAudioSessionAssertionManager.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for SystemCoordinatorTable();
  uint64_t v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  *(void *)(v0 + 112) = MEMORY[0x1E4FBC868];
  static SystemCoordinatorTable.shared = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for BackgroundAudioSessionAssertionManager();
  uint64_t result = swift_initStaticObject();
  static BackgroundAudioSessionAssertionManager.shared = result;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for StaticGroupActivityRegistry();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC868];
  type metadata accessor for Lock();
  swift_allocObject();
  uint64_t result = Lock.init()();
  *(void *)(v0 + 24) = result;
  static StaticGroupActivityRegistry.shared = v0;
  return result;
}

void one-time initialization function for shared()
{
  type metadata accessor for ConversationManagerClient();
  uint64_t v0 = (void *)static ConversationManagerClient.shared.getter();
  type metadata accessor for ConversationManager();
  uint64_t v1 = swift_allocObject();
  id v2 = v0;
  unint64_t v3 = (void *)specialized ConversationManager.init(client:)((uint64_t)v2, v1);

  static ConversationManager.shared = v3;
}

uint64_t type metadata accessor for ConversationManager()
{
  return self;
}

uint64_t specialized ConversationManager.init(client:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = type metadata accessor for ConversationManagerClient();
  uint64_t v8 = MEMORY[0x1E4F5B040];
  *(void *)&long long v6 = a1;
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static AVAudioSessionAssertionManager.shared;
  *(void *)(a2 + 72) = type metadata accessor for AVAudioSessionAssertionManager();
  *(void *)(a2 + 80) = &protocol witness table for AVAudioSessionAssertionManager;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 136) = 0;
  outlined init with take of TypedPayloadDecoding(&v6, a2 + 96);
  swift_retain();
  return a2;
}

uint64_t type metadata accessor for AVAudioSessionAssertionManager()
{
  return self;
}

uint64_t outlined init with take of TypedPayloadDecoding(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t type metadata completion function for _PublisherElements.Iterator.Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for Participant()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for _PublisherElements()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata completion function for GroupActivityMetadata()
{
  type metadata accessor for GroupActivityDescription();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for URL?()
{
  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
    }
  }
}

void type metadata completion function for GroupStateObserver()
{
  type metadata accessor for Published<Bool>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for Published<Bool>()
{
  if (!lazy cache variable for type metadata for Published<Bool>)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>);
    }
  }
}

uint64_t closure #3 in GroupSessionObserver.receive<A>(subscriber:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (!((unint64_t)*a1 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x1E4FBC860];
LABEL_12:
    *a2 = v9;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = MEMORY[0x1A624E900](v6, v3);
      }
      else
      {
        uint64_t v7 = *(void *)(v3 + 8 * v6 + 32);
        swift_retain();
      }
      ++v6;
      unint64_t v8 = (*(uint64_t (**)(void))(*(void *)v7 + 320))();
      swift_release();
      specialized Array.append<A>(contentsOf:)(v8);
    }
    while (v4 != v6);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v9 = v10;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t withUnsafeContinuation<A>(isolation:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  return MEMORY[0x1F4188298](withUnsafeContinuation<A>(isolation:_:), v6, v8);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance GroupSession<A>.Sessions.Iterator(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  long long v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *long long v2 = v1;
  v2[1] = protocol witness for AsyncIteratorProtocol.next() in conformance GroupSession<A>.Sessions.Iterator;
  return GroupSession.Sessions.Iterator.next()();
}

{
  uint64_t *v1;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;

  uint64_t v3 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();
  void *v3 = a1;
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t partial apply for closure #2 in _PublisherElements.Iterator.next()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return MEMORY[0x1F4188298](closure #2 in _PublisherElements.Iterator.next(), 0, 0);
}

uint64_t partial apply for closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)()
{
  return closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _NativeDictionary.filter(_:)(v3, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Sequence.forEach(_:)(v4, (void (*)(char *, uint64_t))partial apply for closure #2 in closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:));
  return swift_release();
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x1A624F870](v11, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  void *v11;
  void v13[2];

  v13[1] = *MEMORY[0x1E4F143B8];
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x1A624F870](v11, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a2;
  uint64_t v29 = a4;
  unint64_t v23 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v24 = 0;
  uint64_t v25 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v6 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v26) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v23, v22, v24, (void *)a3);
    }
    unint64_t v19 = *(void *)(v25 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v26) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v23, v22, v24, (void *)a3);
      }
      unint64_t v19 = *(void *)(v25 + 8 * v10);
      if (!v19)
      {
        int64_t v10 = v18 + 2;
        if (v18 + 2 >= v26) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v23, v22, v24, (void *)a3);
        }
        unint64_t v19 = *(void *)(v25 + 8 * v10);
        if (!v19) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, *(void *)(a3 + 48) + *(void *)(v6 + 72) * v16, v5);
    outlined init with copy of GroupSessionTable.Storage(*(void *)(a3 + 56) + 24 * v16, (uint64_t)v28);
    char v17 = closure #1 in closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)((uint64_t)v9, (uint64_t)v28, v29);
    outlined destroy of weak SystemCoordinatorHostDelegate?((uint64_t)v28);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if (v17)
    {
      *(unint64_t *)((char *)v23 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v23, v22, v24, (void *)a3);
      }
    }
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v26) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v23, v22, v24, (void *)a3);
  }
  unint64_t v19 = *(void *)(v25 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v26) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v23, v22, v24, (void *)a3);
    }
    unint64_t v19 = *(void *)(v25 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  unint64_t v20;
  BOOL v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  void (*v26)(char *, unint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  id v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  void (**v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  int64_t v49;
  char *v50;
  uint64_t v51;

  uint64_t v37 = a2;
  uint64_t v38 = a1;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
  uint64_t v6 = MEMORY[0x1F4188790](v45);
  uint64_t v47 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v51 = (uint64_t)&v36 - v8;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = MEMORY[0x1F4188790](v9);
  uint64_t v50 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = 0;
  uint64_t v46 = (void *)a3;
  unint64_t v14 = *(void *)(a3 + 64);
  uint64_t v39 = 0;
  uint64_t v40 = a3 + 64;
  unint64_t v15 = 1 << *(unsigned char *)(a3 + 32);
  unint64_t v16 = -1;
  if (v15 < 64) {
    unint64_t v16 = ~(-1 << v15);
  }
  char v17 = v16 & v14;
  long long v43 = v11 + 16;
  v44 = v11;
  uint64_t v41 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v42 = (void (**)(char *, uint64_t))(v11 + 8);
  int64_t v18 = v51;
  while (1)
  {
    if (v17)
    {
      long long v48 = (v17 - 1) & v17;
      uint64_t v49 = v13;
      int64_t v20 = __clz(__rbit64(v17)) | (v13 << 6);
      goto LABEL_18;
    }
    uint64_t v21 = __OFADD__(v13, 1);
    uint64_t v22 = v13 + 1;
    if (v21)
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v41) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v38, v37, v39, v46, &demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
    }
    unint64_t v23 = *(void *)(v40 + 8 * v22);
    if (!v23) {
      break;
    }
LABEL_17:
    long long v48 = (v23 - 1) & v23;
    uint64_t v49 = v22;
    int64_t v20 = __clz(__rbit64(v23)) + (v22 << 6);
LABEL_18:
    uint64_t v25 = v46;
    int64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
    uint64_t v27 = v50;
    v26(v50, v46[6] + *(void *)(v44 + 72) * v20, v9);
    uint64_t v28 = *(void *)(v25[7] + 8 * v20);
    v26((char *)v18, (unint64_t)v27, v9);
    uint64_t v29 = *(int *)(v45 + 48);
    *(void *)(v18 + v29) = v28;
    uint64_t v30 = (uint64_t)v47;
    v26(v47, v18, v9);
    *(void *)(v30 + v29) = v28;
    char v31 = *(void *)(a4 + 16);
    swift_retain_n();
    if (v31 && (uint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30), (v33 & 1) != 0))
    {
      long long v34 = objc_msgSend(*(id *)(*(void *)(a4 + 56) + 8 * v32), sel_state);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v51, &demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
      uint64_t v35 = *v42;
      (*v42)(v47, v9);
      swift_release();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v50, v9);
      char v17 = v48;
      uint64_t v13 = v49;
      if (v34 == (id)4)
      {
        *(unint64_t *)((char *)v38 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
        uint64_t v21 = __OFADD__(v39++, 1);
        if (v21) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v51, &demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
      unint64_t v19 = *v42;
      (*v42)((char *)v30, v9);
      swift_release();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v50, v9);
      char v17 = v48;
      uint64_t v13 = v49;
    }
  }
  uint64_t v24 = v22 + 1;
  if (v22 + 1 >= v41) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v38, v37, v39, v46, &demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
  }
  unint64_t v23 = *(void *)(v40 + 8 * v24);
  if (v23) {
    goto LABEL_16;
  }
  uint64_t v24 = v22 + 2;
  if (v22 + 2 >= v41) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v38, v37, v39, v46, &demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
  }
  unint64_t v23 = *(void *)(v40 + 8 * v24);
  if (v23) {
    goto LABEL_16;
  }
  uint64_t v24 = v22 + 3;
  if (v22 + 3 >= v41) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v38, v37, v39, v46, &demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
  }
  unint64_t v23 = *(void *)(v40 + 8 * v24);
  if (v23)
  {
LABEL_16:
    uint64_t v22 = v24;
    goto LABEL_17;
  }
  while (1)
  {
    uint64_t v22 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v22 >= v41) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v38, v37, v39, v46, &demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
    }
    unint64_t v23 = *(void *)(v40 + 8 * v22);
    ++v24;
    if (v23) {
      goto LABEL_17;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v44 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v44);
  uint64_t v45 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v41 = (char *)&v36 - v10;
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionTable.Storage>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = result;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v39 = v42 + 32;
  uint64_t v40 = v42 + 16;
  uint64_t v15 = result + 64;
  uint64_t v38 = a4;
  uint64_t v16 = v44;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v43 = v14;
      unint64_t v18 = v17 | (v14 << 6);
    }
    else
    {
      uint64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v19 >= v37) {
        return v12;
      }
      unint64_t v20 = v36[v19];
      uint64_t v21 = v14 + 1;
      if (!v20)
      {
        uint64_t v21 = v14 + 2;
        if (v14 + 2 >= v37) {
          return v12;
        }
        unint64_t v20 = v36[v21];
        if (!v20)
        {
          uint64_t v21 = v14 + 3;
          if (v14 + 3 >= v37) {
            return v12;
          }
          unint64_t v20 = v36[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 4;
            if (v14 + 4 >= v37) {
              return v12;
            }
            unint64_t v20 = v36[v22];
            if (!v20)
            {
              while (1)
              {
                uint64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v21 >= v37) {
                  return v12;
                }
                unint64_t v20 = v36[v21];
                ++v22;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v21 = v14 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v20 - 1) & v20;
      uint64_t v43 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    uint64_t v24 = v41;
    uint64_t v23 = v42;
    uint64_t v25 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v41, a4[6] + v25 * v18, v16);
    outlined init with copy of GroupSessionTable.Storage(a4[7] + 24 * v18, (uint64_t)v47);
    int64_t v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v45, v24, v16);
    outlined init with take of GroupSessionTable.Storage((uint64_t)v47, (uint64_t)v46);
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    v26((char *)(*(void *)(v12 + 48) + v30 * v25), v45, v44);
    uint64_t result = outlined init with take of GroupSessionTable.Storage((uint64_t)v46, *(void *)(v12 + 56) + 24 * v30);
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v38;
    uint64_t v14 = v43;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _DictionaryStorage<UUID, TopicManager.ConversationClient>);
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: GroupSessionTable.Storage));
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v23 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v24 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v24) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v23 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v24) {
        return swift_release();
      }
      unint64_t v20 = *(void *)(v23 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v24) {
          return swift_release();
        }
        unint64_t v20 = *(void *)(v23 + 8 * v12);
        if (!v20)
        {
          int64_t v12 = v19 + 3;
          if (v19 + 3 >= v24) {
            return swift_release();
          }
          unint64_t v20 = *(void *)(v23 + 8 * v12);
          if (!v20) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v14 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v6, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v16);
    uint64_t v17 = *(void *)(a1 + 56) + 24 * v14;
    uint64_t v18 = (uint64_t)&v6[*(int *)(v4 + 48)];
    outlined init with copy of GroupSessionTable.Storage(v17, v18);
    a2(v6, v18);
    uint64_t result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: GroupSessionTable.Storage));
  }
  int64_t v21 = v19 + 4;
  if (v21 >= v24) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v24) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v23 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v22 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  uint64_t v23 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    uint64_t v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v23) {
      return swift_release();
    }
    int64_t v19 = *(void *)(v22 + 8 * v18);
    ++v12;
    if (!v19)
    {
      int64_t v12 = v18 + 1;
      if (v18 + 1 >= v23) {
        return swift_release();
      }
      int64_t v19 = *(void *)(v22 + 8 * v12);
      if (!v19)
      {
        int64_t v12 = v18 + 2;
        if (v18 + 2 >= v23) {
          return swift_release();
        }
        int64_t v19 = *(void *)(v22 + 8 * v12);
        if (!v19)
        {
          int64_t v12 = v18 + 3;
          if (v18 + 3 >= v23) {
            return swift_release();
          }
          int64_t v19 = *(void *)(v22 + 8 * v12);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v6, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v16);
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * v14);
    *(void *)&v6[*(int *)(v4 + 48)] = v17;
    swift_retain();
    a2(v6, v17);
    uint64_t result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
  }
  unint64_t v20 = v18 + 4;
  if (v20 >= v23) {
    return swift_release();
  }
  int64_t v19 = *(void *)(v22 + 8 * v20);
  if (v19)
  {
    int64_t v12 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v12 >= v23) {
      return swift_release();
    }
    int64_t v19 = *(void *)(v22 + 8 * v12);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *uint64_t v17 = v8;
  v17[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return MEMORY[0x1F4188148](a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t closure #2 in _PublisherElements.Iterator.next()()
{
  uint64_t v1 = **(void ***)(v0 + 24);
  *(void *)(v0 + 32) = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #2 in _PublisherElements.Iterator.next();
  v2[2] = *(void *)(v0 + 16);
  v2[3] = v1;
  v2[4] = *v1;
  return MEMORY[0x1F4188298](_PublisherElements.Iterator.Inner.next(), 0, 0);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t withTaskCancellationHandler<A>(handler:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = (char *)&async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)
      + async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  unint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *unint64_t v13 = v6;
  v13[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t))v15)(a1, a4, a5, a2, a3, 0, 0, a6);
}

uint64_t _PublisherElements.Iterator.Inner.next()()
{
  uint64_t v6 = (char *)&async function pointer to withUnsafeContinuation<A>(isolation:_:)
     + async function pointer to withUnsafeContinuation<A>(isolation:_:);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  *uint64_t v1 = v0;
  v1[1] = _PublisherElements.Iterator.Inner.next();
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  return ((uint64_t (*)(uint64_t, void, void, void (*)(uint64_t), uint64_t, uint64_t))v6)(v3, 0, 0, partial apply for closure #1 in _PublisherElements.Iterator.Inner.next(), v4, v2);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t closure #2 in GroupSessionObserver.receive<A>(subscriber:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v23 - v6;
  uint64_t v8 = swift_bridgeObjectRetain();
  specialized Sequence.filter(_:)(v8);
  unint64_t v10 = v9;
  uint64_t v27 = MEMORY[0x1E4FBC860];
  if (!(v9 >> 62))
  {
    uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v22 = MEMORY[0x1E4FBC860];
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v22;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v11 = result;
  if (!result) {
    goto LABEL_18;
  }
LABEL_3:
  if (v11 >= 1)
  {
    uint64_t v13 = 0;
    int64_t v24 = a1;
    unint64_t v25 = v10 & 0xC000000000000001;
    do
    {
      if (v25) {
        id v14 = (id)MEMORY[0x1A624E900](v13, v10);
      }
      else {
        id v14 = *(id *)(v10 + 8 * v13 + 32);
      }
      uint64_t v15 = v14;
      id v16 = objc_msgSend(v14, sel_UUID);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v17 = objc_msgSend(v15, sel_groupUUID);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      type metadata accessor for Conversation();
      swift_allocObject();
      Conversation.init(identifier:groupUUID:)((uint64_t)v7, (uint64_t)v5);
      swift_retain();
      id v18 = objc_msgSend(v15, sel_state);
      if ((unint64_t)v18 >= 5) {
        char v19 = 0;
      }
      else {
        char v19 = (char)v18;
      }
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(v26) = v19;
      swift_retain();
      static Published.subscript.setter();
      id v20 = objc_msgSend(v15, sel_localParticipantIdentifier);
      swift_getKeyPath();
      swift_getKeyPath();
      Swift::Int v26 = (Swift::Int)v20;
      swift_retain();
      static Published.subscript.setter();
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      Swift::Int v21 = specialized InternalGroupSessionProvider.groupSessions(for:)(v15);
      swift_getKeyPath();
      swift_getKeyPath();
      Swift::Int v26 = v21;
      swift_retain();
      static Published.subscript.setter();
      swift_release();

      MEMORY[0x1A624E0F0]();
      if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v13;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    while (v11 != v13);
    swift_bridgeObjectRelease();
    uint64_t v22 = v27;
    a1 = v24;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

void specialized Sequence.filter(_:)(uint64_t a1)
{
  int64_t v2 = 0;
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  if (v6) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v10 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v10 < v7)
    {
      unint64_t v11 = *(void *)(v3 + 8 * v10);
      ++v2;
      if (v11) {
        goto LABEL_22;
      }
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (v11) {
        goto LABEL_22;
      }
      int64_t v2 = v10 + 2;
      if (v10 + 2 >= v7) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (v11) {
        goto LABEL_22;
      }
      int64_t v2 = v10 + 3;
      if (v10 + 3 >= v7) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (v11)
      {
LABEL_22:
        unint64_t v6 = (v11 - 1) & v11;
        for (unint64_t i = __clz(__rbit64(v11)) + (v2 << 6); ; unint64_t i = v8 | (v2 << 6))
        {
          id v13 = *(id *)(*(void *)(a1 + 56) + 8 * i);
          if (objc_msgSend(v13, sel_state) == (id)3 && objc_msgSend(v13, sel_localParticipantIdentifier))
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            if (!v6) {
              goto LABEL_7;
            }
          }
          else
          {

            if (!v6) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v8 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      int64_t v12 = v10 + 4;
      if (v12 < v7)
      {
        unint64_t v11 = *(void *)(v3 + 8 * v12);
        if (v11)
        {
          int64_t v2 = v12;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v2 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            goto LABEL_29;
          }
          if (v2 >= v7) {
            break;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          ++v12;
          if (v11) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_27:
    swift_release();
    return;
  }
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t _PublisherElements.Iterator.next()()
{
  uint64_t v1 = v0[3];
  int64_t v2 = (uint64_t *)v0[4];
  uint64_t v3 = *v2;
  v0[5] = *v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  v4[2] = *(void *)(v1 + 16);
  v4[3] = *(void *)(v1 + 24);
  v4[4] = v2;
  unint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to withTaskCancellationHandler<A>(handler:operation:)
                                                                                    + async function pointer to withTaskCancellationHandler<A>(handler:operation:));
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  *uint64_t v5 = v0;
  v5[1] = _PublisherElements.Iterator.next();
  uint64_t v7 = v0[2];
  return v9(v7, (uint64_t)partial apply for closure #1 in _PublisherElements.Iterator.next(), v3, (uint64_t)&async function pointer to partial apply for closure #2 in _PublisherElements.Iterator.next(), (uint64_t)v4, v6);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void closure #2 in GroupStateObserver.init(conversationManagerClient:queue:)()
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    int64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)int64_t v2 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A375F000, oslog, v1, "Group session eligibility changed to new value: %{BOOL}d", v2, 8u);
    MEMORY[0x1A624F870](v2, -1, -1);
  }
  else
  {
  }
}

uint64_t storeEnumTagSinglePayload for GroupSession.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t GroupStateObserver.$isEligibleForGroupSession.getter()
{
  return swift_endAccess();
}

uint64_t closure #1 in GroupStateObserver.init(conversationManagerClient:queue:)@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: TUConversationActivitySessionContainer));
  uint64_t v3 = MEMORY[0x1F4188790](v45);
  uint64_t v44 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v42 = (char *)&v38 - v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v43 = (char *)&v38 - v7;
  uint64_t v8 = *a1;
  uint64_t v9 = *(void *)(*a1 + 64);
  uint64_t v40 = *a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v41 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v46 = v8;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  uint64_t v15 = (uint64_t)v42;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v47 = v14;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_5;
    }
    int64_t v33 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v33 >= v41) {
      goto LABEL_26;
    }
    unint64_t v34 = *(void *)(v40 + 8 * v33);
    int64_t v35 = v14 + 1;
    if (!v34)
    {
      int64_t v35 = v14 + 2;
      if (v14 + 2 >= v41) {
        goto LABEL_26;
      }
      unint64_t v34 = *(void *)(v40 + 8 * v35);
      if (!v34)
      {
        int64_t v35 = v14 + 3;
        if (v14 + 3 >= v41) {
          goto LABEL_26;
        }
        unint64_t v34 = *(void *)(v40 + 8 * v35);
        if (!v34)
        {
          int64_t v35 = v14 + 4;
          if (v14 + 4 >= v41) {
            goto LABEL_26;
          }
          unint64_t v34 = *(void *)(v40 + 8 * v35);
          if (!v34)
          {
            int64_t v35 = v14 + 5;
            if (v14 + 5 >= v41) {
              goto LABEL_26;
            }
            unint64_t v34 = *(void *)(v40 + 8 * v35);
            if (!v34)
            {
              uint64_t v36 = v14 + 6;
              if (v14 + 6 >= v41)
              {
LABEL_26:
                char v37 = 0;
                goto LABEL_27;
              }
              unint64_t v34 = *(void *)(v40 + 8 * v36);
              if (!v34)
              {
                while (1)
                {
                  int64_t v35 = v36 + 1;
                  if (__OFADD__(v36, 1)) {
                    goto LABEL_29;
                  }
                  if (v35 >= v41) {
                    goto LABEL_26;
                  }
                  unint64_t v34 = *(void *)(v40 + 8 * v35);
                  ++v36;
                  if (v34) {
                    goto LABEL_24;
                  }
                }
              }
              int64_t v35 = v14 + 6;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v12 = (v34 - 1) & v34;
    int64_t v47 = v35;
    unint64_t v17 = __clz(__rbit64(v34)) + (v35 << 6);
LABEL_5:
    uint64_t v18 = v46;
    uint64_t v19 = *(void *)(v46 + 48);
    uint64_t v20 = type metadata accessor for UUID();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = v21;
    uint64_t v23 = v19 + *(void *)(v21 + 72) * v17;
    int64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    uint64_t v25 = (uint64_t)v43;
    v24(v43, v23, v20);
    Swift::Int v26 = *(void **)(*(void *)(v18 + 56) + 8 * v17);
    uint64_t v27 = v45;
    *(void *)(v25 + *(int *)(v45 + 48)) = v26;
    outlined init with take of (key: UUID, value: TUConversationActivitySessionContainer)(v25, v15);
    uint64_t v28 = *(int *)(v27 + 48);
    unint64_t v29 = v44;
    v24(v44, v15, v20);
    unint64_t v30 = *(void **)(v15 + v28);
    *(void *)&v29[v28] = v30;
    id v31 = v26;
    id v32 = objc_msgSend(v30, sel_state);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v29, v20);
    uint64_t result = outlined destroy of OS_dispatch_queue.SchedulerOptions?(v15, &demangling cache variable for type metadata for (key: UUID, value: TUConversationActivitySessionContainer));
    int64_t v14 = v47;
    if (v32 == (id)3)
    {
      char v37 = 1;
LABEL_27:
      uint64_t result = swift_release();
      *uint64_t v39 = v37;
      return result;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void closure #10 in GroupSessionObserver.receive<A>(subscriber:)()
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    int64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v3 = swift_slowAlloc();
    uint64_t v7 = v3;
    *(_DWORD *)int64_t v2 = 136315138;
    uint64_t v4 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, oslog, v1, "Received cancel on observer for activity type: %s", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v3, -1, -1);
    MEMORY[0x1A624F870](v2, -1, -1);
  }
  else
  {
  }
}

id lpLog()
{
  if (lpLog_once != -1) {
    dispatch_once(&lpLog_once, &__block_literal_global);
  }
  uint64_t v0 = (void *)lpLog_log;

  return v0;
}

uint64_t __lpLog_block_invoke()
{
  lpLog_log = (uint64_t)os_log_create("com.apple.groupactivities", "LinkPresentationSupport");

  return MEMORY[0x1F41817F8]();
}

id SystemCoordinatorHost.currentState.getter()
{
  os_log_type_t v1 = (void **)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
  swift_beginAccess();
  int64_t v2 = *v1;

  return v2;
}

id key path getter for SystemCoordinatorHost.currentState : SystemCoordinatorHost@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  uint64_t v3 = (void **)(*a1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *a2 = *v3;

  return v4;
}

void key path setter for SystemCoordinatorHost.currentState : SystemCoordinatorHost(void **a1, void *a2)
{
  int64_t v2 = *a1;
  uint64_t v3 = (void **)(*a2 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
  swift_beginAccess();
  uint64_t v4 = *v3;
  void *v3 = v2;
  id v5 = v2;
  SystemCoordinatorHost.currentState.didset();
}

void SystemCoordinatorHost.currentState.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
  swift_beginAccess();
  uint64_t v4 = *v3;
  void *v3 = a1;
  id v5 = a1;
  SystemCoordinatorHost.currentState.didset();
}

void SystemCoordinatorHost.currentState.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (void *)((char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue);
  *id v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    uint64_t v8 = (id *)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
    swift_beginAccess();
    id v9 = *v8;
    type metadata accessor for SystemCoordinatorState();
    id v10 = v9;
    char v11 = static NSObject.== infix(_:_:)();

    if ((v11 & 1) == 0)
    {
      unint64_t v12 = (id *)(v1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection);
      swift_beginAccess();
      if (*v12)
      {
        id v13 = *v12;
        XPCHostConnection.clientObject.getter();

        int64_t v14 = (void *)v16[1];
        id v15 = *v8;
        objc_msgSend(v14, sel_updateState_, v15);

        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void (*SystemCoordinatorHost.currentState.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState;
  v3[4] = v1;
  v3[5] = v4;
  id v5 = (void **)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *v5;
  v3[3] = *v5;
  id v7 = v6;
  return SystemCoordinatorHost.currentState.modify;
}

void SystemCoordinatorHost.currentState.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  id v5 = (void **)(*(void *)a1 + 24);
  uint64_t v4 = *v5;
  uint64_t v7 = *(void *)(*(void *)a1 + 32);
  uint64_t v6 = *(void *)(*(void *)a1 + 40);
  uint64_t v8 = *(void **)(v7 + v6);
  *(void *)(v7 + v6) = *v5;
  id v9 = v4;
  id v10 = v9;
  if (a2)
  {
    id v11 = v9;
    SystemCoordinatorHost.currentState.didset();

    uint64_t v8 = *v5;
  }
  else
  {
    SystemCoordinatorHost.currentState.didset();
  }

  free(v3);
}

uint64_t SystemCoordinatorHost.configurationUpdateSubject.getter()
{
  return swift_retain();
}

uint64_t SystemCoordinatorHost.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_uuid;
  uint64_t v4 = type metadata accessor for UUID();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

id SystemCoordinatorHost.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue);
}

uint64_t key path getter for SystemCoordinatorHost.delegate : SystemCoordinatorHost@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1A624F980](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for SystemCoordinatorHost.delegate : SystemCoordinatorHost(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t SystemCoordinatorHost.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
  swift_beginAccess();
  return MEMORY[0x1A624F980](v1);
}

uint64_t SystemCoordinatorHost.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*SystemCoordinatorHost.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1A624F980](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SystemCoordinatorHost.delegate.modify;
}

void SystemCoordinatorHost.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

id SystemCoordinatorHost.endpoint.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_endpoint);
}

void *SystemCoordinatorHost.connection.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

id key path getter for SystemCoordinatorHost.connection : SystemCoordinatorHost@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  id v3 = (void **)(*a1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *a2 = *v3;

  return v4;
}

void key path setter for SystemCoordinatorHost.connection : SystemCoordinatorHost(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v3 = (void **)(*a2 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*v3)
  {
    id v5 = v2;
    id v6 = v4;
    dispatch thunk of XPCHostConnection.destroyConnection()();

    uint64_t v7 = *v3;
  }
  else
  {
    id v8 = v2;
    uint64_t v7 = 0;
  }
  void *v3 = v2;
}

void SystemCoordinatorHost.connection.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*v3)
  {
    id v5 = v4;
    dispatch thunk of XPCHostConnection.destroyConnection()();

    uint64_t v4 = *v3;
  }
  void *v3 = a1;
}

void (*SystemCoordinatorHost.connection.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection;
  v3[4] = v1;
  v3[5] = v4;
  id v5 = (void **)(v1 + v4);
  swift_beginAccess();
  id v6 = *v5;
  v3[3] = *v5;
  id v7 = v6;
  return SystemCoordinatorHost.connection.modify;
}

void SystemCoordinatorHost.connection.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = (void **)(*(void *)a1 + 24);
  id v3 = *v4;
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 40);
  id v7 = *(void **)(v6 + v5);
  if (a2)
  {
    id v8 = v3;
    if (v7)
    {
      id v9 = v7;
      dispatch thunk of XPCHostConnection.destroyConnection()();

      id v10 = *(void **)(v6 + v5);
      uint64_t v6 = v2[4];
      uint64_t v5 = v2[5];
    }
    else
    {
      id v10 = 0;
    }
    *(void *)(v6 + v5) = v3;

    unint64_t v12 = *v4;
  }
  else
  {
    if (v7)
    {
      id v11 = v7;
      dispatch thunk of XPCHostConnection.destroyConnection()();

      unint64_t v12 = *(void **)(v6 + v5);
      uint64_t v6 = v2[4];
      uint64_t v5 = v2[5];
    }
    else
    {
      unint64_t v12 = 0;
    }
    *(void *)(v6 + v5) = v3;
  }

  free(v2);
}

objc_class *SystemCoordinatorHost.__allocating_init(uuid:queue:configurationUpdatesRateLimit:)(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  id v8 = specialized SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(a1, a2, a3);

  return v8;
}

objc_class *SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = specialized SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(a1, a2, a3);

  return v4;
}

uint64_t specialized Publisher.dynamicThrottle<A>(for:after:scheduler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = a2;
  uint64_t v79 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Merge<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, Publishers.Throttle<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, OS_dispatch_queue>>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v75 = v5;
  uint64_t v76 = v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v73 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Throttle<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, OS_dispatch_queue>);
  uint64_t v74 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72);
  uint64_t v71 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v69 = v9;
  uint64_t v70 = v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v67 = (char *)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v66 = (char *)v52 - v13;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>);
  uint64_t v64 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v61 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v60 = *(void *)(v16 + 64);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  id v54 = (char *)v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  long long v53 = (char *)v52 - v19;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  MEMORY[0x1F4188790](v55);
  uint64_t v21 = (char *)v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>);
  uint64_t v68 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  uint64_t v77 = (char *)v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v25 = (char *)v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>);
  uint64_t v65 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  uint64_t v27 = (char *)v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = v3;
  uint64_t v84 = a3;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<SystemCoordinatorConfiguration, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<SystemCoordinatorConfiguration, Never>);
  uint64_t v78 = Publisher.share()();
  uint64_t v82 = v78;
  uint64_t v28 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v25, 1, 1, v28);
  v52[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>);
  unint64_t v58 = type metadata accessor for OS_dispatch_queue();
  uint64_t v56 = MEMORY[0x1E4F1A9D8];
  v52[2] = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>> and conformance Publishers.Share<A>, &demangling cache variable for type metadata for Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>);
  uint64_t v59 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (void (*)(uint64_t))type metadata accessor for OS_dispatch_queue);
  uint64_t v57 = v27;
  Publisher.measureInterval<A>(using:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v25, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type OS_dispatch_queue.SchedulerTimeType.Stride and conformance OS_dispatch_queue.SchedulerTimeType.Stride, MEMORY[0x1E4FBCC38]);
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  v21[*(int *)(v55 + 36)] = 0;
  unint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  unint64_t v30 = v53;
  v29(v53, v79, v15);
  id v31 = v54;
  v29(v54, v62, v15);
  uint64_t v32 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v33 = (v32 + 16) & ~v32;
  uint64_t v34 = (v60 + v32 + v33) & ~v32;
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = v35 + v33;
  char v37 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
  v37(v36, v30, v15);
  v37(v35 + v34, v31, v15);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue> and conformance Publishers.MeasureInterval<A, B>, &demangling cache variable for type metadata for Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>);
  Publisher.scan<A>(_:_:)();
  swift_release();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v21, &demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  uint64_t v82 = v78;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>> and conformance Publishers.Scan<A, B>, &demangling cache variable for type metadata for Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>);
  uint64_t v38 = v61;
  Publisher.zip<A>(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>> and conformance Publishers.Zip<A, B>, &demangling cache variable for type metadata for Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>);
  uint64_t v39 = v63;
  uint64_t v40 = Publisher.share()();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v38, v39);
  uint64_t v82 = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>);
  type metadata accessor for SystemCoordinatorConfiguration();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>> and conformance Publishers.Share<A>, &demangling cache variable for type metadata for Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>);
  int64_t v41 = v66;
  Publisher.compactMap<A>(_:)();
  uint64_t v82 = v40;
  uint64_t v42 = v67;
  Publisher.compactMap<A>(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>);
  uint64_t v43 = v71;
  uint64_t v44 = v69;
  Publisher.throttle<A>(for:scheduler:latest:)();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v70 + 8);
  v45(v42, v44);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Throttle<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, OS_dispatch_queue> and conformance Publishers.Throttle<A, B>, &demangling cache variable for type metadata for Publishers.Throttle<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, OS_dispatch_queue>);
  uint64_t v46 = v73;
  int64_t v47 = v43;
  uint64_t v48 = v72;
  Publisher.merge<A>(with:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Merge<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, Publishers.Throttle<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, OS_dispatch_queue>> and conformance Publishers.Merge<A, B>, &demangling cache variable for type metadata for Publishers.Merge<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, Publishers.Throttle<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, OS_dispatch_queue>>);
  uint64_t v49 = v75;
  uint64_t v50 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v46, v49);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v47, v48);
  v45(v41, v44);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v77, v81);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v57, v80);
  return v50;
}

void closure #1 in SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(void **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1A624F980](v3);
  if (v4)
  {
    uint64_t v5 = (char *)v4;
    if (one-time initialization token for systemCoordinator != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.systemCoordinator);
    id v7 = v2;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      v18[0] = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      type metadata accessor for SystemCoordinatorConfiguration();
      id v12 = v7;
      uint64_t v13 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v8, v9, "Updated configuration to %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v11, -1, -1);
      MEMORY[0x1A624F870](v10, -1, -1);
    }
    else
    {
    }
    uint64_t v15 = &v5[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate];
    swift_beginAccess();
    if (MEMORY[0x1A624F980](v15))
    {
      uint64_t v16 = *((void *)v15 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(char *, id, uint64_t, uint64_t))(v16 + 8))(v5, v7, ObjectType, v16);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

id SystemCoordinatorHost.__deallocating_deinit()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_listener], sel_invalidate);
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

Swift::Void __swiftcall SystemCoordinatorHost.invalidate()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v7 = v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
    swift_beginAccess();
    if (MEMORY[0x1A624F980](v7))
    {
      uint64_t v8 = *(void *)(v7 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v0, ObjectType, v8);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

id SystemCoordinatorHost.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void SystemCoordinatorHost.init()()
{
}

Swift::Bool __swiftcall SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

void closure #1 in SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:)(uint64_t a1, void *a2)
{
  uint64_t v3 = (void **)(a1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*v3)
  {
    id v5 = a2;
    id v6 = v4;
    dispatch thunk of XPCHostConnection.destroyConnection()();

    uint64_t v7 = *v3;
  }
  else
  {
    id v8 = a2;
    uint64_t v7 = 0;
  }
  objc_class *v3 = a2;
}

void SystemCoordinatorHost.provideCurrentState(_:)(void (*a1)(void))
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue);
  *id v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    os_log_type_t v9 = (id *)(v1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
    swift_beginAccess();
    id v10 = *v9;
    a1();
  }
  else
  {
    __break(1u);
  }
}

uint64_t default argument 5 of GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

id default argument 6 of LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F5B140]);

  return objc_msgSend(v0, sel_init);
}

void default argument 1 of GroupSession.sendResource(atURL:to:metadata:completion:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 1 of PlaybackSyncer.init(internalCoordinator:serialQueue:)()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t default argument 1 of AttachmentLedgerTopic.subscribe(with:pendingAttachments:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 0 of SystemCoordinatorConfiguration.init(supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:)()
{
  return 0;
}

uint64_t default argument 1 of SystemCoordinatorConfiguration.init(supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:)()
{
  return 0;
}

uint64_t default argument 4 of SystemCoordinatorConfiguration.init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)()
{
  return 0;
}

unint64_t default argument 5 of SystemCoordinatorConfiguration.init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
}

unint64_t default argument 6 of SystemCoordinatorConfiguration.init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
}

void default argument 0 of SystemCoordinatorConfiguration._SpatialTemplatePreference.init(_:)(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
}

uint64_t (*default argument 2 of GroupSessionTable.registerIfNotPresent<A>(identifier:initialValue:registrationHandler:)(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  return partial apply for closure #1 in default argument 2 of GroupSessionTable.registerIfNotPresent<A>(identifier:initialValue:registrationHandler:);
}

uint64_t specialized closure #1 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = a1;
  uint64_t v28 = a3;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v25 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  os_log_type_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v23 - v10;
  id v12 = (void (*)(uint64_t))MEMORY[0x1E4FBCC38];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type OS_dispatch_queue.SchedulerTimeType.Stride and conformance OS_dispatch_queue.SchedulerTimeType.Stride, MEMORY[0x1E4FBCC38]);
  char v13 = dispatch thunk of static Comparable.< infix(_:_:)();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type OS_dispatch_queue.SchedulerTimeType.Stride and conformance OS_dispatch_queue.SchedulerTimeType.Stride, v12);
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = v28;
    uint64_t result = dispatch thunk of static AdditiveArithmetic.zero.getter();
    char v21 = 0;
    uint64_t v17 = (int *)(v3 + 36);
    goto LABEL_8;
  }
  uint64_t v24 = v9;
  uint64_t v15 = v27;
  uint64_t v14 = v28;
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  char v16 = dispatch thunk of static Comparable.<= infix(_:_:)();
  outlined init with copy of PublishRate<OS_dispatch_queue>(v15, (uint64_t)v5);
  if ((v16 & 1) == 0)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v5, &demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
    uint64_t v19 = v25;
    goto LABEL_7;
  }
  uint64_t v17 = (int *)(v3 + 36);
  char v18 = v5[*(int *)(v3 + 36)];
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v5, &demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  uint64_t v19 = v25;
  if (v18)
  {
LABEL_7:
    uint64_t v22 = v24;
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v6);
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(v14, v22, v6);
    uint64_t v17 = (int *)(v3 + 36);
    char v21 = 1;
    goto LABEL_8;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v14, v11, v6);
  char v21 = 0;
LABEL_8:
  *(unsigned char *)(v14 + *v17) = v21;
  return result;
}

uint64_t default argument 0 of CGImageRef.thumbnailImageData(_:)()
{
  return 300;
}

uint64_t default argument 2 of BinaryDecoder.decode(_:encoding:delimiter:)()
{
  return 0;
}

uint64_t default argument 3 of AttachmentDownloadTask.init(topic:attachment:file:manager:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 3 of AttachmentDownloadTask.init(topic:attachment:file:manager:)(MEMORY[0x1E4F591B8], MEMORY[0x1E4F59190], (uint64_t)&protocol witness table for AssetManager, a1);
}

uint64_t default argument 2 of GroupSessionEvent.Action.init(eventType:item:queueItemType:)()
{
  return 0;
}

uint64_t default argument 0 of GroupSessionEvent.activitySessionEvent(hasPendingActivityUpdate:)()
{
  return 0;
}

uint64_t default argument 1 of AVAudioSessionAssertion.init(id:manager:)@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static AVAudioSessionAssertionManager.shared;
  a1[3] = type metadata accessor for AVAudioSessionAssertionManager();
  a1[4] = (uint64_t)&protocol witness table for AVAudioSessionAssertionManager;
  *a1 = v2;

  return swift_retain();
}

void default argument 1 of LinkManager.sendData(_:to:reliability:completion:)(void *a1@<X8>)
{
  *a1 = 0;
}

void default argument 2 of LinkManager.sendData(_:to:reliability:completion:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 4 of AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 3 of AttachmentDownloadTask.init(topic:attachment:file:manager:)(MEMORY[0x1E4F591B8], MEMORY[0x1E4F59190], (uint64_t)&protocol witness table for AssetManager, a1);
}

id default argument 0 of BackgroundGroupSessionManager.init(client:)()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BackgroundSessionManagerClient()), sel_init);
}

uint64_t default argument 0 of ConversationManager.init(client:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 3 of AttachmentDownloadTask.init(topic:attachment:file:manager:)(MEMORY[0x1E4F5B050], MEMORY[0x1E4F5B038], MEMORY[0x1E4F5B040], a1);
}

uint64_t default argument 3 of AttachmentDownloadTask.init(topic:attachment:file:manager:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = a1(0);
  uint64_t result = a2();
  a4[3] = v7;
  a4[4] = a3;
  *a4 = result;
  return result;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSURLResourceKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(a1, a2, MEMORY[0x1E4FBB198]);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TUConversationState(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSURLResourceKey(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSURLResourceKey(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSURLResourceKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = MEMORY[0x1A624DFA0](v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance TUConversationActivityEventType@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TUConversationState(void *a1, void *a2)
{
  return *a1 == *a2;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance SPAxis@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SPAxis(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SPAxis(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TUConversationActivityLifetimePolicy()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TUConversationActivityLifetimePolicy()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TUConversationActivityLifetimePolicy()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CGImageRef()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AVPlaybackCoordinatorPlaybackObjectCommand()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSURLResourceKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  uint64_t v3 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey and conformance AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey);
  uint64_t v3 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey and conformance AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AVPlaybackCoordinatorPlaybackObjectCommand(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorPlaybackObjectCommand and conformance AVPlaybackCoordinatorPlaybackObjectCommand, type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand);
  uint64_t v3 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorPlaybackObjectCommand and conformance AVPlaybackCoordinatorPlaybackObjectCommand, type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AVPlaybackCoordinationTransportControlStateKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, type metadata accessor for AVPlaybackCoordinationTransportControlStateKey);
  uint64_t v3 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, type metadata accessor for AVPlaybackCoordinationTransportControlStateKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AVPlaybackCoordinationParticipantStateKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, type metadata accessor for AVPlaybackCoordinationParticipantStateKey);
  uint64_t v3 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, type metadata accessor for AVPlaybackCoordinationParticipantStateKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AVPlaybackCoordinatorPlaybackObjectCommand@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1A624DFA0](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CIImageRepresentationOption(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
  uint64_t v3 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CGImageRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CGImageRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGImageRef()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSURLResourceKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSURLResourceKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

int *specialized thunk for @escaping @callee_guaranteed (@in_guaranteed PublishRate<A1>, @in_guaranteed A.Publisher.Output) -> (@out A.Publisher.Output?)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  if (*(unsigned char *)(a1 + result[9]))
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = *(void **)(a1
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PublishRate<OS_dispatch_queue>, SystemCoordinatorConfiguration))
                           + 48));
    uint64_t result = v5;
  }
  *a2 = v5;
  return result;
}

{
  int *result;
  void *v5;

  uint64_t result = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  if (*(unsigned char *)(a1 + result[9]) == 1)
  {
    uint64_t v5 = *(void **)(a1
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PublishRate<OS_dispatch_queue>, SystemCoordinatorConfiguration))
                           + 48));
    uint64_t result = v5;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  return result;
}

objc_class *specialized SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v63 = a3;
  uint64_t v65 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v60 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for DispatchTimeInterval();
  uint64_t v66 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v67 = *(void *)(v56 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v56);
  long long v53 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  id v54 = (char *)&v51 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Debounce<AnyPublisher<SystemCoordinatorConfiguration, Never>, OS_dispatch_queue>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v61 = v12;
  uint64_t v62 = v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v59 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState;
  char v16 = (objc_class *)type metadata accessor for SystemCoordinatorState.ParticipantState();
  uint64_t v17 = objc_allocWithZone(v16);
  v17[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = 0;
  v17[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = 0;
  char v18 = &v17[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  void *v18 = 0;
  v18[1] = 0;
  *(void *)&v17[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = 0;
  v72.receiver = v17;
  v72.super_class = v16;
  uint64_t v19 = v3;
  id v20 = objc_msgSendSuper2(&v72, sel_init);
  char v21 = (objc_class *)type metadata accessor for SystemCoordinatorState();
  uint64_t v22 = objc_allocWithZone(v21);
  *(void *)&v22[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = v20;
  v22[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = 3;
  *(void *)&v22[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = 0;
  v71.receiver = v22;
  v71.super_class = v21;
  *(void *)&v3[v15] = objc_msgSendSuper2(&v71, sel_init);
  uint64_t v23 = OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_configurationUpdateSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<SystemCoordinatorConfiguration, Never>);
  swift_allocObject();
  *(void *)&v19[v23] = PassthroughSubject.init()();
  *(void *)&v19[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v19[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_configurationUpdateSubscription] = 0;
  *(void *)&v19[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection] = 0;
  uint64_t v24 = &v19[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_uuid];
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v57 = v25;
  uint64_t v58 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v24, v65, v25);
  *(void *)&v19[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue] = a2;
  uint64_t v27 = self;
  id v28 = a2;
  id v29 = objc_msgSend(v27, sel_anonymousListener);
  *(void *)&v19[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_listener] = v29;
  id v30 = objc_msgSend(v29, sel_endpoint);
  *(void *)&v19[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_endpoint] = v30;

  v70.receiver = v19;
  v70.super_class = ObjectType;
  id v31 = objc_msgSendSuper2(&v70, sel_init);
  uint64_t v32 = type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0);
  uint64_t v34 = v63;
  uint64_t v33 = v64;
  uint64_t v36 = v66 + 16;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  v35(v8, v63 + *(int *)(v32 + 20), v64);
  uint64_t v52 = v35;
  uint64_t v66 = v36;
  uint64_t ObjectType = (objc_class *)v31;
  swift_retain();
  uint64_t v37 = (uint64_t)v54;
  OS_dispatch_queue.SchedulerTimeType.Stride.init(_:)();
  v35(v8, v34 + *(int *)(v32 + 24), v33);
  uint64_t v38 = (uint64_t)v53;
  OS_dispatch_queue.SchedulerTimeType.Stride.init(_:)();
  id v39 = v28;
  uint64_t v40 = specialized Publisher.dynamicThrottle<A>(for:after:scheduler:)(v37, v38, (uint64_t)v28);
  int64_t v41 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
  v67 += 8;
  uint64_t v42 = v56;
  v41(v38, v56);
  v41(v37, v42);
  swift_release();
  uint64_t v69 = v40;
  v52(v8, v34, v64);
  OS_dispatch_queue.SchedulerTimeType.Stride.init(_:)();
  id v68 = v39;
  uint64_t v43 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v44 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v60, 1, 1, v43);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<SystemCoordinatorConfiguration, Never>);
  type metadata accessor for OS_dispatch_queue();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<SystemCoordinatorConfiguration, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<SystemCoordinatorConfiguration, Never>);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (void (*)(uint64_t))type metadata accessor for OS_dispatch_queue);
  uint64_t v45 = v59;
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v44, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  v41(v37, v42);
  swift_release();
  swift_allocObject();
  uint64_t v46 = ObjectType;
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Debounce<AnyPublisher<SystemCoordinatorConfiguration, Never>, OS_dispatch_queue> and conformance Publishers.Debounce<A, B>, &demangling cache variable for type metadata for Publishers.Debounce<AnyPublisher<SystemCoordinatorConfiguration, Never>, OS_dispatch_queue>);
  uint64_t v47 = v61;
  uint64_t v48 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v45, v47);
  *(void *)((char *)v46 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_configurationUpdateSubscription) = v48;
  swift_release();
  uint64_t v49 = *(void **)((char *)v46 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_listener);
  objc_msgSend(v49, sel_setDelegate_, v46);
  objc_msgSend(v49, sel_resume);

  outlined destroy of SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(v63);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v65, v57);
  return v46;
}

BOOL specialized SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v35 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v32 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for systemCoordinator != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.systemCoordinator);
  id v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v31 = v4;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    id v30 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    aBlock[0] = v8;
    id v12 = v8;
    uint64_t v4 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v13 = v30;
    *id v30 = v8;

    _os_log_impl(&dword_1A375F000, v9, v10, "Asked to accept new connection from %@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v13, -1, -1);
    MEMORY[0x1A624F870](v11, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = *(void **)&v2[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue];
  id v15 = objc_allocWithZone((Class)type metadata accessor for SystemCoordinatorHostConnection());
  swift_unknownObjectWeakInit();
  id v16 = v8;
  v14;
  uint64_t v17 = (void *)XPCHostConnection.init(connection:queue:)();
  if (v17)
  {
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v2;
    *(void *)(v18 + 24) = v17;
    aBlock[4] = partial apply for closure #1 in SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_0;
    uint64_t v19 = _Block_copy(aBlock);
    id v20 = v2;
    id v21 = v17;
    uint64_t v22 = v32;
    static DispatchQoS.unspecified.getter();
    uint64_t v37 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v23 = v35;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A624E5F0](0, v22, v23, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v4);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v36);
    swift_release();
  }
  else
  {
    id v24 = v16;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 67109120;
      LODWORD(aBlock[0]) = objc_msgSend(v24, sel_processIdentifier);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1A375F000, v25, v26, "SystemCoordinatorHostConnection could not be created; rejecting connection from PID %d.",
        v27,
        8u);
      MEMORY[0x1A624F870](v27, -1, -1);
    }
    else
    {
    }
  }
  return v17 != 0;
}

uint64_t sub_1A376CE90()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in default argument 2 of GroupSessionTable.registerIfNotPresent<A>(identifier:initialValue:registrationHandler:)(uint64_t a1)
{
  return destructiveProjectEnumData for GroupSessionErrors(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t dispatch thunk of SystemCoordinatorHostDelegate.systemCoordinatorHost(_:didUpdateConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of SystemCoordinatorHostDelegate.systemCoordinatorHostDidInvalidate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t ObjC metadata update function for SystemCoordinatorHost()
{
  return type metadata accessor for SystemCoordinatorHost();
}

uint64_t type metadata accessor for SystemCoordinatorHost()
{
  uint64_t result = type metadata singleton initialization cache for SystemCoordinatorHost;
  if (!type metadata singleton initialization cache for SystemCoordinatorHost) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SystemCoordinatorHost()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SystemCoordinatorHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemCoordinatorHost);
}

uint64_t dispatch thunk of SystemCoordinatorHost.__allocating_init(uuid:queue:configurationUpdatesRateLimit:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

void type metadata accessor for TUConversationActivityLifetimePolicy(uint64_t a1)
{
}

void type metadata accessor for SPAxis(uint64_t a1)
{
}

void type metadata accessor for TUConversationActivityEventQueueItemType(uint64_t a1)
{
}

void type metadata accessor for TUConversationActivityEventType(uint64_t a1)
{
}

void type metadata accessor for TUConversationActivityContentAssociation(uint64_t a1)
{
}

__n128 __swift_memcpy32_4(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for audit_token_t(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
}

void type metadata accessor for SPAngle(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for SPVector3D(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_16(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SPVector3D(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for SPVector3D(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SPPose3D(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SPPose3D(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for SPPose3D(uint64_t a1)
{
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
}

void type metadata accessor for SecTaskRef(uint64_t a1)
{
}

void type metadata accessor for CGImageRef(uint64_t a1)
{
}

void type metadata accessor for AVPlaybackCoordinationTransportControlStateKey(uint64_t a1)
{
}

void type metadata accessor for AVPlaybackCoordinationParticipantStateKey(uint64_t a1)
{
}

void type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand(uint64_t a1)
{
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for RawRepresentable in AVPlaybackCoordinatorPlaybackObjectCommand()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorPlaybackObjectCommand and conformance AVPlaybackCoordinatorPlaybackObjectCommand, type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AVPlaybackCoordinatorPlaybackObjectCommand()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorPlaybackObjectCommand and conformance AVPlaybackCoordinatorPlaybackObjectCommand, type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand);
}

uint64_t base witness table accessor for Equatable in AVPlaybackCoordinatorPlaybackObjectCommand()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorPlaybackObjectCommand and conformance AVPlaybackCoordinatorPlaybackObjectCommand, type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand);
}

uint64_t base witness table accessor for RawRepresentable in AVPlaybackCoordinationParticipantStateKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, type metadata accessor for AVPlaybackCoordinationParticipantStateKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AVPlaybackCoordinationParticipantStateKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, type metadata accessor for AVPlaybackCoordinationParticipantStateKey);
}

uint64_t base witness table accessor for RawRepresentable in AVPlaybackCoordinationTransportControlStateKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, type metadata accessor for AVPlaybackCoordinationTransportControlStateKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AVPlaybackCoordinationTransportControlStateKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, type metadata accessor for AVPlaybackCoordinationTransportControlStateKey);
}

uint64_t base witness table accessor for Equatable in CGImageRef()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CGImageRef and conformance CGImageRef, type metadata accessor for CGImageRef);
}

uint64_t base witness table accessor for Hashable in CGImageRef()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CGImageRef and conformance CGImageRef, type metadata accessor for CGImageRef);
}

uint64_t base witness table accessor for Equatable in TUConversationActivityLifetimePolicy()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TUConversationActivityLifetimePolicy and conformance TUConversationActivityLifetimePolicy, type metadata accessor for TUConversationActivityLifetimePolicy);
}

uint64_t base witness table accessor for Equatable in AVPlaybackCoordinationTransportControlStateKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, type metadata accessor for AVPlaybackCoordinationTransportControlStateKey);
}

uint64_t base witness table accessor for Equatable in AVPlaybackCoordinationParticipantStateKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, type metadata accessor for AVPlaybackCoordinationParticipantStateKey);
}

uint64_t outlined destroy of weak SystemCoordinatorHostDelegate?(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A376D720()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:)()
{
  closure #1 in SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1A376D780()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(void **a1)
{
  closure #1 in SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(a1, v1);
}

uint64_t outlined destroy of SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A376D81C()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v2 = *(void *)(v1 - 8);
  char v3 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v7 = v4 | 7;
  uint64_t v8 = (v6 + v4 + v5) & ~v4;
  uint64_t v9 = v8 + v6;
  v3(v0 + v5, v1);
  v3(v0 + v8, v1);

  return MEMORY[0x1F4186498](v0, v9, v7);
}

uint64_t partial apply for specialized closure #1 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride() - 8);
  uint64_t v6 = v2
     + ((*(void *)(v5 + 64)
       + *(unsigned __int8 *)(v5 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return specialized closure #1 in Publisher.dynamicThrottle<A>(for:after:scheduler:)(a1, v6, a2);
}

uint64_t outlined init with copy of PublishRate<OS_dispatch_queue>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CPActivitySessionState(uint64_t a1)
{
}

void type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey(uint64_t a1)
{
}

void type metadata accessor for CIImageRepresentationOption(uint64_t a1)
{
}

void type metadata accessor for SPRotation3D(uint64_t a1)
{
}

void type metadata accessor for SPPoint3D(uint64_t a1)
{
}

void type metadata accessor for TUConversationActivityLifetimePolicy(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for RawRepresentable in CIImageRepresentationOption()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CIImageRepresentationOption()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
}

uint64_t base witness table accessor for RawRepresentable in AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey and conformance AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey and conformance AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey);
}

uint64_t base witness table accessor for Equatable in AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey and conformance AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey);
}

uint64_t base witness table accessor for Equatable in CIImageRepresentationOption()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
}

void Topic.delegate.setter()
{
}

void EquatableSpatialTemplatePreference.spatialTemplatePreference.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 9);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 9) = v3;
}

uint64_t EquatableSpatialTemplatePreference.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 8);
  char v3 = *(unsigned char *)(result + 9);
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 9) = v3;
  return result;
}

uint64_t static EquatableSpatialTemplatePreference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9)) {
    return 0;
  }
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EquatableSpatialTemplatePreference(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9))
  {
    char v2 = *(unsigned char *)(a2 + 8);
    if (*(unsigned char *)(a1 + 8))
    {
      if (*(unsigned char *)(a2 + 8)) {
        return 1;
      }
    }
    else
    {
      if (*(double *)a1 != *(double *)a2) {
        char v2 = 1;
      }
      if ((v2 & 1) == 0) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for EquatableSpatialTemplatePreference(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  BOOL v4 = v3 >= 5;
  int v5 = v3 - 5;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EquatableSpatialTemplatePreference(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EquatableSpatialTemplatePreference()
{
  return &type metadata for EquatableSpatialTemplatePreference;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

BOOL static GroupSessionErrors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void GroupSessionErrors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int GroupSessionErrors.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GroupSessionErrors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupSessionErrors()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GroupSessionErrors()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupSessionErrors()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance GroupSessionErrors()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance GroupSessionErrors()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance GroupSessionErrors()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance GroupSessionErrors()
{
  return MEMORY[0x1F4185E00]();
}

void *Capabilities.attachments.unsafeMutableAddressor()
{
  return &static Capabilities.attachments;
}

uint64_t static Capabilities.attachments.getter()
{
  return 1;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance Capabilities@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance Capabilities(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.union(_:) in conformance Capabilities@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance Capabilities@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance Capabilities@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance Capabilities(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance Capabilities@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance Capabilities@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance Capabilities(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance Capabilities(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance Capabilities(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance Capabilities@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance Capabilities(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance Capabilities(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance Capabilities(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance Capabilities()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance Capabilities(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance Capabilities(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Capabilities@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t GroupSession.initiator.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Participant(v1 + direct field offset for GroupSession.initiator, a1, (uint64_t (*)(void))type metadata accessor for Participant);
}

uint64_t GroupSession.playbackSyncerLink.getter()
{
  return GroupSession.playbackSyncerLink.getter();
}

{
  swift_beginAccess();
  return swift_retain();
}

uint64_t specialized GroupSession.playbackSyncerLink.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + direct field offset for GroupSession.playbackSyncerLink);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  swift_retain();
  if (v4) {
    (*(void (**)(void, void))(**(void **)(v4
  }
                                                         + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                                           + 456))(0, 0);
  if (*v3)
  {
    uint64_t v5 = *(void (**)(uint64_t, _UNKNOWN **))(**(void **)(*v3
                                                                   + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                                                     + 456);
    swift_retain();
    uint64_t v6 = swift_retain();
    v5(v6, &protocol witness table for GroupSession<A>);
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t GroupSession.playbackSyncerLink.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + direct field offset for GroupSession.playbackSyncerLink);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  swift_retain();
  GroupSession.playbackSyncerLink.didset(v4);
  swift_release();
  return swift_release();
}

uint64_t GroupSession.playbackSyncerLink.didset(uint64_t a1)
{
  if (a1) {
    (*(void (**)(void, void))(**(void **)(a1
  }
                                                         + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                                           + 456))(0, 0);
  uint64_t v2 = (void *)(v1 + direct field offset for GroupSession.playbackSyncerLink);
  uint64_t result = swift_beginAccess();
  if (*v2)
  {
    uint64_t v4 = *(void (**)(uint64_t, _UNKNOWN **))(**(void **)(*v2
                                                                   + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                                                     + 456);
    swift_retain();
    uint64_t v5 = swift_retain();
    v4(v5, &protocol witness table for GroupSession<A>);
    return swift_release();
  }
  return result;
}

void (*GroupSession.playbackSyncerLink.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = (void *)(v1 + direct field offset for GroupSession.playbackSyncerLink);
  swift_beginAccess();
  v3[3] = *v4;
  swift_retain();
  return GroupSession.playbackSyncerLink.modify;
}

void GroupSession.playbackSyncerLink.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    uint64_t v4 = swift_retain();
    GroupSession.playbackSyncerLink.setter(v4);
    swift_release();
  }
  else
  {
    GroupSession.playbackSyncerLink.setter(v3);
  }

  free(v2);
}

uint64_t GroupSession.playbackSyncMessenger.getter()
{
  return GroupSession.playbackSyncerLink.getter();
}

uint64_t GroupSession.playbackSyncMessenger.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + direct field offset for GroupSession.playbackSyncMessenger);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t (*GroupSession.playbackSyncMessenger.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t GroupSession.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for GroupSession.id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t GroupSession.topicManager.getter()
{
  return swift_retain();
}

id GroupSession.linkManager.getter()
{
  return *(id *)(v0 + direct field offset for GroupSession.linkManager);
}

double GroupSession.attachmentDownloadBytes.getter()
{
  uint64_t v1 = v0 + direct field offset for GroupSession.attachmentDownloadBytes;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t GroupSession.attachmentDownloadBytes.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + direct field offset for GroupSession.attachmentDownloadBytes);
  uint64_t result = swift_beginAccess();
  double *v3 = a1;
  return result;
}

uint64_t (*GroupSession.attachmentDownloadBytes.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

double GroupSession.attachmentUploadBytes.getter()
{
  uint64_t v1 = v0 + direct field offset for GroupSession.attachmentUploadBytes;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t GroupSession.attachmentUploadBytes.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + direct field offset for GroupSession.attachmentUploadBytes);
  uint64_t result = swift_beginAccess();
  double *v3 = a1;
  return result;
}

uint64_t (*GroupSession.attachmentUploadBytes.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

double GroupSession.attachmentDownloadTime.getter()
{
  uint64_t v1 = v0 + direct field offset for GroupSession.attachmentDownloadTime;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t GroupSession.attachmentDownloadTime.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + direct field offset for GroupSession.attachmentDownloadTime);
  uint64_t result = swift_beginAccess();
  double *v3 = a1;
  return result;
}

uint64_t (*GroupSession.attachmentDownloadTime.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

double GroupSession.attachmentUploadTime.getter()
{
  uint64_t v1 = v0 + direct field offset for GroupSession.attachmentUploadTime;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t GroupSession.attachmentUploadTime.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + direct field offset for GroupSession.attachmentUploadTime);
  uint64_t result = swift_beginAccess();
  double *v3 = a1;
  return result;
}

uint64_t (*GroupSession.attachmentUploadTime.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for GroupSession.receivedDataHandler : <A>GroupSession<A>@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + direct field offset for GroupSession.receivedDataHandler);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v4);
}

uint64_t key path setter for GroupSession.receivedDataHandler : <A>GroupSession<A>(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Data, @in_guaranteed UInt64) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + direct field offset for GroupSession.receivedDataHandler);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v8);
}

uint64_t GroupSession.receivedDataHandler.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + direct field offset for GroupSession.receivedDataHandler);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*v1);
  return v2;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t GroupSession.receivedDataHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + direct field offset for GroupSession.receivedDataHandler);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v6);
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t (*GroupSession.receivedDataHandler.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t GroupSession.receivedDataPublisher.getter()
{
  return GroupSession.receivedDataPublisher.getter((uint64_t)&direct field offset for GroupSession._receivedDataPublisher, &demangling cache variable for type metadata for PassthroughSubject<(Data, Participant, SendReliability), Never>, &lazy protocol witness table cache variable for type PassthroughSubject<(Data, Participant, SendReliability), Never> and conformance PassthroughSubject<A, B>);
}

uint64_t GroupSession.receivedDataPublisher.setter(uint64_t a1)
{
  return GroupSession.receivedDataPublisher.setter(a1, &direct field offset for GroupSession._receivedDataPublisher);
}

uint64_t specialized Subject.wrappedValue.getter(uint64_t *a1, unint64_t *a2)
{
  if (*(void *)(v2 + 8))
  {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  else
  {
    uint64_t v6 = v2;
    __swift_instantiateConcreteTypeFromMangledName(a1);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](a2, a1);
    uint64_t v4 = Publisher.eraseToAnyPublisher()();
    *(void *)(v6 + 8) = v4;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t (*GroupSession.receivedDataPublisher.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for GroupSession._receivedDataPublisher;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = specialized Subject.wrappedValue.getter(&demangling cache variable for type metadata for PassthroughSubject<(Data, Participant, SendReliability), Never>, &lazy protocol witness table cache variable for type PassthroughSubject<(Data, Participant, SendReliability), Never> and conformance PassthroughSubject<A, B>);
  return GroupSession.receivedDataPublisher.modify;
}

uint64_t GroupSession.$receivedDataPublisher.getter()
{
  specialized GroupSession.$receivedDataPublisher.getter();

  return swift_retain();
}

uint64_t GroupSession.receivedAttachmentPublisher.getter()
{
  return GroupSession.receivedDataPublisher.getter((uint64_t)&direct field offset for GroupSession._receivedAttachmentPublisher, &demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>, &lazy protocol witness table cache variable for type PassthroughSubject<(UUID, URL, Participant), Never> and conformance PassthroughSubject<A, B>);
}

uint64_t GroupSession.receivedAttachmentPublisher.setter(uint64_t a1)
{
  return GroupSession.receivedDataPublisher.setter(a1, &direct field offset for GroupSession._receivedAttachmentPublisher);
}

uint64_t (*GroupSession.receivedAttachmentPublisher.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for GroupSession._receivedAttachmentPublisher;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = specialized Subject.wrappedValue.getter(&demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>, &lazy protocol witness table cache variable for type PassthroughSubject<(UUID, URL, Participant), Never> and conformance PassthroughSubject<A, B>);
  return GroupSession.receivedDataPublisher.modify;
}

uint64_t GroupSession.$receivedAttachmentPublisher.getter()
{
  specialized GroupSession.$receivedAttachmentPublisher.getter();

  return swift_retain();
}

uint64_t GroupSession.attachmentsPublisher.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<CurrentValueSubject<[LinkManager.Attachment], Never>, [UUID]>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0
                                                                                   + direct field offset for GroupSession.linkManager))
                                             + 0x148))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[LinkManager.Attachment], Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[LinkManager.Attachment], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[LinkManager.Attachment], Never>);
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<CurrentValueSubject<[LinkManager.Attachment], Never>, [UUID]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<CurrentValueSubject<[LinkManager.Attachment], Never>, [UUID]>);
  uint64_t v6 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

uint64_t closure #1 in GroupSession.attachmentsPublisher.getter@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LinkManager.Attachment(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = MEMORY[0x1F4188790](v8);
  id v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  int64_t v14 = *(void *)(*a1 + 16);
  uint64_t v15 = MEMORY[0x1E4FBC860];
  if (v14)
  {
    v20[0] = a2;
    uint64_t v22 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    uint64_t v16 = v13 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v17 = *(void *)(v5 + 72);
    v20[1] = v9 + 32;
    uint64_t v21 = v17;
    do
    {
      outlined init with copy of Participant(v16, (uint64_t)v7, type metadata accessor for LinkManager.Attachment);
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v7, v8);
      outlined destroy of Participant((uint64_t)v7, type metadata accessor for LinkManager.Attachment);
      uint64_t v15 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
        uint64_t v15 = v22;
      }
      unint64_t v19 = *(void *)(v15 + 16);
      unint64_t v18 = *(void *)(v15 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t v15 = v22;
      }
      *(void *)(v15 + 16) = v19 + 1;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v19, v12, v8);
      uint64_t v22 = v15;
      v16 += v21;
      --v14;
    }
    while (v14);
    a2 = (void *)v20[0];
  }
  *a2 = v15;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo25TUConversationParticipantCG_15GroupActivities0E0Vs5NeverOTg504_s15f381Activities0A7SessionC2id9groupUUID15initiatorHandle8activity14remoteEndpoint10queueLabel16locallyInitiated018lightweightPrimaryO016localParticipant11isFirstJoin12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v3 = type metadata accessor for Participant();
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v45 = (uint64_t)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v43 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v5 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v50 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
    if (v43)
    {
      uint64_t result = __CocoaSet.startIndex.getter();
      unsigned __int8 v8 = 1;
    }
    else
    {
      uint64_t result = specialized _NativeSet.startIndex.getter(a1);
      unsigned __int8 v8 = v9 & 1;
    }
    uint64_t v47 = result;
    uint64_t v48 = v7;
    unsigned __int8 v49 = v8;
    if (v5 < 0)
    {
      __break(1u);
LABEL_27:
      __break(1u);
    }
    else
    {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0) {
        uint64_t v10 = a1;
      }
      v38[1] = v10;
      uint64_t v39 = a1;
      uint64_t v11 = (SEL *)&property descriptor for LinkManager.hasConnectedOnce;
      do
      {
        while (1)
        {
          uint64_t v18 = v47;
          uint64_t v19 = v49;
          uint64_t v44 = v48;
          specialized Set.subscript.getter(v47, v48, v49, a1);
          uint64_t v21 = v20;
          id v22 = [v20 v11[250]];
          id v23 = objc_msgSend(v21, sel_handle);
          id v24 = objc_msgSend(v23, sel_normalizedValue);

          uint64_t v25 = (const char *)v11;
          if (!v24)
          {
            id v26 = objc_msgSend(v21, sel_handle);
            id v24 = objc_msgSend(v26, sel_value);
          }
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v29 = v28;

          uint64_t v30 = v45;
          UUID.init(_:)();
          uint64_t v31 = v41;
          *(void *)(v30 + *(int *)(v41 + 24)) = v22;
          uint64_t v32 = (uint64_t *)(v30 + *(int *)(v31 + 20));
          *uint64_t v32 = v27;
          v32[1] = v29;
          id v33 = [v21 v25 + 2200];
          swift_beginAccess();
          specialized Set._Variant.remove(_:)((uint64_t)v33);
          swift_endAccess();

          uint64_t v34 = v50;
          uint64_t v11 = (SEL *)v25;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1);
            uint64_t v34 = v50;
          }
          a1 = v39;
          unint64_t v36 = *(void *)(v34 + 16);
          unint64_t v35 = *(void *)(v34 + 24);
          if (v36 >= v35 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
            uint64_t v34 = v50;
          }
          *(void *)(v34 + 16) = v36 + 1;
          uint64_t result = outlined init with take of Participant(v45, v34+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v36, (uint64_t (*)(void))type metadata accessor for Participant);
          if (v43) {
            break;
          }
          uint64_t v12 = v44;
          uint64_t v13 = specialized _NativeSet.index(after:)(v18, v44, v19, a1);
          uint64_t v15 = v14;
          char v17 = v16;
          outlined consume of Set<Participant>.Index._Variant(v18, v12, v19);
          uint64_t v47 = v13;
          uint64_t v48 = v15;
          unsigned __int8 v49 = v17 & 1;
          if (!--v5) {
            goto LABEL_24;
          }
        }
        if ((v19 & 1) == 0) {
          goto LABEL_27;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUConversationParticipant>.Index);
        uint64_t v37 = (void (*)(char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v37(v46, 0);
        --v5;
      }
      while (v5);
LABEL_24:
      outlined consume of Set<Participant>.Index._Variant(v47, v48, v49);
      return v50;
    }
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVys6UInt64V14CopresenceCore11PubSubTopicC11ParticipantV_G_15GroupActivitiesAMVs5NeverOTg504_s15l429Activities0A7SessionC2id9groupUUID15initiatorHandle8activity14remoteEndpoint10queueLabel16locallyInitiated018lightweightPrimaryO016localParticipant11isFirstJoin12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Participant();
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (!v6) {
    return v7;
  }
  uint64_t v31 = v5;
  v27[1] = v1;
  uint64_t v34 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  uint64_t v7 = v34;
  uint64_t result = specialized _NativeDictionary.startIndex.getter(a1);
  uint64_t v10 = result;
  uint64_t v11 = 0;
  uint64_t v12 = a1 + 64;
  v27[0] = a1 + 88;
  int64_t v28 = v6;
  uint64_t v29 = v9;
  uint64_t v30 = a1 + 64;
  uint64_t v13 = (uint64_t)v31;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v16 = (unint64_t)v10 >> 6;
    if ((*(void *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v9) {
      goto LABEL_26;
    }
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    UUID.init(_:)();
    uint64_t v18 = v33;
    *(void *)(v13 + *(int *)(v33 + 24)) = v17;
    uint64_t v19 = (void *)(v13 + *(int *)(v18 + 20));
    *uint64_t v19 = 0;
    v19[1] = 0xE000000000000000;
    uint64_t v34 = v7;
    unint64_t v21 = *(void *)(v7 + 16);
    unint64_t v20 = *(void *)(v7 + 24);
    if (v21 >= v20 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      uint64_t v7 = v34;
    }
    *(void *)(v7 + 16) = v21 + 1;
    uint64_t result = outlined init with take of Participant(v13, v7+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v21, (uint64_t (*)(void))type metadata accessor for Participant);
    int64_t v14 = 1 << *(unsigned char *)(a1 + 32);
    if (v10 >= v14) {
      goto LABEL_27;
    }
    uint64_t v12 = v30;
    uint64_t v22 = *(void *)(v30 + 8 * v16);
    if ((v22 & (1 << v10)) == 0) {
      goto LABEL_28;
    }
    LODWORD(v9) = v29;
    if (*(_DWORD *)(a1 + 36) != v29) {
      goto LABEL_29;
    }
    unint64_t v23 = v22 & (-2 << (v10 & 0x3F));
    if (v23)
    {
      int64_t v14 = __clz(__rbit64(v23)) | v10 & 0xFFFFFFFFFFFFFFC0;
      int64_t v15 = v28;
    }
    else
    {
      unint64_t v24 = v16 + 1;
      unint64_t v25 = (unint64_t)(v14 + 63) >> 6;
      int64_t v15 = v28;
      if (v16 + 1 < v25)
      {
        unint64_t v26 = *(void *)(v30 + 8 * v24);
        if (!v26)
        {
          unint64_t v24 = v16 + 2;
          if (v16 + 2 >= v25) {
            goto LABEL_4;
          }
          unint64_t v26 = *(void *)(v30 + 8 * v24);
          if (!v26)
          {
            while (v25 - 3 != v16)
            {
              unint64_t v26 = *(void *)(v27[0] + 8 * v16++);
              if (v26)
              {
                unint64_t v24 = v16 + 2;
                goto LABEL_17;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_17:
        int64_t v14 = __clz(__rbit64(v26)) + (v24 << 6);
      }
    }
LABEL_4:
    ++v11;
    uint64_t v10 = v14;
    if (v11 == v15) {
      return v7;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t GroupSession.catchupNeededPublisher.getter()
{
  return GroupSession.receivedDataPublisher.getter((uint64_t)&direct field offset for GroupSession._catchupNeededPublisher, &demangling cache variable for type metadata for PassthroughSubject<Participant, Never>, &lazy protocol witness table cache variable for type PassthroughSubject<Participant, Never> and conformance PassthroughSubject<A, B>);
}

uint64_t GroupSession.receivedDataPublisher.getter(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  swift_beginAccess();
  uint64_t v5 = specialized Subject.wrappedValue.getter(a2, a3);
  swift_endAccess();
  return v5;
}

uint64_t GroupSession.catchupNeededPublisher.setter(uint64_t a1)
{
  return GroupSession.receivedDataPublisher.setter(a1, &direct field offset for GroupSession._catchupNeededPublisher);
}

uint64_t GroupSession.receivedDataPublisher.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = v2 + *a2;
  swift_beginAccess();
  *(void *)(v4 + 8) = a1;
  return swift_release();
}

uint64_t (*GroupSession.catchupNeededPublisher.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for GroupSession._catchupNeededPublisher;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = specialized Subject.wrappedValue.getter(&demangling cache variable for type metadata for PassthroughSubject<Participant, Never>, &lazy protocol witness table cache variable for type PassthroughSubject<Participant, Never> and conformance PassthroughSubject<A, B>);
  return GroupSession.receivedDataPublisher.modify;
}

void GroupSession.receivedDataPublisher.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v4 = *(void *)(*(void *)a1 + 32) + *(void *)(*(void *)a1 + 40);
  if (a2)
  {
    swift_retain();
    swift_release();
    *(void *)(v4 + 8) = v3;
    swift_release();
    swift_endAccess();
  }
  else
  {
    *(void *)(v4 + 8) = v3;
    swift_endAccess();
    swift_release();
  }

  free(v2);
}

uint64_t GroupSession.$catchupNeededPublisher.getter()
{
  specialized GroupSession.$catchupNeededPublisher.getter();

  return swift_retain();
}

uint64_t GroupSession.state.getter()
{
  return GroupSession.state.getter();
}

{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

uint64_t key path getter for GroupSession.state : <A>GroupSession<A>@<X0>(void *a1@<X8>)
{
  uint64_t result = GroupSession.state.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for GroupSession.state : <A>GroupSession<A>(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for GroupSession.state : <A>GroupSession<A>(a1, a2, a3, a4, (uint64_t (*)(id *))GroupSession.state.setter);
}

uint64_t GroupSession.state.setter()
{
  return static Published.subscript.setter();
}

uint64_t GroupSession.$state.getter()
{
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of GroupSession.activity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  int64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  Published.init(wrappedValue:)((uint64_t)v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t GroupSession.activity.getter()
{
  return swift_release();
}

uint64_t key path getter for GroupSession.activity : <A>GroupSession<A>()
{
  return GroupSession.activity.getter();
}

void key path setter for GroupSession.activity : <A>GroupSession<A>(uint64_t a1)
{
}

uint64_t GroupSession.activity.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  specialized GroupSession.activity.setter(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);

  return v4(a1);
}

void GroupSession.activity.didset(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v40 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v34 - v3;
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v38 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v34 - v6;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  swift_retain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v39 = v2;
  if (v12)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v34 = v5;
    uint64_t v14 = v13;
    int64_t v15 = (void *)swift_slowAlloc();
    unint64_t v36 = v4;
    unint64_t v16 = v15;
    unint64_t v43 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v35 = v8;
    uint64_t v17 = GroupSession.description.getter();
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)&v43);
    uint64_t v37 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    GroupSession.activity.getter();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v7, 0, 1, v2);
    uint64_t v19 = >> prefix<A>(_:)((uint64_t)v7, v2);
    unint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v34);
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, (uint64_t *)&v43);
    uint64_t v8 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v10, v11, "Observed activity mutation on GroupSession %s to %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    uint64_t v22 = v16;
    uint64_t v4 = v36;
    MEMORY[0x1A624F870](v22, -1, -1);
    MEMORY[0x1A624F870](v14, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  GroupSession.state.getter();
  unint64_t v23 = v43;
  uint64_t v41 = 1;
  uint64_t v42 = (uint64_t)v43;
  char v24 = static GroupSession.State.== infix(_:_:)((id *)&v42, (void **)&v41);
  outlined consume of GroupSession<A>.State<A>(v23);
  if (v24)
  {
    GroupSession.activity.getter();
    GroupSession.invalidateIfWaiting()((uint64_t)partial apply for closure #1 in GroupSession.updateActivity(_:), (uint64_t)&block_descriptor_526);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v4, v39);
  }
  else
  {
    if (one-time initialization token for runtimeIssues != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v8, (uint64_t)static Logger.runtimeIssues);
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_1A375F000, v25, v26, "Attempted activity update on non-joined GroupSession", v27, 2u);
      MEMORY[0x1A624F870](v27, -1, -1);
    }

    swift_retain();
    int64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      unint64_t v43 = v31;
      *(_DWORD *)uint64_t v30 = 136315138;
      uint64_t v32 = GroupSession.description.getter();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v28, v29, "Attempted activity update on non-joined GroupSession %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v31, -1, -1);
      MEMORY[0x1A624F870](v30, -1, -1);
    }
    else
    {

      swift_release();
    }
  }
}

uint64_t static GroupSession.State.== infix(_:_:)(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1)
  {
    if (v2 == (id)1)
    {
      if (v3 == (void *)1) {
        goto LABEL_10;
      }
    }
    else if ((unint64_t)v3 >= 2)
    {
      id v5 = v2;
LABEL_10:
      uint64_t v4 = 1;
      goto LABEL_11;
    }
  }
  else if (!v3)
  {
    goto LABEL_10;
  }
  outlined copy of GroupSession<A>.State<A>(*a1);
  uint64_t v4 = 0;
LABEL_11:
  outlined copy of GroupSession<A>.State<A>(v3);
  outlined consume of GroupSession<A>.State<A>(v2);
  outlined consume of GroupSession<A>.State<A>(v3);
  return v4;
}

uint64_t GroupSession.updateActivity(_:)()
{
  return GroupSession.invalidateIfWaiting()((uint64_t)partial apply for closure #1 in GroupSession.updateActivity(_:), (uint64_t)&block_descriptor_526);
}

void (*GroupSession.activity.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  GroupSession.activity.getter();
  return GroupSession.activity.modify;
}

void GroupSession.activity.modify(uint64_t a1, char a2)
{
}

uint64_t GroupSession.$activity.getter()
{
  return swift_endAccess();
}

uint64_t GroupSession.$activity.setter(uint64_t a1)
{
  specialized GroupSession.$activity.setter(a1);
  uint64_t v2 = type metadata accessor for Published.Publisher();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

void (*GroupSession.$activity.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = type metadata accessor for Published.Publisher();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  GroupSession.$activity.getter();
  return GroupSession.$activity.modify;
}

void GroupSession.$activity.modify(uint64_t a1, char a2)
{
}

uint64_t GroupSession.activeParticipants.getter()
{
  return GroupSession.activeParticipants.getter();
}

{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for GroupSession.activeParticipants : <A>GroupSession<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GroupSession.activeParticipants.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for GroupSession.activeParticipants : <A>GroupSession<A>()
{
  return GroupSession.activeParticipants.setter();
}

uint64_t GroupSession.$activeParticipants.getter()
{
  return swift_endAccess();
}

uint64_t GroupSession.$activeParticipants.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t GroupSession.localParticipant.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Participant(*(void *)(v1 + direct field offset for GroupSession.linkManager)+ OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, a1, (uint64_t (*)(void))type metadata accessor for Participant);
}

uint64_t GroupSession.sceneSessionIdentifier.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 232));
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GroupSession.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 240);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t GroupSession.timestamps.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 240);
  uint64_t v4 = type metadata accessor for GroupSession.Timestamps();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

id GroupSession.remoteEndpoint.getter()
{
  uint64_t v1 = (void **)(v0 + *(void *)(*(void *)v0 + 248));
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void GroupSession.remoteEndpoint.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + *(void *)(*(void *)v1 + 248));
  swift_beginAccess();
  uint64_t v4 = *v3;
  void *v3 = a1;
}

uint64_t (*GroupSession.remoteEndpoint.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t GroupSession.isLocallyInitiated.getter()
{
  return *(unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 256));
}

uint64_t GroupSession.isLightweightPrimaryInitiated.getter()
{
  return *(unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 264));
}

uint64_t GroupSession.isFirstJoin.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 272));
  swift_beginAccess();
  return *v1;
}

uint64_t GroupSession.isFirstJoin.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + *(void *)(*(void *)v1 + 272));
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*GroupSession.isFirstJoin.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

id GroupSession.connection.getter()
{
  uint64_t v1 = (void **)(v0 + *(void *)(*(void *)v0 + 280));
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void GroupSession.connection.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + *(void *)(*(void *)v1 + 280));
  swift_beginAccess();
  uint64_t v4 = *v3;
  unsigned char *v3 = a1;
}

uint64_t (*GroupSession.connection.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

id GroupSession.queue.getter()
{
  return *(id *)(v0 + *(void *)(*(void *)v0 + 288));
}

void *GroupSession.publishQueue.getter()
{
  uint64_t v1 = (void **)(v0 + *(void *)(*(void *)v0 + 296));
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void GroupSession.publishQueue.setter(void *a1)
{
  id v3 = (void **)(v1 + *(void *)(*(void *)v1 + 296));
  swift_beginAccess();
  uint64_t v4 = *v3;
  unsigned char *v3 = a1;
}

uint64_t (*GroupSession.publishQueue.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t GroupSession.capabilities.getter()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 336);
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t GroupSession.capabilities.setter(uint64_t a1)
{
  id v3 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 336));
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return GroupSession.capabilities.didset(v4);
}

uint64_t specialized GroupSession.capabilities.didset(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(v4 - 1);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (void *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + *(void *)(*(void *)v2 + 288));
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, void *))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v4 = (void *)(v2 + *(void *)(*(void *)v2 + 336));
  uint64_t result = swift_beginAccess();
  if (*v4 == a1) {
    return result;
  }
  if (one-time initialization token for default != -1) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  swift_retain();
  BOOL v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134217984;
    aBlock[0] = *v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1A375F000, v12, v13, "Updating capabilities to %ld", v14, 0xCu);
    MEMORY[0x1A624F870](v14, -1, -1);
  }
  else
  {

    swift_release();
  }
  int64_t v15 = (id *)(v2 + *(void *)(*(void *)v2 + 280));
  swift_beginAccess();
  id v16 = *v15;
  uint64_t v17 = XPCClient.queue.getter();

  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = partial apply for specialized closure #1 in GroupSession.capabilities.didset;
  *(void *)(v18 + 24) = v2;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_434;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v17, v19);

  _Block_release(v19);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v17) {
    __break(1u);
  }
  return result;
}

uint64_t GroupSession.capabilities.didset(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(v4 - 1);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (void *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + *(void *)(*(void *)v2 + 288));
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, void *))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v4 = (void *)(v2 + *(void *)(*(void *)v2 + 336));
  uint64_t result = swift_beginAccess();
  if (*v4 == a1) {
    return result;
  }
  if (one-time initialization token for default != -1) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  swift_retain();
  BOOL v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134217984;
    aBlock[0] = *v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1A375F000, v12, v13, "Updating capabilities to %ld", v14, 0xCu);
    MEMORY[0x1A624F870](v14, -1, -1);
  }
  else
  {

    swift_release();
  }
  int64_t v15 = (id *)(v2 + *(void *)(*(void *)v2 + 280));
  swift_beginAccess();
  id v16 = *v15;
  uint64_t v17 = XPCClient.queue.getter();

  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = partial apply for closure #1 in GroupSession.capabilities.didset;
  *(void *)(v18 + 24) = v2;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_523;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v17, v19);

  _Block_release(v19);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v17) {
    __break(1u);
  }
  return result;
}

void specialized closure #1 in GroupSession.capabilities.didset(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void (*GroupSession.capabilities.modify(void *a1))(uint64_t a1)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = (void *)(v1 + *(void *)(*(void *)v1 + 336));
  swift_beginAccess();
  v3[3] = *v4;
  return GroupSession.capabilities.modify;
}

void GroupSession.capabilities.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  GroupSession.capabilities.setter(*(void *)(*(void *)a1 + 24));

  free(v1);
}

uint64_t GroupSession.internalActiveParticipants.getter()
{
  return GroupSession.activeParticipants.getter();
}

uint64_t key path getter for GroupSession.internalActiveParticipants : <A>GroupSession<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GroupSession.internalActiveParticipants.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for GroupSession.internalActiveParticipants : <A>GroupSession<A>()
{
  return GroupSession.internalActiveParticipants.setter();
}

uint64_t GroupSession.internalActiveParticipants.setter()
{
  return GroupSession.activeParticipants.setter();
}

uint64_t GroupSession.activeParticipants.setter()
{
  return static Published.subscript.setter();
}

void (*GroupSession.internalActiveParticipants.modify(void *a1))(void *a1)
{
  id v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return GroupSession.internalActiveParticipants.modify;
}

void GroupSession.internalActiveParticipants.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();

  free(v1);
}

uint64_t GroupSession.$internalActiveParticipants.getter()
{
  return swift_endAccess();
}

uint64_t key path setter for GroupSession.$activeParticipants : <A>GroupSession<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  MEMORY[0x1F4188790](v7);
  id v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, a1);
  return a5(v9);
}

uint64_t GroupSession.$internalActiveParticipants.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*GroupSession.$internalActiveParticipants.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  GroupSession.$internalActiveParticipants.getter();
  return GroupSession.$internalActiveParticipants.modify;
}

void GroupSession.$internalActiveParticipants.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    GroupSession.$internalActiveParticipants.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    GroupSession.$internalActiveParticipants.setter(*(void *)(*(void *)a1 + 32));
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t GroupSession.internalState.getter()
{
  return GroupSession.state.getter();
}

uint64_t key path getter for GroupSession.internalState : <A>GroupSession<A>@<X0>(void *a1@<X8>)
{
  uint64_t result = GroupSession.internalState.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for GroupSession.internalState : <A>GroupSession<A>(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for GroupSession.state : <A>GroupSession<A>(a1, a2, a3, a4, (uint64_t (*)(id *))GroupSession.internalState.setter);
}

uint64_t key path setter for GroupSession.state : <A>GroupSession<A>(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(id *))
{
  id v7 = *a1;
  outlined copy of GroupSession<A>.State<A>(v7);
  return a5(&v7);
}

void GroupSession.internalState.setter(void **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = v2;
  GroupSession.internalState.willset(&v2);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v2 = v1;
  swift_retain();
  static Published.subscript.setter();
  GroupSession.updatePublicState()();
}

void specialized GroupSession.internalState.willset(void *a1)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  swift_retain();
  outlined copy of GroupSession<A>.State<A>(a1);
  swift_retain();
  outlined copy of GroupSession<A>.State<A>(a1);
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v12 = v5;
    *(_DWORD *)uint64_t v4 = 136315394;
    uint64_t v6 = specialized GroupSession.description.getter();
    unint64_t v8 = v7;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    outlined copy of GroupSession<A>.State<A>(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.State);
    uint64_t v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of GroupSession<A>.State<A>(a1);
    outlined consume of GroupSession<A>.State<A>(a1);
    _os_log_impl(&dword_1A375F000, oslog, v3, "%s changing internal state: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  else
  {
    swift_release_n();
    outlined consume of GroupSession<A>.State<A>(a1);
    outlined consume of GroupSession<A>.State<A>(a1);
  }
}

void GroupSession.internalState.willset(void **a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  outlined copy of GroupSession<A>.State<A>(v1);
  outlined copy of GroupSession<A>.State<A>(v1);
  swift_retain();
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v13 = v5;
    *(_DWORD *)uint64_t v4 = 136315394;
    uint64_t v6 = GroupSession.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    uint64_t v12 = (uint64_t)v1;
    uint64_t v8 = type metadata accessor for GroupSession.State();
    uint64_t v9 = >> prefix<A>(_:)((uint64_t)&v12, v8);
    uint64_t v12 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of GroupSession<A>.State<A>(v1);
    outlined consume of GroupSession<A>.State<A>(v1);
    _os_log_impl(&dword_1A375F000, oslog, v3, "%s changing internal state: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  else
  {
    swift_release();
    outlined consume of GroupSession<A>.State<A>(v1);
    outlined consume of GroupSession<A>.State<A>(v1);
  }
}

uint64_t specialized GroupSession.updatePublicState()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  unint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void **)(v0 + *(void *)(*(void *)v0 + 296));
  swift_beginAccess();
  uint64_t v9 = *v8;
  if (*v8) {
    id v10 = *v8;
  }
  else {
    id v10 = *(id *)(v0 + *(void *)(*(void *)v0 + 288));
  }
  aBlock[4] = partial apply for specialized closure #1 in GroupSession.updatePublicState();
  aBlock[5] = v0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_384;
  uint64_t v11 = _Block_copy(aBlock);
  id v12 = v9;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v16 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v7, v4, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v15);
  return swift_release();
}

Swift::Void __swiftcall GroupSession.updatePublicState()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void **)(v0 + *(void *)(*(void *)v0 + 296));
  swift_beginAccess();
  uint64_t v9 = *v8;
  if (*v8) {
    id v10 = *v8;
  }
  else {
    id v10 = *(id *)(v0 + *(void *)(*(void *)v0 + 288));
  }
  aBlock[4] = partial apply for closure #1 in GroupSession.updatePublicState();
  aBlock[5] = v0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_1;
  uint64_t v11 = _Block_copy(aBlock);
  id v12 = v9;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v7, v4, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v14);
  swift_release();
}

void (*GroupSession.internalState.modify(uint64_t a1))(void **a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  GroupSession.internalState.getter();
  return GroupSession.internalState.modify;
}

void GroupSession.internalState.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = *a1;
    outlined copy of GroupSession<A>.State<A>(v2);
    GroupSession.internalState.setter(&v3);
    outlined consume of GroupSession<A>.State<A>(v2);
  }
  else
  {
    uint64_t v3 = *a1;
    GroupSession.internalState.setter(&v3);
  }
}

uint64_t GroupSession.$internalState.getter()
{
  return swift_endAccess();
}

uint64_t GroupSession.$internalState.setter(uint64_t a1)
{
  specialized GroupSession.$internalState.setter(a1);
  type metadata accessor for GroupSession.State();
  uint64_t v2 = type metadata accessor for Published.Publisher();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

void (*GroupSession.$internalState.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void *v3 = v1;
  type metadata accessor for GroupSession.State();
  uint64_t v4 = type metadata accessor for Published.Publisher();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  GroupSession.$internalState.getter();
  return GroupSession.$internalState.modify;
}

void GroupSession.$internalState.modify(uint64_t a1, char a2)
{
}

void GroupSession.activity.modify(uint64_t a1, char a2, void (*a3)(void *))
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(*(void *)a1 + 24);
  size_t v6 = *(void **)(*(void *)a1 + 32);
  uint64_t v7 = *(void *)(*(void *)a1 + 8);
  uint64_t v8 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v8 + 16))(*(void *)(*(void *)a1 + 24), v6, v7);
    a3(v5);
    uint64_t v9 = *(void (**)(void *, uint64_t))(v8 + 8);
    v9(v5, v7);
    v9(v6, v7);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  free(v6);
  free(v5);

  free(v4);
}

BOOL GroupSession.isInvalid.getter()
{
  GroupSession.internalState.getter();
  outlined consume of GroupSession<A>.State<A>(v1);
  return (unint64_t)v1 > 1;
}

uint64_t GroupSession.distributionCount.getter()
{
  return *(void *)(v0 + *(void *)(*(void *)v0 + 360));
}

uint64_t GroupSession.__allocating_init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v23 = swift_allocObject();
  GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
  return v23;
}

uint64_t specialized GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void (*a17)(void, void, void, void), uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v21 = v20;
  v247 = a8;
  uint64_t v207 = a7;
  id v219 = a6;
  uint64_t v258 = a5;
  uint64_t v246 = a4;
  uint64_t v208 = a3;
  uint64_t v257 = a2;
  uint64_t v260 = a1;
  uint64_t v254 = a20;
  uint64_t v255 = a19;
  uint64_t v253 = a18;
  v217 = a17;
  uint64_t v216 = a16;
  id v230 = a15;
  uint64_t v215 = a14;
  id v251 = a13;
  LODWORD(v214) = a12;
  uint64_t v256 = a11;
  int v213 = a10;
  int v212 = a9;
  uint64_t v241 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Published<Set<Participant>>.Publisher, OS_dispatch_queue>);
  uint64_t v240 = *(void *)(v241 - 8);
  MEMORY[0x1F4188790](v241);
  v239 = (char *)&v193 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  uint64_t v242 = *(void *)(v243 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v243);
  v237 = (char *)&v193 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  v252 = (char *)&v193 - v26;
  MEMORY[0x1F4188790](v25);
  v238 = (char *)&v193 - v27;
  uint64_t v233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  uint64_t v232 = *(void *)(v233 - 8);
  MEMORY[0x1F4188790](v233);
  v231 = (char *)&v193 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v236 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, Set<Participant>>);
  uint64_t v235 = *(void *)(v236 - 8);
  MEMORY[0x1F4188790](v236);
  v234 = (char *)&v193 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v229 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AnyGroupActivity>.Publisher);
  uint64_t v228 = *(void *)(v229 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v229);
  v226 = (char *)&v193 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  v227 = (char *)&v193 - v32;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v33 - 8);
  v250 = (void (*)(char *, uint64_t))((char *)&v193 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<PassthroughSubject<TUConversationActivity, Never>, AnyGroupActivity>);
  uint64_t v221 = *(void *)(v222 - 8);
  MEMORY[0x1F4188790](v222);
  v218 = (char *)&v193 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.CompactMap<PassthroughSubject<TUConversationActivity, Never>, AnyGroupActivity>, OS_dispatch_queue>);
  uint64_t v224 = *(void *)(v225 - 8);
  MEMORY[0x1F4188790](v225);
  v223 = (char *)&v193 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v211 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<PassthroughSubject<(UUID, URL, Participant), Never>>);
  uint64_t v210 = *(void *)(v211 - 8);
  MEMORY[0x1F4188790](v211);
  v209 = (char *)&v193 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v205 = *(void *)(v206 - 8);
  MEMORY[0x1F4188790](v206);
  v204 = (char *)&v193 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v202);
  v203 = (char *)&v193 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v40 - 8);
  v201 = (char *)&v193 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v262 = type metadata accessor for UUID();
  uint64_t v259 = *(void *)(v262 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v262);
  v199 = (char *)&v193 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v220 = v43;
  MEMORY[0x1F4188790](v42);
  v248 = (char *)&v193 - v44;
  uint64_t v245 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v45 = MEMORY[0x1F4188790](v245);
  uint64_t v197 = (uint64_t)&v193 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v45);
  uint64_t v196 = (uint64_t)&v193 - v47;
  uint64_t v194 = type metadata accessor for Participant();
  MEMORY[0x1F4188790](v194);
  v198 = (char *)&v193 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v261 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  v195 = *(void ***)(v261 - 8);
  MEMORY[0x1F4188790](v261);
  uint64_t v50 = (char *)&v193 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<GroupSession<AnyGroupActivity>.State>);
  uint64_t v52 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  id v54 = (char *)&v193 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v20 + direct field offset for GroupSession.playbackSyncerLink) = 0;
  *(void *)(v20 + direct field offset for GroupSession.playbackSyncMessenger) = 0;
  *(void *)(v20 + direct field offset for GroupSession.attachmentDownloadBytes) = 0;
  *(void *)(v20 + direct field offset for GroupSession.attachmentUploadBytes) = 0;
  *(void *)(v20 + direct field offset for GroupSession.attachmentDownloadTime) = 0;
  *(void *)(v20 + direct field offset for GroupSession.attachmentUploadTime) = 0;
  uint64_t v55 = (void *)(v20 + direct field offset for GroupSession.receivedDataHandler);
  *uint64_t v55 = 0;
  v55[1] = 0;
  uint64_t v56 = (uint64_t *)(v20 + direct field offset for GroupSession._receivedDataPublisher);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(Data, Participant, SendReliability), Never>);
  swift_allocObject();
  uint64_t *v56 = PassthroughSubject.init()();
  v56[1] = 0;
  uint64_t v57 = (uint64_t *)(v20 + direct field offset for GroupSession._receivedAttachmentPublisher);
  uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>);
  swift_allocObject();
  *uint64_t v57 = PassthroughSubject.init()();
  v57[1] = 0;
  uint64_t v58 = (uint64_t *)(v20 + direct field offset for GroupSession._catchupNeededPublisher);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Participant, Never>);
  swift_allocObject();
  *uint64_t v58 = PassthroughSubject.init()();
  v58[1] = 0;
  uint64_t v59 = v21 + *(void *)(*(void *)v21 + 208);
  unint64_t v265 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.State);
  Published.init(initialValue:)();
  uint64_t v60 = *(void (**)(uint64_t, char *, uint64_t))(v52 + 32);
  v244 = (void (*)(uint64_t, uint64_t, uint64_t))v51;
  uint64_t v61 = v51;
  uint64_t v62 = v195;
  v60(v59, v54, v61);
  uint64_t v63 = v21 + *(void *)(*(void *)v21 + 224);
  unint64_t v64 = MEMORY[0x1E4FBC870];
  unint64_t v265 = MEMORY[0x1E4FBC870];
  v249 = (void (*)(char *, char *, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Participant>);
  Published.init(initialValue:)();
  uint64_t v65 = (void (*)(uint64_t, char *, uint64_t))v62[4];
  uint64_t v66 = v63;
  uint64_t v67 = v258;
  v65(v66, v50, v261);
  unint64_t v68 = v64;
  uint64_t v69 = (void *)(v21 + *(void *)(*(void *)v21 + 232));
  *uint64_t v69 = 0;
  v69[1] = 0;
  v195 = (void **)(v21 + *(void *)(*(void *)v21 + 296));
  *v195 = 0;
  unint64_t v70 = v64;
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      unint64_t v70 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
    }
    else {
      unint64_t v70 = MEMORY[0x1E4FBC870];
    }
    uint64_t v67 = v258;
    unint64_t v68 = v64;
  }
  *(void *)(v20 + *(void *)(*(void *)v20 + 304)) = v70;
  *(void *)(v20 + *(void *)(*(void *)v20 + 320)) = 0;
  *(void *)(v20 + *(void *)(*(void *)v20 + 328)) = 0;
  *(void *)(v20 + *(void *)(*(void *)v20 + 336)) = 0;
  uint64_t v71 = v20 + *(void *)(*(void *)v20 + 344);
  unint64_t v265 = v68;
  Published.init(initialValue:)();
  v65(v71, v50, v261);
  uint64_t v72 = v20 + *(void *)(*(void *)v20 + 352);
  unint64_t v265 = 0;
  Published.init(initialValue:)();
  v60(v72, v54, (uint64_t)v244);
  *(void *)(v20 + *(void *)(*(void *)v20 + 368)) = 0;
  uint64_t v73 = v259 + 16;
  v244 = *(void (**)(uint64_t, uint64_t, uint64_t))(v259 + 16);
  uint64_t v74 = v260;
  v244(v20 + direct field offset for GroupSession.id, v260, v262);
  uint64_t v75 = (uint64_t)v198;
  UUID.init()();
  uint64_t v76 = v194;
  uint64_t v77 = (void *)(v75 + *(int *)(v194 + 20));
  uint64_t v78 = v246;
  *uint64_t v77 = v208;
  v77[1] = v78;
  *(void *)(v75 + *(int *)(v76 + 24)) = 0;
  outlined init with take of Participant(v75, v20 + direct field offset for GroupSession.initiator, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v79 = v196;
  outlined init with copy of Participant(v67, v196, type metadata accessor for AnyGroupActivity);
  swift_beginAccess();
  outlined init with copy of Participant(v79, v197, type metadata accessor for AnyGroupActivity);
  Published.init(initialValue:)();
  outlined destroy of Participant(v79, type metadata accessor for AnyGroupActivity);
  swift_endAccess();
  uint64_t v80 = v253;
  *(void *)(v20 + direct field offset for GroupSession.topicManager) = v253;
  swift_retain();
  uint64_t v81 = UUID.uuidString.getter();
  uint64_t v82 = v257;
  uint64_t v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v80 + 248))(v257, v81, v83);
  swift_bridgeObjectRelease();
  uint64_t v85 = (uint64_t)v248;
  uint64_t v86 = v262;
  uint64_t v87 = (void (*)(char *, uint64_t, uint64_t))v244;
  v244((uint64_t)v248, v74, v262);
  uint64_t v88 = (uint64_t)v199;
  uint64_t v208 = v73;
  v87(v199, v82, v86);
  outlined init with copy of Participant(v256, v75, (uint64_t (*)(void))type metadata accessor for Participant);
  id v89 = objc_allocWithZone(MEMORY[0x1E4F5B140]);
  swift_retain();
  swift_retain();
  id v90 = v230;
  id v91 = objc_msgSend(v89, sel_init);
  uint64_t v92 = (char *)objc_allocWithZone((Class)type metadata accessor for LinkManager(0));
  uint64_t v246 = v84;
  id v230 = v90;
  *(void *)(v21 + direct field offset for GroupSession.linkManager) = specialized LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(v85, v88, v80, v84, v75, v90, v91, v92);
  uint64_t v93 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  unint64_t v265 = 0;
  unint64_t v266 = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  unint64_t v265 = 0xD000000000000025;
  unint64_t v266 = 0x80000001A38FFD40;
  v94._countAndFlagsBits = v207;
  v94._object = v247;
  String.append(_:)(v94);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  unint64_t v265 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v205 + 104))(v204, *MEMORY[0x1E4FBCC58], v206);
  v247 = (void *)v93;
  *(void *)(v21 + *(void *)(*(void *)v21 + 288)) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v95 = v195;
  swift_beginAccess();
  uint64_t v96 = *v95;
  id v97 = v251;
  char *v95 = v251;
  id v98 = v97;

  id v99 = v219;
  *(void *)(v21 + *(void *)(*(void *)v21 + 248)) = v219;
  outlined init with copy of URL?(v254, v21 + *(void *)(*(void *)v21 + 240), &demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.Timestamps);
  *(unsigned char *)(v21 + *(void *)(*(void *)v21 + 256)) = v212 & 1;
  *(unsigned char *)(v21 + *(void *)(*(void *)v21 + 264)) = v213 & 1;
  *(unsigned char *)(v21 + *(void *)(*(void *)v21 + 272)) = v214 & 1;
  *(void *)(v21 + *(void *)(*(void *)v21 + 360)) = v215;
  uint64_t v100 = (void *)(v21 + *(void *)(*(void *)v21 + 232));
  swift_beginAccess();
  uint64_t v101 = v217;
  *uint64_t v100 = v216;
  v100[1] = v101;
  id v102 = v99;
  swift_bridgeObjectRelease();
  outlined init with copy of AudioSessionAssertionManager(v255, v21 + *(void *)(*(void *)v21 + 312));
  type metadata accessor for ActivitySessionClientConnection();
  id v219 = v102;
  uint64_t v103 = XPCClient.__allocating_init(listenerEndpoint:)();
  long long v104 = (id *)(v21 + *(void *)(*(void *)v21 + 280));
  *long long v104 = (id)v103;
  uint64_t v105 = v21 + direct field offset for GroupSession._receivedAttachmentPublisher;
  swift_beginAccess();
  v264[3] = *(id *)v105;
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<(UUID, URL, Participant), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>);
  swift_retain();
  swift_retain();
  v106 = v209;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<PassthroughSubject<(UUID, URL, Participant), Never>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<PassthroughSubject<(UUID, URL, Participant), Never>>);
  uint64_t v107 = v211;
  uint64_t v108 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v210 + 8))(v106, v107);
  *(void *)(v105 + 8) = v108;
  swift_release();
  swift_beginAccess();
  id v109 = *v104;
  swift_allocObject();
  swift_weakInit();
  id v110 = v109;
  swift_retain();
  ActivitySessionClientConnection.serverDisconnectedCallback.setter();

  swift_release();
  id v111 = *v104;
  swift_allocObject();
  swift_weakInit();
  id v112 = v111;
  swift_retain();
  ActivitySessionClientConnection.setAssociatedSceneCallback.setter();

  swift_release();
  id v113 = *v104;
  swift_allocObject();
  swift_weakInit();
  id v114 = v113;
  swift_retain();
  ActivitySessionClientConnection.setStateCallback.setter();

  swift_release();
  id v115 = *v104;
  swift_allocObject();
  swift_weakInit();
  id v116 = v115;
  swift_retain();
  ActivitySessionClientConnection.setDataCryptorCallback.setter();

  swift_release();
  id v117 = *v104;
  swift_allocObject();
  swift_weakInit();
  id v118 = v117;
  swift_retain();
  ActivitySessionClientConnection.receivedResourceCallback.setter();

  swift_release();
  id v119 = *v104;
  v120 = (void *)ActivitySessionClientConnection.setActivityPublisher.getter();

  v264[0] = v120;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<TUConversationActivity, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<TUConversationActivity, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<TUConversationActivity, Never>);
  v121 = v218;
  Publisher.compactMap<A>(_:)();
  swift_release();
  id v122 = v98;
  uint64_t v123 = v260;
  if (!v97) {
    id v122 = *(id *)(v21 + *(void *)(*(void *)v21 + 288));
  }
  v264[0] = v122;
  uint64_t v124 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v125 = *(void *)(v124 - 8);
  v126 = *(void (**)(void, void, void))(v125 + 56);
  uint64_t v127 = (uint64_t)v250;
  uint64_t v245 = v124;
  v217 = (void (*)(void, void, void, void))v126;
  uint64_t v216 = v125 + 56;
  v126(v250, 1, 1);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<PassthroughSubject<TUConversationActivity, Never>, AnyGroupActivity> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<PassthroughSubject<TUConversationActivity, Never>, AnyGroupActivity>);
  uint64_t v128 = lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v214 = v98;
  v129 = v223;
  uint64_t v130 = v222;
  uint64_t v215 = v128;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v127, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(char *, uint64_t))(v221 + 8))(v121, v130);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AnyGroupActivity>);
  v131 = v227;
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.CompactMap<PassthroughSubject<TUConversationActivity, Never>, AnyGroupActivity>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.CompactMap<PassthroughSubject<TUConversationActivity, Never>, AnyGroupActivity>, OS_dispatch_queue>);
  uint64_t v132 = v225;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v224 + 8))(v129, v132);
  uint64_t v133 = v228;
  uint64_t v134 = v229;
  (*(void (**)(char *, char *, uint64_t))(v228 + 16))(v226, v131, v229);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v133 + 8))(v131, v134);
  uint64_t v135 = direct field offset for GroupSession.linkManager;
  v136 = *(void **)(v21 + direct field offset for GroupSession.linkManager);
  uint64_t v137 = swift_allocObject();
  swift_weakInit();
  v138 = v248;
  uint64_t v139 = v123;
  uint64_t v140 = v262;
  v244((uint64_t)v248, v139, v262);
  uint64_t v141 = v259;
  unint64_t v142 = (*(unsigned __int8 *)(v259 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v259 + 80);
  unint64_t v143 = (v220 + v142 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v144 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v141 + 32))(v144 + v142, v138, v140);
  *(void *)(v144 + v143) = v137;
  v145 = (void *)MEMORY[0x1E4FBC8C8];
  v146 = *(void (**)(uint64_t (*)(uint64_t, unint64_t, uint64_t, unsigned __int8 *), uint64_t))((*MEMORY[0x1E4FBC8C8] & *v136) + 0x1B8);
  swift_retain();
  v146(partial apply for specialized closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v144);
  swift_release();
  v147 = *(void **)(v21 + v135);
  uint64_t v148 = swift_allocObject();
  swift_weakInit();
  v149 = *(void (**)(uint64_t (*)(), uint64_t))((*v145 & *v147) + 0x1D0);
  v150 = v147;
  swift_retain();
  v149(partial apply for specialized closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v148);

  swift_release();
  v151 = *(void **)(v21 + v135);
  uint64_t v152 = swift_allocObject();
  swift_weakInit();
  v153 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))((*v145 & *v151) + 0x200);
  v154 = v151;
  swift_retain();
  v153(partial apply for specialized closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v152);

  swift_release();
  v155 = *(void **)(v21 + v135);
  uint64_t v156 = swift_allocObject();
  swift_weakInit();
  v157 = *(void (**)(uint64_t (*)(void *), uint64_t))((*v145 & *v155) + 0x1E8);
  v158 = v155;
  swift_retain();
  v157(partial apply for specialized closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v156);

  swift_release();
  v159 = *(void **)(v21 + v135);
  uint64_t v160 = swift_allocObject();
  swift_weakInit();
  v161 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))((*v145 & *v159) + 0x218);
  v162 = v159;
  swift_retain();
  v161(partial apply for specialized closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v160);

  uint64_t v163 = swift_release();
  v164 = v231;
  (*(void (**)(uint64_t))(*(void *)v246 + 440))(v163);
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[UInt64 : PubSubTopic.Participant]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v165 = v234;
  uint64_t v166 = v233;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v232 + 8))(v164, v166);
  swift_beginAccess();
  v167 = v238;
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, Set<Participant>> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, Set<Participant>>);
  uint64_t v168 = v236;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v235 + 8))(v165, v168);
  uint64_t v169 = v242;
  uint64_t v170 = v243;
  v249 = *(void (**)(char *, char *, uint64_t))(v242 + 16);
  v249(v252, v167, v243);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  v171 = *(void (**)(char *, uint64_t))(v169 + 8);
  v171(v167, v170);
  swift_beginAccess();
  v172 = v237;
  v173 = v214;
  Published.projectedValue.getter();
  swift_endAccess();
  id v174 = v173;
  if (!v251) {
    id v174 = *(id *)(v21 + *(void *)(*(void *)v21 + 288));
  }
  v264[0] = v174;
  uint64_t v175 = (uint64_t)v250;
  v217(v250, 1, 1, v245);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  id v251 = v173;
  v176 = v239;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v175, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  v171(v172, v170);
  swift_beginAccess();
  v250 = v171;
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Published<Set<Participant>>.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Published<Set<Participant>>.Publisher, OS_dispatch_queue>);
  uint64_t v177 = v241;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v240 + 8))(v176, v177);
  v249(v252, v167, v170);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  v250(v167, v170);
  uint64_t v178 = swift_allocObject();
  swift_weakInit();
  uint64_t v179 = v246;
  v180 = *(void (**)(uint64_t (*)(void *), uint64_t))(*(void *)v246 + 472);
  swift_retain();
  v180(partial apply for specialized closure #14 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v178);
  swift_release();
  uint64_t v181 = swift_allocObject();
  swift_weakInit();
  v182 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(*(void *)v179 + 496);
  swift_retain();
  v182(partial apply for specialized closure #15 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v181);
  swift_release();
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v183 = type metadata accessor for Logger();
  __swift_project_value_buffer(v183, (uint64_t)static Logger.client);
  swift_retain();
  v184 = Logger.logObject.getter();
  os_log_type_t v185 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v184, v185))
  {
    v186 = (uint8_t *)swift_slowAlloc();
    v187 = (void *)swift_slowAlloc();
    v264[0] = v187;
    *(_DWORD *)v186 = 136315138;
    uint64_t v188 = specialized GroupSession.description.getter();
    uint64_t v263 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v188, v189, (uint64_t *)v264);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v184, v185, "Init GroupSession %s", v186, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v187, -1, -1);
    MEMORY[0x1A624F870](v186, -1, -1);
  }
  else
  {
    swift_release();
  }
  swift_release();

  swift_release();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v254, &demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.Timestamps);
  __swift_destroy_boxed_opaque_existential_1Tm(v255);
  outlined destroy of Participant(v256, (uint64_t (*)(void))type metadata accessor for Participant);
  outlined destroy of Participant(v258, type metadata accessor for AnyGroupActivity);
  v190 = *(void (**)(uint64_t, uint64_t))(v259 + 8);
  uint64_t v191 = v262;
  v190(v257, v262);
  v190(v260, v191);
  return v21;
}

char *GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v21 = v20;
  v268._object = a8;
  v268._countAndFlagsBits = a7;
  id v259 = a6;
  uint64_t v296 = a5;
  uint64_t v258 = a4;
  uint64_t v248 = a3;
  uint64_t v297 = a2;
  uint64_t v301 = a1;
  uint64_t v293 = a20;
  uint64_t v294 = a19;
  uint64_t v292 = a18;
  uint64_t v257 = a17;
  id v256 = a16;
  id v273 = a15;
  uint64_t v255 = a14;
  id v299 = a13;
  int v254 = a12;
  uint64_t v295 = a11;
  int v253 = a10;
  int v252 = a9;
  uint64_t v22 = *(void *)v20;
  uint64_t v286 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Published<Set<Participant>>.Publisher, OS_dispatch_queue>);
  uint64_t v285 = *(void *)(v286 - 8);
  MEMORY[0x1F4188790](v286);
  v284 = (char *)v233 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v282 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  uint64_t v281 = *(void *)(v282 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v282);
  v280 = (char *)v233 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  v283 = (char *)v233 - v26;
  uint64_t v277 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  uint64_t v276 = *(void *)(v277 - 8);
  MEMORY[0x1F4188790](v277);
  v274 = (char *)v233 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v279 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, Set<Participant>>);
  uint64_t v278 = *(void *)(v279 - 8);
  MEMORY[0x1F4188790](v279);
  v275 = (char *)v233 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(v22 + 80);
  uint64_t v287 = type metadata accessor for Published.Publisher();
  uint64_t v272 = *(void *)(v287 - 8);
  MEMORY[0x1F4188790](v287);
  v271 = (char *)v233 - v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v31 - 8);
  v290 = (char *)v233 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PassthroughSubject<TUConversationActivity, Never>);
  uint64_t v34 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<TUConversationActivity, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<TUConversationActivity, Never>);
  uint64_t v262 = v33;
  uint64_t v261 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v34;
  uint64_t v35 = type metadata accessor for Publishers.CompactMap();
  uint64_t v269 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  v267 = (char *)v233 - v36;
  uint64_t v37 = type metadata accessor for OS_dispatch_queue(255, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v39 = lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v270 = v35;
  unint64_t v307 = v35;
  unint64_t v308 = v37;
  uint64_t v298 = v37;
  uint64_t v263 = WitnessTable;
  uint64_t v309 = WitnessTable;
  uint64_t v310 = v39;
  uint64_t v289 = v39;
  uint64_t v266 = type metadata accessor for Publishers.ReceiveOn();
  uint64_t v265 = *(void *)(v266 - 8);
  MEMORY[0x1F4188790](v266);
  v264 = (char *)v233 - v40;
  uint64_t v251 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<PassthroughSubject<(UUID, URL, Participant), Never>>);
  uint64_t v250 = *(void *)(v251 - 8);
  MEMORY[0x1F4188790](v251);
  v249 = (char *)v233 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v246 = (void *)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v245 = *(v246 - 1);
  MEMORY[0x1F4188790](v246);
  v244 = (char *)v233 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v242 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v242);
  uint64_t v243 = (char *)v233 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v44 - 8);
  uint64_t v240 = (char *)v233 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v304 = type metadata accessor for UUID();
  uint64_t v300 = *(void *)(v304 - 8);
  uint64_t v46 = MEMORY[0x1F4188790](v304);
  v239 = (char *)v233 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v260 = v47;
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  v288 = (char *)v233 - v49;
  uint64_t v291 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v48);
  v247 = (char *)v233 - v50;
  uint64_t v236 = type metadata accessor for Participant();
  MEMORY[0x1F4188790](v236);
  v238 = (char *)v233 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  v237 = *(void ***)(v235 - 8);
  MEMORY[0x1F4188790](v235);
  uint64_t v53 = (char *)v233 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = *(void *)(v22 + 88);
  uint64_t v55 = v29;
  type metadata accessor for GroupSession.State();
  uint64_t v56 = type metadata accessor for Published();
  uint64_t v57 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  uint64_t v59 = (char *)v233 - v58;
  *(void *)&v21[direct field offset for GroupSession.playbackSyncerLink] = 0;
  *(void *)&v21[direct field offset for GroupSession.playbackSyncMessenger] = 0;
  *(void *)&v21[direct field offset for GroupSession.attachmentDownloadBytes] = 0;
  *(void *)&v21[direct field offset for GroupSession.attachmentUploadBytes] = 0;
  *(void *)&v21[direct field offset for GroupSession.attachmentDownloadTime] = 0;
  *(void *)&v21[direct field offset for GroupSession.attachmentUploadTime] = 0;
  uint64_t v60 = &v21[direct field offset for GroupSession.receivedDataHandler];
  *(void *)uint64_t v60 = 0;
  *((void *)v60 + 1) = 0;
  uint64_t v61 = (uint64_t *)&v21[direct field offset for GroupSession._receivedDataPublisher];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(Data, Participant, SendReliability), Never>);
  swift_allocObject();
  *uint64_t v61 = PassthroughSubject.init()();
  v61[1] = 0;
  uint64_t v62 = (uint64_t *)&v21[direct field offset for GroupSession._receivedAttachmentPublisher];
  uint64_t v241 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>);
  swift_allocObject();
  *uint64_t v62 = PassthroughSubject.init()();
  v62[1] = 0;
  uint64_t v63 = (uint64_t *)&v21[direct field offset for GroupSession._catchupNeededPublisher];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Participant, Never>);
  swift_allocObject();
  *uint64_t v63 = PassthroughSubject.init()();
  v63[1] = 0;
  unint64_t v64 = &v21[*(void *)(*(void *)v21 + 208)];
  unint64_t v307 = 0;
  uint64_t v65 = v55;
  uint64_t v303 = v54;
  v233[0] = type metadata accessor for GroupSession.State();
  Published.init(wrappedValue:)((uint64_t)&v307, v233[0]);
  uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
  uint64_t v234 = v56;
  v233[1] = v57 + 32;
  v66(v64, v59, v56);
  uint64_t v67 = &v21[*(void *)(*(void *)v21 + 224)];
  unint64_t v68 = MEMORY[0x1E4FBC870];
  unint64_t v307 = MEMORY[0x1E4FBC870];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Participant>);
  Published.init(initialValue:)();
  uint64_t v69 = (void (*)(char *, char *))v237[4];
  uint64_t v70 = v235;
  v69(v67, v53);
  unint64_t v71 = v68;
  uint64_t v72 = v65;
  uint64_t v73 = &v21[*(void *)(*(void *)v21 + 232)];
  *(void *)uint64_t v73 = 0;
  *((void *)v73 + 1) = 0;
  v237 = (void **)&v21[*(void *)(*(void *)v21 + 296)];
  char *v237 = 0;
  unint64_t v74 = v68;
  uint64_t v302 = v65;
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      unint64_t v74 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
    }
    else {
      unint64_t v74 = MEMORY[0x1E4FBC870];
    }
    uint64_t v72 = v302;
    unint64_t v71 = MEMORY[0x1E4FBC870];
  }
  *(void *)&v21[*(void *)(*(void *)v21 + 304)] = v74;
  *(void *)&v21[*(void *)(*(void *)v21 + 320)] = 0;
  *(void *)&v21[*(void *)(*(void *)v21 + 328)] = 0;
  *(void *)&v21[*(void *)(*(void *)v21 + 336)] = 0;
  uint64_t v75 = v72;
  uint64_t v76 = &v21[*(void *)(*(void *)v21 + 344)];
  unint64_t v307 = v71;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Participant>);
  Published.init(initialValue:)();
  ((void (*)(char *, char *, uint64_t))v69)(v76, v53, v70);
  uint64_t v77 = &v21[*(void *)(*(void *)v21 + 352)];
  unint64_t v307 = 0;
  Published.init(wrappedValue:)((uint64_t)&v307, v233[0]);
  v66(v77, v59, v234);
  *(void *)&v21[*(void *)(*(void *)v21 + 368)] = 0;
  uint64_t v79 = v300 + 16;
  uint64_t v78 = *(void (**)(char *))(v300 + 16);
  uint64_t v80 = v301;
  v78(&v21[direct field offset for GroupSession.id]);
  uint64_t v81 = (uint64_t)v238;
  UUID.init()();
  uint64_t v82 = v236;
  uint64_t v83 = (void *)(v81 + *(int *)(v236 + 20));
  uint64_t v84 = v258;
  void *v83 = v248;
  v83[1] = v84;
  *(void *)(v81 + *(int *)(v82 + 24)) = 0;
  outlined init with take of Participant(v81, (uint64_t)&v21[direct field offset for GroupSession.initiator], (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v85 = (uint64_t)v247;
  (*(void (**)(char *, uint64_t, uint64_t))(v291 + 16))(v247, v296, v75);
  swift_beginAccess();
  property wrapper backing initializer of GroupSession.activity(v85, v75);
  swift_endAccess();
  uint64_t v86 = v292;
  *(void *)&v21[direct field offset for GroupSession.topicManager] = v292;
  swift_retain();
  uint64_t v87 = v80;
  uint64_t v88 = UUID.uuidString.getter();
  uint64_t v89 = v297;
  uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v86 + 248))(v297, v88, v90);
  swift_bridgeObjectRelease();
  uint64_t v92 = (uint64_t)v288;
  uint64_t v93 = v304;
  ((void (*)(char *, uint64_t, uint64_t))v78)(v288, v87, v304);
  uint64_t v94 = (uint64_t)v239;
  uint64_t v248 = v79;
  v247 = (char *)v78;
  ((void (*)(char *, uint64_t, uint64_t))v78)(v239, v89, v93);
  outlined init with copy of Participant(v295, v81, (uint64_t (*)(void))type metadata accessor for Participant);
  id v95 = objc_allocWithZone(MEMORY[0x1E4F5B140]);
  swift_retain();
  swift_retain();
  id v96 = v273;
  id v97 = objc_msgSend(v95, sel_init);
  id v98 = (char *)objc_allocWithZone((Class)type metadata accessor for LinkManager(0));
  uint64_t v258 = v91;
  id v273 = v96;
  *(void *)&v21[direct field offset for GroupSession.linkManager] = specialized LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(v92, v94, v86, v91, v81, v96, v97, v98);
  unint64_t v307 = 0;
  unint64_t v308 = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  unint64_t v307 = 0xD000000000000025;
  unint64_t v308 = 0x80000001A38FFD40;
  String.append(_:)(v268);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  unint64_t v307 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void *))(v245 + 104))(v244, *MEMORY[0x1E4FBCC58], v246);
  *(void *)&v21[*(void *)(*(void *)v21 + 288)] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v99 = v237;
  swift_beginAccess();
  uint64_t v100 = *v99;
  id v101 = v299;
  *id v99 = v299;
  uint64_t v246 = v101;

  id v102 = v259;
  *(void *)&v21[*(void *)(*(void *)v21 + 248)] = v259;
  uint64_t v103 = &v21[*(void *)(*(void *)v21 + 240)];
  uint64_t v105 = v302;
  uint64_t v104 = v303;
  v106 = (void *)type metadata accessor for GroupSession.Timestamps();
  v268._countAndFlagsBits = *(v106 - 1);
  uint64_t v107 = *(void (**)(char *, uint64_t))(v268._countAndFlagsBits + 16);
  v268._object = v106;
  v107(v103, v293);
  v21[*(void *)(*(void *)v21 + 256)] = v252 & 1;
  v21[*(void *)(*(void *)v21 + 264)] = v253 & 1;
  v21[*(void *)(*(void *)v21 + 272)] = v254 & 1;
  *(void *)&v21[*(void *)(*(void *)v21 + 360)] = v255;
  uint64_t v108 = &v21[*(void *)(*(void *)v21 + 232)];
  swift_beginAccess();
  uint64_t v109 = v257;
  *(void *)uint64_t v108 = v256;
  *((void *)v108 + 1) = v109;
  id v110 = v102;
  swift_bridgeObjectRelease();
  outlined init with copy of AudioSessionAssertionManager(v294, (uint64_t)&v21[*(void *)(*(void *)v21 + 312)]);
  type metadata accessor for ActivitySessionClientConnection();
  id v259 = v110;
  uint64_t v111 = XPCClient.__allocating_init(listenerEndpoint:)();
  id v112 = (id *)&v21[*(void *)(*(void *)v21 + 280)];
  *id v112 = (id)v111;
  id v113 = (unint64_t *)&v21[direct field offset for GroupSession._receivedAttachmentPublisher];
  swift_beginAccess();
  unint64_t v307 = *v113;
  uint64_t v114 = swift_allocObject();
  swift_weakInit();
  id v115 = (void *)swift_allocObject();
  v115[2] = v105;
  v115[3] = v104;
  v115[4] = v114;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<(UUID, URL, Participant), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>);
  swift_retain();
  swift_retain();
  id v116 = v249;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<PassthroughSubject<(UUID, URL, Participant), Never>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<PassthroughSubject<(UUID, URL, Participant), Never>>);
  uint64_t v117 = v251;
  uint64_t v118 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v250 + 8))(v116, v117);
  id v119 = v246;
  v120 = &v21[direct field offset for GroupSession._receivedAttachmentPublisher];
  swift_beginAccess();
  *((void *)v120 + 1) = v118;
  swift_release();
  swift_beginAccess();
  id v121 = *v112;
  uint64_t v122 = swift_allocObject();
  swift_weakInit();
  uint64_t v123 = (void *)swift_allocObject();
  v123[2] = v105;
  v123[3] = v104;
  v123[4] = v122;
  id v124 = v121;
  swift_retain();
  ActivitySessionClientConnection.serverDisconnectedCallback.setter();

  swift_release();
  id v125 = *v112;
  uint64_t v126 = swift_allocObject();
  swift_weakInit();
  uint64_t v127 = (void *)swift_allocObject();
  v127[2] = v105;
  v127[3] = v104;
  v127[4] = v126;
  id v128 = v125;
  swift_retain();
  ActivitySessionClientConnection.setAssociatedSceneCallback.setter();

  swift_release();
  id v129 = *v112;
  uint64_t v130 = swift_allocObject();
  swift_weakInit();
  v131 = (void *)swift_allocObject();
  v131[2] = v105;
  v131[3] = v104;
  v131[4] = v130;
  id v132 = v129;
  swift_retain();
  ActivitySessionClientConnection.setStateCallback.setter();

  swift_release();
  id v133 = *v112;
  uint64_t v134 = swift_allocObject();
  swift_weakInit();
  uint64_t v135 = (void *)swift_allocObject();
  v135[2] = v105;
  v135[3] = v104;
  v135[4] = v134;
  id v136 = v133;
  swift_retain();
  ActivitySessionClientConnection.setDataCryptorCallback.setter();

  swift_release();
  id v137 = *v112;
  uint64_t v138 = swift_allocObject();
  swift_weakInit();
  uint64_t v139 = (void *)swift_allocObject();
  v139[2] = v105;
  v139[3] = v104;
  v139[4] = v138;
  id v140 = v137;
  swift_retain();
  ActivitySessionClientConnection.receivedResourceCallback.setter();

  swift_release();
  id v141 = *v112;
  unint64_t v142 = (void *)ActivitySessionClientConnection.setActivityPublisher.getter();

  id v306 = v142;
  uint64_t v143 = swift_allocObject();
  *(void *)(v143 + 16) = v105;
  *(void *)(v143 + 24) = v104;
  uint64_t v144 = v267;
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_release();
  id v145 = v119;
  uint64_t v146 = v301;
  v147 = v144;
  if (!v299) {
    id v145 = *(id *)&v21[*(void *)(*(void *)v21 + 288)];
  }
  id v306 = v145;
  uint64_t v148 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v149 = *(void *)(v148 - 8);
  v150 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v149 + 56);
  uint64_t v151 = (uint64_t)v290;
  uint64_t v262 = v148;
  uint64_t v261 = v150;
  uint64_t v257 = v149 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v150)(v290, 1, 1);
  id v256 = v119;
  uint64_t v152 = v264;
  uint64_t v153 = v270;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v151, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(char *, uint64_t))(v269 + 8))(v147, v153);
  uint64_t v154 = (uint64_t)v271;
  GroupSession.$activity.getter();
  uint64_t v155 = v266;
  swift_getWitnessTable();
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v265 + 8))(v152, v155);
  specialized GroupSession.$activity.setter(v154);
  (*(void (**)(uint64_t, uint64_t))(v272 + 8))(v154, v287);
  uint64_t v287 = direct field offset for GroupSession.linkManager;
  uint64_t v156 = *(void **)&v21[direct field offset for GroupSession.linkManager];
  uint64_t v157 = swift_allocObject();
  swift_weakInit();
  v158 = v288;
  uint64_t v159 = v146;
  uint64_t v160 = v304;
  ((void (*)(char *, uint64_t, uint64_t))v247)(v288, v159, v304);
  uint64_t v161 = v300;
  unint64_t v162 = (*(unsigned __int8 *)(v300 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v300 + 80);
  unint64_t v163 = (v260 + v162 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v164 = swift_allocObject();
  uint64_t v166 = v302;
  uint64_t v165 = v303;
  *(void *)(v164 + 16) = v302;
  *(void *)(v164 + 24) = v165;
  (*(void (**)(unint64_t, char *, uint64_t))(v161 + 32))(v164 + v162, v158, v160);
  *(void *)(v164 + v163) = v157;
  v167 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v168 = *(void (**)(uint64_t (*)(uint64_t, unint64_t, uint64_t, unsigned __int8 *), uint64_t))((*MEMORY[0x1E4FBC8C8] & *v156) + 0x1B8);
  swift_retain();
  v168(partial apply for closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v164);
  swift_release();
  uint64_t v169 = v287;
  uint64_t v170 = *(void **)&v21[v287];
  uint64_t v171 = swift_allocObject();
  swift_weakInit();
  v172 = (void *)swift_allocObject();
  uint64_t v173 = v303;
  v172[2] = v166;
  v172[3] = v173;
  v172[4] = v171;
  id v174 = *(void (**)(uint64_t (*)(), void *))((*v167 & *v170) + 0x1D0);
  uint64_t v175 = v170;
  swift_retain();
  v174(partial apply for closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v172);

  swift_release();
  v176 = *(void **)&v21[v169];
  uint64_t v177 = swift_allocObject();
  swift_weakInit();
  uint64_t v178 = (void *)swift_allocObject();
  v178[2] = v166;
  uint64_t v179 = v166;
  uint64_t v180 = v303;
  v178[3] = v303;
  v178[4] = v177;
  uint64_t v181 = *(void (**)(uint64_t (*)(uint64_t), void *))((*MEMORY[0x1E4FBC8C8] & *v176) + 0x200);
  v182 = v176;
  swift_retain();
  v181(partial apply for closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v178);

  swift_release();
  uint64_t v183 = *(void **)&v21[v169];
  uint64_t v184 = swift_allocObject();
  swift_weakInit();
  os_log_type_t v185 = (void *)swift_allocObject();
  v185[2] = v179;
  v185[3] = v180;
  v185[4] = v184;
  v186 = (void *)MEMORY[0x1E4FBC8C8];
  v187 = *(void (**)(uint64_t (*)(void *), void *))((*MEMORY[0x1E4FBC8C8] & *v183) + 0x1E8);
  uint64_t v188 = v183;
  swift_retain();
  v187(partial apply for closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v185);

  swift_release();
  unint64_t v189 = *(void **)&v21[v287];
  uint64_t v190 = swift_allocObject();
  swift_weakInit();
  uint64_t v191 = (void *)swift_allocObject();
  v191[2] = v179;
  v191[3] = v180;
  v191[4] = v190;
  v192 = *(void (**)(uint64_t (*)(void *), void *))((*v186 & *v189) + 0x218);
  uint64_t v193 = v189;
  swift_retain();
  v192(partial apply for closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v191);

  uint64_t v194 = swift_release();
  uint64_t v195 = v258;
  uint64_t v196 = v274;
  (*(void (**)(uint64_t))(*(void *)v258 + 440))(v194);
  uint64_t v197 = swift_allocObject();
  swift_weakInit();
  v198 = (void *)swift_allocObject();
  uint64_t v199 = v302;
  v198[2] = v302;
  v198[3] = v180;
  v198[4] = v197;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Participant>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[UInt64 : PubSubTopic.Participant]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  uint64_t v200 = v275;
  uint64_t v201 = v277;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v276 + 8))(v196, v201);
  uint64_t v202 = (uint64_t)v283;
  GroupSession.$internalActiveParticipants.getter();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, Set<Participant>> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, Set<Participant>>);
  uint64_t v203 = v279;
  Publisher<>.assign(to:)();
  uint64_t v204 = v203;
  uint64_t v205 = v256;
  (*(void (**)(char *, uint64_t))(v278 + 8))(v200, v204);
  GroupSession.$internalActiveParticipants.setter(v202);
  uint64_t v206 = v280;
  GroupSession.$internalActiveParticipants.getter();
  id v207 = v205;
  uint64_t v208 = v180;
  if (!v299) {
    id v207 = *(id *)&v21[*(void *)(*(void *)v21 + 288)];
  }
  id v306 = v207;
  uint64_t v209 = (uint64_t)v290;
  v261(v290, 1, 1, v262);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  id v299 = v205;
  uint64_t v210 = v284;
  uint64_t v211 = v282;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v209, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(char *, uint64_t))(v281 + 8))(v206, v211);
  GroupSession.$activeParticipants.getter();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Published<Set<Participant>>.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Published<Set<Participant>>.Publisher, OS_dispatch_queue>);
  uint64_t v212 = v286;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v285 + 8))(v210, v212);
  GroupSession.$activeParticipants.setter(v202);
  uint64_t v213 = swift_allocObject();
  swift_weakInit();
  id v214 = (void *)swift_allocObject();
  v214[2] = v199;
  v214[3] = v208;
  v214[4] = v213;
  uint64_t v215 = *(void (**)(uint64_t (*)(void *), void *))(*(void *)v195 + 472);
  swift_retain();
  v215(partial apply for closure #14 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v214);
  swift_release();
  uint64_t v216 = swift_allocObject();
  swift_weakInit();
  v217 = (void *)swift_allocObject();
  v217[2] = v199;
  v217[3] = v208;
  v217[4] = v216;
  v218 = *(void (**)(uint64_t (*)(), void *))(*(void *)v195 + 496);
  swift_retain();
  v218(partial apply for closure #15 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v217);
  swift_release();
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v219 = type metadata accessor for Logger();
  __swift_project_value_buffer(v219, (uint64_t)static Logger.client);
  swift_retain();
  uint64_t v220 = Logger.logObject.getter();
  os_log_type_t v221 = static os_log_type_t.default.getter();
  BOOL v222 = os_log_type_enabled(v220, v221);
  uint64_t v223 = v301;
  uint64_t v224 = v297;
  if (v222)
  {
    uint64_t v225 = (uint8_t *)swift_slowAlloc();
    v226 = (void *)swift_slowAlloc();
    id v306 = v226;
    *(_DWORD *)uint64_t v225 = 136315138;
    uint64_t v227 = GroupSession.description.getter();
    uint64_t v305 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v227, v228, (uint64_t *)&v306);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v220, v221, "Init GroupSession %s", v225, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v226, -1, -1);
    MEMORY[0x1A624F870](v225, -1, -1);
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, void *))(v268._countAndFlagsBits + 8))(v293, v268._object);
    __swift_destroy_boxed_opaque_existential_1Tm(v294);
    outlined destroy of Participant(v295, (uint64_t (*)(void))type metadata accessor for Participant);
    (*(void (**)(uint64_t, uint64_t))(v291 + 8))(v296, v302);
    uint64_t v229 = *(void (**)(uint64_t, uint64_t))(v300 + 8);
    uint64_t v230 = v304;
    v229(v224, v304);
    uint64_t v231 = v301;
  }
  else
  {
    swift_release();
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, void *))(v268._countAndFlagsBits + 8))(v293, v268._object);
    __swift_destroy_boxed_opaque_existential_1Tm(v294);
    outlined destroy of Participant(v295, (uint64_t (*)(void))type metadata accessor for Participant);
    (*(void (**)(uint64_t, uint64_t))(v291 + 8))(v296, v199);
    uint64_t v229 = *(void (**)(uint64_t, uint64_t))(v300 + 8);
    uint64_t v230 = v304;
    v229(v224, v304);
    uint64_t v231 = v223;
  }
  v229(v231, v230);
  return v21;
}

uint64_t specialized closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(NSObject **)(result + *(void *)(*(void *)result + 288));
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = partial apply for specialized closure #1 in closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    *(void *)(v3 + 24) = v1;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_427;
    uint64_t v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v2, v4);
    swift_release();
    _Block_release(v4);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v2) {
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(NSObject **)(result + *(void *)(*(void *)result + 288));
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = partial apply for closure #1 in closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    *(void *)(v3 + 24) = v1;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_509;
    uint64_t v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v2, v4);
    swift_release();
    _Block_release(v4);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v2) {
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized GroupSession.handleNewAttachmentSubscriber()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (void *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  size_t v6 = *(void **)(v1 + *(void *)(*(void *)v1 + 288));
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1A375F000, v9, v10, "Received new attachment subscriber", v11, 2u);
    MEMORY[0x1A624F870](v11, -1, -1);
  }

  id v12 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 336));
  swift_beginAccess();
  uint64_t v13 = *v12;
  *v12 |= 1uLL;
  specialized GroupSession.capabilities.didset(v13);
  uint64_t v14 = *(void *)(v1 + direct field offset for GroupSession.topicManager);
  uint64_t v15 = *(void **)(v1 + direct field offset for GroupSession.linkManager);
  uint64_t v16 = (char *)v15 + OBJC_IVAR____TtC15GroupActivities11LinkManager_groupUUID;
  uint64_t v17 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)v14 + 240))(v16, v17, v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v15) + 0x100);
  uint64_t v20 = swift_retain();
  v19(v20);
  uint64_t v21 = (void *)(v1 + direct field offset for GroupSession._receivedAttachmentPublisher);
  swift_beginAccess();
  v23[1] = *v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<(UUID, URL, Participant), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>);
  v21[1] = Publisher.eraseToAnyPublisher()();
  swift_release();
  return swift_release();
}

Swift::Void __swiftcall GroupSession.handleNewAttachmentSubscriber()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (void *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  size_t v6 = *(void **)(v1 + *(void *)(*(void *)v1 + 288));
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1A375F000, v9, v10, "Received new attachment subscriber", v11, 2u);
    MEMORY[0x1A624F870](v11, -1, -1);
  }

  id v12 = (void *)(v1 + *(void *)(*(void *)v1 + 336));
  swift_beginAccess();
  GroupSession.capabilities.setter(*v12 | 1);
  uint64_t v13 = *(void *)(v1 + direct field offset for GroupSession.topicManager);
  uint64_t v14 = *(void **)(v1 + direct field offset for GroupSession.linkManager);
  uint64_t v15 = (char *)v14 + OBJC_IVAR____TtC15GroupActivities11LinkManager_groupUUID;
  uint64_t v16 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)v13 + 240))(v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v14) + 0x100);
  uint64_t v19 = swift_retain();
  v18(v19);
  uint64_t v20 = (void *)(v1 + direct field offset for GroupSession._receivedAttachmentPublisher);
  swift_beginAccess();
  v23[7] = *v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<(UUID, URL, Participant), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>);
  uint64_t v21 = Publisher.eraseToAnyPublisher()();
  uint64_t v22 = v1 + direct field offset for GroupSession._receivedAttachmentPublisher;
  swift_beginAccess();
  *(void *)(v22 + 8) = v21;
  swift_release();
  swift_release();
}

uint64_t specialized closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v11[1] = *(void *)(result + *(void *)(*(void *)result + 288));
    aBlock[4] = partial apply for specialized closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    aBlock[5] = result;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_420;
    uint64_t v9 = _Block_copy(aBlock);
    v11[0] = v4;
    os_log_type_t v10 = v9;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v11[2] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A624E5F0](0, v7, v3, v10);
    _Block_release(v10);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    (*(void (**)(char *, void))(v5 + 8))(v7, v11[0]);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v11[1] = *(void *)(result + *(void *)(*(void *)result + 288));
    aBlock[4] = partial apply for closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    aBlock[5] = result;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_502;
    uint64_t v9 = _Block_copy(aBlock);
    v11[0] = v4;
    os_log_type_t v10 = v9;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v11[2] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A624E5F0](0, v7, v3, v10);
    _Block_release(v10);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    (*(void (**)(char *, void))(v5 + 8))(v7, v11[0]);
    swift_release();
    return swift_release();
  }
  return result;
}

void specialized closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  type metadata accessor for AnyGroupActivity(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined consume of GroupSession<A>.State<A>(v2);
  if ((unint64_t)v2 <= 1)
  {
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    uint64_t v0 = (void *)swift_allocError();
    *uint64_t v1 = 4;
    specialized GroupSession.invalidate(reason:)(v0);
  }
}

void closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  GroupSession.internalState.getter();
  outlined consume of GroupSession<A>.State<A>(v2);
  if ((unint64_t)v2 <= 1)
  {
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    uint64_t v0 = (void *)swift_allocError();
    *uint64_t v1 = 4;
    GroupSession.invalidate(reason:)(v0);
  }
}

uint64_t specialized GroupSession.invalidate(reason:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for playback != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.playback);
  id v5 = a1;
  id v6 = a1;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v38[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    id v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    v37[13] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v7, v8, "Invalidating GroupSession with reason:%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v10, -1, -1);
    MEMORY[0x1A624F870](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = specialized GroupSession.cleanUpPlaybackSyncer()();
  uint64_t v15 = *(void **)(v2 + direct field offset for GroupSession.linkManager);
  uint64_t v16 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v15) + 0x130))(v14);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  id v17 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
  uint64_t v18 = (void *)AttachmentDataReport.init(totalAttachments:totalDownloadBytes:totalUploadBytes:downloadSpeed:uploadSpeed:)();
  specialized GroupSession.logAttachmentEvent(report:reportEvent:)(v18, 0xD000000000000023, 0x80000001A38FFE40);

  uint64_t v19 = (void *)(*(uint64_t (**)(void))((*v16 & *v15) + 0x238))();
  specialized GroupSession.logAttachmentEvent(report:reportEvent:)(v19, 0xD000000000000027, 0x80000001A38FFD70);

  uint64_t v20 = (id *)(v2 + *(void *)(*(void *)v2 + 280));
  swift_beginAccess();
  id v21 = *v20;
  dispatch thunk of XPCClient.destroyConnection()();

  MEMORY[0x1F4188790](v22);
  type metadata accessor for AnyGroupActivity(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x1F4188790](KeyPath);
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined consume of GroupSession<A>.State<A>(v37[0]);
  if (v37[0] >= (id)2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    id v27 = a1;
    id v28 = a1;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = (void *)swift_slowAlloc();
      v37[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      id v33 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v34 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, (uint64_t *)v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v29, v30, "Received invalidation reason %s after already being invalidated.", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v32, -1, -1);
      MEMORY[0x1A624F870](v31, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    swift_beginAccess();
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    id v24 = a1;
    specialized GroupSession.internalState.willset(a1);
    MEMORY[0x1F4188790](v25);
    uint64_t v26 = swift_getKeyPath();
    MEMORY[0x1F4188790](v26);
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.setter();
    specialized GroupSession.updatePublicState()();
  }
  *(void *)(v2 + *(void *)(*(void *)v2 + 320)) = 0;
  return swift_release();
}

uint64_t GroupSession.invalidate(reason:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for playback != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.playback);
  id v5 = a1;
  id v6 = a1;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    v30[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    id v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    v29[1] = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v7, v8, "Invalidating GroupSession with reason:%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v10, -1, -1);
    MEMORY[0x1A624F870](v9, -1, -1);
  }
  else
  {
  }
  GroupSession.cleanUpPlaybackSyncer()();
  GroupSession.logAttachmentSessionReport()();
  uint64_t v14 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v2
                                                                           + direct field offset for GroupSession.linkManager))
                                     + 0x238))();
  GroupSession.logAttachmentEvent(report:reportEvent:)(v14, 0xD000000000000027, 0x80000001A38FFD70);

  uint64_t v15 = (id *)(v2 + *(void *)(*(void *)v2 + 280));
  swift_beginAccess();
  id v16 = *v15;
  dispatch thunk of XPCClient.destroyConnection()();

  GroupSession.internalState.getter();
  id v17 = v30[0];
  outlined consume of GroupSession<A>.State<A>(v30[0]);
  if ((unint64_t)v17 <= 1)
  {
    swift_beginAccess();
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    v29[0] = a1;
    id v27 = a1;
    GroupSession.internalState.setter(v29);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    id v18 = a1;
    id v19 = a1;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      v30[0] = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      id v24 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v25 = String.init<A>(reflecting:)();
      v29[0] = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v20, v21, "Received invalidation reason %s after already being invalidated.", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v23, -1, -1);
      MEMORY[0x1A624F870](v22, -1, -1);
    }
    else
    {
    }
  }
  *(void *)(v2 + *(void *)(*(void *)v2 + 320)) = 0;
  return swift_release();
}

uint64_t specialized closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v14 = *(id *)(result + *(void *)(*(void *)result + 288));
    swift_release();
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = a3;
    v15[3] = a1;
    void v15[4] = a2;
    aBlock[4] = partial apply for specialized closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_417;
    id v16 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v19 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A624E5F0](0, v12, v9, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v18);
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v17 = *(id *)(result + *(void *)(*(void *)result + 288));
    uint64_t v23 = v12;
    id v18 = v17;
    swift_release();
    uint64_t v19 = (void *)swift_allocObject();
    uint64_t v20 = v25;
    v19[2] = v24;
    v19[3] = v20;
    v19[4] = a3;
    v19[5] = a1;
    v19[6] = a2;
    aBlock[4] = partial apply for closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_499;
    os_log_type_t v21 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v26 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A624E5F0](0, v15, v11, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v23);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = (void *)(result + *(void *)(*(void *)result + 232));
    swift_beginAccess();
    *uint64_t v6 = a2;
    v6[1] = a3;
    swift_bridgeObjectRetain();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v13 = result;
    v17[1] = *(void *)(result + *(void *)(*(void *)result + 288));
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = a1;
    v14[3] = v13;
    v14[4] = a2;
    aBlock[4] = partial apply for specialized closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_411;
    uint64_t v15 = _Block_copy(aBlock);
    swift_retain();
    id v16 = a2;
    static DispatchQoS.unspecified.getter();
    v17[2] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    v17[0] = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A624E5F0](0, v11, v7, v15);
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, void))(v9 + 8))(v11, v17[0]);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v13 = result;
    v17[1] = *(void *)(result + *(void *)(*(void *)result + 288));
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = a1;
    v14[3] = v13;
    v14[4] = a2;
    aBlock[4] = partial apply for closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_493;
    uint64_t v15 = _Block_copy(aBlock);
    swift_retain();
    id v16 = a2;
    static DispatchQoS.unspecified.getter();
    v17[2] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    v17[0] = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A624E5F0](0, v11, v7, v15);
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, void))(v9 + 8))(v11, v17[0]);
    swift_release();
    return swift_release();
  }
  return result;
}

void specialized closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, int a2, id a3)
{
  switch(a1)
  {
    case 0:
      specialized GroupSession.internalState.willset(0);
      MEMORY[0x1F4188790](v3);
      type metadata accessor for AnyGroupActivity(0);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x1F4188790](KeyPath);
      swift_getKeyPath();
      goto LABEL_4;
    case 1:
      specialized GroupSession.internalState.willset((void *)1);
      MEMORY[0x1F4188790](v5);
      type metadata accessor for AnyGroupActivity(0);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
      uint64_t v6 = swift_getKeyPath();
      MEMORY[0x1F4188790](v6);
      swift_getKeyPath();
LABEL_4:
      swift_retain();
      static Published.subscript.setter();
      specialized GroupSession.updatePublicState()();
      return;
    case 2:
      if (a3)
      {
        id v12 = a3;
      }
      else
      {
        lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
        id v12 = (id)swift_allocError();
        *uint64_t v14 = 2;
      }
      id v15 = a3;
      specialized GroupSession.invalidate(reason:)(v12);
      uint64_t v13 = v12;
      goto LABEL_12;
    case 4:
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      uint64_t v7 = (void *)swift_allocError();
      uint64_t v9 = v7;
      char v10 = 6;
      goto LABEL_9;
    case 5:
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      uint64_t v7 = (void *)swift_allocError();
      uint64_t v9 = v7;
      char v10 = 8;
LABEL_9:
      char *v8 = v10;
      specialized GroupSession.invalidate(reason:)(v7);
      uint64_t v13 = v9;
LABEL_12:

      return;
    default:
      _StringGuts.grow(_:)(17);
      v16._countAndFlagsBits = 0x206E776F6E6B6E55;
      v16._object = (void *)0xEF203A6574617473;
      String.append(_:)(v16);
      type metadata accessor for CPActivitySessionState(0);
      _print_unlocked<A, B>(_:_:)();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1A377B350);
  }
}

void closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, int a2, id a3)
{
  switch(a1)
  {
    case 0:
      v13[0] = 0;
      goto LABEL_4;
    case 1:
      v13[0] = (void *)1;
LABEL_4:
      GroupSession.internalState.setter(v13);
      return;
    case 2:
      if (a3)
      {
        id v8 = a3;
      }
      else
      {
        lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
        id v8 = (id)swift_allocError();
        *char v10 = 2;
      }
      id v11 = a3;
      GroupSession.invalidate(reason:)(v8);
      uint64_t v9 = v8;
      goto LABEL_12;
    case 4:
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      uint64_t v3 = (void *)swift_allocError();
      uint64_t v5 = v3;
      char v6 = 6;
      goto LABEL_9;
    case 5:
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      uint64_t v3 = (void *)swift_allocError();
      uint64_t v5 = v3;
      char v6 = 8;
LABEL_9:
      *uint64_t v4 = v6;
      GroupSession.invalidate(reason:)(v3);
      uint64_t v9 = v5;
LABEL_12:

      return;
    default:
      v13[0] = 0;
      v13[1] = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(17);
      v12._countAndFlagsBits = 0x206E776F6E6B6E55;
      v12._object = (void *)0xEF203A6574617473;
      String.append(_:)(v12);
      type metadata accessor for CPActivitySessionState(0);
      _print_unlocked<A, B>(_:_:)();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1A377B554);
  }
}

void specialized closure #5 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = *(void **)(Strong + direct field offset for GroupSession.linkManager);
    uint64_t v2 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x170);
    uint64_t v3 = v1;
    uint64_t v4 = swift_unknownObjectRetain();
    v2(v4);
    swift_release();
  }
}

void specialized closure #6 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v79 = a1;
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, URL, Participant));
  MEMORY[0x1F4188790](v82);
  uint64_t v77 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v80 = *(void *)(v6 - 8);
  uint64_t v81 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v78 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v75 = (uint64_t)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Participant();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  id v17 = (char *)&v75 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v76 = (uint64_t)&v75 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v19 - 8);
  os_log_type_t v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v85 = v22;
  uint64_t v86 = v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v83 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for String.Encoding();
  MEMORY[0x1F4188790](v25 - 8);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v84 = Strong;
  static String.Encoding.utf8.getter();
  uint64_t v27 = String.init(data:encoding:)();
  if (!v28)
  {
    if (one-time initialization token for default != -1) {
LABEL_54:
    }
      swift_once();
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Log.default);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v34, v39))
    {

      swift_release();
      return;
    }
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl(&dword_1A375F000, v34, v39, "Failed to find attachmentID from metadata", v36, 2u);
    goto LABEL_11;
  }
  uint64_t v29 = v27;
  unint64_t v30 = v28;
  UUID.init(uuidString:)();
  uint64_t v31 = v85;
  uint64_t v32 = v86;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v21, 1, v85) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v21, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Log.default);
    swift_bridgeObjectRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v34, v35))
    {

      swift_release();
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    v87[0] = v37;
    *(_DWORD *)uint64_t v36 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v34, v35, "Failed to convert attachmentID: %s to UUID.", v36, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v37, -1, -1);
LABEL_11:
    MEMORY[0x1A624F870](v36, -1, -1);
    swift_release();

    return;
  }
  swift_bridgeObjectRelease();
  uint64_t v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v32 + 32))(v83, v21, v31);
  MEMORY[0x1F4188790](v40);
  uint64_t v41 = type metadata accessor for AnyGroupActivity(0);
  *(&v75 - 2) = v41;
  uint64_t v42 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
  *(&v75 - 1) = v42;
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x1F4188790](KeyPath);
  *(&v75 - 2) = v41;
  *(&v75 - 1) = v42;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v44 = v87[0];
  uint64_t v45 = v87[0] + 56;
  uint64_t v46 = 1 << *(unsigned char *)(v87[0] + 32);
  uint64_t v47 = -1;
  if (v46 < 64) {
    uint64_t v47 = ~(-1 << v46);
  }
  unint64_t v48 = v47 & *(void *)(v87[0] + 56);
  int64_t v49 = (unint64_t)(v46 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v50 = 0;
  if (!v48) {
    goto LABEL_16;
  }
LABEL_15:
  unint64_t v51 = __clz(__rbit64(v48));
  v48 &= v48 - 1;
  for (unint64_t i = v51 | (v50 << 6); ; unint64_t i = __clz(__rbit64(v54)) + (v50 << 6))
  {
    outlined init with copy of Participant(*(void *)(v44 + 48) + *(void *)(v11 + 72) * i, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
    if (*(void *)&v14[*(int *)(v10 + 24)] == a4)
    {
      swift_release();
      uint64_t v56 = v75;
      outlined init with take of Participant((uint64_t)v14, v75, (uint64_t (*)(void))type metadata accessor for Participant);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v56, 0, 1, v10);
LABEL_43:
      swift_bridgeObjectRelease();
      int v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v56, 1, v10);
      uint64_t v58 = v86;
      if (v57 == 1)
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v56, &demangling cache variable for type metadata for Participant?);
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v59 = type metadata accessor for Logger();
        __swift_project_value_buffer(v59, (uint64_t)static Log.default);
        swift_retain();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          v87[0] = v63;
          *(_DWORD *)uint64_t v62 = 134218242;
          uint64_t v88 = a4;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v62 + 12) = 2080;
          uint64_t v64 = specialized GroupSession.description.getter();
          uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v87);
          uint64_t v58 = v86;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1A375F000, v60, v61, "Failed to find participant on GroupSession with serverIdentifier: %llu, groupSession: %s", (uint8_t *)v62, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1A624F870](v63, -1, -1);
          MEMORY[0x1A624F870](v62, -1, -1);
        }
        else
        {

          swift_release();
        }
        uint64_t v66 = v76;
        uint64_t v67 = (uint64_t)v77;
        UUID.init(_:)();
        *(void *)(v66 + *(int *)(v10 + 24)) = a4;
        unint64_t v68 = (void *)(v66 + *(int *)(v10 + 20));
        *unint64_t v68 = 0;
        v68[1] = 0xE000000000000000;
      }
      else
      {
        uint64_t v66 = v76;
        outlined init with take of Participant(v56, v76, (uint64_t (*)(void))type metadata accessor for Participant);
        uint64_t v67 = (uint64_t)v77;
      }
      swift_beginAccess();
      swift_retain();
      id v69 = objc_msgSend(v79, sel_URL);
      uint64_t v70 = v78;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v71 = v83;
      uint64_t v72 = v67 + *(int *)(v82 + 48);
      uint64_t v73 = v67 + *(int *)(v82 + 64);
      uint64_t v74 = v85;
      (*(void (**)(uint64_t, char *, uint64_t))(v58 + 16))(v67, v83, v85);
      (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v72, v70, v81);
      outlined init with copy of Participant(v66, v73, (uint64_t (*)(void))type metadata accessor for Participant);
      PassthroughSubject.send(_:)();
      swift_release();
      swift_release();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v67, &demangling cache variable for type metadata for (UUID, URL, Participant));
      outlined destroy of Participant(v66, (uint64_t (*)(void))type metadata accessor for Participant);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v71, v74);
      return;
    }
    outlined destroy of Participant((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
    if (v48) {
      goto LABEL_15;
    }
LABEL_16:
    int64_t v53 = v50 + 1;
    if (__OFADD__(v50, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v53 >= v49)
    {
LABEL_42:
      swift_release();
      uint64_t v56 = v75;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v75, 1, 1, v10);
      goto LABEL_43;
    }
    unint64_t v54 = *(void *)(v45 + 8 * v53);
    ++v50;
    if (!v54)
    {
      int64_t v50 = v53 + 1;
      if (v53 + 1 >= v49) {
        goto LABEL_42;
      }
      unint64_t v54 = *(void *)(v45 + 8 * v50);
      if (!v54)
      {
        int64_t v50 = v53 + 2;
        if (v53 + 2 >= v49) {
          goto LABEL_42;
        }
        unint64_t v54 = *(void *)(v45 + 8 * v50);
        if (!v54)
        {
          int64_t v50 = v53 + 3;
          if (v53 + 3 >= v49) {
            goto LABEL_42;
          }
          unint64_t v54 = *(void *)(v45 + 8 * v50);
          if (!v54)
          {
            int64_t v50 = v53 + 4;
            if (v53 + 4 >= v49) {
              goto LABEL_42;
            }
            unint64_t v54 = *(void *)(v45 + 8 * v50);
            if (!v54)
            {
              int64_t v50 = v53 + 5;
              if (v53 + 5 >= v49) {
                goto LABEL_42;
              }
              unint64_t v54 = *(void *)(v45 + 8 * v50);
              if (!v54) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_35:
    unint64_t v48 = (v54 - 1) & v54;
  }
  int64_t v55 = v53 + 6;
  if (v55 >= v49) {
    goto LABEL_42;
  }
  unint64_t v54 = *(void *)(v45 + 8 * v55);
  if (v54)
  {
    int64_t v50 = v55;
    goto LABEL_35;
  }
  while (1)
  {
    int64_t v50 = v55 + 1;
    if (__OFADD__(v55, 1)) {
      break;
    }
    if (v50 >= v49) {
      goto LABEL_42;
    }
    unint64_t v54 = *(void *)(v45 + 8 * v50);
    ++v55;
    if (v54) {
      goto LABEL_35;
    }
  }
  __break(1u);
}

void closure #6 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v79 = a1;
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, URL, Participant));
  MEMORY[0x1F4188790](v82);
  uint64_t v83 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v80 = *(void *)(v6 - 8);
  uint64_t v81 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v78 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v77 = (uint64_t)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Participant();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  id v17 = (char *)&v76 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v76 = (uint64_t)&v76 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v19 - 8);
  os_log_type_t v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v86 = v22;
  uint64_t v87 = v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v84 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for String.Encoding();
  MEMORY[0x1F4188790](v25 - 8);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v85 = Strong;
  static String.Encoding.utf8.getter();
  uint64_t v27 = String.init(data:encoding:)();
  if (!v28)
  {
    if (one-time initialization token for default != -1) {
LABEL_52:
    }
      swift_once();
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Log.default);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v34, v40))
    {

      swift_release();
      return;
    }
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl(&dword_1A375F000, v34, v40, "Failed to find attachmentID from metadata", v41, 2u);
    uint64_t v38 = v41;
    goto LABEL_11;
  }
  uint64_t v29 = v27;
  unint64_t v30 = v28;
  UUID.init(uuidString:)();
  uint64_t v31 = v86;
  uint64_t v32 = v87;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v21, 1, v86) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v21, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Log.default);
    swift_bridgeObjectRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v34, v35))
    {

      swift_release();
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    v89[0] = v37;
    *(_DWORD *)uint64_t v36 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v34, v35, "Failed to convert attachmentID: %s to UUID.", v36, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v37, -1, -1);
    uint64_t v38 = v36;
LABEL_11:
    MEMORY[0x1A624F870](v38, -1, -1);
    swift_release();

    return;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v84, v21, v31);
  uint64_t v42 = GroupSession.activeParticipants.getter();
  uint64_t v43 = v42;
  uint64_t v44 = v42 + 56;
  uint64_t v45 = 1 << *(unsigned char *)(v42 + 32);
  uint64_t v46 = -1;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  unint64_t v47 = v46 & *(void *)(v42 + 56);
  int64_t v48 = (unint64_t)(v45 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v49 = 0;
  if (!v47) {
    goto LABEL_16;
  }
LABEL_15:
  unint64_t v50 = __clz(__rbit64(v47));
  v47 &= v47 - 1;
  for (unint64_t i = v50 | (v49 << 6); ; unint64_t i = __clz(__rbit64(v53)) + (v49 << 6))
  {
    outlined init with copy of Participant(*(void *)(v43 + 48) + *(void *)(v11 + 72) * i, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
    if (*(void *)&v14[*(int *)(v10 + 24)] == a4)
    {
      swift_release();
      uint64_t v55 = v77;
      outlined init with take of Participant((uint64_t)v14, v77, (uint64_t (*)(void))type metadata accessor for Participant);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v55, 0, 1, v10);
LABEL_41:
      swift_bridgeObjectRelease();
      int v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v55, 1, v10);
      uint64_t v57 = v87;
      if (v56 == 1)
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v55, &demangling cache variable for type metadata for Participant?);
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v58 = type metadata accessor for Logger();
        __swift_project_value_buffer(v58, (uint64_t)static Log.default);
        swift_retain();
        uint64_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v61 = swift_slowAlloc();
          uint64_t v62 = swift_slowAlloc();
          v89[0] = v62;
          *(_DWORD *)uint64_t v61 = 134218242;
          uint64_t v88 = a4;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v61 + 12) = 2080;
          uint64_t v63 = GroupSession.description.getter();
          uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, v89);
          uint64_t v57 = v87;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1A375F000, v59, v60, "Failed to find participant on GroupSession with serverIdentifier: %llu, groupSession: %s", (uint8_t *)v61, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1A624F870](v62, -1, -1);
          MEMORY[0x1A624F870](v61, -1, -1);
        }
        else
        {

          swift_release();
        }
        uint64_t v65 = v76;
        UUID.init(_:)();
        *(void *)(v65 + *(int *)(v10 + 24)) = a4;
        uint64_t v66 = (void *)(v65 + *(int *)(v10 + 20));
        *uint64_t v66 = 0;
        v66[1] = 0xE000000000000000;
      }
      else
      {
        uint64_t v65 = v76;
        outlined init with take of Participant(v55, v76, (uint64_t (*)(void))type metadata accessor for Participant);
      }
      swift_beginAccess();
      swift_retain();
      id v67 = objc_msgSend(v79, sel_URL);
      unint64_t v68 = v78;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v69 = (uint64_t)v83;
      uint64_t v70 = &v83[*(int *)(v82 + 48)];
      uint64_t v71 = (uint64_t)&v83[*(int *)(v82 + 64)];
      uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
      uint64_t v73 = v84;
      uint64_t v74 = v57;
      uint64_t v75 = v86;
      v72(v83, v84, v86);
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v70, v68, v81);
      outlined init with copy of Participant(v65, v71, (uint64_t (*)(void))type metadata accessor for Participant);
      PassthroughSubject.send(_:)();
      swift_release();
      swift_release();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v69, &demangling cache variable for type metadata for (UUID, URL, Participant));
      outlined destroy of Participant(v65, (uint64_t (*)(void))type metadata accessor for Participant);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
      return;
    }
    outlined destroy of Participant((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
    if (v47) {
      goto LABEL_15;
    }
LABEL_16:
    int64_t v52 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v52 >= v48)
    {
LABEL_40:
      swift_release();
      uint64_t v55 = v77;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v77, 1, 1, v10);
      goto LABEL_41;
    }
    unint64_t v53 = *(void *)(v44 + 8 * v52);
    ++v49;
    if (!v53)
    {
      int64_t v49 = v52 + 1;
      if (v52 + 1 >= v48) {
        goto LABEL_40;
      }
      unint64_t v53 = *(void *)(v44 + 8 * v49);
      if (!v53)
      {
        int64_t v49 = v52 + 2;
        if (v52 + 2 >= v48) {
          goto LABEL_40;
        }
        unint64_t v53 = *(void *)(v44 + 8 * v49);
        if (!v53)
        {
          int64_t v49 = v52 + 3;
          if (v52 + 3 >= v48) {
            goto LABEL_40;
          }
          unint64_t v53 = *(void *)(v44 + 8 * v49);
          if (!v53)
          {
            int64_t v49 = v52 + 4;
            if (v52 + 4 >= v48) {
              goto LABEL_40;
            }
            unint64_t v53 = *(void *)(v44 + 8 * v49);
            if (!v53) {
              break;
            }
          }
        }
      }
    }
LABEL_33:
    unint64_t v47 = (v53 - 1) & v53;
  }
  int64_t v54 = v52 + 5;
  if (v54 >= v48) {
    goto LABEL_40;
  }
  unint64_t v53 = *(void *)(v44 + 8 * v54);
  if (v53)
  {
    int64_t v49 = v54;
    goto LABEL_33;
  }
  while (1)
  {
    int64_t v49 = v54 + 1;
    if (__OFADD__(v54, 1)) {
      break;
    }
    if (v49 >= v48) {
      goto LABEL_40;
    }
    unint64_t v53 = *(void *)(v44 + 8 * v49);
    ++v54;
    if (v53) {
      goto LABEL_33;
    }
  }
  __break(1u);
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v28 = type metadata accessor for Participant();
  uint64_t v6 = *(void *)(v28 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v28);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v30 = a2 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v31 = (unint64_t)(v13 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    outlined init with copy of Participant(*(void *)(a2 + 48) + *(void *)(v6 + 72) * i, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Participant);
    char v23 = a1(v9);
    if (v3)
    {
      outlined destroy of Participant((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Participant);
      return swift_release();
    }
    if (v23)
    {
      swift_release();
      uint64_t v24 = v29;
      outlined init with take of Participant((uint64_t)v9, v29, (uint64_t (*)(void))type metadata accessor for Participant);
      uint64_t v25 = 0;
      uint64_t v26 = v28;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v24, v25, 1, v26);
    }
    uint64_t result = outlined destroy of Participant((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Participant);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1)) {
      break;
    }
    if (v17 >= v31) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v30 + 8 * v17);
    if (!v21)
    {
      int64_t v22 = v17 + 1;
      if (v17 + 1 >= v31) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v30 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 2;
      if (v17 + 2 >= v31) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v30 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 3;
      if (v17 + 3 >= v31) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v30 + 8 * v22);
      if (v21)
      {
LABEL_16:
        int64_t v17 = v22;
        goto LABEL_17;
      }
      int64_t v22 = v17 + 4;
      if (v17 + 4 < v31)
      {
        unint64_t v21 = *(void *)(v30 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v17 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_31;
            }
            if (v17 >= v31) {
              goto LABEL_28;
            }
            unint64_t v21 = *(void *)(v30 + 8 * v17);
            ++v22;
            if (v21) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      uint64_t v26 = v28;
      uint64_t v24 = v29;
      swift_release();
      uint64_t v25 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v24, v25, 1, v26);
    }
LABEL_17:
    unint64_t v15 = (v21 - 1) & v21;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.default);
  id v11 = a1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    char v23 = (void *)swift_slowAlloc();
    uint64_t v24 = v14;
    *(_DWORD *)uint64_t v14 = 138412290;
    id v27 = v11;
    id v15 = v11;
    uint64_t v25 = v9;
    id v16 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    int64_t v17 = v23;
    *char v23 = v11;

    unint64_t v18 = v24;
    uint64_t v9 = v25;
    _os_log_impl(&dword_1A375F000, v12, v13, "GroupSession updating activity to %@", v24, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v17, -1, -1);
    MEMORY[0x1A624F870](v18, -1, -1);
  }
  else
  {
  }
  MEMORY[0x1F4188790](v19);
  tryLog<A>(_:_:function:line:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v5, &demangling cache variable for type metadata for AnyGroupActivity?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v26, 1, 1, v6);
  }
  else
  {
    uint64_t v21 = outlined init with take of Participant((uint64_t)v5, (uint64_t)v9, type metadata accessor for AnyGroupActivity);
    MEMORY[0x1F4188790](v21);
    tryLog<A>(_:_:function:line:)();
    return outlined destroy of Participant((uint64_t)v9, type metadata accessor for AnyGroupActivity);
  }
}

uint64_t closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v35 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  os_log_type_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  id v16 = v14;
  int64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v34 = a4;
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v33 = a2;
    uint64_t v30 = (void *)v20;
    uint64_t v31 = v11;
    *(_DWORD *)uint64_t v19 = 138412290;
    id v36 = v16;
    id v21 = v16;
    uint64_t v32 = v10;
    id v22 = v21;
    a4 = v34;
    uint64_t v11 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char v23 = v30;
    *uint64_t v30 = v16;

    uint64_t v10 = v32;
    _os_log_impl(&dword_1A375F000, v17, v18, "GroupSession updating activity to %@", v19, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v24 = v23;
    a2 = v33;
    MEMORY[0x1A624F870](v24, -1, -1);
    MEMORY[0x1A624F870](v19, -1, -1);
  }
  else
  {
  }
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = v11;
  tryLog<A>(_:_:function:line:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnyGroupActivity?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a4, 1, 1, a2);
  }
  else
  {
    uint64_t v27 = outlined init with take of Participant((uint64_t)v10, (uint64_t)v13, type metadata accessor for AnyGroupActivity);
    MEMORY[0x1F4188790](v27);
    *(&v29 - 4) = a2;
    *(&v29 - 3) = a3;
    uint64_t v28 = a2;
    tryLog<A>(_:_:function:line:)();
    return outlined destroy of Participant((uint64_t)v13, type metadata accessor for AnyGroupActivity);
  }
}

uint64_t specialized implicit closure #3 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AnyGroupActivity(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Participant(a1, (uint64_t)v6, type metadata accessor for AnyGroupActivity);
  return specialized GroupActivity.init(activity:)((uint64_t)v6, a2);
}

uint64_t implicit closure #3 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AnyGroupActivity(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Participant(a1, (uint64_t)v10, type metadata accessor for AnyGroupActivity);
  return GroupActivity.init(activity:)(v10, a2, a3, a4);
}

uint64_t specialized GroupActivity.init(activity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  os_log_type_t v13 = (char *)&v29 - v12;
  uint64_t v14 = swift_conformsToProtocol2();
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v14) {
    uint64_t v16 = v7;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v16)
  {
    uint64_t v29 = a2;
    outlined init with copy of Participant(a1, (uint64_t)v13, type metadata accessor for AnyGroupActivity);
    int64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 8);
    uint64_t v32 = v16;
    uint64_t v33 = v15;
    __swift_allocate_boxed_opaque_existential_1(&v30);
    uint64_t v18 = v34;
    v17(v13, v16, v15);
    if (v18)
    {
      outlined destroy of Participant(a1, type metadata accessor for AnyGroupActivity);
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v30);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomGroupActivityDecodable);
    char v26 = swift_dynamicCast();
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    if ((v26 & 1) == 0)
    {
      v27(v6, 1, 1, v7);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for AnyGroupActivity?);
      uint64_t v30 = 0;
      unint64_t v31 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      uint64_t v30 = 0xD00000000000001DLL;
      unint64_t v31 = 0x80000001A3900500;
      swift_getMetatypeMetadata();
      v28._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v27(v6, 0, 1, v7);
    outlined destroy of Participant(a1, type metadata accessor for AnyGroupActivity);
    uint64_t v24 = (uint64_t)v6;
    uint64_t v25 = v29;
  }
  else
  {
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    uint64_t v20 = (uint64_t *)(a1 + *(int *)(v7 + 24));
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    outlined copy of Data._Representation(*v20, v22);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
    uint64_t v23 = v34;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    outlined destroy of Participant(a1, type metadata accessor for AnyGroupActivity);
    outlined consume of Data._Representation(v21, v22);
    uint64_t result = swift_release();
    if (v23) {
      return result;
    }
    uint64_t v24 = (uint64_t)v11;
    uint64_t v25 = a2;
  }
  return outlined init with take of Participant(v24, v25, type metadata accessor for AnyGroupActivity);
}

uint64_t specialized closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v110 = a6;
  int v105 = a4;
  uint64_t v116 = a3;
  uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, Participant, SendReliability));
  MEMORY[0x1F4188790](v103);
  uint64_t v104 = (uint64_t *)((char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v101 = (uint64_t)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for Participant();
  uint64_t v109 = *(void *)(v112 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v112);
  uint64_t v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  int64_t v17 = (char *)&v92 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v102 = (uint64_t)&v92 - v18;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  unint64_t v22 = (char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for OSSignpostID();
  uint64_t v111 = *(void *)(v114 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v114);
  v106 = (char *)&v92 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  char v26 = (char *)&v92 - v25;
  uint64_t v27 = type metadata accessor for OSSignposter();
  uint64_t v107 = *(void *)(v27 - 8);
  uint64_t v108 = v27;
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v92 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Signposts.messenger.getter();
  static Signposts.messengerSignpostIdentifier(forPayload:)();
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  lazy protocol witness table accessor for type Int and conformance Int();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v30);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a5, v19);
  unint64_t v31 = OSSignposter.logHandle.getter();
  int v100 = static os_signpost_type_t.event.getter();
  char v32 = OS_os_log.signpostsEnabled.getter();
  uint64_t v115 = a1;
  unint64_t v113 = a2;
  if (v32)
  {
    os_log_t v95 = v31;
    id v96 = v22;
    uint64_t v97 = v20;
    uint64_t v98 = v19;
    id v99 = v29;
    unint64_t v33 = a2 >> 62;
    uint64_t v34 = v111;
    (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v106, v26, v114);
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v119 = v36;
    *(_DWORD *)uint64_t v35 = 134218498;
    uint64_t v37 = 0;
    uint64_t v38 = v112;
    switch(v33)
    {
      case 1uLL:
        LODWORD(v37) = HIDWORD(v115) - v115;
        if (__OFSUB__(HIDWORD(v115), v115))
        {
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        uint64_t v37 = (int)v37;
LABEL_8:
        v118[0] = v37;
        uint64_t v94 = v26;
        uint64_t v93 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v42 = v115;
        unint64_t v43 = v113;
        outlined consume of Data._Representation(v115, v113);
        outlined consume of Data._Representation(v42, v43);
        *(_WORD *)(v35 + 12) = 2080;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v44 = v96;
        uint64_t v45 = v98;
        uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
        v118[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v97 + 8))(v44, v45);
        *(_WORD *)(v35 + 22) = 2048;
        v118[0] = v116;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        int64_t v48 = v106;
        os_signpost_id_t v49 = OSSignpostID.rawValue.getter();
        os_log_t v50 = v95;
        _os_signpost_emit_with_name_impl(&dword_1A375F000, v95, (os_signpost_type_t)v100, v49, "group-session-messenger-receive", "payload-size=%{xcode:size-in-bytes}ld topic=%s participantID=%llu", (uint8_t *)v35, 0x20u);
        uint64_t v51 = v93;
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v51, -1, -1);
        MEMORY[0x1A624F870](v35, -1, -1);

        int64_t v52 = *(void (**)(char *, uint64_t))(v34 + 8);
        uint64_t v53 = v114;
        v52(v94, v114);
        (*(void (**)(char *, uint64_t))(v107 + 8))(v99, v108);
        v52(v48, v53);
        break;
      case 2uLL:
        uint64_t v40 = *(void *)(v115 + 16);
        uint64_t v39 = *(void *)(v115 + 24);
        BOOL v41 = __OFSUB__(v39, v40);
        uint64_t v37 = v39 - v40;
        if (!v41) {
          goto LABEL_8;
        }
        goto LABEL_54;
      case 3uLL:
        goto LABEL_8;
      default:
        uint64_t v37 = BYTE6(v113);
        goto LABEL_8;
    }
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    outlined consume of Data._Representation(a1, a2);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v26, v114);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v29, v108);
    uint64_t v38 = v112;
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v55 = v109;
  if (!result) {
    return result;
  }
  LODWORD(v114) = v105 & 1;
  if ((v105 & 1) == 0)
  {
    int v56 = (void (**)(uint64_t, unint64_t, uint64_t))(result
                                                                   + direct field offset for GroupSession.receivedDataHandler);
    uint64_t result = swift_beginAccess();
    uint64_t v57 = *v56;
    if (*v56)
    {
      swift_retain();
      v57(v115, v113, v116);
      uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v57);
    }
  }
  MEMORY[0x1F4188790](result);
  uint64_t v58 = type metadata accessor for AnyGroupActivity(0);
  *(&v92 - 2) = v58;
  uint64_t v59 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
  *(&v92 - 1) = v59;
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x1F4188790](KeyPath);
  *(&v92 - 2) = v58;
  *(&v92 - 1) = v59;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v61 = v118[0];
  uint64_t v62 = v118[0] + 56;
  uint64_t v63 = 1 << *(unsigned char *)(v118[0] + 32);
  uint64_t v64 = -1;
  if (v63 < 64) {
    uint64_t v64 = ~(-1 << v63);
  }
  unint64_t v65 = v64 & *(void *)(v118[0] + 56);
  int64_t v66 = (unint64_t)(v63 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v67 = 0;
  if (!v65) {
    goto LABEL_17;
  }
LABEL_16:
  unint64_t v68 = __clz(__rbit64(v65));
  v65 &= v65 - 1;
  for (unint64_t i = v68 | (v67 << 6); ; unint64_t i = __clz(__rbit64(v71)) + (v67 << 6))
  {
    outlined init with copy of Participant(*(void *)(v61 + 48) + *(void *)(v55 + 72) * i, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
    if (*(void *)&v14[*(int *)(v38 + 24)] == v116)
    {
      swift_release();
      uint64_t v73 = v101;
      outlined init with take of Participant((uint64_t)v14, v101, (uint64_t (*)(void))type metadata accessor for Participant);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v73, 0, 1, v38);
      goto LABEL_42;
    }
    outlined destroy of Participant((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
    if (v65) {
      goto LABEL_16;
    }
LABEL_17:
    int64_t v70 = v67 + 1;
    if (__OFADD__(v67, 1))
    {
      __break(1u);
LABEL_52:
      swift_once();
LABEL_44:
      uint64_t v74 = type metadata accessor for Logger();
      __swift_project_value_buffer(v74, (uint64_t)static Log.default);
      swift_retain();
      uint64_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v77 = swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        *(_DWORD *)uint64_t v77 = 134218242;
        uint64_t v79 = v116;
        uint64_t v117 = v116;
        v118[0] = v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v77 + 12) = 2080;
        uint64_t v80 = specialized GroupSession.description.getter();
        uint64_t v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        uint64_t v82 = v79;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A375F000, v75, v76, "Failed to find participant on GroupSession with serverIdentifier: %llu, groupSession: %s", (uint8_t *)v77, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v78, -1, -1);
        MEMORY[0x1A624F870](v77, -1, -1);

        uint64_t v83 = v115;
      }
      else
      {

        swift_release();
        uint64_t v83 = v115;
        uint64_t v82 = v116;
      }
      uint64_t v85 = v103;
      uint64_t v84 = v102;
      char v86 = v114;
      UUID.init(_:)();
      *(void *)(v84 + *(int *)(v38 + 24)) = v82;
      uint64_t v87 = (void *)(v84 + *(int *)(v38 + 20));
      *uint64_t v87 = 0;
      v87[1] = 0xE000000000000000;
      goto LABEL_49;
    }
    if (v70 >= v66) {
      goto LABEL_41;
    }
    unint64_t v71 = *(void *)(v62 + 8 * v70);
    ++v67;
    if (!v71)
    {
      int64_t v67 = v70 + 1;
      if (v70 + 1 >= v66) {
        goto LABEL_41;
      }
      unint64_t v71 = *(void *)(v62 + 8 * v67);
      if (!v71)
      {
        int64_t v67 = v70 + 2;
        if (v70 + 2 >= v66) {
          goto LABEL_41;
        }
        unint64_t v71 = *(void *)(v62 + 8 * v67);
        if (!v71)
        {
          int64_t v67 = v70 + 3;
          if (v70 + 3 >= v66) {
            goto LABEL_41;
          }
          unint64_t v71 = *(void *)(v62 + 8 * v67);
          if (!v71)
          {
            int64_t v67 = v70 + 4;
            if (v70 + 4 >= v66) {
              goto LABEL_41;
            }
            unint64_t v71 = *(void *)(v62 + 8 * v67);
            if (!v71)
            {
              int64_t v67 = v70 + 5;
              if (v70 + 5 >= v66) {
                goto LABEL_41;
              }
              unint64_t v71 = *(void *)(v62 + 8 * v67);
              if (!v71) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_36:
    unint64_t v65 = (v71 - 1) & v71;
  }
  int64_t v72 = v70 + 6;
  if (v72 < v66)
  {
    unint64_t v71 = *(void *)(v62 + 8 * v72);
    if (!v71)
    {
      while (1)
      {
        int64_t v67 = v72 + 1;
        if (__OFADD__(v72, 1)) {
          break;
        }
        if (v67 >= v66) {
          goto LABEL_41;
        }
        unint64_t v71 = *(void *)(v62 + 8 * v67);
        ++v72;
        if (v71) {
          goto LABEL_36;
        }
      }
LABEL_55:
      __break(1u);
      JUMPOUT(0x1A377ECD4);
    }
    int64_t v67 = v72;
    goto LABEL_36;
  }
LABEL_41:
  swift_release();
  uint64_t v73 = v101;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v101, 1, 1, v38);
LABEL_42:
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v73, 1, v38) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v73, &demangling cache variable for type metadata for Participant?);
    if (one-time initialization token for default != -1) {
      goto LABEL_52;
    }
    goto LABEL_44;
  }
  uint64_t v84 = v102;
  outlined init with take of Participant(v73, v102, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v83 = v115;
  uint64_t v85 = v103;
  char v86 = v114;
LABEL_49:
  swift_beginAccess();
  uint64_t v88 = (uint64_t)v104;
  uint64_t v89 = (uint64_t)v104 + *(int *)(v85 + 48);
  uint64_t v90 = *(int *)(v85 + 64);
  unint64_t v91 = v113;
  *uint64_t v104 = v83;
  *(void *)(v88 + 8) = v91;
  outlined init with copy of Participant(v84, v89, (uint64_t (*)(void))type metadata accessor for Participant);
  *(unsigned char *)(v88 + v90) = v86;
  outlined copy of Data._Representation(v83, v91);
  swift_retain();
  PassthroughSubject.send(_:)();
  swift_release();
  swift_release();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v88, &demangling cache variable for type metadata for (Data, Participant, SendReliability));
  return outlined destroy of Participant(v84, (uint64_t (*)(void))type metadata accessor for Participant);
}

uint64_t closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v106 = a6;
  uint64_t v113 = a5;
  uint64_t v114 = a3;
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, Participant, SendReliability));
  MEMORY[0x1F4188790](v100);
  uint64_t v101 = (uint64_t *)((char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v102 = (uint64_t)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for Participant();
  uint64_t v105 = *(void *)(v108 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v108);
  uint64_t v14 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  int64_t v17 = (char *)&v90 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v99 = (uint64_t)&v90 - v18;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  unint64_t v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for OSSignpostID();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v111 = v23;
  uint64_t v112 = v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v104 = (char *)&v90 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v90 - v27;
  uint64_t v103 = type metadata accessor for OSSignposter();
  uint64_t v107 = *(void *)(v103 - 8);
  MEMORY[0x1F4188790](v103);
  uint64_t v30 = (char *)&v90 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v109 = *a4;
  static Signposts.messenger.getter();
  static Signposts.messengerSignpostIdentifier(forPayload:)();
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  lazy protocol witness table accessor for type Int and conformance Int();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v31);
  uint64_t v32 = v20;
  unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v34 = v19;
  v33(v22, v113, v19);
  uint64_t v35 = OSSignposter.logHandle.getter();
  int v98 = static os_signpost_type_t.event.getter();
  char v36 = OS_os_log.signpostsEnabled.getter();
  uint64_t v113 = a1;
  unint64_t v110 = a2;
  if (v36)
  {
    os_log_t v92 = v35;
    uint64_t v97 = v22;
    uint64_t v94 = v32;
    uint64_t v93 = v34;
    os_log_t v95 = v30;
    uint64_t v37 = v107;
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v112 + 16);
    id v96 = v28;
    v38(v104, v28, v111);
    uint64_t v39 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    uint64_t v117 = v40;
    *(_DWORD *)uint64_t v39 = 134218498;
    uint64_t v41 = 0;
    uint64_t v42 = v108;
    unint64_t v43 = v97;
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v41) = HIDWORD(v113) - v113;
        if (__OFSUB__(HIDWORD(v113), v113)) {
          goto LABEL_52;
        }
        uint64_t v41 = (int)v41;
LABEL_8:
        uint64_t v116 = v41;
        uint64_t v91 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v47 = v113;
        unint64_t v48 = v110;
        outlined consume of Data._Representation(v113, v110);
        outlined consume of Data._Representation(v47, v48);
        *(_WORD *)(v39 + 12) = 2080;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v49 = v93;
        uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v94 + 8))(v43, v49);
        *(_WORD *)(v39 + 22) = 2048;
        uint64_t v116 = v114;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        int64_t v52 = v104;
        os_signpost_id_t v53 = OSSignpostID.rawValue.getter();
        os_log_t v54 = v92;
        _os_signpost_emit_with_name_impl(&dword_1A375F000, v92, (os_signpost_type_t)v98, v53, "group-session-messenger-receive", "payload-size=%{xcode:size-in-bytes}ld topic=%s participantID=%llu", (uint8_t *)v39, 0x20u);
        uint64_t v55 = v91;
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v55, -1, -1);
        MEMORY[0x1A624F870](v39, -1, -1);

        uint64_t v56 = v111;
        uint64_t v57 = *(void (**)(char *, uint64_t))(v112 + 8);
        v57(v96, v111);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v95, v103);
        v57(v52, v56);
        break;
      case 2uLL:
        uint64_t v45 = *(void *)(v113 + 16);
        uint64_t v44 = *(void *)(v113 + 24);
        BOOL v46 = __OFSUB__(v44, v45);
        uint64_t v41 = v44 - v45;
        if (!v46) {
          goto LABEL_8;
        }
        goto LABEL_53;
      case 3uLL:
        goto LABEL_8;
      default:
        uint64_t v41 = BYTE6(v110);
        goto LABEL_8;
    }
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v34);
    outlined consume of Data._Representation(a1, a2);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v28, v111);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v30, v103);
    uint64_t v42 = v108;
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v59 = v105;
  if (!result) {
    return result;
  }
  if ((v109 & 1) == 0)
  {
    os_log_type_t v60 = (void (**)(uint64_t, unint64_t, uint64_t))(result
                                                                   + direct field offset for GroupSession.receivedDataHandler);
    swift_beginAccess();
    uint64_t v61 = *v60;
    if (*v60)
    {
      swift_retain();
      v61(v113, v110, v114);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v61);
    }
  }
  uint64_t active = GroupSession.internalActiveParticipants.getter();
  uint64_t v63 = active;
  uint64_t v64 = active + 56;
  uint64_t v65 = 1 << *(unsigned char *)(active + 32);
  uint64_t v66 = -1;
  if (v65 < 64) {
    uint64_t v66 = ~(-1 << v65);
  }
  unint64_t v67 = v66 & *(void *)(active + 56);
  int64_t v68 = (unint64_t)(v65 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v69 = 0;
  if (!v67) {
    goto LABEL_17;
  }
LABEL_16:
  unint64_t v70 = __clz(__rbit64(v67));
  v67 &= v67 - 1;
  for (unint64_t i = v70 | (v69 << 6); ; unint64_t i = __clz(__rbit64(v73)) + (v69 << 6))
  {
    outlined init with copy of Participant(*(void *)(v63 + 48) + *(void *)(v59 + 72) * i, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
    if (*(void *)&v14[*(int *)(v42 + 24)] == v114)
    {
      swift_release();
      uint64_t v75 = v102;
      outlined init with take of Participant((uint64_t)v14, v102, (uint64_t (*)(void))type metadata accessor for Participant);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(v75, 0, 1, v42);
      goto LABEL_40;
    }
    outlined destroy of Participant((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
    if (v67) {
      goto LABEL_16;
    }
LABEL_17:
    int64_t v72 = v69 + 1;
    if (__OFADD__(v69, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v72 >= v68) {
      goto LABEL_39;
    }
    unint64_t v73 = *(void *)(v64 + 8 * v72);
    ++v69;
    if (!v73)
    {
      int64_t v69 = v72 + 1;
      if (v72 + 1 >= v68) {
        goto LABEL_39;
      }
      unint64_t v73 = *(void *)(v64 + 8 * v69);
      if (!v73)
      {
        int64_t v69 = v72 + 2;
        if (v72 + 2 >= v68) {
          goto LABEL_39;
        }
        unint64_t v73 = *(void *)(v64 + 8 * v69);
        if (!v73)
        {
          int64_t v69 = v72 + 3;
          if (v72 + 3 >= v68) {
            goto LABEL_39;
          }
          unint64_t v73 = *(void *)(v64 + 8 * v69);
          if (!v73)
          {
            int64_t v69 = v72 + 4;
            if (v72 + 4 >= v68) {
              goto LABEL_39;
            }
            unint64_t v73 = *(void *)(v64 + 8 * v69);
            if (!v73) {
              break;
            }
          }
        }
      }
    }
LABEL_34:
    unint64_t v67 = (v73 - 1) & v73;
  }
  int64_t v74 = v72 + 5;
  if (v74 >= v68) {
    goto LABEL_39;
  }
  unint64_t v73 = *(void *)(v64 + 8 * v74);
  if (v73)
  {
    int64_t v69 = v74;
    goto LABEL_34;
  }
  while (1)
  {
    int64_t v69 = v74 + 1;
    if (__OFADD__(v74, 1))
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      JUMPOUT(0x1A377F9B8);
    }
    if (v69 >= v68) {
      break;
    }
    unint64_t v73 = *(void *)(v64 + 8 * v69);
    ++v74;
    if (v73) {
      goto LABEL_34;
    }
  }
LABEL_39:
  swift_release();
  uint64_t v75 = v102;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v102, 1, 1, v42);
LABEL_40:
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v75, 1, v42) != 1)
  {
    uint64_t v59 = v99;
    outlined init with take of Participant(v75, v99, (uint64_t (*)(void))type metadata accessor for Participant);
    goto LABEL_47;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v75, &demangling cache variable for type metadata for Participant?);
  uint64_t v59 = v99;
  if (one-time initialization token for default != -1) {
LABEL_50:
  }
    swift_once();
  uint64_t v76 = type metadata accessor for Logger();
  __swift_project_value_buffer(v76, (uint64_t)static Log.default);
  swift_retain();
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v77, v78))
  {
    uint64_t v79 = swift_slowAlloc();
    uint64_t v112 = swift_slowAlloc();
    uint64_t v117 = v112;
    *(_DWORD *)uint64_t v79 = 134218242;
    uint64_t v80 = v114;
    uint64_t v115 = v114;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v79 + 12) = 2080;
    uint64_t v81 = GroupSession.description.getter();
    uint64_t v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v77, v78, "Failed to find participant on GroupSession with serverIdentifier: %llu, groupSession: %s", (uint8_t *)v79, 0x16u);
    uint64_t v83 = v112;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v83, -1, -1);
    MEMORY[0x1A624F870](v79, -1, -1);
  }
  else
  {

    swift_release();
    uint64_t v80 = v114;
  }
  UUID.init(_:)();
  *(void *)(v59 + *(int *)(v42 + 24)) = v80;
  uint64_t v84 = (void *)(v59 + *(int *)(v42 + 20));
  *uint64_t v84 = 0;
  v84[1] = 0xE000000000000000;
LABEL_47:
  swift_beginAccess();
  uint64_t v85 = (uint64_t)v101;
  uint64_t v86 = (uint64_t)v101 + *(int *)(v100 + 48);
  uint64_t v87 = *(int *)(v100 + 64);
  uint64_t v88 = v113;
  unint64_t v89 = v110;
  *uint64_t v101 = v113;
  *(void *)(v85 + 8) = v89;
  outlined init with copy of Participant(v59, v86, (uint64_t (*)(void))type metadata accessor for Participant);
  *(unsigned char *)(v85 + v87) = v109;
  outlined copy of Data._Representation(v88, v89);
  swift_retain();
  PassthroughSubject.send(_:)();
  swift_release();
  swift_release();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v85, &demangling cache variable for type metadata for (Data, Participant, SendReliability));
  return outlined destroy of Participant(v59, (uint64_t (*)(void))type metadata accessor for Participant);
}

uint64_t default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

uint64_t specialized closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t v0 = type metadata accessor for OSSignpostError();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = &v22[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v22[-v9];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = result;
    specialized GroupSession.updatePublicState()();
    uint64_t v13 = *(void *)(*(void *)v12 + 328);
    if (*(void *)(v12 + v13))
    {
      uint64_t v24 = v1;
      uint64_t v25 = v13;
      uint64_t v14 = one-time initialization token for groupSession;
      swift_retain();
      if (v14 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for OSSignposter();
      __swift_project_value_buffer(v15, (uint64_t)static Signposts.groupSession);
      uint64_t v16 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      int v23 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v17 = v24;
        if ((*(unsigned int (**)(unsigned char *, uint64_t))(v24 + 88))(v3, v0) == *MEMORY[0x1E4FBD340])
        {
          uint64_t v18 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v3, v0);
          uint64_t v18 = "";
        }
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v8, v10, v4);
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        os_signpost_id_t v20 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_1A375F000, v16, (os_signpost_type_t)v23, v20, "group-session-join", v18, v19, 2u);
        MEMORY[0x1A624F870](v19, -1, -1);

        uint64_t v21 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
        v21(v10, v4);
        swift_release();
        v21(v8, v4);
      }
      else
      {

        (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v10, v4);
        swift_release();
      }
      *(void *)(v12 + v25) = 0;
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t v0 = type metadata accessor for OSSignpostError();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = &v22[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v22[-v9];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = result;
    GroupSession.updatePublicState()();
    uint64_t v13 = *(void *)(*(void *)v12 + 328);
    if (*(void *)(v12 + v13))
    {
      uint64_t v24 = v1;
      uint64_t v25 = v13;
      uint64_t v14 = one-time initialization token for groupSession;
      swift_retain();
      if (v14 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for OSSignposter();
      __swift_project_value_buffer(v15, (uint64_t)static Signposts.groupSession);
      uint64_t v16 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      int v23 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v17 = v24;
        if ((*(unsigned int (**)(unsigned char *, uint64_t))(v24 + 88))(v3, v0) == *MEMORY[0x1E4FBD340])
        {
          uint64_t v18 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v3, v0);
          uint64_t v18 = "";
        }
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v8, v10, v4);
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        os_signpost_id_t v20 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_1A375F000, v16, (os_signpost_type_t)v23, v20, "group-session-join", v18, v19, 2u);
        MEMORY[0x1A624F870](v19, -1, -1);

        uint64_t v21 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
        v21(v10, v4);
        swift_release();
        v21(v8, v4);
      }
      else
      {

        (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v10, v4);
        swift_release();
      }
      *(void *)(v12 + v25) = 0;
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  uint64_t v49 = a1;
  uint64_t v1 = type metadata accessor for Participant();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  uint64_t v8 = (char *)&v44 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v44 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v16 = (unint64_t)&v44 - v15;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v48 = result;
  if (!result) {
    return result;
  }
  uint64_t v47 = v14;
  uint64_t v45 = v5;
  if (one-time initialization token for default == -1) {
    goto LABEL_3;
  }
LABEL_42:
  swift_once();
LABEL_3:
  unint64_t v46 = v16;
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.default);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 134217984;
    uint64_t v50 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A375F000, v19, v20, "Catchup needed. Leader participant id:%llu", v21, 0xCu);
    MEMORY[0x1A624F870](v21, -1, -1);
  }

  MEMORY[0x1F4188790](v22);
  uint64_t v23 = type metadata accessor for AnyGroupActivity(0);
  *(&v44 - 2) = v23;
  uint64_t v24 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
  *(&v44 - 1) = v24;
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x1F4188790](KeyPath);
  *(&v44 - 2) = v23;
  *(&v44 - 1) = v24;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v26 = v50;
  uint64_t v27 = v50 + 56;
  uint64_t v28 = 1 << *(unsigned char *)(v50 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v16 = v29 & *(void *)(v50 + 56);
  int64_t v30 = (unint64_t)(v28 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v31 = 0;
  if (v16)
  {
LABEL_8:
    unint64_t v32 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v33 = v32 | (v31 << 6);
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v34 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v34 >= v30) {
      goto LABEL_33;
    }
    unint64_t v35 = *(void *)(v27 + 8 * v34);
    ++v31;
    if (!v35)
    {
      int64_t v31 = v34 + 1;
      if (v34 + 1 >= v30) {
        goto LABEL_33;
      }
      unint64_t v35 = *(void *)(v27 + 8 * v31);
      if (!v35)
      {
        int64_t v31 = v34 + 2;
        if (v34 + 2 >= v30) {
          goto LABEL_33;
        }
        unint64_t v35 = *(void *)(v27 + 8 * v31);
        if (!v35)
        {
          int64_t v31 = v34 + 3;
          if (v34 + 3 >= v30) {
            goto LABEL_33;
          }
          unint64_t v35 = *(void *)(v27 + 8 * v31);
          if (!v35)
          {
            int64_t v31 = v34 + 4;
            if (v34 + 4 >= v30) {
              goto LABEL_33;
            }
            unint64_t v35 = *(void *)(v27 + 8 * v31);
            if (!v35)
            {
              int64_t v31 = v34 + 5;
              if (v34 + 5 >= v30) {
                goto LABEL_33;
              }
              unint64_t v35 = *(void *)(v27 + 8 * v31);
              if (!v35) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v16 = (v35 - 1) & v35;
    unint64_t v33 = __clz(__rbit64(v35)) + (v31 << 6);
LABEL_29:
    outlined init with copy of Participant(*(void *)(v26 + 48) + *(void *)(v2 + 72) * v33, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Participant);
    if (*(void *)&v8[*(int *)(v1 + 24)] == v49)
    {
      swift_release();
      uint64_t v37 = v46;
      outlined init with take of Participant((uint64_t)v8, v46, (uint64_t (*)(void))type metadata accessor for Participant);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v37, 0, 1, v1);
LABEL_34:
      swift_bridgeObjectRelease();
      uint64_t v38 = (uint64_t)v47;
      outlined init with copy of URL?(v37, (uint64_t)v47, &demangling cache variable for type metadata for Participant?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v38, 1, v1) == 1)
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v38, &demangling cache variable for type metadata for Participant?);
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 134217984;
          uint64_t v50 = v49;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1A375F000, v39, v40, "ParticipantID:%llu was not found.", v41, 0xCu);
          MEMORY[0x1A624F870](v41, -1, -1);
        }

        swift_release();
      }
      else
      {
        uint64_t v42 = v38;
        uint64_t v43 = (uint64_t)v45;
        outlined init with take of Participant(v42, (uint64_t)v45, (uint64_t (*)(void))type metadata accessor for Participant);
        swift_beginAccess();
        swift_retain();
        PassthroughSubject.send(_:)();
        swift_release();
        swift_release();
        outlined destroy of Participant(v43, (uint64_t (*)(void))type metadata accessor for Participant);
      }
      return outlined destroy of OS_dispatch_queue.SchedulerOptions?(v37, &demangling cache variable for type metadata for Participant?);
    }
    uint64_t result = outlined destroy of Participant((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Participant);
    if (v16) {
      goto LABEL_8;
    }
  }
  int64_t v36 = v34 + 6;
  if (v36 >= v30)
  {
LABEL_33:
    swift_release();
    uint64_t v37 = v46;
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v46, 1, 1, v1);
    goto LABEL_34;
  }
  unint64_t v35 = *(void *)(v27 + 8 * v36);
  if (v35)
  {
    int64_t v31 = v36;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v31 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v31 >= v30) {
      goto LABEL_33;
    }
    unint64_t v35 = *(void *)(v27 + 8 * v31);
    ++v36;
    if (v35) {
      goto LABEL_28;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Participant();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v9 = (char *)v43 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v43 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v43 - v16;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  unint64_t v19 = result;
  uint64_t v45 = v15;
  unint64_t v46 = v6;
  uint64_t v44 = v17;
  if (one-time initialization token for default == -1) {
    goto LABEL_3;
  }
LABEL_40:
  swift_once();
LABEL_3:
  uint64_t v20 = type metadata accessor for Logger();
  v43[1] = __swift_project_value_buffer(v20, (uint64_t)static Log.default);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 134217984;
    uint64_t v47 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A375F000, v21, v22, "Catchup needed. Leader participant id:%llu", v23, 0xCu);
    MEMORY[0x1A624F870](v23, -1, -1);
  }

  v43[2] = v19;
  uint64_t active = GroupSession.internalActiveParticipants.getter();
  uint64_t v25 = active;
  uint64_t v26 = active + 56;
  uint64_t v27 = 1 << *(unsigned char *)(active + 32);
  uint64_t v28 = -1;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  unint64_t v19 = v28 & *(void *)(active + 56);
  int64_t v29 = (unint64_t)(v27 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v30 = 0;
  if (v19)
  {
LABEL_8:
    unint64_t v31 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    unint64_t v32 = v31 | (v30 << 6);
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v33 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v33 >= v29) {
      goto LABEL_31;
    }
    unint64_t v34 = *(void *)(v26 + 8 * v33);
    ++v30;
    if (!v34)
    {
      int64_t v30 = v33 + 1;
      if (v33 + 1 >= v29) {
        goto LABEL_31;
      }
      unint64_t v34 = *(void *)(v26 + 8 * v30);
      if (!v34)
      {
        int64_t v30 = v33 + 2;
        if (v33 + 2 >= v29) {
          goto LABEL_31;
        }
        unint64_t v34 = *(void *)(v26 + 8 * v30);
        if (!v34)
        {
          int64_t v30 = v33 + 3;
          if (v33 + 3 >= v29) {
            goto LABEL_31;
          }
          unint64_t v34 = *(void *)(v26 + 8 * v30);
          if (!v34)
          {
            int64_t v30 = v33 + 4;
            if (v33 + 4 >= v29) {
              goto LABEL_31;
            }
            unint64_t v34 = *(void *)(v26 + 8 * v30);
            if (!v34) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v19 = (v34 - 1) & v34;
    unint64_t v32 = __clz(__rbit64(v34)) + (v30 << 6);
LABEL_27:
    outlined init with copy of Participant(*(void *)(v25 + 48) + *(void *)(v3 + 72) * v32, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Participant);
    if (*(void *)&v9[*(int *)(v2 + 24)] == a1)
    {
      swift_release();
      uint64_t v36 = (uint64_t)v44;
      outlined init with take of Participant((uint64_t)v9, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for Participant);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v36, 0, 1, v2);
LABEL_32:
      swift_bridgeObjectRelease();
      uint64_t v37 = (uint64_t)v45;
      outlined init with copy of URL?(v36, (uint64_t)v45, &demangling cache variable for type metadata for Participant?);
      int v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v37, 1, v2);
      uint64_t v39 = (uint64_t)v46;
      if (v38 == 1)
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v37, &demangling cache variable for type metadata for Participant?);
        os_log_type_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v42 = 134217984;
          uint64_t v47 = a1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1A375F000, v40, v41, "ParticipantID:%llu was not found.", v42, 0xCu);
          MEMORY[0x1A624F870](v42, -1, -1);
        }

        swift_release();
      }
      else
      {
        outlined init with take of Participant(v37, (uint64_t)v46, (uint64_t (*)(void))type metadata accessor for Participant);
        swift_beginAccess();
        swift_retain();
        PassthroughSubject.send(_:)();
        swift_release();
        swift_release();
        outlined destroy of Participant(v39, (uint64_t (*)(void))type metadata accessor for Participant);
      }
      return outlined destroy of OS_dispatch_queue.SchedulerOptions?(v36, &demangling cache variable for type metadata for Participant?);
    }
    uint64_t result = outlined destroy of Participant((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Participant);
    if (v19) {
      goto LABEL_8;
    }
  }
  int64_t v35 = v33 + 5;
  if (v35 >= v29)
  {
LABEL_31:
    swift_release();
    uint64_t v36 = (uint64_t)v44;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v44, 1, 1, v2);
    goto LABEL_32;
  }
  unint64_t v34 = *(void *)(v26 + 8 * v35);
  if (v34)
  {
    int64_t v30 = v35;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v30 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v30 >= v29) {
      goto LABEL_31;
    }
    unint64_t v34 = *(void *)(v26 + 8 * v30);
    ++v35;
    if (v34) {
      goto LABEL_26;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      aBlock[0] = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      if (a1)
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt64]);
        uint64_t v9 = String.init<A>(reflecting:)();
        unint64_t v11 = v10;
      }
      else
      {
        unint64_t v11 = 0xE300000000000000;
        uint64_t v9 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v5, v6, "Requesting encryption-keys for participantIDs=%s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v8, -1, -1);
      MEMORY[0x1A624F870](v7, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v12 = *(NSObject **)(v3 + *(void *)(*(void *)v3 + 288));
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v3;
    *(void *)(v13 + 24) = a1;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = closure #1 in GroupSession.requestEncryptionKey(for:)specialized partial apply;
    *(void *)(v14 + 24) = v13;
    aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_405;
    uint64_t v15 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v12, v15);
    _Block_release(v15);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
  return result;
}

Swift::Void __swiftcall GroupSession.requestEncryptionKey(for:)(Swift::OpaquePointer_optional a1)
{
  rawValue = a1.value._rawValue;
  uint64_t v3 = *(NSObject **)(v1 + *(void *)(*(void *)v1 + 288));
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = rawValue;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in GroupSession.requestEncryptionKey(for:);
  *(void *)(v5 + 24) = v4;
  v7[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v7[5] = v5;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  v7[3] = &block_descriptor_95;
  os_log_type_t v6 = _Block_copy(v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v3) {
    __break(1u);
  }
}

uint64_t specialized closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_7;
  }
  uint64_t v5 = (id *)(Strong + *(void *)(*(void *)Strong + 280));
  swift_beginAccess();
  id v6 = *v5;
  swift_release();
  if ((ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter() & 1) == 0)
  {

LABEL_7:
    uint64_t v13 = swift_bridgeObjectRetain();
    uint64_t Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVys6UInt64V14CopresenceCore11PubSubTopicC11ParticipantV_G_15GroupActivitiesAMVs5NeverOTg504_s15l429Activities0A7SessionC2id9groupUUID15initiatorHandle8activity14remoteEndpoint10queueLabel16locallyInitiated018lightweightPrimaryO016localParticipant11isFirstJoin12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n(v13);
    swift_bridgeObjectRelease();
    uint64_t v15 = specialized Set.init<A>(_:)(Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n);
    goto LABEL_20;
  }
  uint64_t v46 = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = specialized Sequence.compactMap<A>(_:)(a1, a2, (uint64_t)&v46);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v8 = specialized Set.init<A>(_:)(v7);
  swift_bridgeObjectRelease();
  if (!*(void *)(v46 + 16)) {
    goto LABEL_18;
  }
  swift_beginAccess();
  uint64_t v9 = swift_weakLoadStrong();
  unint64_t v10 = &lazy cache variable for type metadata for os_unfair_lock_s;
  if (v9)
  {
    unint64_t v11 = (id *)(v9 + *(void *)(*(void *)v9 + 280));
    swift_beginAccess();
    id v12 = *v11;
    swift_bridgeObjectRetain();
    uint64_t v24 = ActivitySessionClientConnection.requestParticipants(for:)();
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.default);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v45[0] = v20;
      *(_DWORD *)unint64_t v19 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v21 = Set.description.getter();
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      v44[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v10 = (void *)&lazy cache variable for type metadata for os_unfair_lock_s;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v17, v18, "[Translation] Not translating participants %s since self is nil", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v20, -1, -1);
      MEMORY[0x1A624F870](v19, -1, -1);
    }

    uint64_t v24 = MEMORY[0x1E4FBC870];
  }
  uint64_t Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo25TUConversationParticipantCG_15GroupActivities0E0Vs5NeverOTg504_s15f381Activities0A7SessionC2id9groupUUID15initiatorHandle8activity14remoteEndpoint10queueLabel16locallyInitiated018lightweightPrimaryO016localParticipant11isFirstJoin12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n(v24, (uint64_t)&v46);
  swift_bridgeObjectRelease();
  uint64_t v8 = specialized Set.union<A>(_:)(Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n, v8);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!*(void *)(v46 + 16)) {
    goto LABEL_18;
  }
  if (v10[277] != -1) {
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.default);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v42 = v6;
      int64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      v44[0] = v30;
      *(_DWORD *)int64_t v29 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v31 = Set.description.getter();
      unint64_t v33 = v32;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v6 = v42;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v27, v28, "[Translation] Remaining IDs that didn't successfully translate: %s", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v30, -1, -1);
      MEMORY[0x1A624F870](v29, -1, -1);
    }

LABEL_18:
    swift_beginAccess();
    uint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v35 = specialized Sequence.compactMap<A>(_:)(v34);
    swift_bridgeObjectRelease();
    uint64_t v36 = *(void *)(v35 + 16);
    uint64_t v37 = *(void *)(v8 + 16);
    BOOL v38 = __OFADD__(v36, v37);
    uint64_t v39 = v36 + v37;
    if (!v38) {
      break;
    }
    __break(1u);
LABEL_22:
    swift_once();
  }
  uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39 & ~(v39 >> 63), 0, MEMORY[0x1E4FBC860]);
  uint64_t v40 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v40);
  specialized Array.append<A>(contentsOf:)(v35);
  swift_bridgeObjectRelease();
  uint64_t v15 = specialized Set.init<A>(_:)(v43);
  swift_bridgeObjectRelease();

LABEL_20:
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_7;
  }
  unint64_t v11 = (id *)(Strong + *(void *)(*(void *)Strong + 280));
  swift_beginAccess();
  id v12 = *v11;
  swift_release();
  uint64_t v13 = ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter();
  if ((v13 & 1) == 0)
  {

LABEL_7:
    uint64_t v20 = swift_bridgeObjectRetain();
    uint64_t Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVys6UInt64V14CopresenceCore11PubSubTopicC11ParticipantV_G_15GroupActivitiesAMVs5NeverOTg504_s15l429Activities0A7SessionC2id9groupUUID15initiatorHandle8activity14remoteEndpoint10queueLabel16locallyInitiated018lightweightPrimaryO016localParticipant11isFirstJoin12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n(v20);
    swift_bridgeObjectRelease();
    uint64_t v22 = specialized Set.init<A>(_:)(Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n);
    goto LABEL_20;
  }
  uint64_t v58 = MEMORY[0x1E4FBC870];
  MEMORY[0x1F4188790](v13);
  v51[2] = a3;
  v51[3] = a4;
  v51[4] = a2;
  v51[5] = &v58;
  swift_bridgeObjectRetain();
  uint64_t v14 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), (uint64_t)v51, v9);
  swift_bridgeObjectRelease();
  uint64_t v15 = (uint8_t *)specialized Set.init<A>(_:)(v14);
  swift_bridgeObjectRelease();
  if (!*(void *)(v58 + 16)) {
    goto LABEL_18;
  }
  swift_beginAccess();
  uint64_t v16 = swift_weakLoadStrong();
  uint64_t v17 = &lazy cache variable for type metadata for os_unfair_lock_s;
  if (v16)
  {
    os_log_type_t v18 = (id *)(v16 + *(void *)(*(void *)v16 + 280));
    swift_beginAccess();
    id v19 = *v18;
    swift_bridgeObjectRetain();
    uint64_t v32 = ActivitySessionClientConnection.requestParticipants(for:)();
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.default);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      v57[0] = v54;
      os_signpost_id_t v53 = v26;
      *(_DWORD *)uint64_t v26 = 136315138;
      int64_t v52 = v26 + 4;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v27 = Set.description.getter();
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      v56[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, v57);
      uint64_t v17 = (void *)&lazy cache variable for type metadata for os_unfair_lock_s;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v30 = v53;
      _os_log_impl(&dword_1A375F000, v24, v25, "[Translation] Not translating participants %s since self is nil", v53, 0xCu);
      uint64_t v31 = v54;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v31, -1, -1);
      MEMORY[0x1A624F870](v30, -1, -1);
    }

    uint64_t v32 = MEMORY[0x1E4FBC870];
  }
  uint64_t Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo25TUConversationParticipantCG_15GroupActivities0E0Vs5NeverOTg504_s15f381Activities0A7SessionC2id9groupUUID15initiatorHandle8activity14remoteEndpoint10queueLabel16locallyInitiated018lightweightPrimaryO016localParticipant11isFirstJoin12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n(v32, (uint64_t)&v58);
  swift_bridgeObjectRelease();
  uint64_t v15 = (uint8_t *)specialized Set.union<A>(_:)(Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n, (uint64_t)v15);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!*(void *)(v58 + 16)) {
    goto LABEL_18;
  }
  if (v17[277] != -1) {
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Log.default);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      v56[0] = v38;
      uint64_t v54 = (uint64_t)a5;
      *(_DWORD *)uint64_t v37 = 136315138;
      int64_t v52 = v37 + 4;
      swift_bridgeObjectRetain();
      uint64_t v39 = Set.description.getter();
      os_signpost_id_t v53 = v15;
      id v40 = v12;
      unint64_t v42 = v41;
      swift_bridgeObjectRelease();
      uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v42, v56);
      a5 = (void *)v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v12 = v40;
      uint64_t v15 = v53;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v35, v36, "[Translation] Remaining IDs that didn't successfully translate: %s", v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v38, -1, -1);
      MEMORY[0x1A624F870](v37, -1, -1);
    }

LABEL_18:
    swift_beginAccess();
    uint64_t v43 = swift_bridgeObjectRetain();
    uint64_t v44 = specialized Sequence.compactMap<A>(_:)(v43);
    swift_bridgeObjectRelease();
    uint64_t v45 = *(void *)(v44 + 16);
    uint64_t v46 = *((void *)v15 + 2);
    BOOL v47 = __OFADD__(v45, v46);
    uint64_t v48 = v45 + v46;
    if (!v47) {
      break;
    }
    __break(1u);
LABEL_22:
    swift_once();
  }
  uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48 & ~(v48 >> 63), 0, MEMORY[0x1E4FBC860]);
  uint64_t v49 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v49);
  specialized Array.append<A>(contentsOf:)(v44);
  swift_bridgeObjectRelease();
  uint64_t v22 = specialized Set.init<A>(_:)(v55);
  swift_bridgeObjectRelease();

LABEL_20:
  uint64_t result = swift_bridgeObjectRelease();
  *a5 = v22;
  return result;
}

uint64_t closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void v20[2] = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Participant();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  id v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((PubSubTopic.Participant.isSaltVerified.getter() & 1) != 0 && (swift_beginAccess(), swift_weakLoadStrong()))
  {
    uint64_t active = GroupSession.internalActiveParticipants.getter();
    MEMORY[0x1F4188790](active);
    v20[-2] = a1;
    specialized Sequence.first(where:)((uint64_t (*)(char *))partial apply for closure #1 in closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), active, (uint64_t)v8);
    v20[1] = v3;
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for Participant?);
LABEL_9:
      uint64_t v18 = PubSubTopic.Participant.participantID.getter();
      specialized Set._Variant.insert(_:)(&v21, v18);
      swift_release();
      uint64_t v15 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, v15, 1, v9);
    }
    outlined init with take of Participant((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Participant);
    swift_bridgeObjectRetain();
    uint64_t v17 = String.count.getter();
    swift_bridgeObjectRelease();
    if (!v17)
    {
      outlined destroy of Participant((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Participant);
      goto LABEL_9;
    }
    swift_release();
    outlined init with take of Participant((uint64_t)v12, a3, (uint64_t (*)(void))type metadata accessor for Participant);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v14 = PubSubTopic.Participant.participantID.getter();
    UUID.init(_:)();
    uint64_t v15 = 0;
    *(void *)(a3 + *(int *)(v9 + 24)) = v14;
    uint64_t v16 = (void *)(a3 + *(int *)(v9 + 20));
    *uint64_t v16 = 0;
    v16[1] = 0xE000000000000000;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, v15, 1, v9);
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  unint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for Participant();
  uint64_t v8 = *(void *)(v47 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v47);
  uint64_t v42 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v40 = (uint64_t)&v39 - v11;
  uint64_t v12 = type metadata accessor for PubSubTopic.Participant();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v50 = (char *)&v39 - v17;
  uint64_t v18 = *(void *)(a3 + 64);
  uint64_t v44 = a3 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v48 = v13 + 32;
  uint64_t v49 = v13 + 16;
  uint64_t v22 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v41 = v8;
  int64_t v45 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v46 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v53 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v24 = 0;
  unint64_t v43 = MEMORY[0x1E4FBC860];
  while (1)
  {
    if (v21)
    {
      unint64_t v25 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v26 = v25 | (v24 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v24++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v24 >= v45) {
      goto LABEL_32;
    }
    unint64_t v28 = *(void *)(v44 + 8 * v24);
    if (!v28) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v24 << 6);
LABEL_19:
    uint64_t v30 = v50;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v50, *(void *)(v53 + 56) + *(void *)(v13 + 72) * v26, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v30, v12);
    v51(v16);
    if (v3)
    {
      (*v22)(v16, v12);
      unint64_t v38 = v43;
      swift_bridgeObjectRelease();
LABEL_33:
      swift_release();
      return v38;
    }
    (*v22)(v16, v12);
    if ((*v46)(v7, 1, v47) == 1)
    {
      uint64_t result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, &demangling cache variable for type metadata for Participant?);
    }
    else
    {
      uint64_t v39 = type metadata accessor for Participant;
      uint64_t v31 = v40;
      outlined init with take of Participant((uint64_t)v7, v40, (uint64_t (*)(void))type metadata accessor for Participant);
      outlined init with take of Participant(v31, v42, (uint64_t (*)(void))v39);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v43 + 16) + 1, 1, v43);
      }
      unint64_t v33 = *(void *)(v43 + 16);
      unint64_t v32 = *(void *)(v43 + 24);
      uint64_t v34 = (uint64_t (*)())(v33 + 1);
      if (v33 >= v32 >> 1)
      {
        uint64_t v39 = (uint64_t (*)())(v33 + 1);
        uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v43);
        uint64_t v34 = v39;
        unint64_t v43 = v37;
      }
      uint64_t v35 = v42;
      unint64_t v36 = v43;
      *(void *)(v43 + 16) = v34;
      uint64_t result = outlined init with take of Participant(v35, v36+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v33, (uint64_t (*)(void))type metadata accessor for Participant);
    }
  }
  int64_t v29 = v24 + 1;
  if (v24 + 1 >= v45) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v44 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 2;
  if (v24 + 2 >= v45) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v44 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 3;
  if (v24 + 3 >= v45) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v44 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 4;
  if (v24 + 4 >= v45)
  {
LABEL_32:
    unint64_t v38 = v43;
    goto LABEL_33;
  }
  unint64_t v28 = *(void *)(v44 + 8 * v29);
  if (v28)
  {
LABEL_17:
    int64_t v24 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v24 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v24 >= v45) {
      goto LABEL_32;
    }
    unint64_t v28 = *(void *)(v44 + 8 * v24);
    ++v29;
    if (v28) {
      goto LABEL_18;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int (**v22)(char *, uint64_t, uint64_t);
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  int64_t v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, char *, uint64_t);
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (**v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *);
  uint64_t v50;
  uint64_t v51;

  uint64_t v48 = a2;
  uint64_t v49 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v51 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v51 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v51);
  unint64_t v43 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v42 = (char *)&v39 - v11;
  uint64_t v12 = type metadata accessor for Participant();
  uint64_t v47 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v18 = *(void *)(a3 + 56);
  int64_t v45 = a3 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v46 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v40 = v8;
  uint64_t v41 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v50 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v24 = 0;
  uint64_t v44 = MEMORY[0x1E4FBC860];
  while (1)
  {
    if (v21)
    {
      unint64_t v25 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v26 = v25 | (v24 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v24++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v24 >= v46) {
      goto LABEL_32;
    }
    unint64_t v28 = *(void *)(v45 + 8 * v24);
    if (!v28) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v24 << 6);
LABEL_19:
    outlined init with copy of Participant(*(void *)(v50 + 48) + *(void *)(v47 + 72) * v26, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Participant);
    v49(v15);
    if (v3)
    {
      outlined destroy of Participant((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Participant);
      unint64_t v38 = v44;
      swift_bridgeObjectRelease();
LABEL_33:
      swift_release();
      return v38;
    }
    outlined destroy of Participant((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Participant);
    if ((*v22)(v7, 1, v51) == 1)
    {
      uint64_t result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      uint64_t v30 = *v41;
      (*v41)(v42, v7, v51);
      v30(v43, v42, v51);
      uint64_t v31 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, v44);
      }
      unint64_t v33 = *(void *)(v44 + 16);
      unint64_t v32 = *(void *)(v44 + 24);
      uint64_t v34 = v33 + 1;
      if (v33 >= v32 >> 1)
      {
        uint64_t v39 = v33 + 1;
        uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v44);
        uint64_t v34 = v39;
        uint64_t v44 = v37;
      }
      uint64_t v35 = v43;
      unint64_t v36 = v44;
      *(void *)(v44 + 16) = v34;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)(v36+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v33, v35, v51);
    }
  }
  int64_t v29 = v24 + 1;
  if (v24 + 1 >= v46) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 2;
  if (v24 + 2 >= v46) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 3;
  if (v24 + 3 >= v46) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 4;
  if (v24 + 4 >= v46)
  {
LABEL_32:
    unint64_t v38 = v44;
    goto LABEL_33;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28)
  {
LABEL_17:
    int64_t v24 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v24 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v24 >= v46) {
      goto LABEL_32;
    }
    unint64_t v28 = *(void *)(v45 + 8 * v24);
    ++v29;
    if (v28) {
      goto LABEL_18;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v31 = type metadata accessor for Participant();
  uint64_t v2 = *(void *)(v31 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v31);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  uint64_t v8 = (char *)&v28 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v29 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v30 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v32 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  unint64_t v17 = MEMORY[0x1E4FBC860];
  if (!v14) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v18 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v16 << 6))
  {
    uint64_t v23 = *(void *)(*(void *)(v32 + 48) + 8 * i);
    UUID.init(_:)();
    uint64_t v24 = v31;
    *(void *)&v8[*(int *)(v31 + 24)] = v23;
    unint64_t v25 = &v8[*(int *)(v24 + 20)];
    *(void *)unint64_t v25 = 0;
    *((void *)v25 + 1) = 0xE000000000000000;
    outlined init with take of Participant((uint64_t)v8, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v10, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Participant);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, v17);
    }
    unint64_t v27 = *(void *)(v17 + 16);
    unint64_t v26 = *(void *)(v17 + 24);
    if (v27 >= v26 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v17);
    }
    *(void *)(v17 + 16) = v27 + 1;
    uint64_t result = outlined init with take of Participant((uint64_t)v5, v17+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v27, (uint64_t (*)(void))type metadata accessor for Participant);
    if (v14) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v30) {
      goto LABEL_27;
    }
    unint64_t v21 = *(void *)(v29 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v30) {
        goto LABEL_27;
      }
      unint64_t v21 = *(void *)(v29 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v30) {
          goto LABEL_27;
        }
        unint64_t v21 = *(void *)(v29 + 8 * v16);
        if (!v21)
        {
          int64_t v16 = v20 + 3;
          if (v20 + 3 >= v30) {
            goto LABEL_27;
          }
          unint64_t v21 = *(void *)(v29 + 8 * v16);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v30)
  {
LABEL_27:
    swift_release();
    return v17;
  }
  unint64_t v21 = *(void *)(v29 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v30) {
      goto LABEL_27;
    }
    unint64_t v21 = *(void *)(v29 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Participant();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = *(void *)(a3 + 56);
  uint64_t v34 = a3 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v37 = (unint64_t)(v14 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  unint64_t v33 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v18 >= v37) {
      goto LABEL_31;
    }
    unint64_t v22 = *(void *)(v34 + 8 * v18);
    if (!v22) {
      break;
    }
LABEL_18:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_19:
    outlined init with copy of Participant(*(void *)(a3 + 48) + *(void *)(v7 + 72) * v20, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Participant);
    a1(&v35, v10);
    if (v3)
    {
      outlined destroy of Participant((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Participant);
      uint64_t v28 = v33;
      swift_bridgeObjectRelease();
LABEL_32:
      swift_release();
      return (uint64_t)v28;
    }
    uint64_t result = outlined destroy of Participant((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Participant);
    if ((v36 & 1) == 0)
    {
      uint64_t v32 = v35;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
        unint64_t v33 = (void *)result;
      }
      unint64_t v25 = v33[2];
      unint64_t v24 = v33[3];
      unint64_t v26 = v25 + 1;
      if (v25 >= v24 >> 1)
      {
        unint64_t v30 = v33[2];
        unint64_t v31 = v25 + 1;
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v33);
        unint64_t v25 = v30;
        unint64_t v26 = v31;
        unint64_t v33 = (void *)result;
      }
      unint64_t v27 = v33;
      v33[2] = v26;
      v27[v25 + 4] = v32;
    }
  }
  int64_t v23 = v18 + 1;
  if (v18 + 1 >= v37) {
    goto LABEL_31;
  }
  unint64_t v22 = *(void *)(v34 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 2;
  if (v18 + 2 >= v37) {
    goto LABEL_31;
  }
  unint64_t v22 = *(void *)(v34 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 3;
  if (v18 + 3 >= v37) {
    goto LABEL_31;
  }
  unint64_t v22 = *(void *)(v34 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 4;
  if (v18 + 4 >= v37)
  {
LABEL_31:
    uint64_t v28 = v33;
    goto LABEL_32;
  }
  unint64_t v22 = *(void *)(v34 + 8 * v23);
  if (v22)
  {
LABEL_17:
    int64_t v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v37) {
      goto LABEL_31;
    }
    unint64_t v22 = *(void *)(v34 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_18;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

void specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  uint64_t v26 = MEMORY[0x1E4FBC860];
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v25[1];
    uint64_t v23 = v25[2];
    uint64_t v7 = v25[3];
    int64_t v8 = v25[4];
    unint64_t v9 = v25[5];
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v23 = a3 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    int64_t v8 = 0;
  }
  int64_t v22 = (unint64_t)(v7 + 64) >> 6;
  while (v5 < 0)
  {
    uint64_t v17 = __CocoaSet.Iterator.next()();
    if (!v17) {
      goto LABEL_39;
    }
    uint64_t v24 = v17;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v18 = (id)v25[0];
    swift_unknownObjectRelease();
    int64_t v16 = v8;
    uint64_t v14 = v9;
    if (!v18) {
      goto LABEL_39;
    }
LABEL_28:
    v25[0] = v18;
    a1(&v24, v25);

    if (v4)
    {
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      swift_bridgeObjectRelease();
      return;
    }
    if (v24)
    {
      MEMORY[0x1A624E0F0]();
      if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    int64_t v8 = v16;
    unint64_t v9 = v14;
  }
  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
    int64_t v16 = v8;
LABEL_27:
    id v18 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    if (!v18) {
      goto LABEL_39;
    }
    goto LABEL_28;
  }
  int64_t v16 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v16 >= v22) {
      goto LABEL_39;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v16);
    if (!v19)
    {
      int64_t v20 = v8 + 2;
      if (v8 + 2 >= v22) {
        goto LABEL_39;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v20);
      if (v19) {
        goto LABEL_25;
      }
      int64_t v20 = v8 + 3;
      if (v8 + 3 >= v22) {
        goto LABEL_39;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v20);
      if (v19) {
        goto LABEL_25;
      }
      int64_t v20 = v8 + 4;
      if (v8 + 4 >= v22) {
        goto LABEL_39;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v20);
      if (v19)
      {
LABEL_25:
        int64_t v16 = v20;
      }
      else
      {
        int64_t v16 = v8 + 5;
        if (v8 + 5 >= v22) {
          goto LABEL_39;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v16);
        if (!v19)
        {
          int64_t v21 = v8 + 6;
          while (v22 != v21)
          {
            unint64_t v19 = *(void *)(v23 + 8 * v21++);
            if (v19)
            {
              int64_t v16 = v21 - 1;
              goto LABEL_26;
            }
          }
LABEL_39:
          outlined consume of [AnyHashable : Any].Iterator._Variant();
          return;
        }
      }
    }
LABEL_26:
    uint64_t v14 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v16 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

uint64_t specialized closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1, uint64_t a2, const char *a3)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  id v6 = a1;
  id v7 = a1;
  int64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    v16[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    id v12 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v8, v9, a3, v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v11, -1, -1);
    MEMORY[0x1A624F870](v10, -1, -1);
  }
  else
  {
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    specialized GroupSession.invalidate(reason:)(a1);
    return swift_release();
  }
  return result;
}

uint64_t closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  id v8 = a1;
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    v18[0] = v13;
    *(_DWORD *)id v12 = 136315138;
    id v14 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v15 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v10, v11, a5, v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v13, -1, -1);
    MEMORY[0x1A624F870](v12, -1, -1);
  }
  else
  {
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    GroupSession.invalidate(reason:)(a1);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #15 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      aBlock[0] = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      if (a1)
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt64]);
        uint64_t v9 = String.init<A>(reflecting:)();
        unint64_t v11 = v10;
      }
      else
      {
        unint64_t v11 = 0xE300000000000000;
        uint64_t v9 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v5, v6, "Requesting encryption-keys for participantIDs=%s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v8, -1, -1);
      MEMORY[0x1A624F870](v7, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v12 = *(NSObject **)(v3 + *(void *)(*(void *)v3 + 288));
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v3;
    *(void *)(v13 + 24) = a1;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = partial apply for specialized closure #1 in GroupSession.requestEncryptionKey(for:);
    *(void *)(v14 + 24) = v13;
    aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_371;
    uint64_t v15 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v12, v15);
    _Block_release(v15);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v12 = v7;
      *(_DWORD *)os_log_type_t v6 = 136315138;
      if (a1)
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt64]);
        uint64_t v8 = String.init<A>(reflecting:)();
        unint64_t v10 = v9;
      }
      else
      {
        unint64_t v10 = 0xE300000000000000;
        uint64_t v8 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v4, v5, "Requesting encryption-keys for participantIDs=%s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v7, -1, -1);
      MEMORY[0x1A624F870](v6, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v11.value._rawValue = a1;
    GroupSession.requestEncryptionKey(for:)(v11);
    return swift_release();
  }
  return result;
}

uint64_t *GroupSession.deinit()
{
  uint64_t v1 = v0;
  uint64_t v39 = *v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v2 - 8);
  unint64_t v38 = (id *)v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.client);
  swift_retain();
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    Swift::OpaquePointer_optional v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    aBlock[0] = v12;
    *(_DWORD *)Swift::OpaquePointer_optional v11 = 136315138;
    uint64_t v13 = GroupSession.description.getter();
    uint64_t aBlock[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v9, v10, "Deinit groupSession %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v12, -1, -1);
    MEMORY[0x1A624F870](v11, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v15 = (uint64_t *)((char *)v0 + direct field offset for GroupSession.playbackSyncerLink);
  swift_beginAccess();
  uint64_t v16 = *v15;
  if (*v15)
  {
    aBlock[4] = (uint64_t)partial apply for closure #1 in GroupSession.deinit;
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_98;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain_n();
    static DispatchQoS.unspecified.getter();
    uint64_t v40 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    id v18 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A624E5F0](0, v7, v4, v17);
    _Block_release(v17);
    swift_release();
    (*(void (**)(char *, id *))(v37 + 8))(v4, v18);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v36);
    swift_release();
  }
  unint64_t v38 = (id *)((char *)v0 + *(void *)(*v0 + 280));
  unint64_t v19 = v38;
  swift_beginAccess();
  id v20 = *v19;
  dispatch thunk of XPCClient.destroyConnection()();

  outlined destroy of Participant((uint64_t)v1 + direct field offset for GroupSession.initiator, (uint64_t (*)(void))type metadata accessor for Participant);
  swift_release();
  swift_release();
  uint64_t v21 = (uint64_t)v1 + direct field offset for GroupSession.id;
  uint64_t v22 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
  swift_release();

  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(uint64_t *)((char *)v1 + direct field offset for GroupSession.receivedDataHandler));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v23 = (uint64_t)v1 + *(void *)(*v1 + 208);
  type metadata accessor for GroupSession.State();
  uint64_t v24 = type metadata accessor for Published();
  unint64_t v25 = *(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8);
  v25(v23, v24);
  uint64_t v26 = (uint64_t)v1 + *(void *)(*v1 + 216);
  uint64_t v27 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
  uint64_t v28 = (uint64_t)v1 + *(void *)(*v1 + 224);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  unint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8);
  v30(v28, v29);
  swift_bridgeObjectRelease();
  uint64_t v31 = (uint64_t)v1 + *(void *)(*v1 + 240);
  uint64_t v32 = type metadata accessor for GroupSession.Timestamps();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v31, v32);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v1 + *(void *)(*v1 + 312));
  swift_release();
  swift_release();
  v30((uint64_t)v1 + *(void *)(*v1 + 344), v29);
  v25((uint64_t)v1 + *(void *)(*v1 + 352), v24);
  return v1;
}

void closure #1 in GroupSession.deinit(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1
                                  + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                    + 512))();
  if (one-time initialization token for playback != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.playback);
  oslog = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1A375F000, oslog, v2, "Cleaned up playback syncer in deinit", v3, 2u);
    MEMORY[0x1A624F870](v3, -1, -1);
  }
}

uint64_t GroupSession.__deallocating_deinit()
{
  return GroupSession.__deallocating_deinit((void (*)(void))GroupSession.deinit);
}

Swift::Void __swiftcall GroupSession.join()()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    aBlock[0] = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v6 = GroupSession.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v2, v3, "Application called join on %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v8 = *(NSObject **)(v0 + *(void *)(*(void *)v0 + 288));
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in GroupSession.join();
  *(void *)(v9 + 24) = v0;
  aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_105;
  os_log_type_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v10);
  _Block_release(v10);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v8) {
    __break(1u);
  }
}

uint64_t closure #1 in GroupSession.join()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v22 - v7;
  if (one-time initialization token for groupSession != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v9, (uint64_t)static Signposts.groupSession);
  UUID.uint64Value.getter();
  OSSignpostID.init(_:)();
  os_log_type_t v10 = OSSignposter.logHandle.getter();
  os_signpost_type_t v11 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v12(v6, v8, v2);
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = v2;
    unint64_t v14 = v13;
    *(_WORD *)uint64_t v13 = 0;
    os_signpost_id_t v15 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1A375F000, v10, v11, v15, "group-session-join", "", v14, 2u);
    uint64_t v16 = v14;
    uint64_t v2 = v23;
    MEMORY[0x1A624F870](v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {

    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  }
  v12(v6, v8, v2);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v17 = OSSignpostIntervalState.init(id:isOpen:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  *(void *)(a1 + *(void *)(*(void *)a1 + 328)) = v17;
  swift_release();
  id v18 = objc_msgSend(self, sel_sharedInstance);
  unsigned int v19 = objc_msgSend(v18, sel_opaqueSessionID);

  MEMORY[0x1F4188790](v20);
  *(&v22 - 2) = a1;
  *((_DWORD *)&v22 - 2) = v19;
  *((unsigned char *)&v22 - 4) = 0;
  return GroupSession.invalidationBlock(execute:)((uint64_t (*)(void))partial apply for closure #1 in closure #1 in GroupSession.join());
}

void closure #1 in closure #1 in GroupSession.join()(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  os_log_type_t v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  os_signpost_type_t v11 = (id *)((char *)a1 + *(void *)(v5 + 280));
  swift_beginAccess();
  id v12 = *v11;
  uint64_t v13 = (void *)XPCClient.queue.getter();

  uint64_t v28 = a1;
  int v29 = a2;
  char v30 = BYTE4(a2) & 1;
  OS_dispatch_queue.sync<A>(execute:)();

  if (!v2)
  {
    unint64_t v14 = *(ValueMetadata **)(v6 + 80);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v16 = (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 88) + 40))(v15);
    swift_bridgeObjectRelease();
    if (v16)
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Log.default);
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v18, v19)) {
        goto LABEL_14;
      }
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      uint64_t v21 = "Not creating AVAudioSession because ScreenSharing doesn't support it";
    }
    else
    {
      if (v14 != &type metadata for StaticGroupActivity)
      {
        uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
        v22(v10, (char *)a1 + direct field offset for GroupSession.id, v7);
        outlined init with copy of AudioSessionAssertionManager((uint64_t)a1 + *(void *)(*a1 + 312), (uint64_t)v31);
        type metadata accessor for AVAudioSessionAssertion();
        uint64_t v23 = swift_allocObject();
        v22((char *)(v23 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id), v10, v7);
        outlined init with copy of AudioSessionAssertionManager((uint64_t)v31, v23 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager);
        uint64_t v24 = v32;
        uint64_t v25 = v33;
        __swift_project_boxed_opaque_existential_1(v31, v32);
        (*(void (**)(char *, uint64_t, uint64_t))(v25 + 8))(v10, v24, v25);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
        *(uint64_t *)((char *)a1 + *(void *)(*a1 + 320)) = v23;
        swift_release();
        return;
      }
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Log.default);
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v18, v19)) {
        goto LABEL_14;
      }
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      uint64_t v21 = "Not creating AVAudioSession because static group activities don't support it";
    }
    _os_log_impl(&dword_1A375F000, v18, v19, v21, v20, 2u);
    MEMORY[0x1A624F870](v20, -1, -1);
LABEL_14:
  }
}

uint64_t closure #1 in closure #1 in closure #1 in GroupSession.join()(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  uint64_t v3 = (void **)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = v2;
  id v6 = v4;
  swift_retain();
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();

  swift_release();
  swift_beginAccess();
  uint64_t v7 = *(void **)(v2 + 16);
  if (v7)
  {
    id v8 = v7;
    swift_willThrow();
  }
  return swift_release();
}

void closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join()(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = *a1;
  if ((a2 & 0x100000000) != 0) {
    v7.super.super.isa = 0;
  }
  else {
    v7.super.super.isa = UInt32._bridgeToObjectiveC()().super.super.isa;
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  v10[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join();
  v10[5] = v8;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  _OWORD v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed CPDataCryptor?, @guaranteed Error?) -> ();
  v10[3] = &block_descriptor_474;
  uint64_t v9 = _Block_copy(v10);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_joinWithAudioSessionID_completion_, v7.super.super.isa, v9);
  _Block_release(v9);
}

void closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    NSNumber v7 = (void **)(a4 + 16);
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.default);
    swift_retain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      os_signpost_type_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)os_signpost_type_t v11 = 136315138;
      uint64_t v24 = a3;
      v25[0] = v12;
      uint64_t v13 = type metadata accessor for GroupSession();
      uint64_t v14 = >> prefix<A>(_:)((uint64_t)&v24, v13);
      uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v9, v10, "Error joining session %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v12, -1, -1);
      MEMORY[0x1A624F870](v11, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    swift_beginAccess();
    uint64_t v21 = *v7;
    *NSNumber v7 = a2;
    id v22 = a2;
  }
  else
  {
    char v16 = *(void **)(a3 + direct field offset for GroupSession.linkManager);
    uint64_t v17 = (void *)MEMORY[0x1E4FBC8C8];
    id v18 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v16) + 0x170);
    uint64_t v19 = swift_unknownObjectRetain();
    uint64_t v20 = v18(v19);
    id v23 = (id)(*(uint64_t (**)(uint64_t))((*v17 & *v16) + 0x230))(v20);
    GroupSession.logAttachmentEvent(report:reportEvent:)(v23, 0xD000000000000025, 0x80000001A3900580);
  }
}

uint64_t specialized GroupSession.logAttachmentEvent(report:reportEvent:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  os_log_type_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (id *)(v3 + *(void *)(*(void *)v3 + 280));
  swift_beginAccess();
  id v15 = *v14;
  char v16 = (void *)XPCClient.queue.getter();

  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v4;
  void v17[3] = a2;
  v17[4] = a3;
  v17[5] = a1;
  aBlock[4] = partial apply for specialized closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_390;
  id v18 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  id v19 = a1;
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v13, v10, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v21);
  return swift_release();
}

uint64_t GroupSession.logAttachmentEvent(report:reportEvent:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  os_log_type_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (id *)(v3 + *(void *)(*(void *)v3 + 280));
  swift_beginAccess();
  id v15 = *v14;
  char v16 = (void *)XPCClient.queue.getter();

  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v4;
  void v17[3] = a2;
  v17[4] = a3;
  v17[5] = a1;
  aBlock[4] = partial apply for closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_111;
  id v18 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  id v19 = a1;
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v13, v10, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v21);
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed CPDataCryptor?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

id closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.join()(void *a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  swift_retain();
  id v6 = a1;
  swift_retain();
  id v7 = a1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    v20[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v12 = GroupSession.description.getter();
    unint64_t v14 = v13;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    id v15 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v16 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v8, v9, "%s connection error %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v11, -1, -1);
    MEMORY[0x1A624F870](v10, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  swift_beginAccess();
  id v18 = *(void **)(a3 + 16);
  *(void *)(a3 + 16) = a1;

  return a1;
}

uint64_t GroupSession.invalidationBlock(execute:)(uint64_t (*a1)(void))
{
  return a1();
}

Swift::Void __swiftcall GroupSession.leave()()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    aBlock[0] = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v6 = GroupSession.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v2, v3, "Application called leave on %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v8 = *(NSObject **)(v0 + *(void *)(*(void *)v0 + 288));
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in GroupSession.leave();
  *(void *)(v9 + 24) = v0;
  aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_118;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v10);
  _Block_release(v10);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v8) {
    __break(1u);
  }
}

uint64_t closure #1 in closure #1 in GroupSession.leave()(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v3 = *v2;
  uint64_t v4 = XPCClient.queue.getter();

  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in closure #1 in closure #1 in GroupSession.leave();
  *(void *)(v5 + 24) = a1;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_458;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v4, v6);

  _Block_release(v6);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + *(void *)(*(void *)a1 + 320)) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in GroupSession.capabilities.didset(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave()(void **a1, uint64_t a2)
{
  id v2 = *a1;
  v4[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave();
  v4[5] = a2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v4[3] = &block_descriptor_461;
  id v3 = _Block_copy(v4);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_leaveWithCompletion_, v3);
  _Block_release(v3);
}

void closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave()(void *a1, uint64_t *a2)
{
  if (a1)
  {
    uint64_t v4 = *a2;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.default);
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v15 = (uint64_t)a2;
      v16[0] = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v10 = >> prefix<A>(_:)((uint64_t)&v15, v4);
      uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v6, v7, "Error leaving session %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v9, -1, -1);
      MEMORY[0x1A624F870](v8, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    GroupSession.invalidate(reason:)(a1);
  }
  else
  {
    uint64_t v12 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)((char *)a2
                                                                             + direct field offset for GroupSession.linkManager))
                                       + 0x238))();
    GroupSession.logAttachmentEvent(report:reportEvent:)(v12, 0xD000000000000027, 0x80000001A38FFD70);

    unint64_t v13 = (id *)((char *)a2 + *(void *)(*a2 + 280));
    swift_beginAccess();
    id v14 = *v13;
    dispatch thunk of XPCClient.destroyConnection()();
  }
}

Swift::Void __swiftcall GroupSession.end()()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    aBlock[0] = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v6 = GroupSession.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v2, v3, "Application called end on %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v8 = *(NSObject **)(v0 + *(void *)(*(void *)v0 + 288));
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in GroupSession.end();
  *(void *)(v9 + 24) = v0;
  aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_125;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v10);
  _Block_release(v10);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v0 + *(void *)(*(void *)v0 + 320)) = 0;
    swift_release();
    swift_release();
  }
}

uint64_t closure #1 in GroupSession.end()(uint64_t a1)
{
  id v2 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v3 = *v2;
  uint64_t v4 = XPCClient.queue.getter();

  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in closure #1 in GroupSession.end();
  *(void *)(v5 + 24) = a1;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_451;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v4, v6);

  _Block_release(v6);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v4) {
    __break(1u);
  }
  return result;
}

id closure #1 in closure #1 in closure #1 in GroupSession.end()(id *a1)
{
  return objc_msgSend(*a1, sel_end);
}

Swift::Void __swiftcall GroupSession.requestForegroundPresentation()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  id v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v4 - 8);
  uint64_t v20 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  swift_retain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v18 = v1;
    uint64_t v12 = v11;
    aBlock[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v13 = GroupSession.description.getter();
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v8, v9, "Application called requestForegroundPresentation on %s", v10, 0xCu);
    swift_arrayDestroy();
    uint64_t v15 = v12;
    uint64_t v1 = v18;
    MEMORY[0x1A624F870](v15, -1, -1);
    MEMORY[0x1A624F870](v10, -1, -1);
  }
  else
  {

    swift_release();
  }
  aBlock[4] = (uint64_t)partial apply for closure #1 in GroupSession.requestForegroundPresentation();
  aBlock[5] = v0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_128;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v6, v3, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v20);
  swift_release();
}

uint64_t closure #1 in GroupSession.requestForegroundPresentation()(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v3 = *v2;
  uint64_t v4 = XPCClient.queue.getter();

  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in closure #1 in GroupSession.requestForegroundPresentation();
  *(void *)(v5 + 24) = a1;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_444;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v4, v6);

  _Block_release(v6);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v4) {
    __break(1u);
  }
  return result;
}

void closure #1 in closure #1 in GroupSession.end()(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();
}

id closure #1 in closure #1 in closure #1 in GroupSession.requestForegroundPresentation()(id *a1)
{
  return objc_msgSend(*a1, sel_requestForegroundPresentation);
}

BOOL GroupSession.hasPendingActivityUpdate.getter()
{
  return *(void *)(v0 + *(void *)(*(void *)v0 + 368)) > 0;
}

uint64_t closure #1 in closure #1 in GroupSession.updateActivity(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v27 - v5;
  uint64_t v7 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v28 + 64);
  uint64_t v9 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v29 = (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (uint64_t *)((char *)&v27 - v10);
  GroupSession.state.getter();
  uint64_t v12 = v33;
  uint64_t v31 = 1;
  id v32 = v33;
  uint64_t v13 = *(void *)(v2 + 88);
  char v14 = static GroupSession.State.== infix(_:_:)(&v32, (void **)&v31);
  outlined consume of GroupSession<A>.State<A>(v12);
  if (v14)
  {
    GroupSession.activity.getter();
    uint64_t v15 = v30;
    GroupActivity.eraseToAnyGroupActivity()(v3, v13, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (!v15)
    {
      uint64_t v17 = *(void *)(*a1 + 368);
      uint64_t v18 = *(uint64_t *)((char *)a1 + v17);
      BOOL v19 = __OFADD__(v18, 1);
      uint64_t v20 = v18 + 1;
      if (v19)
      {
        __break(1u);
      }
      else
      {
        *(uint64_t *)((char *)a1 + v17) = v20;
        uint64_t v21 = (uint64_t)v11;
        uint64_t v22 = (uint64_t)v11;
        uint64_t v23 = v29;
        outlined init with copy of Participant(v22, v29, type metadata accessor for AnyGroupActivity);
        unint64_t v24 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
        uint64_t v25 = swift_allocObject();
        outlined init with take of Participant(v23, v25 + v24, type metadata accessor for AnyGroupActivity);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
        swift_allocObject();
        uint64_t v33 = (void *)Future.init(_:)();
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Future<TUConversationActivity, Error> and conformance Future<A, B>, (uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
        swift_retain_n();
        Publisher.sinkOnce(_:onError:)();
        swift_release_n();
        swift_release();
        return outlined destroy of Participant(v21, type metadata accessor for AnyGroupActivity);
      }
    }
  }
  else
  {
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    swift_allocError();
    *uint64_t v26 = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(void **a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  uint64_t v11 = (id *)(a2 + *(void *)(*(void *)a2 + 280));
  swift_beginAccess();
  id v12 = *v11;
  uint64_t v13 = (void *)XPCClient.queue.getter();

  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = v10;
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_535;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  id v16 = v10;
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v9, v6, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v22);
  uint64_t result = swift_release();
  uint64_t v18 = *(void *)(*(void *)a2 + 368);
  uint64_t v19 = *(void *)(a2 + v18);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20) {
    __break(1u);
  }
  else {
    *(void *)(a2 + v18) = v21;
  }
  return result;
}

void closure #2 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(void **a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 80);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v30 - v8;
  uint64_t v10 = *a1;
  uint64_t v11 = *(void *)(v4 + 368);
  uint64_t v12 = *(uint64_t *)((char *)a2 + v11);
  BOOL v13 = __OFSUB__(v12, 1);
  uint64_t v14 = v12 - 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    *(uint64_t *)((char *)a2 + v11) = v14;
    if (one-time initialization token for default == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  swift_retain();
  id v16 = v10;
  swift_retain();
  id v17 = v10;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v33 = v31;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v30 = v20 + 4;
    GroupSession.activity.getter();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v9, 0, 1, v5);
    uint64_t v21 = >> prefix<A>(_:)((uint64_t)v9, v5);
    unint64_t v23 = v22;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    uint64_t v32 = (uint64_t)v10;
    id v24 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v25 = String.init<A>(reflecting:)();
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v18, v19, "Failed to set activity %s error: %s", (uint8_t *)v20, 0x16u);
    uint64_t v27 = v31;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v27, -1, -1);
    MEMORY[0x1A624F870](v20, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
  uint64_t v28 = (void *)swift_allocError();
  *uint64_t v29 = 3;
  GroupSession.invalidate(reason:)(v28);
}

void specialized closure #1 in GroupSession.updatePublicState()(uint64_t a1)
{
  type metadata accessor for AnyGroupActivity(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v2 = (uint64_t)v23;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v23)
  {
    if (v23 == (void *)1)
    {
      if (v22 == (void *)1)
      {
        uint64_t v2 = 1;
LABEL_14:
        outlined consume of GroupSession<A>.State<A>((id)v2);
        outlined consume of GroupSession<A>.State<A>(v22);
        outlined consume of GroupSession<A>.State<A>((id)v2);
        return;
      }
    }
    else if ((unint64_t)v22 >= 2)
    {
      id v17 = v23;
      goto LABEL_14;
    }
  }
  else if (!v22)
  {
    uint64_t v2 = 0;
    goto LABEL_14;
  }
  outlined copy of GroupSession<A>.State<A>(v23);
  outlined consume of GroupSession<A>.State<A>(v23);
  outlined consume of GroupSession<A>.State<A>(v22);
  outlined consume of GroupSession<A>.State<A>(v23);
  MEMORY[0x1F4188790](v3);
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x1F4188790](KeyPath);
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v23 != (void *)1)
  {
    outlined consume of GroupSession<A>.State<A>(v23);
    outlined consume of GroupSession<A>.State<A>((id)1);
LABEL_12:
    MEMORY[0x1F4188790](v5);
    uint64_t v14 = swift_getKeyPath();
    MEMORY[0x1F4188790](v14);
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    uint64_t v15 = swift_release();
    MEMORY[0x1F4188790](v15);
    uint64_t v16 = swift_getKeyPath();
    MEMORY[0x1F4188790](v16);
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.setter();
    return;
  }
  outlined consume of GroupSession<A>.State<A>((id)1);
  outlined consume of GroupSession<A>.State<A>((id)1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(a1 + direct field offset for GroupSession.linkManager)) + 0x198))(v6, v7, v8, v9, v10, v11, v12, v13);
  if (v5) {
    goto LABEL_12;
  }
  uint64_t v5 = TUSimulatedModeEnabled();
  if (v5) {
    goto LABEL_12;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.default);
  os_log_type_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_1A375F000, v19, v20, "Internal state has joined but waiting for PubSubTopic to subscribe", v21, 2u);
    MEMORY[0x1A624F870](v21, -1, -1);
  }
}

void closure #1 in GroupSession.updatePublicState()(uint64_t a1)
{
  GroupSession.internalState.getter();
  uint64_t v2 = v14;
  id v13 = v14;
  GroupSession.state.getter();
  uint64_t v3 = (void *)v12;
  uint64_t v11 = v12;
  char v4 = static GroupSession.State.== infix(_:_:)(&v13, (void **)&v11);
  outlined consume of GroupSession<A>.State<A>(v3);
  outlined consume of GroupSession<A>.State<A>(v2);
  if ((v4 & 1) == 0)
  {
    GroupSession.internalState.getter();
    uint64_t v5 = v14;
    uint64_t v12 = 1;
    id v13 = v14;
    char v6 = static GroupSession.State.== infix(_:_:)(&v13, (void **)&v12);
    outlined consume of GroupSession<A>.State<A>(v5);
    if ((v6 & 1) == 0
      || ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(a1
                                                                     + direct field offset for GroupSession.linkManager))
                               + 0x198))() & 1) != 0
      || (TUSimulatedModeEnabled() & 1) != 0)
    {
      GroupSession.internalState.getter();
      GroupSession.state.setter();
    }
    else
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Log.default);
      oslog = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_1A375F000, oslog, v8, "Internal state has joined but waiting for PubSubTopic to subscribe", v9, 2u);
        MEMORY[0x1A624F870](v9, -1, -1);
      }
    }
  }
}

uint64_t specialized closure #1 in GroupSession.requestEncryptionKey(for:)(uint64_t a1, uint64_t a2)
{
  char v4 = (void **)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  uint64_t v5 = *v4;
  swift_bridgeObjectRetain();
  id v6 = v5;
  swift_retain();
  uint64_t v7 = XPCClient.queue.getter();

  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for specialized closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:);
  *(void *)(v9 + 24) = v8;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_381;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v7, v10);

  _Block_release(v10);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  if (v7) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  char v4 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v5 = *v4;
  id v6 = XPCClient.queue.getter();

  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v3;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:);
  *(void *)(v8 + 24) = v7;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_484;
  uint64_t v9 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);

  _Block_release(v9);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v3) {
    __break(1u);
  }
  return result;
}

void specialized closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)(void **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    if (a2)
    {
      uint64_t v9 = MEMORY[0x1A624E120](a2, MEMORY[0x1E4FBC538]);
      unint64_t v11 = v10;
    }
    else
    {
      unint64_t v11 = 0xE500000000000000;
      uint64_t v9 = 0x3E6C696E3CLL;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v5, v6, "Requesting encryption keys for participantIDs=%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);

    if (!a2) {
      goto LABEL_10;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (!a2)
    {
LABEL_10:
      v12.super.isa = 0;
      goto LABEL_11;
    }
  }
  v12.super.isa = Array._bridgeToObjectiveC()().super.isa;
LABEL_11:
  objc_msgSend(v3, sel_requestEncryptionKeysFor_, v12.super.isa);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance GroupSession<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

Swift::Void __swiftcall GroupSession.invalidateIfWaiting()()
{
}

void GroupSession.sendData(_:to:reliability:completion:)(uint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 *a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v58 = a5;
  uint64_t v54 = type metadata accessor for Participant();
  MEMORY[0x1F4188790](v54);
  uint64_t v53 = (uint64_t)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v66 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v59 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v65 = (char *)&v51 - v17;
  uint64_t v18 = type metadata accessor for OSSignposter();
  uint64_t v60 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v64 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = *a3;
  int v61 = *a4;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.default);
  outlined copy of Data._Representation(a1, a2);
  swift_retain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v56 = v14;
  uint64_t v57 = a6;
  uint64_t v63 = v18;
  unint64_t v55 = a2 >> 62;
  if (v23)
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v68 = v25;
    *(_DWORD *)uint64_t v24 = 134218242;
    uint64_t v26 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v26) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1))
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
          JUMPOUT(0x1A3789EE0);
        }
        uint64_t v26 = (int)v26;
LABEL_10:
        uint64_t v67 = v26;
        uint64_t v51 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined consume of Data._Representation(a1, a2);
        *(_WORD *)(v24 + 12) = 2080;
        unint64_t v52 = a2;
        type metadata accessor for UUID();
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v68);
        a6 = v57;
        a2 = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A375F000, v21, v22, "Request to send data of length %ld over %s ", (uint8_t *)v24, 0x16u);
        uint64_t v32 = v51;
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v32, -1, -1);
        MEMORY[0x1A624F870](v24, -1, -1);

        uint64_t v14 = v56;
        break;
      case 2uLL:
        uint64_t v28 = *(void *)(a1 + 16);
        uint64_t v27 = *(void *)(a1 + 24);
        BOOL v29 = __OFSUB__(v27, v28);
        uint64_t v26 = v27 - v28;
        if (!v29) {
          goto LABEL_10;
        }
        goto LABEL_21;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v26 = BYTE6(a2);
        goto LABEL_10;
    }
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);

    swift_release();
  }
  uint64_t v33 = v64;
  static Signposts.messenger.getter();
  uint64_t v34 = v65;
  static Signposts.messengerSignpostIdentifier(forPayload:)();
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  lazy protocol witness table accessor for type Int and conformance Int();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v35);
  swift_retain_n();
  uint64_t v36 = OSSignposter.logHandle.getter();
  LODWORD(v52) = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v59, v34, v14);
    uint64_t v37 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    uint64_t v68 = v38;
    *(_DWORD *)uint64_t v37 = 134218498;
    uint64_t v39 = 0;
    switch((int)v55)
    {
      case 0:
        uint64_t v39 = BYTE6(a2);
        goto LABEL_18;
      case 1:
        LODWORD(v39) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1)) {
          goto LABEL_22;
        }
        uint64_t v39 = (int)v39;
LABEL_18:
        uint64_t v67 = v39;
        unint64_t v55 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined consume of Data._Representation(a1, a2);
        outlined consume of Data._Representation(a1, a2);
        *(_WORD *)(v37 + 12) = 2080;
        swift_release();
        type metadata accessor for UUID();
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 22) = 2048;
        uint64_t v44 = v53;
        outlined init with copy of Participant(*(void *)(v7 + direct field offset for GroupSession.linkManager)+ OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, v53, (uint64_t (*)(void))type metadata accessor for Participant);
        uint64_t v45 = *(void *)(v44 + *(int *)(v54 + 24));
        outlined destroy of Participant(v44, (uint64_t (*)(void))type metadata accessor for Participant);
        swift_release();
        uint64_t v67 = v45;
        a6 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        uint64_t v46 = v59;
        os_signpost_id_t v47 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_1A375F000, v36, (os_signpost_type_t)v52, v47, "group-session-messenger-send", "payload-size=%{xcode:size-in-bytes}ld topic=%s participantID=%llu", (uint8_t *)v37, 0x20u);
        unint64_t v48 = v55;
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v48, -1, -1);
        MEMORY[0x1A624F870](v37, -1, -1);

        uint64_t v49 = *(void (**)(char *, uint64_t))(v66 + 8);
        uint64_t v50 = v56;
        v49(v65, v56);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v64, v63);
        v49(v46, v50);
        break;
      case 2:
        uint64_t v41 = *(void *)(a1 + 16);
        uint64_t v40 = *(void *)(a1 + 24);
        BOOL v29 = __OFSUB__(v40, v41);
        uint64_t v39 = v40 - v41;
        if (!v29) {
          goto LABEL_18;
        }
        goto LABEL_23;
      case 3:
        goto LABEL_18;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    swift_release_n();
    outlined consume of Data._Representation(a1, a2);
    swift_release_n();

    outlined consume of Data._Representation(a1, a2);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v34, v14);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v33, v63);
  }
  uint64_t v68 = v62;
  LOBYTE(v67) = v61;
  LinkManager.sendData(_:to:reliability:completion:)(a1, a2, &v68, (char *)&v67, v58, a6);
}

uint64_t protocol witness for AnyTransportSession.uploadAttachment(id:attachment:developerMetadata:) in conformance GroupSession<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return GroupSession.uploadAttachment(id:attachment:developerMetadata:)(a1, a2, a3, a4);
}

uint64_t GroupSession.uploadAttachment(id:attachment:developerMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[22] = a4;
  v5[23] = v4;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  uint64_t v6 = type metadata accessor for UUID();
  v5[24] = v6;
  v5[25] = *(void *)(v6 - 8);
  v5[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for String.Encoding();
  v5[27] = v7;
  v5[28] = *(void *)(v7 - 8);
  v5[29] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URLResourceValues();
  v5[30] = v8;
  v5[31] = *(void *)(v8 - 8);
  v5[32] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  v5[33] = v9;
  v5[34] = *(void *)(v9 - 8);
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URL();
  v5[39] = v10;
  v5[40] = *(void *)(v10 - 8);
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSession.uploadAttachment(id:attachment:developerMetadata:), 0, 0);
}

uint64_t GroupSession.uploadAttachment(id:attachment:developerMetadata:)()
{
  unint64_t v73 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = v0[43];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[40];
  uint64_t v5 = v0[21];
  unint64_t v4 = v0[22];
  uint64_t v6 = v0[20];
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  unint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v70(v1, v6, v2);
  outlined copy of Data?(v5, v4);
  outlined copy of Data?(v5, v4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[43];
  uint64_t v12 = v0[39];
  uint64_t v13 = v0[40];
  if (v10)
  {
    int64_t v69 = v8;
    uint64_t v67 = v0 + 16;
    uint64_t v14 = v0[37];
    uint64_t v15 = v0[38];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    v72[0] = v68;
    *(_DWORD *)uint64_t v16 = 136315394;
    v70(v15, v11, v12);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
    outlined init with copy of URL?(v15, v14, &demangling cache variable for type metadata for URL?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12) == 1)
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v18 = 7104878;
    }
    else
    {
      uint64_t v22 = v0[41];
      uint64_t v23 = v0[42];
      uint64_t v25 = v0[39];
      uint64_t v24 = v0[40];
      (*(void (**)(uint64_t, void, uint64_t))(v24 + 32))(v23, v0[37], v25);
      v70(v22, v23, v25);
      uint64_t v18 = String.init<A>(reflecting:)();
      unint64_t v17 = v26;
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    }
    uint64_t v27 = v0[43];
    uint64_t v29 = v0[39];
    uint64_t v28 = v0[40];
    unint64_t v30 = v0[22];
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[38], &demangling cache variable for type metadata for URL?);
    v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    *(_WORD *)(v16 + 12) = 2080;
    if (v30 >> 60 == 15)
    {
      unint64_t v31 = 0xE300000000000000;
      uint64_t v21 = v0 + 18;
      uint64_t v32 = v69;
      uint64_t v33 = 7104878;
    }
    else
    {
      uint64_t v34 = v0[21];
      unint64_t v35 = v0[22];
      v0[13] = v34;
      v0[14] = v35;
      outlined copy of Data._Representation(v34, v35);
      uint64_t v33 = String.init<A>(reflecting:)();
      unint64_t v31 = v36;
      uint64_t v21 = v0 + 18;
      uint64_t v32 = v69;
    }
    uint64_t v38 = v0[21];
    unint64_t v37 = v0[22];
    v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v31, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v38, v37);
    outlined consume of Data?(v38, v37);
    _os_log_impl(&dword_1A375F000, v32, v9, "Request to upload attachment: %s, developerMetadata: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v68, -1, -1);
    MEMORY[0x1A624F870](v16, -1, -1);
  }
  else
  {
    uint64_t v20 = v0[21];
    unint64_t v19 = v0[22];
    (*(void (**)(void, void))(v13 + 8))(v0[43], v0[39]);
    outlined consume of Data?(v20, v19);
    outlined consume of Data?(v20, v19);

    uint64_t v21 = v0 + 18;
  }
  if (objc_msgSend(*(id *)(*(void *)(v0[23] + direct field offset for GroupSession.topicManager)+ OBJC_IVAR____TtC15GroupActivities12TopicManager_featureFlags), sel_sharePlayAttachmentLedgerEnabled, v67))
  {
    static Date.now.getter();
    uint64_t v39 = (void *)swift_task_alloc();
    v0[44] = v39;
    *uint64_t v39 = v0;
    v39[1] = GroupSession.uploadAttachment(id:attachment:developerMetadata:);
    uint64_t v40 = v0[21];
    uint64_t v41 = v0[22];
    uint64_t v43 = v0[19];
    uint64_t v42 = v0[20];
    return LinkManager.uploadAttachment(id:file:developerMetadata:)(v43, v42, v40, v41);
  }
  else
  {
    uint64_t v46 = v0[28];
    uint64_t v45 = v0[29];
    uint64_t v47 = v0[27];
    UUID.uuidString.getter();
    static String.Encoding.utf8.getter();
    uint64_t v48 = String.data(using:allowLossyConversion:)();
    unint64_t v50 = v49;
    swift_bridgeObjectRelease();
    v0[46] = v48;
    v0[47] = v50;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    if (v50 >> 60 == 15)
    {
      (*(void (**)(void, void, void))(v0[25] + 16))(v0[26], v0[19], v0[24]);
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      BOOL v53 = os_log_type_enabled(v51, v52);
      uint64_t v55 = v0[25];
      uint64_t v54 = v0[26];
      uint64_t v56 = v0[24];
      if (v53)
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        v72[0] = v71;
        *(_DWORD *)uint64_t v57 = 136315138;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
        *uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
        _os_log_impl(&dword_1A375F000, v51, v52, "Failed to convert attachmentID %s to Data", v57, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v71, -1, -1);
        MEMORY[0x1A624F870](v57, -1, -1);
      }
      else
      {
        (*(void (**)(void, void))(v55 + 8))(v0[26], v0[24]);
      }

      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      swift_allocError();
      unsigned char *v65 = 2;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v66 = (uint64_t (*)(void))v0[1];
      return v66();
    }
    else
    {
      uint64_t v60 = v0[23];
      uint64_t v61 = v0[20];
      uint64_t v62 = (void *)swift_task_alloc();
      v0[48] = v62;
      v62[2] = v60;
      v62[3] = v61;
      v62[4] = v48;
      v62[5] = v50;
      uint64_t v63 = (void *)swift_task_alloc();
      v0[49] = v63;
      *uint64_t v63 = v0;
      v63[1] = GroupSession.uploadAttachment(id:attachment:developerMetadata:);
      uint64_t v64 = MEMORY[0x1E4FBB390];
      return MEMORY[0x1F4188160]((char *)v0 + 409, 0, 0, 0xD000000000000032, 0x80000001A38FFDC0, partial apply for closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:), v62, v64);
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = GroupSession.uploadAttachment(id:attachment:developerMetadata:);
  }
  else {
    uint64_t v2 = GroupSession.uploadAttachment(id:attachment:developerMetadata:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t inited;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  double *v21;
  double *v22;
  id v23;
  void *v24;
  void *v25;
  unsigned char *v26;
  unsigned char *v27;
  uint64_t (*v28)(void);
  uint64_t v30;

  uint64_t v2 = v0[35];
  uint64_t v1 = v0[36];
  uint64_t v3 = v0[33];
  unint64_t v4 = v0[34];
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  uint64_t v6 = v5;
  Date.timeIntervalSince1970.getter();
  uint64_t v8 = v7;
  os_log_type_t v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v9(v2, v3);
  v9(v1, v3);
  BOOL v10 = v0[45];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A38F5A70;
  uint64_t v12 = (void *)*MEMORY[0x1E4F1C5F8];
  *(void *)(inited + 32) = *MEMORY[0x1E4F1C5F8];
  uint64_t v13 = v12;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  if (v10)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = v0[31];
    uint64_t v14 = v0[32];
    uint64_t v16 = v0[30];
    swift_bridgeObjectRelease();
    unint64_t v17 = URLResourceValues.fileSize.getter();
    unint64_t v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    if ((v19 & 1) == 0)
    {
      uint64_t v20 = v0[23];
      uint64_t v21 = (double *)(v20 + direct field offset for GroupSession.attachmentUploadBytes);
      swift_beginAccess();
      *uint64_t v21 = *v21 + (double)v17;
      uint64_t v22 = (double *)(v20 + direct field offset for GroupSession.attachmentUploadTime);
      swift_beginAccess();
      *uint64_t v22 = v6 - v8 + *v22;
      uint64_t v23 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
      uint64_t v24 = (void *)AttachmentDataReport.init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)();
      GroupSession.logAttachmentEvent(report:reportEvent:)(v24, 0xD000000000000017, 0x80000001A38FFE00);
    }
    if (v0[45])
    {
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      uint64_t v25 = (void *)swift_allocError();
      *unint64_t v26 = 10;
      GroupSession.invalidate(reason:)(v25);

      swift_allocError();
      *uint64_t v27 = 10;
      swift_willThrow();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = (uint64_t (*)(void))v0[1];
  return v28();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 400) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = GroupSession.uploadAttachment(id:attachment:developerMetadata:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = GroupSession.uploadAttachment(id:attachment:developerMetadata:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of Data?(v0[46], v0[47]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t inited;
  void *v4;
  id v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  double *v15;
  double *v16;
  id v17;
  void *v18;
  void *v19;
  unsigned char *v20;
  unsigned char *v21;
  uint64_t v22;

  uint64_t v1 = *(void **)(v0 + 360);
  (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 288), *(void *)(v0 + 264));
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0 && *(unsigned char *)(v0 + 408) == 1)
  {

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A38F5A70;
    unint64_t v4 = (void *)*MEMORY[0x1E4F1C5F8];
    *(void *)(inited + 32) = *MEMORY[0x1E4F1C5F8];
    uint64_t v5 = v4;
    specialized Set.init(_nonEmptyArrayLiteral:)(inited);
    swift_setDeallocating();
    type metadata accessor for NSURLResourceKey(0);
    swift_arrayDestroy();
    URL.resourceValues(forKeys:)();
    os_log_type_t v9 = *(void *)(v0 + 248);
    uint64_t v8 = *(void *)(v0 + 256);
    BOOL v10 = *(void *)(v0 + 240);
    swift_bridgeObjectRelease();
    uint64_t v11 = URLResourceValues.fileSize.getter();
    uint64_t v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    if ((v13 & 1) == 0)
    {
      uint64_t v14 = *(void *)(v0 + 184);
      uint64_t v15 = (double *)(v14 + direct field offset for GroupSession.attachmentUploadBytes);
      swift_beginAccess();
      *uint64_t v15 = *v15 + (double)v11;
      uint64_t v16 = (double *)(v14 + direct field offset for GroupSession.attachmentUploadTime);
      swift_beginAccess();
      *uint64_t v16 = *v16 + 0.0;
      unint64_t v17 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
      uint64_t v18 = (void *)AttachmentDataReport.init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)();
      GroupSession.logAttachmentEvent(report:reportEvent:)(v18, 0xD000000000000017, 0x80000001A38FFE00);
    }
    if (*(void *)(v0 + 360))
    {
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      unint64_t v19 = (void *)swift_allocError();
      *uint64_t v20 = 10;
      GroupSession.invalidate(reason:)(v19);

      swift_allocError();
      *uint64_t v21 = 10;
      swift_willThrow();
    }
  }
  else
  {
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of Data?(v0[46], v0[47]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return GroupSession.downloadAttachment(_:)(a1, a2);
}

uint64_t GroupSession.downloadAttachment(_:)(uint64_t a1, uint64_t a2)
{
  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URLResourceValues();
  v3[18] = v4;
  v3[19] = *(void *)(v4 - 8);
  v3[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v3[21] = v5;
  v3[22] = *(void *)(v5 - 8);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v3[25] = v6;
  v3[26] = *(void *)(v6 - 8);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fileURL: URL?, sentTime: Double));
  v3[30] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSession.downloadAttachment(_:), 0, 0);
}

uint64_t GroupSession.downloadAttachment(_:)()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(int *)(*(void *)(v0 + 232) + 48);
  *(_DWORD *)(v0 + 272) = v2;
  URL.init(string:)();
  *(void *)(v1 + v2) = 0;
  static Date.now.getter();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v3;
  void *v3 = v0;
  v3[1] = GroupSession.downloadAttachment(_:);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 120);
  return LinkManager.fetchAttachment(attachmentID:)(v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  int v14;
  id v15;
  void *v16;
  void *v17;
  unsigned char *v18;
  unsigned char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned char *v23;
  void *v24;
  uint64_t inited;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  id *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  double *v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(int *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 176);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v3, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v3, v4, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v3, 0, 1, v5);
  *(void *)(v3 + v2) = v1;
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  Date.timeIntervalSince1970.getter();
  uint64_t v8 = v7;
  Date.timeIntervalSince1970.getter();
  BOOL v10 = v8 - v9;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v5))
  {
    uint64_t v11 = *(void *)(v0 + 224);
    uint64_t v12 = *(void *)(v0 + 200);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 208) + 8);
    v13(*(void *)(v0 + 216), v12);
    v13(v11, v12);
LABEL_3:
    uint64_t v14 = 0;
    goto LABEL_4;
  }
  uint64_t v24 = *(void **)(v0 + 256);
  (*(void (**)(void, void, void))(*(void *)(v0 + 176) + 16))(*(void *)(v0 + 184), *(void *)(v0 + 240), *(void *)(v0 + 168));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A38F5A70;
  unint64_t v26 = (void *)*MEMORY[0x1E4F1C5F8];
  *(void *)(inited + 32) = *MEMORY[0x1E4F1C5F8];
  uint64_t v27 = v26;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  uint64_t v28 = v24;
  uint64_t v29 = *(void *)(v0 + 224);
  unint64_t v31 = *(void *)(v0 + 200);
  unint64_t v30 = *(void *)(v0 + 208);
  uint64_t v32 = *(void *)(v0 + 176);
  uint64_t v33 = *(void *)(v0 + 184);
  uint64_t v34 = *(void *)(v0 + 168);
  if (!v28)
  {
    uint64_t v56 = *(void *)(v0 + 216);
    uint64_t v57 = *(void *)(v0 + 224);
    uint64_t v46 = *(void *)(v0 + 152);
    uint64_t v47 = *(void *)(v0 + 160);
    uint64_t v55 = *(void *)(v0 + 144);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
    swift_bridgeObjectRelease();
    uint64_t v48 = URLResourceValues.fileSize.getter();
    unint64_t v50 = v49;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v55);
    uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v51(v56, v31);
    v51(v57, v31);
    if ((v50 & 1) == 0)
    {
      os_log_type_t v52 = *(void *)(v0 + 128);
      BOOL v53 = (double *)(v52 + direct field offset for GroupSession.attachmentDownloadBytes);
      swift_beginAccess();
      *BOOL v53 = *v53 + (double)v48;
      uint64_t v54 = (double *)(v52 + direct field offset for GroupSession.attachmentDownloadTime);
      swift_beginAccess();
      uint64_t v14 = 0;
      char *v54 = v10 + *v54;
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unint64_t v35 = *(void *)(v0 + 216);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
  unint64_t v36 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v36(v35, v31);
  v36(v29, v31);
  unint64_t v37 = (id *)(v0 + 104);
  *(void *)(v0 + 104) = v28;
  uint64_t v38 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0 || *(unsigned char *)(v0 + 276) != 1)
  {

    goto LABEL_15;
  }

  uint64_t v14 = 1;
LABEL_4:
  uint64_t v15 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
  uint64_t v16 = (void *)AttachmentDataReport.init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)();
  GroupSession.logAttachmentEvent(report:reportEvent:)(v16, 0xD000000000000019, 0x80000001A38FFE20);
  if (v14)
  {
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    unint64_t v17 = (void *)swift_allocError();
    NSObject *v18 = 10;
    GroupSession.invalidate(reason:)(v17);

    swift_allocError();
    *unint64_t v19 = 10;
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 168);
    uint64_t v21 = *(void *)(v0 + 176);
    uint64_t v22 = *(void *)(v0 + 136);
    outlined init with copy of URL?(*(void *)(v0 + 240), v22, &demangling cache variable for type metadata for URL?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v20) != 1)
    {
      uint64_t v39 = *(void *)(v0 + 240);
      uint64_t v41 = *(void *)(v0 + 168);
      uint64_t v40 = *(void *)(v0 + 176);
      uint64_t v42 = *(void *)(v0 + 136);
      uint64_t v43 = *(void *)(v0 + 112);

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v43, v42, v41);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v39, &demangling cache variable for type metadata for (fileURL: URL?, sentTime: Double));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_16;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 136), &demangling cache variable for type metadata for URL?);
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    swift_allocError();
    *uint64_t v23 = 11;
  }
  swift_willThrow();

LABEL_15:
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 240), &demangling cache variable for type metadata for (fileURL: URL?, sentTime: Double));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
LABEL_16:
  return v44();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  (*(void (**)(void, void))(*(void *)(v0 + 208) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 200));
  uint64_t v1 = *(void **)(v0 + 256);
  *(void *)(v0 + 104) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast() && *(unsigned char *)(v0 + 276) == 1)
  {

    uint64_t v3 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
    uint64_t v4 = (void *)AttachmentDataReport.init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)();
    GroupSession.logAttachmentEvent(report:reportEvent:)(v4, 0xD000000000000019, 0x80000001A38FFE20);
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    uint64_t v5 = (void *)swift_allocError();
    *uint64_t v6 = 10;
    GroupSession.invalidate(reason:)(v5);

    swift_allocError();
    *uint64_t v7 = 10;
    swift_willThrow();
  }
  else
  {
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 240), &demangling cache variable for type metadata for (fileURL: URL?, sentTime: Double));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t GroupSession.downloadAttachment(_:)(double a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 256) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = GroupSession.downloadAttachment(_:);
  }
  else
  {
    *(double *)(v4 + 264) = a1;
    uint64_t v5 = GroupSession.downloadAttachment(_:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t protocol witness for AnyTransportSession.fetchMetadata(_:) in conformance GroupSession<A>(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[2] = a1;
  v4[3] = v1;
  v4[1] = protocol witness for AnyTransportSession.fetchMetadata(_:) in conformance GroupSession<A>;
  return MEMORY[0x1F4188298](GroupSession.fetchMetadata(_:), 0, 0);
}

uint64_t protocol witness for AnyTransportSession.fetchMetadata(_:) in conformance GroupSession<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t GroupSession.fetchMetadata(_:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](GroupSession.fetchMetadata(_:), 0, 0);
}

uint64_t GroupSession.fetchMetadata(_:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = GroupSession.fetchMetadata(_:);
  uint64_t v2 = *(void *)(v0 + 16);
  return LinkManager.fetchAttachmentMetadata(attachmentID:)(v2);
}

uint64_t GroupSession.fetchMetadata(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return GroupSession.removeAttachment(id:)(a1);
}

uint64_t protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t GroupSession.removeAttachment(id:)(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSession.removeAttachment(id:), 0, 0);
}

uint64_t GroupSession.removeAttachment(id:)()
{
  uint64_t v20 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v11 = v0[5];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = v18;
    *(_DWORD *)uint64_t v12 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_1A375F000, v6, v7, "Request to remove attachment: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v18, -1, -1);
    MEMORY[0x1A624F870](v12, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[7], v0[5]);
  }

  uint64_t v15 = (void *)swift_task_alloc();
  v0[8] = v15;
  *uint64_t v15 = v0;
  v15[1] = GroupSession.removeAttachment(id:);
  uint64_t v16 = v0[3];
  return LinkManager.removeAttachment(id:)(v16);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t GroupSession<>.init(tuConversationActivitySession:groupUUID:initiatorHandle:localParticipantIdentifier:localParticipantHandle:unreliableMessengerConfig:topicManager:audioSessionAssertionManager:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = specialized GroupSession<>.init(tuConversationActivitySession:groupUUID:initiatorHandle:localParticipantIdentifier:localParticipantHandle:unreliableMessengerConfig:topicManager:audioSessionAssertionManager:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  return v11;
}

uint64_t specialized GroupSession.Timestamps.init(activitySession:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  os_log_type_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  unint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v29 - v15;
  unint64_t v17 = (SEL *)&property descriptor for LinkManager.hasConnectedOnce;
  id v18 = objc_msgSend(a1, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v19 = objc_msgSend(a1, sel_localCreationTimestamp);
  if (!v19)
  {
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v22(v9, 1, 1, v10);
    goto LABEL_5;
  }
  uint64_t v20 = v19;
  uint64_t v30 = a2;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v21(v9, v14, v10);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v22(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    a2 = v30;
    unint64_t v17 = (SEL *)&property descriptor for LinkManager.hasConnectedOnce;
LABEL_5:
    id v23 = [a1 v17[228]];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for Date?);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    goto LABEL_7;
  }
  v21(v16, v9, v10);
  a2 = v30;
LABEL_7:
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.Timestamps);
  v21((char *)(a2 + *(int *)(v24 + 36)), v16, v10);
  id v25 = objc_msgSend(a1, sel_permittedJoinTimestamp);
  if (v25)
  {
    unint64_t v26 = v25;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = 1;
  }

  v22(v7, v27, 1, v10);
  return outlined init with take of Date?((uint64_t)v7, a2 + *(int *)(v24 + 40), &demangling cache variable for type metadata for Date?);
}

uint64_t GroupSession.Timestamps.init(activitySession:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v31[1] = a2;
  v31[2] = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v31 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  id v18 = (char *)v31 - v17;
  id v19 = objc_msgSend(a1, sel_timestamp);
  uint64_t v32 = a4;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v20 = objc_msgSend(a1, sel_localCreationTimestamp);
  if (!v20)
  {
    id v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v23(v11, 1, 1, v12);
LABEL_5:
    id v24 = objc_msgSend(a1, sel_timestamp);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for Date?);
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    goto LABEL_7;
  }
  uint64_t v21 = v20;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v22(v11, v16, v12);
  id v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v23(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    goto LABEL_5;
  }
  v22(v18, v11, v12);
LABEL_7:
  uint64_t v25 = type metadata accessor for GroupSession.Timestamps();
  uint64_t v26 = v32;
  v22((char *)(v32 + *(int *)(v25 + 36)), v18, v12);
  id v27 = objc_msgSend(a1, sel_permittedJoinTimestamp);
  if (v27)
  {
    uint64_t v28 = v27;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v29 = 1;
  }

  v23(v9, v29, 1, v12);
  return outlined init with take of Date?((uint64_t)v9, v26 + *(int *)(v25 + 40), &demangling cache variable for type metadata for Date?);
}

uint64_t GroupSession.__allocating_init(activitySession:publishQueue:)(uint64_t *a1, void *a2)
{
  uint64_t v2 = specialized GroupSession.__allocating_init(activitySession:publishQueue:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t GroupSession.Timestamps.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  v5(a2, a1, v4);
  uint64_t v6 = type metadata accessor for GroupSession.Timestamps();
  uint64_t v7 = a1 + *(int *)(v6 + 36);
  uint64_t v8 = type metadata accessor for GroupSession.Timestamps();
  v5(a2 + *(int *)(v8 + 36), v7, v4);
  return outlined init with take of Date?(a1 + *(int *)(v6 + 40), a2 + *(int *)(v8 + 40), &demangling cache variable for type metadata for Date?);
}

uint64_t GroupSession.sendResource(atURL:to:metadata:completion:)(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v68 = a5;
  uint64_t v69 = a3;
  unint64_t v70 = a4;
  dispatch_queue_t v67 = *(dispatch_queue_t *)v7;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v62 = (uint64_t)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v57 - v14;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v61 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  int64_t v72 = (char *)&v57 - v21;
  uint64_t v65 = v22;
  MEMORY[0x1F4188790](v20);
  id v24 = (char *)&v57 - v23;
  uint64_t v66 = *a2;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Log.default);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v26(v24, a1, v16);
  swift_retain_n();
  id v27 = Logger.logObject.getter();
  int v63 = static os_log_type_t.info.getter();
  BOOL v28 = os_log_type_enabled(v27, (os_log_type_t)v63);
  uint64_t v71 = a6;
  uint64_t v64 = v26;
  if (v28)
  {
    os_log_t v59 = v27;
    uint64_t v60 = a1;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    aBlock[0] = v58;
    *(_DWORD *)uint64_t v29 = 136315394;
    v26(v15, (uint64_t)v24, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
    uint64_t v30 = v62;
    outlined init with copy of URL?((uint64_t)v15, v62, &demangling cache variable for type metadata for URL?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v30, 1, v16) == 1)
    {
      unint64_t v31 = 0xE300000000000000;
      uint64_t v32 = 7104878;
    }
    else
    {
      unint64_t v35 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v72, v30, v16);
      v26(v61, (uint64_t)v35, v16);
      uint64_t v32 = String.init<A>(reflecting:)();
      unint64_t v31 = v36;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v35, v16);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v15, &demangling cache variable for type metadata for URL?);
    v74[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v31, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v24, v16);
    *(_WORD *)(v29 + 12) = 2080;
    v74[0] = v7;
    uint64_t v33 = v16;
    dispatch_queue_t v34 = v67;
    uint64_t v37 = >> prefix<A>(_:)((uint64_t)v74, (uint64_t)v67);
    v74[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v39 = v59;
    _os_log_impl(&dword_1A375F000, v59, (os_log_type_t)v63, "Request to send resource at URL %s over %s ", (uint8_t *)v29, 0x16u);
    uint64_t v40 = v58;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v40, -1, -1);
    MEMORY[0x1A624F870](v29, -1, -1);

    a1 = v60;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v24, v16);

    swift_release_n();
    uint64_t v33 = v16;
    dispatch_queue_t v34 = v67;
  }
  uint64_t v41 = (id *)(v7 + *(void *)(*(void *)v7 + 280));
  swift_beginAccess();
  id v42 = *v41;
  dispatch_queue_t v67 = (dispatch_queue_t)XPCClient.queue.getter();

  uint64_t v43 = v72;
  v64(v72, a1, v33);
  unint64_t v44 = (*(unsigned __int8 *)(v17 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v45 = (v65 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v47 = (char *)swift_allocObject();
  *(v47 + 2) = v34[10];
  *(v47 + 3) = v34[11];
  *((void *)v47 + 4) = v7;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v47[v44], v43, v33);
  *(void *)&v47[v45] = v66;
  uint64_t v48 = (uint64_t *)&v47[v46];
  uint64_t v50 = v69;
  unint64_t v49 = v70;
  *uint64_t v48 = v69;
  v48[1] = v49;
  uint64_t v51 = &v47[(v46 + 23) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v52 = v71;
  *(void *)uint64_t v51 = v68;
  *((void *)v51 + 1) = v52;
  uint64_t v53 = swift_allocObject();
  *(void *)(v53 + 16) = partial apply for closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:);
  *(void *)(v53 + 24) = v47;
  aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v53;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_150;
  uint64_t v54 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Data._Representation(v50, v49);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_queue_t v55 = v67;
  dispatch_sync(v67, v54);

  _Block_release(v54);
  LOBYTE(v55) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v55) {
    __break(1u);
  }
  return result;
}

void closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  uint64_t v63 = type metadata accessor for Participant();
  uint64_t v56 = *(void *)(v63 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v63);
  uint64_t v55 = (uint64_t)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v54 = (uint64_t)&v45 - v16;
  uint64_t v17 = *a1;
  id v18 = objc_allocWithZone(MEMORY[0x1E4FADC60]);
  URL._bridgeToObjectiveC()(v19);
  uint64_t v21 = v20;
  id v22 = objc_msgSend(v18, sel_initWithURL_withExtensionType_, v20, 0);

  if (!a3)
  {
    uint64_t v39 = GroupSession.activeParticipants.getter();
    uint64_t v40 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:), a4, v39);
    swift_bridgeObjectRelease();
    specialized Set.init<A>(_:)(v40);
    swift_bridgeObjectRelease();
    v41.super.isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v42.super.isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v61 = a7;
    uint64_t v62 = a8;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v58 = 1107296256;
    uint64_t v43 = &block_descriptor_342;
LABEL_16:
    os_log_t v59 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
    uint64_t v60 = v43;
    unint64_t v44 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v17, sel_sendResourceAtURL_to_metadata_completion_, v22, v41.super.isa, v42.super.isa, v44);

    _Block_release(v44);
    return;
  }
  int64_t v23 = *(void *)(a3 + 16);
  uint64_t v24 = MEMORY[0x1E4FBC860];
  if (!v23)
  {
LABEL_15:
    specialized Set.init<A>(_:)(v24);
    swift_bridgeObjectRelease();
    v41.super.isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v42.super.isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v61 = a7;
    uint64_t v62 = a8;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v58 = 1107296256;
    uint64_t v43 = &block_descriptor_339;
    goto LABEL_16;
  }
  id v46 = v22;
  uint64_t v47 = a8;
  uint64_t v48 = v8;
  uint64_t aBlock = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
  uint64_t v25 = specialized Set.startIndex.getter(a3);
  uint64_t v27 = v26;
  char v29 = v28 & 1;
  uint64_t v52 = v17;
  uint64_t v53 = a3 + 56;
  uint64_t v51 = a7;
  while ((v25 & 0x8000000000000000) == 0 && v25 < 1 << *(unsigned char *)(a3 + 32))
  {
    if (((*(void *)(v53 + (((unint64_t)v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
      goto LABEL_18;
    }
    if (*(_DWORD *)(a3 + 36) != v27) {
      goto LABEL_19;
    }
    uint64_t v30 = v54;
    outlined init with copy of Participant(*(void *)(a3 + 48) + *(void *)(v56 + 72) * v25, v54, (uint64_t (*)(void))type metadata accessor for Participant);
    uint64_t v31 = v30;
    uint64_t v32 = v55;
    outlined init with take of Participant(v31, v55, (uint64_t (*)(void))type metadata accessor for Participant);
    uint64_t v33 = *(void *)(v32 + *(int *)(v63 + 24));
    outlined destroy of Participant(v32, (uint64_t (*)(void))type metadata accessor for Participant);
    uint64_t v24 = aBlock;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1);
      uint64_t v24 = aBlock;
    }
    unint64_t v35 = *(void *)(v24 + 16);
    unint64_t v34 = *(void *)(v24 + 24);
    if (v35 >= v34 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
      uint64_t v24 = aBlock;
    }
    *(void *)(v24 + 16) = v35 + 1;
    *(void *)(v24 + 8 * v35 + 32) = v33;
    uint64_t v36 = specialized _NativeSet.index(after:)(v25, v27, v29 & 1, a3);
    uint64_t v25 = v36;
    uint64_t v27 = v37;
    char v29 = v38 & 1;
    --v23;
    a7 = v51;
    uint64_t v17 = v52;
    if (!v23)
    {
      outlined consume of Set<Participant>.Index._Variant(v36, v37, v38 & 1);
      a8 = v47;
      id v22 = v46;
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t closure #1 in closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Participant();
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + *(int *)(v7 + 32));
  outlined init with copy of Participant(*(void *)(a2 + direct field offset for GroupSession.linkManager)+ OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v11 = *(void *)&v9[*(int *)(v7 + 32)];
  uint64_t result = outlined destroy of Participant((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Participant);
  if (v10 == v11) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v10;
  }
  *(void *)a3 = v13;
  *(unsigned char *)(a3 + 8) = v10 == v11;
  return result;
}

uint64_t closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v15 = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  default argument 1 of GroupSession.sendResource(atURL:to:metadata:completion:)(&v17);
  uint64_t v16 = v17;
  GroupSession.sendResource(atURL:to:metadata:completion:)(a3, &v16, a4, v15, (uint64_t)partial apply for closure #1 in closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:), v12);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

Swift::Void __swiftcall GroupSession.logAttachmentSessionReport()()
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + direct field offset for GroupSession.linkManager))
                    + 0x130))();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  id v1 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
  id v2 = (void *)AttachmentDataReport.init(totalAttachments:totalDownloadBytes:totalUploadBytes:downloadSpeed:uploadSpeed:)();
  GroupSession.logAttachmentEvent(report:reportEvent:)(v2, 0xD000000000000023, 0x80000001A38FFE40);
}

void specialized closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(uint64_t a1)
{
  id v1 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(uint64_t a1)
{
  id v1 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(void **a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v15 = a2;
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v16 = v12;
    *(_DWORD *)unint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, a3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v9, v10, "GroupSession: Logging attachment event: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v12, -1, -1);
    uint64_t v13 = v11;
    a2 = v15;
    MEMORY[0x1A624F870](v13, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = (void *)MEMORY[0x1A624DFA0](a2, a3);
  objc_msgSend(v7, sel_logAttachmentEventWithReport_reportEvent_, a4, v14);
}

uint64_t specialized GroupSession.cleanUpPlaybackSyncer()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[1] = *(void *)(v0 + *(void *)(*(void *)v0 + 288));
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = partial apply for specialized closure #1 in GroupSession.cleanUpPlaybackSyncer();
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_394;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v13 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v7, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v12);
  swift_release();
  return swift_release();
}

Swift::Void __swiftcall GroupSession.cleanUpPlaybackSyncer()()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[1] = *(void *)((char *)v0 + v1[36]);
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  os_log_type_t v10 = (void *)swift_allocObject();
  _OWORD v10[2] = v1[10];
  v10[3] = v1[11];
  v10[4] = v9;
  aBlock[4] = partial apply for closure #1 in GroupSession.cleanUpPlaybackSyncer();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_157;
  unint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v8, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v13);
  swift_release();
  swift_release();
}

void closure #1 in GroupSession.invalidateIfWaiting()()
{
  GroupSession.internalState.getter();
  uint64_t v0 = v6;
  uint64_t v4 = 0;
  id v5 = v6;
  char v1 = static GroupSession.State.== infix(_:_:)(&v5, &v4);
  outlined consume of GroupSession<A>.State<A>(v0);
  if (v1)
  {
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    uint64_t v2 = (void *)swift_allocError();
    unsigned char *v3 = 9;
    GroupSession.invalidate(reason:)(v2);
  }
}

uint64_t GroupSession.registerPlaybackSyncerLink(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  MEMORY[0x1F4188790](v8);
  os_log_type_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.SubscribeOn<NSNotificationCenter.Publisher, OS_dispatch_queue>);
  uint64_t v39 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  char v38 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_retain();
  GroupSession.playbackSyncerLink.setter(v17);
  uint64_t v40 = v11;
  uint64_t v41 = a1;
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v18 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else {
    unint64_t v18 = MEMORY[0x1E4FBC870];
  }
  uint64_t v19 = (void *)((char *)v2 + *(void *)(*v2 + 304));
  swift_beginAccess();
  *uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  GroupSession.$activeParticipants.getter();
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = (void *)swift_allocObject();
  uint64_t v35 = *(void *)(v4 + 80);
  void v21[2] = v35;
  uint64_t v34 = *(void *)(v4 + 88);
  v21[3] = v34;
  v21[4] = v20;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v22 = objc_msgSend(self, sel_defaultCenter);
  NSNotificationCenter.publisher(for:object:)();

  id v42 = *(id *)((char *)v2 + *(void *)(*v2 + 288));
  id v23 = v42;
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher, MEMORY[0x1E4F27FC8]);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v25 = v23;
  uint64_t v27 = v37;
  uint64_t v26 = v38;
  Publisher.subscribe<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v27);
  uint64_t v28 = swift_allocObject();
  swift_weakInit();
  char v29 = (void *)swift_allocObject();
  uint64_t v30 = v34;
  v29[2] = v35;
  v29[3] = v30;
  v29[4] = v28;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.SubscribeOn<NSNotificationCenter.Publisher, OS_dispatch_queue> and conformance Publishers.SubscribeOn<A, B>, &demangling cache variable for type metadata for Publishers.SubscribeOn<NSNotificationCenter.Publisher, OS_dispatch_queue>);
  uint64_t v31 = v40;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v26, v31);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  uint64_t v32 = swift_release();
  return (*(uint64_t (**)(uint64_t))(*(void *)v41 + 400))(v32);
}

uint64_t closure #1 in GroupSession.registerPlaybackSyncerLink(_:)(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for Participant();
  uint64_t v45 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v41 - v6;
  uint64_t v8 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    int64_t v10 = result;
    if (one-time initialization token for playback == -1) {
      goto LABEL_3;
    }
    while (1)
    {
      swift_once();
LABEL_3:
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.playback);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      int v14 = v13;
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        v46[0] = v44;
        *(_DWORD *)uint64_t v15 = 136315394;
        uint64_t v41 = v15 + 4;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type Participant and conformance Participant, (void (*)(uint64_t))type metadata accessor for Participant);
        swift_bridgeObjectRetain();
        uint64_t v16 = Set.description.getter();
        os_log_t v43 = v12;
        uint64_t v17 = v16;
        unint64_t v19 = v18;
        swift_bridgeObjectRelease();
        uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v46);
        int v42 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2080;
        GroupSession.activeParticipants.getter();
        swift_release();
        uint64_t v20 = Set.description.getter();
        unint64_t v22 = v21;
        swift_bridgeObjectRelease();
        uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        os_log_t v23 = v43;
        _os_log_impl(&dword_1A375F000, v43, (os_log_type_t)v42, "Active participants changed to latest participants:%s from previous participants:%s", (uint8_t *)v15, 0x16u);
        uint64_t v24 = v44;
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v24, -1, -1);
        MEMORY[0x1A624F870](v15, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
      uint64_t v47 = GroupSession.activeParticipants.getter();
      specialized Set._subtract<A>(_:)(v8);
      id v25 = v10;
      int64_t v10 = 0;
      uint64_t v8 = v47;
      uint64_t v26 = 1 << *(unsigned char *)(v47 + 32);
      uint64_t v27 = -1;
      if (v26 < 64) {
        uint64_t v27 = ~(-1 << v26);
      }
      uint64_t v28 = *(void *)(v47 + 56);
      os_log_t v43 = v25;
      uint64_t v44 = v47 + 56;
      unint64_t v29 = v27 & v28;
      uint64_t v30 = (uint64_t *)((char *)v25 + direct field offset for GroupSession.playbackSyncerLink);
      int64_t v31 = (unint64_t)(v26 + 63) >> 6;
      if ((v27 & v28) != 0)
      {
        do
        {
          while (1)
          {
            unint64_t v40 = __clz(__rbit64(v29));
            v29 &= v29 - 1;
            unint64_t v35 = v40 | (v10 << 6);
LABEL_25:
            outlined init with copy of Participant(*(void *)(v8 + 48) + *(void *)(v45 + 72) * v35, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Participant);
            outlined init with take of Participant((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Participant);
            swift_beginAccess();
            uint64_t v36 = *v30;
            if (*v30) {
              break;
            }
            outlined destroy of Participant((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Participant);
            swift_endAccess();
            if (!v29) {
              goto LABEL_11;
            }
          }
          swift_endAccess();
          uint64_t v37 = *(uint64_t (**)(uint64_t))(*(void *)v36 + 248);
          uint64_t v38 = swift_retain();
          uint64_t v39 = (void (*)(char *))v37(v38);
          swift_release();
          if (v39)
          {
            v39(v5);
            outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v39);
          }
          outlined destroy of Participant((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Participant);
        }
        while (v29);
      }
LABEL_11:
      int64_t v32 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
      }
      else
      {
        if (v32 >= v31) {
          goto LABEL_30;
        }
        unint64_t v33 = *(void *)(v44 + 8 * v32);
        ++v10;
        if (v33) {
          goto LABEL_24;
        }
        int64_t v10 = v32 + 1;
        if (v32 + 1 >= v31) {
          goto LABEL_30;
        }
        unint64_t v33 = *(void *)(v44 + 8 * v10);
        if (v33) {
          goto LABEL_24;
        }
        int64_t v10 = v32 + 2;
        if (v32 + 2 >= v31) {
          goto LABEL_30;
        }
        unint64_t v33 = *(void *)(v44 + 8 * v10);
        if (v33) {
          goto LABEL_24;
        }
        int64_t v34 = v32 + 3;
        if (v34 >= v31)
        {
LABEL_30:
          swift_release();
          return swift_release();
        }
        unint64_t v33 = *(void *)(v44 + 8 * v34);
        if (v33)
        {
          int64_t v10 = v34;
LABEL_24:
          unint64_t v29 = (v33 - 1) & v33;
          unint64_t v35 = __clz(__rbit64(v33)) + (v10 << 6);
          goto LABEL_25;
        }
        while (1)
        {
          int64_t v10 = v34 + 1;
          if (__OFADD__(v34, 1)) {
            break;
          }
          if (v10 >= v31) {
            goto LABEL_30;
          }
          unint64_t v33 = *(void *)(v44 + 8 * v10);
          ++v34;
          if (v33) {
            goto LABEL_24;
          }
        }
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #2 in GroupSession.registerPlaybackSyncerLink(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GroupSessionEvent();
  uint64_t v79 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionEvent?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  int64_t v10 = (char *)&v66 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  os_log_type_t v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Notification();
  uint64_t v80 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  os_log_type_t v78 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unint64_t v18 = (char *)&v66 - v17;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v77 = a1;
    uint64_t v20 = Notification.userInfo.getter();
    if (!v20) {
      return swift_release();
    }
    uint64_t v76 = v13;
    uint64_t v21 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v20);
    swift_bridgeObjectRelease();
    if (!v21) {
      return swift_release();
    }
    if (*(void *)(v21 + 16))
    {
      uint64_t v75 = v10;
      id v22 = (id)*MEMORY[0x1E4F15FB8];
      uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
      if (v24)
      {
        outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v23, (uint64_t)&v82);
      }
      else
      {
        long long v82 = 0u;
        long long v83 = 0u;
      }
      uint64_t v25 = v80;

      if (*((void *)&v83 + 1))
      {
        type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand(0);
        if (swift_dynamicCast())
        {
          uint64_t v74 = v81;
          if (one-time initialization token for playback != -1) {
            swift_once();
          }
          uint64_t v26 = type metadata accessor for Logger();
          uint64_t v27 = __swift_project_value_buffer(v26, (uint64_t)static Logger.playback);
          unint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
          uint64_t v71 = v25 + 16;
          v70(v18, v77, v14);
          uint64_t v28 = v25;
          uint64_t v72 = v27;
          unint64_t v29 = Logger.logObject.getter();
          int v69 = static os_log_type_t.default.getter();
          BOOL v30 = os_log_type_enabled(v29, (os_log_type_t)v69);
          uint64_t v31 = (uint64_t)v75;
          if (v30)
          {
            os_log_t v68 = v29;
            int64_t v32 = (uint8_t *)swift_slowAlloc();
            uint64_t v33 = swift_slowAlloc();
            *(void *)&long long v82 = v33;
            *(_DWORD *)int64_t v32 = 136315138;
            uint64_t v34 = Notification.userInfo.getter();
            uint64_t v67 = v33;
            if (v34)
            {
              uint64_t v81 = (void *)v34;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
              uint64_t v35 = String.init<A>(reflecting:)();
              unint64_t v37 = v36;
            }
            else
            {
              uint64_t v35 = 7104878;
              unint64_t v37 = 0xE300000000000000;
            }
            uint64_t v81 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, (uint64_t *)&v82);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            unint64_t v73 = *(void (**)(char *, uint64_t))(v80 + 8);
            v73(v18, v14);
            os_log_t v40 = v68;
            _os_log_impl(&dword_1A375F000, v68, (os_log_type_t)v69, "Received event, notification: %s", v32, 0xCu);
            uint64_t v41 = v67;
            swift_arrayDestroy();
            MEMORY[0x1A624F870](v41, -1, -1);
            MEMORY[0x1A624F870](v32, -1, -1);

            uint64_t v31 = (uint64_t)v75;
          }
          else
          {
            unint64_t v73 = *(void (**)(char *, uint64_t))(v28 + 8);
            v73(v18, v14);
          }
          if (*(void *)(v21 + 16))
          {
            id v42 = (id)*MEMORY[0x1E4F15FC0];
            uint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
            if (v44)
            {
              outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v43, (uint64_t)&v82);
            }
            else
            {
              long long v82 = 0u;
              long long v83 = 0u;
            }

            if (*((void *)&v83 + 1))
            {
              uint64_t v45 = type metadata accessor for UUID();
              uint64_t v46 = (uint64_t)v76;
              int v47 = swift_dynamicCast();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v46, v47 ^ 1u, 1, v45);
              goto LABEL_30;
            }
          }
          else
          {
            long long v82 = 0u;
            long long v83 = 0u;
          }
          outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v82, &demangling cache variable for type metadata for Any?);
          uint64_t v48 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v76, 1, 1, v48);
LABEL_30:
          if (*(void *)(v21 + 16))
          {
            id v49 = (id)*MEMORY[0x1E4F15FC8];
            uint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v49);
            if (v51)
            {
              outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v50, (uint64_t)&v82);
            }
            else
            {
              long long v82 = 0u;
              long long v83 = 0u;
            }
          }
          else
          {
            long long v82 = 0u;
            long long v83 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v83 + 1))
          {
            type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
            if (swift_dynamicCast()) {
              uint64_t v52 = v81;
            }
            else {
              uint64_t v52 = 0;
            }
          }
          else
          {
            outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v82, &demangling cache variable for type metadata for Any?);
            uint64_t v52 = 0;
          }
          uint64_t v53 = (uint64_t)v76;
          uint64_t v54 = v74;
          GroupSession.createPlaybackEvent(originatorUUID:avCommand:rate:)((uint64_t)v76, v74, v52, v31);
          outlined init with copy of URL?(v31, (uint64_t)v8, &demangling cache variable for type metadata for GroupSessionEvent?);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v8, 1, v2) == 1)
          {
            uint64_t v55 = v31;
            outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for GroupSessionEvent?);
            uint64_t v56 = v78;
            v70(v78, v77, v14);
            uint64_t v57 = Logger.logObject.getter();
            os_log_type_t v58 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v57, v58))
            {
              os_log_t v59 = (uint8_t *)swift_slowAlloc();
              uint64_t v60 = swift_slowAlloc();
              *(void *)&long long v82 = v60;
              *(_DWORD *)os_log_t v59 = 136315138;
              uint64_t v61 = Notification.userInfo.getter();
              if (v61)
              {
                uint64_t v81 = (void *)v61;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
                uint64_t v62 = String.init<A>(reflecting:)();
                unint64_t v64 = v63;
              }
              else
              {
                uint64_t v62 = 7104878;
                unint64_t v64 = 0xE300000000000000;
              }
              uint64_t v81 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v64, (uint64_t *)&v82);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              v73(v78, v14);
              _os_log_impl(&dword_1A375F000, v57, v58, "Could not create playback event %s", v59, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1A624F870](v60, -1, -1);
              MEMORY[0x1A624F870](v59, -1, -1);

              swift_release();
              outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v75, &demangling cache variable for type metadata for GroupSessionEvent?);
              uint64_t v53 = (uint64_t)v76;
              goto LABEL_50;
            }

            swift_release();
            v73(v56, v14);
            uint64_t v65 = v55;
          }
          else
          {
            outlined init with take of Participant((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
            GroupSession.showNotice(_:)((uint64_t)v4);

            swift_release();
            outlined destroy of Participant((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
            uint64_t v65 = v31;
          }
          outlined destroy of OS_dispatch_queue.SchedulerOptions?(v65, &demangling cache variable for type metadata for GroupSessionEvent?);
LABEL_50:
          uint64_t v38 = &demangling cache variable for type metadata for UUID?;
          uint64_t v39 = (long long *)v53;
          return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v39, v38);
        }
        swift_bridgeObjectRelease();
        return swift_release();
      }
    }
    else
    {
      long long v82 = 0u;
      long long v83 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v38 = &demangling cache variable for type metadata for Any?;
    uint64_t v39 = &v82;
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v39, v38);
  }
  return result;
}

uint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, Any>);
    uint64_t v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = MEMORY[0x1E4FBC868];
  }
  uint64_t v27 = a1 + 64;
  uint64_t v2 = -1 << *(unsigned char *)(a1 + 32);
  if (-v2 < 64) {
    uint64_t v3 = ~(-1 << -(char)v2);
  }
  else {
    uint64_t v3 = -1;
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v2) >> 6;
  uint64_t v5 = v1 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v7 << 6);
      int64_t v11 = v7;
      goto LABEL_28;
    }
    int64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v12 >= v26) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v12);
    int64_t v11 = v7 + 1;
    if (!v13)
    {
      int64_t v11 = v7 + 2;
      if (v7 + 2 >= v26) {
        goto LABEL_39;
      }
      unint64_t v13 = *(void *)(v27 + 8 * v11);
      if (!v13)
      {
        int64_t v11 = v7 + 3;
        if (v7 + 3 >= v26) {
          goto LABEL_39;
        }
        unint64_t v13 = *(void *)(v27 + 8 * v11);
        if (!v13)
        {
          int64_t v11 = v7 + 4;
          if (v7 + 4 >= v26) {
            goto LABEL_39;
          }
          unint64_t v13 = *(void *)(v27 + 8 * v11);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v9 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
LABEL_28:
    outlined init with copy of AnyHashable(*(void *)(a1 + 48) + 40 * v10, (uint64_t)v37);
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    uint64_t v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    outlined init with copy of AnyHashable((uint64_t)v34, (uint64_t)v31);
    type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey(0);
    if (!swift_dynamicCast())
    {
      BOOL v30 = 0;
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v34, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      uint64_t v25 = v30;
      swift_release();

      outlined consume of [AnyHashable : Any].Iterator._Variant();
      swift_release();
      return 0;
    }
    uint64_t v15 = v30;
    outlined init with copy of Any((uint64_t)v35 + 8, (uint64_t)v31);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v34, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v31, (_OWORD *)((char *)v32 + 8));
    outlined init with take of Any((_OWORD *)((char *)v32 + 8), v29);
    uint64_t v16 = v15;
    outlined init with take of Any(v29, v33);
    outlined init with take of Any(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v17 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v18 = -1 << *(unsigned char *)(v1 + 32);
    unint64_t v19 = v17 & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v5 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v19) & ~*(void *)(v5 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v5 + 8 * v20);
      }
      while (v24 == -1);
      unint64_t v8 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v5 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v1 + 48) + 8 * v8) = v16;
    uint64_t result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(void *)(v1 + 56) + 32 * v8));
    ++*(void *)(v1 + 16);
    int64_t v7 = v11;
    unint64_t v4 = v9;
  }
  int64_t v14 = v7 + 5;
  if (v7 + 5 >= v26)
  {
LABEL_39:
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v1;
  }
  unint64_t v13 = *(void *)(v27 + 8 * v14);
  if (v13)
  {
    int64_t v11 = v7 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v11 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v11);
    ++v14;
    if (v13) {
      goto LABEL_27;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t GroupSession.createPlaybackEvent(originatorUUID:avCommand:rate:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v78 = a2;
  id v79 = a3;
  uint64_t v83 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionEvent?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v80 = (uint64_t)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v82 = (uint64_t)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v75 = (uint64_t)v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v76 = (char *)v69 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v69 - v14;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  unint64_t v73 = (char *)v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v74 = (char *)v69 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v77 = (char *)v69 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)v69 - v24;
  uint64_t v26 = type metadata accessor for Participant();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  BOOL v30 = (char *)v69 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  int64_t v32 = (char *)v69 - v31;
  outlined init with copy of URL?(a1, (uint64_t)v15, &demangling cache variable for type metadata for UUID?);
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v33(v15, 1, v16) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    outlined init with copy of Participant(*(void *)&v81[direct field offset for GroupSession.linkManager]+ OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for Participant);
    goto LABEL_10;
  }
  unint64_t v70 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v33;
  uint64_t v71 = v17 + 48;
  uint64_t v72 = v32;
  v69[0] = *(void *)(v17 + 32);
  v69[1] = v17 + 32;
  ((void (*)(char *, char *, uint64_t))v69[0])(v25, v15, v16);
  uint64_t v34 = GroupSession.activeParticipants.getter();
  MEMORY[0x1F4188790](v34);
  v69[-2] = v25;
  uint64_t v35 = v82;
  specialized Sequence.first(where:)((uint64_t (*)(char *))partial apply for closure #1 in GroupSession.createPlaybackEvent(originatorUUID:avCommand:rate:), v34, v82);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v35, 1, v26) != 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v25, v16);
    int64_t v32 = v72;
    outlined init with take of Participant(v82, (uint64_t)v72, (uint64_t (*)(void))type metadata accessor for Participant);
LABEL_10:
    outlined init with copy of Participant((uint64_t)v32, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for Participant);
    id v52 = v79;
    id v53 = v79;
    id v54 = v78;
    uint64_t v55 = v80;
    GroupSessionEvent.init(originator:avCommand:rate:)((uint64_t)v30, v54, v52, v80);
    uint64_t v56 = type metadata accessor for GroupSessionEvent();
    uint64_t v57 = *(void *)(v56 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56) == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v55, &demangling cache variable for type metadata for GroupSessionEvent?);
      if (one-time initialization token for playback != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for Logger();
      __swift_project_value_buffer(v58, (uint64_t)static Logger.playback);
      os_log_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v61 = 0;
        _os_log_impl(&dword_1A375F000, v59, v60, "AVCF event: Failed to create GroupSession Event from playback notification", v61, 2u);
        MEMORY[0x1A624F870](v61, -1, -1);
      }

      outlined destroy of Participant((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for Participant);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v83, 1, 1, v56);
    }
    else
    {
      outlined destroy of Participant((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for Participant);
      uint64_t v63 = v55;
      uint64_t v64 = v83;
      outlined init with take of Participant(v63, v83, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v57 + 56))(v64, 0, 1, v56);
    }
  }
  uint64_t v81 = v25;
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v82, &demangling cache variable for type metadata for Participant?);
  if (one-time initialization token for playback != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.playback);
  uint64_t v37 = v17;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  uint64_t v39 = v77;
  os_log_t v40 = v81;
  uint64_t v41 = v16;
  v38(v77, v81, v16);
  id v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    char v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    v85[0] = v45;
    *(_DWORD *)char v44 = 136315138;
    uint64_t v46 = v39;
    uint64_t v47 = (uint64_t)v76;
    v38(v76, v46, v41);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v47, 0, 1, v41);
    uint64_t v48 = v47;
    uint64_t v49 = v75;
    outlined init with copy of URL?(v48, v75, &demangling cache variable for type metadata for UUID?);
    if (v70(v49, 1, v41) == 1)
    {
      unint64_t v50 = 0xE300000000000000;
      uint64_t v51 = 7104878;
    }
    else
    {
      uint64_t v66 = v74;
      ((void (*)(char *, uint64_t, uint64_t))v69[0])(v74, v49, v41);
      v38(v73, v66, v41);
      uint64_t v51 = String.init<A>(reflecting:)();
      unint64_t v50 = v67;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v66, v41);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v76, &demangling cache variable for type metadata for UUID?);
    uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v50, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v65 = *(void (**)(char *, uint64_t))(v37 + 8);
    v65(v77, v41);
    _os_log_impl(&dword_1A375F000, v42, v43, "createPlaybackNoticeEvent: Can't find participant: %s", v44, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v45, -1, -1);
    MEMORY[0x1A624F870](v44, -1, -1);

    os_log_t v40 = v81;
  }
  else
  {
    uint64_t v65 = *(void (**)(char *, uint64_t))(v37 + 8);
    v65(v39, v16);
  }
  v65(v40, v41);
  uint64_t v68 = type metadata accessor for GroupSessionEvent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v83, 1, 1, v68);
}

void closure #1 in variable initialization expression of GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    if (one-time initialization token for playback != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.playback);
    id v4 = a1;
    id v5 = a1;
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v13 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      id v9 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v10 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, oslog, v6, "Error sending %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v8, -1, -1);
      MEMORY[0x1A624F870](v7, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t key path setter for GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion : <A><A1>GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  os_log_type_t v6 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))(**(void **)a2 + 208);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Error?) -> (@out ()), v5);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_release();
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler : <A><A1>GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PlaybackSyncer.Message, @in_guaranteed UUID) -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler : <A><A1>GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PlaybackSyncer.Message, @in_guaranteed UUID) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(void **)a2 + 232);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v1);
  return v1;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v5);
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler : <A><A1>GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UUID) -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler : <A><A1>GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UUID) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(void **)a2 + 256);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 48);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v1);
  return v1;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v5);
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.connected.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.connected.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 64) = a1;
  return result;
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.connected.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID.getter(&direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID, a1);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.localUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID.getter(&direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.localUUID, a1);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.groupSession.getter()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.groupSession.getter();
}

{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.groupSession.setter()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.groupSession.setter();
}

{
  swift_beginAccess();
  swift_weakAssign();
  return swift_release();
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.groupSession.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.groupSession;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return GroupSession.GroupSessionPlaybackSyncerLink.groupSession.modify;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.messenger.getter()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.groupSession.getter();
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.messenger.setter()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.groupSession.setter();
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.messenger.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.messenger;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return GroupSession.GroupSessionPlaybackSyncerLink.groupSession.modify;
}

void GroupSession.GroupSessionPlaybackSyncerLink.groupSession.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }

  free(v3);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer.getter()
{
  return swift_retain();
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.getter()
{
  return swift_retain();
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.__allocating_init(groupSession:messenger:playbackSyncer:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)(a1, a2, a3);
  return v6;
}

void *GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v38[1] = a2;
  uint64_t v7 = *v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Participant();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[2] = closure #1 in variable initialization expression of GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion;
  *(_OWORD *)(v4 + 3) = 0u;
  *(_OWORD *)(v4 + 5) = 0u;
  v4[7] = 0;
  swift_weakInit();
  swift_weakInit();
  v38[0] = v7;
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v15 = a3;
    unint64_t v16 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else
  {
    uint64_t v15 = a3;
    unint64_t v16 = MEMORY[0x1E4FBC870];
  }
  *(void *)((char *)v4 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.cancellables) = v16;
  swift_beginAccess();
  swift_weakAssign();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v17((char *)v4 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID, &a1[direct field offset for GroupSession.id], v8);
  outlined init with copy of Participant(*(void *)&a1[direct field offset for GroupSession.linkManager]+ OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
  v17(v11, v14, v8);
  outlined destroy of Participant((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))((uint64_t)v4 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.localUUID, v11, v8);
  swift_beginAccess();
  swift_weakAssign();
  *(void *)((char *)v4 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer) = v15;
  *((unsigned char *)v4 + 64) = 0;
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void *)(*(void *)a1 + 256);
  if ((a1[v19] & 1) != 0 || a1[*(void *)(v18 + 264)] == 1)
  {
    uint64_t v20 = &a1[*(void *)(v18 + 272)];
    swift_beginAccess();
    char v21 = *v20 ^ 1;
  }
  else
  {
    char v21 = 1;
  }
  LOBYTE(v39[0]) = v21 & 1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v4 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup) = CurrentValueSubject.init(_:)();
  if (one-time initialization token for playback != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.playback);
  swift_retain_n();
  swift_retain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 67109888;
    swift_beginAccess();
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    swift_release();
    LODWORD(v39[0]) = LOBYTE(v39[0]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v25 + 8) = 1024;
    int v26 = a1[v19];
    swift_release();
    LODWORD(v39[0]) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v25 + 14) = 1024;
    int v27 = a1[*(void *)(*(void *)a1 + 264)];
    swift_release();
    LODWORD(v39[0]) = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v25 + 20) = 1024;
    uint64_t v28 = &a1[*(void *)(*(void *)a1 + 272)];
    swift_beginAccess();
    int v29 = *v28;
    swift_release();
    LODWORD(v39[0]) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1A375F000, v23, v24, "ShouldRequestCatchup:%{BOOL}d isLocallyInitiated:%{BOOL}d isLightweightPrimaryInitiated:%{BOOL}d isFirstJoin:%{BOOL}d", (uint8_t *)v25, 0x1Au);
    MEMORY[0x1A624F870](v25, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  uint64_t v30 = v38[0];
  if (swift_weakLoadStrong())
  {
    uint64_t v31 = GroupSession.catchupNeededPublisher.getter();
    swift_release();
    v39[0] = v31;
    uint64_t v32 = swift_allocObject();
    swift_weakInit();
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = *(void *)(v30 + 80);
    *(_OWORD *)(v33 + 24) = *(_OWORD *)(v30 + 88);
    *(void *)(v33 + 40) = *(void *)(v30 + 104);
    *(void *)(v33 + 48) = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Participant, Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<Participant, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Participant, Never>);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  if (swift_weakLoadStrong())
  {
    specialized GroupSessionMessenger.receive<A>(_:)(v39);
    swift_release();
    v38[11] = v39[0];
    uint64_t v34 = swift_allocObject();
    swift_weakInit();
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = *(void *)(v30 + 80);
    *(_OWORD *)(v35 + 24) = *(_OWORD *)(v30 + 88);
    *(void *)(v35 + 40) = *(void *)(v30 + 104);
    *(void *)(v35 + 48) = v34;
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = partial apply for closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:);
    *(void *)(v36 + 24) = v35;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.MessageStream<PlaybackSyncer.Message>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageStream<PlaybackSyncer.Message> and conformance GroupSessionMessenger.MessageStream<A>, &demangling cache variable for type metadata for GroupSessionMessenger.MessageStream<PlaybackSyncer.Message>);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    if ((*(uint64_t (**)(void))(*(void *)result + 272))())
    {
      if (one-time initialization token for playback != -1) {
        swift_once();
      }
      uint64_t v2 = type metadata accessor for Logger();
      __swift_project_value_buffer(v2, (uint64_t)static Logger.playback);
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl(&dword_1A375F000, v3, v4, "Processing catchup needed signal", v5, 2u);
        MEMORY[0x1A624F870](v5, -1, -1);
      }

      (*(void (**)(void))(*(void *)v1 + 344))();
      CurrentValueSubject.send(_:)();
      swift_release();
    }
    else
    {
      if (one-time initialization token for playback != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.playback);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_1A375F000, v7, v8, "Ignoring catchup needed signal since not connected to PlaybackSyncer yet", v9, 2u);
        MEMORY[0x1A624F870](v9, -1, -1);
      }
    }
    return swift_release();
  }
  return result;
}

void specialized GroupSessionMessenger.receive<A>(_:)(void *a1@<X8>)
{
  v14[0] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext)>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext)>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = (void *)specialized static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(*(void *)(v1 + 16), *(void *)(v1 + 24));
  char v10 = *(unsigned char *)(v1 + 40);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for specialized closure #1 in GroupSessionMessenger.receive<A>(_:);
  *(void *)(v12 + 24) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>);
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext)> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext)>);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext)>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext)>>);
  uint64_t v13 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  specialized GroupSessionMessenger.MessageStream.init(outputStream:)(v13, v14[0]);
}

uint64_t closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = (void (*)(unsigned char *, uint64_t))(*(uint64_t (**)(void))(*(void *)result + 224))();
    uint64_t result = swift_release();
    if (v7)
    {
      v8[0] = v3;
      uint64_t v9 = v4;
      uint64_t v10 = v5;
      v7(v8, a2);
      return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v7);
    }
  }
  return result;
}

Swift::Void __swiftcall GroupSession.GroupSessionPlaybackSyncerLink.connect()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 88);
  uint64_t v4 = *(void *)(*v0 + 104);
  type metadata accessor for GroupSession.State();
  uint64_t v5 = type metadata accessor for Published.Publisher();
  uint64_t v32 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v28 - v6;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for Publishers.Drop();
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(v2 + 296))(v9);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v30 = v3;
    GroupSession.state.getter();
    uint64_t v14 = v34;
    uint64_t v35 = 1;
    id v36 = v34;
    char v15 = static GroupSession.State.== infix(_:_:)(&v36, (void **)&v35);
    outlined consume of GroupSession<A>.State<A>(v14);
    if (v15)
    {
      if (one-time initialization token for playback != -1) {
        swift_once();
      }
      uint64_t v29 = v4;
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.playback);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl(&dword_1A375F000, v17, v18, "GroupSession was already joined so calling didJoinHandler", v19, 2u);
        MEMORY[0x1A624F870](v19, -1, -1);
      }

      uint64_t v20 = GroupSession.activeParticipants.getter();
      MEMORY[0x1F4188790](v20);
      uint64_t v21 = *(void *)(v2 + 96);
      *(&v28 - 4) = *(void *)(v2 + 80);
      *(&v28 - 3) = v21;
      *(&v28 - 2) = v13;
      uint64_t v22 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.connect(), (uint64_t)(&v28 - 6), v20);
      swift_bridgeObjectRelease();
      uint64_t v23 = *(uint64_t *)((char *)v1 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer);
      uint64_t v24 = specialized Set.init<A>(_:)(v22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t *, _UNKNOWN **, uint64_t))(*(void *)v23 + 480))(v1, &protocol witness table for GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>, v24);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))(*v1 + 280))(1);
      uint64_t v4 = v29;
    }
    GroupSession.$state.getter();
    Publisher.dropFirst(_:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v5);
    uint64_t v25 = swift_allocObject();
    swift_weakInit();
    int v26 = (void *)swift_allocObject();
    uint64_t v27 = v30;
    v26[2] = *(void *)(v2 + 80);
    v26[3] = v27;
    v26[4] = *(void *)(v2 + 96);
    v26[5] = v4;
    v26[6] = v25;
    swift_getWitnessTable();
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v8);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
  }
}

uint64_t closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.connect()(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)result + 296))();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v21 = 1;
      id v22 = v7;
      if (static GroupSession.State.== infix(_:_:)(&v22, (void **)&v21))
      {
        if (one-time initialization token for playback != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)static Logger.playback);
        uint64_t v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v13, v14))
        {
          char v15 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v15 = 0;
          _os_log_impl(&dword_1A375F000, v13, v14, "GroupSession joined so connecting link to PlaybackSyncer", v15, 2u);
          MEMORY[0x1A624F870](v15, -1, -1);
        }

        uint64_t v16 = GroupSession.activeParticipants.getter();
        MEMORY[0x1F4188790](v16);
        void v20[2] = a3;
        uint64_t v20[3] = a5;
        v20[4] = v11;
        uint64_t v17 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #1 in closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.connect(), (uint64_t)v20, v16);
        swift_bridgeObjectRelease();
        uint64_t v18 = *(void *)(v9 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer);
        swift_retain();
        swift_retain();
        uint64_t v19 = specialized Set.init<A>(_:)(v17);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, _UNKNOWN **, uint64_t))(*(void *)v18 + 480))(v9, &protocol witness table for GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>, v19);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t))(*(void *)v9 + 280))(1);
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.connect()@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  id v22 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = type metadata accessor for Participant();
  MEMORY[0x1F4188790](v12 - 8);
  os_log_type_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Participant(*(void *)(a2 + direct field offset for GroupSession.linkManager)+ OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
  char v15 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v15(v11, v14, v5);
  outlined destroy of Participant((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v21 = a1;
  v15(v9, a1, v5);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v9, v5);
  v16(v11, v5);
  if (a2)
  {
    uint64_t v17 = 1;
    uint64_t v18 = v22;
  }
  else
  {
    uint64_t v19 = v22;
    v15(v22, v21, v5);
    uint64_t v17 = 0;
    uint64_t v18 = v19;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v18, v17, 1, v5);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.sendMessage(_:to:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v66 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v65 = (char *)&v54 - v9;
  uint64_t v10 = type metadata accessor for Participant();
  uint64_t v63 = *(void *)(v10 - 8);
  uint64_t v64 = v10;
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  os_log_t v59 = (char *)&v54 - v15;
  int v16 = *a1;
  uint64_t v18 = *((void *)a1 + 1);
  unint64_t v17 = *((void *)a1 + 2);
  if (a2)
  {
    unint64_t v58 = v17;
    int64_t v19 = *(void *)(a2 + 16);
    uint64_t v20 = MEMORY[0x1E4FBC860];
    if (v19)
    {
      uint64_t v55 = v18;
      int v56 = v16;
      uint64_t v57 = v2;
      uint64_t v67 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
      id v22 = (char *)(a2 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80)));
      uint64_t v61 = *(void *)(v66 + 72);
      uint64_t v62 = v21;
      v66 += 16;
      os_log_type_t v60 = (void (**)(char *, uint64_t))(v66 - 8);
      uint64_t v23 = (uint64_t)v59;
      do
      {
        uint64_t v24 = v65;
        uint64_t v25 = v62;
        v62(v65, v22, v5);
        v25(v8, v24, v5);
        v25(v13, v8, v5);
        UUID.uuid.getter();
        unsigned __int8 v27 = v26;
        UUID.uuid.getter();
        uint64_t v29 = (v28 >> 40) & 0xFF00 | v27;
        UUID.uuid.getter();
        uint64_t v31 = (v30 >> 24) & 0xFF0000;
        UUID.uuid.getter();
        uint64_t v33 = v29 | v31 | (v32 >> 8) & 0xFF000000;
        UUID.uuid.getter();
        unint64_t v35 = v33 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v34 << 32);
        UUID.uuid.getter();
        unint64_t v37 = v35 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v36 << 40);
        UUID.uuid.getter();
        unint64_t v39 = v37 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v38 << 48);
        UUID.uuid.getter();
        unint64_t v41 = v39 | (v40 << 56);
        id v42 = *v60;
        (*v60)(v8, v5);
        uint64_t v43 = v64;
        *(void *)&v13[*(int *)(v64 + 24)] = v41;
        char v44 = &v13[*(int *)(v43 + 20)];
        *(void *)char v44 = 0;
        *((void *)v44 + 1) = 0xE000000000000000;
        outlined init with take of Participant((uint64_t)v13, v23, (uint64_t (*)(void))type metadata accessor for Participant);
        v42(v24, v5);
        uint64_t v20 = v67;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1);
          uint64_t v23 = (uint64_t)v59;
          uint64_t v20 = v67;
        }
        unint64_t v46 = *(void *)(v20 + 16);
        unint64_t v45 = *(void *)(v20 + 24);
        if (v46 >= v45 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
          uint64_t v23 = (uint64_t)v59;
          uint64_t v20 = v67;
        }
        *(void *)(v20 + 16) = v46 + 1;
        uint64_t v14 = outlined init with take of Participant(v23, v20+ ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))+ *(void *)(v63 + 72) * v46, (uint64_t (*)(void))type metadata accessor for Participant);
        v22 += v61;
        --v19;
      }
      while (v19);
      uint64_t v2 = v57;
      LOBYTE(v16) = v56;
      uint64_t v18 = v55;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 320))(v14))
    {
      uint64_t v47 = specialized Set.init<A>(_:)(v20);
      uint64_t v48 = swift_bridgeObjectRelease();
      uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 200))(v48);
      specialized GroupSessionMessenger.send<A>(_:to:completion:)(v16, v18, v58, v47, v49, v50);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 320))(v14);
    if (result)
    {
      uint64_t v52 = (*(uint64_t (**)(void))(*(void *)v2 + 200))();
      specialized GroupSessionMessenger.send<A>(_:to:completion:)(v16, v18, v17, 0, v52, v53);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t specialized GroupSessionMessenger.send<A>(_:to:completion:)(char a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v29 = &type metadata for PlaybackSyncer.Message;
  unint64_t v30 = lazy protocol witness table accessor for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message();
  unint64_t v31 = lazy protocol witness table accessor for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message();
  v26[0] = a1;
  uint64_t v27 = a2;
  unint64_t v28 = a3;
  char v32 = 1;
  outlined copy of Data._Representation(a2, a3);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.default);
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v25 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v19 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a2, a3);
    outlined consume of Data._Representation(a2, a3);
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v21 = String.init<A>(reflecting:)();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v15, v16, "Sending message: %s to: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v18, -1, -1);
    MEMORY[0x1A624F870](v17, -1, -1);
  }
  else
  {
    outlined consume of Data._Representation(a2, a3);
    outlined consume of Data._Representation(a2, a3);

    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = a4;
  LOBYTE(v24) = *(unsigned char *)(v7 + 40);
  GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)((uint64_t)v26, &v25, (char *)&v24, a5, a6);
  return outlined destroy of GroupSessionMessenger.MessageWrapper((uint64_t)v26);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.deinit()
{
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(void *)(v0 + 48));
  uint64_t v1 = v0 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.localUUID, v2);
  swift_weakDestroy();
  swift_weakDestroy();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.__deallocating_deinit()
{
  return GroupSession.__deallocating_deinit((void (*)(void))GroupSession.GroupSessionPlaybackSyncerLink.deinit);
}

uint64_t GroupSession.__deallocating_deinit(void (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PlaybackSyncerLink.sendMessage(_:to:) in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t protocol witness for PlaybackSyncerLink.receivedMessageHandler.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t protocol witness for PlaybackSyncerLink.receivedMessageHandler.setter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t (*protocol witness for PlaybackSyncerLink.receivedMessageHandler.modify in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 240))();
  return protocol witness for PlaybackSyncerLink.receivedMessageHandler.modify in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>;
}

uint64_t protocol witness for PlaybackSyncerLink.participantLeftHandler.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t protocol witness for PlaybackSyncerLink.participantLeftHandler.setter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t (*protocol witness for PlaybackSyncerLink.participantLeftHandler.modify in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 264))();
  return protocol witness for PlaybackSyncerLink.receivedMessageHandler.modify in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>;
}

void protocol witness for PlaybackSyncerLink.receivedMessageHandler.modify in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t protocol witness for PlaybackSyncerLink.localUUID.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for PlaybackSyncerLink.localUUID.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(&direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.localUUID, a1);
}

uint64_t protocol witness for PlaybackSyncerLink.sessionUUID.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for PlaybackSyncerLink.localUUID.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(&direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID, a1);
}

uint64_t protocol witness for PlaybackSyncerLink.localUUID.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for PlaybackSyncerLink.shouldRequestCatchup.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t specialized closure #1 in GroupSession.cleanUpPlaybackSyncer()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void *)(result + direct field offset for GroupSession.playbackSyncerLink);
    swift_beginAccess();
    if (*v2)
    {
      uint64_t v3 = *(void (**)(uint64_t))(**(void **)(*v2
                                                        + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                                          + 512);
      swift_retain();
      uint64_t v4 = swift_retain();
      v3(v4);
      swift_release();
      if (one-time initialization token for playback != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.playback);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl(&dword_1A375F000, v6, v7, "Cleaned up playback syncer", v8, 2u);
        MEMORY[0x1A624F870](v8, -1, -1);
        swift_release();
      }
      else
      {

        swift_release();
      }
    }
    if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
      unint64_t v9 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
    }
    else {
      unint64_t v9 = MEMORY[0x1E4FBC870];
    }
    uint64_t v10 = (unint64_t *)(v1 + *(void *)(*(void *)v1 + 304));
    swift_beginAccess();
    *uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    uint64_t v11 = (void *)(v1 + direct field offset for GroupSession.playbackSyncMessenger);
    swift_beginAccess();
    void *v11 = 0;
    swift_release();
    specialized GroupSession.playbackSyncerLink.setter(0);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in GroupSession.cleanUpPlaybackSyncer()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void *)(result + direct field offset for GroupSession.playbackSyncerLink);
    swift_beginAccess();
    if (*v2)
    {
      uint64_t v3 = *(void (**)(uint64_t))(**(void **)(*v2
                                                        + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                                          + 512);
      swift_retain();
      uint64_t v4 = swift_retain();
      v3(v4);
      swift_release();
      if (one-time initialization token for playback != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.playback);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl(&dword_1A375F000, v6, v7, "Cleaned up playback syncer", v8, 2u);
        MEMORY[0x1A624F870](v8, -1, -1);
        swift_release();
      }
      else
      {

        swift_release();
      }
    }
    if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
      unint64_t v9 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
    }
    else {
      unint64_t v9 = MEMORY[0x1E4FBC870];
    }
    uint64_t v10 = (unint64_t *)(v1 + *(void *)(*(void *)v1 + 304));
    swift_beginAccess();
    *uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    uint64_t v11 = (void *)(v1 + direct field offset for GroupSession.playbackSyncMessenger);
    swift_beginAccess();
    void *v11 = 0;
    swift_release();
    GroupSession.playbackSyncerLink.setter(0);
    return swift_release();
  }
  return result;
}

uint64_t specialized GroupSession.description.getter()
{
  _StringGuts.grow(_:)(120);
  v1._countAndFlagsBits = 0x73655370756F7247;
  v1._object = (void *)0xED00003C6E6F6973;
  String.append(_:)(v1);
  v2._object = (void *)0x80000001A3900330;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x203A666C6573283ELL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 0x203A6469202CLL;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x3A6574617473202CLL;
  v6._object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  type metadata accessor for AnyGroupActivity(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.State);
  _print_unlocked<A, B>(_:_:)();
  outlined consume of GroupSession<A>.State<A>(v0);
  v7._countAndFlagsBits = 0xD000000000000014;
  v7._object = (void *)0x80000001A38FFE70;
  String.append(_:)(v7);
  if (*((unsigned char *)v0 + *(void *)(*(void *)v0 + 256))) {
    uint64_t v8 = 1702195828;
  }
  else {
    uint64_t v8 = 0x65736C6166;
  }
  if (*((unsigned char *)v0 + *(void *)(*(void *)v0 + 256))) {
    unint64_t v9 = 0xE400000000000000;
  }
  else {
    unint64_t v9 = 0xE500000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0xD00000000000001CLL;
  v11._object = (void *)0x80000001A38FFE90;
  String.append(_:)(v11);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0xD000000000000015;
  v13._object = (void *)0x80000001A38FFEB0;
  String.append(_:)(v13);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 41;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return 0;
}

uint64_t GroupSession.description.getter()
{
  _StringGuts.grow(_:)(120);
  v1._countAndFlagsBits = 0x73655370756F7247;
  v1._object = (void *)0xED00003C6E6F6973;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x203A666C6573283ELL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 0x203A6469202CLL;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x3A6574617473202CLL;
  v6._object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  GroupSession.state.getter();
  type metadata accessor for GroupSession.State();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined consume of GroupSession<A>.State<A>(v0);
  v7._object = (void *)0x80000001A38FFE70;
  v7._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v7);
  if (*((unsigned char *)v0 + *(void *)(*(void *)v0 + 256))) {
    uint64_t v8 = 1702195828;
  }
  else {
    uint64_t v8 = 0x65736C6166;
  }
  if (*((unsigned char *)v0 + *(void *)(*(void *)v0 + 256))) {
    unint64_t v9 = 0xE400000000000000;
  }
  else {
    unint64_t v9 = 0xE500000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0xD00000000000001CLL;
  v11._object = (void *)0x80000001A38FFE90;
  String.append(_:)(v11);
  GroupSession.activeParticipants.getter();
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0xD000000000000015;
  v13._object = (void *)0x80000001A38FFEB0;
  String.append(_:)(v13);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 41;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupSession<A>()
{
  return GroupSession.description.getter();
}

Swift::Void __swiftcall GroupSession.invalidateConnection()()
{
  Swift::String v1 = (id *)(v0 + *(void *)(*(void *)v0 + 280));
  swift_beginAccess();
  id v2 = *v1;
  dispatch thunk of XPCClient.destroyConnection()();
}

uint64_t GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(char a1, void *a2, uint64_t a3)
{
  Swift::String v4 = v3;
  uint64_t v8 = *v3;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.default);
  swift_retain_n();
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  char v25 = a1;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    aBlock[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    LOBYTE(v28) = a1 & 1;
    uint64_t v14 = String.init<A>(reflecting:)();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v28 = (uint64_t)v4;
    uint64_t v16 = >> prefix<A>(_:)((uint64_t)&v28, v8);
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v10, v11, "GroupSession got shouldDismissPlayback allowingCancellation:%s. Will end %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v13, -1, -1);
    MEMORY[0x1A624F870](v12, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  GroupSession.state.getter();
  uint64_t v18 = (void *)aBlock[0];
  uint64_t v27 = 1;
  uint64_t v28 = aBlock[0];
  char v19 = static GroupSession.State.== infix(_:_:)((id *)&v28, (void **)&v27);
  outlined consume of GroupSession<A>.State<A>(v18);
  if (v19)
  {
    unint64_t v20 = *(NSObject **)((char *)v4 + *(void *)(*v4 + 288));
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v4;
    *(unsigned char *)(v21 + 24) = v25 & 1;
    *(void *)(v21 + 32) = a2;
    *(void *)(v21 + 40) = a3;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = partial apply for closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:);
    *(void *)(v22 + 24) = v21;
    aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v22;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_192;
    a2 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v20, a2);
    _Block_release(a2);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
  }
  return ((uint64_t (*)(void))a2)(0);
}

uint64_t closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v9 = *v8;
  unint64_t v10 = XPCClient.queue.getter();

  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(unsigned char *)(v11 + 24) = a2;
  *(void *)(v11 + 32) = a3;
  *(void *)(v11 + 40) = a4;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:);
  *(void *)(v12 + 24) = v11;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_321;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v10, v13);

  _Block_release(v13);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a4) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v6 = (void **)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  Swift::String v7 = *v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  id v9 = v7;
  swift_retain();
  XPCClient.withHost(body:errorHandler:)();

  return swift_release();
}

void closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(void **a1, char a2, uint64_t a3, uint64_t a4)
{
  Swift::String v7 = *a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  v10[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:);
  v10[5] = v8;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  _OWORD v10[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v10[3] = &block_descriptor_330;
  id v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_presentSessionDismissalAlertWithAllowingCancellation_completion_, a2 & 1, v9);
  _Block_release(v9);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(char a1, uint64_t (*a2)(void))
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  Swift::String v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    Swift::String v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v12 = v8;
    *(_DWORD *)Swift::String v7 = 136315138;
    uint64_t v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v5, v6, "GroupSession got result of dismissal alert %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }

  return a2(a1 & 1);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t GroupSession.Timestamps.globalCreation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t GroupSession.Timestamps.localCreation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for Date();
  os_log_type_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t GroupSession.Timestamps.permittedJoin.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of URL?(v2 + *(int *)(a1 + 40), a2, &demangling cache variable for type metadata for Date?);
}

uint64_t GroupSession.Timestamps.init()@<X0>(uint64_t a1@<X8>)
{
  Date.init()();
  uint64_t v2 = type metadata accessor for GroupSession.Timestamps();
  Date.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 1, 1, v4);
}

uint64_t specialized closure #1 in GroupSessionMessenger.receive<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if (a4)
  {
    if ((a3 & 1) == 0) {
      goto LABEL_3;
    }
  }
  else if (a3)
  {
LABEL_3:
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    return v8(a5, 1, 1, v7);
  }
  outlined init with copy of GroupSessionMessenger.MessageType(a1, (uint64_t)v17);
  if (v18)
  {
    v19[0] = v17[0];
    v19[1] = v17[1];
    v19[2] = v17[2];
    outlined init with copy of Decodable & Encodable((uint64_t)v19, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable & Encodable);
    if ((swift_dynamicCast() & 1) == 0 || v14 == 4)
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a5, 1, 1, v13);
    }
    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
      uint64_t v11 = a5 + *(int *)(v10 + 48);
      *(unsigned char *)a5 = v14;
      *(void *)(a5 + 8) = v15;
      *(void *)(a5 + 16) = v16;
      outlined init with copy of Participant(a2, v11, (uint64_t (*)(void))type metadata accessor for GroupSessionMessenger.MessageContext);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a5, 0, 1, v10);
    }
    return outlined destroy of TypedPayloadBox((uint64_t)v19);
  }
  else
  {
    outlined destroy of GroupSessionMessenger.MessageType((uint64_t)v17);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a5, 1, 1, v12);
  }
}

void specialized closure #2 in GroupSessionMessenger.receive<A>(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  uint64_t v8 = (char *)&v23 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v23 - v9;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  uint64_t v12 = *(int *)(v2 + 48);
  uint64_t v13 = (uint64_t)&v10[v12];
  uint64_t v14 = a1 + v12;
  LOBYTE(v12) = *(unsigned char *)a1;
  uint64_t v16 = *(void *)(a1 + 8);
  unint64_t v15 = *(void *)(a1 + 16);
  *uint64_t v10 = v12;
  *((void *)v10 + 1) = v16;
  *((void *)v10 + 2) = v15;
  outlined init with copy of Participant(v14, v13, (uint64_t (*)(void))type metadata accessor for GroupSessionMessenger.MessageContext);
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)v8, &demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
  outlined init with take of Date?((uint64_t)v10, (uint64_t)v5, &demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
  outlined copy of Data._Representation(v16, v15);
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    char v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v24 = v20;
    *(_DWORD *)char v19 = 136315138;
    uint64_t v21 = _typeName(_:qualified:)();
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v5, &demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
    _os_log_impl(&dword_1A375F000, v17, v18, "Receiving message: %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v20, -1, -1);
    MEMORY[0x1A624F870](v19, -1, -1);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v5, &demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
  }
}

uint64_t protocol witness for SystemCoordinatorClientProvider.id.getter in conformance GroupSession<A>@<X0>(uint64_t a1@<X8>)
{
  return GroupSession.id.getter(a1);
}

uint64_t Published.init(wrappedValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  Published.init(initialValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x1E4F27990]);
  uint64_t *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Participant>, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PresenceSessionInfo.Participant>, type metadata accessor for PresenceSessionInfo.Participant);
  uint64_t *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ResolvedTransferRepresentation>, MEMORY[0x1E4F24950]);
  uint64_t *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AbsoluteSpatialTemplateOutput.Element>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 112 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AddressableMember>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Topic.PendingMessage>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    size_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  size_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Just<GroupSession<AnyGroupActivity>>>);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<GroupSession<AnyGroupActivity>>)
                  - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<GroupSession<AnyGroupActivity>>)
                  - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  os_log_type_t v18 = (char *)v13 + v17;
  char v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DownloadAttachment>);
    uint64_t v10 = (void *)swift_allocObject();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    _OWORD v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  uint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DownloadAttachment);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  uint64_t v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for Participant();
  uint64_t v7 = *(void *)(v54 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v54);
  int64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v43 - v12;
  uint64_t result = MEMORY[0x1F4188790](v11);
  uint64_t v51 = (uint64_t)&v43 - v15;
  if (!*(void *)(*v2 + 16)) {
    return result;
  }
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v44 = a1 + 56;
  uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v16;
  int64_t v45 = (unint64_t)(v17 + 63) >> 6;
  unint64_t v46 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v48 = v6;
  uint64_t v49 = v2;
  uint64_t v50 = a1;
  uint64_t v47 = v7;
  while (1)
  {
    if (v19)
    {
      uint64_t v52 = (v19 - 1) & v19;
      int64_t v53 = v20;
      unint64_t v22 = __clz(__rbit64(v19)) | (v20 << 6);
      goto LABEL_26;
    }
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v23 >= v45) {
      return swift_release();
    }
    unint64_t v24 = *(void *)(v44 + 8 * v23);
    int64_t v25 = v20 + 1;
    if (!v24)
    {
      int64_t v25 = v20 + 2;
      if (v20 + 2 >= v45) {
        return swift_release();
      }
      unint64_t v24 = *(void *)(v44 + 8 * v25);
      if (!v24)
      {
        int64_t v25 = v20 + 3;
        if (v20 + 3 >= v45) {
          return swift_release();
        }
        unint64_t v24 = *(void *)(v44 + 8 * v25);
        if (!v24)
        {
          int64_t v25 = v20 + 4;
          if (v20 + 4 >= v45) {
            return swift_release();
          }
          unint64_t v24 = *(void *)(v44 + 8 * v25);
          if (!v24) {
            break;
          }
        }
      }
    }
LABEL_25:
    uint64_t v52 = (v24 - 1) & v24;
    int64_t v53 = v25;
    unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_26:
    uint64_t v27 = *(void *)(v7 + 72);
    uint64_t v28 = *(void *)(a1 + 48) + v27 * v22;
    uint64_t v29 = v51;
    outlined init with copy of Participant(v28, v51, (uint64_t (*)(void))type metadata accessor for Participant);
    outlined init with take of Participant(v29, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Participant);
    uint64_t v30 = *v2;
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    swift_bridgeObjectRetain();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v31 = v54;
    char v32 = &v13[*(int *)(v54 + 20)];
    String.hash(into:)();
    uint64_t v33 = *(int *)(v31 + 24);
    Hasher._combine(_:)(*(void *)&v13[v33]);
    Swift::Int v34 = Hasher._finalize()();
    uint64_t v35 = -1 << *(unsigned char *)(v30 + 32);
    unint64_t v36 = v34 & ~v35;
    if ((*(void *)(v30 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36))
    {
      uint64_t v37 = ~v35;
      while (1)
      {
        outlined init with copy of Participant(*(void *)(v30 + 48) + v36 * v27, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Participant);
        if (static UUID.== infix(_:_:)())
        {
          unsigned __int8 v38 = &v10[*(int *)(v54 + 20)];
          BOOL v39 = *(void *)v38 == *(void *)v32 && *((void *)v38 + 1) == *((void *)v32 + 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)())
            && *(void *)&v10[*(int *)(v54 + 24)] == *(void *)&v13[v33])
          {
            break;
          }
        }
        outlined destroy of Participant((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Participant);
        unint64_t v36 = (v36 + 1) & v37;
        if (((*(void *)(v30 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
          goto LABEL_6;
        }
      }
      outlined destroy of Participant((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Participant);
      swift_bridgeObjectRelease();
      uint64_t v2 = v49;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v41 = *v2;
      uint64_t v55 = *v2;
      *uint64_t v2 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeSet.copy()();
        uint64_t v41 = v55;
      }
      uint64_t v42 = *(void *)(v41 + 48) + v36 * v27;
      uint64_t v21 = (uint64_t)v48;
      outlined init with take of Participant(v42, (uint64_t)v48, (uint64_t (*)(void))type metadata accessor for Participant);
      specialized _NativeSet._delete(at:)(v36);
      *uint64_t v2 = v55;
      swift_bridgeObjectRelease();
      (*v46)(v21, 0, 1, v54);
    }
    else
    {
LABEL_6:
      swift_bridgeObjectRelease();
      uint64_t v21 = (uint64_t)v48;
      (*v46)((uint64_t)v48, 1, 1, v54);
      uint64_t v2 = v49;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v21, &demangling cache variable for type metadata for Participant?);
    uint64_t result = outlined destroy of Participant((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Participant);
    a1 = v50;
    uint64_t v7 = v47;
    unint64_t v19 = v52;
    int64_t v20 = v53;
  }
  uint64_t v26 = v20 + 5;
  if (v20 + 5 >= v45) {
    return swift_release();
  }
  unint64_t v24 = *(void *)(v44 + 8 * v26);
  if (v24)
  {
    int64_t v25 = v20 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v25 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v25 >= v45) {
      return swift_release();
    }
    unint64_t v24 = *(void *)(v44 + 8 * v25);
    ++v26;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

void *specialized LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, char *a8)
{
  id v88 = a7;
  id v89 = a6;
  uint64_t v90 = a3;
  uint64_t v91 = a5;
  uint64_t v92 = a2;
  uint64_t v93 = a4;
  uint64_t v84 = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  uint64_t v80 = *(void *)(v9 - 8);
  uint64_t v81 = v9;
  MEMORY[0x1F4188790](v9);
  id v78 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, [UInt64]>);
  uint64_t v82 = *(void *)(v11 - 8);
  uint64_t v83 = v11;
  MEMORY[0x1F4188790](v11);
  id v79 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for Participant();
  uint64_t v85 = *(void *)(v77 - 8);
  MEMORY[0x1F4188790](v77);
  uint64_t v86 = v13;
  uint64_t v87 = (uint64_t)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = OBJC_IVAR____TtC15GroupActivities11LinkManager_lock;
  id v23 = objc_allocWithZone(MEMORY[0x1E4F28FD0]);
  unint64_t v24 = a8;
  *(void *)&a8[v22] = objc_msgSend(v23, sel_init);
  *(void *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger] = 0;
  int64_t v25 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager__attachmentLedgerTopic];
  v94[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedgerTopic?);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v25, v21, v18);
  *(void *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_pendingLocalAttachments] = MEMORY[0x1E4FBC868];
  uint64_t v26 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager__attachments];
  uint64_t v27 = MEMORY[0x1E4FBC860];
  v94[0] = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LinkManager.Attachment]);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v26, v17, v14);
  if ((v27 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v28 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else {
    unint64_t v28 = MEMORY[0x1E4FBC870];
  }
  uint64_t v29 = v84;
  uint64_t v30 = v92;
  uint64_t v31 = v93;
  *(void *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_cancellables] = v28;
  v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_state] = 0;
  v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_hasConnectedOnce] = 0;
  char v32 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_receivedDataHandler];
  *(void *)char v32 = 0;
  *((void *)v32 + 1) = 0;
  uint64_t v33 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_onFirstConnectedHandler];
  *(void *)uint64_t v33 = 0;
  *((void *)v33 + 1) = 0;
  Swift::Int v34 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_invalidationHandler];
  *(void *)Swift::Int v34 = 0;
  *((void *)v34 + 1) = 0;
  uint64_t v35 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_requestEncryptionKeysHandler];
  *(void *)uint64_t v35 = 0;
  *((void *)v35 + 1) = 0;
  unint64_t v36 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_identifier];
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v84 = *(void *)(v37 - 8);
  unsigned __int8 v38 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 16);
  v38(v36, v29, v37);
  v38(&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_groupUUID], v30, v37);
  *(void *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_topic] = v31;
  uint64_t v39 = v91;
  outlined init with copy of Participant(v91, (uint64_t)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant], (uint64_t (*)(void))type metadata accessor for Participant);
  id v40 = v88;
  id v41 = v89;
  *(void *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessengerConfig] = v89;
  *(void *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_featureFlags] = v40;
  swift_retain();
  id v89 = v41;
  id v42 = v40;

  uint64_t v43 = (objc_class *)type metadata accessor for LinkManager(0);
  v95.receiver = v24;
  v95.super_class = v43;
  uint64_t v44 = v39;
  id v45 = objc_msgSendSuper2(&v95, sel_init);
  uint64_t v46 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v47 = v39;
  uint64_t v48 = v87;
  uint64_t v49 = v93;
  outlined init with copy of Participant(v47, v87, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v50 = v29;
  unint64_t v51 = (*(unsigned __int8 *)(v85 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = v46;
  outlined init with take of Participant(v48, v52 + v51, (uint64_t (*)(void))type metadata accessor for Participant);
  int64_t v53 = *(void (**)(void (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(*(void *)v49 + 328);
  id v54 = v45;
  v53(partial apply for closure #1 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:), v52);
  id v88 = v42;
  uint64_t v55 = v42;
  int v56 = v54;
  if (objc_msgSend(v55, sel_unreliableMessengerEnabled))
  {
    uint64_t v57 = UUID.uuidString.getter();
    uint64_t v87 = v37;
    uint64_t v58 = v57;
    uint64_t v60 = v59;
    uint64_t v61 = *(void *)(v91 + *(int *)(v77 + 24));
    uint64_t v62 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type LinkManager and conformance LinkManager, (void (*)(uint64_t))type metadata accessor for LinkManager);
    uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, id, void *, uint64_t))(*(void *)v90 + 256);
    uint64_t v64 = v56;
    uint64_t v65 = v62;
    uint64_t v49 = v93;
    uint64_t v66 = v63(v92, v58, v60, v61, v89, v56, v65);
    swift_bridgeObjectRelease();

    uint64_t v67 = v78;
    (*(void (**)(void))(*(void *)v49 + 440))();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt64]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[UInt64 : PubSubTopic.Participant]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
    uint64_t v68 = v79;
    uint64_t v69 = v81;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v67, v69);
    unint64_t v70 = (void (*)(uint64_t *, void))UnreliableMessenger.$activeReliableSubscribers.modify();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, [UInt64]> and conformance Publishers.Map<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, [UInt64]>);
    uint64_t v71 = v83;
    Publisher<>.assign(to:)();
    uint64_t v72 = v71;
    uint64_t v37 = v87;
    (*(void (**)(char *, uint64_t))(v82 + 8))(v68, v72);
    v70(v94, 0);
    *(void *)&v64[OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger] = v66;
    uint64_t v44 = v91;
    swift_release();
  }
  uint64_t v73 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v74 = *(void (**)(void, uint64_t))(*(void *)v49 + 352);
  swift_retain();
  v74(partial apply for closure #3 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:), v73);
  swift_release();
  swift_release();

  outlined destroy of Participant(v44, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
  v75(v92, v37);
  v75(v50, v37);
  swift_release();
  return v56;
}

uint64_t specialized _NativeDictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  uint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(*a1, a2);
}

uint64_t specialized GroupSession.$receivedDataPublisher.getter()
{
  uint64_t v1 = v0 + direct field offset for GroupSession._receivedDataPublisher;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t specialized GroupSession.$receivedAttachmentPublisher.getter()
{
  uint64_t v1 = v0 + direct field offset for GroupSession._receivedAttachmentPublisher;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t specialized GroupSession.$catchupNeededPublisher.getter()
{
  uint64_t v1 = v0 + direct field offset for GroupSession._catchupNeededPublisher;
  swift_beginAccess();
  return *(void *)v1;
}

void *sub_1A3798548@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(uint64_t *__return_ptr))GroupSession.state.getter, a1);
}

uint64_t sub_1A3798560(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for GroupSession.state : <A>GroupSession<A>(a1, a2, a3, a4, (uint64_t (*)(id *))GroupSession.state.setter);
}

uint64_t sub_1A3798578()
{
  return 16;
}

__n128 sub_1A3798584(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A3798590()
{
  return GroupSession.activity.getter();
}

void sub_1A37985B4(uint64_t a1)
{
}

uint64_t sub_1A37985D8()
{
  return 16;
}

__n128 sub_1A37985E4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t specialized GroupSession.$state.setter(uint64_t a1)
{
  type metadata accessor for GroupSession.State();
  uint64_t v2 = type metadata accessor for Published.Publisher();
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - v3, a1);
  swift_beginAccess();
  type metadata accessor for Published();
  Published.projectedValue.setter();
  return swift_endAccess();
}

uint64_t GroupSession.invalidateIfWaiting()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)(v2 + *(void *)(*(void *)v2 + 288));
  aBlock[4] = a1;
  uint64_t v17 = v2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a2;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v12, v8, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void specialized GroupSession.activity.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v10 - v5;
  _OWORD v10[2] = v3;
  uint64_t v11 = *(void *)(v7 + 88);
  uint64_t v8 = v11;
  swift_getKeyPath();
  v10[0] = v3;
  v10[1] = v8;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  swift_retain();
  uint64_t v9 = static Published.subscript.setter();
  GroupSession.activity.didset(v9);
}

id outlined copy of GroupSession<A>.State<A>(id result)
{
  if ((unint64_t)result >= 2) {
    return result;
  }
  return result;
}

void outlined consume of GroupSession<A>.State<A>(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

uint64_t specialized GroupSession.$activity.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Published.Publisher();
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - v3, a1);
  swift_beginAccess();
  type metadata accessor for Published();
  Published.projectedValue.setter();
  return swift_endAccess();
}

uint64_t sub_1A3798C60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GroupSession.activeParticipants.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A3798C8C()
{
  return GroupSession.activeParticipants.setter();
}

uint64_t sub_1A3798CC8()
{
  return 16;
}

__n128 sub_1A3798CD4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A3798CE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GroupSession.internalActiveParticipants.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A3798D0C()
{
  return GroupSession.internalActiveParticipants.setter();
}

uint64_t sub_1A3798D38()
{
  return 16;
}

__n128 sub_1A3798D44(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_1A3798D50@<X0>(void *a1@<X8>)
{
  return keypath_getTm((void *(*)(uint64_t *__return_ptr))GroupSession.internalState.getter, a1);
}

void *keypath_getTm@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X3>, void *a2@<X8>)
{
  __n128 result = a1(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1A3798DA8(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for GroupSession.state : <A>GroupSession<A>(a1, a2, a3, a4, (uint64_t (*)(id *))GroupSession.internalState.setter);
}

uint64_t sub_1A3798DC0()
{
  return 16;
}

__n128 sub_1A3798DCC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void partial apply for closure #1 in GroupSession.updatePublicState()()
{
  closure #1 in GroupSession.updatePublicState()(v0);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t specialized GroupSession.$internalState.setter(uint64_t a1)
{
  type metadata accessor for GroupSession.State();
  uint64_t v2 = type metadata accessor for Published.Publisher();
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - v3, a1);
  swift_beginAccess();
  type metadata accessor for Published();
  Published.projectedValue.setter();
  return swift_endAccess();
}

uint64_t lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for OS_dispatch_queue(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A3798FC8()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t partial apply for closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t partial apply for closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2)
{
  return closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t partial apply for closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, void *a2)
{
  return closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2);
}

void partial apply for closure #5 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
}

void partial apply for closure #6 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1A3799048()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1A3799060()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v4 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2, a3, a4, v4 + v10, v11);
}

uint64_t partial apply for closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t partial apply for closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  return closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1);
}

uint64_t partial apply for closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1)
{
  return closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, v1[4], v1[2], v1[3], "LinkManager invalidated with error=%s");
}

uint64_t partial apply for closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1)
{
  return closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1);
}

uint64_t partial apply for closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t partial apply for closure #14 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1)
{
  return closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, v1[4], v1[2], v1[3], "Topic invalidated with error=%s");
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
      uint64_t result = static _SetStorage.allocate(capacity:)();
      unint64_t v3 = result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v5) {
        return v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  unint64_t v3 = MEMORY[0x1E4FBC870];
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  unint64_t v8 = v3 + 56;
  unint64_t v22 = v1 & 0xC000000000000001;
  unint64_t v19 = v1 + 32;
  uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v21 = v1;
  while (v22)
  {
    uint64_t result = MEMORY[0x1A624E900](v7, v1);
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_26;
    }
LABEL_18:
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v11 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      uint64_t v16 = ~v11;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
      do
      {
        uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
        if (result)
        {
          uint64_t result = swift_release();
          unint64_t v1 = v21;
          goto LABEL_11;
        }
        unint64_t v12 = (v12 + 1) & v16;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
        uint64_t v15 = 1 << v12;
      }
      while ((v14 & (1 << v12)) != 0);
      unint64_t v1 = v21;
    }
    *(void *)(v8 + 8 * v13) = v15 | v14;
    *(void *)(*(void *)(v3 + 48) + 8 * v12) = v9;
    uint64_t v17 = *(void *)(v3 + 16);
    BOOL v10 = __OFADD__(v17, 1);
    uint64_t v18 = v17 + 1;
    if (v10) {
      goto LABEL_27;
    }
    *(void *)(v3 + 16) = v18;
LABEL_11:
    if (v7 == v5) {
      return v3;
    }
  }
  if (v7 >= *(void *)(v20 + 16)) {
    goto LABEL_28;
  }
  unint64_t v9 = *(void *)(v19 + 8 * v7);
  uint64_t result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A3799524()
{
  return objectdestroy_88Tm(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in GroupSession.requestEncryptionKey(for:)()
{
  return GroupSession.invalidationBlock(execute:)(partial apply for closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:));
}

uint64_t sub_1A3799588()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void partial apply for closure #1 in GroupSession.deinit()
{
  closure #1 in GroupSession.deinit(v0);
}

uint64_t partial apply for closure #1 in GroupSession.join()()
{
  return closure #1 in GroupSession.join()(v0);
}

uint64_t sub_1A37995D0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)()
{
  closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(*(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in GroupSession.leave()()
{
  return GroupSession.invalidationBlock(execute:)(partial apply for closure #1 in closure #1 in GroupSession.leave());
}

uint64_t sub_1A379960C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in GroupSession.end()()
{
  return closure #1 in GroupSession.end()(v0);
}

uint64_t sub_1A3799624()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in GroupSession.requestForegroundPresentation()()
{
  return closure #1 in GroupSession.requestForegroundPresentation()(v0);
}

void partial apply for closure #1 in GroupSession.invalidateIfWaiting()()
{
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupSessionErrors and conformance GroupSessionErrors;
  if (!lazy protocol witness table cache variable for type GroupSessionErrors and conformance GroupSessionErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionErrors and conformance GroupSessionErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupSessionErrors and conformance GroupSessionErrors;
  if (!lazy protocol witness table cache variable for type GroupSessionErrors and conformance GroupSessionErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionErrors and conformance GroupSessionErrors);
  }
  return result;
}

uint64_t partial apply for closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:)(uint64_t a1)
{
  return closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v63 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v70 = (uint64_t)&v56 - v8;
  uint64_t v76 = type metadata accessor for Participant();
  uint64_t v9 = *(void *)(v76 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v76);
  uint64_t v58 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v60 = (uint64_t)&v56 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v56 = (uint64_t)&v56 - v14;
  uint64_t v15 = type metadata accessor for PubSubTopic.Participant();
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v74 = (char *)&v56 - v20;
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v66 = a1 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v67 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v72 = v19 + 32;
  uint64_t v73 = v19 + 16;
  uint64_t v65 = a2 + 16;
  uint64_t v77 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  uint64_t v57 = v9;
  uint64_t v69 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v75 = v19;
  uint64_t v71 = (void (**)(char *, uint64_t))(v19 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v26 = 0;
  unint64_t v59 = MEMORY[0x1E4FBC860];
  uint64_t v64 = a1;
  uint64_t v62 = v15;
  if (!v24) {
    goto LABEL_8;
  }
LABEL_4:
  unint64_t v27 = __clz(__rbit64(v24));
  v24 &= v24 - 1;
  for (unint64_t i = v27 | (v26 << 6); ; unint64_t i = __clz(__rbit64(v34)) + (v26 << 6))
  {
    uint64_t v37 = v74;
    uint64_t v36 = v75;
    (*(void (**)(char *, unint64_t, uint64_t))(v75 + 16))(v74, *(void *)(a1 + 56) + *(void *)(v75 + 72) * i, v15);
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v18, v37, v15);
    if ((PubSubTopic.Participant.isSaltVerified.getter() & 1) == 0
      || (swift_beginAccess(), (uint64_t Strong = swift_weakLoadStrong()) == 0))
    {
      uint64_t v29 = PubSubTopic.Participant.participantID.getter();
      uint64_t v30 = v70;
      UUID.init(_:)();
      uint64_t v31 = v76;
      *(void *)(v30 + *(int *)(v76 + 24)) = v29;
      char v32 = (void *)(v30 + *(int *)(v31 + 20));
      *char v32 = 0;
      v32[1] = 0xE000000000000000;
      (*v69)(v30, 0, 1, v31);
      goto LABEL_6;
    }
    MEMORY[0x1F4188790](Strong);
    uint64_t v39 = type metadata accessor for AnyGroupActivity(0);
    *(&v56 - 2) = v39;
    uint64_t v40 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
    *(&v56 - 1) = v40;
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    *(&v56 - 2) = v39;
    *(&v56 - 1) = v40;
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    uint64_t v42 = swift_release();
    uint64_t v43 = v78;
    MEMORY[0x1F4188790](v42);
    *(&v56 - 2) = (uint64_t)v18;
    uint64_t v44 = v63;
    uint64_t v45 = v68;
    specialized Sequence.first(where:)((uint64_t (*)(char *))partial apply for closure #1 in closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v43, v63);
    uint64_t v68 = v45;
    swift_bridgeObjectRelease();
    uint64_t v46 = v76;
    if ((*v77)(v44, 1, v76) == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v44, &demangling cache variable for type metadata for Participant?);
    }
    else
    {
      uint64_t v47 = v44;
      uint64_t v48 = v60;
      outlined init with take of Participant(v47, v60, (uint64_t (*)(void))type metadata accessor for Participant);
      swift_bridgeObjectRetain();
      uint64_t v49 = String.count.getter();
      swift_bridgeObjectRelease();
      if (v49)
      {
        swift_release();
        uint64_t v50 = v70;
        outlined init with take of Participant(v48, v70, (uint64_t (*)(void))type metadata accessor for Participant);
        (*v69)(v50, 0, 1, v46);
        a1 = v64;
        uint64_t v31 = v46;
        uint64_t v15 = v62;
        uint64_t v30 = v50;
        goto LABEL_6;
      }
      outlined destroy of Participant(v48, (uint64_t (*)(void))type metadata accessor for Participant);
    }
    a1 = v64;
    uint64_t v51 = PubSubTopic.Participant.participantID.getter();
    specialized Set._Variant.insert(_:)(&v78, v51);
    swift_release();
    uint64_t v30 = v70;
    uint64_t v31 = v76;
    (*v69)(v70, 1, 1, v76);
    uint64_t v15 = v62;
LABEL_6:
    (*v71)(v18, v15);
    if ((*v77)(v30, 1, v31) == 1)
    {
      uint64_t result = outlined destroy of OS_dispatch_queue.SchedulerOptions?(v30, &demangling cache variable for type metadata for Participant?);
      if (v24) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v52 = v56;
      outlined init with take of Participant(v30, v56, (uint64_t (*)(void))type metadata accessor for Participant);
      outlined init with take of Participant(v52, v58, (uint64_t (*)(void))type metadata accessor for Participant);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v59 + 16) + 1, 1, v59);
      }
      unint64_t v54 = *(void *)(v59 + 16);
      unint64_t v53 = *(void *)(v59 + 24);
      if (v54 >= v53 >> 1) {
        unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1, v59);
      }
      unint64_t v55 = v59;
      *(void *)(v59 + 16) = v54 + 1;
      uint64_t result = outlined init with take of Participant(v58, v55+ ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(void *)(v57 + 72) * v54, (uint64_t (*)(void))type metadata accessor for Participant);
      if (v24) {
        goto LABEL_4;
      }
    }
LABEL_8:
    if (__OFADD__(v26++, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v26 >= v67) {
      goto LABEL_39;
    }
    unint64_t v34 = *(void *)(v66 + 8 * v26);
    if (!v34) {
      break;
    }
LABEL_20:
    unint64_t v24 = (v34 - 1) & v34;
  }
  int64_t v35 = v26 + 1;
  if (v26 + 1 >= v67) {
    goto LABEL_39;
  }
  unint64_t v34 = *(void *)(v66 + 8 * v35);
  if (v34) {
    goto LABEL_19;
  }
  int64_t v35 = v26 + 2;
  if (v26 + 2 >= v67) {
    goto LABEL_39;
  }
  unint64_t v34 = *(void *)(v66 + 8 * v35);
  if (v34) {
    goto LABEL_19;
  }
  int64_t v35 = v26 + 3;
  if (v26 + 3 >= v67) {
    goto LABEL_39;
  }
  unint64_t v34 = *(void *)(v66 + 8 * v35);
  if (v34) {
    goto LABEL_19;
  }
  int64_t v35 = v26 + 4;
  if (v26 + 4 >= v67)
  {
LABEL_39:
    swift_release();
    return v59;
  }
  unint64_t v34 = *(void *)(v66 + 8 * v35);
  if (v34)
  {
LABEL_19:
    int64_t v26 = v35;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v26 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v26 >= v67) {
      goto LABEL_39;
    }
    unint64_t v34 = *(void *)(v66 + 8 * v26);
    ++v35;
    if (v34) {
      goto LABEL_20;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant();
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v28 = (uint64_t)&v27 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v30 = *(void *)(a1 + 16);
  if (v30)
  {
    uint64_t v13 = 0;
    uint64_t v29 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v14 = *(void *)(v10 + 72);
    do
    {
      outlined init with copy of Participant(v29 + v14 * v13, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Participant);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      swift_bridgeObjectRetain();
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v17 = &v12[*(int *)(v4 + 20)];
      String.hash(into:)();
      uint64_t v18 = *(int *)(v4 + 24);
      Hasher._combine(_:)(*(void *)&v12[v18]);
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v21 = v19 & ~v20;
      uint64_t v22 = *(void *)(a2 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21;
      uint64_t v31 = v13;
      if (v22)
      {
        uint64_t v23 = ~v20;
        while (1)
        {
          outlined init with copy of Participant(*(void *)(a2 + 48) + v21 * v14, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Participant);
          if (static UUID.== infix(_:_:)())
          {
            unint64_t v24 = &v7[*(int *)(v4 + 20)];
            BOOL v25 = *(void *)v24 == *(void *)v17 && *((void *)v24 + 1) == *((void *)v17 + 1);
            if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)())
              && *(void *)&v7[*(int *)(v4 + 24)] == *(void *)&v12[v18])
            {
              break;
            }
          }
          outlined destroy of Participant((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Participant);
          unint64_t v21 = (v21 + 1) & v23;
          if (((*(void *)(a2 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
            goto LABEL_3;
          }
        }
        outlined destroy of Participant((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Participant);
      }
      else
      {
LABEL_3:
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v16 = v28;
        outlined init with copy of Participant((uint64_t)v12, v28, (uint64_t (*)(void))type metadata accessor for Participant);
        uint64_t v32 = a2;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v16, v21, isUniquelyReferenced_nonNull_native);
        a2 = v32;
      }
      swift_bridgeObjectRelease();
      uint64_t v13 = v31 + 1;
      outlined destroy of Participant((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Participant);
    }
    while (v13 != v30);
  }
  return a2;
}

uint64_t specialized GroupSession<>.init(tuConversationActivitySession:groupUUID:initiatorHandle:localParticipantIdentifier:localParticipantHandle:unreliableMessengerConfig:topicManager:audioSessionAssertionManager:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v103 = a3;
  uint64_t v107 = a8;
  uint64_t v100 = a5;
  uint64_t v101 = a6;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.Timestamps);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v102 = (uint64_t)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for Participant();
  MEMORY[0x1F4188790](v99);
  uint64_t v113 = (uint64_t)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for AnyGroupActivity(0);
  MEMORY[0x1F4188790](v98);
  uint64_t v111 = (uint64_t *)((char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v97 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v110 = (uint64_t)&v87 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v109 = (uint64_t)&v87 - v24;
  uint64_t v25 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  uint64_t v96 = (uint64_t)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v95 = (uint64_t)&v87 - v29;
  MEMORY[0x1F4188790](v28);
  uint64_t v108 = (uint64_t)&v87 - v30;
  id v31 = objc_msgSend(a1, sel_endpoint);
  if (v31)
  {
    id v89 = v31;
    uint64_t v90 = a7;
    uint64_t v105 = v19;
    uint64_t v106 = v18;
    uint64_t v91 = a4;
    uint64_t v92 = a9;
    uint64_t v93 = a10;
    id v32 = objc_msgSend(a1, sel_activity);
    id v33 = objc_msgSend(v32, sel_metadata);

    uint64_t v94 = a2;
    if (v33)
    {
      uint64_t v34 = v108;
      GroupActivityMetadata.init(_:)(v33, v108);
    }
    else
    {
      if (one-time initialization token for generic != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
      uint64_t v37 = __swift_project_value_buffer(v36, (uint64_t)static GroupActivityMetadata.ActivityType.generic);
      uint64_t v34 = v108;
      outlined init with copy of Participant(v37, v108, type metadata accessor for GroupActivityMetadata.ActivityType);
      unsigned __int8 v38 = (int *)type metadata accessor for GroupActivityMetadata(0);
      uint64_t v39 = (void *)(v34 + v38[5]);
      *uint64_t v39 = 0;
      v39[1] = 0;
      uint64_t v40 = (void *)(v34 + v38[6]);
      *uint64_t v40 = 0;
      v40[1] = 0;
      *(void *)(v34 + v38[7]) = 0;
      uint64_t v41 = v34 + v38[8];
      uint64_t v42 = type metadata accessor for URL();
      uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56);
      v43(v41, 1, 1, v42);
      *(void *)(v34 + v38[9]) = 0;
      *(unsigned char *)(v34 + v38[10]) = dyld_program_sdk_at_least() ^ 1;
      v43(v34 + v38[11], 1, 1, v42);
      uint64_t v44 = v34 + v38[12];
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v45 = qword_1EB58E160;
      uint64_t v46 = qword_1EB58E178;
      *(unsigned char *)uint64_t v44 = static SceneAssociationBehavior.default;
      *(void *)(v44 + 8) = v45;
      *(_OWORD *)(v44 + 16) = xmmword_1EB58E168;
      *(void *)(v44 + 32) = v46;
      *(unsigned char *)(v34 + v38[13]) = 0;
      *(void *)(v34 + v38[14]) = 2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2 = v94;
    }
    uint64_t v47 = v106;
    id v104 = a1;
    swift_storeEnumTagMultiPayload();
    id v48 = objc_msgSend(a1, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v49 = v105;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 16))(v110, a2, v47);
    id v50 = objc_msgSend(v104, sel_activity);
    uint64_t v51 = v95;
    outlined init with copy of Participant(v34, v95, type metadata accessor for AnyGroupActivity.MetadataProvider);
    id v52 = objc_msgSend(v50, sel_activityIdentifier);
    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v87 = v53;

    uint64_t v54 = v96;
    outlined init with copy of Participant(v51, v96, type metadata accessor for AnyGroupActivity.MetadataProvider);
    id v55 = objc_msgSend(v50, sel_applicationContext);
    uint64_t v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v57 = v47;
    uint64_t v59 = v58;

    id v60 = objc_msgSend(v50, sel_UUID);
    uint64_t v61 = v97;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    outlined destroy of Participant(v51, type metadata accessor for AnyGroupActivity.MetadataProvider);
    uint64_t v62 = (char *)v111;
    uint64_t v63 = v87;
    *uint64_t v111 = v88;
    *((void *)v62 + 1) = v63;
    uint64_t v64 = (int *)v98;
    outlined init with take of Participant(v54, (uint64_t)&v62[*(int *)(v98 + 20)], type metadata accessor for AnyGroupActivity.MetadataProvider);
    uint64_t v65 = (uint64_t *)&v62[v64[6]];
    uint64_t *v65 = v56;
    v65[1] = v59;
    uint64_t v66 = v49;
    id v67 = v104;
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v62[v64[7]], v61, v57);
    uint64_t v68 = &v62[v64[8]];
    *(void *)uint64_t v68 = 0;
    *((void *)v68 + 1) = 0;
    unsigned __int8 v69 = objc_msgSend(v67, sel_isLocallyInitiated);
    LODWORD(v98) = objc_msgSend(v67, sel_isLightweightPrimaryInitiated);
    uint64_t v70 = v113;
    uint64_t v71 = v100;
    UUID.init(_:)();
    uint64_t v72 = v99;
    *(void *)(v70 + *(int *)(v99 + 24)) = v71;
    uint64_t v73 = (void *)(v70 + *(int *)(v72 + 20));
    uint64_t v74 = v90;
    *uint64_t v73 = v101;
    v73[1] = v74;
    unsigned __int8 v75 = objc_msgSend(v67, sel_isFirstJoin);
    id v76 = objc_msgSend(v67, sel_distributionCount);
    id v77 = objc_msgSend(v67, sel_persistentSceneIdentifier);
    if (v77)
    {
      uint64_t v78 = v77;
      uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v81 = v80;
    }
    else
    {
      uint64_t v79 = 0;
      uint64_t v81 = 0;
    }
    uint64_t v82 = v103;
    uint64_t v83 = v93;
    outlined init with copy of AudioSessionAssertionManager(v93, (uint64_t)v112);
    id v84 = v67;
    uint64_t v85 = v102;
    specialized GroupSession.Timestamps.init(activitySession:)(v84, v102);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>);
    swift_allocObject();
    uint64_t v18 = specialized GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(v109, v110, v82, v91, (uint64_t)v111, v89, 0x7669746341796E61, (void *)0xEB00000000797469, v69, v98, v113, v75, 0, (uint64_t)v76, v107, v79, v81, v92, (uint64_t)v112,
            v85);
    __swift_destroy_boxed_opaque_existential_1Tm(v83);
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v94, v106);
    outlined destroy of Participant(v108, type metadata accessor for AnyGroupActivity.MetadataProvider);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    swift_allocError();
    *int64_t v35 = 4;
    swift_willThrow();

    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(a10);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a2, v18);
  }
  return v18;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      id v7 = v6;
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  BOOL v26;
  uint64_t result;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  unint64_t v2 = type metadata accessor for Participant();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  Swift::Int v8 = (char *)&v31 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Participant>);
    uint64_t v10 = static _SetStorage.allocate(capacity:)();
    unint64_t v11 = 0;
    unint64_t v12 = v10 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v31 = v9;
    uint64_t v32 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v3 + 72);
    uint64_t v15 = v9;
    while (1)
    {
      id v33 = v11;
      outlined init with copy of Participant(v32 + v14 * v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Participant);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v16 = &v8[*(int *)(v2 + 20)];
      String.hash(into:)();
      uint64_t v17 = *(int *)(v2 + 24);
      Hasher._combine(_:)(*(void *)&v8[v17]);
      uint64_t v18 = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v10 + 32);
      char v20 = v18 & ~v19;
      uint64_t v21 = v20 >> 6;
      uint64_t v22 = *(void *)(v12 + 8 * (v20 >> 6));
      uint64_t v23 = 1 << v20;
      if (((1 << v20) & v22) != 0)
      {
        uint64_t v24 = ~v19;
        do
        {
          outlined init with copy of Participant(*(void *)(v10 + 48) + v20 * v14, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Participant);
          if (static UUID.== infix(_:_:)())
          {
            uint64_t v25 = &v6[*(int *)(v2 + 20)];
            uint64_t v26 = *(void *)v25 == *(void *)v16 && *((void *)v25 + 1) == *((void *)v16 + 1);
            if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)())
              && *(void *)&v6[*(int *)(v2 + 24)] == *(void *)&v8[v17])
            {
              outlined destroy of Participant((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Participant);
              outlined destroy of Participant((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Participant);
              uint64_t v15 = v31;
              goto LABEL_4;
            }
          }
          outlined destroy of Participant((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Participant);
          char v20 = (v20 + 1) & v24;
          uint64_t v21 = v20 >> 6;
          uint64_t v22 = *(void *)(v12 + 8 * (v20 >> 6));
          uint64_t v23 = 1 << v20;
        }
        while ((v22 & (1 << v20)) != 0);
        uint64_t v15 = v31;
      }
      *(void *)(v12 + 8 * v21) = v23 | v22;
      uint64_t result = outlined init with take of Participant((uint64_t)v8, *(void *)(v10 + 48) + v20 * v14, (uint64_t (*)(void))type metadata accessor for Participant);
      uint64_t v28 = *(void *)(v10 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29) {
        break;
      }
      *(void *)(v10 + 16) = v30;
LABEL_4:
      unint64_t v11 = v33 + 1;
      if (v33 + 1 == v15) {
        return v10;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC870];
  }
  return result;
}

uint64_t specialized GroupSession.__allocating_init(activitySession:publishQueue:)(uint64_t *a1, void *a2)
{
  id v77 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.Timestamps);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v68 = (uint64_t)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v2 + 80);
  uint64_t v7 = *(void *)(v2 + 88);
  uint64_t v71 = v2;
  uint64_t v85 = v7;
  uint64_t v79 = v6;
  uint64_t v8 = type metadata accessor for GroupSession.Timestamps();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v70 = (uint64_t)&v61 - v9;
  uint64_t v10 = type metadata accessor for Participant();
  uint64_t v11 = v10 - 8;
  MEMORY[0x1F4188790](v10);
  uint64_t v69 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  id v67 = (uint64_t *)((char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v73 = (char *)&v61 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v78 = (uint64_t)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v72 = v20;
  uint64_t v24 = *(void (**)(void))(v20 + 16);
  unsigned __int8 v75 = (char *)&v61 - v25;
  v24();
  uint64_t v66 = *(uint64_t *)((char *)a1 + direct field offset for GroupSession.linkManager);
  id v76 = v23;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v23, v66 + OBJC_IVAR____TtC15GroupActivities11LinkManager_groupUUID, v19);
  uint64_t v26 = (uint64_t)a1 + direct field offset for GroupSession.initiator;
  char v27 = (uint64_t *)((char *)a1 + direct field offset for GroupSession.initiator + *(int *)(v11 + 28));
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  id v30 = objc_allocWithZone(MEMORY[0x1E4F5B148]);
  swift_bridgeObjectRetain();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v32 = (void *)MEMORY[0x1A624DFA0](v28, v29);
  swift_bridgeObjectRelease();
  id v33 = objc_msgSend(v30, sel_initWithUUID_accountIdentifier_, isa, v32);

  objc_msgSend(v33, sel__setParticipantIdentifier_, *(void *)(v26 + *(int *)(v11 + 32)));
  id v34 = objc_msgSend(v33, sel_accountIdentifier);

  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;

  uint64_t v82 = v13;
  uint64_t v38 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
  uint64_t v83 = v38;
  swift_getKeyPath();
  uint64_t v80 = v13;
  uint64_t v81 = v38;
  swift_getKeyPath();
  uint64_t v39 = v73;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v40 = v74;
  GroupActivity.init(activity:)(v39, v79, v85, v78);
  if (v40)
  {

    swift_bridgeObjectRelease();
    uint64_t v41 = *(void (**)(char *, uint64_t))(v72 + 8);
    v41(v76, v19);
    v41(v75, v19);
  }
  else
  {
    uint64_t v42 = (void **)((char *)a1 + *(void *)(*a1 + 248));
    uint64_t v43 = swift_beginAccess();
    uint64_t v74 = v37;
    uint64_t v44 = *v42;
    MEMORY[0x1F4188790](v43);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    swift_getKeyPath();
    uint64_t v73 = v44;
    uint64_t v46 = v67;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v47 = (void *)v46[1];
    uint64_t v72 = *v46;
    uint64_t v65 = v47;
    swift_bridgeObjectRetain();
    outlined destroy of Participant((uint64_t)v46, type metadata accessor for AnyGroupActivity);
    uint64_t v48 = *a1;
    LODWORD(v67) = *((unsigned __int8 *)a1 + *(void *)(*a1 + 256));
    int v64 = *((unsigned __int8 *)a1 + *(void *)(v48 + 264));
    uint64_t v49 = v66;
    uint64_t v50 = v69;
    outlined init with copy of Participant(v66 + OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, v69, (uint64_t (*)(void))type metadata accessor for Participant);
    uint64_t v51 = (unsigned __int8 *)a1 + *(void *)(*a1 + 272);
    swift_beginAccess();
    int v63 = *v51;
    uint64_t v52 = *a1;
    uint64_t v62 = *(uint64_t *)((char *)a1 + *(void *)(*a1 + 360));
    uint64_t v53 = *(void **)(v49 + OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessengerConfig);
    uint64_t v54 = (uint64_t)a1 + *(void *)(v52 + 232);
    swift_beginAccess();
    uint64_t v61 = *(void **)v54;
    uint64_t v66 = v35;
    uint64_t v55 = *(void *)(v54 + 8);
    uint64_t v56 = *(uint64_t *)((char *)a1 + direct field offset for GroupSession.topicManager);
    outlined init with copy of AudioSessionAssertionManager((uint64_t)a1 + *(void *)(*a1 + 312), (uint64_t)v84);
    uint64_t v57 = v68;
    outlined init with copy of URL?((uint64_t)a1 + *(void *)(*a1 + 240), v68, &demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.Timestamps);
    uint64_t v58 = v70;
    GroupSession.Timestamps.init<A>(_:)(v57, v70);
    uint64_t v38 = swift_allocObject();
    id v59 = v53;
    swift_bridgeObjectRetain();
    swift_retain();
    GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)((uint64_t)v75, (uint64_t)v76, v66, v74, v78, v73, v72, v65, v67, v64, v50, v63, v77, v62, v59, v61, v55, v56, (uint64_t)v84,
      v58);
  }
  return v38;
}

uint64_t sub_1A379B82C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8));
  swift_release();

  return MEMORY[0x1F4186498](v0, ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

void partial apply for closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)()
{
  type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 + 32);

  closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)(v1);
}

uint64_t sub_1A379B9F4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1A379BA04()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in GroupSession.cleanUpPlaybackSyncer()()
{
  return closure #1 in GroupSession.cleanUpPlaybackSyncer()();
}

uint64_t partial apply for closure #1 in GroupSession.registerPlaybackSyncerLink(_:)(uint64_t *a1)
{
  return closure #1 in GroupSession.registerPlaybackSyncerLink(_:)(a1);
}

uint64_t partial apply for closure #2 in GroupSession.registerPlaybackSyncerLink(_:)(uint64_t a1)
{
  return closure #2 in GroupSession.registerPlaybackSyncerLink(_:)(a1);
}

uint64_t sub_1A379BA60()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)()
{
  return closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)();
}

uint64_t partial apply for closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)(char *a1, uint64_t a2)
{
  return closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)(a1, a2);
}

uint64_t sub_1A379BAB8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PlaybackSyncer.Message, @in_guaranteed GroupSessionMessenger.MessageContext) -> ()(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
  return v3(a1, a1 + *(int *)(v4 + 48));
}

uint64_t partial apply for closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.connect()(void **a1)
{
  return closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.connect()(a1, v1[6], v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.connect()@<X0>(char *a1@<X0>, char *a2@<X8>)
{
  return closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.connect()(a1, *(void *)(v2 + 32), a2);
}

uint64_t partial apply for closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)()
{
  return closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1A379BB80()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type Capabilities and conformance Capabilities()
{
  unint64_t result = lazy protocol witness table cache variable for type Capabilities and conformance Capabilities;
  if (!lazy protocol witness table cache variable for type Capabilities and conformance Capabilities)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capabilities and conformance Capabilities);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Capabilities and conformance Capabilities;
  if (!lazy protocol witness table cache variable for type Capabilities and conformance Capabilities)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capabilities and conformance Capabilities);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Capabilities and conformance Capabilities;
  if (!lazy protocol witness table cache variable for type Capabilities and conformance Capabilities)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capabilities and conformance Capabilities);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Capabilities and conformance Capabilities;
  if (!lazy protocol witness table cache variable for type Capabilities and conformance Capabilities)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capabilities and conformance Capabilities);
  }
  return result;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in GroupSession<A>()
{
  return MEMORY[0x1E4F1ABE8];
}

uint64_t sub_1A379BD54@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + direct field offset for GroupSession.playbackSyncerLink);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t sub_1A379BDAC()
{
  uint64_t v0 = swift_retain();
  return GroupSession.playbackSyncerLink.setter(v0);
}

uint64_t sub_1A379BDD8()
{
  return 16;
}

__n128 sub_1A379BDE4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379BDF8()
{
  return 16;
}

__n128 sub_1A379BE04(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379BE10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GroupSession.receivedDataPublisher.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A379BE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_202Tm(a1, a2, a3, a4, GroupSession.receivedDataPublisher.setter);
}

uint64_t sub_1A379BE54()
{
  return 16;
}

__n128 sub_1A379BE60(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379BE6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GroupSession.receivedAttachmentPublisher.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A379BE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_202Tm(a1, a2, a3, a4, GroupSession.receivedAttachmentPublisher.setter);
}

uint64_t keypath_set_202Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = swift_retain();
  return a5(v6);
}

uint64_t sub_1A379BEE4()
{
  return 16;
}

__n128 sub_1A379BEF0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379BEFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GroupSession.catchupNeededPublisher.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A379BF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_202Tm(a1, a2, a3, a4, GroupSession.catchupNeededPublisher.setter);
}

uint64_t sub_1A379BF40()
{
  return 16;
}

__n128 sub_1A379BF4C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379BF58()
{
  return 16;
}

__n128 sub_1A379BF64(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379BF70()
{
  return GroupSession.$state.getter();
}

uint64_t sub_1A379BF94(uint64_t a1)
{
  return specialized GroupSession.$state.setter(a1);
}

uint64_t sub_1A379BFB8()
{
  return 16;
}

__n128 sub_1A379BFC4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379BFD0()
{
  return 16;
}

__n128 sub_1A379BFDC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379BFE8()
{
  return GroupSession.$activity.getter();
}

uint64_t sub_1A379C00C(uint64_t a1)
{
  return specialized GroupSession.$activity.setter(a1);
}

uint64_t sub_1A379C030()
{
  return 16;
}

__n128 sub_1A379C03C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379C048()
{
  return 16;
}

__n128 sub_1A379C054(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379C060()
{
  return GroupSession.$activeParticipants.getter();
}

uint64_t sub_1A379C084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for GroupSession.$activeParticipants : <A>GroupSession<A>(a1, a2, a3, a4, (uint64_t (*)(char *))GroupSession.$activeParticipants.setter);
}

uint64_t sub_1A379C0B0()
{
  return 16;
}

__n128 sub_1A379C0BC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379C0C8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*(void *)a1 + *(void *)(**(void **)a1 + 336));
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_1A379C128(uint64_t *a1)
{
  return GroupSession.capabilities.setter(*a1);
}

uint64_t sub_1A379C150()
{
  return 16;
}

__n128 sub_1A379C15C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379C168()
{
  return 16;
}

__n128 sub_1A379C174(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379C180()
{
  return GroupSession.$internalActiveParticipants.getter();
}

uint64_t sub_1A379C1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for GroupSession.$activeParticipants : <A>GroupSession<A>(a1, a2, a3, a4, (uint64_t (*)(char *))GroupSession.$internalActiveParticipants.setter);
}

uint64_t sub_1A379C1D0()
{
  return 16;
}

__n128 sub_1A379C1DC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379C1E8()
{
  return 16;
}

__n128 sub_1A379C1F4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379C200()
{
  return GroupSession.$internalState.getter();
}

uint64_t sub_1A379C224(uint64_t a1)
{
  return specialized GroupSession.$internalState.setter(a1);
}

uint64_t sub_1A379C248()
{
  return 16;
}

__n128 sub_1A379C254(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A379C260@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  a2[1] = result;
  return result;
}

uint64_t sub_1A379C2E8()
{
  return 32;
}

__n128 sub_1A379C2F4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1A379C308()
{
  return 32;
}

__n128 sub_1A379C314(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1A379C328()
{
  return 32;
}

__n128 sub_1A379C334(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1A379C340@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 272))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1A379C398(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 280))(*a1);
}

uint64_t sub_1A379C3E8()
{
  return 32;
}

__n128 sub_1A379C3F4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1A379C400@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 296))();
  *a2 = result;
  return result;
}

uint64_t sub_1A379C454(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 304);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A379C4B0()
{
  return 32;
}

__n128 sub_1A379C4BC(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1A379C4C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 320))();
  *a2 = result;
  return result;
}

uint64_t sub_1A379C51C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 328);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A379C578()
{
  return 32;
}

__n128 sub_1A379C584(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1A379C590@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 344))();
  *a2 = result;
  return result;
}

uint64_t sub_1A379C5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 352);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A379C640()
{
  return 32;
}

__n128 sub_1A379C64C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for GroupSessionErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GroupSessionErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *__n128 result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A379C7C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 11;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for GroupSessionErrors(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for GroupSessionErrors(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionErrors()
{
  return &type metadata for GroupSessionErrors;
}

ValueMetadata *type metadata accessor for Capabilities()
{
  return &type metadata for Capabilities;
}

uint64_t method lookup function for GroupSession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GroupSession);
}

uint64_t dispatch thunk of GroupSession.__allocating_init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return (*(uint64_t (**)(void))(v0 + 376))();
}

void *initializeBufferWithCopyOfBuffer for GroupSession.State(void *a1, void **a2)
{
  int v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for GroupSession.State(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for GroupSession.State(void **a1, void **a2)
{
  int v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF) {
      id v7 = v4;
    }
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    id v5 = v4;
    unsigned int v6 = *a1;
    *a1 = v4;
  }
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void **assignWithTake for GroupSession.State(void **a1, unint64_t *a2)
{
  int v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSession.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t getEnumTag for GroupSession.State(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for GroupSession.State(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *__n128 result = v2;
  return result;
}

uint64_t type metadata completion function for GroupSession.GroupSessionPlaybackSyncerLink()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for GroupSession.GroupSessionPlaybackSyncerLink()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for GroupSession.GroupSessionPlaybackSyncerLink(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GroupSession.GroupSessionPlaybackSyncerLink);
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.connected.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.connected.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.connected.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.groupSession.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.groupSession.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.groupSession.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.messenger.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.messenger.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.messenger.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.__allocating_init(groupSession:messenger:playbackSyncer:)()
{
  return (*(uint64_t (**)(void))(v0 + 392))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.connect()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.sendMessage(_:to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSession.Timestamps(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v9((uint64_t *)((char *)a1 + *(int *)(a3 + 36)), (uint64_t *)((char *)a2 + *(int *)(a3 + 36)), v7);
    uint64_t v10 = *(int *)(a3 + 40);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v11, (uint64_t *)v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for GroupSession.Timestamps(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  v8(a1 + *(int *)(a2 + 36), v4);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  }
  return result;
}

char *initializeWithCopy for GroupSession.Timestamps(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v8(&a1[*(int *)(a3 + 36)], &a2[*(int *)(a3 + 36)], v6);
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for GroupSession.Timestamps(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(&a1[*(int *)(a3 + 36)], &a2[*(int *)(a3 + 36)], v6);
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(&a1[v9], 1, v6);
  int v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

char *initializeWithTake for GroupSession.Timestamps(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v8(&a1[*(int *)(a3 + 36)], &a2[*(int *)(a3 + 36)], v6);
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for GroupSession.Timestamps(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(&a1[*(int *)(a3 + 36)], &a2[*(int *)(a3 + 36)], v6);
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(&a1[v9], 1, v6);
  int v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSession.Timestamps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A379D888);
}

uint64_t sub_1A379D888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 40);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for GroupSession.Timestamps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A379D998);
}

uint64_t sub_1A379D998(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 40);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UUID) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UUID) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PlaybackSyncer.Message, @in_guaranteed UUID) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PlaybackSyncer.Message, @in_guaranteed UUID) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Error?) -> (@out ())(uint64_t a1)
{
  unsigned int v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Data, @in_guaranteed UInt64) -> (@out ())(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)(void *, uint64_t *))(v3 + 16);
  v7[0] = a1;
  v7[1] = a2;
  uint64_t v6 = a3;
  return v4(v7, &v6);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ()(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void))(v2 + 16))(*a1, a1[1], *a2);
}

uint64_t objectdestroy_184Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)()
{
  return closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1A379DFC0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(void **a1)
{
  closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(char a1)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message);
  }
  return result;
}

uint64_t outlined destroy of GroupSessionMessenger.MessageWrapper(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A379E120()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t partial apply for specialized closure #1 in GroupSessionMessenger.receive<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  return specialized closure #1 in GroupSessionMessenger.receive<A>(_:)(a1, a2, *a3, *(unsigned char *)(v4 + 16), a4);
}

uint64_t partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed GroupSessionMessenger.MessageWrapper, @in_guaranteed GroupSessionMessenger.MessageContext, @in_guaranteed SendReliability) -> (@out (A, GroupSessionMessenger.MessageContext)?)(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
  return v3(a1, a1 + *(int *)(v4 + 48), a1 + *(int *)(v4 + 64));
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of GroupSessionMessenger.MessageType(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of GroupSessionMessenger.MessageType(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of Decodable & Encodable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of TypedPayloadBox(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in GroupSession.createPlaybackEvent(originatorUUID:avCommand:rate:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void partial apply for closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)(void **a1)
{
  closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t outlined consume of Set<Participant>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)(a1, v2, a2);
}

uint64_t partial apply for specialized closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return specialized closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t partial apply for specialized closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return specialized closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t partial apply for specialized closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2, v2);
}

uint64_t partial apply for specialized closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, void *a2)
{
  return specialized closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2);
}

void partial apply for specialized closure #5 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
}

void partial apply for specialized closure #6 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1A379E488()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for specialized closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v4 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  int v12 = *a4;

  return specialized closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2, a3, v12, v4 + v10, v11);
}

uint64_t partial apply for specialized closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return specialized closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t partial apply for specialized closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  return specialized closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1);
}

uint64_t partial apply for specialized closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1)
{
  return specialized closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, v1, "LinkManager invalidated with error=%s");
}

uint64_t partial apply for specialized closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  return specialized closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1);
}

uint64_t partial apply for specialized closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(*a1, v2);
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #14 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1)
{
  return specialized closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, v1, "Topic invalidated with error=%s");
}

uint64_t partial apply for specialized closure #15 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  return specialized closure #15 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1);
}

uint64_t sub_1A379E688()
{
  return objectdestroy_88Tm(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for specialized closure #1 in GroupSession.requestEncryptionKey(for:)()
{
  return specialized closure #1 in GroupSession.requestEncryptionKey(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1A379E6A8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1A379E6B8()
{
  return objectdestroy_88Tm(MEMORY[0x1E4FBC898]);
}

void partial apply for specialized closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)()
{
  specialized closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)(*(void *)(v0 + 16));
}

uint64_t sub_1A379E6D8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)(void **a1)
{
  closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)(a1, *(void *)(v1 + 16));
}

void partial apply for specialized closure #1 in GroupSession.updatePublicState()()
{
  specialized closure #1 in GroupSession.updatePublicState()(v0);
}

uint64_t objectdestroy_107Tm()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for specialized closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)()
{
  specialized closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(*(void *)(v0 + 16));
}

void partial apply for closure #1 in closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(void **a1)
{
  closure #1 in closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t partial apply for specialized closure #1 in GroupSession.cleanUpPlaybackSyncer()()
{
  return specialized closure #1 in GroupSession.cleanUpPlaybackSyncer()();
}

BOOL partial apply for closure #1 in closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1);
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)(a1 + *(int *)(type metadata accessor for Participant() + 24));
  return v1 == PubSubTopic.Participant.participantID.getter();
}

uint64_t sub_1A379E7A8()
{
  return objectdestroy_88Tm(MEMORY[0x1E4FBC898]);
}

uint64_t sub_1A379E7C0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void partial apply for implicit closure #2 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(char *a1@<X8>)
{
  AnyGroupActivity.init(tuConversationActivity:)(*(id *)(v1 + 16), a1);
}

uint64_t outlined init with take of Participant(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for specialized implicit closure #3 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t a1@<X8>)
{
  return specialized implicit closure #3 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(*(void *)(v1 + 16), a1);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x1A624F870);
  }
  return result;
}

void partial apply for specialized closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  specialized closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32));
}

uint64_t sub_1A379E9B8()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for specialized closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return specialized closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(v0[2], v0[3], v0[4]);
}

void partial apply for specialized closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
}

uint64_t sub_1A379EA10()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for specialized closure #1 in GroupSession.capabilities.didset()
{
  specialized closure #1 in GroupSession.capabilities.didset(v0);
}

uint64_t sub_1A379EA28()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

id partial apply for specialized closure #1 in closure #1 in GroupSession.capabilities.didset(void **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 336));
  swift_beginAccess();
  return objc_msgSend(v2, sel_updateCapabilitiesWithCapabilities_, *v3);
}

uint64_t sub_1A379EAB0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);

  return closure #1 in closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:)(a1);
}

void partial apply for closure #1 in closure #1 in GroupSession.requestForegroundPresentation()()
{
  closure #1 in closure #1 in GroupSession.end()(v0);
}

uint64_t sub_1A379EBE8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in GroupSession.end()()
{
  closure #1 in closure #1 in GroupSession.end()(v0);
}

uint64_t sub_1A379EC28()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.leave()()
{
  return closure #1 in closure #1 in GroupSession.leave()(v0);
}

void partial apply for closure #1 in closure #1 in closure #1 in GroupSession.leave()()
{
  closure #1 in GroupSession.capabilities.didset(v0);
}

uint64_t sub_1A379EC84()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave()(void **a1)
{
  closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave()(a1, v1);
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave()(void *a1)
{
  closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave()(a1, v1);
}

void partial apply for closure #1 in closure #1 in GroupSession.join()()
{
  closure #1 in closure #1 in GroupSession.join()(*(uint64_t **)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in GroupSession.join()()
{
  return closure #1 in closure #1 in closure #1 in GroupSession.join()(*(void *)(v0 + 16));
}

uint64_t sub_1A379ED28()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join()(void **a1)
{
  closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join()(a1, *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1A379ED98()
{
  return objectdestroy_88Tm(MEMORY[0x1E4FBC8D0]);
}

id partial apply for closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.join()(void *a1)
{
  return closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.join()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1A379EDB8()
{
  return objectdestroy_88Tm(MEMORY[0x1E4FBC8D0]);
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join()(uint64_t a1, void *a2)
{
  closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join()(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)()
{
  return closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1A379EDF4()
{
  return objectdestroy_88Tm(MEMORY[0x1E4FBC898]);
}

uint64_t objectdestroy_88Tm(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));

  return MEMORY[0x1F4186498](v1, 32, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)()
{
  closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(*(void *)(v0 + 16));
}

uint64_t sub_1A379EE8C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, *(void *)(v2 + 40), a2);
}

uint64_t partial apply for implicit closure #3 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t a1@<X8>)
{
  return implicit closure #3 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(v1[4], v1[2], v1[3], a1);
}

uint64_t objectdestroy_407Tm()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

void partial apply for closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32));
}

uint64_t sub_1A379EF7C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return specialized closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(v0[4], v0[5], v0[6]);
}

void partial apply for closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
}

uint64_t sub_1A379EFD8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1A379EFE8()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A379F020()
{
  uint64_t v1 = *(void *)(type metadata accessor for Participant() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v4, v5);
}

void partial apply for closure #1 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for Participant() - 8);
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = v4 + ((*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  closure #1 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(a1, a2, a3, a4, v10, v11);
}

void partial apply for closure #3 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2)
{
  closure #3 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(a1, a2, v2);
}

void partial apply for closure #1 in GroupSession.capabilities.didset()
{
  closure #1 in GroupSession.capabilities.didset(v0);
}

uint64_t sub_1A379F1F0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

id partial apply for closure #1 in closure #1 in GroupSession.capabilities.didset(void **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 336));
  swift_beginAccess();
  return objc_msgSend(v2, sel_updateCapabilitiesWithCapabilities_, *v3);
}

uint64_t partial apply for closure #1 in GroupSession.updateActivity(_:)()
{
  return GroupSession.invalidationBlock(execute:)(partial apply for closure #1 in closure #1 in GroupSession.updateActivity(_:));
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.updateActivity(_:)()
{
  return closure #1 in closure #1 in GroupSession.updateActivity(_:)(v0);
}

uint64_t sub_1A379F2B0()
{
  uint64_t v1 = (int *)type metadata accessor for AnyGroupActivity(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[5];
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    uint64_t v18 = v4;
    uint64_t v19 = v0;
    uint64_t v7 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    uint64_t v8 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v9 = v6 + v8[8];
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    int v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (!v12(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
    uint64_t v13 = v6 + v8[11];
    if (!v12(v13, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = (v2 + 16) & ~v2;
    uint64_t v0 = v19;
    uint64_t v4 = v18;
  }
  uint64_t v14 = v3 + v4;
  outlined consume of Data._Representation(*(void *)(v5 + v1[6]), *(void *)(v5 + v1[6] + 8));
  uint64_t v15 = v5 + v1[7];
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v14, v2 | 7);
}

uint64_t partial apply for closure #1 in AnyGroupActivity.tuConversationActivity.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for AnyGroupActivity(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in AnyGroupActivity.tuConversationActivity.getter(a1, a2, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(void **a1)
{
  return closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(a1, v1);
}

void partial apply for closure #2 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(void **a1)
{
  closure #2 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(a1, v1);
}

uint64_t sub_1A379F5F4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)()
{
  closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(*(void *)(v0 + 16));
}

id partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(id *a1)
{
  return objc_msgSend(*a1, sel_updateActivityWithActivity_, *(void *)(v1 + 16));
}

uint64_t outlined init with copy of Participant(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Participant(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)partial apply(void **a1)
{
}

void implicit closure #2 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)partial apply(char *a1@<X8>)
{
}

uint64_t partial apply for closure #1 in closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.connect()@<X0>(char *a1@<X0>, char *a2@<X8>)
{
  return partial apply for closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.connect()(a1, a2);
}

void closure #1 in closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)partial apply(void **a1)
{
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000018;
  }
  else {
    unint64_t v3 = 0xD00000000000001ALL;
  }
  if (v2) {
    unint64_t v4 = 0x80000001A38FFB40;
  }
  else {
    unint64_t v4 = 0x80000001A38FFB60;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000018;
  }
  else {
    unint64_t v5 = 0xD00000000000001ALL;
  }
  if (a2) {
    unint64_t v6 = 0x80000001A38FFB60;
  }
  else {
    unint64_t v6 = 0x80000001A38FFB40;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (a1) {
    BOOL v2 = 116;
  }
  else {
    BOOL v2 = 100;
  }
  if (a2) {
    unint64_t v3 = 116;
  }
  else {
    unint64_t v3 = 100;
  }
  if (v2 == v3) {
    unint64_t v4 = 1;
  }
  else {
    unint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v3 = 0xD000000000000012;
  unint64_t v4 = 0x80000001A38FFA80;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0xE700000000000000;
      unint64_t v3 = 0x746E65746E6F63;
      break;
    case 2:
      unint64_t v4 = 0xE400000000000000;
      unint64_t v3 = 1684632949;
      break;
    case 3:
      unint64_t v4 = 0x80000001A38FFAA0;
      unint64_t v3 = 0xD000000000000010;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xD000000000000012;
  unint64_t v6 = 0x80000001A38FFA80;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      if (v3 == 0x746E65746E6F63) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      unint64_t v5 = 1684632949;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0x80000001A38FFAA0;
      if (v3 == 0xD000000000000010) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v3 != v5) {
        goto LABEL_14;
      }
LABEL_12:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

void AnyGroupActivity.init(tuConversationActivity:)(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GroupActivityMetadata(0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = objc_msgSend(a1, sel_metadata);
  if (v15)
  {
    id v16 = v15;
    uint64_t v39 = v8;
    id v17 = v16;
    GroupActivityMetadata.init(_:)(v16, (uint64_t)v14);
    id v18 = objc_msgSend(a1, sel_activityIdentifier);
    uint64_t v40 = v2;
    id v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v21;
    uint64_t v38 = v20;

    outlined init with copy of GroupActivityMetadata((uint64_t)v14, (uint64_t)v11, type metadata accessor for GroupActivityMetadata);
    swift_storeEnumTagMultiPayload();
    id v22 = objc_msgSend(a1, sel_applicationContext);
    uint64_t v36 = v5;
    id v23 = v22;
    uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    id v26 = objc_msgSend(a1, sel_UUID);
    char v27 = v39;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    outlined destroy of GroupActivityMetadata((uint64_t)v14, type metadata accessor for GroupActivityMetadata);
    uint64_t v28 = v37;
    *(void *)a2 = v38;
    *((void *)a2 + 1) = v28;
    uint64_t v29 = (int *)type metadata accessor for AnyGroupActivity(0);
    outlined init with take of AnyGroupActivity.MetadataProvider((uint64_t)v11, (uint64_t)&a2[v29[5]], type metadata accessor for AnyGroupActivity.MetadataProvider);
    id v30 = (uint64_t *)&a2[v29[6]];
    uint64_t v31 = v36;
    *id v30 = v35;
    v30[1] = v25;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&a2[v29[7]], v27, v31);
    uint64_t v32 = &a2[v29[8]];
    *(void *)uint64_t v32 = 0;
    *((void *)v32 + 1) = 0;
  }
  else
  {
    lazy protocol witness table accessor for type GroupActivityError and conformance GroupActivityError();
    swift_allocError();
    *id v33 = 1;
    swift_willThrow();
  }
}

unint64_t lazy protocol witness table accessor for type GroupActivityError and conformance GroupActivityError()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupActivityError and conformance GroupActivityError;
  if (!lazy protocol witness table cache variable for type GroupActivityError and conformance GroupActivityError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityError and conformance GroupActivityError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupActivityError and conformance GroupActivityError;
  if (!lazy protocol witness table cache variable for type GroupActivityError and conformance GroupActivityError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityError and conformance GroupActivityError);
  }
  return result;
}

uint64_t AnyGroupActivity.tuConversationActivity.getter()
{
  uint64_t v1 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  MEMORY[0x1F4188790](v1 - 8);
  outlined init with copy of GroupActivityMetadata(v0, (uint64_t)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AnyGroupActivity);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  outlined init with take of AnyGroupActivity.MetadataProvider((uint64_t)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5 + v4, type metadata accessor for AnyGroupActivity);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
  swift_allocObject();
  return Future.init(_:)();
}

uint64_t AnyGroupActivity.init(tuConversationActivity:metadataProvider:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v28 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = objc_msgSend(a1, sel_activityIdentifier);
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v14;
  uint64_t v27 = v13;

  outlined init with copy of GroupActivityMetadata(a2, (uint64_t)v11, type metadata accessor for AnyGroupActivity.MetadataProvider);
  id v15 = objc_msgSend(a1, sel_applicationContext);
  uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  id v19 = objc_msgSend(a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  outlined destroy of GroupActivityMetadata(a2, type metadata accessor for AnyGroupActivity.MetadataProvider);
  uint64_t v20 = v26;
  *(void *)a3 = v27;
  *((void *)a3 + 1) = v20;
  uint64_t v21 = (int *)type metadata accessor for AnyGroupActivity(0);
  outlined init with take of AnyGroupActivity.MetadataProvider((uint64_t)v11, (uint64_t)&a3[v21[5]], type metadata accessor for AnyGroupActivity.MetadataProvider);
  id v22 = (uint64_t *)&a3[v21[6]];
  *id v22 = v16;
  v22[1] = v18;
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(&a3[v21[7]], v8, v28);
  uint64_t v24 = &a3[v21[8]];
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  return result;
}

uint64_t AnyGroupActivity.activityIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AnyGroupActivity.activityIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AnyGroupActivity.activityIdentifier.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AnyGroupActivity.metadataProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AnyGroupActivity(0);
  return outlined init with copy of GroupActivityMetadata(v1 + *(int *)(v3 + 20), a1, type metadata accessor for AnyGroupActivity.MetadataProvider);
}

uint64_t AnyGroupActivity.metadataProvider.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 20);

  return outlined assign with take of AnyGroupActivity.MetadataProvider(a1, v3);
}

uint64_t (*AnyGroupActivity.metadataProvider.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AnyGroupActivity.content.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 24);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t AnyGroupActivity.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 24);
  uint64_t result = outlined consume of Data._Representation(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*AnyGroupActivity.content.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AnyGroupActivity.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 28);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AnyGroupActivity.uuid.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 28);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*AnyGroupActivity.uuid.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AnyGroupActivity.staticIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AnyGroupActivity.staticIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AnyGroupActivity.staticIdentifier.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t default argument 1 of AnyGroupActivity.init(activityIdentifier:metadataProvider:content:uuid:staticIdentifier:)@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for generic != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static GroupActivityMetadata.ActivityType.generic);
  outlined init with copy of GroupActivityMetadata(v3, a1, type metadata accessor for GroupActivityMetadata.ActivityType);
  uint64_t v4 = (int *)type metadata accessor for GroupActivityMetadata(0);
  uint64_t v5 = (void *)(a1 + v4[5]);
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = (void *)(a1 + v4[6]);
  *uint64_t v6 = 0;
  v6[1] = 0;
  *(void *)(a1 + v4[7]) = 0;
  uint64_t v7 = a1 + v4[8];
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  *(void *)(a1 + v4[9]) = 0;
  *(unsigned char *)(a1 + v4[10]) = dyld_program_sdk_at_least() ^ 1;
  v9(a1 + v4[11], 1, 1, v8);
  uint64_t v10 = v4[12];
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v11 = a1 + v10;
  uint64_t v12 = qword_1EB58E160;
  uint64_t v13 = qword_1EB58E178;
  *(unsigned char *)uint64_t v11 = static SceneAssociationBehavior.default;
  *(void *)(v11 + 8) = v12;
  *(_OWORD *)(v11 + 16) = xmmword_1EB58E168;
  *(void *)(v11 + 32) = v13;
  *(unsigned char *)(a1 + v4[13]) = 0;
  *(void *)(a1 + v4[14]) = 2;
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t AnyGroupActivity.init(activityIdentifier:metadataProvider:content:uuid:staticIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  *a9 = a1;
  a9[1] = a2;
  uint64_t v16 = (int *)type metadata accessor for AnyGroupActivity(0);
  outlined init with take of AnyGroupActivity.MetadataProvider(a3, (uint64_t)a9 + v16[5], type metadata accessor for AnyGroupActivity.MetadataProvider);
  uint64_t v17 = (void *)((char *)a9 + v16[6]);
  *uint64_t v17 = a4;
  v17[1] = a5;
  uint64_t v18 = (char *)a9 + v16[7];
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a6, v19);
  uint64_t v21 = (void *)((char *)a9 + v16[8]);
  *uint64_t v21 = a7;
  v21[1] = a8;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyGroupActivity.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyGroupActivity.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnyGroupActivity.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyGroupActivity.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AnyGroupActivity.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized AnyGroupActivity.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AnyGroupActivity.CodingKeys(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x80000001A38FFA80;
  switch(*v1)
  {
    case 1:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v2 = 0x746E65746E6F63;
      goto LABEL_3;
    case 2:
      *a1 = 1684632949;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0xD000000000000010;
      a1[1] = 0x80000001A38FFAA0;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = v3;
      break;
  }
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance AnyGroupActivity.CodingKeys()
{
  unint64_t result = 0xD000000000000012;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x746E65746E6F63;
      break;
    case 2:
      unint64_t result = 1684632949;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnyGroupActivity.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized AnyGroupActivity.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance AnyGroupActivity.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance AnyGroupActivity.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyGroupActivity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnyGroupActivity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AnyGroupActivity.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnyGroupActivity.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    long long v11 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 24));
    v10[15] = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t AnyGroupActivity.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v38 = a2;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v41 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnyGroupActivity.CodingKeys>);
  uint64_t v42 = *(void *)(v5 - 8);
  uint64_t v43 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v46 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for AnyGroupActivity(0);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = (uint64_t)v10 + *(int *)(v8 + 20);
  if (one-time initialization token for generic != -1) {
    swift_once();
  }
  uint64_t v39 = v4;
  uint64_t v12 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static GroupActivityMetadata.ActivityType.generic);
  outlined init with copy of GroupActivityMetadata(v13, v11, type metadata accessor for GroupActivityMetadata.ActivityType);
  uint64_t v14 = (int *)type metadata accessor for GroupActivityMetadata(0);
  id v15 = (void *)(v11 + v14[5]);
  *id v15 = 0;
  v15[1] = 0;
  uint64_t v16 = (void *)(v11 + v14[6]);
  *uint64_t v16 = 0;
  v16[1] = 0;
  *(void *)(v11 + v14[7]) = 0;
  uint64_t v17 = v11 + v14[8];
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  v19(v17, 1, 1, v18);
  *(void *)(v11 + v14[9]) = 0;
  *(unsigned char *)(v11 + v14[10]) = dyld_program_sdk_at_least() ^ 1;
  v19(v11 + v14[11], 1, 1, v18);
  uint64_t v20 = v11 + v14[12];
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v21 = qword_1EB58E160;
  uint64_t v22 = qword_1EB58E178;
  *(unsigned char *)uint64_t v20 = static SceneAssociationBehavior.default;
  *(void *)(v20 + 8) = v21;
  long long v44 = xmmword_1EB58E168;
  *(_OWORD *)(v20 + 16) = xmmword_1EB58E168;
  *(void *)(v20 + 32) = v22;
  *(unsigned char *)(v11 + v14[13]) = 0;
  *(void *)(v11 + v14[14]) = 2;
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  swift_storeEnumTagMultiPayload();
  id v23 = (uint64_t *)((char *)v10 + v7[8]);
  *id v23 = 0;
  v23[1] = 0;
  __swift_project_boxed_opaque_existential_1(v47, v47[3]);
  lazy protocol witness table accessor for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = v46;
  uint64_t v25 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
    outlined destroy of GroupActivityMetadata(v11, type metadata accessor for AnyGroupActivity.MetadataProvider);
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v48) = 0;
    uint64_t v26 = v43;
    uint64_t v27 = (uint64_t)v10;
    *uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    v10[1] = v28;
    char v49 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)((char *)v10 + v7[6]) = v48;
    LOBYTE(v48) = 2;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v29 = v39;
    id v30 = v24;
    uint64_t v31 = v41;
    uint64_t v45 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v27 + v7[7], v29, v31);
    LOBYTE(v48) = 3;
    uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v33 = v26;
    uint64_t v34 = v32;
    uint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v33);
    swift_bridgeObjectRelease();
    *id v23 = v34;
    v23[1] = v36;
    outlined init with copy of GroupActivityMetadata(v27, v38, type metadata accessor for AnyGroupActivity);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
    return outlined destroy of GroupActivityMetadata(v27, type metadata accessor for AnyGroupActivity);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnyGroupActivity@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AnyGroupActivity.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnyGroupActivity(void *a1)
{
  return AnyGroupActivity.encode(to:)(a1);
}

void static AnyGroupActivity.activityIdentifier.getter()
{
}

uint64_t AnyGroupActivity.metadata.getter(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  v2[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for AnyGroupActivity(0);
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  return MEMORY[0x1F4188298](AnyGroupActivity.metadata.getter, 0, 0);
}

uint64_t AnyGroupActivity.metadata.getter()
{
  uint64_t v29 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[4];
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.default);
  outlined init with copy of GroupActivityMetadata(v2, v1, type metadata accessor for AnyGroupActivity);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[13];
  if (v6)
  {
    uint64_t v9 = v0[9];
    uint64_t v8 = v0[10];
    uint64_t v11 = v0[7];
    uint64_t v10 = v0[8];
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v28 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    outlined init with copy of GroupActivityMetadata(v7, v10, type metadata accessor for AnyGroupActivity);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v9);
    outlined init with copy of AnyGroupActivity?(v10, v11);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v9) == 1)
    {
      unint64_t v14 = 0xE300000000000000;
      uint64_t v15 = 7104878;
    }
    else
    {
      uint64_t v16 = v0[11];
      uint64_t v17 = v0[12];
      outlined init with take of AnyGroupActivity.MetadataProvider(v0[7], v17, type metadata accessor for AnyGroupActivity);
      outlined init with copy of GroupActivityMetadata(v17, v16, type metadata accessor for AnyGroupActivity);
      uint64_t v15 = String.init<A>(reflecting:)();
      unint64_t v14 = v18;
      outlined destroy of GroupActivityMetadata(v17, type metadata accessor for AnyGroupActivity);
    }
    uint64_t v19 = v0[13];
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[8], &demangling cache variable for type metadata for AnyGroupActivity?);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of GroupActivityMetadata(v19, type metadata accessor for AnyGroupActivity);
    _os_log_impl(&dword_1A375F000, v4, v5, "Requesting metadata from GroupActivity %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v13, -1, -1);
    MEMORY[0x1A624F870](v12, -1, -1);
  }
  else
  {
    outlined destroy of GroupActivityMetadata(v0[13], type metadata accessor for AnyGroupActivity);
  }

  outlined init with copy of GroupActivityMetadata(v0[4] + *(int *)(v0[9] + 20), v0[6], type metadata accessor for AnyGroupActivity.MetadataProvider);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v21 = (uint64_t *)v0[6];
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v22 = *v21;
    v0[14] = *v21;
    id v23 = (void *)swift_task_alloc();
    v0[15] = v23;
    uint64_t v24 = type metadata accessor for GroupActivityMetadata(0);
    *id v23 = v0;
    v23[1] = AnyGroupActivity.metadata.getter;
    uint64_t v25 = v0[3];
    return MEMORY[0x1F41880D8](v25, 0, 0, 0x617461646174656DLL, 0xE800000000000000, partial apply for closure #1 in AnyGroupActivity.metadata.getter, v22, v24);
  }
  else
  {
    outlined init with take of AnyGroupActivity.MetadataProvider((uint64_t)v21, v0[3], type metadata accessor for GroupActivityMetadata);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](AnyGroupActivity.metadata.getter, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in AnyGroupActivity.metadata.getter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GroupActivityMetadata, Never>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  v12[1] = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v10 = lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>(&lazy protocol witness table cache variable for type Future<GroupActivityMetadata, Never> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<GroupActivityMetadata, Never>);
  MEMORY[0x1A624DBB0](partial apply for closure #1 in closure #1 in AnyGroupActivity.metadata.getter, v9, v4, v10);
  return swift_release();
}

uint64_t closure #1 in closure #1 in AnyGroupActivity.metadata.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GroupActivityMetadata(0);
  MEMORY[0x1F4188790](v2 - 8);
  outlined init with copy of GroupActivityMetadata(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for GroupActivityMetadata);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GroupActivityMetadata, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t static AnyGroupActivity._identifiable(by:)()
{
  return 1;
}

void protocol witness for static GroupActivity.activityIdentifier.getter in conformance AnyGroupActivity()
{
}

uint64_t protocol witness for GroupActivity.metadata.getter in conformance AnyGroupActivity(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return AnyGroupActivity.metadata.getter(a1);
}

uint64_t protocol witness for static GroupActivity._identifiable(by:) in conformance AnyGroupActivity()
{
  return 1;
}

uint64_t closure #1 in AnyGroupActivity.tuConversationActivity.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a3;
  uint64_t v6 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  uint64_t v21 = v10;
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  outlined init with copy of GroupActivityMetadata(a3, (uint64_t)v9, type metadata accessor for AnyGroupActivity);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  outlined init with take of AnyGroupActivity.MetadataProvider((uint64_t)v9, v12 + v11, type metadata accessor for AnyGroupActivity);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<GroupActivityMetadata, Never>);
  swift_allocObject();
  swift_retain();
  uint64_t v22 = Future.init(_:)();
  outlined init with copy of GroupActivityMetadata(v20, (uint64_t)v9, type metadata accessor for AnyGroupActivity);
  uint64_t v14 = swift_allocObject();
  outlined init with take of AnyGroupActivity.MetadataProvider((uint64_t)v9, v14 + v11, type metadata accessor for AnyGroupActivity);
  uint64_t v15 = (uint64_t (**)(uint64_t, char))(v14 + ((v11 + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v16 = (uint64_t (*)(uint64_t, char))v21;
  *uint64_t v15 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TUConversationActivity, Error>) -> ();
  v15[1] = v16;
  uint64_t v17 = lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>(&lazy protocol witness table cache variable for type Future<GroupActivityMetadata, Never> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<GroupActivityMetadata, Never>);
  MEMORY[0x1A624DBB0](partial apply for closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity.getter, v14, v13, v17);
  swift_release();
  return swift_release();
}

uint64_t outlined init with copy of GroupActivityMetadata(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of AnyGroupActivity.MetadataProvider(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s15GroupActivities03AnyA8ActivityV014tuConversationD07Combine6FutureCySo014TUConversationD0Cs5Error_pGvgyys6ResultOyAIsAJ_pGccfU_TA_0(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in AnyGroupActivity.tuConversationActivity.getter(a1, a2, closure #1 in AnyGroupActivity.tuConversationActivity.getter);
}

uint64_t outlined destroy of GroupActivityMetadata(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined assign with take of AnyGroupActivity.MetadataProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity.getter(uint64_t a1, uint64_t *a2, void (*a3)(id, void))
{
  id v5 = GroupActivityMetadata.tuMetadata.getter();
  uint64_t v6 = (uint64_t *)((char *)a2 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 24));
  uint64_t v8 = *v6;
  unint64_t v7 = v6[1];
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  id v11 = objc_allocWithZone(MEMORY[0x1E4FADB28]);
  outlined copy of Data._Representation(v8, v7);
  swift_bridgeObjectRetain();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v13 = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v14 = (void *)MEMORY[0x1A624DFA0](v10, v9);
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v11, sel_initWithMetadata_applicationContext_uuid_activityIdentifier_, v5, isa, v13, v14);

  outlined consume of Data._Representation(v8, v7);
  id v16 = v15;
  a3(v15, 0);
}

uint64_t AnyGroupActivity.tuConversationActivityCreateSessionRequest.getter()
{
  *(void *)(v1 + 16) = v0;
  type metadata accessor for GroupActivityMetadata(0);
  *(void *)(v1 + 24) = swift_task_alloc();
  return MEMORY[0x1F4188298](AnyGroupActivity.tuConversationActivityCreateSessionRequest.getter, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;

  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1A375F000, v2, v3, "Creating sessionCreationRequest with AnyGroupActivity", v4, 2u);
    MEMORY[0x1A624F870](v4, -1, -1);
  }

  id v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v5;
  *id v5 = v0;
  v5[1] = AnyGroupActivity.tuConversationActivityCreateSessionRequest.getter;
  uint64_t v6 = *(void *)(v0 + 24);
  return AnyGroupActivity.metadata.getter(v6);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](AnyGroupActivity.tuConversationActivityCreateSessionRequest.getter, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSData v12;
  void *v13;
  NSUUID v14;
  void *v15;
  id v16;
  uint64_t (*v17)(id);
  id v19;
  uint64_t v20;

  uint64_t v2 = (uint64_t *)v0[2];
  uint64_t v1 = v0[3];
  uint64_t v19 = GroupActivityMetadata.tuMetadata.getter();
  outlined destroy of GroupActivityMetadata(v1, type metadata accessor for GroupActivityMetadata);
  uint64_t v3 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v4 = (uint64_t *)((char *)v2 + *(int *)(v3 + 24));
  uint64_t v6 = *v4;
  id v5 = v4[1];
  unint64_t v7 = *v2;
  uint64_t v8 = v2[1];
  uint64_t v9 = (uint64_t *)((char *)v2 + *(int *)(v3 + 32));
  id v11 = *v9;
  uint64_t v10 = v9[1];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v6, v5);
  swift_bridgeObjectRetain();
  v12.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v13 = (void *)MEMORY[0x1A624DFA0](v7, v8);
  swift_bridgeObjectRelease();
  v14.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  if (v10)
  {
    id v15 = (void *)MEMORY[0x1A624DFA0](v11, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v15 = 0;
  }
  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB38]), sel_initWithMetadata_applicationContext_activityIdentifier_uuid_staticIdentifier_, v19, v12.super.isa, v13, v14.super.isa, v15);

  outlined consume of Data._Representation(v6, v5);
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(id))v0[1];
  return v17(v16);
}

uint64_t AnyGroupActivity.tuConversationActivity<A>(as:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return MEMORY[0x1F4188298](AnyGroupActivity.tuConversationActivity<A>(as:), 0, 0);
}

uint64_t AnyGroupActivity.tuConversationActivity<A>(as:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  void *v3 = v0;
  v3[1] = AnyGroupActivity.tuConversationActivity<A>(as:);
  uint64_t v4 = *(void *)(v0 + 32);
  return MEMORY[0x1F4188160](v0 + 16, 0, 0, 0xD00000000000001BLL, 0x80000001A3900830, partial apply for closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:), v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = AnyGroupActivity.tuConversationActivity<A>(as:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = AnyGroupActivity.tuConversationActivity<A>(as:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a4;
  uint64_t v29 = a3;
  uint64_t v25 = a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for CheckedContinuation();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v27 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10 - 8);
  outlined init with copy of GroupActivityMetadata(a2, (uint64_t)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AnyGroupActivity);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  outlined init with take of AnyGroupActivity.MetadataProvider((uint64_t)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, type metadata accessor for AnyGroupActivity);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
  swift_allocObject();
  uint64_t v30 = Future.init(_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v15 = v6;
  v24(v9, a1, v6);
  uint64_t v16 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = swift_allocObject();
  uint64_t v19 = v28;
  uint64_t v18 = v29;
  *(void *)(v17 + 16) = v28;
  *(void *)(v17 + 24) = v18;
  uint64_t v20 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  id v23 = v9;
  v20(v17 + ((v16 + 32) & ~v16), v9, v15);
  v24(v9, v25, v15);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v19;
  v20(v21 + ((v16 + 24) & ~v16), v23, v15);
  lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Future<TUConversationActivity, Error> and conformance Future<A, B>, (uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
  Publisher.sinkOnce(_:onError:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(void **a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for TUConversationActivity();
  id v2 = v1;
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    type metadata accessor for CheckedContinuation();
    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(id *a1)
{
  id v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for CheckedContinuation();
  return CheckedContinuation.resume(throwing:)();
}

uint64_t specialized closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  outlined init with copy of GroupActivityMetadata(a3, (uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AnyGroupActivity);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a1;
  void v14[5] = a2;
  outlined init with take of AnyGroupActivity.MetadataProvider((uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v14 + v13, type metadata accessor for AnyGroupActivity);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue(), (uint64_t)v14);
  return swift_release();
}

uint64_t specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  v5[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<GroupActivityMetadata, Never>);
  uint64_t v6 = swift_task_alloc();
  v5[5] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v5[6] = v7;
  *uint64_t v7 = v5;
  v7[1] = specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue();
  return AnyGroupActivity.metadata.getter(v6);
}

uint64_t specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue()()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[5];
  id v2 = (void (*)(uint64_t))v0[2];
  swift_storeEnumTagMultiPayload();
  v2(v1);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v1, &demangling cache variable for type metadata for Result<GroupActivityMetadata, Never>);
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

unint64_t lazy protocol witness table accessor for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t partial apply for closure #1 in AnyGroupActivity.metadata.getter(uint64_t a1)
{
  return closure #1 in AnyGroupActivity.metadata.getter(a1, v1);
}

uint64_t outlined init with copy of AnyGroupActivity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(uint64_t a1)
{
  return closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(a1, v1[3], v1[4], v1[2]);
}

uint64_t *initializeBufferWithCopyOfBuffer for AnyGroupActivity(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    type metadata accessor for AnyGroupActivity.MetadataProvider(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v9 = *v10;
      swift_retain();
    }
    else
    {
      uint64_t v55 = v6;
      uint64_t v12 = type metadata accessor for GroupActivityDescription();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v10, v12);
      unint64_t v13 = (int *)type metadata accessor for GroupActivityMetadata(0);
      uint64_t v14 = v13[5];
      uint64_t v15 = (void *)((char *)v9 + v14);
      uint64_t v16 = (void *)((char *)v10 + v14);
      uint64_t v17 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v17;
      uint64_t v18 = v13[6];
      uint64_t v19 = (void *)((char *)v9 + v18);
      uint64_t v20 = (void *)((char *)v10 + v18);
      uint64_t v21 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v21;
      uint64_t v22 = v13[7];
      uint64_t v57 = *(void **)((char *)v10 + v22);
      *(void *)((char *)v9 + v22) = v57;
      uint64_t v23 = v13[8];
      __dst = (char *)v9 + v23;
      uint64_t v54 = (char *)v10 + v23;
      uint64_t v24 = type metadata accessor for URL();
      uint64_t v25 = *(void *)(v24 - 8);
      uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      uint64_t v27 = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v28 = v57;
      uint64_t v58 = v27;
      uint64_t v53 = v25;
      if (v26(v54, 1, v27))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dst, v54, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(__dst, v54, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v27);
      }
      *(void *)((char *)v9 + v13[9]) = *(void *)((char *)v10 + v13[9]);
      *((unsigned char *)v9 + v13[10]) = *((unsigned char *)v10 + v13[10]);
      uint64_t v30 = v13[11];
      uint64_t v31 = (char *)v9 + v30;
      uint64_t v32 = (char *)v10 + v30;
      uint64_t v6 = v55;
      if (v26((char *)v10 + v30, 1, v58))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v31, v32, v58);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v31, 0, 1, v58);
      }
      uint64_t v34 = v13[12];
      uint64_t v35 = (char *)v9 + v34;
      uint64_t v36 = (char *)v10 + v34;
      *uint64_t v35 = *v36;
      uint64_t v37 = *((void *)v36 + 2);
      *((void *)v35 + 1) = *((void *)v36 + 1);
      *((void *)v35 + 2) = v37;
      uint64_t v38 = *((void *)v36 + 4);
      *((void *)v35 + 3) = *((void *)v36 + 3);
      *((void *)v35 + 4) = v38;
      *((unsigned char *)v9 + v13[13]) = *((unsigned char *)v10 + v13[13]);
      *(void *)((char *)v9 + v13[14]) = *(void *)((char *)v10 + v13[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v39 = v6[6];
    uint64_t v40 = (uint64_t *)((char *)v4 + v39);
    uint64_t v41 = (uint64_t *)((char *)a2 + v39);
    uint64_t v42 = *v41;
    unint64_t v43 = v41[1];
    outlined copy of Data._Representation(*v41, v43);
    *uint64_t v40 = v42;
    v40[1] = v43;
    uint64_t v44 = v6[7];
    uint64_t v45 = (char *)v4 + v44;
    uint64_t v46 = (char *)a2 + v44;
    uint64_t v47 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v45, v46, v47);
    uint64_t v48 = v6[8];
    char v49 = (uint64_t *)((char *)v4 + v48);
    uint64_t v50 = (uint64_t *)((char *)a2 + v48);
    uint64_t v51 = v50[1];
    *char v49 = *v50;
    v49[1] = v51;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AnyGroupActivity(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    uint64_t v5 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    uint64_t v6 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v7 = v4 + v6[8];
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (!v10(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    uint64_t v11 = v4 + v6[11];
    if (!v10(v11, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Data._Representation(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  uint64_t v12 = a1 + a2[7];
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AnyGroupActivity(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    void *v8 = *v9;
    swift_retain();
  }
  else
  {
    uint64_t v54 = v3;
    uint64_t v10 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = (int *)type metadata accessor for GroupActivityMetadata(0);
    uint64_t v12 = v11[5];
    uint64_t v13 = (void *)((char *)v8 + v12);
    uint64_t v14 = (void *)((char *)v9 + v12);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = v11[6];
    uint64_t v17 = (void *)((char *)v8 + v16);
    uint64_t v18 = (void *)((char *)v9 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = v11[7];
    uint64_t v21 = *(void **)((char *)v9 + v20);
    *(void *)((char *)v8 + v20) = v21;
    uint64_t v22 = v11[8];
    __dst = (char *)v8 + v22;
    uint64_t v51 = (char *)v9 + v22;
    uint64_t v23 = type metadata accessor for URL();
    uint64_t v52 = *(void *)(v23 - 8);
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
    uint64_t v25 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v26 = v21;
    if (v24(v51, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v51, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(__dst, v51, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v25);
    }
    *(void *)((char *)v8 + v11[9]) = *(void *)((char *)v9 + v11[9]);
    *((unsigned char *)v8 + v11[10]) = *((unsigned char *)v9 + v11[10]);
    uint64_t v28 = v11[11];
    uint64_t v29 = (char *)v8 + v28;
    uint64_t v30 = (char *)v9 + v28;
    if (v24((char *)v9 + v28, 1, v25))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v29, v30, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v29, 0, 1, v25);
    }
    uint64_t v3 = v54;
    uint64_t v32 = v11[12];
    uint64_t v33 = (char *)v8 + v32;
    uint64_t v34 = (char *)v9 + v32;
    *uint64_t v33 = *v34;
    uint64_t v35 = *((void *)v34 + 2);
    *((void *)v33 + 1) = *((void *)v34 + 1);
    *((void *)v33 + 2) = v35;
    uint64_t v36 = *((void *)v34 + 4);
    *((void *)v33 + 3) = *((void *)v34 + 3);
    *((void *)v33 + 4) = v36;
    *((unsigned char *)v8 + v11[13]) = *((unsigned char *)v9 + v11[13]);
    *(void *)((char *)v8 + v11[14]) = *(void *)((char *)v9 + v11[14]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v37 = v3[6];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  uint64_t v40 = *v39;
  unint64_t v41 = v39[1];
  outlined copy of Data._Representation(*v39, v41);
  *uint64_t v38 = v40;
  v38[1] = v41;
  uint64_t v42 = v3[7];
  unint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  uint64_t v45 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v43, v44, v45);
  uint64_t v46 = v3[8];
  uint64_t v47 = (void *)((char *)a1 + v46);
  uint64_t v48 = (void *)((char *)a2 + v46);
  uint64_t v49 = v48[1];
  *uint64_t v47 = *v48;
  v47[1] = v49;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AnyGroupActivity(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = a3[5];
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    outlined destroy of GroupActivityMetadata((uint64_t)a1 + v6, type metadata accessor for AnyGroupActivity.MetadataProvider);
    type metadata accessor for AnyGroupActivity.MetadataProvider(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    else
    {
      uint64_t v49 = a3;
      uint64_t v9 = type metadata accessor for GroupActivityDescription();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      uint64_t v10 = (int *)type metadata accessor for GroupActivityMetadata(0);
      uint64_t v11 = v10[5];
      uint64_t v12 = (void *)((char *)v7 + v11);
      uint64_t v13 = (void *)((char *)v8 + v11);
      *uint64_t v12 = *v13;
      v12[1] = v13[1];
      uint64_t v14 = v10[6];
      uint64_t v15 = (void *)((char *)v7 + v14);
      uint64_t v16 = (void *)((char *)v8 + v14);
      *uint64_t v15 = *v16;
      v15[1] = v16[1];
      uint64_t v17 = v10[7];
      uint64_t v50 = *(void **)((char *)v8 + v17);
      *(void *)((char *)v7 + v17) = v50;
      uint64_t v18 = v10[8];
      uint64_t v47 = (char *)v8 + v18;
      __dst = (char *)v7 + v18;
      uint64_t v19 = type metadata accessor for URL();
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
      uint64_t v22 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v23 = v50;
      uint64_t v51 = v22;
      if (v21(v47, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dst, v47, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v47, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v22);
      }
      *(void *)((char *)v7 + v10[9]) = *(void *)((char *)v8 + v10[9]);
      *((unsigned char *)v7 + v10[10]) = *((unsigned char *)v8 + v10[10]);
      uint64_t v25 = v10[11];
      id v26 = (char *)v7 + v25;
      uint64_t v27 = (char *)v8 + v25;
      if (v21((char *)v8 + v25, 1, v51))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v26, v27, v51);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v51);
      }
      a3 = v49;
      uint64_t v29 = v10[12];
      uint64_t v30 = (char *)v7 + v29;
      uint64_t v31 = (char *)v8 + v29;
      *uint64_t v30 = *v31;
      *((void *)v30 + 1) = *((void *)v31 + 1);
      *((void *)v30 + 2) = *((void *)v31 + 2);
      *((void *)v30 + 3) = *((void *)v31 + 3);
      *((void *)v30 + 4) = *((void *)v31 + 4);
      *((unsigned char *)v7 + v10[13]) = *((unsigned char *)v8 + v10[13]);
      *(void *)((char *)v7 + v10[14]) = *(void *)((char *)v8 + v10[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v32 = a3[6];
  uint64_t v33 = (void *)((char *)a1 + v32);
  uint64_t v34 = (void *)((char *)a2 + v32);
  uint64_t v35 = *v34;
  unint64_t v36 = v34[1];
  outlined copy of Data._Representation(*v34, v36);
  uint64_t v37 = *v33;
  unint64_t v38 = v33[1];
  *uint64_t v33 = v35;
  v33[1] = v36;
  outlined consume of Data._Representation(v37, v38);
  uint64_t v39 = a3[7];
  uint64_t v40 = (char *)a1 + v39;
  unint64_t v41 = (char *)a2 + v39;
  uint64_t v42 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 24))(v40, v41, v42);
  uint64_t v43 = a3[8];
  uint64_t v44 = (void *)((char *)a1 + v43);
  uint64_t v45 = (void *)((char *)a2 + v43);
  void *v44 = *v45;
  v44[1] = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for AnyGroupActivity(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v31 = v3;
    uint64_t v10 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    uint64_t v11 = (int *)type metadata accessor for GroupActivityMetadata(0);
    *(_OWORD *)&v7[v11[5]] = *(_OWORD *)&v8[v11[5]];
    *(_OWORD *)&v7[v11[6]] = *(_OWORD *)&v8[v11[6]];
    *(void *)&v7[v11[7]] = *(void *)&v8[v11[7]];
    uint64_t v12 = v11[8];
    __dst = &v7[v12];
    uint64_t v13 = &v8[v12];
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    uint64_t v30 = v15;
    if (v34(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(__dst, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v17 = v14;
    *(void *)&v7[v11[9]] = *(void *)&v8[v11[9]];
    v7[v11[10]] = v8[v11[10]];
    uint64_t v18 = v11[11];
    __dsta = &v7[v18];
    uint64_t v19 = &v8[v18];
    uint64_t v3 = v31;
    if (v34(&v8[v18], 1, v17))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dsta, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *))(v30 + 32))(__dsta, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(__dsta, 0, 1, v17);
    }
    uint64_t v21 = v11[12];
    uint64_t v22 = &v7[v21];
    id v23 = &v8[v21];
    long long v24 = *((_OWORD *)v23 + 1);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v24;
    *((void *)v22 + 4) = *((void *)v23 + 4);
    v7[v11[13]] = v8[v11[13]];
    *(void *)&v7[v11[14]] = *(void *)&v8[v11[14]];
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v25 = v3[7];
  *(_OWORD *)((char *)a1 + v3[6]) = *(_OWORD *)((char *)a2 + v3[6]);
  id v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
  *(_OWORD *)((char *)a1 + v3[8]) = *(_OWORD *)((char *)a2 + v3[8]);
  return a1;
}

void *assignWithTake for AnyGroupActivity(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    outlined destroy of GroupActivityMetadata((uint64_t)a1 + v7, type metadata accessor for AnyGroupActivity.MetadataProvider);
    uint64_t v10 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for GroupActivityDescription();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      uint64_t v12 = (int *)type metadata accessor for GroupActivityMetadata(0);
      *(_OWORD *)&v8[v12[5]] = *(_OWORD *)&v9[v12[5]];
      *(_OWORD *)&v8[v12[6]] = *(_OWORD *)&v9[v12[6]];
      *(void *)&v8[v12[7]] = *(void *)&v9[v12[7]];
      uint64_t v13 = v12[8];
      uint64_t v42 = &v8[v13];
      uint64_t v14 = &v9[v13];
      uint64_t v15 = type metadata accessor for URL();
      uint64_t v16 = *(void *)(v15 - 8);
      unint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      uint64_t v40 = v16;
      if (v41(v14, 1, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v42, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v42, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v42, 0, 1, v15);
      }
      uint64_t v18 = v15;
      *(void *)&v8[v12[9]] = *(void *)&v9[v12[9]];
      v8[v12[10]] = v9[v12[10]];
      uint64_t v19 = v12[11];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      if (v41(&v9[v19], 1, v18))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v20, v21, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v20, 0, 1, v18);
      }
      uint64_t v23 = v12[12];
      long long v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      long long v26 = *((_OWORD *)v25 + 1);
      *(_OWORD *)long long v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v26;
      *((void *)v24 + 4) = *((void *)v25 + 4);
      v8[v12[13]] = v9[v12[13]];
      *(void *)&v8[v12[14]] = *(void *)&v9[v12[14]];
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v27 = a3[6];
  uint64_t v28 = *(void *)((char *)a1 + v27);
  unint64_t v29 = *(void *)((char *)a1 + v27 + 8);
  *(_OWORD *)((char *)a1 + v27) = *(_OWORD *)((char *)a2 + v27);
  outlined consume of Data._Representation(v28, v29);
  uint64_t v30 = a3[7];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 40))(v31, v32, v33);
  uint64_t v34 = a3[8];
  uint64_t v35 = (void *)((char *)a1 + v34);
  unint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *uint64_t v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyGroupActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A37A501C);
}

uint64_t sub_1A37A501C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UUID();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AnyGroupActivity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A37A515C);
}

uint64_t sub_1A37A515C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UUID();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AnyGroupActivity.MetadataProvider(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (void *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
    }
    else
    {
      uint64_t v7 = type metadata accessor for GroupActivityDescription();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = (int *)type metadata accessor for GroupActivityMetadata(0);
      uint64_t v9 = v8[5];
      uint64_t v10 = (void *)((char *)a1 + v9);
      uint64_t v11 = (void *)((char *)a2 + v9);
      uint64_t v12 = v11[1];
      *uint64_t v10 = *v11;
      v10[1] = v12;
      uint64_t v13 = v8[6];
      uint64_t v14 = (void *)((char *)a1 + v13);
      uint64_t v15 = (void *)((char *)a2 + v13);
      uint64_t v16 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v16;
      uint64_t v17 = v8[7];
      uint64_t v18 = *(void **)((char *)a2 + v17);
      *(void *)((char *)a1 + v17) = v18;
      uint64_t v19 = v8[8];
      __dst = (char *)a1 + v19;
      uint64_t v35 = (char *)a2 + v19;
      uint64_t v20 = type metadata accessor for URL();
      uint64_t v36 = *(void *)(v20 - 8);
      uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v22 = v18;
      if (v21(v35, 1, v20))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dst, v35, *(void *)(*(void *)(v23 - 8) + 64));
        uint64_t v24 = v36;
      }
      else
      {
        uint64_t v24 = v36;
        (*(void (**)(char *, char *, uint64_t))(v36 + 16))(__dst, v35, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v20);
      }
      *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
      *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
      uint64_t v25 = v8[11];
      long long v26 = (char *)a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      if (v21((char *)a2 + v25, 1, v20))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v26, v27, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v20);
      }
      uint64_t v29 = v8[12];
      uint64_t v30 = (char *)a1 + v29;
      uint64_t v31 = (char *)a2 + v29;
      *uint64_t v30 = *v31;
      uint64_t v32 = *((void *)v31 + 2);
      *((void *)v30 + 1) = *((void *)v31 + 1);
      *((void *)v30 + 2) = v32;
      uint64_t v33 = *((void *)v31 + 4);
      *((void *)v30 + 3) = *((void *)v31 + 3);
      *((void *)v30 + 4) = v33;
      *((unsigned char *)a1 + v8[13]) = *((unsigned char *)a2 + v8[13]);
      *(void *)((char *)a1 + v8[14]) = *(void *)((char *)a2 + v8[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnyGroupActivity.MetadataProvider(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    return swift_release();
  }
  else
  {
    uint64_t v3 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    unint64_t v4 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v5 = a1 + v4[8];
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    if (!v8(v5, 1, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    }
    uint64_t v9 = a1 + v4[11];
    if (!v8(v9, 1, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void *initializeWithCopy for AnyGroupActivity.MetadataProvider(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_retain();
  }
  else
  {
    uint64_t v4 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    uint64_t v5 = (int *)type metadata accessor for GroupActivityMetadata(0);
    uint64_t v6 = v5[5];
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    uint64_t v9 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v9;
    uint64_t v10 = v5[6];
    uint64_t v11 = (void *)((char *)a1 + v10);
    uint64_t v12 = (void *)((char *)a2 + v10);
    uint64_t v13 = v12[1];
    void *v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = v5[7];
    uint64_t v15 = *(void **)((char *)a2 + v14);
    *(void *)((char *)a1 + v14) = v15;
    uint64_t v16 = v5[8];
    __dst = (char *)a1 + v16;
    uint64_t v17 = (char *)a2 + v16;
    uint64_t v18 = type metadata accessor for URL();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v21 = v15;
    if (v20(v17, 1, v18))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v17, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(__dst, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
    *((unsigned char *)a1 + v5[10]) = *((unsigned char *)a2 + v5[10]);
    uint64_t v23 = v5[11];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    if (v20((char *)a2 + v23, 1, v18))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v24, v25, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v24, 0, 1, v18);
    }
    uint64_t v27 = v5[12];
    uint64_t v28 = (char *)a1 + v27;
    uint64_t v29 = (char *)a2 + v27;
    *uint64_t v28 = *v29;
    uint64_t v30 = *((void *)v29 + 2);
    *((void *)v28 + 1) = *((void *)v29 + 1);
    *((void *)v28 + 2) = v30;
    uint64_t v31 = *((void *)v29 + 4);
    *((void *)v28 + 3) = *((void *)v29 + 3);
    *((void *)v28 + 4) = v31;
    *((unsigned char *)a1 + v5[13]) = *((unsigned char *)a2 + v5[13]);
    *(void *)((char *)a1 + v5[14]) = *(void *)((char *)a2 + v5[14]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for AnyGroupActivity.MetadataProvider(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of GroupActivityMetadata((uint64_t)a1, type metadata accessor for AnyGroupActivity.MetadataProvider);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
    }
    else
    {
      uint64_t v4 = type metadata accessor for GroupActivityDescription();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = (int *)type metadata accessor for GroupActivityMetadata(0);
      uint64_t v6 = v5[5];
      uint64_t v7 = (void *)((char *)a1 + v6);
      uint64_t v8 = (void *)((char *)a2 + v6);
      *uint64_t v7 = *v8;
      v7[1] = v8[1];
      uint64_t v9 = v5[6];
      uint64_t v10 = (void *)((char *)a1 + v9);
      uint64_t v11 = (void *)((char *)a2 + v9);
      *uint64_t v10 = *v11;
      v10[1] = v11[1];
      uint64_t v12 = v5[7];
      uint64_t v13 = *(void **)((char *)a2 + v12);
      *(void *)((char *)a1 + v12) = v13;
      uint64_t v14 = v5[8];
      __dst = (char *)a1 + v14;
      uint64_t v15 = (char *)a2 + v14;
      uint64_t v16 = type metadata accessor for URL();
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v19 = v13;
      if (v18(v15, 1, v16))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dst, v15, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
      *((unsigned char *)a1 + v5[10]) = *((unsigned char *)a2 + v5[10]);
      uint64_t v21 = v5[11];
      uint64_t v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      if (v18((char *)a2 + v21, 1, v16))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v22, v23, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v22, 0, 1, v16);
      }
      uint64_t v25 = v5[12];
      uint64_t v26 = (char *)a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      *uint64_t v26 = *v27;
      *((void *)v26 + 1) = *((void *)v27 + 1);
      *((void *)v26 + 2) = *((void *)v27 + 2);
      *((void *)v26 + 3) = *((void *)v27 + 3);
      *((void *)v26 + 4) = *((void *)v27 + 4);
      *((unsigned char *)a1 + v5[13]) = *((unsigned char *)a2 + v5[13]);
      *(void *)((char *)a1 + v5[14]) = *(void *)((char *)a2 + v5[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for AnyGroupActivity.MetadataProvider(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = (int *)type metadata accessor for GroupActivityMetadata(0);
    *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
    *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
    *(void *)&a1[v7[7]] = *(void *)&a2[v7[7]];
    uint64_t v8 = v7[8];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(void *)&a1[v7[9]] = *(void *)&a2[v7[9]];
    a1[v7[10]] = a2[v7[10]];
    uint64_t v15 = v7[11];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = &a2[v15];
    if (v13(&a2[v15], 1, v11))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v17, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
    }
    uint64_t v19 = v7[12];
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    long long v22 = *((_OWORD *)v21 + 1);
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v22;
    *((void *)v20 + 4) = *((void *)v21 + 4);
    a1[v7[13]] = a2[v7[13]];
    *(void *)&a1[v7[14]] = *(void *)&a2[v7[14]];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for AnyGroupActivity.MetadataProvider(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of GroupActivityMetadata((uint64_t)a1, type metadata accessor for AnyGroupActivity.MetadataProvider);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for GroupActivityDescription();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for GroupActivityMetadata(0);
      *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
      *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
      *(void *)&a1[v7[7]] = *(void *)&a2[v7[7]];
      uint64_t v8 = v7[8];
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for URL();
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
      if (v13(v10, 1, v11))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(void *)&a1[v7[9]] = *(void *)&a2[v7[9]];
      a1[v7[10]] = a2[v7[10]];
      uint64_t v15 = v7[11];
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      if (v13(&a2[v15], 1, v11))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v17, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
      }
      uint64_t v19 = v7[12];
      uint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      long long v22 = *((_OWORD *)v21 + 1);
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
      *((_OWORD *)v20 + 1) = v22;
      *((void *)v20 + 4) = *((void *)v21 + 4);
      a1[v7[13]] = a2[v7[13]];
      *(void *)&a1[v7[14]] = *(void *)&a2[v7[14]];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyGroupActivity.MetadataProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AnyGroupActivity.MetadataProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for AnyGroupActivity.MetadataProvider()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t getEnumTagSinglePayload for AnyGroupActivity.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AnyGroupActivity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A37A654CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AnyGroupActivity.CodingKeys()
{
  return &unk_1EF7187A8;
}

unint64_t specialized AnyGroupActivity.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnyGroupActivity.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = (int *)type metadata accessor for AnyGroupActivity(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[5];
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    uint64_t v18 = v4;
    uint64_t v19 = v0;
    uint64_t v7 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    int v8 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v9 = v6 + v8[8];
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (!v12(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
    uint64_t v13 = v6 + v8[11];
    if (!v12(v13, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = (v2 + 16) & ~v2;
    uint64_t v0 = v19;
    uint64_t v4 = v18;
  }
  uint64_t v14 = v3 + v4;
  outlined consume of Data._Representation(*(void *)(v5 + v1[6]), *(void *)(v5 + v1[6] + 8));
  uint64_t v15 = v5 + v1[7];
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v14, v2 | 7);
}

uint64_t partial apply for closure #1 in AnyGroupActivity.tuConversationActivity.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(type metadata accessor for AnyGroupActivity(0) - 8);
  uint64_t v7 = v3 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a3(a1, a2, v7);
}

uint64_t sub_1A37A6A24()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v1 = type metadata accessor for CheckedContinuation();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(void **a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for CheckedContinuation();

  return closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(a1);
}

uint64_t sub_1A37A6B74()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v1 = type metadata accessor for CheckedContinuation();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #2 in closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(id *a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for CheckedContinuation();

  return closure #2 in closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(a1);
}

unint64_t type metadata accessor for TUConversationActivity()
{
  unint64_t result = lazy cache variable for type metadata for TUConversationActivity;
  if (!lazy cache variable for type metadata for TUConversationActivity)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
  }
  return result;
}

uint64_t sub_1A37A6D00()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GroupActivityMetadata, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in AnyGroupActivity.metadata.getter(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GroupActivityMetadata, Never>);

  return closure #1 in closure #1 in AnyGroupActivity.metadata.getter(a1);
}

uint64_t lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A37A6E58()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TUConversationActivity, Error>) -> ()(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t partial apply for specialized closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in AnyGroupActivity.tuConversationActivity.getter(a1, a2, specialized closure #1 in GroupActivity.awaitMetadataValue());
}

uint64_t sub_1A37A6EEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for AnyGroupActivity(0);
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v6 = v1 + v4;
  swift_bridgeObjectRelease();
  uint64_t v7 = v1 + v4 + v2[5];
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    uint64_t v18 = v5;
    uint64_t v19 = v1;
    uint64_t v8 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    uint64_t v9 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v10 = v7 + v9[8];
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (!v13(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
    uint64_t v14 = v7 + v9[11];
    if (!v13(v14, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v11);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = (v3 + 16) & ~v3;
    uint64_t v1 = v19;
    uint64_t v5 = v18;
  }
  outlined consume of Data._Representation(*(void *)(v6 + v2[6]), *(void *)(v6 + v2[6] + 8));
  uint64_t v15 = v6 + v2[7];
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v1, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

void partial apply for closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AnyGroupActivity(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void (**)(id, void))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity.getter(a1, (uint64_t *)(v1 + v4), v5);
}

uint64_t sub_1A37A725C()
{
  uint64_t v1 = (int *)type metadata accessor for AnyGroupActivity(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[5];
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    uint64_t v19 = v4;
    uint64_t v20 = (v2 + 48) & ~v2;
    uint64_t v21 = v2;
    uint64_t v7 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    uint64_t v8 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v9 = v6 + v8[8];
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (!v12(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
    uint64_t v13 = v6 + v8[11];
    if (!v12(v13, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = v20;
    uint64_t v2 = v21;
    uint64_t v4 = v19;
  }
  uint64_t v14 = v2 | 7;
  uint64_t v15 = v3 + v4;
  outlined consume of Data._Representation(*(void *)(v5 + v1[6]), *(void *)(v5 + v1[6] + 8));
  uint64_t v16 = v5 + v1[7];
  uint64_t v17 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v15, v14);
}

uint64_t partial apply for specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1)
{
  type metadata accessor for AnyGroupActivity(0);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue()(a1, v4, v5, v6, v7);
}

uint64_t PresenceGroupSessionProviderObserver.groupSessionService.getter()
{
  swift_beginAccess();
  return MEMORY[0x1A624F980](v0 + 16);
}

uint64_t PresenceGroupSessionProviderObserver.groupSessionService.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PresenceGroupSessionProviderObserver.groupSessionService.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1A624F980](v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return PresenceGroupSessionProviderObserver.groupSessionService.modify;
}

void PresenceGroupSessionProviderObserver.groupSessionService.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 24) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t PresenceGroupSessionProviderObserver.provider.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t PresenceGroupSessionProviderObserver.presenceSession.getter()
{
  return swift_retain();
}

uint64_t PresenceGroupSessionProviderObserver.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PresenceGroupSessionProviderObserver.cancellables.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PresenceGroupSessionProviderObserver.cancellables.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

void *PresenceGroupSessionProviderObserver.maxAllowedDevices.unsafeMutableAddressor()
{
  return &static PresenceGroupSessionProviderObserver.maxAllowedDevices;
}

uint64_t static PresenceGroupSessionProviderObserver.maxAllowedDevices.getter()
{
  return 33;
}

void *PresenceGroupSessionProviderObserver.__allocating_init(provider:groupSessionService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t ObjectType = swift_getObjectType();

  return specialized PresenceGroupSessionProviderObserver.init(provider:groupSessionService:)(a1, a2, a3, v8, ObjectType, a4);
}

void *PresenceGroupSessionProviderObserver.init(provider:groupSessionService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType();

  return specialized PresenceGroupSessionProviderObserver.init(provider:groupSessionService:)(a1, a2, a3, v4, ObjectType, a4);
}

uint64_t PresenceGroupSessionProviderObserver.join()()
{
  v1[14] = v0;
  v1[15] = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v1[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](PresenceGroupSessionProviderObserver.join(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void (*v3)(void *, void);
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void (*v13)(void *, void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void (*v19)(void *, void);
  void *v20;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v24)(void *);
  uint64_t (*v25)(void);
  uint64_t v26;
  void *v27;
  uint64_t v28;

  uint64_t v27 = v0;
  uint64_t v1 = v0[16];
  long long v22 = v0[15];
  uint64_t v2 = (void *)v0[14];
  uint64_t v24 = *(uint64_t (**)(void *))(*v2 + 152);
  uint64_t v3 = (void (*)(void *, void))v24(v0 + 2);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  *uint64_t v5 = MEMORY[0x1E4FBC870];
  v3(v0 + 2, 0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  uint64_t v7 = v23(v1, 1, 1, v6);
  uint64_t v8 = v2[6];
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 272))(v7);
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = 0;
  void v11[3] = 0;
  v11[4] = v9;
  v11[5] = v10;
  v11[6] = v22;
  v0[17] = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in PresenceGroupSessionProviderObserver.join(), (uint64_t)v11);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  uint64_t v12 = AnyCancellable.init(_:)();
  uint64_t v13 = (void (*)(void *, void))v24(v0 + 6);
  specialized Set._Variant.insert(_:)(&v26, v12);
  swift_release();
  v13(v0 + 6, 0);
  uint64_t v14 = v23(v1, 1, 1, v6);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 184))(v14);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  _OWORD v17[3] = 0;
  v17[4] = v15;
  v17[5] = v16;
  v0[18] = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #3 in PresenceGroupSessionProviderObserver.join(), (uint64_t)v17);
  swift_allocObject();
  swift_retain();
  uint64_t v18 = AnyCancellable.init(_:)();
  uint64_t v19 = (void (*)(void *, void))v24(v0 + 10);
  specialized Set._Variant.insert(_:)(&v26, v18);
  swift_release();
  v19(v0 + 10, 0);
  uint64_t v25 = (uint64_t (*)(void))(*(void *)(*(void *)v8 + 360) + **(int **)(*(void *)v8 + 360));
  uint64_t v20 = (void *)swift_task_alloc();
  v0[19] = v20;
  *uint64_t v20 = v0;
  v20[1] = PresenceGroupSessionProviderObserver.join();
  return v25();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = PresenceGroupSessionProviderObserver.join();
  }
  else {
    uint64_t v2 = PresenceGroupSessionProviderObserver.join();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in PresenceGroupSessionProviderObserver.join()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[33] = a4;
  v5[34] = a5;
  uint64_t v6 = type metadata accessor for PresenceSessionInfo.Participant(0);
  v5[35] = v6;
  v5[36] = *(void *)(v6 - 8);
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v5[39] = swift_task_alloc();
  v5[40] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSessionInfo, Never>>);
  v5[41] = v7;
  v5[42] = *(void *)(v7 - 8);
  v5[43] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSessionInfo, Never>>.Iterator);
  v5[44] = v8;
  v5[45] = *(void *)(v8 - 8);
  v5[46] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in PresenceGroupSessionProviderObserver.join(), 0, 0);
}

uint64_t closure #1 in PresenceGroupSessionProviderObserver.join()()
{
  uint64_t v1 = v0[42];
  uint64_t v2 = v0[43];
  uint64_t v3 = v0[41];
  v0[27] = v0[33];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>);
  uint64_t v5 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<PresenceSessionInfo, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>);
  MEMORY[0x1A624DD30](v4, v5);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_beginAccess();
  uint64_t v6 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PresenceSessionInfo, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSessionInfo, Never>>.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[47] = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #1 in PresenceGroupSessionProviderObserver.join();
  uint64_t v8 = v0[44];
  return MEMORY[0x1F4187C78](v0 + 25, v8, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 384) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in PresenceGroupSessionProviderObserver.join();
  }
  else {
    uint64_t v2 = closure #1 in PresenceGroupSessionProviderObserver.join();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  long long v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t (*v61)(void);
  _OWORD *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;

  id v76 = v0;
  uint64_t v1 = (uint64_t)(v0 + 25);
  uint64_t v2 = v0[25];
  if (!v2) {
    goto LABEL_18;
  }
  uint64_t Strong = swift_weakLoadStrong();
  v0[49] = Strong;
  if (!Strong)
  {
    (*(void (**)(void, void))(v0[45] + 8))(v0[46], v0[44]);
    swift_bridgeObjectRelease();
LABEL_52:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v61 = (uint64_t (*)(void))v0[1];
    return v61();
  }
  uint64_t v68 = v0 + 25;
  uint64_t v1 = (uint64_t)(v0 + 31);
  uint64_t v4 = *(void *)(Strong + 40);
  uint64_t v65 = (void *)Strong;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
  v0[30] = v2;
  CurrentValueSubject.send(_:)();
  swift_release();
  int v64 = v0 + 9;
  specialized Collection.prefix(_:)(33, v2, (uint64_t)(v0 + 9));
  uint64_t v7 = v0[9];
  uint64_t v6 = v0[10];
  v0[50] = v7;
  v0[51] = v6;
  uint64_t v8 = *((unsigned char *)v0 + 88);
  uint64_t v9 = v0[13];
  uint64_t v72 = v0[12];
  uint64_t v10 = *((unsigned char *)v0 + 112);
  uint64_t v11 = v0[15];
  swift_bridgeObjectRelease();
  *((_OWORD *)v0 + 11) = *((_OWORD *)v0 + 6);
  *((unsigned char *)v0 + 192) = *((unsigned char *)v0 + 112);
  uint64_t v74 = v11;
  v0[31] = v11;
  outlined copy of Set<A>.Index._Variant<A>(v7, v6, v8);
  uint64_t v69 = v6;
  outlined copy of Set<A>.Index._Variant<A>(v7, v6, v8);
  uint64_t v66 = (uint64_t)(v0 + 22);
  outlined retain of Set<PresenceSessionInfo.Participant>.Index((uint64_t)(v0 + 22));
  id v67 = (uint64_t)(v0 + 31);
  outlined retain of Set<PresenceSessionInfo.Participant>((uint64_t)(v0 + 31));
  if (v8 & 1) != 0 || (v10)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    (*(void (**)(void, void))(v0[45] + 8))(v0[46], v0[44]);
    if (one-time initialization token for groupSessionProviderObserver != -1) {
LABEL_69:
    }
      swift_once();
    long long v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.groupSessionProviderObserver);
    swift_retain_n();
    uint64_t v23 = Logger.logObject.getter();
    uint64_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint64_t *)(v1 + 32);
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      unsigned __int8 v75 = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      swift_beginAccess();
      uint64_t v28 = swift_weakLoadStrong();
      if (v28)
      {
        *uint64_t v25 = v28;
        type metadata accessor for PresenceGroupSessionProviderObserver();
        uint64_t v29 = String.init<A>(reflecting:)();
        uint64_t v31 = v30;
      }
      else
      {
        uint64_t v31 = 0xE300000000000000;
        uint64_t v29 = 7104878;
      }
      v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v23, v24, "%s PresenceSession's sessionInfo publisher has finished", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v27, -1, -1);
      MEMORY[0x1A624F870](v26, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    goto LABEL_52;
  }
  uint64_t v12 = v6;
  int v63 = v0 + 2;
  uint64_t v70 = v11 + 56;
  uint64_t v71 = v0;
  uint64_t v13 = v7;
  while (1)
  {
    if (v12 != v9)
    {
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    uint64_t v1 = v72;
    if (v13 == v72) {
      break;
    }
    if (v13 < v7) {
      goto LABEL_57;
    }
    if (v9 != v69) {
      goto LABEL_58;
    }
    if (v13 >= v72) {
      goto LABEL_59;
    }
    if (v13 < 0 || v13 >= 1 << *(unsigned char *)(v74 + 32)) {
      goto LABEL_60;
    }
    if (((*(void *)(v70 + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
      goto LABEL_61;
    }
    if (*(_DWORD *)(v74 + 36) != v9) {
      goto LABEL_62;
    }
    uint64_t v14 = v7;
    uint64_t v15 = v0[39];
    uint64_t v1 = v0[40];
    uint64_t v17 = v0 + 35;
    uint64_t v16 = v0[35];
    uint64_t v18 = *(void *)(v17[1] + 72);
    outlined init with copy of PresenceSessionInfo.Participant(*(void *)(v74 + 48) + v18 * v13, v1, type metadata accessor for PresenceSessionInfo.Participant);
    uint64_t v13 = specialized _NativeSet.index(after:)(v13, v12, 0, v74);
    uint64_t v12 = v19;
    uint64_t v21 = v20;
    outlined init with take of PresenceSessionInfo.Participant(v1, v15, type metadata accessor for PresenceSessionInfo.Participant);
    LODWORD(v16) = *(unsigned __int8 *)(v15 + *(int *)(v16 + 24));
    outlined destroy of PresenceSessionInfo.Participant(v15, type metadata accessor for PresenceSessionInfo.Participant);
    if (v16 == 1)
    {
      outlined consume of Set<Participant>.Index._Variant(v7, v69, 0);
      uint64_t v1 = v72;
      uint64_t v34 = v9;
      outlined consume of Set<Participant>.Index._Variant(v72, v9, 0);
      swift_bridgeObjectRelease();
      outlined consume of Set<Participant>.Index._Variant(v13, v12, v21 & 1);
      outlined copy of Set<A>.Index._Variant<A>(v7, v69, 0);
      outlined copy of Set<A>.Index._Variant<A>(v7, v69, 0);
      outlined retain of Set<PresenceSessionInfo.Participant>.Index(v66);
      outlined retain of Set<PresenceSessionInfo.Participant>(v67);
      uint64_t v12 = v69;
      uint64_t v35 = v7;
      while (1)
      {
        uint64_t v0 = v71;
        if (v12 != v34) {
          goto LABEL_63;
        }
        if (v35 == v1) {
          goto LABEL_37;
        }
        if (v35 < v7) {
          goto LABEL_64;
        }
        if (v35 >= v1) {
          goto LABEL_65;
        }
        if (v35 < 0 || v35 >= 1 << *(unsigned char *)(v74 + 32)) {
          goto LABEL_66;
        }
        if (((*(void *)(v70 + (((unint64_t)v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) == 0) {
          goto LABEL_67;
        }
        if (*(_DWORD *)(v74 + 36) != v34) {
          goto LABEL_68;
        }
        uint64_t v37 = v71[37];
        uint64_t v36 = v71[38];
        uint64_t v38 = v71[35];
        outlined init with copy of PresenceSessionInfo.Participant(*(void *)(v74 + 48) + v35 * v18, v36, type metadata accessor for PresenceSessionInfo.Participant);
        uint64_t v35 = specialized _NativeSet.index(after:)(v35, v12, 0, v74);
        uint64_t v12 = v39;
        unint64_t v41 = v40;
        outlined init with take of PresenceSessionInfo.Participant(v36, v37, type metadata accessor for PresenceSessionInfo.Participant);
        uint64_t v0 = (void *)*(unsigned __int8 *)(v37 + *(int *)(v38 + 24));
        outlined destroy of PresenceSessionInfo.Participant(v37, type metadata accessor for PresenceSessionInfo.Participant);
        if ((v0 & 1) == 0)
        {
          outlined consume of Set<Participant>.Index._Variant(v14, v69, 0);
          outlined consume of Set<Participant>.Index._Variant(v72, v9, 0);
          swift_bridgeObjectRelease();
          uint64_t v53 = outlined consume of Set<Participant>.Index._Variant(v35, v12, v41 & 1);
          uint64_t v54 = (*(uint64_t (**)(uint64_t))(*v65 + 112))(v53);
          uint64_t v0 = v71;
          v71[52] = v54;
          if (!v54)
          {
            outlined consume of Set<Participant>.Index._Variant(v14, v69, 0);
            outlined release of Set<PresenceSessionInfo.Participant>.Index(v66);
            outlined release of Set<PresenceSessionInfo.Participant>(v67);
            swift_release();
            goto LABEL_43;
          }
          uint64_t v56 = v55;
          uint64_t v57 = swift_getObjectType();
          uint64_t v58 = v65[4];
          v71[53] = v58;
          id v59 = *(void *)(v65[5] + 8);
          uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 + 16) + **(int **)(v56 + 16));
          swift_unknownObjectRetain();
          id v60 = (void *)swift_task_alloc();
          v71[54] = v60;
          void *v60 = v71;
          v60[1] = closure #1 in PresenceGroupSessionProviderObserver.join();
          return v73(v58, v59, v57, v56);
        }
        uint64_t v7 = v14;
        uint64_t v1 = v72;
        uint64_t v34 = v9;
        if (v41)
        {
          __break(1u);
LABEL_37:
          outlined consume of Set<Participant>.Index._Variant(v7, v69, 0);
          uint64_t v32 = v1;
          uint64_t v33 = v34;
          goto LABEL_38;
        }
      }
    }
    uint64_t v0 = v71;
    if (v21) {
      goto LABEL_17;
    }
  }
  outlined consume of Set<Participant>.Index._Variant(v7, v69, 0);
  uint64_t v32 = v72;
  uint64_t v33 = v9;
LABEL_38:
  outlined consume of Set<Participant>.Index._Variant(v32, v33, 0);
  swift_bridgeObjectRelease();
  outlined consume of Set<Participant>.Index._Variant(v1, v12, 0);
  if (one-time initialization token for groupSessionProviderObserver != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Log.groupSessionProviderObserver);
  outlined copy of Set<A>.Index._Variant<A>(v7, v69, 0);
  outlined retain of Set<PresenceSessionInfo.Participant>.Index(v66);
  outlined retain of Set<PresenceSessionInfo.Participant>(v67);
  outlined copy of Set<A>.Index._Variant<A>(v7, v69, 0);
  outlined retain of Set<PresenceSessionInfo.Participant>.Index(v66);
  outlined retain of Set<PresenceSessionInfo.Participant>(v67);
  uint64_t v43 = Logger.logObject.getter();
  uint64_t v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    unsigned __int8 v75 = v46;
    *(_DWORD *)uint64_t v45 = 136315138;
    uint64_t v0 = v71;
    uint64_t v47 = *((_OWORD *)v64 + 1);
    *int v63 = *(_OWORD *)v64;
    *(_OWORD *)(v68 - 21) = v47;
    *(_OWORD *)(v68 - 19) = *((_OWORD *)v64 + 2);
    *(v68 - 17) = v64[6];
    outlined copy of Set<A>.Index._Variant<A>(v7, v69, 0);
    outlined retain of Set<PresenceSessionInfo.Participant>.Index(v66);
    outlined retain of Set<PresenceSessionInfo.Participant>(v67);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<Set<PresenceSessionInfo.Participant>>);
    uint64_t v48 = String.init<A>(reflecting:)();
    v71[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Set<Participant>.Index._Variant(v7, v69, 0);
    outlined release of Set<PresenceSessionInfo.Participant>.Index(v66);
    outlined release of Set<PresenceSessionInfo.Participant>(v67);
    outlined consume of Set<Participant>.Index._Variant(v7, v69, 0);
    outlined release of Set<PresenceSessionInfo.Participant>.Index(v66);
    outlined release of Set<PresenceSessionInfo.Participant>(v67);
    _os_log_impl(&dword_1A375F000, v43, v44, "Not setting up IDSGroupSession since we don't have >1 other device %s", v45, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v46, -1, -1);
    MEMORY[0x1A624F870](v45, -1, -1);
    swift_release();

    outlined consume of Set<Participant>.Index._Variant(v7, v69, 0);
    outlined release of Set<PresenceSessionInfo.Participant>.Index(v66);
    outlined release of Set<PresenceSessionInfo.Participant>(v67);
  }
  else
  {
    outlined consume of Set<Participant>.Index._Variant(v7, v69, 0);
    outlined release of Set<PresenceSessionInfo.Participant>.Index(v66);
    outlined release of Set<PresenceSessionInfo.Participant>(v67);
    swift_release();
    outlined consume of Set<Participant>.Index._Variant(v7, v69, 0);
    outlined release of Set<PresenceSessionInfo.Participant>.Index(v66);
    outlined release of Set<PresenceSessionInfo.Participant>(v67);
    outlined consume of Set<Participant>.Index._Variant(v7, v69, 0);
    outlined release of Set<PresenceSessionInfo.Participant>.Index(v66);
    outlined release of Set<PresenceSessionInfo.Participant>(v67);
  }
LABEL_43:
  uint64_t v50 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PresenceSessionInfo, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSessionInfo, Never>>.Iterator);
  uint64_t v51 = (void *)swift_task_alloc();
  v0[47] = v51;
  *uint64_t v51 = v0;
  v51[1] = closure #1 in PresenceGroupSessionProviderObserver.join();
  uint64_t v52 = v0[44];
  return MEMORY[0x1F4187C78](v68, v52, v50);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 208) = *(void *)(v0 + 384);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v0) {
    uint64_t v2 = closure #1 in PresenceGroupSessionProviderObserver.join();
  }
  else {
    uint64_t v2 = closure #1 in PresenceGroupSessionProviderObserver.join();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  outlined consume of Set<Participant>.Index._Variant(v0[50], v0[51], 0);
  outlined release of Set<PresenceSessionInfo.Participant>.Index((uint64_t)(v0 + 22));
  outlined release of Set<PresenceSessionInfo.Participant>((uint64_t)(v0 + 31));
  swift_release();
  uint64_t v1 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PresenceSessionInfo, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSessionInfo, Never>>.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[47] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in PresenceGroupSessionProviderObserver.join();
  uint64_t v3 = v0[44];
  return MEMORY[0x1F4187C78](v0 + 25, v3, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = v0[50];
  uint64_t v1 = v0[51];
  uint64_t v4 = v0[45];
  uint64_t v3 = v0[46];
  uint64_t v5 = v0[44];
  swift_release();
  outlined consume of Set<Participant>.Index._Variant(v2, v1, 0);
  outlined release of Set<PresenceSessionInfo.Participant>.Index((uint64_t)(v0 + 22));
  outlined release of Set<PresenceSessionInfo.Participant>((uint64_t)(v0 + 31));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t closure #3 in PresenceGroupSessionProviderObserver.join()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[13] = a4;
  v5[14] = a5;
  uint64_t v6 = type metadata accessor for UUID();
  v5[15] = v6;
  v5[16] = *(void *)(v6 - 8);
  v5[17] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSession.State, Never>>);
  v5[18] = v7;
  v5[19] = *(void *)(v7 - 8);
  v5[20] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSession.State, Never>>.Iterator);
  v5[21] = v8;
  v5[22] = *(void *)(v8 - 8);
  v5[23] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #3 in PresenceGroupSessionProviderObserver.join(), 0, 0);
}

uint64_t closure #3 in PresenceGroupSessionProviderObserver.join()()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[18];
  v0[8] = v0[13];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSession.State, Never>);
  uint64_t v5 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<PresenceSession.State, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<PresenceSession.State, Never>);
  MEMORY[0x1A624DD30](v4, v5);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_beginAccess();
  uint64_t v6 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PresenceSession.State, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSession.State, Never>>.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[24] = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #3 in PresenceGroupSessionProviderObserver.join();
  uint64_t v8 = v0[21];
  return MEMORY[0x1F4187C78](v0 + 30, v8, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #3 in PresenceGroupSessionProviderObserver.join();
  }
  else {
    uint64_t v2 = closure #3 in PresenceGroupSessionProviderObserver.join();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  *(unsigned char *)(v0 + 242) = *(unsigned char *)(v0 + 240);
  return MEMORY[0x1F4188298](closure #3 in PresenceGroupSessionProviderObserver.join(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  uint64_t v39 = v0;
  if (*(unsigned char *)(v0 + 242) == 3)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 176) + 8))(*(void *)(v0 + 184), *(void *)(v0 + 168));
    if (one-time initialization token for groupSessionProviderObserver != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProviderObserver);
    swift_retain_n();
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v38 = v5;
      *(_DWORD *)uint64_t v4 = 136315138;
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        *(void *)(v0 + 88) = Strong;
        type metadata accessor for PresenceGroupSessionProviderObserver();
        uint64_t v7 = String.init<A>(reflecting:)();
        uint64_t v9 = v8;
      }
      else
      {
        uint64_t v9 = 0xE300000000000000;
        uint64_t v7 = 7104878;
      }
      *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v2, v3, "%s PresenceSession's state publisher has finished", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v5, -1, -1);
      MEMORY[0x1A624F870](v4, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    goto LABEL_25;
  }
  uint64_t v10 = swift_weakLoadStrong();
  *(void *)(v0 + 208) = v10;
  if (!v10)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 176) + 8))(*(void *)(v0 + 184), *(void *)(v0 + 168));
LABEL_25:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
    return v36();
  }
  uint64_t v11 = (void *)v10;
  if (one-time initialization token for groupSessionProviderObserver != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.groupSessionProviderObserver);
  swift_retain_n();
  uint64_t v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = *(unsigned char *)(v0 + 242);
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v38 = v17;
    *(_DWORD *)uint64_t v16 = 136315394;
    *(void *)(v0 + 96) = v11;
    type metadata accessor for PresenceGroupSessionProviderObserver();
    swift_retain();
    uint64_t v18 = String.init<A>(reflecting:)();
    *(void *)(v16 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v38);
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    *(unsigned char *)(v0 + 241) = v15;
    uint64_t v20 = String.init<A>(reflecting:)();
    *(void *)(v16 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v38);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v13, v14, "%s observed state transition to: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v17, -1, -1);
    MEMORY[0x1A624F870](v16, -1, -1);
  }
  else
  {

    long long v22 = swift_release_n();
  }
  if (*(unsigned char *)(v0 + 242) == 2
    && (uint64_t v23 = (*(uint64_t (**)(uint64_t))(*v11 + 112))(v22), (*(void *)(v0 + 216) = v23) != 0))
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)(v0 + 136);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v28 = v11[5];
    uint64_t v29 = swift_getObjectType();
    GroupSessionProvider.uuid.getter(v29, *(void *)(v28 + 8), v26);
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 + 32) + **(int **)(v25 + 32));
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v30;
    *uint64_t v30 = v0;
    v30[1] = closure #3 in PresenceGroupSessionProviderObserver.join();
    uint64_t v31 = *(void *)(v0 + 136);
    return v37(v31, ObjectType, v25);
  }
  else
  {
    swift_release();
    uint64_t v33 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PresenceSession.State, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSession.State, Never>>.Iterator);
    uint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v34;
    *uint64_t v34 = v0;
    v34[1] = closure #3 in PresenceGroupSessionProviderObserver.join();
    uint64_t v35 = *(void *)(v0 + 168);
    return MEMORY[0x1F4187C78](v0 + 240, v35, v33);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 72) = *(void *)(v0 + 200);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[17];
  uint64_t v4 = v2[16];
  uint64_t v5 = v2[15];
  if (v0)
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_unknownObjectRelease();
    uint64_t v6 = closure #3 in PresenceGroupSessionProviderObserver.join();
  }
  else
  {
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = closure #3 in PresenceGroupSessionProviderObserver.join();
  }
  return MEMORY[0x1F4188298](v6, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  swift_release();
  uint64_t v1 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PresenceSession.State, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSession.State, Never>>.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #3 in PresenceGroupSessionProviderObserver.join();
  uint64_t v3 = *(void *)(v0 + 168);
  return MEMORY[0x1F4187C78](v0 + 240, v3, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t PresenceGroupSessionProviderObserver.leave()()
{
  *(void *)(v1 + 48) = v0;
  return MEMORY[0x1F4188298](PresenceGroupSessionProviderObserver.leave(), 0, 0);
}

{
  uint64_t v0;
  void **v1;
  void (*v2)(uint64_t, void);
  void *v3;
  void *v4;
  void *v5;
  uint64_t (*v7)(void);
  uint64_t v8;

  uint64_t v1 = *(void ***)(v0 + 48);
  uint64_t v2 = (void (*)(uint64_t, void))((uint64_t (*)(uint64_t))(*v1)[19])(v0 + 16);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  *uint64_t v4 = MEMORY[0x1E4FBC870];
  v2(v0 + 16, 0);
  uint64_t v7 = (uint64_t (*)(void))(*(void *)(*v1[6] + 368) + **(int **)(*v1[6] + 368));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v5;
  *uint64_t v5 = v0;
  v5[1] = PresenceGroupSessionProviderObserver.leave();
  return v7();
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t PresenceGroupSessionProviderObserver.deinit()
{
  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 16);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PresenceGroupSessionProviderObserver.__deallocating_deinit()
{
  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 16);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for AnyCancellable();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v20 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v17);
    uint64_t *v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
  swift_bridgeObjectRetain();
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  uint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v15, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CPParticipant);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1, &demangling cache variable for type metadata for _SetStorage<CPParticipant>, &lazy cache variable for type metadata for CPParticipant, 0x1E4F5B148, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
    uint64_t v30 = (void *)v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27);
      uint64_t v24 = v30;
    }
    else
    {
      uint64_t v24 = (void *)v22;
      id v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v24);
    uint64_t *v3 = (uint64_t)v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CPParticipant);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  unint64_t v23;
  void *v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1, &demangling cache variable for type metadata for _SetStorage<TUHandle>, (unint64_t *)&lazy cache variable for type metadata for TUHandle, 0x1E4FADBD8, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
    uint64_t v30 = (void *)v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27);
      uint64_t v24 = v30;
    }
    else
    {
      uint64_t v24 = (void *)v22;
      id v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v24);
    uint64_t *v3 = (uint64_t)v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    id v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    char v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      Swift::Int v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  uint64_t v15;
  void (*v16)(void, void, void);
  void (**v17)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  void (*v20)(void, void, void);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  void v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    id v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    char v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      Swift::Int v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for AnyCancellable();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v2;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, void (*a6)(unint64_t))
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v8 = static _SetStorage.convert(_:capacity:)();
    uint64_t v21 = v8;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for OS_dispatch_queue(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v8 = v21;
        unint64_t v15 = *(void *)(v21 + 16);
        if (*(void *)(v21 + 24) <= v15)
        {
          a6(v15 + 1);
          uint64_t v8 = v21;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
        uint64_t v10 = v8 + 56;
        uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
        unint64_t v12 = result & ~v11;
        unint64_t v13 = v12 >> 6;
        if (((-1 << v12) & ~*(void *)(v8 + 56 + 8 * (v12 >> 6))) != 0)
        {
          unint64_t v14 = __clz(__rbit64((-1 << v12) & ~*(void *)(v8 + 56 + 8 * (v12 >> 6)))) | v12 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v16 = 0;
          unint64_t v17 = (unint64_t)(63 - v11) >> 6;
          do
          {
            if (++v13 == v17 && (v16 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v18 = v13 == v17;
            if (v13 == v17) {
              unint64_t v13 = 0;
            }
            v16 |= v18;
            uint64_t v19 = *(void *)(v10 + 8 * v13);
          }
          while (v19 == -1);
          unint64_t v14 = __clz(__rbit64(~v19)) + (v13 << 6);
        }
        *(void *)(v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        *(void *)(*(void *)(v8 + 48) + 8 * v14) = v20;
        ++*(void *)(v8 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v8;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v28 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  char v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v27 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_19;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_19;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  unint64_t v13 = (void *)(a1 + *(int *)(v7 + 20));
  String.hash(into:)();
  uint64_t v14 = *(int *)(v7 + 24);
  Hasher._combine(_:)(*(void *)(a1 + v14));
  Swift::Int v15 = Hasher._finalize()();
  uint64_t v16 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v15 & ~v16;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v28 + 72);
    do
    {
      outlined init with copy of PresenceSessionInfo.Participant(*(void *)(v12 + 48) + v18 * a2, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Participant);
      if (static UUID.== infix(_:_:)())
      {
        uint64_t v19 = &v9[*(int *)(v7 + 20)];
        BOOL v20 = *(void *)v19 == *v13 && *((void *)v19 + 1) == v13[1];
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)())
          && *(void *)&v9[*(int *)(v7 + 24)] == *(void *)(a1 + v14))
        {
          goto LABEL_22;
        }
      }
      outlined destroy of PresenceSessionInfo.Participant((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Participant);
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_19:
  uint64_t v21 = *v27;
  *(void *)(*v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of PresenceSessionInfo.Participant(a1, *(void *)(v21 + 48) + *(void *)(v28 + 72) * a2, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_22:
  outlined destroy of PresenceSessionInfo.Participant((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v31 = a1;
  unint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  unint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  Swift::Int v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    BOOL v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  Swift::Int v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v7 = type metadata accessor for PresenceSessionInfo.Participant(0);
  uint64_t v28 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  char v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v27 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_19;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_19;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  unint64_t v13 = (void *)(a1 + *(int *)(v7 + 20));
  String.hash(into:)();
  uint64_t v14 = *(int *)(v7 + 24);
  Hasher._combine(_:)(*(unsigned char *)(a1 + v14));
  Swift::Int v15 = Hasher._finalize()();
  uint64_t v16 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v15 & ~v16;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v28 + 72);
    do
    {
      outlined init with copy of PresenceSessionInfo.Participant(*(void *)(v12 + 48) + v18 * a2, (uint64_t)v9, type metadata accessor for PresenceSessionInfo.Participant);
      if (static UUID.== infix(_:_:)())
      {
        uint64_t v19 = &v9[*(int *)(v7 + 20)];
        BOOL v20 = *(void *)v19 == *v13 && *((void *)v19 + 1) == v13[1];
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)())
          && v9[*(int *)(v7 + 24)] == *(unsigned char *)(a1 + v14))
        {
          goto LABEL_22;
        }
      }
      outlined destroy of PresenceSessionInfo.Participant((uint64_t)v9, type metadata accessor for PresenceSessionInfo.Participant);
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_19:
  uint64_t v21 = *v27;
  *(void *)(*v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of PresenceSessionInfo.Participant(a1, *(void *)(v21 + 48) + *(void *)(v28 + 72) * a2, type metadata accessor for PresenceSessionInfo.Participant);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_22:
  outlined destroy of PresenceSessionInfo.Participant((uint64_t)v9, type metadata accessor for PresenceSessionInfo.Participant);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v31 = a1;
  unint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
  unint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  Swift::Int v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    BOOL v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
      uint64_t v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  Swift::Int v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
    do
    {
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = __OFADD__(v12, 1);
  BOOL v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8, &demangling cache variable for type metadata for _SetStorage<CPParticipant>);
  }
  uint64_t v9 = *v3;
  Swift::Int v10 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CPParticipant);
    id v12 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
    char v13 = static NSObject.== infix(_:_:)();

    if (v13)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v15 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
        char v16 = static NSObject.== infix(_:_:)();

        if (v16) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = a1;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v20;
  }
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8, &demangling cache variable for type metadata for _SetStorage<TUHandle>);
  }
  uint64_t v9 = *v3;
  Swift::Int v10 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    id v12 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
    char v13 = static NSObject.== infix(_:_:)();

    if (v13)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v15 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
        char v16 = static NSObject.== infix(_:_:)();

        if (v16) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = a1;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v20;
  }
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    id v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Participant();
  uint64_t v33 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Participant>);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  uint64_t v30 = v0;
  uint64_t v31 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  int64_t v32 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v32) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v31 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v31 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v31 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    uint64_t v21 = *(void *)(v33 + 72);
    outlined init with copy of PresenceSessionInfo.Participant(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Participant);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    dispatch thunk of Hashable.hash(into:)();
    String.hash(into:)();
    Hasher._combine(_:)(*(void *)&v4[*(int *)(v2 + 24)]);
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = outlined init with take of PresenceSessionInfo.Participant((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21, (uint64_t (*)(void))type metadata accessor for Participant);
    ++*(void *)(v7 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v32) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v31 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      uint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      int64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v9 = (v16 - 1) & v16;
    int64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    int64_t v20 = result & ~v19;
    uint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          uint64_t v21 = 0;
        }
        v22 |= v24;
        char v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      uint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  char v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  unint64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      uint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      uint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v10);
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v25 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v7 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    int64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    int64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v23 = v20 == v22;
        if (v20 == v22) {
          int64_t v20 = 0;
        }
        v21 |= v23;
        unint64_t v24 = *(void *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  unint64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    unint64_t v11 = ~(-1 << v9);
  }
  else {
    unint64_t v11 = -1;
  }
  uint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  unint64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      int64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    uint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      unint64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      uint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        unint64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        uint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    unint64_t v24 = *(void *)(v6 + 48);
    char v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    BOOL v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        int64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  uint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    unint64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    uint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      int64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      unint64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        unint64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      uint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PresenceSessionInfo.Participant(0);
  uint64_t v33 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PresenceSessionInfo.Participant>);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  uint64_t v30 = v0;
  uint64_t v31 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  int64_t v32 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v32) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v31 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v31 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v31 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    uint64_t v21 = *(void *)(v33 + 72);
    outlined init with copy of PresenceSessionInfo.Participant(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4, type metadata accessor for PresenceSessionInfo.Participant);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    dispatch thunk of Hashable.hash(into:)();
    String.hash(into:)();
    Hasher._combine(_:)(v4[*(int *)(v2 + 24)]);
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = outlined init with take of PresenceSessionInfo.Participant((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21, type metadata accessor for PresenceSessionInfo.Participant);
    ++*(void *)(v7 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v32) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v31 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UTType>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    unint64_t v11 = ~(-1 << v9);
  }
  else {
    unint64_t v11 = -1;
  }
  uint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  unint64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      int64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    uint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      unint64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      uint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        unint64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        uint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    unint64_t v24 = *(void *)(v6 + 48);
    char v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    BOOL v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        int64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  uint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    unint64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    uint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v3 = v6;
    return result;
  }
  uint64_t v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = specialized Set.startIndex.getter(a2);
  if (v8) {
    goto LABEL_19;
  }
  int v9 = *(_DWORD *)(a2 + 36);
  if (v9 != v7)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = 1 << *(unsigned char *)(a2 + 32);
  if (v10 < result)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 16))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (v9 != v11) {
    goto LABEL_15;
  }
  if (*(void *)a1 < result)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(unsigned char *)(a1 + 40))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  if (v9 != v12) {
    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (v10 < v13)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *(void *)a3 = *(void *)a1;
  *(void *)(a3 + 8) = v11;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = v12;
  *(unsigned char *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = a2;

  return swift_bridgeObjectRetain();
}

void *specialized PresenceGroupSessionProviderObserver.init(provider:groupSessionService:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  a4[3] = 0;
  swift_unknownObjectWeakInit();
  a4[7] = MEMORY[0x1E4FBC870];
  a4[4] = a1;
  a4[5] = a2;
  swift_beginAccess();
  a4[3] = a6;
  swift_unknownObjectWeakAssign();
  type metadata accessor for PresenceSession(0);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = swift_unknownObjectRetain();
  a4[6] = specialized PresenceSession.init(provider:serviceProvider:)(v13, a2, a3, v12, a5, a6);
  return a4;
}

uint64_t sub_1A37AEC74()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A37AECAC()
{
  return objectdestroy_2Tm(56);
}

uint64_t partial apply for closure #1 in PresenceGroupSessionProviderObserver.join()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  char v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in PresenceGroupSessionProviderObserver.join()(a1, v4, v5, v6, v7);
}

void partial apply for closure #2 in PresenceGroupSessionProviderObserver.join()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);

  JUMPOUT(0x1A624E310);
}

uint64_t sub_1A37AEDC8()
{
  return objectdestroy_2Tm(48);
}

uint64_t partial apply for closure #3 in PresenceGroupSessionProviderObserver.join()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  char v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #3 in PresenceGroupSessionProviderObserver.join()(a1, v4, v5, v7, v6);
}

uint64_t sub_1A37AEE90@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A37AEEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 120);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1A37AEF40@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37AEF8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 144);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for PresenceGroupSessionProviderObserver()
{
  return self;
}

uint64_t method lookup function for PresenceGroupSessionProviderObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PresenceGroupSessionProviderObserver);
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.groupSessionService.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.groupSessionService.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.groupSessionService.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.cancellables.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.cancellables.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.cancellables.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.__allocating_init(provider:groupSessionService:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.join()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 168) + **(int **)(*(void *)v0 + 168));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v4();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.leave()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 176) + **(int **)(*(void *)v0 + 176));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v4();
}

uint64_t specialized Collection.prefix(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result < 0)
  {
LABEL_16:
    __break(1u);
  }
  else
  {
    uint64_t v4 = result;
    uint64_t result = specialized Set.startIndex.getter(a2);
    uint64_t v6 = result;
    uint64_t v8 = v7;
    char v10 = v9 & 1;
    if (v4)
    {
      uint64_t v11 = *(unsigned int *)(a2 + 36);
      uint64_t v12 = 1 << *(unsigned char *)(a2 + 32);
      while ((v10 & 1) == 0)
      {
        if (v11 != v8)
        {
          __break(1u);
          goto LABEL_16;
        }
        if (v6 == v12)
        {
          char v10 = 0;
          uint64_t v6 = v12;
          uint64_t v8 = v11;
          goto LABEL_10;
        }
        uint64_t result = specialized _NativeSet.index(after:)(v6, v8, 0, a2);
        uint64_t v6 = result;
        uint64_t v8 = v13;
        char v10 = v14 & 1;
        if (!--v4) {
          goto LABEL_10;
        }
      }
      goto LABEL_19;
    }
LABEL_10:
    uint64_t result = specialized Set.startIndex.getter(a2);
    if (v10 & 1) != 0 || (v16) {
      goto LABEL_20;
    }
    if (v8 == v15)
    {
      if (v6 >= result)
      {
        v20[0] = result;
        v20[1] = v15;
        char v21 = 0;
        uint64_t v22 = v6;
        uint64_t v23 = v8;
        char v24 = 0;
        uint64_t result = specialized Collection<>.subscript.getter((uint64_t)v20, a2, (uint64_t)v18);
        long long v17 = v18[1];
        *(_OWORD *)a3 = v18[0];
        *(_OWORD *)(a3 + 16) = v17;
        *(_OWORD *)(a3 + 32) = v18[2];
        *(void *)(a3 + 48) = v19;
        return result;
      }
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t outlined copy of Set<A>.Index._Variant<A>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of Set<PresenceSessionInfo.Participant>.Index(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of Set<PresenceSessionInfo.Participant>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Set<PresenceSessionInfo.Participant>.Index(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Set<PresenceSessionInfo.Participant>(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of PresenceSessionInfo.Participant(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *PlaybackSyncer.localParticipantState.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void PlaybackSyncer.localParticipantState.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t (*PlaybackSyncer.localParticipantState.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  uint64_t v13 = *(int *)(v6 + 48);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = *(void *)(v7 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v16, (uint64_t)v9, a2);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    if (v19) {
      break;
    }
    unint64_t v20 = result;
    *(void *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v21 = v11[6];
    uint64_t v22 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v20, v9, v22);
    *(void *)(v11[7] + 8 * v20) = *(void *)&v9[v13];
    uint64_t v23 = v11[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    void v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t PlaybackSyncer.transportControlStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PlaybackSyncer.transportControlStates.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PlaybackSyncer.transportControlStates.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t PlaybackSyncer.messageEncoder.getter()
{
  return swift_retain();
}

uint64_t PlaybackSyncer.messageDecoder.getter()
{
  return swift_retain();
}

uint64_t PlaybackSyncer.coordinator.getter()
{
  swift_beginAccess();
  return MEMORY[0x1A624F980](v0 + 112);
}

uint64_t PlaybackSyncer.coordinator.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 120) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PlaybackSyncer.coordinator.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1A624F980](v1 + 112);
  uint64_t v5 = *(void *)(v1 + 120);
  v3[3] = v4;
  v3[4] = v5;
  return PlaybackSyncer.coordinator.modify;
}

void PlaybackSyncer.coordinator.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 120) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t PlaybackSyncer.link.getter()
{
  swift_beginAccess();
  return MEMORY[0x1A624F980](v0 + 128);
}

uint64_t PlaybackSyncer.link.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 136) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PlaybackSyncer.link.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1A624F980](v1 + 128);
  uint64_t v5 = *(void *)(v1 + 136);
  v3[3] = v4;
  v3[4] = v5;
  return PlaybackSyncer.link.modify;
}

void PlaybackSyncer.link.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 136) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t PlaybackSyncer.syncerDelegate.getter()
{
  swift_beginAccess();
  return MEMORY[0x1A624F980](v0 + 144);
}

uint64_t PlaybackSyncer.syncerDelegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 152) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PlaybackSyncer.syncerDelegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1A624F980](v1 + 144);
  uint64_t v5 = *(void *)(v1 + 152);
  v3[3] = v4;
  v3[4] = v5;
  return PlaybackSyncer.syncerDelegate.modify;
}

void PlaybackSyncer.syncerDelegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 152) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t PlaybackSyncer.__allocating_init(coordinator:serialQueue:localParticipantUUID:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(uint64_t (**)(id, _UNKNOWN **, id))(v3 + 472);
  id v12 = a1;
  id v13 = a2;
  uint64_t v14 = v11(v12, &protocol witness table for AVPlaybackCoordinator, v13);
  unint64_t v15 = (objc_class *)type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
  swift_retain();
  id v16 = specialized PlaybackSyncer.AVCoordinatorDelegateBridge.init(localParticipantID:delegate:)((uint64_t)v10, v14, (char *)objc_allocWithZone(v15), v3, (uint64_t)&protocol witness table for PlaybackSyncer);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a3, v7);
  uint64_t v17 = *(void **)(v14 + 104);
  *(void *)(v14 + 104) = v16;
  swift_release();

  return v14;
}

uint64_t type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for PlaybackSyncer.AVCoordinatorDelegateBridge);
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:));
}

uint64_t PlaybackSyncer.__allocating_init(internalCoordinator:serialQueue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  uint64_t v6 = specialized PlaybackSyncer.init(internalCoordinator:serialQueue:)(a1, a2, a3);
  swift_unknownObjectRelease();
  return v6;
}

uint64_t PlaybackSyncer.init(internalCoordinator:serialQueue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = specialized PlaybackSyncer.init(internalCoordinator:serialQueue:)(a1, a2, a3);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v46 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v49 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for DispatchQoS();
  uint64_t v48 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v47 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<CurrentValueSubject<Bool, Never>, OS_dispatch_queue>);
  uint64_t v44 = *(void *)(v12 - 8);
  uint64_t v45 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v43 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for playback != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.playback);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1A375F000, v15, v16, "PlaybackSync: Connecting link", v17, 2u);
    MEMORY[0x1A624F870](v17, -1, -1);
  }

  int64_t v18 = *(void (**)(uint64_t, uint64_t))(*v4 + 432);
  uint64_t v19 = swift_unknownObjectRetain();
  v18(v19, a2);
  unint64_t v20 = (void *)v4[13];
  if (v20)
  {
    uint64_t v21 = *(uint64_t (**)(void))(*v4 + 400);
    id v22 = v20;
    if (v21())
    {
      self;
      uint64_t v23 = (void *)swift_dynamicCastObjCClass();
      if (v23)
      {
        objc_msgSend(v23, sel_setCoordinationMediumDelegate_, v22);

        swift_unknownObjectRelease();
        goto LABEL_11;
      }
      swift_unknownObjectRelease();
    }
  }
LABEL_11:
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  char v26 = *(void (**)(uint64_t (*)(unsigned __int8 *, uint64_t), uint64_t, uint64_t, uint64_t))(a2 + 24);
  swift_retain();
  v26(partial apply for closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:), v25, ObjectType, a2);
  swift_release();
  uint64_t v27 = swift_allocObject();
  swift_weakInit();
  BOOL v28 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a2 + 48);
  swift_retain();
  v28(partial apply for closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:), v27, ObjectType, a2);
  swift_release();
  aBlock[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(ObjectType, a2);
  id v54 = (id)v4[12];
  id v29 = v54;
  uint64_t v30 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v11, 1, 1, v30);
  v29;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  uint64_t v31 = v43;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  uint64_t v32 = swift_allocObject();
  swift_weakInit();
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = v46;
  *(void *)(v33 + 16) = v32;
  *(void *)(v33 + 24) = v34;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<CurrentValueSubject<Bool, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<CurrentValueSubject<Bool, Never>, OS_dispatch_queue>);
  swift_bridgeObjectRetain();
  uint64_t v35 = v45;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v31, v35);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v36 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = partial apply for closure #4 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:);
  void aBlock[5] = v36;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_2;
  uint64_t v37 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v38 = v47;
  static DispatchQoS.unspecified.getter();
  id v54 = (id)MEMORY[0x1E4FBC860];
  _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v39 = v49;
  uint64_t v40 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v38, v39, v37);
  _Block_release(v37);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v40);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v50);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v22 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  MEMORY[0x1F4188790](v3);
  BOOL v24 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  int v21 = *a1;
  uint64_t v11 = *((void *)a1 + 1);
  unint64_t v10 = *((void *)a1 + 2);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v20 = *(id *)(result + 96);
    swift_release();
    uint64_t v13 = swift_allocObject();
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v22, v7);
    unint64_t v14 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v13;
    *(unsigned char *)(v15 + 24) = v21;
    *(void *)(v15 + 32) = v11;
    *(void *)(v15 + 40) = v10;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15 + v14, (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    aBlock[4] = partial apply for closure #1 in closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:);
    void aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_122;
    os_log_type_t v16 = _Block_copy(aBlock);
    swift_retain();
    outlined copy of Data._Representation(v11, v10);
    static DispatchQoS.unspecified.getter();
    uint64_t v28 = MEMORY[0x1E4FBC860];
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v17 = v24;
    uint64_t v18 = v27;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v19 = v20;
    MEMORY[0x1A624E5F0](0, v6, v17, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v18);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v25);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v10[0] = a2;
    uint64_t v11 = a3;
    uint64_t v12 = a4;
    PlaybackSyncer.receiveMessage(message:from:)(v10, a5);
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(uint64_t a1)
{
  uint64_t v19 = a1;
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  int v21 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v17 = *(id *)(result + 96);
    swift_release();
    uint64_t v11 = swift_allocObject();
    uint64_t v18 = v4;
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v19, v7);
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v11;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    aBlock[4] = partial apply for closure #1 in closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:);
    void aBlock[5] = v13;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_115;
    unint64_t v14 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v22 = MEMORY[0x1E4FBC860];
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v15 = v21;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    os_log_type_t v16 = v17;
    MEMORY[0x1A624E5F0](0, v6, v15, v14);
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v15, v1);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v18);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 504))(a2);
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  int v4 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    if (!v4)
    {
      if (!*(void *)(a3 + 16))
      {
        if (one-time initialization token for playback != -1) {
          swift_once();
        }
        uint64_t v15 = type metadata accessor for Logger();
        __swift_project_value_buffer(v15, (uint64_t)static Logger.playback);
        os_log_type_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl(&dword_1A375F000, v16, v17, "PlaybackSync: Catchup not needed", v18, 2u);
          MEMORY[0x1A624F870](v18, -1, -1);
        }

        return swift_release();
      }
      if (one-time initialization token for playback != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Logger.playback);
      swift_bridgeObjectRetain_n();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        unint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v11 = swift_slowAlloc();
        v19[0] = v11;
        *(_DWORD *)unint64_t v10 = 136315138;
        type metadata accessor for UUID();
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        swift_bridgeObjectRetain();
        uint64_t v12 = Set.description.getter();
        unint64_t v14 = v13;
        swift_bridgeObjectRelease();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A375F000, v8, v9, "PlaybackSync: Requesting catchup due to existing joined participants:%s.", v10, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v11, -1, -1);
        MEMORY[0x1A624F870](v10, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      swift_beginAccess();
      *(void *)(v6 + 88) = a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    PlaybackSyncer.sendCatchupRequestMessage()();
    return swift_release();
  }
  return result;
}

uint64_t closure #4 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    PlaybackSyncer.scheduleTransportStateTakeoverTimer()();
    return swift_release();
  }
  return result;
}

uint64_t PlaybackSyncer.replaceCoordinator(coordinator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  os_log_type_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(void *)(v3 + 96);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = v13;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = partial apply for closure #1 in PlaybackSyncer.replaceCoordinator(coordinator:);
  void aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_13;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = MEMORY[0x1E4FBC860];
  _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v12, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v18);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in PlaybackSyncer.replaceCoordinator(coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 408);
    uint64_t v7 = swift_unknownObjectRetain();
    uint64_t v8 = v6(v7, a3);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 424))(v8);
    swift_unknownObjectRelease();
    if (v9) {
      PlaybackSyncer.sendCatchupRequestMessage()();
    }
    return swift_release();
  }
  return result;
}

uint64_t PlaybackSyncer.replaceCoordinator(avPlaybackCoordinator:localParticipantUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v23[0] = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v25 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(void *)(v3 + 96);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  uint64_t v19 = (void *)v23[0];
  *(void *)(v18 + v17) = v23[0];
  aBlock[4] = partial apply for closure #1 in PlaybackSyncer.replaceCoordinator(avPlaybackCoordinator:localParticipantUUID:);
  void aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_20;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = v19;
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = MEMORY[0x1E4FBC860];
  _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v10, v7, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v25);
  swift_release();
  return swift_release();
}

void closure #1 in PlaybackSyncer.replaceCoordinator(avPlaybackCoordinator:localParticipantUUID:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = (void *)Strong;
    if (one-time initialization token for playback != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.playback);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v14 = 0;
      _os_log_impl(&dword_1A375F000, v12, v13, "PlaybackSync: Replacing AVPlaybackCoordinator for group session", v14, 2u);
      MEMORY[0x1A624F870](v14, -1, -1);
    }

    (*(void (**)(void))(*v10 + 512))();
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v15(v8, a2, v5);
    unint64_t v16 = (objc_class *)type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(0);
    unint64_t v17 = (char *)objc_allocWithZone(v16);
    uint64_t v18 = &v17[OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate];
    *(void *)&v17[OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate + 8] = 0;
    swift_unknownObjectWeakInit();
    v15(&v17[OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_localParticipantID], (uint64_t)v8, v5);
    swift_beginAccess();
    *((void *)v18 + 1) = &protocol witness table for PlaybackSyncer;
    swift_unknownObjectWeakAssign();
    v22.receiver = v17;
    v22.super_class = v16;
    id v19 = objc_msgSendSuper2(&v22, sel_init);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    objc_msgSend(a3, sel_setCoordinationMediumDelegate_, v19);
    uint64_t v20 = (void *)v10[13];
    v10[13] = v19;
    id v21 = v19;

    (*(void (**)(void *, _UNKNOWN **))(*v10 + 488))(a3, &protocol witness table for AVPlaybackCoordinator);
    swift_release();
  }
}

void PlaybackSyncer.participantLeft(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v72 = a1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v66 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  int v63 = (char *)&v61 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v62 = (char *)&v61 - v9;
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1F4188790](v70);
  uint64_t v71 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v64 = (uint64_t)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  unint64_t v16 = (char *)&v61 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v61 - v17;
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  objc_super v22 = (uint64_t *)((char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = (void *)v2[12];
  *objc_super v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, *MEMORY[0x1E4FBCBF0], v19);
  id v24 = v23;
  uint64_t v25 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if ((v25 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  id v67 = *(void (**)(char *, void *, uint64_t))(v4 + 16);
  uint64_t v68 = v4 + 16;
  v67(v18, v72, v3);
  uint64_t v69 = v4;
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v27 = 1;
  uint64_t v28 = v26(v18, 0, 1, v3);
  id v29 = *(uint64_t (**)(uint64_t))(*v2 + 424);
  uint64_t v65 = v2;
  if (v29(v28))
  {
    uint64_t v31 = v30;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v31 + 64))(ObjectType, v31);
    swift_unknownObjectRelease();
    uint64_t v27 = 0;
  }
  uint64_t v33 = (uint64_t)v71;
  v26(v16, v27, 1, v3);
  uint64_t v34 = v33 + *(int *)(v70 + 48);
  outlined init with copy of URL?((uint64_t)v18, v33, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of URL?((uint64_t)v16, v34, &demangling cache variable for type metadata for UUID?);
  uint64_t v25 = v69;
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  if (v35(v33, 1, v3) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
    int v36 = v35(v34, 1, v3);
    objc_super v22 = v72;
    if (v36 == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v33, &demangling cache variable for type metadata for UUID?);
LABEL_11:
      if (one-time initialization token for playback != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.playback);
      uint64_t v42 = v63;
      v67(v63, v22, v3);
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        uint64_t v74 = v46;
        *(_DWORD *)uint64_t v45 = 136315138;
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v42, v3);
        _os_log_impl(&dword_1A375F000, v43, v44, "PlaybackSync: Ignoring removal of local participant: %s", v45, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v46, -1, -1);
        MEMORY[0x1A624F870](v45, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v42, v3);
      }

      return;
    }
    goto LABEL_9;
  }
  uint64_t v37 = v64;
  outlined init with copy of URL?(v33, v64, &demangling cache variable for type metadata for UUID?);
  if (v35(v34, 1, v3) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v37, v3);
    objc_super v22 = v72;
LABEL_9:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v33, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_15;
  }
  uint64_t v38 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v62, v34, v3);
  _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v25 + 8);
  v40(v38, v3);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
  v40((char *)v37, v3);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v33, &demangling cache variable for type metadata for UUID?);
  objc_super v22 = v72;
  if (v39) {
    goto LABEL_11;
  }
LABEL_15:
  if (one-time initialization token for playback != -1) {
LABEL_25:
  }
    swift_once();
  uint64_t v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)static Logger.playback);
  uint64_t v50 = v66;
  v67(v66, v22, v3);
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = v25;
    uint64_t v55 = swift_slowAlloc();
    uint64_t v74 = v55;
    *(_DWORD *)uint64_t v53 = 136315138;
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v74);
    objc_super v22 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v50, v3);
    _os_log_impl(&dword_1A375F000, v51, v52, "PlaybackSync: Cleaning up after participant left: %s", v53, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v55, -1, -1);
    MEMORY[0x1A624F870](v53, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v50, v3);
  }

  if ((*(uint64_t (**)(void))(*v65 + 400))())
  {
    uint64_t v59 = v58;
    uint64_t v60 = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t))(v59 + 24))(v22, v60, v59);
    swift_unknownObjectRelease();
  }
  PlaybackSyncer.handleWaitingFor(participant:)((uint64_t)v22);
}

Swift::Void __swiftcall PlaybackSyncer.cleanUp()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v48 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v41 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v41 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (uint64_t *)((char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = (void *)v1[12];
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E4FBCBF0], v14);
  id v19 = v18;
  uint64_t v20 = _dispatchPreconditionTest(_:)();
  objc_super v22 = *(uint64_t (**)(void *, uint64_t))(v15 + 8);
  uint64_t v21 = (void *)(v15 + 8);
  uint64_t v23 = v22(v17, v14);
  if ((v20 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once();
LABEL_7:
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.playback);
    swift_unknownObjectRetain_n();
    swift_retain_n();
    uint64_t v26 = Logger.logObject.getter();
    int v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, (os_log_type_t)v47))
    {
      os_log_t v44 = v26;
      uint64_t v45 = v21;
      uint64_t v46 = v20;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v42 = (void *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v50 = v43;
      *(_DWORD *)uint64_t v27 = 136315394;
      if ((*(uint64_t (**)(void))(*v1 + 424))())
      {
        uint64_t v29 = v28;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v29 + 72))(ObjectType, v29);
        swift_unknownObjectRelease();
        uint64_t v31 = 0;
      }
      else
      {
        uint64_t v31 = 1;
      }
      uint64_t v32 = v48;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v13, v31, 1, v2);
      outlined init with copy of URL?((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for UUID?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v11, 1, v2) == 1)
      {
        unint64_t v33 = 0xE300000000000000;
        uint64_t v34 = 7104878;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v7, v11, v2);
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v5, v7, v2);
        uint64_t v34 = String.init<A>(reflecting:)();
        unint64_t v33 = v35;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v2);
      }
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
      uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v33, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2112;
      uint64_t v21 = v45;
      uint64_t v49 = (uint64_t)v45;
      swift_unknownObjectRetain();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      int v36 = v42;
      *uint64_t v42 = v21;
      swift_unknownObjectRelease_n();
      os_log_t v37 = v44;
      _os_log_impl(&dword_1A375F000, v44, (os_log_type_t)v47, "PlaybackSync: Cleaning up playback coordinator for session: %s coordinator:%@", (uint8_t *)v27, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v36, -1, -1);
      uint64_t v38 = v43;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v38, -1, -1);
      MEMORY[0x1A624F870](v27, -1, -1);

      uint64_t v20 = v46;
    }
    else
    {

      swift_unknownObjectRelease_n();
      swift_release_n();
    }
    objc_msgSend(v21, sel_setCoordinationMediumDelegate_, 0);
    if (v20)
    {
      id v39 = objc_msgSend((id)v20, sel_player);
      if (v39)
      {
        uint64_t v40 = v39;
        objc_msgSend(v39, sel_setBackgroundPIPAuthorizationToken_, 0);
      }
    }
    goto LABEL_20;
  }
  if (!(*(uint64_t (**)(uint64_t))(*v1 + 400))(v23)) {
    return;
  }
  self;
  uint64_t v24 = swift_dynamicCastObjCClass();
  if (v24)
  {
    uint64_t v21 = (void *)v24;
    self;
    uint64_t v20 = swift_dynamicCastObjCClass();
    if (v20) {
      swift_unknownObjectRetain();
    }
    if (one-time initialization token for playback == -1) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_20:
  swift_unknownObjectRelease();
}

uint64_t PlaybackSyncer.shouldDismissPlayback(allowingCancellation:completionHandler:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 448))();
  if (result)
  {
    uint64_t v9 = v8;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(a1 & 1, a2, a3, ObjectType, v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall PlaybackSyncer.shareLocalParticipantState(participantState:)(NSDictionary participantState)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = *(void *)(v2 + 96);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = (NSDictionary *)swift_allocObject();
  v12[2].super.Class isa = (Class)v11;
  v12[3].super.Class isa = participantState.super.isa;
  aBlock[4] = partial apply for closure #1 in PlaybackSyncer.shareLocalParticipantState(participantState:);
  void aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_27;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v14 = participantState.super.isa;
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = MEMORY[0x1E4FBC860];
  _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v10, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v16);
  swift_release();
  swift_release();
}

void closure #1 in PlaybackSyncer.shareLocalParticipantState(participantState:)(uint64_t a1, void *a2)
{
  v59[6] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = Strong;
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)Strong + 424))();
    if (v9)
    {
      uint64_t v11 = v9;
      uint64_t v12 = v10;
      if (one-time initialization token for playback != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.playback);
      id v15 = a2;
      swift_unknownObjectRetain_n();
      id v16 = v15;
      uint64_t v55 = v14;
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      int v19 = v18;
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v56 = v11;
        uint64_t v21 = v20;
        uint64_t v49 = (void *)swift_slowAlloc();
        uint64_t v54 = (void *)swift_slowAlloc();
        v59[0] = v54;
        *(_DWORD *)uint64_t v21 = 138412546;
        uint64_t v50 = v4;
        int v53 = v19;
        uint64_t v57 = (uint64_t)v16;
        uint64_t v51 = &v58;
        id v22 = v16;
        os_log_t v52 = v17;
        id v23 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v24 = v49;
        *uint64_t v49 = v16;

        *(_WORD *)(v21 + 12) = 2080;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v12 + 72))(ObjectType, v12);
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v28 = v27;
        (*(void (**)(char *, uint64_t))(v50 + 8))(v6, v3);
        uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, (uint64_t *)v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        os_log_t v29 = v52;
        _os_log_impl(&dword_1A375F000, v52, (os_log_type_t)v53, "PlaybackSync: Broadcasting participant state:%@ to group session:%s", (uint8_t *)v21, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v24, -1, -1);
        uint64_t v30 = v54;
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v30, -1, -1);
        MEMORY[0x1A624F870](v21, -1, -1);
      }
      else
      {

        swift_unknownObjectRelease_n();
      }
      uint64_t v31 = self;
      v59[0] = 0;
      id v32 = objc_msgSend(v31, sel_dataWithJSONObject_options_error_, v16, 0, v59);
      id v33 = v59[0];
      if (v32)
      {
        uint64_t v34 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
        int v36 = v35;

        os_log_t v37 = *(void (**)(id))(*(void *)v8 + 216);
        id v38 = v16;
        v37(v16);
        LOBYTE(v59[0]) = 0;
        v59[1] = v34;
        v59[2] = v36;
        outlined copy of Data._Representation((uint64_t)v34, (unint64_t)v36);
        PlaybackSyncer.sendMessage(_:to:)((char *)v59, 0);
        swift_release();
        outlined consume of Data._Representation((uint64_t)v34, (unint64_t)v36);
        swift_unknownObjectRelease();
        outlined consume of Data._Representation((uint64_t)v34, (unint64_t)v36);
      }
      else
      {
        id v39 = v33;
        uint64_t v40 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        id v41 = v40;
        id v42 = v40;
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = (uint8_t *)swift_slowAlloc();
          uint64_t v46 = (void *)swift_slowAlloc();
          v59[0] = v46;
          *(_DWORD *)uint64_t v45 = 136315138;
          swift_getErrorValue();
          uint64_t v47 = Error.localizedDescription.getter();
          uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_1A375F000, v43, v44, "PlaybackSync: shareLocalParticipantState Error:%s", v45, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1A624F870](v46, -1, -1);
          MEMORY[0x1A624F870](v45, -1, -1);

          swift_release();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRelease();
          swift_release();
        }
      }
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t PlaybackSyncer.Message.init(type:payload:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  return result;
}

Swift::Void __swiftcall PlaybackSyncer.shareTransportControlState(itemIdentifier:transportControlState:)(Swift::String itemIdentifier, NSDictionary transportControlState)
{
  uint64_t v3 = v2;
  object = (objc_class *)itemIdentifier._object;
  uint64_t countAndFlagsBits = itemIdentifier._countAndFlagsBits;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(void *)(v3 + 96);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  id v15 = (NSDictionary *)swift_allocObject();
  v15[2].super.Class isa = (Class)v14;
  v15[3].super.Class isa = transportControlState.super.isa;
  v15[4].super.Class isa = (Class)countAndFlagsBits;
  v15[5].super.Class isa = object;
  aBlock[4] = partial apply for closure #1 in PlaybackSyncer.shareTransportControlState(itemIdentifier:transportControlState:);
  void aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_34;
  id v16 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v17 = transportControlState.super.isa;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = MEMORY[0x1E4FBC860];
  _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v13, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v19);
  swift_release();
  swift_release();
}

void closure #1 in PlaybackSyncer.shareTransportControlState(itemIdentifier:transportControlState:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v70[7] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v12 = (unsigned char *)Strong;
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)Strong + 424))();
    if (!v13)
    {
LABEL_12:
      swift_release();
      return;
    }
    uint64_t v15 = v13;
    uint64_t v16 = v14;
    uint64_t v65 = a3;
    if (one-time initialization token for playback != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.playback);
    id v19 = a2;
    swift_unknownObjectRetain_n();
    id v20 = v19;
    uint64_t v63 = v18;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    int v64 = v22;
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v66 = a4;
    uint64_t v67 = v15;
    if (v23)
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v57 = (void *)swift_slowAlloc();
      uint64_t v61 = (void *)swift_slowAlloc();
      v70[0] = v61;
      *(_DWORD *)uint64_t v24 = 138412546;
      uint64_t v58 = v8;
      os_log_t v60 = v21;
      uint64_t v68 = (uint64_t)v20;
      uint64_t v59 = &v69;
      id v25 = v20;
      uint64_t v62 = v12;
      id v26 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v27 = v57;
      *uint64_t v57 = v20;

      *(_WORD *)(v24 + 12) = 2080;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v16 + 72))(ObjectType, v16);
      _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v31 = v30;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v10, v7);
      uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, (uint64_t *)v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v12 = v62;
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      os_log_t v32 = v60;
      _os_log_impl(&dword_1A375F000, v60, (os_log_type_t)v64, "PlaybackSync: Broadcasting transport control state:%@ to group session:%s", (uint8_t *)v24, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v27, -1, -1);
      id v33 = v61;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v33, -1, -1);
      MEMORY[0x1A624F870](v24, -1, -1);
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    uint64_t v34 = self;
    v70[0] = 0;
    id v35 = objc_msgSend(v34, sel_dataWithJSONObject_options_error_, v20, 0, v70);
    id v36 = v70[0];
    if (v35)
    {
      os_log_t v37 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      id v39 = v38;

      uint64_t v40 = *(uint64_t (**)(id *))(*(void *)v12 + 248);
      id v41 = v20;
      uint64_t v42 = v66;
      swift_bridgeObjectRetain();
      uint64_t v43 = (void (*)(id *, void))v40(v70);
      uint64_t v45 = v44;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v68 = *v45;
      *uint64_t v45 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v41, v65, v42, isUniquelyReferenced_nonNull_native);
      *uint64_t v45 = v68;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v43(v70, 0);
      LOBYTE(v70[0]) = 1;
      v70[1] = v37;
      v70[2] = v39;
      outlined copy of Data._Representation((uint64_t)v37, (unint64_t)v39);
      PlaybackSyncer.sendMessage(_:to:)((char *)v70, 0);
      outlined consume of Data._Representation((uint64_t)v37, (unint64_t)v39);
      if ((v12[72] & 1) == 0) {
        PlaybackSyncer.useExistingState()();
      }
      swift_unknownObjectRelease();
      outlined consume of Data._Representation((uint64_t)v37, (unint64_t)v39);
      goto LABEL_12;
    }
    uint64_t v47 = v36;
    unint64_t v48 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v49 = v48;
    id v50 = v48;
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      int v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = (void *)swift_slowAlloc();
      v70[0] = v54;
      *(_DWORD *)int v53 = 136315138;
      swift_getErrorValue();
      uint64_t v55 = Error.localizedDescription.getter();
      uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v51, v52, "PlaybackSync: shareTransportControlState Error:%s", v53, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v54, -1, -1);
      MEMORY[0x1A624F870](v53, -1, -1);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      swift_release();
    }
  }
}

uint64_t PlaybackSyncer.reloadTransportControlStateForItem(itemIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[0] = a3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)(v4 + 96);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = v15;
  uint64_t v16[3] = a1;
  uint64_t v17 = v20[0];
  uint64_t v16[4] = a2;
  v16[5] = v17;
  v16[6] = a4;
  aBlock[4] = partial apply for closure #1 in PlaybackSyncer.reloadTransportControlStateForItem(itemIdentifier:completion:);
  void aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_41;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = MEMORY[0x1E4FBC860];
  _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v14, v11, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v21);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in PlaybackSyncer.reloadTransportControlStateForItem(itemIdentifier:completion:)(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), uint64_t a5)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    if (!(*(uint64_t (**)(void))(*(void *)result + 424))()) {
      return swift_release();
    }
    uint64_t v12 = v11;
    if (one-time initialization token for playback != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.playback);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    uint64_t v53 = a2;
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v55 = v12;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      v56[0] = v52;
      *(_DWORD *)uint64_t v16 = 136315906;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 1024;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v55 + 80);
      v51(ObjectType, v55);
      CurrentValueSubject.value.getter();
      swift_unknownObjectRelease();
      swift_release();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease();
      *(_WORD *)(v16 + 18) = 2080;
      swift_beginAccess();
      type metadata accessor for UUID();
      _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      swift_bridgeObjectRetain();
      uint64_t v18 = Set.description.getter();
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 28) = 1024;
      swift_release();
      uint64_t v21 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1A375F000, v14, v15, "PlaybackSync: reloadTransportControlStateForItem:%s. shouldRequestCatchup:%{BOOL}d waitingForCatchupResponseFromParticipants:%s hasReceivedTransportState:%{BOOL}d", (uint8_t *)v16, 0x22u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v52, -1, -1);
      uint64_t v22 = v16;
      uint64_t v12 = v55;
      MEMORY[0x1A624F870](v22, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_release_n();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v12 + 80);
    }
    uint64_t v23 = swift_getObjectType();
    v21(v23, v12);
    CurrentValueSubject.value.getter();
    swift_release();
    if ((v56[0] & 1) != 0 || (swift_beginAccess(), *(void *)(*(void *)(v10 + 88) + 16)))
    {
      if (*(unsigned char *)(v10 + 72) != 1)
      {
        id v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v43 = 0;
          _os_log_impl(&dword_1A375F000, v41, v42, "Playback Sync: Deferring completion handler until later", v43, 2u);
          MEMORY[0x1A624F870](v43, -1, -1);
        }

        uint64_t v44 = *(void *)(v10 + 56);
        *(void *)(v10 + 56) = a4;
        *(void *)(v10 + 64) = a5;
        swift_retain();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v44);
        goto LABEL_29;
      }
    }
    uint64_t v24 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 232);
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v26 = v24(v25);
    if (*(void *)(v26 + 16))
    {
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v53, a3);
      if (v28)
      {
        id v29 = *(id *)(*(void *)(v26 + 56) + 8 * v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v30 = v29;
        unint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v31, v32))
        {
          id v33 = (uint8_t *)swift_slowAlloc();
          uint64_t v54 = (void *)swift_slowAlloc();
          *(_DWORD *)id v33 = 138412290;
          uint64_t v34 = v30;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v54 = v30;

          _os_log_impl(&dword_1A375F000, v31, v32, "PlaybackSync: applying transport control state during reload:%@", v33, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1A624F870](v54, -1, -1);
          MEMORY[0x1A624F870](v33, -1, -1);
        }
        else
        {

          unint64_t v31 = v30;
        }

        if ((*(uint64_t (**)(void))(*(void *)v10 + 400))())
        {
          uint64_t v46 = v45;
          uint64_t v47 = swift_getObjectType();
          (*(void (**)(NSObject *, uint64_t, uint64_t))(v46 + 8))(v30, v47, v46);
          swift_unknownObjectRelease();
        }

        unint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v48, v49))
        {
          id v50 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v50 = 0;
          _os_log_impl(&dword_1A375F000, v48, v49, "PlaybackSync: reloadTransportControlStateForItem finished", v50, 2u);
          MEMORY[0x1A624F870](v50, -1, -1);
        }

        a4();
LABEL_29:
        swift_unknownObjectRelease();
        return swift_release();
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      os_log_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_t v37 = 0;
      _os_log_impl(&dword_1A375F000, v35, v36, "PlaybackSync: Could not find state for this item identifier", v37, 2u);
      MEMORY[0x1A624F870](v37, -1, -1);
    }

    id v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&dword_1A375F000, v38, v39, "PlaybackSync: reloadTransportControlStateForItem finished", v40, 2u);
      MEMORY[0x1A624F870](v40, -1, -1);
    }

    a4();
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t PlaybackSyncer.sendCatchupRequestMessage()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = *(void **)(v1 + 96);
  *(void *)uint64_t v5 = v6;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (one-time initialization token for playback == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.playback);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1A375F000, v9, v10, "PlaybackSync: Catchup needed. Broadcasting catchup request.", v11, 2u);
    MEMORY[0x1A624F870](v11, -1, -1);
  }

  v14[0] = 2;
  long long v15 = xmmword_1A38F6410;
  return PlaybackSyncer.sendMessage(_:to:)(v14, 0);
}

void PlaybackSyncer.receiveMessage(message:from:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (uint64_t *)((char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v33 = *a1;
  uint64_t v14 = *((void *)a1 + 1);
  unint64_t v34 = *((void *)a1 + 2);
  long long v15 = *(void **)(v3 + 96);
  *uint64_t v13 = v15;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FBCBF0], v10);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v15)
  {
    if (one-time initialization token for playback == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.playback);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  unint64_t v18 = v34;
  outlined copy of Data._Representation(v14, v34);
  uint64_t v19 = v14;
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v32 = v19;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v30 = a2;
    uint64_t v24 = v23;
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 134218242;
    uint64_t v35 = v33;
    uint64_t v36 = v25;
    uint64_t v31 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined consume of Data._Representation(v19, v18);
    *(_WORD *)(v24 + 12) = 2080;
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v36);
    unint64_t v18 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl(&dword_1A375F000, v20, v21, "PlaybackSync: Received message of type:%ld from participant:%s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v25, -1, -1);
    uint64_t v28 = v24;
    a2 = v30;
    MEMORY[0x1A624F870](v28, -1, -1);
  }
  else
  {
    outlined consume of Data._Representation(v19, v18);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  switch(v33)
  {
    case 1:
      PlaybackSyncer.receiveTransportControlMessage(payload:)();
      break;
    case 2:
      PlaybackSyncer.receiveCatchupRequestMessage(from:)(a2);
      break;
    case 3:
      PlaybackSyncer.receiveCatchupResponseMessage(payload:from:)(v32, v18, a2);
      break;
    default:
      PlaybackSyncer.receiveParticipantMessage(payload:from:)();
      break;
  }
}

uint64_t PlaybackSyncer.Message.MessageType.rawValue.getter(uint64_t result)
{
  return result;
}

void PlaybackSyncer.receiveParticipantMessage(payload:from:)()
{
  uint64_t v1 = v0;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (void *)((char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (void *)v1[12];
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCBF0], v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once();
    goto LABEL_4;
  }
  if (!(*(uint64_t (**)(uint64_t))(*v1 + 424))(v12)) {
    return;
  }
  uint64_t v47 = v13;
  uint64_t v48 = v3;
  if (one-time initialization token for playback != -1) {
    goto LABEL_23;
  }
LABEL_4:
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.playback);
  long long v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1A375F000, v15, v16, "PlaybackSync: Receiving ParticipantState", v17, 2u);
    MEMORY[0x1A624F870](v17, -1, -1);
  }

  unint64_t v18 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v49 = 0;
  id v20 = objc_msgSend(v18, sel_JSONObjectWithData_options_error_, isa, 0, &v49);

  id v21 = v49;
  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v50, v51);
    outlined init with copy of Any((uint64_t)v51, (uint64_t)v50);
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSDictionary);
    if (swift_dynamicCast())
    {
      id v22 = v49;
      if ((*(uint64_t (**)(void))(*v1 + 400))())
      {
        uint64_t v24 = v23;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(id, uint64_t, uint64_t))(v24 + 16))(v22, ObjectType, v24);
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRetain_n();
      id v26 = v22;
      unint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v30 = (void *)swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        *(void *)&v50[0] = v46;
        *(_DWORD *)uint64_t v29 = 136315394;
        v45[1] = v29 + 4;
        uint64_t v31 = swift_getObjectType();
        (*(void (**)(uint64_t))(v47 + 72))(v31);
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v34 = v33;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v5, v2);
        id v49 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, (uint64_t *)v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 12) = 2112;
        id v49 = v26;
        id v35 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v30 = v26;

        _os_log_impl(&dword_1A375F000, v27, v28, "PlaybackSync: Received new participant state for group session %s: %@", (uint8_t *)v29, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v30, -1, -1);
        uint64_t v36 = v46;
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v36, -1, -1);
        MEMORY[0x1A624F870](v29, -1, -1);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease_n();
      }
    }
    else
    {
      os_log_type_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl(&dword_1A375F000, v42, v43, "PlaybackSync: Could not cast participant state to dictionary.", v44, 2u);
        MEMORY[0x1A624F870](v44, -1, -1);
      }
      swift_unknownObjectRelease();
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
  }
  else
  {
    os_log_t v37 = v21;
    id v38 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    os_log_type_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v41 = 0;
      _os_log_impl(&dword_1A375F000, v39, v40, "PlaybackSync: Could not deserialize participant state.", v41, 2u);
      MEMORY[0x1A624F870](v41, -1, -1);
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
    }
  }
}

void PlaybackSyncer.receiveTransportControlMessage(payload:)()
{
  uint64_t v1 = v0;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (uint64_t *)((char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (void *)*((void *)v1 + 12);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCBF0], v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_34:
    swift_once();
    goto LABEL_4;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v1 + 424))(v12)) {
    return;
  }
  uint64_t v61 = v13;
  uint64_t v62 = v3;
  if (one-time initialization token for playback != -1) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.playback);
  long long v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1A375F000, v15, v16, "PlaybackSync: Receiving TransportControlState", v17, 2u);
    MEMORY[0x1A624F870](v17, -1, -1);
  }

  unint64_t v18 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&v65[0] = 0;
  id v20 = objc_msgSend(v18, sel_JSONObjectWithData_options_error_, isa, 0, v65);

  id v21 = *(id *)&v65[0];
  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v66, v68);
    outlined init with copy of Any((uint64_t)v68, (uint64_t)v66);
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSDictionary);
    if (swift_dynamicCast())
    {
      id v22 = *(void **)&v65[0];
      if ((*(uint64_t (**)(void))(*(void *)v1 + 400))())
      {
        uint64_t v24 = v23;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t))(v24 + 8))(v22, ObjectType, v24);
        swift_unknownObjectRelease();
      }
      *(void *)&v65[0] = *MEMORY[0x1E4F15FB0];
      id v26 = *(void **)&v65[0];
      type metadata accessor for AVPlaybackCoordinationTransportControlStateKey(0);
      id v27 = v26;
      id v28 = objc_msgSend(v22, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      if (v28)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v65, 0, sizeof(v65));
      }
      outlined init with take of Any?((uint64_t)v65, (uint64_t)v66);
      if (v67)
      {
        if (swift_dynamicCast())
        {
          uint64_t v37 = v64;
          uint64_t v60 = v63;

          id v38 = *(uint64_t (**)(uint64_t *))(*(void *)v1 + 248);
          id v39 = v22;
          os_log_type_t v40 = (void (*)(uint64_t *, void))v38(v66);
          os_log_type_t v42 = v41;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v65[0] = *v42;
          *os_log_type_t v42 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v39, v60, v37, isUniquelyReferenced_nonNull_native);
          *os_log_type_t v42 = *(void *)&v65[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v40(v66, 0);
          id v44 = v39;
          swift_unknownObjectRetain_n();
          id v45 = v44;
          uint64_t v46 = Logger.logObject.getter();
          os_log_type_t v47 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v46, v47))
          {
            uint64_t v48 = swift_slowAlloc();
            uint64_t v59 = (void *)swift_slowAlloc();
            uint64_t v60 = swift_slowAlloc();
            v66[0] = v60;
            *(_DWORD *)uint64_t v48 = 136315394;
            uint64_t v58 = v48 + 4;
            uint64_t v49 = swift_getObjectType();
            (*(void (**)(uint64_t))(v61 + 72))(v49);
            _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
            uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v52 = v51;
            (*(void (**)(char *, uint64_t))(v62 + 8))(v5, v2);
            *(void *)&v65[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, v66);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_unknownObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v48 + 12) = 2112;
            *(void *)&v65[0] = v45;
            id v53 = v45;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v54 = v59;
            void *v59 = v45;

            _os_log_impl(&dword_1A375F000, v46, v47, "PlaybackSync: Received new transport control state for group session %s: %@", (uint8_t *)v48, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1A624F870](v54, -1, -1);
            uint64_t v55 = v60;
            swift_arrayDestroy();
            MEMORY[0x1A624F870](v55, -1, -1);
            MEMORY[0x1A624F870](v48, -1, -1);

            if ((v1[72] & 1) == 0)
            {
LABEL_22:
              PlaybackSyncer.useExistingState()();

              swift_unknownObjectRelease();
LABEL_29:
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v68);
              return;
            }
          }
          else
          {

            swift_unknownObjectRelease_n();
            if ((v1[72] & 1) == 0) {
              goto LABEL_22;
            }
          }
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v68);
          swift_unknownObjectRelease();

          return;
        }
      }
      else
      {

        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v66, &demangling cache variable for type metadata for Any?);
      }
      unint64_t v34 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v56))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v57 = 0;
        _os_log_impl(&dword_1A375F000, v34, v56, "PlaybackSync: Could not decode item identifier in receiveTransportControlMessage.", v57, 2u);
        MEMORY[0x1A624F870](v57, -1, -1);
      }
    }
    else
    {
      unint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl(&dword_1A375F000, v34, v35, "PlaybackSync: Could not cast transport control state to dictionary.", v36, 2u);
        MEMORY[0x1A624F870](v36, -1, -1);
      }
    }
    swift_unknownObjectRelease();

    goto LABEL_29;
  }
  uint64_t v29 = v21;
  uint64_t v30 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    unint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v33 = 0;
    _os_log_impl(&dword_1A375F000, v31, v32, "PlaybackSync: Could not deserialize transport control state.", v33, 2u);
    MEMORY[0x1A624F870](v33, -1, -1);
    swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease();
  }
}

uint64_t PlaybackSyncer.useExistingState()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + 96);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (one-time initialization token for playback == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.playback);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl(&dword_1A375F000, v9, v10, "PlaybackSync: Using current state", v11, 2u);
    MEMORY[0x1A624F870](v11, -1, -1);
  }

  *(unsigned char *)(v1 + 72) = 1;
  if (*(void *)(v1 + 80))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)(v1 + 80) = 0;
  swift_release();
  swift_beginAccess();
  *(void *)(v1 + 88) = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void (**)(uint64_t))(v1 + 56);
  if (v12)
  {
    uint64_t v13 = swift_retain();
    v12(v13);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v12);
    uint64_t v14 = *(void *)(v1 + 56);
  }
  else
  {
    uint64_t v14 = 0;
  }
  *(void *)(v1 + 56) = 0;
  *(void *)(v1 + 64) = 0;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v14);
}

uint64_t PlaybackSyncer.receiveCatchupRequestMessage(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(v2 + 96);
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBF0], v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    if (one-time initialization token for playback == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.playback);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v32 = a1;
    uint64_t v20 = v19;
    uint64_t v35 = v19;
    uint64_t v33 = v2;
    *(_DWORD *)unint64_t v18 = 136315138;
    uint64_t v31 = v15;
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl(&dword_1A375F000, v16, v17, "PlaybackSync: Catchup response requested from:%s", v18, 0xCu);
    swift_arrayDestroy();
    uint64_t v23 = v20;
    a1 = v32;
    MEMORY[0x1A624F870](v23, -1, -1);
    MEMORY[0x1A624F870](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  PlaybackSyncer.handleWaitingFor(participant:)(a1);
  PlaybackSyncer.generateCatchupResponseMessage()(&v35);
  char v24 = v35;
  uint64_t v25 = v36;
  unint64_t v26 = v37;
  id v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl(&dword_1A375F000, v27, v28, "PlaybackSync: Sending catchup response!", v29, 2u);
    MEMORY[0x1A624F870](v29, -1, -1);
  }

  LOBYTE(v35) = v24;
  uint64_t v36 = v25;
  unint64_t v37 = v26;
  PlaybackSyncer.sendMessage(_:to:)((char *)&v35, 0);
  return outlined consume of Data._Representation(v25, v26);
}

uint64_t PlaybackSyncer.receiveCatchupResponseMessage(payload:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v52 = a1;
  unint64_t v7 = type metadata accessor for UUID();
  unint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (void *)((char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *(void **)(v4 + 96);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FBCBF0], v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0) {
    goto LABEL_42;
  }
  uint64_t v51 = a2;
  if (one-time initialization token for playback != -1) {
LABEL_43:
  }
    swift_once();
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.playback);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v10, a3, v7);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    v49[1] = v18;
    unint64_t v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v54 = v23;
    uint64_t v50 = a3;
    *(_DWORD *)unint64_t v22 = 136315138;
    v49[0] = v22 + 4;
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v54);
    a3 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v26 = *(void (**)(char *, unint64_t))(v8 + 8);
    v8 += 8;
    v26(v10, v7);
    _os_log_impl(&dword_1A375F000, v19, v20, "PlaybackSync: Receiving catchup response from:%s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v23, -1, -1);
    MEMORY[0x1A624F870](v22, -1, -1);
  }
  else
  {
    id v27 = *(void (**)(char *, unint64_t))(v8 + 8);
    v8 += 8;
    v27(v10, v7);
  }

  lazy protocol witness table accessor for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v29 = v54;
  unint64_t v28 = v55;
  uint64_t v30 = v56;
  if (v55 >> 60 != 15)
  {
    outlined copy of Data._Representation(v54, v55);
    PlaybackSyncer.receiveParticipantMessage(payload:from:)();
    outlined consume of Data?(v29, v28);
  }
  if (*(void *)(v30 + 16))
  {
    uint64_t v52 = v29;
    uint64_t v10 = (char *)(v30 + 64);
    uint64_t v31 = 1 << *(unsigned char *)(v30 + 32);
    uint64_t v32 = -1;
    if (v31 < 64) {
      uint64_t v32 = ~(-1 << v31);
    }
    unint64_t v7 = v32 & *(void *)(v30 + 64);
    int64_t v33 = (unint64_t)(v31 + 63) >> 6;
    swift_bridgeObjectRetain();
    a3 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v34 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v35 = v34 | (a3 << 6);
      }
      else
      {
        int64_t v38 = a3 + 1;
        if (__OFADD__(a3, 1))
        {
          __break(1u);
          goto LABEL_41;
        }
        if (v38 >= v33) {
          goto LABEL_29;
        }
        unint64_t v39 = *(void *)&v10[8 * v38];
        ++a3;
        if (!v39)
        {
          a3 = v38 + 1;
          if (v38 + 1 >= v33) {
            goto LABEL_29;
          }
          unint64_t v39 = *(void *)&v10[8 * a3];
          if (!v39)
          {
            a3 = v38 + 2;
            if (v38 + 2 >= v33) {
              goto LABEL_29;
            }
            unint64_t v39 = *(void *)&v10[8 * a3];
            if (!v39)
            {
              int64_t v40 = v38 + 3;
              if (v40 >= v33)
              {
LABEL_29:
                swift_release();
                uint64_t v41 = v52;
                goto LABEL_37;
              }
              unint64_t v39 = *(void *)&v10[8 * v40];
              if (!v39)
              {
                while (1)
                {
                  a3 = v40 + 1;
                  if (__OFADD__(v40, 1)) {
                    break;
                  }
                  if (a3 >= v33) {
                    goto LABEL_29;
                  }
                  unint64_t v39 = *(void *)&v10[8 * a3];
                  ++v40;
                  if (v39) {
                    goto LABEL_28;
                  }
                }
LABEL_41:
                __break(1u);
LABEL_42:
                __break(1u);
                goto LABEL_43;
              }
              a3 = v40;
            }
          }
        }
LABEL_28:
        unint64_t v7 = (v39 - 1) & v39;
        unint64_t v35 = __clz(__rbit64(v39)) + (a3 << 6);
      }
      uint64_t v36 = (uint64_t *)(*(void *)(v30 + 56) + 16 * v35);
      uint64_t v37 = *v36;
      unint64_t v8 = v36[1];
      outlined copy of Data._Representation(*v36, v8);
      PlaybackSyncer.receiveTransportControlMessage(payload:)();
      outlined consume of Data._Representation(v37, v8);
    }
  }
  int v42 = *(unsigned __int8 *)(v4 + 72);
  os_log_type_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.default.getter();
  BOOL v45 = os_log_type_enabled(v43, v44);
  if (v42 == 1)
  {
    if (!v45)
    {
      outlined consume of Data?(v29, v28);

      return swift_bridgeObjectRelease();
    }
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    _os_log_impl(&dword_1A375F000, v43, v44, "PlaybackSync: Received empty catchup but have already received non-empty catchup from somebody else. Returning.", v46, 2u);
    MEMORY[0x1A624F870](v46, -1, -1);
  }
  else
  {
    if (v45)
    {
      os_log_type_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v47 = 0;
      _os_log_impl(&dword_1A375F000, v43, v44, "PlaybackSync: Received empty catchup", v47, 2u);
      MEMORY[0x1A624F870](v47, -1, -1);
    }

    PlaybackSyncer.handleWaitingFor(participant:)(a3);
  }
  uint64_t v41 = v29;
LABEL_37:
  outlined consume of Data?(v41, v28);
  return swift_bridgeObjectRelease();
}

void PlaybackSyncer.handleWaitingFor(participant:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v1 + 88;
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 88) + 16))
  {
    if (one-time initialization token for playback != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.playback);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
    uint64_t v38 = v13;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v37 = v7;
    if (v16)
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v35 = a1;
      uint64_t v18 = (uint8_t *)v17;
      uint64_t v34 = swift_slowAlloc();
      v40[0] = v34;
      uint64_t v36 = v2;
      *(_DWORD *)uint64_t v18 = 136315138;
      v33[1] = v18 + 4;
      _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      _os_log_impl(&dword_1A375F000, v14, v15, "PlaybackSync: Removing %s from waiting for empty catchup response list", v18, 0xCu);
      uint64_t v21 = v34;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v21, -1, -1);
      unint64_t v22 = v18;
      a1 = v35;
      MEMORY[0x1A624F870](v22, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }

    swift_beginAccess();
    specialized Set._Variant.remove(_:)(a1, (uint64_t)v6);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
    swift_endAccess();
    if (*(void *)(*(void *)v11 + 16))
    {
      swift_retain_n();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        unint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        v40[0] = v26;
        *(_DWORD *)unint64_t v25 = 136315138;
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        swift_bridgeObjectRetain();
        uint64_t v27 = Set.description.getter();
        unint64_t v29 = v28;
        swift_bridgeObjectRelease();
        uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A375F000, v23, v24, "PlaybackSync: Still waiting for empty catchup responses from:%s", v25, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v26, -1, -1);
        MEMORY[0x1A624F870](v25, -1, -1);
      }
      else
      {

        swift_release_n();
      }
    }
    else
    {
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl(&dword_1A375F000, v30, v31, "PlaybackSync: All existing participants replied with empty catchup responses or left, so using existing state", v32, 2u);
        MEMORY[0x1A624F870](v32, -1, -1);
      }

      PlaybackSyncer.useExistingState()();
    }
  }
}

uint64_t PlaybackSyncer.generateCatchupResponseMessage()@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = v1;
  v53[3] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for String.Encoding();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (uint64_t *)((char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = (void *)v2[12];
  void *v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FBCBF0], v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    if (one-time initialization token for playback == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.playback);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1A375F000, v12, v13, "PlaybackSync: Generating catchup response", v14, 2u);
    MEMORY[0x1A624F870](v14, -1, -1);
  }

  uint64_t v15 = (*(uint64_t (**)(void))(*v2 + 208))();
  uint64_t v50 = a1;
  if (!v15)
  {
    unint64_t v20 = 0;
    unint64_t v22 = (void *)0xF000000000000000;
LABEL_16:
    uint64_t v33 = v51;
    goto LABEL_19;
  }
  BOOL v16 = (void *)v15;
  uint64_t v17 = self;
  v53[0] = 0;
  id v18 = objc_msgSend(v17, sel_dataWithJSONObject_options_error_, v16, 0, v53);
  id v19 = v53[0];
  if (v18)
  {
    unint64_t v20 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    outlined copy of Data._Representation((uint64_t)v20, (unint64_t)v22);
    outlined copy of Data._Representation((uint64_t)v20, (unint64_t)v22);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    os_log_t v49 = v23;
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      v53[0] = v48;
      *(_DWORD *)unint64_t v25 = 136315138;
      static String.Encoding.utf8.getter();
      uint64_t v26 = String.init(data:encoding:)();
      if (v27)
      {
        unint64_t v28 = v27;
      }
      else
      {
        uint64_t v26 = 0x64696C61766E693CLL;
        unint64_t v28 = 0xE90000000000003ELL;
      }
      uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, (uint64_t *)v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation((uint64_t)v20, (unint64_t)v22);
      outlined consume of Data._Representation((uint64_t)v20, (unint64_t)v22);
      os_log_t v29 = v49;
      _os_log_impl(&dword_1A375F000, v49, v24, "PlaybackSync: attaching participant state to catchup: %s", v25, 0xCu);
      uint64_t v30 = v48;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v30, -1, -1);
      MEMORY[0x1A624F870](v25, -1, -1);
    }
    else
    {

      outlined consume of Data._Representation((uint64_t)v20, (unint64_t)v22);
      outlined consume of Data._Representation((uint64_t)v20, (unint64_t)v22);
    }
    goto LABEL_16;
  }
  os_log_type_t v31 = v19;
  uint64_t v32 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v33 = 0;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl(&dword_1A375F000, v34, v35, "PlaybackSync: Could not serialize participant state.", v36, 2u);
    MEMORY[0x1A624F870](v36, -1, -1);
  }
  else
  {
  }
  unint64_t v20 = 0;
  unint64_t v22 = (void *)0xF000000000000000;
LABEL_19:
  if ((*(uint64_t (**)(void))(*v2 + 400))())
  {
    uint64_t v38 = v37;
    uint64_t ObjectType = swift_getObjectType();
    int64_t v40 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v38 + 32))(ObjectType, v38);
    swift_unknownObjectRelease();
  }
  else
  {
    int64_t v40 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  }
  v53[0] = v20;
  v53[1] = v22;
  v53[2] = v40;
  outlined copy of Data?((uint64_t)v20, (unint64_t)v22);
  lazy protocol witness table accessor for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState();
  uint64_t v41 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v33)
  {
    outlined consume of Data?((uint64_t)v20, (unint64_t)v22);
    outlined consume of Data?((uint64_t)v20, (unint64_t)v22);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v44 = v41;
    uint64_t v45 = v42;
    outlined consume of Data?((uint64_t)v20, (unint64_t)v22);
    outlined consume of Data?((uint64_t)v20, (unint64_t)v22);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v46 = v50;
    *uint64_t v50 = 3;
    *((void *)v46 + 1) = v44;
    *((void *)v46 + 2) = v45;
  }
  return result;
}

uint64_t jsonToString(_:)()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  MEMORY[0x1F4188790](v0 - 8);
  static String.Encoding.utf8.getter();
  uint64_t result = String.init(data:encoding:)();
  if (!v2) {
    return 0x64696C61766E693CLL;
  }
  return result;
}

uint64_t PlaybackSyncer.scheduleTransportStateTakeoverTimer()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v44 = *(void *)(v2 - 8);
  uint64_t v45 = v2;
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  os_log_type_t v43 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v42 = (char *)&v37 - v5;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1F4188790](v10);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (uint64_t *)((char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = (void *)v1[12];
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FBCBF0], v11);
  id v41 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t v16 = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*v1 + 424))(v16);
  if (!result) {
    return result;
  }
  if (v1[10])
  {
    if (one-time initialization token for playback == -1)
    {
LABEL_5:
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.playback);
      unint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        unint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v22 = 0;
        _os_log_impl(&dword_1A375F000, v20, v21, "PlaybackSync: Attempting to schedule transport state takeover when one already exists.", v22, 2u);
        MEMORY[0x1A624F870](v22, -1, -1);
      }

      return swift_unknownObjectRelease();
    }
LABEL_18:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v40 = v18;
  if (one-time initialization token for playback != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.playback);
  os_log_type_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_1A375F000, v24, v25, "PlaybackSync: Scheduling takeover countdown", v26, 2u);
    MEMORY[0x1A624F870](v26, -1, -1);
  }

  aBlock[4] = partial apply for closure #1 in PlaybackSyncer.scheduleTransportStateTakeoverTimer();
  void aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_99;
  uint64_t v39 = (uint64_t)_Block_copy(aBlock);
  uint64_t v46 = MEMORY[0x1E4FBC860];
  _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v39 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t))(v40 + 80))(ObjectType);
  CurrentValueSubject.value.getter();
  swift_release();
  if (LOBYTE(aBlock[0])) {
    unint64_t v28 = &OBJC_IVAR____TtC15GroupActivities14PlaybackSyncer_defaultTransportStateTakeoverInterval;
  }
  else {
    unint64_t v28 = &OBJC_IVAR____TtC15GroupActivities14PlaybackSyncer_initiatorTransportStateTakeoverInterval;
  }
  os_log_t v29 = (char *)v1 + *v28;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  os_log_type_t v31 = v9;
  uint64_t v38 = v6;
  v30(v9, v29, v6);
  uint64_t v32 = v43;
  static DispatchTime.now()();
  uint64_t v33 = v42;
  MEMORY[0x1A624DE00](v32, v31);
  uint64_t v34 = v45;
  os_log_type_t v35 = *(void (**)(char *, uint64_t))(v44 + 8);
  v35(v32, v45);
  uint64_t v36 = v39;
  MEMORY[0x1A624E580](v33, v39);
  v35(v33, v34);
  v1[10] = v36;
  swift_unknownObjectRelease();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v31, v38);
}

uint64_t closure #1 in PlaybackSyncer.scheduleTransportStateTakeoverTimer()(uint64_t result)
{
  if ((*(unsigned char *)(result + 72) & 1) == 0)
  {
    if (one-time initialization token for playback != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.playback);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1A375F000, v2, v3, "PlaybackSync: Transport state takeover timer has expired. Using existing state.", v4, 2u);
      MEMORY[0x1A624F870](v4, -1, -1);
    }

    return PlaybackSyncer.useExistingState()();
  }
  return result;
}

uint64_t PlaybackSyncer.sendMessage(_:to:)(char *a1, uint64_t a2)
{
  os_log_type_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  char v10 = *a1;
  uint64_t v11 = *((void *)a1 + 1);
  uint64_t v12 = *((void *)a1 + 2);
  uint64_t v13 = (void *)v3[12];
  *uint64_t v9 = v13;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCBF0], v6);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v13)
  {
    if (one-time initialization token for playback == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.playback);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_1A375F000, v16, v17, "PlaybackSync: Sending message.", v18, 2u);
    MEMORY[0x1A624F870](v18, -1, -1);
  }

  uint64_t result = (*(uint64_t (**)(void))(*v3 + 424))();
  if (result)
  {
    uint64_t v21 = v20;
    uint64_t ObjectType = swift_getObjectType();
    v24[0] = v10;
    uint64_t v25 = v11;
    uint64_t v26 = v12;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v21 + 8))(v24, a2, ObjectType, v21);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t PlaybackSyncer.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(void *)(v0 + 56));
  swift_release();
  swift_bridgeObjectRelease();

  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 112);
  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 128);
  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 144);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities14PlaybackSyncer_defaultTransportStateTakeoverInterval;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  os_log_type_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC15GroupActivities14PlaybackSyncer_initiatorTransportStateTakeoverInterval, v2);
  return v0;
}

uint64_t PlaybackSyncer.__deallocating_deinit()
{
  PlaybackSyncer.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CoordinatorDelegate.shareLocalParticipantState(participantState:) in conformance PlaybackSyncer()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t protocol witness for CoordinatorDelegate.shareTransportControlState(itemIdentifier:transportControlState:) in conformance PlaybackSyncer()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t protocol witness for CoordinatorDelegate.reloadTransportControlStateForItem(itemIdentifier:completion:) in conformance PlaybackSyncer()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t protocol witness for CoordinatorDelegate.shouldDismissPlayback(allowingCancellation:completionHandler:) in conformance PlaybackSyncer()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.localParticipantID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_localParticipantID;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate;
  swift_beginAccess();
  return MEMORY[0x1A624F980](v1);
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PlaybackSyncer.AVCoordinatorDelegateBridge.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1A624F980](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SystemCoordinatorHost.delegate.modify;
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.init(localParticipantID:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized PlaybackSyncer.AVCoordinatorDelegateBridge.init(localParticipantID:delegate:));
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = a4(a1, a2, v4, ObjectType, a3);
  swift_unknownObjectRelease();
  return v10;
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.localParticipantUUID(for:)@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for playback != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.playback);
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  uint64_t v7 = &unk_1E95E7000;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v15 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    type metadata accessor for UUID();
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v7 = (void *)&unk_1E95E7000;
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v5, v6, "PlaybackSync: AVPlaybackCoordinator asked for local participant UUID:%s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v9, -1, -1);
    MEMORY[0x1A624F870](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v12 = &v4[v7[263]];
  uint64_t v13 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, v12, v13);
}

Swift::Void __swiftcall PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:broadcastLocalParticipantStateDictionary:)(AVPlaybackCoordinator _, Swift::OpaquePointer broadcastLocalParticipantStateDictionary)
{
  if ((*(uint64_t (**)(Class))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x60))(_.super.isa))
  {
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType();
    type metadata accessor for AVPlaybackCoordinationParticipantStateKey(0);
    _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, type metadata accessor for AVPlaybackCoordinationParticipantStateKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    (*(void (**)(Class, uint64_t, uint64_t))(v4 + 8))(isa, ObjectType, v4);

    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:broadcastTransportControlStateDictionary:forItemWithIdentifier:)(AVPlaybackCoordinator _, Swift::OpaquePointer broadcastTransportControlStateDictionary, Swift::String forItemWithIdentifier)
{
  object = forItemWithIdentifier._object;
  uint64_t countAndFlagsBits = forItemWithIdentifier._countAndFlagsBits;
  if ((*(uint64_t (**)(Class))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x60))(_.super.isa))
  {
    uint64_t v7 = v6;
    uint64_t ObjectType = swift_getObjectType();
    type metadata accessor for AVPlaybackCoordinationTransportControlStateKey(0);
    _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, type metadata accessor for AVPlaybackCoordinationTransportControlStateKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, void *, Class, uint64_t, uint64_t))(v7 + 16))(countAndFlagsBits, object, isa, ObjectType, v7);

    swift_unknownObjectRelease();
  }
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:reloadTransportControlStateForItemWithIdentifier:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x60))();
  if (result)
  {
    uint64_t v12 = v11;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 24))(a2, a3, a4, a5, ObjectType, v12);
    return swift_unknownObjectRelease();
  }
  return result;
}

id PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void PlaybackSyncer.AVCoordinatorDelegateBridge.init()()
{
}

id PlaybackSyncer.AVCoordinatorDelegateBridge.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return specialized PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(a2, a3, a4);
}

uint64_t closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v14 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 16) = a1;
  *(unsigned char *)(v15 + 17) = a2;
  *(void *)(v15 + 24) = v18;
  *(void *)(v15 + 32) = a4;
  aBlock[4] = partial apply for closure #1 in closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:);
  void aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_108;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E4FBC860];
  _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v13, v10, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v19);
}

uint64_t closure #1 in closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(char a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (one-time initialization token for playback != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.playback);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v15 = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    uint64_t v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v6, v7, "Calling playback coordinator dismissal callback with result: %s promptForLeaveOrEndSessionAllowingCancellation%s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v9, -1, -1);
    MEMORY[0x1A624F870](v8, -1, -1);
  }

  return a3(a1 & 1);
}

uint64_t PlaybackSyncer.CatchupState.localParticipantState.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t PlaybackSyncer.CatchupState.localParticipantState.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data?(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*PlaybackSyncer.CatchupState.localParticipantState.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t PlaybackSyncer.CatchupState.transportControlStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PlaybackSyncer.CatchupState.transportControlStates.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*PlaybackSyncer.CatchupState.transportControlStates.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PlaybackSyncer.CatchupState.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackSyncer.CatchupState.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000016;
  }
  else {
    return 0xD000000000000015;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackSyncer.CatchupState.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PlaybackSyncer.CatchupState.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PlaybackSyncer.CatchupState.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackSyncer.CatchupState.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackSyncer.CatchupState.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PlaybackSyncer.CatchupState.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PlaybackSyncer.CatchupState.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  char v17 = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = v14;
    char v17 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
    lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type Data and conformance Data);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t PlaybackSyncer.CatchupState.init()()
{
  return 0;
}

uint64_t PlaybackSyncer.CatchupState.init(from:)(void *a1)
{
  uint64_t result = specialized PlaybackSyncer.CatchupState.init(from:)(a1);
  if (v1) {
    return v3;
  }
  return result;
}

unint64_t default argument 1 of PlaybackSyncer.CatchupState.init(localParticipantState:transportControlStates:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlaybackSyncer.CatchupState@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized PlaybackSyncer.CatchupState.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlaybackSyncer.CatchupState(void *a1)
{
  return PlaybackSyncer.CatchupState.encode(to:)(a1, *v1, v1[1], v1[2]);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PlaybackSyncer.Message.MessageType@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized PlaybackSyncer.Message.MessageType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PlaybackSyncer.Message.MessageType(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlaybackSyncer.Message.MessageType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlaybackSyncer.Message.MessageType()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t PlaybackSyncer.Message.type.getter()
{
  return *v0;
}

uint64_t PlaybackSyncer.Message.payload.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackSyncer.Message.CodingKeys()
{
  if (*v0) {
    return 0x64616F6C796170;
  }
  else {
    return 1701869940;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackSyncer.Message.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PlaybackSyncer.Message.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackSyncer.Message.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackSyncer.Message.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PlaybackSyncer.Message.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PlaybackSyncer.Message.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  os_log_type_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  uint64_t v9 = *((void *)v1 + 1);
  uint64_t v11 = *((void *)v1 + 2);
  uint64_t v12 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = v8;
  char v15 = 0;
  lazy protocol witness table accessor for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v13 = v12;
    uint64_t v14 = v11;
    char v15 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t PlaybackSyncer.Message.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PlaybackSyncer.Message.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v13 = 0;
    lazy protocol witness table accessor for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v12;
    char v13 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    long long v10 = v12;
    *(unsigned char *)a2 = v9;
    *(_OWORD *)(a2 + 8) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlaybackSyncer.Message@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PlaybackSyncer.Message.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlaybackSyncer.Message(void *a1)
{
  return PlaybackSyncer.Message.encode(to:)(a1);
}

Swift::Void __swiftcall AVPlaybackCoordinator.handleNewTransportControlStateDictionary(_:)(NSDictionary a1)
{
}

Swift::Void __swiftcall AVPlaybackCoordinator.handleNewParticipantStateDictionary(_:)(NSDictionary a1)
{
}

uint64_t AVPlaybackCoordinator.getTrackedTransportStates()()
{
  id v1 = objc_msgSend(v0, sel_trackedTransportControlStateDictionaries);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AVPlaybackCoordinationTransportControlStateKey : Any]);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = specialized Dictionary.compactMapValues<A>(_:)(v2);
  swift_bridgeObjectRelease();
  return v3;
}

void closure #1 in AVPlaybackCoordinator.getTrackedTransportStates()(uint64_t *a1@<X8>)
{
  v24[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for String.Encoding();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v3 = self;
  type metadata accessor for AVPlaybackCoordinationTransportControlStateKey(0);
  _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, type metadata accessor for AVPlaybackCoordinationTransportControlStateKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v24[0] = 0;
  id v5 = objc_msgSend(v3, sel_dataWithJSONObject_options_error_, isa, 0, v24);

  id v6 = v24[0];
  if (v5)
  {
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    if (one-time initialization token for playback != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.playback);
    outlined copy of Data._Representation(v7, v9);
    outlined copy of Data._Representation(v7, v9);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      char v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      v24[0] = v14;
      *(_DWORD *)char v13 = 136315138;
      static String.Encoding.utf8.getter();
      uint64_t v15 = String.init(data:encoding:)();
      if (v16)
      {
        unint64_t v17 = v16;
      }
      else
      {
        uint64_t v15 = 0x64696C61766E693CLL;
        unint64_t v17 = 0xE90000000000003ELL;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, (uint64_t *)v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v7, v9);
      outlined consume of Data._Representation(v7, v9);
      _os_log_impl(&dword_1A375F000, v11, v12, "PlaybackSync: attaching AV transport control state to catchup: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v14, -1, -1);
      MEMORY[0x1A624F870](v13, -1, -1);
    }
    else
    {
      outlined consume of Data._Representation(v7, v9);
      outlined consume of Data._Representation(v7, v9);
    }
  }
  else
  {
    uint64_t v18 = v6;
    uint64_t v19 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for playback != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.playback);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_1A375F000, v21, v22, "PlaybackSync: Could not serialize AV transport control state.", v23, 2u);
      MEMORY[0x1A624F870](v23, -1, -1);
    }

    uint64_t v7 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v7;
  a1[1] = v9;
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBC868];
  uint64_t v37 = MEMORY[0x1E4FBC868];
  uint64_t v31 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v30 = (unint64_t)(63 - v3) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v8 = (v5 - 1) & v5;
      unint64_t v9 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v10 = v7;
      goto LABEL_22;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v10 >= v30) {
      goto LABEL_42;
    }
    unint64_t v11 = *(void *)(v31 + 8 * v10);
    if (!v11) {
      break;
    }
LABEL_21:
    uint64_t v8 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v10 << 6);
LABEL_22:
    char v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v36 = *(void *)(*(void *)(a1 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    closure #1 in AVPlaybackCoordinator.getTrackedTransportStates()(&v34);
    if (v1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_42:
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      return v2;
    }
    uint64_t v16 = v35;
    if (v35 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v32 = v34;
      unint64_t v17 = *(void *)(v2 + 16);
      if (*(void *)(v2 + 24) <= v17)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17 + 1, 1);
        uint64_t v2 = v37;
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v18 = v2 + 64;
      uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v2 + 64 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v2 + 64 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          BOOL v25 = v21 == v24;
          if (v21 == v24) {
            unint64_t v21 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v18 + 8 * v21);
        }
        while (v26 == -1);
        unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
      }
      *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      uint64_t v27 = 16 * v22;
      unint64_t v28 = (void *)(*(void *)(v2 + 48) + v27);
      *unint64_t v28 = v14;
      v28[1] = v15;
      os_log_t v29 = (uint64_t *)(*(void *)(v2 + 56) + v27);
      *os_log_t v29 = v32;
      v29[1] = v16;
      ++*(void *)(v2 + 16);
    }
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v7 = v10;
    unint64_t v5 = v8;
  }
  int64_t v12 = v7 + 2;
  if (v7 + 2 >= v30) {
    goto LABEL_42;
  }
  unint64_t v11 = *(void *)(v31 + 8 * v12);
  if (v11) {
    goto LABEL_20;
  }
  int64_t v12 = v7 + 3;
  if (v7 + 3 >= v30) {
    goto LABEL_42;
  }
  unint64_t v11 = *(void *)(v31 + 8 * v12);
  if (v11) {
    goto LABEL_20;
  }
  int64_t v12 = v7 + 4;
  if (v7 + 4 >= v30) {
    goto LABEL_42;
  }
  unint64_t v11 = *(void *)(v31 + 8 * v12);
  if (v11) {
    goto LABEL_20;
  }
  int64_t v12 = v7 + 5;
  if (v7 + 5 >= v30) {
    goto LABEL_42;
  }
  unint64_t v11 = *(void *)(v31 + 8 * v12);
  if (v11)
  {
LABEL_20:
    int64_t v10 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v10 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_42;
    }
    unint64_t v11 = *(void *)(v31 + 8 * v10);
    ++v12;
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

void protocol witness for PlaybackCoordinating.handleNewTransportControlStateDictionary(_:) in conformance AVPlaybackCoordinator()
{
}

void protocol witness for PlaybackCoordinating.handleNewParticipantStateDictionary(_:) in conformance AVPlaybackCoordinator()
{
}

void protocol witness for PlaybackCoordinating.handleRemoval(ofParticipant:) in conformance AVPlaybackCoordinator()
{
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, sel_handleRemovalOfParticipant_, isa);
}

uint64_t protocol witness for PlaybackCoordinating.getTrackedTransportStates() in conformance AVPlaybackCoordinator()
{
  id v1 = objc_msgSend(v0, sel_trackedTransportControlStateDictionaries);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AVPlaybackCoordinationTransportControlStateKey : Any]);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = specialized Dictionary.compactMapValues<A>(_:)(v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized PlaybackSyncer.init(internalCoordinator:serialQueue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  *(void *)(v3 + 32) = PropertyListEncoder.init()();
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v7 = PropertyListDecoder.init()();
  uint64_t v8 = MEMORY[0x1E4FBC870];
  *(void *)(v3 + 40) = v7;
  *(void *)(v3 + 48) = v8;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = v8;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 120) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v3 + 136) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v3 + 152) = 0;
  swift_unknownObjectWeakInit();
  unint64_t v9 = (void *)(v3 + OBJC_IVAR____TtC15GroupActivities14PlaybackSyncer_defaultTransportStateTakeoverInterval);
  *unint64_t v9 = 20;
  uint64_t v10 = *MEMORY[0x1E4FBCAE8];
  uint64_t v11 = type metadata accessor for DispatchTimeInterval();
  int64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104);
  ((void (*)(void *, uint64_t, uint64_t))v12)(v9, v10, v11);
  *(void *)(v4 + OBJC_IVAR____TtC15GroupActivities14PlaybackSyncer_initiatorTransportStateTakeoverInterval) = 10;
  v12();
  if (one-time initialization token for playback != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.playback);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1A375F000, v14, v15, "PlaybackSync: Creating playback syncer for group session", v16, 2u);
    MEMORY[0x1A624F870](v16, -1, -1);
  }

  swift_beginAccess();
  *(void *)(v4 + 120) = a2;
  swift_unknownObjectWeakAssign();
  *(void *)(v4 + 96) = a3;
  return v4;
}

id specialized PlaybackSyncer.AVCoordinatorDelegateBridge.init(localParticipantID:delegate:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = &a3[OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate];
  *(void *)&a3[OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  unint64_t v9 = &a3[OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_localParticipantID];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a1, v10);
  swift_beginAccess();
  *((void *)v8 + 1) = a5;
  swift_unknownObjectWeakAssign();
  v14.receiver = a3;
  v14.super_class = (Class)type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(0);
  id v12 = objc_msgSendSuper2(&v14, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return v12;
}

id specialized PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = (char *)objc_allocWithZone((Class)type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(0));

  return specialized PlaybackSyncer.AVCoordinatorDelegateBridge.init(localParticipantID:delegate:)(a1, a2, v9, a4, a5);
}

uint64_t sub_1A37BC9D0()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(unsigned __int8 *a1, uint64_t a2)
{
  return closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(a1, a2);
}

uint64_t partial apply for closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(uint64_t a1)
{
  return closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(a1);
}

uint64_t sub_1A37BCA18()
{
  return objectdestroy_4Tm(MEMORY[0x1E4FBC898], 32);
}

uint64_t partial apply for closure #3 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(unsigned __int8 *a1)
{
  return closure #3 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #4 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)()
{
  return closure #4 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1A37BCA5C()
{
  return objectdestroy_4Tm(MEMORY[0x1E4FBC8F8], 40);
}

uint64_t objectdestroy_4Tm(void (*a1)(void), uint64_t a2)
{
  swift_release();
  a1(*(void *)(v2 + 24));

  return MEMORY[0x1F4186498](v2, a2, 7);
}

uint64_t partial apply for closure #1 in PlaybackSyncer.replaceCoordinator(coordinator:)()
{
  return closure #1 in PlaybackSyncer.replaceCoordinator(coordinator:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_1A37BCAE0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v6 + 8, v5);
}

void partial apply for closure #1 in PlaybackSyncer.replaceCoordinator(avPlaybackCoordinator:localParticipantUUID:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in PlaybackSyncer.replaceCoordinator(avPlaybackCoordinator:localParticipantUUID:)(v3, v0 + v2, v4);
}

uint64_t sub_1A37BCC58()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in PlaybackSyncer.shareLocalParticipantState(participantState:)()
{
  closure #1 in PlaybackSyncer.shareLocalParticipantState(participantState:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1A37BCCA0()
{
  swift_release();

  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #1 in PlaybackSyncer.shareTransportControlState(itemIdentifier:transportControlState:)()
{
  closure #1 in PlaybackSyncer.shareTransportControlState(itemIdentifier:transportControlState:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1A37BCCF4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in PlaybackSyncer.reloadTransportControlStateForItem(itemIdentifier:completion:)()
{
  return closure #1 in PlaybackSyncer.reloadTransportControlStateForItem(itemIdentifier:completion:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void))(v0 + 40), *(void *)(v0 + 48));
}

uint64_t specialized PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for playback != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.playback);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = a3;
    uint64_t v12 = a2;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v24 = v13;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v14 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v9, v10, "PlaybackSync: Got dismissal callback promptForLeaveOrEndSessionAllowingCancellation: %s", v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v16 = v13;
    a2 = v12;
    a3 = v23;
    MEMORY[0x1A624F870](v16, -1, -1);
    MEMORY[0x1A624F870](v11, -1, -1);
  }

  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x60))();
  if (result)
  {
    uint64_t v19 = v18;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v21 = swift_allocObject();
    *(unsigned char *)(v21 + 16) = a1 & 1;
    *(void *)(v21 + 24) = a2;
    *(void *)(v21 + 32) = a3;
    unint64_t v22 = *(void (**)(void, uint64_t (*)(char), uint64_t, uint64_t, uint64_t))(v19 + 32);
    swift_retain();
    v22(a1 & 1, partial apply for closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:), v21, ObjectType, v19);
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys);
  }
  return result;
}

uint64_t specialized PlaybackSyncer.CatchupState.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015 && a2 == 0x80000001A3900920
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001A3900940)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized PlaybackSyncer.CatchupState.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PlaybackSyncer.CatchupState.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v8 = 0;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    outlined consume of Data?(0, 0xF000000000000000);
  }
  else
  {
    char v11 = 0;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v8 = v10[0];
    unint64_t v9 = v10[1];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
    char v11 = 1;
    outlined copy of Data?(v8, v9);
    lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type Data and conformance Data);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined copy of Data?(v8, v9);
    outlined consume of Data?(v8, v9);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    outlined consume of Data?(v8, v9);
  }
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t specialized PlaybackSyncer.Message.MessageType.init(rawValue:)(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType);
  }
  return result;
}

uint64_t sub_1A37BD510@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 208))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37BD55C(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 216);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1A37BD5B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 232))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37BD600(uint64_t a1, uint64_t a2)
{
  id v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 240);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A37BD654@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 400))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A37BD6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 408);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1A37BD714@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 424))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A37BD768(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 432);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1A37BD7D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 448))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A37BD828(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 456);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1A37BD894@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x60))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A37BD8F0(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x68);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t dispatch thunk of PlaybackSyncerDelegate.shouldDismissPlayback(allowingCancellation:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t ObjC metadata update function for PlaybackSyncer()
{
  return type metadata accessor for PlaybackSyncer(0);
}

uint64_t type metadata accessor for PlaybackSyncer(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for PlaybackSyncer);
}

uint64_t type metadata completion function for PlaybackSyncer()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for PlaybackSyncer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PlaybackSyncer);
}

uint64_t dispatch thunk of PlaybackSyncer.localParticipantState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of PlaybackSyncer.localParticipantState.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PlaybackSyncer.localParticipantState.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of PlaybackSyncer.transportControlStates.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of PlaybackSyncer.transportControlStates.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of PlaybackSyncer.transportControlStates.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of PlaybackSyncer.coordinator.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of PlaybackSyncer.coordinator.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of PlaybackSyncer.coordinator.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of PlaybackSyncer.link.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of PlaybackSyncer.link.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of PlaybackSyncer.link.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of PlaybackSyncer.syncerDelegate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of PlaybackSyncer.syncerDelegate.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of PlaybackSyncer.syncerDelegate.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of PlaybackSyncer.__allocating_init(internalCoordinator:serialQueue:)()
{
  return (*(uint64_t (**)(void))(v0 + 472))();
}

uint64_t dispatch thunk of PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t dispatch thunk of PlaybackSyncer.replaceCoordinator(coordinator:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of PlaybackSyncer.replaceCoordinator(avPlaybackCoordinator:localParticipantUUID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t dispatch thunk of PlaybackSyncer.participantLeft(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of PlaybackSyncer.cleanUp()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of PlaybackSyncer.shouldDismissPlayback(allowingCancellation:completionHandler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of PlaybackSyncer.shareLocalParticipantState(participantState:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of PlaybackSyncer.shareTransportControlState(itemIdentifier:transportControlState:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of PlaybackSyncer.reloadTransportControlStateForItem(itemIdentifier:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of CoordinatorDelegate.shareLocalParticipantState(participantState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of CoordinatorDelegate.shareTransportControlState(itemIdentifier:transportControlState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of CoordinatorDelegate.reloadTransportControlStateForItem(itemIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of CoordinatorDelegate.shouldDismissPlayback(allowingCancellation:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t ObjC metadata update function for PlaybackSyncer.AVCoordinatorDelegateBridge()
{
  return type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(0);
}

uint64_t type metadata completion function for PlaybackSyncer.AVCoordinatorDelegateBridge()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for PlaybackSyncer.AVCoordinatorDelegateBridge(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PlaybackSyncer.AVCoordinatorDelegateBridge);
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.localParticipantUUID(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:broadcastLocalParticipantStateDictionary:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:broadcastTransportControlStateDictionary:forItemWithIdentifier:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:reloadTransportControlStateForItemWithIdentifier:completionHandler:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t destroy for PlaybackSyncer.CatchupState(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  if (v1 >> 60 != 15) {
    outlined consume of Data._Representation(*a1, v1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for PlaybackSyncer.CatchupState(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for PlaybackSyncer.CatchupState(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *a2;
      outlined copy of Data._Representation(*a2, a2[1]);
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      outlined consume of Data._Representation(v7, v8);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v5 = *a2;
  outlined copy of Data._Representation(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for PlaybackSyncer.CatchupState(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v6, v4);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackSyncer.CatchupState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaybackSyncer.CatchupState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackSyncer.CatchupState()
{
  return &type metadata for PlaybackSyncer.CatchupState;
}

uint64_t destroy for PlaybackSyncer.Message(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for PlaybackSyncer.Message(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for PlaybackSyncer.Message(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t assignWithTake for PlaybackSyncer.Message(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackSyncer.Message(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[24]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaybackSyncer.Message(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackSyncer.Message()
{
  return &type metadata for PlaybackSyncer.Message;
}

unsigned char *storeEnumTagSinglePayload for PlaybackSyncer.Message.MessageType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A37BE674);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackSyncer.Message.MessageType()
{
  return &type metadata for PlaybackSyncer.Message.MessageType;
}

uint64_t dispatch thunk of PlaybackCoordinating.handleNewTransportControlStateDictionary(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of PlaybackCoordinating.handleNewParticipantStateDictionary(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PlaybackCoordinating.handleRemoval(ofParticipant:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PlaybackCoordinating.getTrackedTransportStates()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.sendMessage(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.receivedMessageHandler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.receivedMessageHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.receivedMessageHandler.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.participantLeftHandler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.participantLeftHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.participantLeftHandler.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.localUUID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.sessionUUID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.shouldRequestCatchup.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

void *type metadata accessor for PlaybackSyncer.Message.CodingKeys()
{
  return &unk_1EF71A2E0;
}

uint64_t getEnumTagSinglePayload for PlaybackSyncer.Message.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PlaybackSyncer.Message.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A37BE938);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for PlaybackSyncer.CatchupState.CodingKeys(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

void *type metadata accessor for PlaybackSyncer.CatchupState.CodingKeys()
{
  return &unk_1EF71A140;
}

uint64_t specialized PlaybackSyncer.Message.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64616F6C796170 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1A37BEC70()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t partial apply for closure #1 in PlaybackSyncer.scheduleTransportStateTakeoverTimer()()
{
  return closure #1 in PlaybackSyncer.scheduleTransportStateTakeoverTimer()(v0);
}

unint64_t lazy protocol witness table accessor for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState);
  }
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of TopicManager.ConversationClient.Service(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (!a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1A37BEFB8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(char a1)
{
  return closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)()
{
  return closure #1 in closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(*(unsigned char *)(v0 + 16), *(unsigned __int8 *)(v0 + 17), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_1A37BF00C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(v2, v3);
}

uint64_t sub_1A37BF13C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  unsigned __int8 v6 = *(unsigned char *)(v0 + 24);

  return closure #1 in closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(v2, v6, v3, v4, v5);
}

uint64_t SpatialTemplatePreference.contentExtent.getter()
{
  return *(void *)v0;
}

void SpatialTemplatePreference.storage.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 9);
}

char *SpatialTemplatePreference.init(storage:contentExtent:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v4 = *result;
  *(void *)a4 = a2;
  *(unsigned char *)(a4 + 8) = a3 & 1;
  *(unsigned char *)(a4 + 9) = v4;
  return result;
}

uint64_t SpatialTemplatePreference.init(storage:spatialTemplate:contentExtent:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result = outlined destroy of SpatialTemplate?(a2);
  char v10 = *a1;
  *(void *)a5 = a3;
  *(unsigned char *)(a5 + 8) = a4 & 1;
  *(unsigned char *)(a5 + 9) = v10;
  return result;
}

uint64_t outlined destroy of SpatialTemplate?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTemplate?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

GroupActivities::SpatialTemplatePreference::Storage_optional __swiftcall SpatialTemplatePreference.Storage.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 5;
  if ((unint64_t)rawValue < 5) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (GroupActivities::SpatialTemplatePreference::Storage_optional)rawValue;
}

uint64_t SpatialTemplatePreference.Storage.rawValue.getter()
{
  return *v0;
}

GroupActivities::SpatialTemplatePreference::Storage_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SpatialTemplatePreference.Storage(Swift::Int *a1)
{
  return SpatialTemplatePreference.Storage.init(rawValue:)(*a1);
}

uint64_t SpatialTemplatePreference.description.getter()
{
  uint64_t result = 1701736302;
  switch(*(unsigned char *)(v0 + 9))
  {
    case 1:
      uint64_t result = 0x6953794265646973;
      break;
    case 2:
      uint64_t result = 0x61737265766E6F63;
      break;
    case 3:
      uint64_t result = 0x646E756F72727573;
      break;
    case 4:
      uint64_t result = 0x6D6F74737563;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpatialTemplatePreference()
{
  uint64_t result = 1701736302;
  switch(*(unsigned char *)(v0 + 9))
  {
    case 1:
      uint64_t result = 0x6953794265646973;
      break;
    case 2:
      uint64_t result = 0x61737265766E6F63;
      break;
    case 3:
      uint64_t result = 0x646E756F72727573;
      break;
    case 4:
      uint64_t result = 0x6D6F74737563;
      break;
    default:
      return result;
  }
  return result;
}

void static SpatialTemplatePreference.none.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
}

void static SpatialTemplatePreference.sideBySide.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 257;
}

void static SpatialTemplatePreference.conversational.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 513;
}

void static SpatialTemplatePreference.surround.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 769;
}

void static SpatialTemplatePreference.custom(_:)(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1025;
}

void SpatialTemplatePreference.contentExtent(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  char v3 = *(unsigned char *)(v2 + 9);
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 9) = v3;
}

double SpatialTemplatePreference.role(for:inSeatNumber:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t SpatialTemplatePreference.isCustom.getter()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplatePreference.Storage and conformance SpatialTemplatePreference.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialTemplatePreference.Storage and conformance SpatialTemplatePreference.Storage;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreference.Storage and conformance SpatialTemplatePreference.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreference.Storage and conformance SpatialTemplatePreference.Storage);
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplatePreference()
{
  return &type metadata for SpatialTemplatePreference;
}

uint64_t getEnumTagSinglePayload for SpatialTemplatePreference.Storage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SpatialTemplatePreference.Storage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A37BF780);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplatePreference.Storage()
{
  return &type metadata for SpatialTemplatePreference.Storage;
}

uint64_t GroupSession.requestEndpoint(with:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  v2[5] = v1;
  v2[6] = v3;
  v2[7] = v4;
  return MEMORY[0x1F4188298](GroupSession.requestEndpoint(with:), 0, 0);
}

uint64_t GroupSession.requestEndpoint(with:)()
{
  uint64_t v19 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  int v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 56);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 48);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v18 = v16;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v8 = GroupSession.description.getter();
    unint64_t v10 = v9;
    swift_release();
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1A375F000, v2, v3, "Application called requestEndpoint(with: %s) on %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v16, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v11 = *(void *)(v0 + 56);
  long long v17 = *(_OWORD *)(v0 + 40);
  uint64_t v12 = swift_task_alloc();
  *(void *)(v0 + 64) = v12;
  *(_OWORD *)(v12 + 16) = v17;
  *(void *)(v12 + 32) = v11;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSXPCListenerEndpoint?);
  *uint64_t v13 = v0;
  v13[1] = GroupSession.requestEndpoint(with:);
  return MEMORY[0x1F4188160](v0 + 16, 0, 0, 0xD000000000000016, 0x80000001A3900B90, partial apply for closure #1 in GroupSession.requestEndpoint(with:), v12, v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    int v2 = GroupSession.requestEndpoint(with:);
  }
  else
  {
    swift_task_dealloc();
    int v2 = AnyGroupActivity.tuConversationActivity<A>(as:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in GroupSession.requestEndpoint(with:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)*a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  dispatch_queue_t v18 = *(dispatch_queue_t *)((char *)a2 + v8[36]);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = v8[10];
  *((void *)v13 + 3) = v8[11];
  *((void *)v13 + 4) = a2;
  *((void *)v13 + 5) = a3;
  *((void *)v13 + 6) = a4;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[v12], (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for closure #1 in closure #1 in GroupSession.requestEndpoint(with:);
  *(void *)(v14 + 24) = v13;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  void aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_3;
  unint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v18, v15);
  _Block_release(v15);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a4) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a3;
  uint64_t v7 = (void *)*a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (id *)((char *)a1 + v7[35]);
  swift_beginAccess();
  id v13 = *v12;
  uint64_t v14 = XPCClient.queue.getter();

  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a4, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = v7[10];
  *((void *)v16 + 3) = v7[11];
  *((void *)v16 + 4) = a1;
  uint64_t v17 = v21;
  *((void *)v16 + 5) = a2;
  *((void *)v16 + 6) = v17;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = partial apply for closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:);
  *(void *)(v18 + 24) = v16;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  void aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_17;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v14, v19);

  _Block_release(v19);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v9) {
    __break(1u);
  }
  return result;
}

void closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (void **)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  unint64_t v12 = *v11;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(&v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], a4, v8);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v9 + 32))(v14 + v13, &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
  id v15 = v12;
  XPCClient.withHost(body:errorHandler:)();
  swift_release();
}

void closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = *a1;
  unint64_t v12 = (void *)MEMORY[0x1A624DFA0](a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v8);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v13, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:);
  void aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
  aBlock[3] = &block_descriptor_26;
  id v15 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v11, sel_requestEndpointWith_completion_, v12, v15);
  _Block_release(v15);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(void *a1)
{
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  return CheckedContinuation.resume(returning:)();
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ()(uint64_t a1, void *a2)
{
  os_log_type_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(void *a1)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  id v3 = a1;
  id v4 = a1;
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    id v9 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "connection error %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = (uint64_t)a1;
  id v12 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t GroupSession.requestEndpointError(with:)(void *a1)
{
  uint64_t v3 = a1[1];
  v2[2] = *a1;
  v2[3] = v3;
  id v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *id v4 = v2;
  v4[1] = GroupSession.requestEndpointError(with:);
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  v4[5] = v1;
  void v4[6] = v5;
  v4[7] = v6;
  return MEMORY[0x1F4188298](GroupSession.requestEndpoint(with:), 0, 0);
}

uint64_t GroupSession.requestEndpointError(with:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 40) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x1F4188298](GroupSession.requestEndpointError(with:), 0, 0);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t GroupSession.requestEndpointError(with:)()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionEndpointIdentifier.rawValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

GroupActivities::GroupSessionEndpointIdentifier __swiftcall GroupSessionEndpointIdentifier.init(rawValue:)(GroupActivities::GroupSessionEndpointIdentifier rawValue)
{
  *uint64_t v1 = rawValue;
  return rawValue;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupSessionEndpointIdentifier()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupSessionEndpointIdentifier()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupSessionEndpointIdentifier()
{
  return Hasher._finalize()();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance GroupSessionEndpointIdentifier@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GroupSessionEndpointIdentifier@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupSessionEndpointIdentifier(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t partial apply for closure #1 in GroupSession.requestEndpoint(with:)(uint64_t a1)
{
  return closure #1 in GroupSession.requestEndpoint(with:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type GroupSessionEndpointIdentifier and conformance GroupSessionEndpointIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupSessionEndpointIdentifier and conformance GroupSessionEndpointIdentifier;
  if (!lazy protocol witness table cache variable for type GroupSessionEndpointIdentifier and conformance GroupSessionEndpointIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionEndpointIdentifier and conformance GroupSessionEndpointIdentifier);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for GroupSessionEndpointIdentifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for GroupSessionEndpointIdentifier()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for GroupSessionEndpointIdentifier(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for GroupSessionEndpointIdentifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionEndpointIdentifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionEndpointIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionEndpointIdentifier()
{
  return &type metadata for GroupSessionEndpointIdentifier;
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.requestEndpoint(with:)()
{
  return partial apply for closure #1 in closure #1 in GroupSession.requestEndpoint(with:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, char *))closure #1 in closure #1 in GroupSession.requestEndpoint(with:));
}

uint64_t sub_1A37C0D5C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sIg_Ieg_TRTA_0()
{
  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)()
{
  return partial apply for closure #1 in closure #1 in GroupSession.requestEndpoint(with:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, char *))closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:));
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, char *))
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>)
                 - 8);
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v6 = (char *)v1 + ((*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4, v5, v6);
}

uint64_t sub_1A37C0F00()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(void **a1)
{
  closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(uint64_t a1)
{
  return partial apply for closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(a1, (uint64_t (*)(uint64_t, uint64_t))closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:));
}

uint64_t objectdestroy_19Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(uint64_t a1)
{
  return partial apply for closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(a1, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:));
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>)
                 - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t SystemCoordinatorTable.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = MEMORY[0x1E4FBC868];
  return v0;
}

uint64_t *SystemCoordinatorTable.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static SystemCoordinatorTable.shared;
}

uint64_t static SystemCoordinatorTable.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t (*SystemCoordinatorTable.systemCoordinatorsById.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t SystemCoordinatorTable.systemCoordinator(for:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v8 = (char *)&async function pointer to specialized SystemCoordinatorTable.systemCoordinator(for:)
     + async function pointer to specialized SystemCoordinatorTable.systemCoordinator(for:);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = SystemCoordinatorTable.systemCoordinator(for:);
  return ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))v8)(v5, v1, v3, v4);
}

uint64_t SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t closure #1 in SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = a4;
  return MEMORY[0x1F4188298](closure #1 in SystemCoordinatorTable.systemCoordinator(for:), 0, 0);
}

uint64_t closure #1 in SystemCoordinatorTable.systemCoordinator(for:)()
{
  outlined init with copy of AudioSessionAssertionManager(*(void *)(v0 + 64), v0 + 16);
  type metadata accessor for SystemCoordinator();
  swift_allocObject();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in SystemCoordinatorTable.systemCoordinator(for:);
  return SystemCoordinator.init(clientProvider:)(v0 + 16);
}

{
  uint64_t v0;

  **(void **)(v0 + 56) = *(void *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 80) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in SystemCoordinatorTable.systemCoordinator(for:), 0, 0);
}

uint64_t closure #2 in SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[14] = a5;
  v6[15] = a6;
  v6[13] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>.Iterator);
  v6[16] = v7;
  v6[17] = *(void *)(v7 - 8);
  v6[18] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in SystemCoordinatorTable.systemCoordinator(for:), 0, 0);
}

uint64_t closure #2 in SystemCoordinatorTable.systemCoordinator(for:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>);
  AsyncPublisher.makeAsyncIterator()();
  swift_beginAccess();
  uint64_t v1 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<AnyPublisher<Bool, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #2 in SystemCoordinatorTable.systemCoordinator(for:);
  uint64_t v3 = *(void *)(v0 + 128);
  return MEMORY[0x1F4187C78](v0 + 176, v3, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #2 in SystemCoordinatorTable.systemCoordinator(for:);
  }
  else {
    uint64_t v2 = closure #2 in SystemCoordinatorTable.systemCoordinator(for:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  *(unsigned char *)(v0 + 177) = *(unsigned char *)(v0 + 176);
  return MEMORY[0x1F4188298](closure #2 in SystemCoordinatorTable.systemCoordinator(for:), 0, 0);
}

{
  uint64_t v0;
  int v1;
  uint64_t (*v2)(void);
  uint64_t Strong;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 177);
  if (v1 == 2)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else if ((v1 & 1) != 0 || (uint64_t Strong = swift_weakLoadStrong(), (*(void *)(v0 + 168) = Strong) == 0))
  {
    uint64_t v5 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<AnyPublisher<Bool, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>.Iterator);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v6;
    *uint64_t v6 = v0;
    v6[1] = closure #2 in SystemCoordinatorTable.systemCoordinator(for:);
    uint64_t v7 = *(void *)(v0 + 128);
    return MEMORY[0x1F4187C78](v0 + 176, v7, v5);
  }
  else
  {
    return MEMORY[0x1F4188298](closure #2 in SystemCoordinatorTable.systemCoordinator(for:), Strong, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 88) = *(void *)(v0 + 160);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v1 = v0[21] + 112;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v3 = v0[15];
    swift_bridgeObjectRetain();
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v5)
    {
      uint64_t v6 = v0[15];
      uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 16 * v4 + 8);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      MEMORY[0x1A624E310](v7, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
      uint64_t v10 = v9;
      swift_bridgeObjectRelease();
      unint64_t v11 = 0;
      id v12 = 0;
      if (v10)
      {
        unint64_t v13 = v0 + 12;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        id v15 = *(void *)v1;
        v0[12] = *(void *)v1;
        *(void *)uint64_t v1 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          id v15 = *v13;
        }
        uint64_t v16 = *(void *)(v15 + 48);
        uint64_t v17 = type metadata accessor for UUID();
        (*(void (**)(unint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16 + *(void *)(*(void *)(v17 - 8) + 72) * v8, v17);
        uint64_t v18 = *v13;
        uint64_t v19 = (uint64_t *)(*(void *)(*v13 + 56) + 16 * v8);
        unint64_t v11 = *v19;
        id v12 = v19[1];
        specialized _NativeDictionary._delete(at:)(v8, v18);
        *(void *)uint64_t v1 = v18;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      outlined consume of SystemCoordinatorTable.Storage?(v11, v12);
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  swift_release();
  uint64_t v20 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<AnyPublisher<Bool, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>.Iterator);
  uint64_t v21 = (void *)swift_task_alloc();
  v0[19] = v21;
  *uint64_t v21 = v0;
  v21[1] = closure #2 in SystemCoordinatorTable.systemCoordinator(for:);
  unint64_t v22 = v0[16];
  return MEMORY[0x1F4187C78](v0 + 22, v22, v20);
}

uint64_t SystemCoordinatorTable.clearSystemCoordinator(_:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 112);
  if (*(void *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 16 * v5 + 8);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      MEMORY[0x1A624E310](v7, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
      swift_beginAccess();
      uint64_t v8 = specialized Dictionary._Variant.removeValue(forKey:)(a1);
      uint64_t v10 = v9;
      swift_endAccess();
      outlined consume of SystemCoordinatorTable.Storage?(v8, v10);
      swift_release();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t SystemCoordinatorTable.deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t SystemCoordinatorTable.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t SystemCoordinatorTable.init()()
{
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = MEMORY[0x1E4FBC868];
  return v0;
}

uint64_t SystemCoordinatorTable.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance SystemCoordinatorTable()
{
  return v0;
}

uint64_t specialized SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[30] = a3;
  v4[31] = a4;
  v4[29] = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>);
  v4[32] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[33] = v9;
  v4[34] = *(void *)(v9 + 64);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[37] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v4[38] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[39] = v11;
  v4[40] = *(void *)(v11 + 64);
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  v4[5] = a3;
  void v4[6] = a4;
  v4[44] = (uint64_t)__swift_allocate_boxed_opaque_existential_1(v4 + 2);
  (*(void (**)(void))(*(void *)(a3 - 8) + 16))();
  return MEMORY[0x1F4188298](specialized SystemCoordinatorTable.systemCoordinator(for:), a2, 0);
}

uint64_t specialized SystemCoordinatorTable.systemCoordinator(for:)()
{
  uint64_t v1 = *(void *)(v0 + 232);
  (*(void (**)(void))(*(void *)(v0 + 248) + 24))(*(void *)(v0 + 240));
  uint64_t v2 = (uint64_t *)(v1 + 112);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 112);
  if (!*(void *)(v3 + 16)) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v0 + 344);
  swift_bridgeObjectRetain();
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v46 = *(void *)(v0 + 344);
    uint64_t v40 = *(void *)(v0 + 336);
    uint64_t v44 = *(void *)(v0 + 312);
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v39 = *(void *)(v0 + 304);
    uint64_t v37 = *(void *)(v0 + 288);
    uint64_t v45 = *(void *)(v0 + 280);
    uint64_t v41 = *(void *)(v0 + 272);
    uint64_t v15 = *(void *)(v0 + 248);
    uint64_t v43 = *(void *)(v0 + 256);
    uint64_t v16 = *(void *)(v0 + 240);
    uint64_t v38 = *(void *)(v0 + 264);
    uint64_t v17 = type metadata accessor for TaskPriority();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    v18(v14, 1, 1, v17);
    outlined init with copy of AudioSessionAssertionManager(v0 + 16, v0 + 56);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = 0;
    *(void *)(v19 + 24) = 0;
    outlined init with take of TypedPayloadDecoding((long long *)(v0 + 56), v19 + 32);
    uint64_t v42 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC15GroupActivities17SystemCoordinatorCSg_Tgm5(v14, (uint64_t)&async function pointer to partial apply for closure #1 in SystemCoordinatorTable.systemCoordinator(for:), v19);
    *(void *)(v0 + 360) = v42;
    *(void *)(v0 + 216) = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
    uint64_t v21 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
    MEMORY[0x1A624DA40](v0 + 216, v20, v21);
    v18(v14, 1, 1, v17);
    uint64_t v36 = swift_allocObject();
    swift_weakInit();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v45, v37, v43);
    unint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
    *(void *)(v0 + 368) = v22;
    *(void *)(v0 + 376) = (v44 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v22(v40, v46, v39);
    unint64_t v23 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    unint64_t v24 = (v41 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (*(unsigned __int8 *)(v44 + 80) + v24 + 8) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = 0;
    *(void *)(v26 + 24) = 0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 32))(v26 + v23, v45, v43);
    *(void *)(v26 + v24) = v36;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v44 + 32))(v26 + v25, v40, v39);
    uint64_t v27 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v14, (uint64_t)&async function pointer to partial apply for closure #2 in SystemCoordinatorTable.systemCoordinator(for:), v26);
    *(void *)(v0 + 384) = v27;
    v22(v40, v46, v39);
    swift_beginAccess();
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v47 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, v27, v40, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v47;
    swift_bridgeObjectRelease();
    os_log_t v29 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    *(void *)(v0 + 392) = v29;
    *(void *)(v0 + 400) = (v44 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v29(v40, v39);
    swift_endAccess();
    int64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 408) = v30;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator?);
    *int64_t v30 = v0;
    v30[1] = specialized SystemCoordinatorTable.systemCoordinator(for:);
    uint64_t v12 = v0 + 208;
    uint64_t v13 = v42;
    goto LABEL_7;
  }
  uint64_t v7 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v5);
  uint64_t v8 = *v7;
  *(void *)(v0 + 416) = *v7;
  *(void *)(v0 + 424) = v7[1];
  uint64_t v9 = v8 & 0x7FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if ((v8 & 0x8000000000000000) == 0)
  {
    swift_retain();
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 432) = v10;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator?);
    *uint64_t v10 = v0;
    v10[1] = specialized SystemCoordinatorTable.systemCoordinator(for:);
    uint64_t v12 = v0 + 224;
    uint64_t v13 = v8;
LABEL_7:
    return MEMORY[0x1F4187DC0](v12, v13, v11);
  }
  uint64_t v31 = *(void *)(v0 + 344);
  uint64_t v32 = *(void *)(v0 + 304);
  uint64_t v33 = *(void *)(v0 + 312);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v34(v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized SystemCoordinatorTable.systemCoordinator(for:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  void (*v3)(void *);
  unint64_t *v4;
  void (*v5)(uint64_t, void);
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(void *);
  uint64_t v24;

  uint64_t v1 = *(void *)(v0 + 208);
  if (v1)
  {
    (*(void (**)(void, void, void))(v0 + 368))(*(void *)(v0 + 328), *(void *)(v0 + 344), *(void *)(v0 + 304));
    uint64_t v2 = SystemCoordinatorTable.systemCoordinatorsById.modify();
    uint64_t v3 = specialized Dictionary.subscript.modify((void *)(v0 + 96));
    unint64_t v5 = (void (*)(uint64_t, void))v3;
    char v6 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v7 = *(void *)(v0 + 328);
    uint64_t v8 = *(void *)(v0 + 304);
    if (v4[1])
    {
      unint64_t v23 = v3;
      *uint64_t v4 = v1 | 0x8000000000000000;
      swift_retain();
      swift_release();
      unint64_t v5 = (void (*)(uint64_t, void))v23;
    }
    v5(v0 + 96, 0);
    v6(v7, v8);
    ((void (*)(uint64_t, void))v2)(v0 + 128, 0);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v10 = *(void *)(v0 + 344);
    uint64_t v11 = *(void *)(v0 + 304);
    uint64_t v12 = *(void *)(v0 + 288);
    uint64_t v13 = *(void *)(v0 + 256);
    uint64_t v14 = *(void *)(v0 + 264);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    v9(v10, v11);
  }
  else
  {
    unint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v15 = *(void *)(v0 + 344);
    uint64_t v16 = *(void *)(v0 + 304);
    uint64_t v17 = *(void *)(v0 + 288);
    uint64_t v18 = *(void *)(v0 + 256);
    uint64_t v19 = *(void *)(v0 + 264);
    SystemCoordinatorTable.clearSystemCoordinator(_:)(v15);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    v22(v15, v16);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v20(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized SystemCoordinatorTable.systemCoordinator(for:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v1 = v0[43];
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[39];
  swift_release();
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = v0[28];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

uint64_t type metadata accessor for SystemCoordinatorTable()
{
  return self;
}

uint64_t method lookup function for SystemCoordinatorTable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemCoordinatorTable);
}

uint64_t dispatch thunk of SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1)
{
  char v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 120) + **(int **)(*(void *)v1 + 120));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = dispatch thunk of SystemCoordinatorTable.systemCoordinator(for:);
  return v6(a1);
}

uint64_t dispatch thunk of SystemCoordinatorTable.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t destroy for SystemCoordinatorTable.Storage()
{
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for SystemCoordinatorTable.Storage(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for SystemCoordinatorTable.Storage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for SystemCoordinatorTable.Storage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

void *type metadata accessor for SystemCoordinatorTable.Storage()
{
  return &unk_1EF71B258;
}

uint64_t outlined consume of SystemCoordinatorTable.Storage?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A37C2FE4()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  v4[7] = a1;
  v4[8] = v1 + 32;
  return MEMORY[0x1F4188298](closure #1 in SystemCoordinatorTable.systemCoordinator(for:), 0, 0);
}

uint64_t sub_1A37C30D4()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A37C310C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return MEMORY[0x1F4186498](v0, v10, v11);
}

uint64_t partial apply for closure #2 in SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80);
  uint64_t v9 = v7 + v8 + 8;
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = *(void *)(v1 + v7);
  uint64_t v14 = v1 + (v9 & ~v8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #2 in SystemCoordinatorTable.systemCoordinator(for:)(a1, v10, v11, v12, v13, v14);
}

void *initializeBufferWithCopyOfBuffer for SystemCoordinatorTable.Storage.CoordinatorBox(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for SystemCoordinatorTable.Storage.CoordinatorBox()
{
  return swift_release();
}

void *assignWithCopy for SystemCoordinatorTable.Storage.CoordinatorBox(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for SystemCoordinatorTable.Storage.CoordinatorBox(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinatorTable.Storage.CoordinatorBox(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SystemCoordinatorTable.Storage.CoordinatorBox(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)uint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for SystemCoordinatorTable.Storage.CoordinatorBox(void *a1)
{
  return *a1 >> 63;
}

void *destructiveProjectEnumData for SystemCoordinatorTable.Storage.CoordinatorBox(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *destructiveInjectEnumTag for SystemCoordinatorTable.Storage.CoordinatorBox(uint64_t *result, uint64_t a2)
{
  *uint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

void *type metadata accessor for SystemCoordinatorTable.Storage.CoordinatorBox()
{
  return &unk_1EF71B1C8;
}

uint64_t SpatialTemplateRole<>.roleIdentifier.getter()
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  return v1;
}

uint64_t SpatialTemplateRole.output.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 16))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t dispatch thunk of SpatialTemplateRole.roleIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t protocol witness for SpatialTemplateRole.roleIdentifier.getter in conformance PresentationSpatialTemplate.Role()
{
  return 0x65746E6573657270;
}

uint64_t GroupActivitySuggestion.__allocating_init<A>(activity:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  uint64_t v4 = specialized GroupActivitySuggestion.init<A>(activity:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t GroupActivitySuggestion.init<A>(activity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = specialized GroupActivitySuggestion.init<A>(activity:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t implicit closure #1 in GroupActivitySuggestion.init<A>(activity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v9 = static ConversationManager.shared;
  v13[3] = a2;
  v13[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  uint64_t v11 = (*(uint64_t (**)(uint64_t *))(*(void *)v9 + 160))(v13);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  if (!v4) {
    *a4 = v11;
  }
  return result;
}

uint64_t GroupActivitySuggestion.deinit()
{
  AnyCancellable.cancel()();
  swift_release();
  return v0;
}

Swift::Void __swiftcall GroupActivitySuggestion.cancel()()
{
}

uint64_t GroupActivitySuggestion.__deallocating_deinit()
{
  AnyCancellable.cancel()();
  swift_release();

  return swift_deallocClassInstance();
}

void protocol witness for Cancellable.cancel() in conformance GroupActivitySuggestion()
{
}

uint64_t specialized GroupActivitySuggestion.init<A>(activity:)()
{
  type metadata accessor for AnyCancellable();
  tryLog<A>(_:_:function:line:)();
  uint64_t v1 = v3;
  if (!v3)
  {
    swift_allocObject();
    uint64_t v1 = AnyCancellable.init(_:)();
  }
  *(void *)(v0 + 16) = v1;
  return v0;
}

uint64_t type metadata accessor for GroupActivitySuggestion()
{
  return self;
}

uint64_t method lookup function for GroupActivitySuggestion(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GroupActivitySuggestion);
}

uint64_t dispatch thunk of GroupActivitySuggestion.__allocating_init<A>(activity:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t partial apply for implicit closure #1 in GroupActivitySuggestion.init<A>(activity:)@<X0>(uint64_t *a1@<X8>)
{
  return implicit closure #1 in GroupActivitySuggestion.init<A>(activity:)(v1[4], v1[2], v1[3], a1);
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v19 = MEMORY[0x1E4FBC860];
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (v5)
  {
    unint64_t v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v9 = v8 | (v7 << 6);
LABEL_22:
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = self;
    swift_bridgeObjectRetain_n();
    uint64_t v17 = (void *)MEMORY[0x1A624DFA0](v14, v15);
    id v18 = objc_msgSend(v16, sel_normalizedHandleWithDestinationID_, v17);
    swift_bridgeObjectRelease_n();

    if (v18)
    {
      MEMORY[0x1A624E0F0]();
      if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  int64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v10 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v10);
  ++v7;
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 1;
  if (v10 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 2;
  if (v10 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 3;
  if (v10 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11)
  {
LABEL_21:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_22;
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v6)
  {
LABEL_26:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_26;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;

  uint64_t v19 = MEMORY[0x1E4FBC860];
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (v5)
  {
    unint64_t v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v9 = v8 | (v7 << 6);
LABEL_22:
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = self;
    swift_bridgeObjectRetain();
    uint64_t v17 = (void *)MEMORY[0x1A624DFA0](v14, v15);
    id v18 = objc_msgSend(v16, sel_normalizedHandleWithDestinationID_, v17);
    swift_bridgeObjectRelease();

    if (v18)
    {
      MEMORY[0x1A624E0F0]();
      if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  int64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v10 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v10);
  ++v7;
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 1;
  if (v10 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 2;
  if (v10 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 3;
  if (v10 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11)
  {
LABEL_21:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_22;
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v6)
  {
LABEL_26:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_26;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
}

uint64_t GroupSessionProvider.uuid.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v17[7] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  v17[5] = *(void *)(v7 - 8);
  v17[6] = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)v17 - v10;
  uint64_t v18 = v3;
  dispatch thunk of Identifiable.id.getter();
  swift_getAssociatedConformanceWitness();
  static SharableObjectIdentifier.identifier<A, B>(ofType:with:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  uint64_t v12 = v19;
  uint64_t v13 = v20;
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  uint64_t v20 = v14;
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  static SharableObjectIdentifier.identifier<A>(ofType:with:)();
  return swift_bridgeObjectRelease();
}

uint64_t static GroupSessionProvider.providerIdentifier.getter()
{
  return static GroupSessionProvider.providerIdentifier.getter();
}

{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t result;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  uint64_t v0 = objc_msgSend(self, sel_processInfo);
  uint64_t v1 = NSProcessInfo.stableAppIdentifier.getter();
  uint64_t v3 = v2;

  if (v3) {
    goto LABEL_4;
  }
  uint64_t v4 = objc_msgSend(self, sel_mainBundle);
  unint64_t v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_4:
    v6._uint64_t countAndFlagsBits = 46;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    v7._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    return v1;
  }
  _StringGuts.grow(_:)(147);
  v9._object = (void *)0x80000001A3900CC0;
  v9._uint64_t countAndFlagsBits = 0xD000000000000090;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double GroupSessionProvider.localMember.getter@<D0>(uint64_t a1@<X8>)
{
  return GroupSessionProvider.localMember.getter(a1);
}

{
  double result;

  *(void *)(a1 + 32) = 0;
  uint64_t result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t GroupSessionProvider.isCrossAccount.getter()
{
  return 1;
}

uint64_t GroupSessionProviderTestingOverrides.default.unsafeMutableAddressor()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GroupSessionProviderTestingOverrides();

  return __swift_project_value_buffer(v0, (uint64_t)static GroupSessionProviderTestingOverrides.default);
}

uint64_t GroupSessionProviderTestingOverrides.groupSessionServiceProvider.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  Testable.wrappedValue.getter();
  return v1;
}

uint64_t GroupSessionProvider.join()(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return MEMORY[0x1F4188298](GroupSessionProvider.join(), 0, 0);
}

uint64_t GroupSessionProvider.join()()
{
  uint64_t v1 = v0[6];
  swift_getObjectType();
  uint64_t v2 = swift_conformsToProtocol2();
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v2) {
    uint64_t v4 = v1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    swift_unknownObjectRetain();
    uint64_t v5 = specialized GroupSessionProvider.groupSessionService.getter();
    uint64_t v7 = v6;
    v0[7] = v5;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 24) + **(int **)(v7 + 24));
    uint64_t v9 = (void *)swift_task_alloc();
    v0[8] = v9;
    *uint64_t v9 = v0;
    v9[1] = GroupSessionProvider.join();
    uint64_t v10 = v4;
    uint64_t v11 = v3;
    uint64_t v12 = ObjectType;
    uint64_t v13 = v7;
    uint64_t v14 = v21;
  }
  else
  {
    uint64_t v15 = specialized GroupSessionProvider.groupSessionService.getter();
    uint64_t v17 = v16;
    v0[10] = v15;
    uint64_t v18 = swift_getObjectType();
    unint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 16) + **(int **)(v17 + 16));
    uint64_t v19 = (void *)swift_task_alloc();
    v0[11] = v19;
    *uint64_t v19 = v0;
    v19[1] = GroupSessionProvider.join();
    uint64_t v11 = v0[5];
    uint64_t v10 = v0[6];
    uint64_t v12 = v18;
    uint64_t v13 = v17;
    uint64_t v14 = v22;
  }
  return v14(v10, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = GroupSessionProvider.join();
  }
  else {
    uint64_t v2 = GroupSessionProvider.join();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (one-time initialization token for groupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1A375F000, v2, v3, "Successfully started tracking GroupSessionProvider on join()", v4, 2u);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[4];

  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(v6, v5);
  v0[3] = 1;
  CurrentValueSubject.send(_:)();
  swift_release();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = GroupSessionProvider.join();
  }
  else {
    uint64_t v2 = GroupSessionProvider.join();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  swift_unknownObjectRelease();
  if (one-time initialization token for groupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1A375F000, v2, v3, "Successfully started tracking GroupSessionProvider on join()", v4, 2u);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[4];

  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(v6, v5);
  v0[3] = 1;
  CurrentValueSubject.send(_:)();
  swift_release();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  swift_unknownObjectRelease();
  uint64_t v1 = (void *)v0[9];
  swift_unknownObjectRelease();
  if (one-time initialization token for groupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.groupSessionProvider);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1A375F000, v3, v4, "Failed to start tracking GroupSessionProvider on join()", v5, 2u);
    MEMORY[0x1A624F870](v5, -1, -1);
  }
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[4];

  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(v7, v6);
  v0[2] = v1;
  uint64_t v8 = v1;
  CurrentValueSubject.send(_:)();
  swift_release();

  swift_willThrow();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = (void *)v0[12];
  swift_unknownObjectRelease();
  if (one-time initialization token for groupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.groupSessionProvider);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1A375F000, v3, v4, "Failed to start tracking GroupSessionProvider on join()", v5, 2u);
    MEMORY[0x1A624F870](v5, -1, -1);
  }
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[4];

  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(v7, v6);
  v0[2] = v1;
  uint64_t v8 = v1;
  CurrentValueSubject.send(_:)();
  swift_release();

  swift_willThrow();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t GroupSessionProvider.leave()(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSessionProvider.leave(), 0, 0);
}

uint64_t GroupSessionProvider.leave()()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[4];
  uint64_t v4 = specialized GroupSessionProvider.groupSessionService.getter();
  uint64_t v6 = v5;
  v0[10] = v4;
  uint64_t ObjectType = swift_getObjectType();
  GroupSessionProvider.uuid.getter(v3, v2, v1);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 32) + **(int **)(v6 + 32));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[11] = v8;
  void *v8 = v0;
  v8[1] = GroupSessionProvider.leave();
  uint64_t v9 = v0[9];
  return v11(v9, ObjectType, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[8] + 8))(v2[9], v2[7]);
  swift_unknownObjectRelease();
  if (v0) {
    uint64_t v3 = GroupSessionProvider.leave();
  }
  else {
    uint64_t v3 = GroupSessionProvider.leave();
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  if (one-time initialization token for groupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1A375F000, v2, v3, "Successfully left GroupSessionProvider", v4, 2u);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[4];

  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(v6, v5);
  v0[3] = 0;
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  if (one-time initialization token for groupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1A375F000, v2, v3, "Failed to leave GroupSessionProvider", v4, 2u);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  uint64_t v5 = (void *)v0[12];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[4];

  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(v7, v6);
  v0[2] = v5;
  uint64_t v8 = v5;
  CurrentValueSubject.send(_:)();
  swift_release();

  swift_willThrow();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t GroupSessionProvider.session.getter(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  return MEMORY[0x1F4188298](GroupSessionProvider.session.getter, 0, 0);
}

uint64_t GroupSessionProvider.session.getter()
{
  unint64_t v24 = v0;
  if (one-time initialization token for groupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[15] = __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  swift_unknownObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[14];
  if (v4)
  {
    uint64_t v6 = v0[12];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v20 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    v0[10] = v5;
    uint64_t v9 = >> prefix<A>(_:)((uint64_t)(v0 + 10), v6);
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v2, v3, "Provider %s starting to observe GroupSessions", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n();
  }

  GroupSessionProvider.sessions.getter(v0[12], v0[13], (uint64_t)&v16);
  uint64_t v11 = (void *)v16;
  uint64_t v20 = v16;
  long long v21 = v17;
  uint64_t v22 = v18;
  uint64_t v23 = v19;
  v0[16] = swift_getAssociatedTypeWitness();
  v0[17] = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  type metadata accessor for GroupSession.Sessions();
  GroupSession.Sessions.makeAsyncIterator()(v0 + 2);

  swift_unknownObjectRelease();
  swift_release();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[18] = (uint64_t)v12;
  uint64_t v13 = type metadata accessor for GroupSession.Sessions.Iterator();
  uint64_t WitnessTable = swift_getWitnessTable();
  *uint64_t v12 = v0;
  v12[1] = GroupSessionProvider.session.getter;
  return MEMORY[0x1F4187C88](v0 + 3, 0, 0, v13, WitnessTable);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](GroupSessionProvider.session.getter, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  uint64_t v25 = v0;
  uint64_t v1 = v0[3];
  if (v1)
  {
    swift_unknownObjectRetain_n();
    swift_retain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v22 = v0[14];
      uint64_t v23 = v0[12];
      BOOL v4 = swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      unint64_t v24 = v5;
      *(_DWORD *)BOOL v4 = 136315394;
      v0[6] = v1;
      uint64_t v6 = type metadata accessor for GroupSession();
      uint64_t v7 = >> prefix<A>(_:)((uint64_t)(v0 + 6), v6);
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v4 + 12) = 2080;
      v0[8] = v22;
      uint64_t v9 = >> prefix<A>(_:)((uint64_t)(v0 + 8), v23);
      v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      _os_log_impl(&dword_1A375F000, v2, v3, "Observed GroupSession: %s on provider: %s", (uint8_t *)v4, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v5, -1, -1);
      MEMORY[0x1A624F870](v4, -1, -1);
    }
    else
    {

      swift_unknownObjectRelease_n();
      swift_release_n();
    }
    swift_release();
  }
  else
  {
    swift_release();
    swift_unknownObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.default.getter();
    uint64_t v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = v0[14];
    if (v13)
    {
      uint64_t v15 = v0[12];
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      long long v17 = swift_slowAlloc();
      unint64_t v24 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      v0[4] = v14;
      uint64_t v18 = >> prefix<A>(_:)((uint64_t)(v0 + 4), v15);
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      _os_log_impl(&dword_1A375F000, v11, v12, "Provider %s returning nil for GroupSession", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v17, -1, -1);
      MEMORY[0x1A624F870](v16, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n();
    }
  }
  uint64_t v20 = (uint64_t (*)(uint64_t))v0[1];
  return v20(v1);
}

double GroupSessionProvider.sessions.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  if (one-time initialization token for groupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.groupSessionProvider);
  swift_unknownObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = a3;
    uint64_t v12 = swift_slowAlloc();
    *(void *)&v26[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    *(void *)&long long v23 = v4;
    uint64_t v13 = >> prefix<A>(_:)((uint64_t)&v23, a1);
    *(void *)&long long v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v9, v10, "Provider %s starting to observe on sessions stream for GroupSessions", v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v15 = v12;
    a3 = v20;
    MEMORY[0x1A624F870](v15, -1, -1);
    MEMORY[0x1A624F870](v11, -1, -1);
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  type metadata accessor for OS_dispatch_queue();
  swift_unknownObjectRetain();
  uint64_t v16 = static OS_dispatch_queue.main.getter();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  GroupSessionObserver.init<A>(for:queue:)(v4, v16, AssociatedTypeWitness, a1, a2, &v23);
  v21[0] = v23;
  v21[1] = v24;
  uint64_t v22 = v25;
  swift_getAssociatedConformanceWitness();
  uint64_t v18 = type metadata accessor for GroupSessionObserver();
  swift_getWitnessTable();
  _PublisherElements.init(_:)((uint64_t)v21, v18, (uint64_t)v26);
  long long v23 = v26[0];
  long long v24 = v26[1];
  uint64_t v25 = v27;
  *(void *)&double result = GroupSession.Sessions.init(base:)((uint64_t)&v23, a3).n128_u64[0];
  return result;
}

uint64_t GroupSessionProvider.backgroundSessionCreationRequest.getter(uint64_t a1, uint64_t a2)
{
  v3[55] = a2;
  v3[56] = v2;
  v3[54] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[57] = v4;
  v3[58] = *(void *)(v4 - 8);
  v3[59] = swift_task_alloc();
  v3[60] = type metadata accessor for LocalAccountMember();
  v3[61] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSessionProvider.backgroundSessionCreationRequest.getter, 0, 0);
}

uint64_t GroupSessionProvider.backgroundSessionCreationRequest.getter()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v2 = *(void *)(v0 + 432);
  (*(void (**)(uint64_t, uint64_t))(v1 + 72))(v2, v1);
  CurrentValueSubject.value.getter();
  swift_release();
  specialized Sequence.compactMap<A>(_:)(*(void *)(v0 + 416));
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 496) = specialized Set.init<A>(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v1 + 80);
  v5(v2, v1);
  if (!*(void *)(v0 + 120))
  {
    id v15 = 0;
    uint64_t v16 = 0;
    uint64_t v6 = v0 + 96;
    goto LABEL_26;
  }
  uint64_t v6 = v0 + 136;
  uint64_t v7 = *(void *)(v0 + 440);
  uint64_t v8 = *(void *)(v0 + 432);
  outlined init with take of TypedPayloadDecoding((long long *)(v0 + 96), v0 + 56);
  v5(v8, v7);
  if (*(void *)(v0 + 160))
  {
    outlined init with copy of Member?(v0 + 136, v0 + 216);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member);
    if (swift_dynamicCast())
    {
      uint64_t v10 = *(void *)(v0 + 376);
      uint64_t v9 = *(void *)(v0 + 384);
      uint64_t v11 = self;
      swift_bridgeObjectRetain();
      uint64_t v12 = (void *)MEMORY[0x1A624DFA0](v10, v9);
      id v13 = objc_msgSend(v11, sel_normalizedHandleWithDestinationID_, v12);

      swift_bridgeObjectRelease();
      if (v13)
      {
        swift_bridgeObjectRelease();
        id v14 = objc_allocWithZone((Class)type metadata accessor for AddressableMember());
        id v15 = (id)AddressableMember.init(handle:)();
        __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
        uint64_t v16 = lazy protocol witness table accessor for type AccountMember and conformance AccountMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x1E4F5AFB0]);
      }
      else
      {
        if (one-time initialization token for groupSessionProvider != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)static Log.groupSessionProvider);
        swift_bridgeObjectRetain();
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v26, v27))
        {
          unint64_t v28 = (uint8_t *)swift_slowAlloc();
          uint64_t v29 = swift_slowAlloc();
          v37[0] = v29;
          *(_DWORD *)unint64_t v28 = 136315138;
          *(void *)(v0 + 392) = v10;
          *(void *)(v0 + 400) = v9;
          swift_bridgeObjectRetain();
          uint64_t v30 = String.init<A>(reflecting:)();
          *(void *)(v0 + 424) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v37);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1A375F000, v26, v27, "Failed to get tuHandle from AddressableMember %s", v28, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1A624F870](v29, -1, -1);
          MEMORY[0x1A624F870](v28, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
        id v15 = 0;
        uint64_t v16 = 0;
      }
      uint64_t v6 = v0 + 136;
      goto LABEL_25;
    }
    if (swift_dynamicCast())
    {
      uint64_t v17 = *(void *)(v0 + 488);
      id v15 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AccountMember()), sel_init);
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
      uint64_t v16 = lazy protocol witness table accessor for type AccountMember and conformance AccountMember(&lazy protocol witness table cache variable for type AccountMember and conformance AccountMember, MEMORY[0x1E4F5AF78]);
      outlined destroy of LocalAccountMember(v17, (uint64_t (*)(void))type metadata accessor for LocalAccountMember);
LABEL_25:
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
      goto LABEL_26;
    }
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
  }
  if (one-time initialization token for groupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.groupSessionProvider);
  outlined init with copy of AudioSessionAssertionManager(v0 + 56, v0 + 176);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v19, v20))
  {
    long long v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    v37[0] = v36;
    *(_DWORD *)long long v21 = 136315138;
    outlined init with copy of AudioSessionAssertionManager(v0 + 176, v0 + 16);
    outlined init with copy of Member?(v0 + 16, v0 + 256);
    if (*(void *)(v0 + 280))
    {
      outlined init with take of TypedPayloadDecoding((long long *)(v0 + 256), v0 + 336);
      outlined init with copy of AudioSessionAssertionManager(v0 + 336, v0 + 296);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member);
      uint64_t v22 = String.init<A>(reflecting:)();
      unint64_t v24 = v23;
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 336);
    }
    else
    {
      unint64_t v24 = 0xE300000000000000;
      uint64_t v22 = 7104878;
    }
    outlined destroy of Member?(v0 + 16);
    *(void *)(v0 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
    _os_log_impl(&dword_1A375F000, v19, v20, "LocalMember is an unknown type: %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v36, -1, -1);
    MEMORY[0x1A624F870](v21, -1, -1);

    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
    id v15 = 0;
    uint64_t v16 = 0;
    uint64_t v6 = v0 + 136;
  }
  else
  {

    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
    id v15 = 0;
    uint64_t v16 = 0;
  }
LABEL_26:
  outlined destroy of Member?(v6);
  *(void *)(v0 + 504) = v15;
  *(void *)(v0 + 512) = v16;
  GroupSessionProvider.uuid.getter(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 472));
  uint64_t v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 520) = v32;
  *uint64_t v32 = v0;
  v32[1] = GroupSessionProvider.backgroundSessionCreationRequest.getter;
  uint64_t v33 = *(void *)(v0 + 440);
  uint64_t v34 = *(void *)(v0 + 432);
  return GroupSessionProvider.activityCreateSessionRequest.getter(v34, v33);
}

{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  (*(void (**)(void))(v0[55] + 88))(v0[54]);
  uint64_t v1 = objc_allocWithZone((Class)type metadata accessor for BackgroundSessionCreationRequest());
  uint64_t v2 = BackgroundSessionCreationRequest.init(id:activitySessionRequest:members:localMember:isCrossAccount:)();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t GroupSessionProvider.backgroundSessionCreationRequest.getter(uint64_t a1)
{
  unint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 528) = v1;
  swift_task_dealloc();
  if (v1)
  {
    (*(void (**)(void, void))(v4[58] + 8))(v4[59], v4[57]);
    swift_bridgeObjectRelease();
    uint64_t v5 = GroupSessionProvider.backgroundSessionCreationRequest.getter;
  }
  else
  {
    v4[67] = a1;
    uint64_t v5 = GroupSessionProvider.backgroundSessionCreationRequest.getter;
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t GroupSessionProvider.activityCreateSessionRequest.getter(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[5] = AssociatedTypeWitness;
  v3[6] = *(void *)(AssociatedTypeWitness - 8);
  v3[7] = swift_task_alloc();
  type metadata accessor for AnyGroupActivity(0);
  v3[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSessionProvider.activityCreateSessionRequest.getter, 0, 0);
}

uint64_t GroupSessionProvider.activityCreateSessionRequest.getter()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = (uint64_t *)v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  (*(void (**)(void, void))(v0[3] + 56))(v0[2], v0[3]);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  GroupActivity.eraseToAnyGroupActivity()(v3, *(void *)(AssociatedConformanceWitness + 8), v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[9] = v6;
  *uint64_t v6 = v0;
  v6[1] = GroupSessionProvider.activityCreateSessionRequest.getter;
  return AnyGroupActivity.tuConversationActivityCreateSessionRequest.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 80);
  return v1(v2);
}

uint64_t GroupSessionProvider.activityCreateSessionRequest.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 80) = a1;
  swift_task_dealloc();
  outlined destroy of LocalAccountMember(v2, type metadata accessor for AnyGroupActivity);
  return MEMORY[0x1F4188298](GroupSessionProvider.activityCreateSessionRequest.getter, 0, 0);
}

uint64_t default argument 0 of static SharableObjectIdentifier.identifier<A, B>(ofType:with:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t one-time initialization function for default()
{
  uint64_t v0 = type metadata accessor for GroupSessionProviderTestingOverrides();
  __swift_allocate_value_buffer(v0, static GroupSessionProviderTestingOverrides.default);
  __swift_project_value_buffer(v0, (uint64_t)static GroupSessionProviderTestingOverrides.default);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for GroupSessionServiceProvider?);
  return Testable.init(wrappedValue:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.default);
  __swift_project_value_buffer(v0, (uint64_t)static Log.default);
  return Logger.init(subsystem:category:)();
}

uint64_t GroupSessionProviderTestingOverrides.init()()
{
  return Testable.init(wrappedValue:)();
}

uint64_t static GroupSessionProviderTestingOverrides.default.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for GroupSessionProviderTestingOverrides();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static GroupSessionProviderTestingOverrides.default);
  swift_beginAccess();
  return outlined init with copy of GroupSessionProviderTestingOverrides(v3, a1);
}

uint64_t static GroupSessionProviderTestingOverrides.default.setter(uint64_t a1)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for GroupSessionProviderTestingOverrides();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static GroupSessionProviderTestingOverrides.default);
  swift_beginAccess();
  outlined assign with copy of GroupSessionProviderTestingOverrides(a1, v3);
  swift_endAccess();
  return outlined destroy of LocalAccountMember(a1, (uint64_t (*)(void))type metadata accessor for GroupSessionProviderTestingOverrides);
}

uint64_t (*static GroupSessionProviderTestingOverrides.default.modify())()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GroupSessionProviderTestingOverrides();
  __swift_project_value_buffer(v0, (uint64_t)static GroupSessionProviderTestingOverrides.default);
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t key path setter for GroupSessionProviderTestingOverrides.groupSessionServiceProvider : GroupSessionProviderTestingOverrides()
{
  return Testable.wrappedValue.setter();
}

uint64_t GroupSessionProviderTestingOverrides.groupSessionServiceProvider.setter()
{
  return Testable.wrappedValue.setter();
}

void (*GroupSessionProviderTestingOverrides.groupSessionServiceProvider.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  v2[4] = Testable.wrappedValue.modify();
  return GroupSessionProviderTestingOverrides.groupSessionServiceProvider.modify;
}

void GroupSessionProviderTestingOverrides.groupSessionServiceProvider.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

uint64_t GroupSessionProviderTestingOverrides.init(groupSessionServiceProvider:)()
{
  return Testable.init(wrappedValue:)();
}

uint64_t specialized GroupSessionProvider.groupSessionService.getter()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for GroupSessionProviderTestingOverrides();
  __swift_project_value_buffer(v0, (uint64_t)static GroupSessionProviderTestingOverrides.default);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  Testable.wrappedValue.getter();
  uint64_t v1 = v3;
  if (v3)
  {
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v1 = static BackgroundGroupSessionManager.shared;
    swift_retain();
  }
  return v1;
}

uint64_t type metadata accessor for GroupSessionProviderTestingOverrides()
{
  uint64_t result = type metadata singleton initialization cache for GroupSessionProviderTestingOverrides;
  if (!type metadata singleton initialization cache for GroupSessionProviderTestingOverrides) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined destroy of Member?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Member?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type AccountMember and conformance AccountMember(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GroupSessionProviderTestingOverrides();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with copy of GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GroupSessionProviderTestingOverrides();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of LocalAccountMember(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

double sub_1A37C7578@<D0>(_OWORD *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  Testable.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionProviderState()
{
  return &type metadata for GroupSessionProviderState;
}

uint64_t dispatch thunk of static GroupSessionProvider.providerIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of GroupSessionProvider.activity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of GroupSessionProvider.state.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of GroupSessionProvider.members.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of GroupSessionProvider.localMember.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of GroupSessionProvider.isCrossAccount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of PresenceGroupSessionProvider.presenceInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t initializeBufferWithCopyOfBuffer for GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for GroupSessionProviderTestingOverrides(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  long long v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A37C78EC);
}

uint64_t sub_1A37C78EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A37C7970);
}

uint64_t sub_1A37C7970(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void type metadata completion function for GroupSessionProviderTestingOverrides()
{
  type metadata accessor for Testable<GroupSessionServiceProvider?>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Testable<GroupSessionServiceProvider?>()
{
  if (!lazy cache variable for type metadata for Testable<GroupSessionServiceProvider?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for GroupSessionServiceProvider?);
    unint64_t v0 = type metadata accessor for Testable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
    }
  }
}

uint64_t dispatch thunk of ErrorRecoveryGroupSessionProvider.fetchMembershipUpdate()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 8) + **(int **)(a2 + 8));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v7(a1, a2);
}

uint64_t static Credential.build(from:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Token.accountID.getter();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Token.token.getter();
  type metadata accessor for Credential.Builder();
  swift_allocObject();
  Credential.Builder.init(tenantName:requestorID:accessToken:)();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Token.expirationDate.getter();
  Credential.Builder.setExpirationDate(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  Credential.Builder.build()();
  return swift_release();
}

uint64_t GroupSessionObserver.init<A>(for:queue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v51 = a2;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v50 = &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = &v43[-v15];
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = &v43[-v17];
  GroupSessionProvider.uuid.getter(a4, a5, (uint64_t)&v43[-v17]);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.client);
  os_log_type_t v20 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 16);
  os_log_t v49 = v18;
  v20(v16, v18, v10);
  swift_unknownObjectRetain_n();
  long long v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  int v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v47 = a6;
    uint64_t v25 = v24;
    uint64_t v46 = swift_slowAlloc();
    uint64_t v53 = v46;
    *(_DWORD *)uint64_t v25 = 136315650;
    os_log_t v45 = v21;
    uint64_t v26 = _typeName(_:qualified:)();
    uint64_t v48 = a5;
    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    uint64_t v52 = a1;
    int v44 = v23;
    uint64_t v28 = >> prefix<A>(_:)((uint64_t)&v52, a4);
    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 22) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v16, v10);
    long long v21 = v45;
    _os_log_impl(&dword_1A375F000, v45, (os_log_type_t)v44, "Initialized observer for %s for provider: %s a/k/a ID: %s", (uint8_t *)v25, 0x20u);
    uint64_t v32 = v46;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v32, -1, -1);
    uint64_t v33 = v25;
    a6 = v47;
    MEMORY[0x1A624F870](v33, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n();
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v16, v10);
  }

  uint64_t v34 = specialized GroupSessionProvider.groupSessionService.getter();
  uint64_t v36 = v35;
  swift_unknownObjectRelease();
  uint64_t v37 = *(void *)(v36 + 8);
  uint64_t v38 = *(uint64_t (**)(unint64_t, unsigned char *, uint64_t))(v11 + 32);
  uint64_t v39 = v50;
  v38((unint64_t)v50, v49, v10);
  unint64_t v40 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v41 = swift_allocObject();
  uint64_t result = v38(v41 + v40, v39, v10);
  *a6 = v51;
  a6[1] = v34;
  a6[2] = v37;
  a6[3] = partial apply for closure #1 in GroupSessionObserver.init<A>(for:queue:);
  a6[4] = v41;
  return result;
}

uint64_t (*default argument 3 of GroupSessionObserver.init(for:queue:provider:filter:)())()
{
  return protocol witness for static GroupActivity._identifiable(by:) in conformance AnyGroupActivity;
}

void GroupSessionObserver.init(for:queue:provider:filter:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
}

uint64_t GroupSessionObserver.register(activitySession:publishQueue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  unint64_t v55 = *(char **)(v7 - 8);
  uint64_t v56 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for AnyGroupActivity(0);
  MEMORY[0x1F4188790](v57);
  uint64_t v11 = (uint64_t *)((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v62 = type metadata accessor for OSSignpostID();
  uint64_t v60 = *(void *)(v62 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v62);
  uint64_t v59 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v61 = (char *)&v51 - v14;
  uint64_t v15 = type metadata accessor for OSSignposter();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v3 + 16);
  uint64_t v72 = 0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 40))(ObjectType, v19);
  uint64_t v22 = a1 + direct field offset for GroupSession.id;
  uint64_t v23 = *(void *)(a3 + 24);
  uint64_t v66 = *(void *)(a3 + 16);
  uint64_t v67 = v23;
  uint64_t v58 = a1;
  uint64_t v68 = a1;
  uint64_t v69 = a2;
  uint64_t v64 = &v72;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t (*)(), char *, uint64_t (*)(uint64_t), char *, uint64_t, _UNKNOWN **))(*(void *)v21 + 160);
  uint64_t v25 = type metadata accessor for GroupSession();
  v24(v22, partial apply for implicit closure #1 in GroupSessionObserver.register(activitySession:publishQueue:), v65, partial apply for closure #1 in GroupSessionObserver.register(activitySession:publishQueue:), v63, v25, &protocol witness table for GroupSession<A>);
  swift_release();
  if (v72)
  {
    if (one-time initialization token for groupSession != -1) {
      swift_once();
    }
    uint64_t v26 = __swift_project_value_buffer(v15, (uint64_t)static Signposts.groupSession);
    unint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16);
    uint64_t v28 = v18;
    uint64_t v54 = v15;
    uint64_t v29 = v27(v18, v26, v15);
    MEMORY[0x1F4188790](v29);
    uint64_t v30 = v57;
    *(&v51 - 2) = (uint8_t *)v57;
    uint64_t v31 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, (void (*)(uint64_t))type metadata accessor for AnyGroupActivity);
    *(&v51 - 1) = (uint8_t *)v31;
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    *(&v51 - 2) = (uint8_t *)v30;
    *(&v51 - 1) = (uint8_t *)v31;
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v34 = v55;
    uint64_t v33 = v56;
    (*((void (**)(char *, char *, uint64_t))v55 + 2))(v9, (char *)v11 + *(int *)(v30 + 28), v56);
    outlined destroy of AnyGroupActivity((uint64_t)v11);
    UUID.uint64Value.getter();
    (*((void (**)(char *, uint64_t))v34 + 1))(v9, v33);
    uint64_t v35 = v61;
    OSSignpostID.init(_:)();
    swift_retain_n();
    uint64_t v36 = OSSignposter.logHandle.getter();
    int v37 = static os_signpost_type_t.event.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      int v53 = v37;
      uint64_t v38 = v60;
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v59, v35, v62);
      uint64_t v39 = swift_slowAlloc();
      uint64_t v56 = v16;
      unint64_t v40 = (uint8_t *)v39;
      uint64_t v41 = swift_slowAlloc();
      uint64_t v52 = v41;
      unint64_t v55 = v28;
      uint64_t v71 = v41;
      *(_DWORD *)unint64_t v40 = 136315138;
      uint64_t v51 = v40 + 4;
      MEMORY[0x1F4188790](v41);
      *(&v51 - 2) = (uint8_t *)v30;
      *(&v51 - 1) = (uint8_t *)v31;
      uint64_t v42 = swift_getKeyPath();
      MEMORY[0x1F4188790](v42);
      *(&v51 - 2) = (uint8_t *)v30;
      *(&v51 - 1) = (uint8_t *)v31;
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v43 = *v11;
      unint64_t v44 = v11[1];
      swift_bridgeObjectRetain();
      outlined destroy of AnyGroupActivity((uint64_t)v11);
      uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v45 = v59;
      os_signpost_id_t v46 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_1A375F000, v36, (os_signpost_type_t)v53, v46, "group-session-received", "%s", v40, 0xCu);
      uint64_t v47 = v52;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v47, -1, -1);
      MEMORY[0x1A624F870](v40, -1, -1);

      uint64_t v48 = *(void (**)(char *, uint64_t))(v38 + 8);
      uint64_t v49 = v62;
      v48(v61, v62);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v54);
      v48(v45, v49);
    }
    else
    {
      swift_release_n();

      (*(void (**)(char *, uint64_t))(v60 + 8))(v35, v62);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v28, v54);
    }
  }
  return v72;
}

uint64_t implicit closure #1 in GroupSessionObserver.register(activitySession:publishQueue:)(uint64_t *a1, void *a2)
{
  type metadata accessor for GroupSession();
  swift_retain();
  uint64_t v4 = specialized GroupSession.__allocating_init(activitySession:publishQueue:)(a1, a2);
  swift_release();
  return v4;
}

uint64_t closure #6 in GroupSessionObserver.receive<A>(subscriber:)(void *a1, uint64_t a2)
{
  char v2 = (*(uint64_t (**)(void))(a2 + 24))(*a1);
  if ((v2 & 1) == 0)
  {
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.client);
    swift_retain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v11 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>);
      uint64_t v8 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v4, v5, "activity session %s is filtered for observer. Dropping", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v7, -1, -1);
      MEMORY[0x1A624F870](v6, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
  return v2 & 1;
}

void closure #8 in GroupSessionObserver.receive<A>(subscriber:)()
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  swift_retain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v5 = GroupSession.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v1, v2, "Observer receiving activity session: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v4, -1, -1);
    MEMORY[0x1A624F870](v3, -1, -1);
  }
  else
  {

    swift_release();
  }
}

void closure #9 in GroupSessionObserver.receive<A>(subscriber:)()
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    os_log_type_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v3 = swift_slowAlloc();
    uint64_t v7 = v3;
    *(_DWORD *)os_log_type_t v2 = 136315138;
    uint64_t v4 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, oslog, v1, "Received completion on observer for activity type: %s", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v3, -1, -1);
    MEMORY[0x1A624F870](v2, -1, -1);
  }
  else
  {
  }
}

uint64_t sub_1A37C8F58()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in GroupSessionObserver.init<A>(for:queue:)()
{
  type metadata accessor for UUID();

  return static UUID.== infix(_:_:)();
}

uint64_t partial apply for closure #6 in GroupSessionObserver.receive<A>(subscriber:)(void *a1)
{
  return closure #6 in GroupSessionObserver.receive<A>(subscriber:)(a1, v1 + 48);
}

uint64_t sub_1A37C907C()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 96, 7);
}

uint64_t partial apply for closure #7 in GroupSessionObserver.receive<A>(subscriber:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(v2 + 88);
  uint64_t v6 = type metadata accessor for GroupSessionObserver();
  uint64_t result = GroupSessionObserver.register(activitySession:publishQueue:)(v4, v5, v6);
  *a2 = result;
  return result;
}

uint64_t sub_1A37C9138()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #8 in GroupSessionObserver.receive<A>(subscriber:)()
{
}

uint64_t sub_1A37C9154()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #9 in GroupSessionObserver.receive<A>(subscriber:)()
{
}

uint64_t sub_1A37C9170()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in GroupSessionObserver<A>()
{
  return MEMORY[0x1E4FBC278];
}

uint64_t initializeWithCopy for GroupSessionObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  id v5 = v3;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GroupSessionObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GroupSessionObserver(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionObserver(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionObserver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in GroupSessionObserver.register(activitySession:publishQueue:)()
{
  return implicit closure #1 in GroupSessionObserver.register(activitySession:publishQueue:)(*(uint64_t **)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t partial apply for closure #1 in GroupSessionObserver.register(activitySession:publishQueue:)(uint64_t a1)
{
  **(void **)(v1 + 16) = a1;
  swift_retain();

  return swift_release();
}

uint64_t sub_1A37C93CC()
{
  return 16;
}

__n128 sub_1A37C93D8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t outlined destroy of AnyGroupActivity(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnyGroupActivity(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t GroupActivity.init(activity:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  MEMORY[0x1F4188790](v8);
  int v37 = (char *)&v33 - v9;
  uint64_t v10 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(uint64_t (**)(void, void, uint64_t, uint64_t))(a3 + 40))(*a1, a1[1], a2, a3))
  {
    uint64_t v33 = v14;
    uint64_t v34 = a4;
    uint64_t v17 = swift_conformsToProtocol2();
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v17) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v19)
    {
      outlined init with copy of AnyGroupActivity((uint64_t)a1, (uint64_t)v13);
      os_log_type_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 8);
      uint64_t v40 = v19;
      uint64_t v41 = v18;
      __swift_allocate_boxed_opaque_existential_1(&v38);
      uint64_t v21 = v42;
      v20(v13, v19, v18);
      if (v21)
      {
        outlined destroy of AnyGroupActivity((uint64_t)a1, type metadata accessor for AnyGroupActivity);
        return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v38);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomGroupActivityDecodable);
        uint64_t v28 = v37;
        int v29 = swift_dynamicCast();
        uint64_t v30 = v33;
        uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
        if (v29)
        {
          v31(v28, 0, 1, a2);
          outlined destroy of AnyGroupActivity((uint64_t)a1, type metadata accessor for AnyGroupActivity);
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(v34, v28, a2);
        }
        else
        {
          v31(v28, 1, 1, a2);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v36);
          uint64_t v38 = 0;
          unint64_t v39 = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          swift_bridgeObjectRelease();
          uint64_t v38 = 0xD00000000000001DLL;
          unint64_t v39 = 0x80000001A3900500;
          swift_getMetatypeMetadata();
          v32._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v32);
          swift_bridgeObjectRelease();
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
    }
    else
    {
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      PropertyListDecoder.init()();
      uint64_t v24 = (void *)((char *)a1 + *(int *)(v10 + 24));
      uint64_t v25 = *v24;
      unint64_t v26 = v24[1];
      outlined copy of Data._Representation(*v24, v26);
      uint64_t v27 = v42;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      outlined destroy of AnyGroupActivity((uint64_t)a1, type metadata accessor for AnyGroupActivity);
      outlined consume of Data._Representation(v25, v26);
      uint64_t result = swift_release();
      if (!v27) {
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v34, v16, a2);
      }
    }
  }
  else
  {
    lazy protocol witness table accessor for type GroupActivityError and conformance GroupActivityError();
    swift_allocError();
    *uint64_t v23 = 0;
    swift_willThrow();
    return outlined destroy of AnyGroupActivity((uint64_t)a1, type metadata accessor for AnyGroupActivity);
  }
  return result;
}

uint64_t outlined init with copy of AnyGroupActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnyGroupActivity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t GroupActivity.eraseToAnyGroupActivity()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v40 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  uint64_t v8 = MEMORY[0x1F4188790](v40);
  uint64_t v38 = (uint64_t *)((char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void *)(a1 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v37 - v14;
  uint64_t v49 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18(v15, v4, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiableGroupActivity);
  int v19 = swift_dynamicCast();
  int v37 = a3;
  uint64_t v41 = v17;
  if (v19)
  {
    outlined init with take of TypedPayloadDecoding(&v43, (uint64_t)v46);
    uint64_t v20 = v47;
    uint64_t v21 = v48;
    __swift_project_boxed_opaque_existential_1(v46, v47);
    IdentifiableGroupActivity.uuid.getter(v20, v21, (uint64_t)v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v46);
  }
  else
  {
    uint64_t v45 = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v43, &demangling cache variable for type metadata for IdentifiableGroupActivity?);
    UUID.init()();
  }
  uint64_t v22 = v38;
  v18(v13, v4, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyStaticGroupActivity);
  if (swift_dynamicCast())
  {
    outlined init with take of TypedPayloadDecoding(&v43, (uint64_t)v46);
    __swift_project_boxed_opaque_existential_1(v46, v47);
    dispatch thunk of Identifiable.id.getter();
    uint64_t v23 = (uint64_t *)*((void *)&v43 + 1);
    uint64_t v38 = (uint64_t *)v43;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v46);
  }
  else
  {
    uint64_t v45 = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v43, &demangling cache variable for type metadata for AnyStaticGroupActivity?);
    uint64_t v38 = 0;
    uint64_t v23 = 0;
  }
  uint64_t v24 = v39;
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  uint64_t v27 = v26;
  *uint64_t v22 = GroupActivity.awaitMetadataValue()(a1, a2);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  uint64_t v28 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v24)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of AnyGroupActivity((uint64_t)v22, type metadata accessor for AnyGroupActivity.MetadataProvider);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v41, v49);
  }
  else
  {
    uint64_t v31 = v28;
    uint64_t v32 = v29;
    swift_release();
    uint64_t v33 = (int *)type metadata accessor for AnyGroupActivity(0);
    uint64_t v34 = v37;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))((char *)v37 + v33[7], v41, v49);
    *uint64_t v34 = v25;
    v34[1] = v27;
    uint64_t result = outlined init with take of AnyGroupActivity.MetadataProvider((uint64_t)v22, (uint64_t)v34 + v33[5]);
    uint64_t v35 = (uint64_t *)((char *)v34 + v33[6]);
    *uint64_t v35 = v31;
    v35[1] = v32;
    uint64_t v36 = (uint64_t **)((char *)v34 + v33[8]);
    *uint64_t v36 = v38;
    v36[1] = v23;
  }
  return result;
}

uint64_t GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2)
{
  return GroupActivity.awaitMetadataValue()(a1, a2, (uint64_t)&unk_1EF71DD98, &demangling cache variable for type metadata for Future<GroupActivityMetadata, Never>);
}

uint64_t outlined destroy of AnyGroupActivity(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of AnyGroupActivity.MetadataProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC15GroupActivities17SystemCoordinatorCSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator?);
  return swift_task_create();
}

BOOL static GroupActivityError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void GroupActivityError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int GroupActivityError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL static GroupActivityActivationResult.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void GroupActivityActivationResult.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int GroupActivityActivationResult.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static GroupActivity.activityIdentifier.getter()
{
  return static GroupActivity.activityIdentifier.getter();
}

{
  id v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t result;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  uint64_t v0 = objc_msgSend(self, sel_mainBundle);
  Swift::UInt v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    v3._uint64_t countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    return v2;
  }
  else
  {
    _StringGuts.grow(_:)(149);
    v6._object = (void *)0x80000001A3900D90;
    v6._uint64_t countAndFlagsBits = 0xD000000000000092;
    String.append(_:)(v6);
    v7._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static GroupActivity._identifiable(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static GroupActivity._identifiable(by:)(a1, a2, a3, a4) & 1;
}

{
  uint64_t v5;
  char v7;

  if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4) == a1 && v5 == a2) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t GroupActivity.provider.getter(uint64_t a1)
{
  return swift_unknownObjectRetain();
}

uint64_t GroupActivity.prepareForActivation(completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v47 = a4;
  uint64_t v50 = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v51 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v14 = *(void *)(a3 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v11);
  uint64_t v48 = v16;
  uint64_t v49 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v40 - v17;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.default);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20(v18, v4, a3);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  int v45 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v44 = a2;
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    uint64_t v53 = v42;
    uint64_t v43 = v5;
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v40 = v23 + 4;
    uint64_t v41 = v23;
    v20(v13, (uint64_t)v18, a3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, a3);
    uint64_t v24 = >> prefix<A>(_:)((uint64_t)v13, a3);
    uint64_t v25 = v10;
    uint64_t v26 = v24;
    unint64_t v28 = v27;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v25);
    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v53);
    uint64_t v5 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a2 = v44;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, a3);
    uint64_t v29 = v41;
    _os_log_impl(&dword_1A375F000, v21, (os_log_type_t)v45, "Application called syncronous activate SPI on %s", v41, 0xCu);
    uint64_t v30 = v42;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v30, -1, -1);
    MEMORY[0x1A624F870](v29, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, a3);
  }

  uint64_t v31 = type metadata accessor for TaskPriority();
  uint64_t v32 = (uint64_t)v51;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v51, 1, 1, v31);
  uint64_t v33 = v49;
  v20(v49, v5, a3);
  unint64_t v34 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v35 = (v48 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = (char *)swift_allocObject();
  *((void *)v36 + 2) = 0;
  *((void *)v36 + 3) = 0;
  uint64_t v37 = v47;
  *((void *)v36 + 4) = a3;
  *((void *)v36 + 5) = v37;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v36[v34], v33, a3);
  uint64_t v38 = &v36[v35];
  *(void *)uint64_t v38 = v50;
  *((void *)v38 + 1) = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v32, (uint64_t)&async function pointer to partial apply for closure #1 in GroupActivity.prepareForActivation(completionHandler:), (uint64_t)v36);
  return swift_release();
}

uint64_t closure #1 in GroupActivity.prepareForActivation(completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[2] = a5;
  v8[3] = a6;
  uint64_t v11 = (void *)swift_task_alloc();
  v8[4] = v11;
  void *v11 = v8;
  v11[1] = closure #1 in GroupActivity.prepareForActivation(completionHandler:);
  return GroupActivity.prepareForActivation()((uint64_t)(v8 + 5), a7, a8);
}

uint64_t closure #1 in GroupActivity.prepareForActivation(completionHandler:)()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in GroupActivity.prepareForActivation(completionHandler:), 0, 0);
}

{
  uint64_t v0;
  void (*v1)(char *);
  uint64_t (*v2)(void);
  char v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = v0;
  uint64_t v1 = *(void (**)(char *))(v0 + 16);
  uint64_t v4 = *(unsigned char *)(v0 + 40);
  v1(&v4);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t GroupActivity.prepareForActivation()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(v3 + 16) = xmmword_1A38F6FA0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_WORD *)(v3 + 80) = 0;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 88) = v7;
  *uint64_t v7 = v3;
  v7[1] = GroupActivity.prepareForActivation();
  return GroupActivity.prepareForActivation(options:)(a1, v3 + 16, a2, a3);
}

uint64_t GroupActivity.prepareForActivation()()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t GroupActivity.prepareForActivation(options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 112) = a4;
  *(void *)(v5 + 120) = v4;
  *(void *)(v5 + 96) = a1;
  *(void *)(v5 + 104) = a3;
  uint64_t v8 = type metadata accessor for Optional();
  *(void *)(v5 + 128) = v8;
  *(void *)(v5 + 136) = *(void *)(v8 - 8);
  *(void *)(v5 + 144) = swift_task_alloc();
  *(void *)(v5 + 152) = *(void *)(a3 - 8);
  *(void *)(v5 + 160) = swift_task_alloc();
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 168) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 184) = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 216) = v10;
  *(_WORD *)(v5 + 82) = *(_WORD *)(a2 + 64);
  return MEMORY[0x1F4188298](GroupActivity.prepareForActivation(options:), 0, 0);
}

uint64_t GroupActivity.prepareForActivation(options:)()
{
  uint64_t v37 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v6(v1, v3, v4);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 152);
  uint64_t v11 = *(void *)(v0 + 160);
  if (v9)
  {
    log = v7;
    uint64_t v12 = *(void *)(v0 + 136);
    uint64_t v13 = *(void *)(v0 + 144);
    uint64_t v29 = *(void *)(v0 + 128);
    uint64_t v14 = *(void *)(v0 + 104);
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v36 = v31;
    *(_DWORD *)uint64_t v15 = 136315138;
    v6(v13, v11, v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v14);
    uint64_t v16 = >> prefix<A>(_:)(v13, v14);
    unint64_t v18 = v17;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v29);
    *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v14);
    uint64_t v7 = log;
    _os_log_impl(&dword_1A375F000, log, v8, "Client did call prepare for activation %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v31, -1, -1);
    MEMORY[0x1A624F870](v15, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 160), *(void *)(v0 + 104));
  }

  __int16 v19 = *(_WORD *)(v0 + 82);
  uint64_t v21 = *(void *)(v0 + 216);
  uint64_t v20 = *(void *)(v0 + 224);
  long long v32 = *(_OWORD *)(v0 + 184);
  *(_OWORD *)loga = *(_OWORD *)(v0 + 200);
  long long v30 = *(_OWORD *)(v0 + 168);
  uint64_t v22 = specialized GroupActivity.provider.getter(*(void *)(v0 + 104));
  uint64_t v24 = v23;
  *(void *)(v0 + 232) = v22;
  uint64_t ObjectType = swift_getObjectType();
  *(_OWORD *)(v0 + 16) = v30;
  *(_OWORD *)(v0 + 32) = v32;
  *(_OWORD *)(v0 + 48) = *(_OWORD *)loga;
  *(void *)(v0 + 64) = v21;
  *(void *)(v0 + 72) = v20;
  *(_WORD *)(v0 + 80) = v19;
  uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 + 48) + **(int **)(v24 + 48));
  swift_unknownObjectRetain();
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v26;
  *uint64_t v26 = v0;
  v26[1] = GroupActivity.prepareForActivation(options:);
  uint64_t v27 = *(void *)(v0 + 96);
  return v33(v27, v0 + 16, ObjectType, v24);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

Swift::Void __swiftcall GroupActivity.activate()()
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  os_log_type_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v9 - 8);
  uint64_t v45 = v9;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v36 - v11;
  uint64_t v13 = *(void *)(v5 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v10);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = v15;
  MEMORY[0x1F4188790](v14);
  unint64_t v18 = (char *)&v36 - v17;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.default);
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v47(v18, v2, v5);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  int v43 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v42 = v4;
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    uint64_t v49 = v40;
    uint64_t v41 = v3;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v38 = v22 + 4;
    uint64_t v39 = v22;
    v47(v12, (uint64_t)v18, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v12, 0, 1, v5);
    uint64_t v23 = >> prefix<A>(_:)((uint64_t)v12, v5);
    os_log_t v37 = v20;
    uint64_t v24 = v16;
    uint64_t v25 = v8;
    uint64_t v26 = v23;
    unint64_t v28 = v27;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v45);
    uint64_t v29 = v26;
    os_log_type_t v8 = v25;
    uint64_t v16 = v24;
    uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, &v49);
    uint64_t v3 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v4 = v42;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v5);
    os_log_t v30 = v37;
    uint64_t v31 = v39;
    _os_log_impl(&dword_1A375F000, v37, (os_log_type_t)v43, "Application called syncronous activate SPI on %s", v39, 0xCu);
    uint64_t v32 = v40;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v32, -1, -1);
    MEMORY[0x1A624F870](v31, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v5);
  }
  uint64_t v33 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v8, 1, 1, v33);
  v47(v16, v3, v5);
  unint64_t v34 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v35 = (char *)swift_allocObject();
  *((void *)v35 + 2) = 0;
  *((void *)v35 + 3) = 0;
  *((void *)v35 + 4) = v5;
  *((void *)v35 + 5) = v4;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v35[v34], v16, v5);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in GroupActivity.activate(), (uint64_t)v35);
  swift_release();
}

uint64_t closure #1 in GroupActivity.activate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v6 + 32) = v9;
  *uint64_t v9 = v6;
  v9[1] = closure #1 in GroupActivity.activate();
  return GroupActivity.activate()(a5, a6);
}

uint64_t closure #1 in GroupActivity.activate()(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 40) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = closure #1 in GroupActivity.activate();
  }
  else
  {
    *(unsigned char *)(v4 + 48) = a1 & 1;
    uint64_t v5 = closure #1 in GroupActivity.activate();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t closure #1 in GroupActivity.activate()()
{
  if (*(unsigned char *)(v0 + 48) == 1)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.default);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      uint64_t v5 = "Session successfully activated";
LABEL_10:
      _os_log_impl(&dword_1A375F000, v2, v3, v5, v4, 2u);
      MEMORY[0x1A624F870](v4, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.default);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      uint64_t v5 = "Failed to activate session";
      goto LABEL_10;
    }
  }

  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  os_log_type_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  os_log_type_t v8 = (void *)v0[5];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[2] = v8;
    uint64_t v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "Failed to activate session error: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v10, -1, -1);
    MEMORY[0x1A624F870](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t GroupActivity.activate()(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  uint64_t v5 = type metadata accessor for UUID();
  v3[28] = v5;
  v3[29] = *(void *)(v5 - 8);
  v3[30] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OSSignpostID();
  v3[31] = v6;
  v3[32] = *(void *)(v6 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OSSignposter();
  v3[35] = v7;
  v3[36] = *(void *)(v7 - 8);
  v3[37] = swift_task_alloc();
  type metadata accessor for AnyGroupActivity(0);
  v3[38] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Optional();
  v3[39] = v8;
  v3[40] = *(void *)(v8 - 8);
  v3[41] = swift_task_alloc();
  v3[42] = *(void *)(a1 - 8);
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupActivity.activate(), 0, 0);
}

uint64_t GroupActivity.activate()()
{
  uint64_t v29 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 392) = __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 400) = v6;
  *(void *)(v0 + 408) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v4, v1);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 384);
  uint64_t v11 = *(void *)(v0 + 336);
  if (v9)
  {
    os_log_type_t type = v8;
    uint64_t v12 = *(void *)(v0 + 328);
    uint64_t v23 = *(void *)(v0 + 320);
    uint64_t v24 = *(void *)(v0 + 312);
    uint64_t v13 = *(void *)(v0 + 200);
    log = v7;
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v28 = v25;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v22 = v13;
    v6(v12, v10, v13);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v12, 0, 1, v13);
    uint64_t v15 = >> prefix<A>(_:)(v12, v13);
    unint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v12, v24);
    *(void *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v18(v10, v22);
    _os_log_impl(&dword_1A375F000, log, type, "Application called async activate on %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v25, -1, -1);
    MEMORY[0x1A624F870](v14, -1, -1);
  }
  else
  {
    unint64_t v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v18(*(void *)(v0 + 384), *(void *)(v0 + 200));
  }
  *(void *)(v0 + 416) = v18;
  v6(*(void *)(v0 + 376), *(void *)(v0 + 216), *(void *)(v0 + 200));
  type metadata accessor for CollaborationActivity();
  if (swift_dynamicCast())
  {
    *(void *)(v0 + 424) = *(void *)(v0 + 136);
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 432) = v19;
    *uint64_t v19 = v0;
    v19[1] = GroupActivity.activate();
    return CollaborationActivity.activate()();
  }
  else
  {
    GroupActivity.eraseToAnyGroupActivity()(*(void *)(v0 + 200), *(void *)(v0 + 208), *(uint64_t **)(v0 + 304));
    os_log_type_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 448) = v21;
    *os_log_type_t v21 = v0;
    v21[1] = GroupActivity.activate();
    return AnyGroupActivity.tuConversationActivityCreateSessionRequest.getter();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  unsigned int v3;
  uint64_t v4;

  swift_release();
  uint64_t v3 = *(unsigned __int8 *)(v0 + 520);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_signpost_type_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  os_signpost_id_t v25;
  uint8_t *v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ObjectType;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  os_signpost_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  uint64_t v51 = v0;
  uint64_t v1 = *(void **)(v0 + 456);
  objc_msgSend(v1, sel_mutableCopy);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for TUMutableConversationActivityCreateSessionRequest();
  swift_dynamicCast();
  uint64_t v2 = *(void **)(v0 + 128);
  *(void *)(v0 + 464) = v2;
  if (one-time initialization token for groupSession != -1) {
    swift_once();
  }
  uint64_t v3 = v0 + 16;
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v6 = *(void *)(v0 + 280);
  os_log_type_t v8 = *(void *)(v0 + 232);
  uint64_t v7 = *(void *)(v0 + 240);
  BOOL v9 = *(void *)(v0 + 224);
  uint64_t v10 = __swift_project_value_buffer(v6, (uint64_t)static Signposts.groupSession);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v10, v6);
  uint64_t v11 = objc_msgSend(v2, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.uint64Value.getter();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  OSSignpostID.init(_:)();
  uint64_t v12 = v2;
  uint64_t v13 = OSSignposter.logHandle.getter();
  uint64_t v14 = static os_signpost_type_t.event.getter();
  uint64_t v15 = OS_os_log.signpostsEnabled.getter();
  unint64_t v17 = *(void *)(v0 + 288);
  unint64_t v16 = *(void *)(v0 + 296);
  uint64_t v19 = *(void *)(v0 + 272);
  unint64_t v18 = *(void *)(v0 + 280);
  if (v15)
  {
    uint64_t v42 = *(void *)(v0 + 264);
    uint64_t v46 = *(void *)(v0 + 248);
    uint64_t v47 = *(void *)(v0 + 256);
    (*(void (**)(void))(v47 + 16))();
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    int v43 = swift_slowAlloc();
    uint64_t v50 = v43;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v44 = v19;
    os_log_type_t v21 = objc_msgSend(v12, sel_activityIdentifier);
    uint64_t v41 = v14;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v18;
    uint64_t v24 = v23;

    *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    uint64_t v25 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1A375F000, v13, v41, v25, "group-session-requested", "%s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v43, -1, -1);
    uint64_t v26 = v20;
    uint64_t v3 = v0 + 16;
    MEMORY[0x1A624F870](v26, -1, -1);

    unint64_t v27 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v27(v44, v46);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v45);
    v27(v42, v46);
  }
  else
  {
    uint64_t v29 = *(void *)(v0 + 248);
    uint64_t v28 = *(void *)(v0 + 256);

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v19, v29);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  (*(void (**)(void, void, void))(v0 + 400))(*(void *)(v0 + 368), *(void *)(v0 + 216), *(void *)(v0 + 200));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollaborationGroupActivity);
  if (swift_dynamicCast())
  {
    outlined init with take of TypedPayloadDecoding((long long *)v3, v0 + 56);
    uint64_t v30 = *(void *)(v0 + 80);
    uint64_t v31 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v30);
    uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v31 + 24) + **(int **)(v31 + 24));
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 472) = v32;
    *uint64_t v32 = v0;
    v32[1] = GroupActivity.activate();
    return v48(v30, v31);
  }
  else
  {
    *(void *)(v3 + 32) = 0;
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v3, &demangling cache variable for type metadata for CollaborationGroupActivity?);
    unint64_t v34 = specialized GroupActivity.provider.getter(*(void *)(v0 + 200));
    uint64_t v36 = v35;
    *(void *)(v0 + 496) = v34;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 + 56) + **(int **)(v36 + 56));
    swift_unknownObjectRetain();
    uint64_t v38 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v38;
    *uint64_t v38 = v0;
    v38[1] = GroupActivity.activate();
    uint64_t v39 = *(void *)(v0 + 464);
    uint64_t v40 = *(void *)(v0 + 304);
    return v49(v40, v39, ObjectType, v36);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = *(void **)(v0 + 488);
  objc_msgSend(*(id *)(v0 + 464), sel_setShare_, v1);

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  uint64_t v2 = specialized GroupActivity.provider.getter(*(void *)(v0 + 200));
  uint64_t v4 = v3;
  *(void *)(v0 + 496) = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 56) + **(int **)(v4 + 56));
  swift_unknownObjectRetain();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v6;
  *uint64_t v6 = v0;
  v6[1] = GroupActivity.activate();
  uint64_t v7 = *(void *)(v0 + 464);
  os_log_type_t v8 = *(void *)(v0 + 304);
  return v10(v8, v7, ObjectType, v4);
}

{
  uint64_t v0;
  void (*v1)(void, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  os_log_type_t v20;
  BOOL v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t, uint64_t);
  os_log_type_t type;
  os_log_type_t typea;
  void *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  uint64_t v52 = v0;
  uint64_t v1 = *(void (**)(void, uint64_t, uint64_t))(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v50 = *(unsigned __int8 *)(v0 + 521);
  if (v50 == 1)
  {
    v1(*(void *)(v0 + 360), v2, v3);
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.default.getter();
    uint64_t v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void **)(v0 + 464);
    os_log_type_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    if (v6)
    {
      os_log_type_t type = v5;
      BOOL v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
      uint64_t v10 = *(void *)(v0 + 360);
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
      uint64_t v11 = *(void *)(v0 + 328);
      uint64_t v12 = *(void *)(v0 + 336);
      uint64_t v13 = *(void *)(v0 + 320);
      uint64_t v39 = v10;
      uint64_t v41 = *(void *)(v0 + 312);
      uint64_t v49 = *(void *)(v0 + 304);
      uint64_t v14 = *(void *)(v0 + 200);
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v51 = v42;
      uint64_t v48 = v7;
      *(_DWORD *)uint64_t v15 = 136315138;
      v9(v11, v10, v14);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, v14);
      unint64_t v16 = >> prefix<A>(_:)(v11, v14);
      unint64_t v18 = v17;
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v41);
      *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v44(v39, v14);
      _os_log_impl(&dword_1A375F000, v4, type, "Application activated activity %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v42, -1, -1);
      uint64_t v19 = v15;
LABEL_6:
      MEMORY[0x1A624F870](v19, -1, -1);

      uint64_t v32 = v49;
      goto LABEL_10;
    }
    uint64_t v33 = *(void *)(v0 + 360);
  }
  else
  {
    v1(*(void *)(v0 + 352), v2, v3);
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v20 = static os_log_type_t.default.getter();
    os_log_type_t v21 = os_log_type_enabled(v4, v20);
    uint64_t v7 = *(void **)(v0 + 464);
    os_log_type_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    if (v21)
    {
      typea = v20;
      uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
      uint64_t v23 = *(void *)(v0 + 352);
      uint64_t v38 = v23;
      uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
      uint64_t v24 = *(void *)(v0 + 328);
      uint64_t v25 = *(void *)(v0 + 336);
      uint64_t v26 = *(void *)(v0 + 320);
      uint64_t v40 = *(void *)(v0 + 312);
      uint64_t v49 = *(void *)(v0 + 304);
      unint64_t v27 = *(void *)(v0 + 200);
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      int v43 = swift_slowAlloc();
      uint64_t v51 = v43;
      uint64_t v48 = v7;
      *(_DWORD *)uint64_t v28 = 136315138;
      v22(v24, v23, v27);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v24, 0, 1, v27);
      uint64_t v29 = >> prefix<A>(_:)(v24, v27);
      uint64_t v31 = v30;
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v40);
      *(void *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v45(v38, v27);
      _os_log_impl(&dword_1A375F000, v4, typea, "Application failed activity activation %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v43, -1, -1);
      uint64_t v19 = v28;
      goto LABEL_6;
    }
    uint64_t v33 = *(void *)(v0 + 352);
  }
  unint64_t v34 = *(void *)(v0 + 304);
  unint64_t v35 = *(void *)(v0 + 200);

  v8(v33, v35);
  uint64_t v32 = v34;
LABEL_10:
  outlined destroy of AnyGroupActivity(v32, type metadata accessor for AnyGroupActivity);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36(v50);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 304);

  outlined destroy of AnyGroupActivity(v1, type metadata accessor for AnyGroupActivity);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

{
  void *v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void);
  uint64_t v32;
  id v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  os_log_type_t type;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;

  uint64_t v40 = v0;
  uint64_t v1 = (void *)v0[64];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[50];
  uint64_t v3 = v0[43];
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[25];
  swift_unknownObjectRelease();
  v2(v3, v4, v5);
  uint64_t v6 = v1;
  uint64_t v7 = v1;
  os_log_type_t v8 = Logger.logObject.getter();
  BOOL v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t type = v9;
    uint64_t v33 = (id)v0[64];
    unint64_t v34 = (void (*)(uint64_t, uint64_t))v0[52];
    uint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t))v0[50];
    uint64_t v12 = v0[42];
    uint64_t v11 = v0[43];
    uint64_t v14 = v0[40];
    uint64_t v13 = v0[41];
    uint64_t v32 = v0[39];
    os_log_t v37 = v0[38];
    uint64_t v38 = (void *)v0[58];
    uint64_t v15 = v0[25];
    unint64_t v16 = swift_slowAlloc();
    unint64_t v35 = swift_slowAlloc();
    uint64_t v39 = v35;
    *(_DWORD *)unint64_t v16 = 136315394;
    v10(v13, v11, v15);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v13, 0, 1, v15);
    unint64_t v17 = >> prefix<A>(_:)(v13, v15);
    uint64_t v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v32);
    v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v34(v11, v15);
    *(_WORD *)(v16 + 12) = 2080;
    v0[19] = v33;
    uint64_t v20 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    os_log_type_t v21 = String.init<A>(reflecting:)();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v8, type, "Application failed activity activation %s with error %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v35, -1, -1);
    MEMORY[0x1A624F870](v16, -1, -1);

    uint64_t v23 = v37;
  }
  else
  {
    uint64_t v24 = (void *)v0[64];
    uint64_t v25 = (void *)v0[58];
    uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[52];
    unint64_t v27 = v0[43];
    uint64_t v28 = v0[38];
    uint64_t v29 = v0[25];

    v26(v27, v29);
    uint64_t v23 = v28;
  }
  outlined destroy of AnyGroupActivity(v23, type metadata accessor for AnyGroupActivity);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(void))v0[1];
  return v30(0);
}

uint64_t GroupActivity.activate()(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 440) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = GroupActivity.activate();
  }
  else
  {
    *(unsigned char *)(v4 + 520) = a1 & 1;
    uint64_t v5 = GroupActivity.activate();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 512) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = GroupActivity.activate();
  }
  else
  {
    swift_unknownObjectRelease();
    *(unsigned char *)(v4 + 521) = a1 & 1;
    uint64_t v5 = GroupActivity.activate();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t GroupActivity.activate()(uint64_t a1)
{
  *(void *)(*(void *)v1 + 456) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](GroupActivity.activate(), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 480) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = GroupActivity.activate();
  }
  else
  {
    *(void *)(v4 + 488) = a1;
    uint64_t v5 = GroupActivity.activate();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a4 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3, a4);
  unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = 0;
  *((void *)v17 + 3) = 0;
  *((void *)v17 + 4) = a4;
  *((void *)v17 + 5) = a5;
  *((void *)v17 + 6) = a1;
  *((void *)v17 + 7) = a2;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v17[v16], (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a4);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in GroupActivity.awaitMetadataValue(), (uint64_t)v17);
  return swift_release();
}

uint64_t closure #1 in closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[2] = a4;
  v8[3] = a5;
  v8[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<GroupActivityMetadata, Never>);
  uint64_t v11 = swift_task_alloc();
  v8[5] = v11;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 + 32) + **(int **)(a8 + 32));
  uint64_t v12 = (void *)swift_task_alloc();
  v8[6] = v12;
  *uint64_t v12 = v8;
  v12[1] = specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue();
  return v14(v11, a7, a8);
}

uint64_t CollaborationGroupActivity.awaitShare()(uint64_t a1, uint64_t a2)
{
  return GroupActivity.awaitMetadataValue()(a1, a2, (uint64_t)&unk_1EF71DE10, &demangling cache variable for type metadata for Future<CKShare, Error>);
}

uint64_t GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a1);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  __swift_instantiateConcreteTypeFromMangledName(a4);
  swift_allocObject();
  return Future.init(_:)();
}

uint64_t closure #1 in CollaborationGroupActivity.awaitShare()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a4 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3, a4);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = 0;
  *((void *)v18 + 4) = a4;
  *((void *)v18 + 5) = a5;
  *((void *)v18 + 6) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TUConversationActivity, Error>) -> ();
  *((void *)v18 + 7) = v15;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v18[v17], (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a4);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in CollaborationGroupActivity.awaitShare(), (uint64_t)v18);
  return swift_release();
}

uint64_t closure #1 in closure #1 in CollaborationGroupActivity.awaitShare()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[2] = a4;
  v8[3] = a5;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a8 + 24) + **(int **)(a8 + 24));
  uint64_t v11 = (void *)swift_task_alloc();
  v8[4] = v11;
  void *v11 = v8;
  v11[1] = closure #1 in closure #1 in CollaborationGroupActivity.awaitShare();
  return v13(a7, a8);
}

uint64_t closure #1 in closure #1 in CollaborationGroupActivity.awaitShare()(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 40) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = closure #1 in closure #1 in CollaborationGroupActivity.awaitShare();
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    uint64_t v5 = closure #1 in closure #1 in CollaborationGroupActivity.awaitShare();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t closure #1 in closure #1 in CollaborationGroupActivity.awaitShare()()
{
  uint64_t v1 = *(void **)(v0 + 48);
  (*(void (**)(void *, void))(v0 + 16))(v1, 0);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  void (*v2)(void *, uint64_t);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = (void (*)(void *, uint64_t))v0[2];
  uint64_t v3 = v1;
  v2(v1, 1);

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t partial apply for closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in GroupActivity.awaitMetadataValue()(a1, a2, (uint64_t (*)(uint64_t, uint64_t, unint64_t))closure #1 in GroupActivity.awaitMetadataValue());
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR15GroupActivities17SystemCoordinatorCSg_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  void *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR15GroupActivities17SystemCoordinatorCSg_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR15GroupActivities17SystemCoordinatorCSg_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t specialized GroupActivity.provider.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v14 - v8;
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5B140]), sel_init);
  unsigned int v11 = objc_msgSend(v10, sel_sharePlayLiteEnabled);

  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, v2, a1);
  if (v11)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, a1);
    type metadata accessor for CollaborationActivity();
    if (swift_dynamicCast())
    {
      swift_release();
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      uint64_t v12 = &static BackgroundGroupSessionManager.shared;
      return *v12;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, a1);
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v12 = (uint64_t *)&static ConversationManager.shared;
  return *v12;
}

uint64_t sub_1A37CEDCC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #1 in GroupActivity.prepareForActivation(completionHandler:)()
{
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  unint64_t v4 = (*(void *)(*(void *)(v3 - 8) + 64)
      + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v0 + v4);
  *(void *)(v1 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  *(_OWORD *)(v5 + 16) = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 32) = v7;
  *uint64_t v7 = v5;
  v7[1] = closure #1 in GroupActivity.prepareForActivation(completionHandler:);
  return GroupActivity.prepareForActivation()(v5 + 40, v3, v2);
}

uint64_t sub_1A37CF014()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in GroupActivity.activate()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[4] = v5;
  *uint64_t v5 = v4;
  v5[1] = closure #1 in GroupActivity.activate();
  return GroupActivity.activate()(v2, v3);
}

unint64_t type metadata accessor for TUMutableConversationActivityCreateSessionRequest()
{
  unint64_t result = lazy cache variable for type metadata for TUMutableConversationActivityCreateSessionRequest;
  if (!lazy cache variable for type metadata for TUMutableConversationActivityCreateSessionRequest)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUMutableConversationActivityCreateSessionRequest);
  }
  return result;
}

uint64_t objectdestroyTm_1()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t partial apply for closure #1 in CollaborationGroupActivity.awaitShare()(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in GroupActivity.awaitMetadataValue()(a1, a2, (uint64_t (*)(uint64_t, uint64_t, unint64_t))closure #1 in CollaborationGroupActivity.awaitShare());
}

uint64_t partial apply for closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  return a3(a1, a2, v3+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80)));
}

unint64_t lazy protocol witness table accessor for type GroupActivityActivationResult and conformance GroupActivityActivationResult()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupActivityActivationResult and conformance GroupActivityActivationResult;
  if (!lazy protocol witness table cache variable for type GroupActivityActivationResult and conformance GroupActivityActivationResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityActivationResult and conformance GroupActivityActivationResult);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for GroupActivityError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A37CF49CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupActivityError()
{
  return &type metadata for GroupActivityError;
}

uint64_t getEnumTagSinglePayload for GroupActivityActivationResult(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GroupActivityActivationResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A37CF630);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupActivityActivationResult()
{
  return &type metadata for GroupActivityActivationResult;
}

uint64_t dispatch thunk of static GroupActivity.activityIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of GroupActivity.metadata.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 32) + **(int **)(a3 + 32));
  BOOL v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *BOOL v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of static GroupActivity._identifiable(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of CustomGroupActivityDecodable.init(activity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_1A37CF7C0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in CollaborationGroupActivity.awaitShare()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  *(_OWORD *)(v4 + 16) = v5;
  int v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
  unsigned int v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 32) = v6;
  *unsigned int v6 = v4;
  v6[1] = closure #1 in closure #1 in CollaborationGroupActivity.awaitShare();
  return v8(v2, v3);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  unsigned int v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR15GroupActivities17SystemCoordinatorCSg_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  unsigned int v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR15GroupActivities17SystemCoordinatorCSg_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR15GroupActivities17SystemCoordinatorCSg_TG5Tu);
  return v6(a1, v4);
}

uint64_t objectdestroy_34Tm()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = (uint64_t)v1
      + ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80));
  unsigned int v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in GroupActivity.awaitMetadataValue()(a1, v6, v7, v8, v9, v10, v4, v5);
}

uint64_t PersonalGroupSessionProvider.id.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PersonalGroupSessionProvider.id.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PersonalGroupSessionProvider.id.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t PersonalGroupSessionProvider.state.getter()
{
  return swift_retain();
}

uint64_t PersonalGroupSessionProvider.state.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*PersonalGroupSessionProvider.state.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t PersonalGroupSessionProvider.members.getter()
{
  return swift_retain();
}

uint64_t PersonalGroupSessionProvider.members.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t (*PersonalGroupSessionProvider.members.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t PersonalGroupSessionProvider.presenceInfo.getter()
{
  return swift_retain();
}

uint64_t PersonalGroupSessionProvider.presenceInfo.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*PersonalGroupSessionProvider.presenceInfo.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t PersonalGroupSessionProvider.activity.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 128));
}

uint64_t PersonalGroupSessionProvider.localMember.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Member?(v1 + *(void *)(*(void *)v1 + 136), a1);
}

uint64_t PersonalGroupSessionProvider.isCrossAccount.getter()
{
  return 0;
}

uint64_t PersonalGroupSessionProvider.__allocating_init(id:activity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  PersonalGroupSessionProvider.init(id:activity:)(a1, a2, a3);
  return v6;
}

void *PersonalGroupSessionProvider.init(id:activity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<GroupSessionProviderState, Never>);
  swift_allocObject();
  v3[4] = CurrentValueSubject.init(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
  swift_allocObject();
  v3[5] = CurrentValueSubject.init(_:)();
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v3[6] = CurrentValueSubject.init(_:)();
  uint64_t v9 = (void *)((char *)v3 + *(void *)(*v3 + 136));
  v9[3] = type metadata accessor for LocalAccountMember();
  v9[4] = lazy protocol witness table accessor for type LocalAccountMember and conformance LocalAccountMember();
  __swift_allocate_boxed_opaque_existential_1(v9);
  UUID.init()();
  *((unsigned char *)v4 + *(void *)(*v4 + 144)) = 0;
  v4[2] = a1;
  v4[3] = a2;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v8 + 80) - 8) + 32))((char *)v4 + *(void *)(*v4 + 128), a3);
  return v4;
}

uint64_t *PersonalGroupSessionProvider.deinit()
{
  uint64_t v1 = *v0;
  if (one-time initialization token for personalGroupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.personalGroupSessionProvider);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v10 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v7 = (*(uint64_t (**)(void))(*v0 + 256))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v3, v4, "%s Deinit'd", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v6, -1, -1);
    MEMORY[0x1A624F870](v5, -1, -1);
  }
  else
  {

    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 128));
  outlined destroy of Member?((uint64_t)v0 + *(void *)(*v0 + 136));
  return v0;
}

uint64_t PersonalGroupSessionProvider.__deallocating_deinit()
{
  PersonalGroupSessionProvider.deinit();

  return swift_deallocClassInstance();
}

uint64_t PersonalGroupSessionProvider.description.getter()
{
  _StringGuts.grow(_:)(50);
  v1._object = (void *)0x80000001A3900E50;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x203A666C6573283ELL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._uint64_t countAndFlagsBits = 0x203A6469202CLL;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v0 + 152))();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t protocol witness for PresenceGroupSessionProvider.presenceInfo.getter in conformance PersonalGroupSessionProvider<A>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonalGroupSessionProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

uint64_t protocol witness for GroupSessionProvider.state.getter in conformance PersonalGroupSessionProvider<A>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t protocol witness for GroupSessionProvider.members.getter in conformance PersonalGroupSessionProvider<A>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t protocol witness for GroupSessionProvider.isCrossAccount.getter in conformance PersonalGroupSessionProvider<A>()
{
  return 0;
}

uint64_t protocol witness for Identifiable.id.getter in conformance PersonalGroupSessionProvider<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 152))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalAccountMember and conformance LocalAccountMember()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalAccountMember and conformance LocalAccountMember;
  if (!lazy protocol witness table cache variable for type LocalAccountMember and conformance LocalAccountMember)
  {
    type metadata accessor for LocalAccountMember();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalAccountMember and conformance LocalAccountMember);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PersonalGroupSessionProvider<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for GroupSessionProvider.ActivityType : IdentifiableGroupActivity in PersonalGroupSessionProvider<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

uint64_t associated type witness table accessor for Identifiable.ID : Decodable in PersonalGroupSessionProvider<A>()
{
  return MEMORY[0x1E4FBB1D8];
}

uint64_t associated type witness table accessor for Identifiable.ID : Encodable in PersonalGroupSessionProvider<A>()
{
  return MEMORY[0x1E4FBB1A8];
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in PersonalGroupSessionProvider<A>()
{
  return MEMORY[0x1E4FBB1B0];
}

uint64_t sub_1A37D0940@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A37D098C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 160);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1A37D09F4()
{
  return 16;
}

__n128 sub_1A37D0A00(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A37D0A0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37D0A58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A37D0AAC()
{
  return 16;
}

__n128 sub_1A37D0AB8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A37D0AC4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37D0B10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 208);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A37D0B64()
{
  return 16;
}

__n128 sub_1A37D0B70(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A37D0B7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37D0BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 232);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A37D0C1C()
{
  return 16;
}

__n128 sub_1A37D0C28(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for PersonalGroupSessionProvider()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for PersonalGroupSessionProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for PersonalGroupSessionProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PersonalGroupSessionProvider);
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.id.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.id.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.state.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.state.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.members.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.members.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.presenceInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.presenceInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.presenceInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.__allocating_init(id:activity:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

BOOL static SendReliability.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SendReliability.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int SendReliability.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type SendReliability and conformance SendReliability()
{
  unint64_t result = lazy protocol witness table cache variable for type SendReliability and conformance SendReliability;
  if (!lazy protocol witness table cache variable for type SendReliability and conformance SendReliability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SendReliability and conformance SendReliability);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SendReliability(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A37D10C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SendReliability()
{
  return &type metadata for SendReliability;
}

void *GroupActivityTransferRepresentation.init<A>(exporting:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  unint64_t result = (void *)swift_allocObject();
  result[2] = a3;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  result[6] = a1;
  result[7] = a2;
  *a7 = &async function pointer to partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  a7[1] = result;
  return result;
}

uint64_t closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a5;
  v7[9] = a7;
  void v7[6] = a1;
  v7[7] = a4;
  uint64_t v12 = type metadata accessor for Optional();
  v7[10] = v12;
  v7[11] = *(void *)(v12 - 8);
  v7[12] = swift_task_alloc();
  v7[13] = *(void *)(a4 - 8);
  v7[14] = swift_task_alloc();
  v7[15] = *(void *)(a5 - 8);
  uint64_t v13 = swift_task_alloc();
  v7[16] = v13;
  type metadata accessor for AnyGroupActivity(0);
  v7[17] = swift_task_alloc();
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  uint64_t v14 = (void *)swift_task_alloc();
  v7[18] = v14;
  *uint64_t v14 = v7;
  v14[1] = closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  return v16(v13, a1);
}

uint64_t closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  }
  else {
    uint64_t v2 = closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t (*v30)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *log;
  uint64_t v36[2];
  uint64_t v37;
  uint64_t v38;

  os_log_t v37 = v0;
  uint64_t v1 = *(void **)(v0 + 152);
  GroupActivity.eraseToAnyGroupActivity()(*(void *)(v0 + 64), *(void *)(v0 + 72), *(uint64_t **)(v0 + 136));
  if (v1)
  {
    uint64_t v2 = v1;
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 64));
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 104);
    int v3 = *(void *)(v0 + 112);
    unsigned int v6 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 56);
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v8(v3, v6, v5);
    uint64_t v9 = v2;
    uint64_t v10 = v2;
    unsigned int v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.error.getter();
    uint64_t v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void *)(v0 + 104);
    uint64_t v15 = *(void *)(v0 + 112);
    if (v13)
    {
      log = v11;
      uint64_t v16 = *(void *)(v0 + 88);
      uint64_t v17 = *(void *)(v0 + 96);
      uint64_t v33 = *(void *)(v0 + 80);
      uint64_t v32 = *(void *)(v0 + 56);
      unint64_t v18 = swift_slowAlloc();
      unint64_t v34 = swift_slowAlloc();
      v36[0] = v34;
      *(_DWORD *)unint64_t v18 = 136315394;
      v8(v17, v15, v32);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v32);
      uint64_t v19 = >> prefix<A>(_:)(v17, v32);
      uint64_t v20 = v12;
      uint64_t v22 = v21;
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v33);
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v22, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v32);
      *(_WORD *)(v18 + 12) = 2080;
      *(void *)(v0 + 24) = v2;
      uint64_t v23 = v2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v24 = String.init<A>(reflecting:)();
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      unsigned int v11 = log;
      _os_log_impl(&dword_1A375F000, log, v20, "Failed to export activity from item: %s error: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v34, -1, -1);
      MEMORY[0x1A624F870](v18, -1, -1);
    }
    else
    {
      (*(void (**)(void, void))(v14 + 8))(*(void *)(v0 + 112), *(void *)(v0 + 56));
    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
    return v30();
  }
  else
  {
    uint64_t v26 = *(void *)(v0 + 136);
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 64));
    unint64_t v27 = swift_task_alloc();
    *(void *)(v0 + 160) = v27;
    *(void *)(v27 + 16) = v26;
    uint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v28;
    uint64_t v29 = type metadata accessor for TUConversationActivity();
    *uint64_t v28 = v0;
    v28[1] = closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
    return MEMORY[0x1F4188160](v0 + 40, 0, 0, 0xD000000000000010, 0x80000001A3900EC0, partial apply for closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:), v27, v29);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  }
  else {
    uint64_t v2 = closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  outlined destroy of AnyGroupActivity(v0[17]);
  uint64_t v1 = v0[5];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *log;
  uint64_t v31[2];
  void *v32;
  uint64_t v33;

  uint64_t v32 = v0;
  uint64_t v1 = (void *)v0[19];
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  int v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  unsigned int v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v2, v5, v4);
  unint64_t v8 = v1;
  uint64_t v9 = v1;
  uint64_t v10 = Logger.logObject.getter();
  unsigned int v11 = static os_log_type_t.error.getter();
  uint64_t v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[13];
  uint64_t v14 = v0[14];
  if (v12)
  {
    log = v10;
    uint64_t v15 = v0[11];
    uint64_t v16 = v0[12];
    uint64_t v28 = v0[10];
    unint64_t v27 = v0[7];
    uint64_t v17 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    v31[0] = v29;
    *(_DWORD *)uint64_t v17 = 136315394;
    v7(v16, v14, v27);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v27);
    unint64_t v18 = >> prefix<A>(_:)(v16, v27);
    uint64_t v19 = v11;
    os_log_type_t v21 = v20;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v28);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v21, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v27);
    *(_WORD *)(v17 + 12) = 2080;
    v0[3] = v1;
    uint64_t v22 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v23 = String.init<A>(reflecting:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    uint64_t v10 = log;
    _os_log_impl(&dword_1A375F000, log, v19, "Failed to export activity from item: %s error: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v29, -1, -1);
    MEMORY[0x1A624F870](v17, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v13 + 8))(v0[14], v0[7]);
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v27;
  os_log_t log;
  NSObject *loga;
  os_log_type_t type;
  uint64_t v31;
  uint64_t v32[2];
  void *v33;
  uint64_t v34;

  uint64_t v33 = v0;
  outlined destroy of AnyGroupActivity(v0[17]);
  uint64_t v1 = (void *)v0[22];
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  int v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  unsigned int v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  uint64_t v7 = *(NSObject **)(v3 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v2, v5, v4);
  unint64_t v8 = v1;
  uint64_t v9 = v1;
  uint64_t v10 = Logger.logObject.getter();
  unsigned int v11 = static os_log_type_t.error.getter();
  uint64_t v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[13];
  uint64_t v14 = v0[14];
  if (v12)
  {
    uint64_t v15 = v0[11];
    uint64_t v16 = v0[12];
    unint64_t v27 = v0[10];
    log = v7;
    uint64_t v17 = v0[7];
    os_log_type_t type = v11;
    unint64_t v18 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    v32[0] = v31;
    *(_DWORD *)unint64_t v18 = 136315394;
    ((void (*)(uint64_t, uint64_t, uint64_t))log)(v16, v14, v17);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v17);
    uint64_t v19 = >> prefix<A>(_:)(v16, v17);
    loga = v10;
    os_log_type_t v21 = v20;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v27);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v17);
    *(_WORD *)(v18 + 12) = 2080;
    v0[3] = v1;
    uint64_t v22 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v23 = String.init<A>(reflecting:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    uint64_t v10 = loga;
    _os_log_impl(&dword_1A375F000, loga, type, "Failed to export activity from item: %s error: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v31, -1, -1);
    MEMORY[0x1A624F870](v18, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v13 + 8))(v0[14], v0[7]);
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_1A37D2224()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = (int *)v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  return closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(a1, v9, v8, v4, v5, v6, v7);
}

{
  uint64_t *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  swift_task_dealloc();
  int v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8 - 8);
  outlined init with copy of AnyGroupActivity(a2, (uint64_t)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  outlined init with take of AnyGroupActivity((uint64_t)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
  swift_allocObject();
  uint64_t v22 = Future.init(_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v7, a1, v4);
  unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
  v16(v15 + v14, v7, v4);
  v13(v7, v20, v4);
  uint64_t v17 = swift_allocObject();
  v16(v17 + v14, v7, v4);
  lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>();
  Publisher.sinkOnce(_:onError:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(id *a1)
{
  id v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t closure #2 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(id *a1)
{
  id v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t GroupActivityTransferRepresentation.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for UTType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = type metadata accessor for DataRepresentation();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  unint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = *v2;
  uint64_t v18 = v2[1];
  uint64_t v24 = v17;
  if (one-time initialization token for _groupActivity != -1) {
    swift_once();
  }
  uint64_t v19 = __swift_project_value_buffer(v4, (uint64_t)static UTType._groupActivity);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v19, v4);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = v8;
  uint64_t v20[3] = v9;
  v20[4] = v24;
  v20[5] = v18;
  swift_retain();
  DataRepresentation.init(exportedContentType:exporting:)();
  swift_getWitnessTable();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v21(v16, v14, v10);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v14, v10);
  v21(v25, v16, v10);
  return ((uint64_t (*)(char *, uint64_t))v22)(v16, v10);
}

uint64_t closure #1 in GroupActivityTransferRepresentation.body.getter(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = closure #1 in GroupActivityTransferRepresentation.body.getter;
  return v6(a1);
}

uint64_t closure #1 in GroupActivityTransferRepresentation.body.getter(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 32) = a1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return MEMORY[0x1F4188298](closure #1 in GroupActivityTransferRepresentation.body.getter, 0, 0);
  }
}

uint64_t closure #1 in GroupActivityTransferRepresentation.body.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = self;
  *(void *)(v0 + 16) = 0;
  id v3 = objc_msgSend(v2, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v1, 1, v0 + 16);
  id v4 = *(id *)(v0 + 16);
  uint64_t v5 = *(void **)(v0 + 32);
  if (v3)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v9(v6, v8);
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t static TransferRepresentationBuilder.buildExpression<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1);
}

uint64_t protocol witness for static TransferRepresentation._decomposedTransferRepresentation(_:inputs:) in conformance GroupActivityTransferRepresentation<A>()
{
  return MEMORY[0x1F40DFA90]();
}

void *static GroupActivity<>.transferRepresentation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  unint64_t result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a1;
  result[4] = a2;
  result[5] = a3;
  result[6] = &async function pointer to partial apply for closure #1 in static GroupActivity<>.transferRepresentation.getter;
  result[7] = v8;
  *a4 = &async function pointer to partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  a4[1] = result;
  return result;
}

uint64_t closure #1 in static GroupActivity<>.transferRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in static GroupActivity<>.transferRepresentation.getter, 0, 0);
}

uint64_t closure #1 in static GroupActivity<>.transferRepresentation.getter()
{
  (*(void (**)(void, void))(*(void *)(v0[4] - 8) + 16))(v0[2], v0[3]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1A37D2FB8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in GroupActivityTransferRepresentation.body.getter(uint64_t a1)
{
  id v4 = *(int **)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.body.getter;
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v5[3] = v6;
  *uint64_t v6 = v5;
  v6[1] = closure #1 in GroupActivityTransferRepresentation.body.getter;
  return v8(a1);
}

uint64_t partial apply for closure #1 in GroupActivityTransferRepresentation.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t sub_1A37D3220()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in static GroupActivity<>.transferRepresentation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[3] = a2;
  v7[4] = v6;
  v7[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  void v7[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in static GroupActivity<>.transferRepresentation.getter, 0, 0);
}

uint64_t associated type witness table accessor for TransferRepresentation.Body : TransferRepresentation in GroupActivityTransferRepresentation<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TransferRepresentation.Item : Transferable in GroupActivityTransferRepresentation<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

void *initializeBufferWithCopyOfBuffer for GroupActivityTransferRepresentation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for GroupActivityTransferRepresentation()
{
  return swift_release();
}

void *assignWithCopy for GroupActivityTransferRepresentation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for GroupActivityTransferRepresentation(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupActivityTransferRepresentation(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupActivityTransferRepresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for GroupActivityTransferRepresentation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1A37D347C(void *a1)
{
  return get_witness_table_16CoreTransferable0B0RzlAA18DataRepresentationVyxGAA08TransferD0HPyHCTm(a1, MEMORY[0x1E4F24908]);
}

uint64_t sub_1A37D34A8(void *a1)
{
  return get_witness_table_16CoreTransferable0B0RzlAA18DataRepresentationVyxGAA08TransferD0HPyHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for GroupActivityTransferRepresentation);
}

uint64_t get_witness_table_16CoreTransferable0B0RzlAA18DataRepresentationVyxGAA08TransferD0HPyHCTm(void *a1, void (*a2)(uint64_t, void, void))
{
  a2(255, *a1, a1[1]);

  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1)
{
  return closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_1A37D3528()
{
  uint64_t v1 = (int *)type metadata accessor for AnyGroupActivity(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[5];
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    uint64_t v18 = v4;
    uint64_t v19 = v0;
    uint64_t v7 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    uint64_t v8 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v9 = v6 + v8[8];
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (!v12(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
    uint64_t v13 = v6 + v8[11];
    if (!v12(v13, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = (v2 + 16) & ~v2;
    uint64_t v0 = v19;
    uint64_t v4 = v18;
  }
  uint64_t v14 = v3 + v4;
  outlined consume of Data._Representation(*(void *)(v5 + v1[6]), *(void *)(v5 + v1[6] + 8));
  uint64_t v15 = v5 + v1[7];
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v14, v2 | 7);
}

uint64_t outlined init with take of AnyGroupActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnyGroupActivity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(a1, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:));
}

uint64_t objectdestroy_21Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(a1, (uint64_t (*)(uint64_t, uint64_t))closure #2 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>)
                 - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

unint64_t lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Future<TUConversationActivity, Error> and conformance Future<A, B>;
  if (!lazy protocol witness table cache variable for type Future<TUConversationActivity, Error> and conformance Future<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Future<TUConversationActivity, Error> and conformance Future<A, B>);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15GroupActivities015SpatialTemplateB0_pG_AF08AbsolutefG6OutputVACOs5NeverOTg504_s15d12Activities15fg28PAAE6outputAA0cD16Preferencei24VABOvgAA08AbsolutecdG0V7B66OAA0cdI0_pcfu_33_47a87628ece042fb50ac1547dc998f80AaL_pAKTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v26 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v26;
    uint64_t v4 = (void *)(a1 + 32);
    do
    {
      uint64_t v5 = v4[3];
      uint64_t v6 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v5);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v24, v5, v6);
      uint64_t v7 = v24[0];
      uint64_t v8 = v24[4];
      uint64_t v9 = v24[5];
      uint64_t v22 = v24[3];
      uint64_t v23 = v24[1];
      uint64_t v10 = v24[6];
      uint64_t v20 = v24[8];
      uint64_t v21 = v24[2];
      uint64_t v18 = v24[10];
      uint64_t v19 = v24[9];
      uint64_t v17 = v24[11];
      char v11 = v25;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v26 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v26;
      }
      unint64_t v14 = *(void *)(v2 + 16);
      unint64_t v13 = *(void *)(v2 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v2 = v26;
      }
      *(void *)(v2 + 16) = v14 + 1;
      uint64_t v15 = v2 + 112 * v14;
      *(void *)(v15 + 32) = v7;
      *(void *)(v15 + 40) = v23;
      *(void *)(v15 + 64) = v8;
      *(void *)(v15 + 72) = v9;
      *(void *)(v15 + 48) = v21;
      *(void *)(v15 + 56) = v22;
      *(void *)(v15 + 80) = v10;
      *(void *)(v15 + 96) = v20;
      *(void *)(v15 + 104) = v19;
      *(void *)(v15 + 112) = v18;
      *(void *)(v15 + 120) = v17;
      v4 += 5;
      *(unsigned char *)(v15 + 128) = v11;
      --v1;
    }
    while (v1);
  }
  return v2;
}

double SpatialTemplate.configuration.getter@<D0>(uint64_t a1@<X8>)
{
  return SpatialTemplate.configuration.getter(a1);
}

{
  double result;

  *(void *)(a1 + 32) = 0;
  unint64_t result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t SpatialTemplateConfiguration.init(defaultInitiatorRole:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of SpatialTemplateRole?(a1, a2);
}

uint64_t outlined init with take of SpatialTemplateRole?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTemplateRole?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SpatialTemplateConfiguration.defaultInitiatorRole.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of URL?(v1, a1, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

uint64_t SpatialTemplateConfiguration.hash(into:)()
{
  outlined init with copy of URL?(v0, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    uint64_t v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    long long v2 = v5;
    long long v3 = v6;
    uint64_t v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int SpatialTemplateConfiguration.hashValue.getter()
{
  Hasher.init(_seed:)();
  outlined init with copy of URL?(v0, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    uint64_t v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    long long v2 = v5;
    long long v3 = v6;
    uint64_t v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SpatialTemplateConfiguration()
{
  outlined init with copy of URL?(v0, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    uint64_t v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    long long v2 = v5;
    long long v3 = v6;
    uint64_t v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialTemplateConfiguration()
{
  Hasher.init(_seed:)();
  outlined init with copy of URL?(v0, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    uint64_t v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    long long v2 = v5;
    long long v3 = v6;
    uint64_t v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

uint64_t SpatialTemplate.output.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  if (swift_dynamicCast())
  {
    long long v19 = v16;
    long long v20 = v17;
    long long v21 = v18;
    PresentationSpatialTemplate.customOutput.getter(a3);
    return outlined destroy of PresentationSpatialTemplate((uint64_t)&v19);
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v16, &demangling cache variable for type metadata for PresentationSpatialTemplate?);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
    uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15GroupActivities015SpatialTemplateB0_pG_AF08AbsolutefG6OutputVACOs5NeverOTg504_s15d12Activities15fg28PAAE6outputAA0cD16Preferencei24VABOvgAA08AbsolutecdG0V7B66OAA0cdI0_pcfu_33_47a87628ece042fb50ac1547dc998f80AaL_pAKTf3nnnpk_nTf1cn_n(v10);
    swift_bridgeObjectRelease();
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a2 + 8))(&v16, a1, a2);
    outlined init with take of SpatialTemplateRole?((uint64_t)&v16, (uint64_t)&v19);
    uint64_t v12 = *((void *)&v20 + 1);
    if (*((void *)&v20 + 1))
    {
      uint64_t v13 = v21;
      __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
      SpatialTemplateRole.output.getter(v13, v15);
      uint64_t v12 = v15[0];
      uint64_t v14 = v15[1];
      uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
    }
    else
    {
      uint64_t result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v19, &demangling cache variable for type metadata for SpatialTemplateRole?);
      uint64_t v14 = 0;
    }
    *(void *)a3 = v11;
    *(void *)(a3 + 8) = v12;
    *(void *)(a3 + 16) = v14;
    *(unsigned char *)(a3 + 24) = 0;
  }
  return result;
}

uint64_t specialized static SpatialTemplateConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of URL?(a1, (uint64_t)&v9, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (v10)
  {
    outlined init with take of TypedPayloadDecoding(&v9, (uint64_t)v16);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v9, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v16, 0, sizeof(v16));
    uint64_t v17 = 0;
  }
  outlined init with copy of URL?(a2, (uint64_t)&v9, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (v10)
  {
    outlined init with take of TypedPayloadDecoding(&v9, (uint64_t)v14);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v9, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v14, 0, sizeof(v14));
    uint64_t v15 = 0;
  }
  uint64_t v3 = &demangling cache variable for type metadata for AnySpatialTemplateRole?;
  outlined init with copy of URL?((uint64_t)v16, (uint64_t)&v9, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined init with copy of URL?((uint64_t)v14, (uint64_t)&v11, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (v10)
  {
    outlined init with copy of URL?((uint64_t)&v9, (uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    if (*((void *)&v12 + 1))
    {
      v6[0] = v11;
      v6[1] = v12;
      uint64_t v7 = v13;
      char v4 = specialized static AnySpatialTemplateRole.== infix(_:_:)((uint64_t)v8, (uint64_t)v6);
      outlined destroy of AnySpatialTemplateRole((uint64_t)v6);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v14, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of AnySpatialTemplateRole((uint64_t)v8);
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v14, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of AnySpatialTemplateRole((uint64_t)v8);
      char v4 = 0;
      uint64_t v3 = &demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?);
    }
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v14, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    if (*((void *)&v12 + 1))
    {
      uint64_t v3 = &demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?);
      char v4 = 0;
    }
    else
    {
      char v4 = -1;
    }
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v9, v3);
  return v4 & 1;
}

uint64_t outlined destroy of AnySpatialTemplateRole(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of PresentationSpatialTemplate(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplateConfiguration and conformance SpatialTemplateConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialTemplateConfiguration and conformance SpatialTemplateConfiguration;
  if (!lazy protocol witness table cache variable for type SpatialTemplateConfiguration and conformance SpatialTemplateConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateConfiguration and conformance SpatialTemplateConfiguration);
  }
  return result;
}

uint64_t dispatch thunk of SpatialTemplate.configuration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SpatialTemplate.elements.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t destroy for SpatialTemplateConfiguration(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for SpatialTemplateConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for SpatialTemplateConfiguration(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        long long v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for SpatialTemplateConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialTemplateConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialTemplateConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplateConfiguration()
{
  return &type metadata for SpatialTemplateConfiguration;
}

uint64_t AttachmentLedgerTopic.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

id AttachmentLedgerTopic.lock.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t AttachmentLedgerTopic.topic.didset(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of URL?(a1, (uint64_t)v39, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  swift_retain_n();
  int v9 = Logger.logObject.getter();
  int v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, (os_log_type_t)v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v38 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    outlined init with copy of URL?((uint64_t)v39, (uint64_t)&v36, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    int v31 = v10;
    uint64_t v30 = v12;
    if (v37)
    {
      outlined init with take of TypedPayloadDecoding(&v36, (uint64_t)&v34);
      outlined init with copy of AudioSessionAssertionManager((uint64_t)&v34, (uint64_t)v33);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
      uint64_t v13 = String.init<A>(reflecting:)();
      unint64_t v15 = v14;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v34);
    }
    else
    {
      uint64_t v13 = 7104878;
      unint64_t v15 = 0xE300000000000000;
    }
    *(void *)&long long v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v39, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    *(_WORD *)(v11 + 12) = 2080;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v4);
    CurrentSubject.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    outlined init with copy of URL?((uint64_t)&v36, (uint64_t)&v34, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    if (v35)
    {
      outlined init with take of TypedPayloadDecoding(&v34, (uint64_t)v33);
      outlined init with copy of AudioSessionAssertionManager((uint64_t)v33, (uint64_t)v32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
      uint64_t v16 = String.init<A>(reflecting:)();
      unint64_t v18 = v17;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
    }
    else
    {
      uint64_t v16 = 7104878;
      unint64_t v18 = 0xE300000000000000;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v36, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    *(void *)&long long v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v9, (os_log_type_t)v31, "Updating topic from %s -> %s", (uint8_t *)v11, 0x16u);
    uint64_t v19 = v30;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v19, -1, -1);
    MEMORY[0x1A624F870](v11, -1, -1);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v39, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    swift_release_n();
  }
  long long v20 = (void *)(v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_pluginTopicCancellables);
  swift_beginAccess();
  *long long v20 = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v4);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v21 = v40;
  if (!v40) {
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v39, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  }
  uint64_t v22 = v41;
  uint64_t v23 = __swift_project_boxed_opaque_existential_1(v39, v40);
  uint64_t v24 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v24 + 16))(v26);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v39, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v21);
  *(void *)&long long v34 = v27;
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[Attachment], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[Attachment], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[Attachment], Never>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in AttachmentLedgerTopic.topic.didset()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void (**)(uint64_t))(*(void *)result + 376);
    uint64_t v2 = swift_bridgeObjectRetain();
    v1(v2);
    return swift_release();
  }
  return result;
}

uint64_t AttachmentLedgerTopic.state.getter()
{
  uint64_t v1 = *(void **)(v0 + 32);
  objc_msgSend(v1, sel_lock);
  dispatch thunk of StateMachine.currentState.getter();
  objc_msgSend(v1, sel_unlock);
  return v3;
}

uint64_t AttachmentLedgerTopic.dataCryptor.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v19 = v2;
    uint64_t v10 = v9;
    uint64_t v18 = swift_slowAlloc();
    v21[0] = v18;
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v11 = _typeName(_:qualified:)();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v14 = *(void *)(v1 + 16);
    unint64_t v13 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v7, v8, "Updating %s dataCryptor, topic=%s", (uint8_t *)v10, 0x16u);
    uint64_t v15 = v18;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v15, -1, -1);
    uint64_t v16 = v10;
    uint64_t v2 = v19;
    MEMORY[0x1A624F870](v16, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v2);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v21, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
}

uint64_t AttachmentLedgerTopic.dataCryptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_dataCryptor;
  swift_beginAccess();
  return outlined init with copy of URL?(v3, a1, &demangling cache variable for type metadata for TopicCryptorProvider?);
}

uint64_t AttachmentLedgerTopic.dataCryptor.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_dataCryptor;
  swift_beginAccess();
  outlined assign with copy of TopicCryptorProvider?(a1, v3);
  swift_endAccess();
  AttachmentLedgerTopic.dataCryptor.didset();
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TopicCryptorProvider?);
}

uint64_t outlined assign with copy of TopicCryptorProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopicCryptorProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t (*AttachmentLedgerTopic.dataCryptor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return AttachmentLedgerTopic.dataCryptor.modify;
}

uint64_t AttachmentLedgerTopic.dataCryptor.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return AttachmentLedgerTopic.dataCryptor.didset();
  }
  return result;
}

uint64_t AttachmentLedgerTopic.attachments.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[Attachment]>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__attachments, v1);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6[1];
}

uint64_t AttachmentLedgerTopic.attachments.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[Attachment]>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__attachments, v3);
  v8[1] = a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void (*AttachmentLedgerTopic.attachments.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[Attachment]>);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  v2[6] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify();
  return AttachmentLedgerTopic.attachments.modify;
}

void AttachmentLedgerTopic.attachments.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48);
  uint64_t v3 = *(void *)(*a1 + 32);
  uint64_t v4 = *(void *)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);

  free(v1);
}

uint64_t AttachmentLedgerTopic.$attachments.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[Attachment]>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__attachments, v1);
  uint64_t v5 = CurrentSubject.projectedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v5;
}

uint64_t AttachmentLedgerTopic.RetryInfo.attempt.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AttachmentLedgerTopic.RetryInfo.attempt.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

void AttachmentLedgerTopic.RetryInfo.retryAttemptInterval.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*AttachmentLedgerTopic.RetryInfo.retryAttemptInterval.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.RetryInfo.maximumAttempts.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AttachmentLedgerTopic.RetryInfo.maximumAttempts.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*AttachmentLedgerTopic.RetryInfo.maximumAttempts.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.RetryInfo.pendingAttachments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttachmentLedgerTopic.RetryInfo.pendingAttachments.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AttachmentLedgerTopic.RetryInfo.pendingAttachments.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.RetryInfo.update(with:)()
{
  uint64_t v1 = v0;
  uint64_t v39 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v39 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v39);
  uint64_t v38 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v37 = (char *)v31 - v5;
  uint64_t v6 = type metadata accessor for PluginAttachmentLedgerTopic.Configuration();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  PluginAttachmentLedgerTopic.State.ShutdownInfo.config.getter();
  uint64_t v10 = PluginAttachmentLedgerTopic.Configuration.maxSubscribeRetries.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(void *)(v1 + 16) = v10;
  unint64_t v11 = PluginAttachmentLedgerTopic.State.ShutdownInfo.pendingAttachments.getter();
  uint64_t v12 = v11;
  if (v11 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    if (v13) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13)
    {
LABEL_3:
      uint64_t v14 = 0;
      uint64_t v15 = (uint64_t *)(v1 + 24);
      uint64_t v34 = v12;
      unint64_t v35 = v12 & 0xC000000000000001;
      v31[1] = v12 + 32;
      uint64_t v32 = (uint64_t *)(v1 + 24);
      uint64_t v1 = v2 + 8;
      uint64_t v33 = v13;
      do
      {
        while (1)
        {
          if (v35)
          {
            uint64_t v16 = MEMORY[0x1A624E900](v14, v12);
            BOOL v17 = __OFADD__(v14, 1);
            uint64_t v18 = v14 + 1;
            if (v17) {
              goto LABEL_27;
            }
          }
          else
          {
            uint64_t v16 = swift_retain();
            BOOL v17 = __OFADD__(v14, 1);
            uint64_t v18 = v14 + 1;
            if (v17)
            {
LABEL_27:
              __break(1u);
              goto LABEL_28;
            }
          }
          uint64_t v41 = v16;
          uint64_t v19 = *v15;
          unint64_t v20 = (unint64_t)*v15 >> 62;
          uint64_t v36 = v18;
          if (!v20) {
            break;
          }
          swift_bridgeObjectRetain_n();
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
          if (v21) {
            goto LABEL_12;
          }
LABEL_20:
          swift_bridgeObjectRelease_n();
          uint64_t v29 = swift_retain();
          uint64_t v15 = v32;
          MEMORY[0x1A624E0F0](v29);
          uint64_t v12 = v34;
          uint64_t v14 = v36;
          if (*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
          if (v14 == v33) {
            return swift_bridgeObjectRelease_n();
          }
        }
        uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v21) {
          goto LABEL_20;
        }
LABEL_12:
        unint64_t v40 = v19 & 0xC000000000000001;
        uint64_t v12 = 4;
        while (1)
        {
          uint64_t v22 = v12 - 4;
          if (v40)
          {
            MEMORY[0x1A624E900](v12 - 4, v19);
            uint64_t v2 = v12 - 3;
            if (__OFADD__(v22, 1)) {
              goto LABEL_26;
            }
          }
          else
          {
            swift_retain();
            uint64_t v2 = v12 - 3;
            if (__OFADD__(v22, 1))
            {
LABEL_26:
              __break(1u);
              goto LABEL_27;
            }
          }
          uint64_t v23 = v37;
          Attachment.id.getter();
          uint64_t v24 = v38;
          Attachment.id.getter();
          char v25 = static UUID.== infix(_:_:)();
          uint64_t v26 = *(void (**)(char *, uint64_t))v1;
          uint64_t v27 = v24;
          uint64_t v28 = v39;
          (*(void (**)(char *, uint64_t))v1)(v27, v39);
          v26(v23, v28);
          swift_release();
          if (v25) {
            break;
          }
          ++v12;
          if (v2 == v21) {
            goto LABEL_20;
          }
        }
        swift_release();
        swift_bridgeObjectRelease_n();
        uint64_t v12 = v34;
        uint64_t v14 = v36;
        uint64_t v15 = v32;
      }
      while (v36 != v33);
    }
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t AttachmentLedgerTopic.RetryInfo.init()()
{
  return 0;
}

uint64_t default argument 0 of AttachmentLedgerTopic.RetryInfo.init(attempt:retryAttemptInterval:maximumAttempts:pendingAttachments:)()
{
  return 0;
}

double default argument 1 of AttachmentLedgerTopic.RetryInfo.init(attempt:retryAttemptInterval:maximumAttempts:pendingAttachments:)()
{
  return 1.0;
}

uint64_t default argument 2 of AttachmentLedgerTopic.RetryInfo.init(attempt:retryAttemptInterval:maximumAttempts:pendingAttachments:)()
{
  return 2;
}

uint64_t default argument 3 of AttachmentLedgerTopic.RetryInfo.init(attempt:retryAttemptInterval:maximumAttempts:pendingAttachments:)()
{
  return MEMORY[0x1E4FBC860];
}

double AttachmentLedgerTopic.retryInfo.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retryInfo;
  swift_beginAccess();
  double v2 = *(double *)(v1 + 8);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AttachmentLedgerTopic.retryInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v9 = v4 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retryInfo;
  swift_beginAccess();
  *(void *)uint64_t v9 = a1;
  *(double *)(v9 + 8) = a4;
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  return swift_bridgeObjectRelease();
}

uint64_t (*AttachmentLedgerTopic.retryInfo.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t AttachmentLedgerTopic.__allocating_init(name:retainRefOnStart:pluginGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  AttachmentLedgerTopic.init(name:retainRefOnStart:pluginGenerator:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

void *AttachmentLedgerTopic.init(name:retainRefOnStart:pluginGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v44 = a6;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v34 = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[Attachment]>);
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v41 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28FD0]), sel_init);
  uint64_t v14 = (char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic;
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  outlined init with copy of URL?((uint64_t)v46, (uint64_t)&v45 + 1, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  CurrentSubject.init(wrappedValue:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v46, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v13, v10);
  uint64_t v40 = OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_stateMachine;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachine<AttachmentLedgerTopic.State, AttachmentLedgerTopic.Event>.Transition>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<AttachmentLedgerTopic.State, AttachmentLedgerTopic.Event>.Transition);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_1A38F7470;
  LOBYTE(v46[0]) = 0;
  __int16 v45 = 256;
  lazy protocol witness table accessor for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State();
  lazy protocol witness table accessor for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event();
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 1;
  __int16 v45 = 513;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 2;
  __int16 v45 = 771;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  __int16 v45 = 2;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  __int16 v45 = 4;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 2;
  __int16 v45 = 2;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 2;
  __int16 v45 = 4;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 1;
  __int16 v45 = 2;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 1;
  __int16 v45 = 4;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 0;
  __int16 v45 = 1029;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 4;
  __int16 v45 = 1030;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 4;
  __int16 v45 = 256;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 4;
  __int16 v45 = 2;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 4;
  __int16 v45 = 4;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  __int16 v45 = 775;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  __int16 v45 = 776;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  __int16 v45 = 777;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  __int16 v45 = 778;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  __int16 v45 = 779;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<AttachmentLedgerTopic.State, AttachmentLedgerTopic.Event>);
  swift_allocObject();
  *(void *)((char *)v7 + v40) = StateMachine.init(initialState:transitions:)();
  uint64_t v15 = (void *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRefOnStart);
  *uint64_t v15 = 0;
  v15[1] = 0;
  *(void *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRef) = 0;
  uint64_t v16 = OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_waitingForTopicCancellables;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  unint64_t v18 = MEMORY[0x1E4FBC870];
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) == 0)
  {
    *(void *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_waitingForTopicCancellables) = MEMORY[0x1E4FBC870];
    uint64_t v20 = v37;
    uint64_t v19 = v38;
    uint64_t v22 = v35;
    uint64_t v21 = v36;
    uint64_t v23 = v34;
    goto LABEL_3;
  }
  uint64_t v31 = MEMORY[0x1E4FBC860];
  if (_CocoaArrayWrapper.endIndex.getter())
  {
    *(void *)((char *)v7 + v16) = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
    uint64_t v21 = v36;
    uint64_t v20 = v37;
    uint64_t v22 = v35;
    uint64_t v23 = v34;
  }
  else
  {
    *(void *)((char *)v7 + v16) = v18;
    uint64_t v21 = v36;
    uint64_t v20 = v37;
    uint64_t v22 = v35;
    uint64_t v23 = v34;
    if ((v31 & 0xC000000000000000) == 0)
    {
      *(void *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_subscribingCancellables) = v18;
      uint64_t v19 = v38;
      goto LABEL_6;
    }
  }
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v19 = v38;
  if (!v32)
  {
LABEL_3:
    *(void *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_subscribingCancellables) = v18;
    if ((v17 & 0xC000000000000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_4;
  }
  *(void *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_subscribingCancellables) = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
LABEL_4:
  if (_CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v18 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
LABEL_6:
  *(void *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_pluginTopicCancellables) = v18;
  uint64_t v24 = (char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_dataCryptor;
  *(_OWORD *)uint64_t v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  *((void *)v24 + 4) = 0;
  char v25 = (char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__attachments;
  *(void *)&v46[0] = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Attachment]);
  uint64_t v26 = v41;
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v25, v26, v43);
  uint64_t v27 = (void *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retryInfo);
  *uint64_t v27 = 0;
  v27[1] = 0x3FF0000000000000;
  void v27[2] = 2;
  v27[3] = v17;
  void v7[2] = v23;
  v7[3] = v22;
  uint64_t v28 = *v15;
  *uint64_t v15 = v21;
  v15[1] = v20;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v28);
  uint64_t v29 = v44;
  v7[5] = v19;
  void v7[6] = v29;
  return v7;
}

id AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(uint64_t a1)
{
  double v2 = v1;
  uint64_t v4 = v1[4];
  objc_msgSend(v4, sel_lock);
  LOBYTE(v22) = 0;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) == 0)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(void *)&long long v22 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      v29[0] = v2;
      type metadata accessor for AttachmentLedgerTopic(0);
      swift_retain();
      uint64_t v10 = String.init<A>(reflecting:)();
      v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, (uint64_t *)&v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      uint64_t v12 = "Can't subscribe to AttachmentLedgerTopic %s";
LABEL_8:
      _os_log_impl(&dword_1A375F000, v6, v7, v12, v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v9, -1, -1);
      MEMORY[0x1A624F870](v8, -1, -1);
LABEL_19:

      return objc_msgSend(v4, sel_unlock);
    }
LABEL_18:
    swift_release_n();
    goto LABEL_19;
  }
  (*v1)[43]((uint64_t)&v27);
  outlined init with copy of URL?(a1, (uint64_t)v26, &demangling cache variable for type metadata for TopicCryptorProvider?);
  if (!v28)
  {
    outlined init with take of Date?((uint64_t)v26, (uint64_t)&v22, &demangling cache variable for type metadata for TopicCryptorProvider?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v27, &demangling cache variable for type metadata for TopicCryptorProvider?);
    if (v23) {
      goto LABEL_10;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v22, &demangling cache variable for type metadata for TopicCryptorProvider?);
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(void *)&long long v22 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      v29[0] = v2;
      type metadata accessor for AttachmentLedgerTopic(0);
      swift_retain();
      uint64_t v19 = String.init<A>(reflecting:)();
      v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)&v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      uint64_t v12 = "No dataCryptor existing on AttachmentLedgerTopic and none passed in %s";
      goto LABEL_8;
    }
    goto LABEL_18;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v26, &demangling cache variable for type metadata for TopicCryptorProvider?);
  outlined init with take of TypedPayloadDecoding(&v27, (uint64_t)&v22);
LABEL_10:
  outlined init with take of TypedPayloadDecoding(&v22, (uint64_t)v29);
  outlined init with copy of AudioSessionAssertionManager((uint64_t)v29, (uint64_t)v25);
  (*v1)[44]((uint64_t)v25);
  uint64_t v13 = *(uint64_t (**)(uint64_t))((char *)v1
                                          + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRefOnStart);
  if (v13)
  {
    uint64_t v14 = swift_retain();
    uint64_t v15 = v13(v14);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v13);
  }
  else
  {
    uint64_t v15 = 0;
  }
  *(uint64_t (***)(uint64_t))((char *)v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRef) = (uint64_t (**)(uint64_t))v15;
  swift_unknownObjectRelease();
  uint64_t v16 = outlined init with copy of AudioSessionAssertionManager((uint64_t)v29, (uint64_t)&v22);
  *(void *)&long long v27 = (*v2)[46](v16);
  unint64_t v17 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v17, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
  uint64_t v24 = v27;
  *(void *)&long long v27 = ((uint64_t (*)(long long *))v2[5])(&v22);
  swift_allocObject();
  swift_weakInit();
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopicProvider, Error>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<PluginAttachmentLedgerTopicProvider, Error> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopicProvider, Error>);
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  outlined destroy of AttachmentLedgerTopic.BootstrapTopicInfo((uint64_t)&v22);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  return objc_msgSend(v4, sel_unlock);
}

uint64_t AttachmentLedgerTopic.BootstrapTopicInfo.init(dataCryptorProvider:attachments:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = outlined init with take of TypedPayloadDecoding(a1, a3);
  *(void *)(a3 + 40) = a2;
  return result;
}

uint64_t closure #1 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(void **a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = ((char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    objc_msgSend(*(id *)(result + 32), sel_lock);
    if (v5)
    {
      id v8 = v5;
      if (one-time initialization token for attachmentLedgerTopic != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.attachmentLedgerTopic);
      swift_retain();
      id v10 = v5;
      swift_retain();
      id v11 = v5;
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        uint64_t v30 = (uint64_t)v5;
        uint64_t v31 = v29;
        *(_DWORD *)uint64_t v14 = 136315394;
        id v15 = v5;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v16 = String.init<A>(reflecting:)();
        uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v14 + 12) = 2080;
        uint64_t v19 = *(void *)(v7 + 16);
        unint64_t v18 = *(void *)(v7 + 24);
        swift_bridgeObjectRetain();
        uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1A375F000, v12, v13, "Failed to subscribe, error=%s, topic=%s", (uint8_t *)v14, 0x16u);
        uint64_t v20 = v29;
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v20, -1, -1);
        MEMORY[0x1A624F870](v14, -1, -1);
      }
      else
      {

        swift_release_n();
      }

      uint64_t v28 = type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo();
      (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v4, 1, 1, v28);
      AttachmentLedgerTopic.processShutdown(shutdownInfo:)(v4);

      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v4, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
    }
    else
    {
      if (one-time initialization token for attachmentLedgerTopic != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Log.attachmentLedgerTopic);
      swift_retain();
      long long v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        uint64_t v31 = v25;
        *(_DWORD *)uint64_t v24 = 136315138;
        uint64_t v26 = *(void *)(v7 + 16);
        unint64_t v27 = *(void *)(v7 + 24);
        swift_bridgeObjectRetain();
        uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_1A375F000, v22, v23, "Successfully fetched plugin, topic=%s", v24, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v25, -1, -1);
        MEMORY[0x1A624F870](v24, -1, -1);
      }
      else
      {
        swift_release();
      }
    }
    objc_msgSend(*(id *)(v7 + 32), sel_unlock);
    return swift_release();
  }
  return result;
}

void closure #2 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = Strong;
    objc_msgSend(*(id *)(Strong + 32), sel_lock);
    LOBYTE(v29[0]) = 1;
    if (dispatch thunk of StateMachine.execute(_:)())
    {
      uint64_t v4 = a1[3];
      uint64_t v5 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v4);
      v27[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
      uint64_t v6 = swift_allocObject();
      swift_weakInit();
      outlined init with copy of AudioSessionAssertionManager((uint64_t)a1, (uint64_t)v29);
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v6;
      outlined init with take of TypedPayloadDecoding(v29, v7 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopic.State, Never>);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<PluginAttachmentLedgerTopic.State, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopic.State, Never>);
      Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
    }
    else
    {
      if (one-time initialization token for attachmentLedgerTopic != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Log.attachmentLedgerTopic);
      swift_retain_n();
      unint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        *(void *)&v29[0] = v20;
        *(_DWORD *)uint64_t v19 = 136315138;
        dispatch thunk of StateMachine.currentState.getter();
        LOBYTE(v25) = v27[0];
        uint64_t v21 = String.init<A>(reflecting:)();
        v27[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1A375F000, v17, v18, "Failed to execute successful event, currentState: %s", v19, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v20, -1, -1);
        MEMORY[0x1A624F870](v19, -1, -1);
      }
      else
      {
        swift_release_n();
      }
    }
    objc_msgSend(*(id *)(v3 + 32), sel_unlock);
    swift_release();
  }
  else
  {
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
    outlined init with copy of AudioSessionAssertionManager((uint64_t)a1, (uint64_t)v29);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v28 = v12;
      *(_DWORD *)id v11 = 136315138;
      outlined init with copy of AudioSessionAssertionManager((uint64_t)v29, (uint64_t)v27);
      outlined init with copy of URL?((uint64_t)v27, (uint64_t)&v25, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
      if (v26)
      {
        outlined init with take of TypedPayloadDecoding(&v25, (uint64_t)v24);
        outlined init with copy of AudioSessionAssertionManager((uint64_t)v24, (uint64_t)v23);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
        uint64_t v13 = String.init<A>(reflecting:)();
        unint64_t v15 = v14;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
      }
      else
      {
        unint64_t v15 = 0xE300000000000000;
        uint64_t v13 = 7104878;
      }
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v27, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
      v27[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
      _os_log_impl(&dword_1A375F000, v9, v10, "Lost reference to Topic, ignoring PluginTopic=%s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v12, -1, -1);
      MEMORY[0x1A624F870](v11, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
    }
  }
}

uint64_t closure #1 in closure #2 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v81 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v68[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v77 = &v68[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for PluginAttachmentLedgerTopic.State();
  uint64_t v80 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v68[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = &v68[-v15];
  MEMORY[0x1F4188790](v14);
  os_log_type_t v18 = &v68[-v17];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v20 = result;
    uint64_t v73 = v13;
    uint64_t v79 = v16;
    uint64_t v76 = v8;
    objc_msgSend(*(id *)(result + 32), sel_lock);
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v72 = a3;
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Log.attachmentLedgerTopic);
    uint64_t v23 = v80;
    uint64_t v78 = *(NSObject **)(v80 + 16);
    ((void (*)(unsigned char *, uint64_t, uint64_t))v78)(v18, v81, v10);
    swift_retain_n();
    uint64_t v74 = v22;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    int v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v75 = v7;
      uint64_t v28 = v27;
      uint64_t v70 = swift_slowAlloc();
      v82[0] = v70;
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_retain();
      int v69 = v26;
      uint64_t v29 = AttachmentLedgerTopic.description.getter();
      uint64_t v71 = v6;
      uint64_t v30 = v20;
      unint64_t v32 = v31;
      swift_release();
      uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v32, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v28 + 12) = 2080;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State, MEMORY[0x1E4F5B0C8]);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v82);
      uint64_t v23 = v80;
      uint64_t v20 = v30;
      uint64_t v6 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v35 = *(void (**)(unsigned char *, uint64_t))(v23 + 8);
      v35(v18, v10);
      _os_log_impl(&dword_1A375F000, v24, (os_log_type_t)v69, "Topic %s observed PluginTopic's state change to %s", (uint8_t *)v28, 0x16u);
      uint64_t v36 = v70;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v36, -1, -1);
      uint64_t v37 = v28;
      uint64_t v7 = v75;
      MEMORY[0x1A624F870](v37, -1, -1);
    }
    else
    {
      swift_release_n();
      uint64_t v35 = *(void (**)(unsigned char *, uint64_t))(v23 + 8);
      v35(v18, v10);
    }

    os_log_t v38 = v78;
    uint64_t v39 = v79;
    ((void (*)(unsigned char *, uint64_t, uint64_t))v78)(v79, v81, v10);
    int v40 = (*(uint64_t (**)(unsigned char *, uint64_t))(v23 + 88))(v39, v10);
    if (v40 == *MEMORY[0x1E4F5B0B0])
    {
      (*(void (**)(unsigned char *, uint64_t))(v23 + 96))(v39, v10);
      uint64_t v41 = type metadata accessor for PluginAttachmentLedgerTopic.State.RetryInfo();
      (*(void (**)(unsigned char *, uint64_t))(*(void *)(v41 - 8) + 8))(v39, v41);
    }
    else if (v40 == *MEMORY[0x1E4F5B0B8])
    {
      (*(void (**)(unsigned char *, uint64_t))(v23 + 96))(v39, v10);
      uint64_t v42 = v76;
      uint64_t v43 = v77;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v76 + 32))(v77, v39, v7);
      (*(void (**)(NSObject *, unsigned char *, uint64_t))(v42 + 16))(v6, v43, v7);
      (*(void (**)(NSObject *, void, uint64_t, uint64_t))(v42 + 56))(v6, 0, 1, v7);
      AttachmentLedgerTopic.processShutdown(shutdownInfo:)(v6);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
      (*(void (**)(unsigned char *, uint64_t))(v42 + 8))(v43, v7);
    }
    else if (v40 != *MEMORY[0x1E4F5B0C0])
    {
      if (v40 == *MEMORY[0x1E4F5B0A8])
      {
        LOBYTE(v82[0]) = 3;
        if (dispatch thunk of StateMachine.execute(_:)())
        {
          uint64_t v44 = (void *)(v20 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_subscribingCancellables);
          swift_beginAccess();
          void *v44 = MEMORY[0x1E4FBC870];
          swift_bridgeObjectRelease();
          AttachmentLedgerTopic.setSubscribedPluginTopic(_:)(v72);
        }
        else
        {
          swift_retain_n();
          uint64_t v60 = Logger.logObject.getter();
          os_log_type_t v61 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v60, v61))
          {
            uint64_t v62 = (uint8_t *)swift_slowAlloc();
            uint64_t v63 = v20;
            uint64_t v64 = swift_slowAlloc();
            v82[0] = v64;
            *(_DWORD *)uint64_t v62 = 136315138;
            dispatch thunk of StateMachine.currentState.getter();
            char v83 = v84;
            uint64_t v65 = String.init<A>(reflecting:)();
            uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v82);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_release_n();
            _os_log_impl(&dword_1A375F000, v60, v61, "Topic state transitioned to ready state; however, the state machine wasn't in a state to handle it. currentState: %s",
              v62,
              0xCu);
            swift_arrayDestroy();
            uint64_t v67 = v64;
            uint64_t v20 = v63;
            MEMORY[0x1A624F870](v67, -1, -1);
            MEMORY[0x1A624F870](v62, -1, -1);
          }
          else
          {
            swift_release_n();
          }
        }
      }
      else if (v40 != *MEMORY[0x1E4F5B0A0])
      {
        uint64_t v75 = v7;
        __int16 v45 = v73;
        ((void (*)(unsigned char *, uint64_t, uint64_t))v38)(v73, v81, v10);
        swift_retain_n();
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.fault.getter();
        int v48 = v47;
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v49 = swift_slowAlloc();
          uint64_t v81 = swift_slowAlloc();
          v82[0] = v81;
          *(_DWORD *)uint64_t v49 = 136315394;
          swift_retain();
          uint64_t v78 = v46;
          uint64_t v50 = AttachmentLedgerTopic.description.getter();
          LODWORD(v77) = v48;
          uint64_t v51 = v10;
          uint64_t v52 = v6;
          uint64_t v53 = v20;
          unint64_t v55 = v54;
          swift_release();
          uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v55, v82);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v20 = v53;
          uint64_t v6 = v52;
          uint64_t v10 = v51;
          swift_bridgeObjectRelease();
          swift_release_n();
          *(_WORD *)(v49 + 12) = 2080;
          _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State, MEMORY[0x1E4F5B0C8]);
          uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v82);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v35(v45, v51);
          uint64_t v46 = v78;
          _os_log_impl(&dword_1A375F000, v78, (os_log_type_t)v77, "Topic %s Hit unexpected state. state: %s", (uint8_t *)v49, 0x16u);
          uint64_t v58 = v81;
          swift_arrayDestroy();
          MEMORY[0x1A624F870](v58, -1, -1);
          uint64_t v59 = v49;
          uint64_t v39 = v79;
          MEMORY[0x1A624F870](v59, -1, -1);
        }
        else
        {
          swift_release_n();
          v35(v45, v10);
        }

        (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v6, 1, 1, v75);
        AttachmentLedgerTopic.processShutdown(shutdownInfo:)(v6);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
        v35(v39, v10);
      }
    }
    objc_msgSend(*(id *)(v20 + 32), sel_unlock);
    return swift_release();
  }
  return result;
}

void AttachmentLedgerTopic.processShutdown(shutdownInfo:)(NSObject *a1)
{
  uint64_t v2 = v1;
  os_log_t v110 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v104 = (uint64_t)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v98 - v9;
  uint64_t v108 = type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason();
  uint64_t v107 = *(void *)(v108 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v108);
  uint64_t v105 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v106 = (char *)&v98 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v109 = (uint64_t)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo();
  uint64_t v111 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v98 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  os_log_type_t v25 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)(v1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_stateMachine);
  LOBYTE(v114) = 4;
  if (dispatch thunk of StateMachine.execute(_:)())
  {
    uint64_t v101 = v19;
    uint64_t v99 = v10;
    uint64_t v103 = v21;
    uint64_t v102 = v26;
    uint64_t v100 = v5;
    uint64_t v27 = (void *)(v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_waitingForTopicCancellables);
    swift_beginAccess();
    uint64_t v28 = MEMORY[0x1E4FBC870];
    *uint64_t v27 = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRelease();
    uint64_t v29 = (void *)(v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_subscribingCancellables);
    swift_beginAccess();
    *uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v30 = (void *)(v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_pluginTopicCancellables);
    swift_beginAccess();
    *uint64_t v30 = v28;
    swift_bridgeObjectRelease();
    uint64_t v116 = 0;
    long long v114 = 0u;
    long long v115 = 0u;
    uint64_t v31 = v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic;
    unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    v32(v25, v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v22);
    CurrentSubject.wrappedValue.getter();
    uint64_t v33 = *(void (**)(char *, uint64_t))(v23 + 8);
    v33(v25, v22);
    v32(v25, v31, v22);
    outlined init with copy of URL?((uint64_t)&v114, (uint64_t)v112, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    CurrentSubject.wrappedValue.setter();
    v33(v25, v22);
    AttachmentLedgerTopic.topic.didset((uint64_t)v113);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v114, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v113, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    *(void *)(v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRef) = 0;
    swift_unknownObjectRelease();
    uint64_t v34 = v109;
    outlined init with copy of URL?((uint64_t)v110, v109, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
    uint64_t v35 = v111;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v34, 1, v16) == 1)
    {
      uint64_t v36 = outlined destroy of OS_dispatch_queue.SchedulerOptions?(v34, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
    }
    else
    {
      uint64_t v46 = v103;
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v103, v34, v16);
      os_log_type_t v47 = v106;
      PluginAttachmentLedgerTopic.State.ShutdownInfo.reason.getter();
      uint64_t v48 = v107;
      uint64_t v49 = v105;
      uint64_t v50 = v108;
      (*(void (**)(char *, void, uint64_t))(v107 + 104))(v105, *MEMORY[0x1E4F5B088], v108);
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason and conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason, MEMORY[0x1E4F5B090]);
      char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v52 = *(void (**)(char *, uint64_t))(v48 + 8);
      v52(v49, v50);
      v52(v47, v50);
      if (v51)
      {
        uint64_t v36 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v46, v16);
      }
      else
      {
        if (one-time initialization token for attachmentLedgerTopic != -1) {
          swift_once();
        }
        uint64_t v53 = type metadata accessor for Logger();
        __swift_project_value_buffer(v53, (uint64_t)static Log.attachmentLedgerTopic);
        unint64_t v54 = v101;
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v101, v46, v16);
        swift_retain_n();
        unint64_t v55 = Logger.logObject.getter();
        int v56 = static os_log_type_t.default.getter();
        BOOL v57 = os_log_type_enabled(v55, (os_log_type_t)v56);
        uint64_t v58 = (uint64_t)v99;
        if (v57)
        {
          LODWORD(v109) = v56;
          os_log_t v110 = v55;
          uint64_t v59 = swift_slowAlloc();
          uint64_t v98 = swift_slowAlloc();
          *(void *)&long long v114 = v98;
          *(_DWORD *)uint64_t v59 = 136315394;
          PluginAttachmentLedgerTopic.State.ShutdownInfo.reason.getter();
          uint64_t v60 = v107;
          uint64_t v61 = v108;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v107 + 56))(v58, 0, 1, v108);
          uint64_t v62 = v104;
          outlined init with copy of URL?(v58, v104, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v62, 1, v61) == 1)
          {
            unint64_t v63 = 0xE300000000000000;
            uint64_t v64 = 7104878;
          }
          else
          {
            unint64_t v66 = v106;
            (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v106, v62, v61);
            (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v105, v66, v61);
            uint64_t v67 = String.init<A>(reflecting:)();
            uint64_t v68 = v61;
            uint64_t v64 = v67;
            unint64_t v63 = v69;
            v52(v66, v68);
          }
          outlined destroy of OS_dispatch_queue.SchedulerOptions?(v58, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason?);
          v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v63, (uint64_t *)&v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v65 = *(void (**)(char *, uint64_t))(v111 + 8);
          v65(v101, v16);
          *(_WORD *)(v59 + 12) = 2080;
          swift_retain();
          uint64_t v70 = AttachmentLedgerTopic.description.getter();
          unint64_t v72 = v71;
          swift_release();
          v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, (uint64_t *)&v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          os_log_t v73 = v110;
          _os_log_impl(&dword_1A375F000, v110, (os_log_type_t)v109, "Processing shutdown with reason: %s on topic %s", (uint8_t *)v59, 0x16u);
          uint64_t v74 = v98;
          swift_arrayDestroy();
          MEMORY[0x1A624F870](v74, -1, -1);
          MEMORY[0x1A624F870](v59, -1, -1);

          uint64_t v46 = v103;
        }
        else
        {
          uint64_t v65 = *(void (**)(char *, uint64_t))(v35 + 8);
          v65(v54, v16);
          swift_release_n();
        }
        uint64_t v75 = (void (*)(long long *, void))(*(uint64_t (**)(long long *))(*(void *)v2 + 416))(&v114);
        AttachmentLedgerTopic.RetryInfo.update(with:)();
        v75(&v114, 0);
        uint64_t v36 = ((uint64_t (*)(char *, uint64_t))v65)(v46, v16);
      }
    }
    uint64_t v76 = (uint64_t (**)(uint64_t))(*(void *)v2 + 400);
    id v77 = *v76;
    uint64_t v78 = (*v76)(v36);
    uint64_t v79 = swift_bridgeObjectRelease();
    v77(v79);
    uint64_t v81 = v80;
    swift_bridgeObjectRelease();
    if (v78 < v81)
    {
      LOBYTE(v114) = 5;
      if (dispatch thunk of StateMachine.execute(_:)())
      {
        uint64_t v82 = type metadata accessor for TaskPriority();
        uint64_t v83 = (uint64_t)v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v100, 1, 1, v82);
        uint64_t v84 = swift_allocObject();
        uint64_t v85 = swift_weakInit();
        double v86 = ((double (*)(uint64_t))v77)(v85);
        swift_bridgeObjectRelease();
        uint64_t v87 = (double *)swift_allocObject();
        v87[2] = 0.0;
        uint64_t v87[3] = 0.0;
        *((void *)v87 + 4) = v84;
        v87[5] = v86;
        _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v83, (uint64_t)&async function pointer to partial apply for closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:), (uint64_t)v87);
        swift_release();
        return;
      }
      if (one-time initialization token for attachmentLedgerTopic != -1) {
        swift_once();
      }
      uint64_t v94 = type metadata accessor for Logger();
      __swift_project_value_buffer(v94, (uint64_t)static Log.attachmentLedgerTopic);
      swift_retain_n();
      os_log_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        int v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(void *)&long long v114 = v41;
        *(_DWORD *)int v40 = 136315138;
        swift_retain();
        uint64_t v95 = AttachmentLedgerTopic.description.getter();
        unint64_t v97 = v96;
        swift_release();
        v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v97, (uint64_t *)&v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        __int16 v45 = "%s Not staging a retry attempt due to invalid state.";
        goto LABEL_30;
      }
LABEL_31:
      swift_release_n();
      goto LABEL_32;
    }
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v88 = type metadata accessor for Logger();
    __swift_project_value_buffer(v88, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    os_log_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v38, v39)) {
      goto LABEL_31;
    }
    int v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    v113[0] = v41;
    *(_DWORD *)int v40 = 136315138;
    *(void *)&long long v114 = ((uint64_t (*)(void))v77)();
    *((void *)&v114 + 1) = v89;
    *(void *)&long long v115 = v90;
    *((void *)&v115 + 1) = v91;
    uint64_t v92 = String.init<A>(reflecting:)();
    *(void *)&long long v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    __int16 v45 = "Not retrying as we've exceeded the maximum amount of retries (%s";
  }
  else
  {
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    os_log_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v38, v39)) {
      goto LABEL_31;
    }
    int v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(void *)&long long v114 = v41;
    *(_DWORD *)int v40 = 136315138;
    swift_retain();
    uint64_t v42 = AttachmentLedgerTopic.description.getter();
    unint64_t v44 = v43;
    swift_release();
    v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, (uint64_t *)&v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    __int16 v45 = "Not able to process pluginShutdown on %s. We should *ALWAYS* be able to process a shutdown as it can happen at anytime";
  }
LABEL_30:
  _os_log_impl(&dword_1A375F000, v38, v39, v45, v40, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1A624F870](v41, -1, -1);
  MEMORY[0x1A624F870](v40, -1, -1);
LABEL_32:
}

uint64_t closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(double *)(v5 + 184) = a1;
  *(void *)(v5 + 176) = a5;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  *(void *)(v5 + 192) = v6;
  *(void *)(v5 + 200) = *(void *)(v6 - 8);
  *(void *)(v5 + 208) = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:), 0, 0);
}

uint64_t closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:)()
{
  uint64_t v18 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[27] = __swift_project_value_buffer(v1, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v17 = v5;
    *(_DWORD *)uint64_t v4 = 136315394;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v0[21] = Strong;
      type metadata accessor for AttachmentLedgerTopic(0);
      uint64_t v7 = String.init<A>(reflecting:)();
      unint64_t v9 = v8;
    }
    else
    {
      unint64_t v9 = 0xE300000000000000;
      uint64_t v7 = 7104878;
    }
    uint64_t v10 = v0[23];
    v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2048;
    v0[20] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A375F000, v2, v3, "%s Waiting %f seconds to retry.", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v11 = static Duration.seconds(_:)();
  uint64_t v13 = v12;
  ContinuousClock.init()();
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                         + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v14 = (void *)swift_task_alloc();
  v0[28] = v14;
  *uint64_t v14 = v0;
  v14[1] = closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:);
  return v16(v11, v13, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 208);
  os_log_type_t v3 = *(void *)(*(void *)v1 + 200);
  uint64_t v4 = *(void *)(*(void *)v1 + 192);
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:);
  }
  else {
    uint64_t v5 = closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t (*closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:)())(uint64_t, void)
{
  uint64_t v24 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    os_log_type_t v3 = (unsigned char *)(v0 + 240);
    swift_retain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v23 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      swift_retain();
      uint64_t v8 = AttachmentLedgerTopic.description.getter();
      unint64_t v10 = v9;
      swift_release();
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      os_log_type_t v3 = (unsigned char *)(v0 + 240);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v4, v5, "%s Done waiting, retrying.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v7, -1, -1);
      MEMORY[0x1A624F870](v6, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    unsigned char *v3 = 6;
    if (dispatch thunk of StateMachine.execute(_:)())
    {
      uint64_t result = (uint64_t (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))(*(void *)v2 + 416))(v0 + 56);
      if (__OFADD__(*v12, 1))
      {
        __break(1u);
        return result;
      }
      ++*v12;
      uint64_t v13 = result(v0 + 56, 0);
      *(void *)(v0 + 48) = 0;
      *(_OWORD *)(v0 + 16) = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
      (*(void (**)(uint64_t))(*(void *)v2 + 400))(v13);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 432))(v0 + 16, v14);
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 16, &demangling cache variable for type metadata for TopicCryptorProvider?);
    }
    else
    {
      swift_retain_n();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        uint64_t v23 = v18;
        *(_DWORD *)uint64_t v17 = 136315138;
        swift_retain();
        uint64_t v19 = AttachmentLedgerTopic.description.getter();
        unint64_t v21 = v20;
        swift_release();
        *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A375F000, v15, v16, "%s not retrying due to invalid state.", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v18, -1, -1);
        MEMORY[0x1A624F870](v17, -1, -1);
        swift_release();
      }
      else
      {

        swift_release_n();
      }
    }
  }
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return (uint64_t (*)(uint64_t, void))v22();
}

Swift::Void __swiftcall AttachmentLedgerTopic.unsubscribe()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = v6;
    *(_DWORD *)os_log_type_t v5 = 136315138;
    swift_retain();
    uint64_t v7 = AttachmentLedgerTopic.description.getter();
    unint64_t v9 = v8;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v3, v4, "Received request to unsubscribe topic %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v6, -1, -1);
    MEMORY[0x1A624F870](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  unint64_t v10 = *(void **)(v1 + 32);
  objc_msgSend(v10, sel_lock);
  closure #1 in AttachmentLedgerTopic.unsubscribe()(v1);
  objc_msgSend(v10, sel_unlock);
}

void closure #1 in AttachmentLedgerTopic.unsubscribe()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  uint64_t v53 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  unint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  os_log_t v50 = v8;
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v51 = v4;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(void *)&long long v59 = v12;
    uint64_t v13 = a1;
    uint64_t v52 = v1;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_retain();
    uint64_t v14 = AttachmentLedgerTopic.description.getter();
    uint64_t v49 = v6;
    unint64_t v16 = v15;
    swift_release();
    *(void *)&long long v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, (uint64_t *)&v59);
    uint64_t v4 = v51;
    uint64_t v2 = v52;
    a1 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v6 = v49;
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v9, v10, "Processing request to unsubscribe topic %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v12, -1, -1);
    MEMORY[0x1A624F870](v11, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  LOBYTE(v59) = 2;
  if (dispatch thunk of StateMachine.execute(_:)())
  {
    uint64_t v17 = (void *)(a1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_waitingForTopicCancellables);
    swift_beginAccess();
    uint64_t v18 = MEMORY[0x1E4FBC870];
    *uint64_t v17 = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRelease();
    uint64_t v19 = (void *)(a1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_subscribingCancellables);
    swift_beginAccess();
    *uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    unint64_t v20 = (void *)(a1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_pluginTopicCancellables);
    swift_beginAccess();
    *unint64_t v20 = v18;
    swift_bridgeObjectRelease();
    uint64_t v21 = a1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic;
    uint64_t v22 = v53;
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
    v23(v6, a1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v4);
    CurrentSubject.wrappedValue.getter();
    uint64_t v24 = *(char **)(v22 + 8);
    uint64_t v53 = v22 + 8;
    uint64_t v49 = v24;
    ((void (*)(char *, uint64_t))v24)(v6, v4);
    if (*((void *)&v60 + 1))
    {
      uint64_t v51 = v4;
      outlined init with copy of AudioSessionAssertionManager((uint64_t)&v59, (uint64_t)&v56);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v59, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
      uint64_t v25 = v57;
      uint64_t v26 = v58;
      __swift_project_boxed_opaque_existential_1(&v56, v57);
      (*(void (**)(uint64_t, uint64_t))(v26 + 40))(v25, v26);
      if (!v2)
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v56);
LABEL_21:
        uint64_t v4 = v51;
        goto LABEL_22;
      }
      uint64_t v52 = 0;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v56);
      swift_retain_n();
      uint64_t v27 = Logger.logObject.getter();
      int v28 = static os_log_type_t.error.getter();
      BOOL v29 = os_log_type_enabled(v27, (os_log_type_t)v28);
      uint64_t v4 = v51;
      if (v29)
      {
        int v47 = v28;
        os_log_t v50 = v27;
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        uint64_t v62 = v46;
        uint64_t v48 = v30;
        *(_DWORD *)uint64_t v30 = 136315138;
        v23(v6, v21, v4);
        CurrentSubject.wrappedValue.getter();
        ((void (*)(char *, uint64_t))v49)(v6, v4);
        outlined init with copy of URL?((uint64_t)&v59, (uint64_t)&v56, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
        if (v57)
        {
          outlined init with take of TypedPayloadDecoding(&v56, (uint64_t)v55);
          outlined init with copy of AudioSessionAssertionManager((uint64_t)v55, (uint64_t)v54);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
          uint64_t v45 = String.init<A>(reflecting:)();
          unint64_t v32 = v31;
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);
        }
        else
        {
          unint64_t v32 = 0xE300000000000000;
          uint64_t v45 = 7104878;
        }
        int v40 = v48;
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v59, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
        *(void *)&long long v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v32, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        os_log_t v41 = v50;
        _os_log_impl(&dword_1A375F000, v50, (os_log_type_t)v47, "Failed to unsubscribe %s", v40, 0xCu);
        uint64_t v42 = v46;
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v42, -1, -1);
        MEMORY[0x1A624F870](v40, -1, -1);

        goto LABEL_21;
      }

      swift_release_n();
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v59, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    }
LABEL_22:
    uint64_t v61 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    v23(v6, v21, v4);
    CurrentSubject.wrappedValue.getter();
    unint64_t v43 = v23;
    unint64_t v44 = (void (*)(char *, uint64_t))v49;
    ((void (*)(char *, uint64_t))v49)(v6, v4);
    v43(v6, v21, v4);
    outlined init with copy of URL?((uint64_t)&v59, (uint64_t)v55, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    CurrentSubject.wrappedValue.setter();
    v44(v6, v4);
    AttachmentLedgerTopic.topic.didset((uint64_t)&v56);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v59, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v56, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    *(void *)(a1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRef) = 0;
    swift_unknownObjectRelease();
    return;
  }
  swift_retain_n();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(void *)&long long v59 = v36;
    *(_DWORD *)uint64_t v35 = 136315138;
    uint64_t v52 = v2;
    swift_retain();
    uint64_t v37 = AttachmentLedgerTopic.description.getter();
    unint64_t v39 = v38;
    swift_release();
    *(void *)&long long v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, (uint64_t *)&v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v33, v34, "Invalid state, can't unsubscribe topic: %s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v36, -1, -1);
    MEMORY[0x1A624F870](v35, -1, -1);
  }
  else
  {
    swift_release_n();
  }
}

uint64_t AttachmentLedgerTopic.setSubscribedPluginTopic(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Drop<AnyPublisher<PluginAttachmentLedgerTopic.State, Never>>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int v28 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  os_log_type_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = a1;
  outlined init with copy of AudioSessionAssertionManager((uint64_t)a1, (uint64_t)v31);
  uint64_t v11 = v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v12(v10, v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v7);
  CurrentSubject.wrappedValue.getter();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v8 + 8);
  v13(v10, v7);
  v12(v10, v11, v7);
  outlined init with copy of URL?((uint64_t)v31, (uint64_t)v29, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  CurrentSubject.wrappedValue.setter();
  v13(v10, v7);
  AttachmentLedgerTopic.topic.didset((uint64_t)v30);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v31, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v30, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    v31[0] = v18;
    uint64_t v26 = v5;
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_retain();
    uint64_t v19 = AttachmentLedgerTopic.description.getter();
    unint64_t v21 = v20;
    swift_release();
    v30[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v31);
    uint64_t v5 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v15, v16, "Topic %s successfully subscribed and updated Topic!", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v18, -1, -1);
    MEMORY[0x1A624F870](v17, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  (*(void (**)(void, uint64_t, void, double))(*(void *)v2 + 408))(0, 2, MEMORY[0x1E4FBC860], 1.0);
  uint64_t v22 = v27[3];
  uint64_t v23 = v27[4];
  __swift_project_boxed_opaque_existential_1(v27, v22);
  v31[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 24))(v22, v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopic.State, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<PluginAttachmentLedgerTopic.State, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopic.State, Never>);
  uint64_t v24 = v28;
  Publisher.dropFirst(_:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Drop<AnyPublisher<PluginAttachmentLedgerTopic.State, Never>> and conformance Publishers.Drop<A>, &demangling cache variable for type metadata for Publishers.Drop<AnyPublisher<PluginAttachmentLedgerTopic.State, Never>>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v24, v4);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in AttachmentLedgerTopic.setSubscribedPluginTopic(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = ((char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for PluginAttachmentLedgerTopic.State();
  uint64_t v9 = *(char **)(v64 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v64);
  uint64_t v12 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  unint64_t v15 = (char *)v53 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v53 - v16;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v58 = v8;
    long long v56 = v12;
    unint64_t v63 = v15;
    uint64_t v61 = result;
    objc_msgSend(*(id *)(result + 32), sel_lock);
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Log.attachmentLedgerTopic);
    unint64_t v21 = (void (*)(char *, uint64_t, uint64_t))*((void *)v9 + 2);
    uint64_t v62 = a1;
    uint64_t v22 = a1;
    uint64_t v23 = v64;
    long long v60 = v21;
    v21(v17, v22, v64);
    uint64_t v55 = v20;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      unint64_t v54 = v4;
      uint64_t v27 = (uint8_t *)v26;
      uint64_t v28 = swift_slowAlloc();
      uint64_t v59 = v6;
      uint64_t v29 = v28;
      uint64_t v66 = v28;
      uint64_t v57 = v5;
      *(_DWORD *)uint64_t v27 = 136315138;
      v53[1] = v27 + 4;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State, MEMORY[0x1E4F5B0C8]);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v66);
      uint64_t v5 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v32 = *((void *)v9 + 1);
      ((void (*)(char *, uint64_t))v32)(v17, v23);
      _os_log_impl(&dword_1A375F000, v24, v25, "Observed topic change to state %s", v27, 0xCu);
      swift_arrayDestroy();
      uint64_t v33 = v29;
      uint64_t v6 = v59;
      MEMORY[0x1A624F870](v33, -1, -1);
      os_log_type_t v34 = v27;
      uint64_t v4 = v54;
      MEMORY[0x1A624F870](v34, -1, -1);
    }
    else
    {
      unint64_t v32 = *((void *)v9 + 1);
      ((void (*)(char *, uint64_t))v32)(v17, v23);
    }

    uint64_t v35 = v63;
    uint64_t v36 = v60;
    v60(v63, v62, v23);
    int v37 = (*((uint64_t (**)(char *, uint64_t))v9 + 11))(v35, v23);
    uint64_t v38 = v61;
    if (v37 == *MEMORY[0x1E4F5B0B8])
    {
      (*((void (**)(char *, uint64_t))v9 + 12))(v35, v23);
      unint64_t v39 = v58;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v58, v35, v5);
      (*(void (**)(NSObject *, char *, uint64_t))(v6 + 16))(v4, v39, v5);
      (*(void (**)(NSObject *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      AttachmentLedgerTopic.processShutdown(shutdownInfo:)(v4);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v4, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v39, v5);
    }
    else
    {
      uint64_t v58 = v9;
      if (v37 != *MEMORY[0x1E4F5B0C0] && v37 != *MEMORY[0x1E4F5B0A8] && v37 != *MEMORY[0x1E4F5B0A0])
      {
        unint64_t v54 = v32;
        uint64_t v59 = v6;
        int v40 = v56;
        v36(v56, v62, v23);
        swift_retain_n();
        os_log_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.fault.getter();
        int v43 = v42;
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v44 = swift_slowAlloc();
          uint64_t v45 = swift_slowAlloc();
          uint64_t v66 = v45;
          *(_DWORD *)uint64_t v44 = 136315394;
          LODWORD(v62) = v43;
          swift_retain();
          uint64_t v46 = AttachmentLedgerTopic.description.getter();
          int v47 = v4;
          unint64_t v49 = v48;
          swift_release();
          uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v49, &v66);
          uint64_t v57 = v5;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v4 = v47;
          swift_bridgeObjectRelease();
          swift_release_n();
          *(_WORD *)(v44 + 12) = 2080;
          _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State, MEMORY[0x1E4F5B0C8]);
          uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v66);
          uint64_t v5 = v57;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v52 = v54;
          ((void (*)(char *, uint64_t))v54)(v40, v64);
          _os_log_impl(&dword_1A375F000, v41, (os_log_type_t)v62, "Topic %s Hit unexpected state. state: %s", (uint8_t *)v44, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1A624F870](v45, -1, -1);
          uint64_t v23 = v64;
          MEMORY[0x1A624F870](v44, -1, -1);
        }
        else
        {
          swift_release_n();
          uint64_t v52 = v54;
          ((void (*)(char *, uint64_t))v54)(v40, v23);
        }

        (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v4, 1, 1, v5);
        AttachmentLedgerTopic.processShutdown(shutdownInfo:)(v4);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v4, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
        ((void (*)(char *, uint64_t))v52)(v63, v23);
      }
    }
    objc_msgSend(*(id *)(v38 + 32), sel_unlock);
    return swift_release();
  }
  return result;
}

uint64_t AttachmentLedgerTopic.deinit()
{
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(void *)(v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRefOnStart));
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_dataCryptor, &demangling cache variable for type metadata for TopicCryptorProvider?);
  uint64_t v3 = v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__attachments;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[Attachment]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AttachmentLedgerTopic.__deallocating_deinit()
{
  AttachmentLedgerTopic.deinit();

  return swift_deallocClassInstance();
}

uint64_t AttachmentLedgerTopic.fetchTopic(function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](AttachmentLedgerTopic.fetchTopic(function:line:), 0, 0);
}

uint64_t AttachmentLedgerTopic.fetchTopic(function:line:)()
{
  uint64_t v18 = v0;
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[6];
  uint64_t v6 = *(void **)(v2 + 32);
  objc_msgSend(v6, sel_lock);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = v5;
  v8[6] = v3;
  v8[7] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities35PluginAttachmentLedgerTopicProvider_p_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:), (uint64_t)v8);
  v0[11] = v9;
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  uint64_t v10 = AnyCancellable.init(_:)();
  swift_beginAccess();
  specialized Set._Variant.insert(_:)(&v17, v10);
  swift_endAccess();
  swift_release();
  objc_msgSend(v6, sel_unlock);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[12] = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  void *v11 = v0;
  v11[1] = AttachmentLedgerTopic.fetchTopic(function:line:);
  uint64_t v14 = v0[5];
  uint64_t v15 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v14, v9, v12, v13, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AttachmentLedgerTopic.fetchTopic(function:line:);
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.fetchTopic(function:line:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[50] = a6;
  v7[51] = a7;
  v7[48] = a4;
  v7[49] = a5;
  v7[47] = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>>);
  v7[52] = v8;
  v7[53] = *(void *)(v8 - 8);
  v7[54] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  v7[55] = v9;
  v7[56] = *(void *)(v9 - 8);
  v7[57] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>>.Iterator);
  v7[58] = v10;
  v7[59] = *(void *)(v10 - 8);
  v7[60] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:), 0, 0);
}

uint64_t closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:)()
{
  uint64_t v1 = v0;
  uint64_t v16 = v0 + 7;
  uint64_t v4 = v0 + 56;
  uint64_t v3 = v0[56];
  uint64_t v2 = v4[1];
  uint64_t v5 = v1[54];
  uint64_t v6 = v1[55];
  uint64_t v7 = v1[52];
  uint64_t v8 = v1[53];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1[48] + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v6);
  uint64_t v9 = CurrentSubject.projectedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v6);
  v1[46] = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>);
  uint64_t v11 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>);
  MEMORY[0x1A624DD30](v10, v11);
  swift_release();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v5, v7);
  uint64_t v12 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>>.Iterator);
  uint64_t v13 = (void *)swift_task_alloc();
  v1[61] = v13;
  *uint64_t v13 = v1;
  v13[1] = closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:);
  uint64_t v14 = v1[58];
  return MEMORY[0x1F4187C78](v16, v14, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 496) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:);
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  long long *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  NSObject *log;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38[2];
  uint64_t v39;
  uint64_t v40;

  unint64_t v39 = v0;
  if (*(void *)(v0 + 80) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 472) + 8))(*(void *)(v0 + 480), *(void *)(v0 + 464));
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.attachmentLedgerTopic);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v36 = *(void *)(v0 + 408);
      uint64_t v5 = *(void *)(v0 + 392);
      uint64_t v4 = *(void *)(v0 + 400);
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      v38[0] = v7;
      *(_DWORD *)uint64_t v6 = 136315650;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v6 + 12) = 2048;
      *(void *)(v0 + 304) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 22) = 2080;
      swift_retain();
      uint64_t v8 = AttachmentLedgerTopic.description.getter();
      uint64_t v10 = v9;
      swift_release();
      *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A375F000, v2, v3, "%s:%ld Received signal that there will be no more topics on %s", (uint8_t *)v6, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v7, -1, -1);
      MEMORY[0x1A624F870](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();
    }

    type metadata accessor for CancellationError();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x1E4FBCF50]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_18;
  }
  uint64_t v11 = (long long *)(v0 + 16);
  uint64_t v12 = v0 + 56;
  uint64_t v13 = v0 + 256;
  outlined init with take of Date?(v0 + 56, v0 + 256, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of URL?(v0 + 256, v0 + 216, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v15 = Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t v34 = v16;
    log = v15;
    uint64_t v18 = *(void *)(v0 + 400);
    uint64_t v17 = *(void *)(v0 + 408);
    uint64_t v19 = *(void *)(v0 + 392);
    uint64_t v20 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(void *)(v0 + 312) = v33;
    *(_DWORD *)uint64_t v20 = 136315906;
    swift_bridgeObjectRetain();
    int v37 = (uint64_t *)(v0 + 312);
    *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, (uint64_t *)(v0 + 312));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2048;
    *(void *)(v0 + 328) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 22) = 2080;
    outlined init with copy of URL?(v0 + 216, v0 + 136, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    if (*(void *)(v0 + 160))
    {
      outlined init with take of TypedPayloadDecoding((long long *)(v0 + 136), v0 + 96);
      outlined init with copy of AudioSessionAssertionManager(v0 + 96, v0 + 176);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
      unint64_t v21 = String.init<A>(reflecting:)();
      uint64_t v23 = v22;
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
    }
    else
    {
      uint64_t v23 = 0xE300000000000000;
      unint64_t v21 = 7104878;
    }
    *(void *)(v0 + 344) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 216, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    *(_WORD *)(v20 + 32) = 2080;
    swift_retain();
    os_log_type_t v25 = AttachmentLedgerTopic.description.getter();
    uint64_t v27 = v26;
    swift_release();
    *(void *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, log, v34, "%s:%ld Received updated topic: %s on %s", (uint8_t *)v20, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v33, -1, -1);
    MEMORY[0x1A624F870](v20, -1, -1);

    uint64_t v11 = (long long *)(v0 + 16);
    uint64_t v12 = v0 + 56;
    uint64_t v13 = v0 + 256;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 216, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    swift_release_n();
  }
  outlined init with take of Date?(v13, (uint64_t)v11, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  if (*(void *)(v0 + 40))
  {
    uint64_t v28 = *(void *)(v0 + 376);
    (*(void (**)(void, void))(*(void *)(v0 + 472) + 8))(*(void *)(v0 + 480), *(void *)(v0 + 464));
    outlined init with take of TypedPayloadDecoding(v11, v28);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
LABEL_18:
    return v24();
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  uint64_t v30 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>>.Iterator);
  unint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 488) = v31;
  *unint64_t v31 = v0;
  v31[1] = closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:);
  unint64_t v32 = *(void *)(v0 + 464);
  return MEMORY[0x1F4187C78](v12, v32, v30);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 360) = *(void *)(v0 + 496);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

void closure #2 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);

  JUMPOUT(0x1A624E310);
}

uint64_t AttachmentLedgerTopic.requestUploadToken()(uint64_t a1)
{
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = v1;
  return MEMORY[0x1F4188298](AttachmentLedgerTopic.requestUploadToken(), 0, 0);
}

uint64_t AttachmentLedgerTopic.requestUploadToken()()
{
  uint64_t v12 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[11] = __swift_project_value_buffer(v1, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_retain();
    uint64_t v6 = AttachmentLedgerTopic.description.getter();
    unint64_t v8 = v7;
    swift_release();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v2, v3, "Received request for uploadToken %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v9 = (void *)swift_task_alloc();
  v0[12] = v9;
  *uint64_t v9 = v0;
  v9[1] = AttachmentLedgerTopic.requestUploadToken();
  return AttachmentLedgerTopic.fetchTopic(function:line:)((uint64_t)(v0 + 2), 0xD000000000000014, 0x80000001A3900EE0, 340);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AttachmentLedgerTopic.requestUploadToken();
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.requestUploadToken();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(void);
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v16 = v0;
  *(unsigned char *)(v0 + 128) = 7;
  if (dispatch thunk of StateMachine.execute(_:)())
  {
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v1);
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 48) + **(int **)(v2 + 48));
    os_log_type_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v3;
    NSObject *v3 = v0;
    v3[1] = AttachmentLedgerTopic.requestUploadToken();
    uint64_t v4 = *(void *)(v0 + 72);
    return v14(v4, v1, v2);
  }
  else
  {
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    unint64_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v15 = v9;
      *(_DWORD *)unint64_t v8 = 136315138;
      swift_retain();
      uint64_t v10 = AttachmentLedgerTopic.description.getter();
      uint64_t v12 = v11;
      swift_release();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A375F000, v6, v7, "Dropping request for uploadToken because state of AttachmentLedgerTopic is invalid %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v9, -1, -1);
      MEMORY[0x1A624F870](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors();
    swift_allocError();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AttachmentLedgerTopic.requestUploadToken();
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.requestUploadToken();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AttachmentLedgerTopic.refreshUploadToken()(uint64_t a1)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = v1;
  return MEMORY[0x1F4188298](AttachmentLedgerTopic.refreshUploadToken(), 0, 0);
}

uint64_t AttachmentLedgerTopic.refreshUploadToken()()
{
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 80) = __swift_project_value_buffer(v1, (uint64_t)static Log.attachmentLedgerTopic);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1A375F000, v2, v3, "Received request to refresh uploadToken", v4, 2u);
    MEMORY[0x1A624F870](v4, -1, -1);
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v5;
  *uint64_t v5 = v0;
  v5[1] = AttachmentLedgerTopic.refreshUploadToken();
  return AttachmentLedgerTopic.fetchTopic(function:line:)(v0 + 16, 0xD000000000000014, 0x80000001A3900F00, 352);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AttachmentLedgerTopic.refreshUploadToken();
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.refreshUploadToken();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(void);
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v16 = v0;
  *(unsigned char *)(v0 + 120) = 8;
  if (dispatch thunk of StateMachine.execute(_:)())
  {
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v1);
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 56) + **(int **)(v2 + 56));
    os_log_type_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v3;
    NSObject *v3 = v0;
    v3[1] = AttachmentLedgerTopic.refreshUploadToken();
    uint64_t v4 = *(void *)(v0 + 64);
    return v14(v4, v1, v2);
  }
  else
  {
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v15 = v9;
      *(_DWORD *)unint64_t v8 = 136315138;
      swift_retain();
      uint64_t v10 = AttachmentLedgerTopic.description.getter();
      uint64_t v12 = v11;
      swift_release();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A375F000, v6, v7, "Dropping to refresh uploadToken because state of AttachmentLedgerTopic is invalid %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v9, -1, -1);
      MEMORY[0x1A624F870](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors();
    swift_allocError();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AttachmentLedgerTopic.refreshUploadToken();
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.requestUploadToken();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AttachmentLedgerTopic.requestDownloadToken(for:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[12] = v4;
  v3[13] = *(void *)(v4 - 8);
  v3[14] = swift_task_alloc();
  return MEMORY[0x1F4188298](AttachmentLedgerTopic.requestDownloadToken(for:), 0, 0);
}

uint64_t AttachmentLedgerTopic.requestDownloadToken(for:)()
{
  uint64_t v19 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[10];
  uint64_t v5 = type metadata accessor for Logger();
  v0[15] = __swift_project_value_buffer(v5, (uint64_t)static Log.attachmentLedgerTopic);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v11 = v0[12];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_1A375F000, v6, v7, "Received request for downloadToken on attachment: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v13, -1, -1);
    MEMORY[0x1A624F870](v12, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[14], v0[12]);
  }

  uint64_t v16 = (void *)swift_task_alloc();
  v0[16] = v16;
  *uint64_t v16 = v0;
  v16[1] = AttachmentLedgerTopic.requestDownloadToken(for:);
  return AttachmentLedgerTopic.fetchTopic(function:line:)((uint64_t)(v0 + 2), 0xD00000000000001ALL, 0x80000001A3900F20, 364);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AttachmentLedgerTopic.requestDownloadToken(for:);
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.requestDownloadToken(for:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void);
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = v0;
  *(unsigned char *)(v0 + 160) = 7;
  if (dispatch thunk of StateMachine.execute(_:)())
  {
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v1);
    unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 64) + **(int **)(v2 + 64));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v3;
    void *v3 = v0;
    v3[1] = AttachmentLedgerTopic.requestDownloadToken(for:);
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t v5 = *(void *)(v0 + 80);
    return v15(v4, v5, v1, v2);
  }
  else
  {
    swift_retain_n();
    os_log_type_t v7 = Logger.logObject.getter();
    BOOL v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v16 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_retain();
      uint64_t v11 = AttachmentLedgerTopic.description.getter();
      uint64_t v13 = v12;
      swift_release();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A375F000, v7, v8, "Dropping request for downloadToken because state machine of AttachmentLedgerTopic is invalid %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v10, -1, -1);
      MEMORY[0x1A624F870](v9, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors();
    swift_allocError();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AttachmentLedgerTopic.requestDownloadToken(for:);
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.requestDownloadToken(for:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AttachmentLedgerTopic.UploadRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t AttachmentLedgerTopic.UploadRequest.id.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.id.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.key.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 20);
  uint64_t v4 = type metadata accessor for SymmetricKey();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AttachmentLedgerTopic.UploadRequest.key.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 20);
  uint64_t v4 = type metadata accessor for SymmetricKey();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.key.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.assetSkeleton.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 24);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t AttachmentLedgerTopic.UploadRequest.assetSkeleton.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 24);
  uint64_t result = outlined consume of Data._Representation(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.assetSkeleton.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.developerMetadata.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 28);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data?(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t AttachmentLedgerTopic.UploadRequest.developerMetadata.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 28);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.developerMetadata.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.storageLocation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 32);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AttachmentLedgerTopic.UploadRequest.storageLocation.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 32);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.storageLocation.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.fileHash.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 36);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t AttachmentLedgerTopic.UploadRequest.fileHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 36);
  uint64_t result = outlined consume of Data._Representation(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.fileHash.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.refSignature.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 40);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data._Representation(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t AttachmentLedgerTopic.UploadRequest.refSignature.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 40);
  uint64_t result = outlined consume of Data._Representation(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.refSignature.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.init(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(a9, a1, v20);
  unint64_t v21 = (int *)type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  uint64_t v22 = a9 + v21[5];
  uint64_t v23 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v22, a2, v23);
  uint64_t v24 = (void *)(a9 + v21[6]);
  *uint64_t v24 = a3;
  v24[1] = a4;
  os_log_type_t v25 = (void *)(a9 + v21[7]);
  *os_log_type_t v25 = a5;
  v25[1] = a6;
  uint64_t v26 = a9 + v21[8];
  uint64_t v27 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v26, a7, v27);
  uint64_t v29 = (void *)(a9 + v21[9]);
  *uint64_t v29 = a8;
  v29[1] = a10;
  uint64_t v30 = (void *)(a9 + v21[10]);
  *uint64_t v30 = a11;
  v30[1] = a12;
  return result;
}

uint64_t AttachmentLedgerTopic.upload(request:)(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v3 = type metadata accessor for TaskPriority();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedgerTopic.UploadRequest?);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  v2[20] = v4;
  v2[21] = *(void *)(v4 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  return MEMORY[0x1F4188298](AttachmentLedgerTopic.upload(request:), 0, 0);
}

uint64_t AttachmentLedgerTopic.upload(request:)()
{
  unint64_t v31 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[25];
  uint64_t v3 = type metadata accessor for Logger();
  v0[26] = __swift_project_value_buffer(v3, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of AttachmentLedgerTopic.UploadRequest(v1, v2, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[25];
  if (v6)
  {
    os_log_type_t v28 = v5;
    log = v4;
    uint64_t v9 = v0[20];
    uint64_t v8 = v0[21];
    uint64_t v11 = v0[18];
    uint64_t v10 = v0[19];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v30 = v27;
    *(_DWORD *)uint64_t v12 = 136315394;
    outlined init with copy of AttachmentLedgerTopic.UploadRequest(v7, v10, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v9);
    outlined init with copy of URL?(v10, v11, &demangling cache variable for type metadata for AttachmentLedgerTopic.UploadRequest?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v9) == 1)
    {
      unint64_t v13 = 0xE300000000000000;
      uint64_t v14 = 7104878;
    }
    else
    {
      uint64_t v15 = v0[23];
      uint64_t v16 = v0[24];
      outlined init with take of AttachmentLedgerTopic.UploadRequest(v0[18], v16, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
      outlined init with copy of AttachmentLedgerTopic.UploadRequest(v16, v15, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
      uint64_t v14 = String.init<A>(reflecting:)();
      unint64_t v13 = v17;
      outlined destroy of AttachmentLedgerTopic.UploadRequest(v16, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    }
    uint64_t v18 = v0[25];
    uint64_t v19 = v0[14];
    uint64_t v20 = v0[15];
    uint64_t v21 = v0[13];
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[19], &demangling cache variable for type metadata for AttachmentLedgerTopic.UploadRequest?);
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedgerTopic.UploadRequest(v18, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    *(_WORD *)(v12 + 12) = 2080;
    static Task<>.currentPriority.getter();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, MEMORY[0x1E4FBCFE8]);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v24 = v23;
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, log, v28, "Received uploadRequest %s with priority: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v27, -1, -1);
    MEMORY[0x1A624F870](v12, -1, -1);
  }
  else
  {
    outlined destroy of AttachmentLedgerTopic.UploadRequest(v0[25], type metadata accessor for AttachmentLedgerTopic.UploadRequest);
  }
  os_log_type_t v25 = (void *)swift_task_alloc();
  v0[27] = v25;
  *os_log_type_t v25 = v0;
  v25[1] = AttachmentLedgerTopic.upload(request:);
  return AttachmentLedgerTopic.fetchTopic(function:line:)((uint64_t)(v0 + 2), 0xD000000000000010, 0x80000001A3900F40, 387);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AttachmentLedgerTopic.upload(request:);
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.upload(request:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t (*v28)(void);
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  os_log_type_t v34 = v0;
  *(unsigned char *)(v0 + 248) = 9;
  if (dispatch thunk of StateMachine.execute(_:)())
  {
    uint64_t v1 = *(void *)(v0 + 160);
    uint64_t v2 = *(void *)(v0 + 88);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v3 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v4);
    os_log_type_t v5 = *(int *)(v1 + 40);
    BOOL v6 = *(void *)(v2 + *(int *)(v1 + 36) + 8);
    uint64_t v7 = *(void *)(v2 + v5);
    uint64_t v8 = *(void *)(v2 + v5 + 8);
    uint64_t v30 = *(void *)(v3 + 72) + **(int **)(v3 + 72);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v9;
    *uint64_t v9 = v0;
    v9[1] = AttachmentLedgerTopic.upload(request:);
    unint64_t v39 = v4;
    int v40 = v3;
    int v37 = v7;
    uint64_t v38 = v8;
    uint64_t v36 = v6;
    __asm { BRAA            X9, X16 }
  }
  outlined init with copy of AttachmentLedgerTopic.UploadRequest(*(void *)(v0 + 88), *(void *)(v0 + 176), type metadata accessor for AttachmentLedgerTopic.UploadRequest);
  swift_retain_n();
  uint64_t v10 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.error.getter();
  uint64_t v12 = os_log_type_enabled(v10, v11);
  unint64_t v13 = *(void *)(v0 + 176);
  if (v12)
  {
    unint64_t v31 = v11;
    uint64_t v15 = *(void *)(v0 + 160);
    uint64_t v14 = *(void *)(v0 + 168);
    unint64_t v17 = *(void *)(v0 + 128);
    uint64_t v16 = *(void *)(v0 + 136);
    uint64_t v18 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = v32;
    *(_DWORD *)uint64_t v18 = 136315394;
    outlined init with copy of AttachmentLedgerTopic.UploadRequest(v13, v16, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v15);
    outlined init with copy of URL?(v16, v17, &demangling cache variable for type metadata for AttachmentLedgerTopic.UploadRequest?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v17, 1, v15) == 1)
    {
      uint64_t v19 = 0xE300000000000000;
      uint64_t v20 = 7104878;
    }
    else
    {
      uint64_t v21 = *(void *)(v0 + 184);
      uint64_t v22 = *(void *)(v0 + 192);
      outlined init with take of AttachmentLedgerTopic.UploadRequest(*(void *)(v0 + 128), v22, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
      outlined init with copy of AttachmentLedgerTopic.UploadRequest(v22, v21, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
      uint64_t v20 = String.init<A>(reflecting:)();
      uint64_t v19 = v23;
      outlined destroy of AttachmentLedgerTopic.UploadRequest(v22, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    }
    unint64_t v24 = *(void *)(v0 + 176);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 136), &demangling cache variable for type metadata for AttachmentLedgerTopic.UploadRequest?);
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedgerTopic.UploadRequest(v24, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    *(_WORD *)(v18 + 12) = 2080;
    swift_retain();
    os_log_type_t v25 = AttachmentLedgerTopic.description.getter();
    uint64_t v27 = v26;
    swift_release();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v10, v31, "Dropping request %s because state of AttachmentLedgerTopic is invalid %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v32, -1, -1);
    MEMORY[0x1A624F870](v18, -1, -1);
  }
  else
  {
    outlined destroy of AttachmentLedgerTopic.UploadRequest(*(void *)(v0 + 176), type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    swift_release_n();
  }

  lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors();
  swift_allocError();
  swift_willThrow();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AttachmentLedgerTopic.upload(request:);
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.upload(request:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AttachmentLedgerTopic.updateProgress(on:with:)(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  uint64_t v4 = type metadata accessor for TaskPriority();
  v3[14] = v4;
  v3[15] = *(void *)(v4 - 8);
  v3[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Attachment.MMCSMetadata.UploadStatus();
  v3[19] = v5;
  v3[20] = *(void *)(v5 - 8);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  return MEMORY[0x1F4188298](AttachmentLedgerTopic.updateProgress(on:with:), 0, 0);
}

uint64_t AttachmentLedgerTopic.updateProgress(on:with:)()
{
  int v40 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[12];
  uint64_t v5 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v5, (uint64_t)static Log.attachmentLedgerTopic);
  BOOL v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v4, v2);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[23];
  uint64_t v12 = v0[19];
  uint64_t v11 = v0[20];
  if (v9)
  {
    os_log_type_t v37 = v8;
    log = v7;
    uint64_t v13 = v0[18];
    uint64_t v34 = v0[17];
    uint64_t v14 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v39 = v36;
    *(_DWORD *)uint64_t v14 = 136315650;
    uint64_t v15 = AttachmentLedgerTopic.description.getter();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v14 + 12) = 2080;
    v6(v13, v10, v12);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v12);
    outlined init with copy of URL?(v13, v34, &demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v34, 1, v12) == 1)
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v18 = 7104878;
    }
    else
    {
      uint64_t v19 = v0[21];
      uint64_t v20 = v0[22];
      uint64_t v21 = v0[19];
      uint64_t v22 = v0[20];
      (*(void (**)(uint64_t, void, uint64_t))(v22 + 32))(v20, v0[17], v21);
      v6(v19, v20, v21);
      uint64_t v18 = String.init<A>(reflecting:)();
      unint64_t v17 = v23;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    }
    uint64_t v35 = v0[23];
    uint64_t v24 = v0[19];
    uint64_t v25 = v0[20];
    uint64_t v27 = v0[15];
    uint64_t v26 = v0[16];
    uint64_t v28 = v0[14];
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[18], &demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v35, v24);
    *(_WORD *)(v14 + 22) = 2080;
    static Task<>.currentPriority.getter();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, MEMORY[0x1E4FBCFE8]);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v31 = v30;
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v7 = log;
    _os_log_impl(&dword_1A375F000, log, v37, "%s Received request to update progressBlob with status: %s with priority: %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v36, -1, -1);
    MEMORY[0x1A624F870](v14, -1, -1);
  }
  else
  {
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }

  uint64_t v32 = (void *)swift_task_alloc();
  v0[25] = v32;
  *uint64_t v32 = v0;
  v32[1] = AttachmentLedgerTopic.updateProgress(on:with:);
  return AttachmentLedgerTopic.fetchTopic(function:line:)((uint64_t)(v0 + 2), 0xD000000000000018, 0x80000001A3900F60, 399);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AttachmentLedgerTopic.updateProgress(on:with:);
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.updateProgress(on:with:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void);
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  unint64_t v17 = v0;
  *(unsigned char *)(v0 + 232) = 10;
  if (dispatch thunk of StateMachine.execute(_:)())
  {
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v1);
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 80) + **(int **)(v2 + 80));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v3;
    void *v3 = v0;
    v3[1] = AttachmentLedgerTopic.updateProgress(on:with:);
    uint64_t v5 = *(void *)(v0 + 88);
    uint64_t v4 = *(void *)(v0 + 96);
    return v15(v5, v4, v1, v2);
  }
  else
  {
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      BOOL v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      unint64_t v16 = v10;
      *(_DWORD *)BOOL v9 = 136315138;
      swift_retain();
      uint64_t v11 = AttachmentLedgerTopic.description.getter();
      uint64_t v13 = v12;
      swift_release();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A375F000, v7, v8, "Dropping request to update progressBlob because state of AttachmentLedgerTopic is invalid %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v10, -1, -1);
      MEMORY[0x1A624F870](v9, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors();
    swift_allocError();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AttachmentLedgerTopic.updateProgress(on:with:);
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.updateProgress(on:with:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AttachmentLedgerTopic.description.getter()
{
  _StringGuts.grow(_:)(51);
  v1._object = (void *)0x80000001A3900F80;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 0x203A656D616E202CLL;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x203A657461747320;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  dispatch thunk of StateMachine.currentState.getter();
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t AttachmentLedgerTopic.remove(id:)(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](AttachmentLedgerTopic.remove(id:), 0, 0);
}

uint64_t AttachmentLedgerTopic.remove(id:)()
{
  uint64_t v21 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v5 = type metadata accessor for Logger();
  v0[16] = __swift_project_value_buffer(v5, (uint64_t)static Log.attachmentLedgerTopic);
  Swift::String v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[17] = v6;
  v0[18] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  Swift::String v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[15];
  uint64_t v11 = v0[12];
  uint64_t v12 = v0[13];
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = v19;
    *(_DWORD *)uint64_t v13 = 136315138;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl(&dword_1A375F000, v7, v8, "Received removal request %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v19, -1, -1);
    MEMORY[0x1A624F870](v13, -1, -1);
  }
  else
  {
    unint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
  }

  v0[19] = v16;
  unint64_t v17 = (void *)swift_task_alloc();
  v0[20] = v17;
  *unint64_t v17 = v0;
  v17[1] = AttachmentLedgerTopic.remove(id:);
  return AttachmentLedgerTopic.fetchTopic(function:line:)((uint64_t)(v0 + 2), 0x692865766F6D6572, 0xEB00000000293A64, 411);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AttachmentLedgerTopic.remove(id:);
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.remove(id:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t (*v19)(void);
  os_log_type_t type;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23[2];
  uint64_t v24;
  uint64_t v25;

  uint64_t v24 = v0;
  *(unsigned char *)(v0 + 192) = 11;
  uint64_t v1 = v0 + 16;
  if (dispatch thunk of StateMachine.execute(_:)())
  {
    uint64_t v2 = *(void *)(v0 + 40);
    uint64_t v3 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v2);
    uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 88) + **(int **)(v3 + 88));
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v4;
    *uint64_t v4 = v0;
    v4[1] = AttachmentLedgerTopic.remove(id:);
    uint64_t v5 = *(void *)(v0 + 80);
    return v21(v5, v2, v3);
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 136))(*(void *)(v0 + 112), *(void *)(v0 + 80), *(void *)(v0 + 96));
    swift_retain_n();
    Swift::String v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v12 = *(void *)(v0 + 96);
    if (v9)
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v23[0] = v22;
      *(_DWORD *)uint64_t v13 = 136315394;
      os_log_type_t type = v8;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v10(v11, v12);
      *(_WORD *)(v13 + 12) = 2080;
      swift_retain();
      unint64_t v16 = AttachmentLedgerTopic.description.getter();
      uint64_t v18 = v17;
      swift_release();
      *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v23);
      uint64_t v1 = v0 + 16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A375F000, v7, type, "Dropping request to remove attachment %s because state of AttachmentLedgerTopic is invalid %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v22, -1, -1);
      MEMORY[0x1A624F870](v13, -1, -1);
    }
    else
    {
      v10(*(void *)(v0 + 112), *(void *)(v0 + 96));
      swift_release_n();
    }
    lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors();
    swift_allocError();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AttachmentLedgerTopic.remove(id:);
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.remove(id:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttachmentLedgerTopic()
{
  return AttachmentLedgerTopic.description.getter();
}

uint64_t AttachmentLedgerTopic.BootstrapTopicInfo.dataCryptorProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AudioSessionAssertionManager(v1, a1);
}

uint64_t AttachmentLedgerTopic.BootstrapTopicInfo.attachments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static AttachmentLedgerTopic.Errors.== infix(_:_:)()
{
  return 1;
}

void AttachmentLedgerTopic.Errors.hash(into:)()
{
}

Swift::Int AttachmentLedgerTopic.Errors.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttachmentLedgerTopic.Errors()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttachmentLedgerTopic.Errors()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttachmentLedgerTopic.Errors()
{
  return Hasher._finalize()();
}

BOOL static AttachmentLedgerTopic.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AttachmentLedgerTopic.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int AttachmentLedgerTopic.State.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for DownloadAttachmentTopic.requestDownloadToken(for:) in conformance AttachmentLedgerTopic(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return AttachmentLedgerTopic.requestDownloadToken(for:)(a1, a2);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for Participant() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  int isUniquelyReferenced_nonNull_native;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  unint64_t v72;
  int64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  unint64_t v86;
  uint64_t vars8;

  int64_t v4 = type metadata accessor for Participant();
  int64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v79 = (uint64_t)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  unint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v80 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v78 = (uint64_t)&v66 - v11;
  MEMORY[0x1F4188790](v10);
  unint64_t v14 = (char *)&v66 - v13;
  unint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *v1;
  unint64_t v17 = *(void *)(*v1 + 16);
  unint64_t v18 = v17 + v15;
  if (__OFADD__(v17, v15))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v2 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v16;
  uint64_t v81 = v4;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v20 = *(void *)(v16 + 24) >> 1, v20 < v18))
  {
    if (v17 <= v18) {
      BOOL v21 = v17 + v15;
    }
    else {
      BOOL v21 = v17;
    }
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v21, 1, v16);
    *uint64_t v1 = v16;
    uint64_t v20 = *(void *)(v16 + 24) >> 1;
  }
  uint64_t v22 = *(void *)(v16 + 16);
  unint64_t v17 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v18 = *(void *)(v5 + 72);
  int64_t v23 = v20 - v22;
  uint64_t v24 = specialized Sequence._copySequenceContents(initializing:)(&v82, v16 + v17 + v18 * v22, v20 - v22, a1);
  if (v24 < v15) {
    goto LABEL_17;
  }
  if (v24)
  {
    uint64_t v26 = *(void *)(v16 + 16);
    uint64_t v27 = __OFADD__(v26, v24);
    uint64_t v28 = v26 + v24;
    if (v27)
    {
      __break(1u);
      goto LABEL_22;
    }
    *(void *)(v16 + 16) = v28;
  }
  if (v24 == v23)
  {
LABEL_18:
    uint64_t v68 = *(void *)(v16 + 16);
    uint64_t v25 = v82;
    int64_t v23 = v85;
    uint64_t v76 = v83;
    id v77 = v84;
    if (v86)
    {
      uint64_t v75 = (v86 - 1) & v86;
      unint64_t v30 = __clz(__rbit64(v86)) | (v85 << 6);
      unint64_t v31 = v81;
LABEL_20:
      uint64_t v32 = v25;
      outlined init with copy of AttachmentLedgerTopic.UploadRequest(*(void *)(v25 + 48) + v30 * v18, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
      uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v70(v14, 0, 1, v31);
      unint64_t v15 = v23;
      goto LABEL_44;
    }
LABEL_22:
    uint64_t v33 = v23 + 1;
    unint64_t v31 = v81;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
LABEL_42:
      unint64_t v31 = v81;
      uint64_t v25 = v12;
    }
    else
    {
      uint64_t v34 = (unint64_t)(v77 + 64) >> 6;
      unint64_t v15 = v23;
      if (v33 < v34)
      {
        uint64_t v35 = *(void *)(v76 + 8 * v33);
        if (v35)
        {
LABEL_25:
          uint64_t v75 = (v35 - 1) & v35;
          unint64_t v30 = __clz(__rbit64(v35)) + (v33 << 6);
          int64_t v23 = v33;
          goto LABEL_20;
        }
        uint64_t v36 = v23 + 2;
        unint64_t v15 = v23 + 1;
        if (v23 + 2 < v34)
        {
          uint64_t v12 = v25;
          uint64_t v35 = *(void *)(v76 + 8 * v36);
          if (v35)
          {
LABEL_28:
            uint64_t v33 = v36;
LABEL_29:
            unint64_t v31 = v81;
            goto LABEL_25;
          }
          unint64_t v15 = v23 + 2;
          unint64_t v31 = v81;
          if (v23 + 3 < v34)
          {
            uint64_t v35 = *(void *)(v76 + 8 * (v23 + 3));
            if (v35)
            {
              uint64_t v33 = v23 + 3;
              goto LABEL_29;
            }
            uint64_t v36 = v23 + 4;
            unint64_t v15 = v23 + 3;
            unint64_t v31 = v81;
            if (v23 + 4 < v34)
            {
              uint64_t v35 = *(void *)(v76 + 8 * v36);
              if (v35) {
                goto LABEL_28;
              }
              uint64_t v33 = v23 + 5;
              unint64_t v15 = v23 + 4;
              unint64_t v31 = v81;
              if (v23 + 5 < v34)
              {
                uint64_t v35 = *(void *)(v76 + 8 * v33);
                if (v35) {
                  goto LABEL_25;
                }
                unint64_t v15 = v34 - 1;
                os_log_type_t v37 = v23 + 6;
                do
                {
                  if (v34 == v37) {
                    goto LABEL_42;
                  }
                  uint64_t v35 = *(void *)(v76 + 8 * v37++);
                }
                while (!v35);
                uint64_t v33 = v37 - 1;
                goto LABEL_29;
              }
            }
          }
        }
      }
    }
    uint64_t v32 = v25;
    uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v70(v14, 1, 1, v31);
    uint64_t v75 = 0;
LABEL_44:
    uint64_t v38 = v32;
    uint64_t v82 = v32;
    uint64_t v83 = v76;
    uint64_t v84 = v77;
    uint64_t v85 = v15;
    unint64_t v71 = v15;
    double v86 = v75;
    uint64_t v39 = v78;
    outlined init with copy of URL?((uint64_t)v14, v78, &demangling cache variable for type metadata for Participant?);
    uint64_t v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    if (v74(v39, 1, v31) == 1)
    {
      int v40 = v78;
LABEL_46:
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v14, &demangling cache variable for type metadata for Participant?);
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      return outlined destroy of OS_dispatch_queue.SchedulerOptions?(v40, &demangling cache variable for type metadata for Participant?);
    }
    unint64_t v69 = v5 + 56;
    int v40 = v78;
    uint64_t v41 = v68;
    while (1)
    {
      uint64_t v67 = v38;
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v40, &demangling cache variable for type metadata for Participant?);
      os_log_type_t v42 = *v1;
      int v43 = *(void *)(*v1 + 24);
      uint64_t v44 = v43 >> 1;
      uint64_t v68 = v41;
      if ((uint64_t)(v43 >> 1) < v41 + 1)
      {
        os_log_type_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v41 + 1, 1, v42);
        *uint64_t v1 = v42;
        uint64_t v44 = *(void *)(v42 + 24) >> 1;
      }
      uint64_t v45 = v80;
      outlined init with copy of URL?((uint64_t)v14, v80, &demangling cache variable for type metadata for Participant?);
      if (v74(v45, 1, v81) == 1)
      {
        uint64_t v46 = v45;
        uint64_t v38 = v67;
        uint64_t v41 = v68;
LABEL_87:
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v46, &demangling cache variable for type metadata for Participant?);
        int v40 = v78;
        goto LABEL_49;
      }
      unint64_t v72 = v42 + v17;
      int v47 = v79;
      outlined init with take of AttachmentLedgerTopic.UploadRequest(v45, v79, (uint64_t (*)(void))type metadata accessor for Participant);
      uint64_t v38 = v67;
      unint64_t v48 = v68 < v44;
      unint64_t v49 = v68 <= v44 ? v44 : v68;
      os_log_t v73 = v49;
      uint64_t v50 = v47;
      unint64_t v51 = v68;
      if (v48) {
        break;
      }
LABEL_48:
      outlined destroy of AttachmentLedgerTopic.UploadRequest(v50, (uint64_t (*)(void))type metadata accessor for Participant);
      uint64_t v41 = v73;
      int v40 = v78;
LABEL_49:
      *(void *)(*v1 + 16) = v41;
      outlined init with copy of URL?((uint64_t)v14, v40, &demangling cache variable for type metadata for Participant?);
      if (v74(v40, 1, v81) == 1) {
        goto LABEL_46;
      }
    }
    while (1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v14, &demangling cache variable for type metadata for Participant?);
      uint64_t result = outlined init with take of AttachmentLedgerTopic.UploadRequest(v50, v72 + v51 * v18, (uint64_t (*)(void))type metadata accessor for Participant);
      uint64_t v52 = v82;
      uint64_t v53 = v85;
      uint64_t v76 = v83;
      id v77 = v84;
      if (v86) {
        break;
      }
      uint64_t v58 = v85 + 1;
      if (__OFADD__(v85, 1))
      {
        __break(1u);
        return result;
      }
      uint64_t v59 = (unint64_t)(v77 + 64) >> 6;
      long long v60 = v85;
      if (v58 < v59)
      {
        uint64_t v61 = *(void *)(v76 + 8 * v58);
        if (v61) {
          goto LABEL_65;
        }
        long long v60 = v85 + 1;
        if (v85 + 2 < v59)
        {
          uint64_t v61 = *(void *)(v76 + 8 * (v85 + 2));
          if (v61)
          {
            uint64_t v58 = v85 + 2;
            goto LABEL_65;
          }
          long long v60 = v85 + 2;
          if (v85 + 3 < v59)
          {
            uint64_t v61 = *(void *)(v76 + 8 * (v85 + 3));
            if (v61)
            {
              uint64_t v58 = v85 + 3;
              goto LABEL_65;
            }
            long long v60 = v85 + 3;
            if (v85 + 4 < v59)
            {
              uint64_t v61 = *(void *)(v76 + 8 * (v85 + 4));
              if (v61)
              {
                uint64_t v58 = v85 + 4;
LABEL_65:
                unint64_t v54 = v51;
                uint64_t v75 = (v61 - 1) & v61;
                uint64_t v55 = __clz(__rbit64(v61)) + (v58 << 6);
                uint64_t v53 = v58;
LABEL_61:
                outlined init with copy of AttachmentLedgerTopic.UploadRequest(*(void *)(v82 + 48) + v55 * v18, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Participant);
                long long v56 = v81;
                v70(v14, 0, 1, v81);
                uint64_t v57 = v53;
                uint64_t v50 = v79;
                goto LABEL_83;
              }
              uint64_t v58 = v85 + 5;
              long long v60 = v85 + 4;
              uint64_t v50 = v79;
              if (v85 + 5 < v59)
              {
                uint64_t v61 = *(void *)(v76 + 8 * v58);
                if (v61) {
                  goto LABEL_65;
                }
                uint64_t v62 = v85 + 6;
                while (v59 != v62)
                {
                  uint64_t v61 = *(void *)(v76 + 8 * v62++);
                  if (v61)
                  {
                    uint64_t v58 = v62 - 1;
                    goto LABEL_65;
                  }
                }
                uint64_t v50 = v79;
                long long v60 = v59 - 1;
              }
            }
          }
        }
      }
      unint64_t v54 = v51;
      long long v56 = v81;
      unint64_t v63 = v60;
      v70(v14, 1, 1, v81);
      uint64_t v57 = v63;
      uint64_t v75 = 0;
LABEL_83:
      uint64_t v64 = v54 + 1;
      uint64_t v38 = v52;
      uint64_t v82 = v52;
      uint64_t v83 = v76;
      uint64_t v84 = v77;
      uint64_t v85 = v57;
      unint64_t v71 = v57;
      double v86 = v75;
      uint64_t v65 = v80;
      outlined init with copy of URL?((uint64_t)v14, v80, &demangling cache variable for type metadata for Participant?);
      if (v74(v65, 1, v56) == 1)
      {
        uint64_t v41 = v64;
        uint64_t v46 = v65;
        goto LABEL_87;
      }
      outlined init with take of AttachmentLedgerTopic.UploadRequest(v65, v50, (uint64_t (*)(void))type metadata accessor for Participant);
      unint64_t v51 = v64;
      if (v64 == v73) {
        goto LABEL_48;
      }
    }
    unint64_t v54 = v51;
    uint64_t v75 = (v86 - 1) & v86;
    uint64_t v55 = __clz(__rbit64(v86)) | (v85 << 6);
    goto LABEL_61;
  }

  return outlined consume of [AnyHashable : Any].Iterator._Variant();
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    unint64_t v14 = v4 + v2;
  }
  else {
    unint64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[7 * v8 + 4];
  if (a1 + 32 < v9 + 56 * v2 && v9 < a1 + 32 + 56 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v6 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v2 = v6;
  uint64_t v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v7 = 1;
  }
  if (v6 >> 62) {
    goto LABEL_27;
  }
  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    swift_bridgeObjectRetain();
    unint64_t v6 = MEMORY[0x1A624E910](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *unint64_t v2 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t specialized Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return MEMORY[0x1F4188298](specialized Clock.sleep(for:tolerance:), 0, 0);
}

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x1E4FBD1A8]);
  dispatch thunk of Clock.now.getter();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, MEMORY[0x1E4FBD178]);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized Clock.sleep(for:tolerance:);
  uint64_t v8 = v0[11];
  return MEMORY[0x1F4188178](v8, v0 + 2, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return MEMORY[0x1F4188298](specialized Clock.sleep(for:tolerance:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x1A624E900](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    uint64_t *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x1A624E900](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    uint64_t *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State()
{
  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State;
  if (!lazy protocol witness table cache variable for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State;
  if (!lazy protocol witness table cache variable for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event()
{
  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event;
  if (!lazy protocol witness table cache variable for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event;
  if (!lazy protocol witness table cache variable for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event);
  }
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [Attachment] and conformance [A], &demangling cache variable for type metadata for [Attachment]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Attachment]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for Attachment();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [GroupSession<AnyGroupActivity>] and conformance [A], &demangling cache variable for type metadata for [GroupSession<AnyGroupActivity>]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSession<AnyGroupActivity>]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AttachmentLedgerTopic(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedgerTopic);
}

uint64_t sub_1A37E336C()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(void **a1)
{
  return closure #1 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(a1);
}

void partial apply for closure #2 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(void *a1)
{
}

uint64_t outlined destroy of AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t a1)
{
  return a1;
}

uint64_t sub_1A37E33E4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:)(a1, v4, v5, v6, v7, v9, v8);
}

void partial apply for closure #2 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:)()
{
}

unint64_t lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors;
  if (!lazy protocol witness table cache variable for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors;
  if (!lazy protocol witness table cache variable for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors);
  }
  return result;
}

uint64_t type metadata accessor for AttachmentLedgerTopic.UploadRequest(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedgerTopic.UploadRequest);
}

uint64_t sub_1A37E362C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 344))();
}

uint64_t sub_1A37E3678(uint64_t a1, uint64_t a2)
{
  outlined init with copy of URL?(a1, (uint64_t)v4, &demangling cache variable for type metadata for TopicCryptorProvider?);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 352))(v4);
}

uint64_t sub_1A37E36F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 368))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37E3744(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 376);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A37E37A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 400))();
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

uint64_t sub_1A37E37FC(double *a1, uint64_t a2)
{
  double v2 = *a1;
  double v3 = a1[1];
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3);
  uint64_t v6 = *(uint64_t (**)(void, uint64_t, uint64_t, double))(**(void **)a2 + 408);
  swift_bridgeObjectRetain();
  return v6(*(void *)&v2, v5, v4, v3);
}

uint64_t ObjC metadata update function for AttachmentLedgerTopic()
{
  return type metadata accessor for AttachmentLedgerTopic(0);
}

void type metadata completion function for AttachmentLedgerTopic()
{
  type metadata accessor for CurrentSubject<PluginAttachmentLedgerTopicProvider?>(319, &lazy cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CurrentSubject<PluginAttachmentLedgerTopicProvider?>(319, &lazy cache variable for type metadata for CurrentSubject<[Attachment]>, &demangling cache variable for type metadata for [Attachment]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for AttachmentLedgerTopic(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AttachmentLedgerTopic);
}

uint64_t dispatch thunk of AttachmentLedgerTopic.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.dataCryptor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.dataCryptor.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.dataCryptor.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.attachments.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.attachments.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.attachments.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.$attachments.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.retryInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.retryInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.retryInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.__allocating_init(name:retainRefOnStart:pluginGenerator:)()
{
  return (*(uint64_t (**)(void))(v0 + 424))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.subscribe(with:pendingAttachments:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.unsubscribe()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

void type metadata accessor for CurrentSubject<PluginAttachmentLedgerTopicProvider?>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v4 = type metadata accessor for CurrentSubject();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for AttachmentLedgerTopic.RetryInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttachmentLedgerTopic.RetryInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AttachmentLedgerTopic.RetryInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for AttachmentLedgerTopic.RetryInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedgerTopic.RetryInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedgerTopic.RetryInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedgerTopic.RetryInfo()
{
  return &type metadata for AttachmentLedgerTopic.RetryInfo;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedgerTopic.UploadRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = (uint64_t *)((char *)a1 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    outlined copy of Data._Representation(*v14, v16);
    *uint64_t v13 = v15;
    v13[1] = v16;
    uint64_t v17 = a3[7];
    unint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    unint64_t v20 = *((void *)v19 + 1);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
    }
    else
    {
      uint64_t v22 = *(void *)v19;
      outlined copy of Data._Representation(*(void *)v19, *((void *)v19 + 1));
      *(void *)unint64_t v18 = v22;
      *((void *)v18 + 1) = v20;
    }
    uint64_t v23 = a3[8];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
    uint64_t v27 = a3[9];
    uint64_t v28 = (uint64_t *)((char *)a1 + v27);
    uint64_t v29 = (uint64_t *)((char *)a2 + v27);
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
    outlined copy of Data._Representation(*v29, v31);
    *uint64_t v28 = v30;
    v28[1] = v31;
    uint64_t v32 = a3[10];
    uint64_t v33 = (uint64_t *)((char *)a1 + v32);
    uint64_t v34 = (uint64_t *)((char *)a2 + v32);
    uint64_t v35 = *v34;
    unint64_t v36 = v34[1];
    outlined copy of Data._Representation(*v34, v36);
    *uint64_t v33 = v35;
    v33[1] = v36;
  }
  return a1;
}

uint64_t destroy for AttachmentLedgerTopic.UploadRequest(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  outlined consume of Data._Representation(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  uint64_t v7 = (uint64_t *)(a1 + a2[7]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    outlined consume of Data._Representation(*v7, v8);
  }
  uint64_t v9 = a1 + a2[8];
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  outlined consume of Data._Representation(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  uint64_t v11 = (uint64_t *)(a1 + a2[10]);
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];

  return outlined consume of Data._Representation(v12, v13);
}

uint64_t initializeWithCopy for AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  unint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  outlined copy of Data._Representation(*v13, v15);
  *uint64_t v12 = v14;
  v12[1] = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  unint64_t v18 = (uint64_t *)(a2 + v16);
  unint64_t v19 = v18[1];
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  }
  else
  {
    uint64_t v20 = *v18;
    outlined copy of Data._Representation(*v18, v18[1]);
    *(void *)uint64_t v17 = v20;
    *(void *)(v17 + 8) = v19;
  }
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
  uint64_t v25 = a3[9];
  uint64_t v26 = (uint64_t *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];
  outlined copy of Data._Representation(*v27, v29);
  *uint64_t v26 = v28;
  v26[1] = v29;
  uint64_t v30 = a3[10];
  unint64_t v31 = (uint64_t *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v33 = *v32;
  unint64_t v34 = v32[1];
  outlined copy of Data._Representation(*v32, v34);
  *unint64_t v31 = v33;
  v31[1] = v34;
  return a1;
}

uint64_t assignWithCopy for AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  unint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  outlined copy of Data._Representation(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  outlined consume of Data._Representation(v16, v17);
  uint64_t v18 = a3[7];
  unint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  unint64_t v21 = *(void *)(a2 + v18 + 8);
  if (*(void *)(a1 + v18 + 8) >> 60 != 15)
  {
    if (v21 >> 60 != 15)
    {
      uint64_t v23 = *v20;
      outlined copy of Data._Representation(v23, v21);
      uint64_t v24 = *v19;
      unint64_t v25 = v19[1];
      *unint64_t v19 = v23;
      v19[1] = v21;
      outlined consume of Data._Representation(v24, v25);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)v19);
    goto LABEL_6;
  }
  if (v21 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
    goto LABEL_8;
  }
  uint64_t v22 = *v20;
  outlined copy of Data._Representation(v22, v21);
  *unint64_t v19 = v22;
  v19[1] = v21;
LABEL_8:
  uint64_t v26 = a3[8];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 24))(v27, v28, v29);
  uint64_t v30 = a3[9];
  unint64_t v31 = (uint64_t *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v33 = *v32;
  unint64_t v34 = v32[1];
  outlined copy of Data._Representation(*v32, v34);
  uint64_t v35 = *v31;
  unint64_t v36 = v31[1];
  *unint64_t v31 = v33;
  v31[1] = v34;
  outlined consume of Data._Representation(v35, v36);
  uint64_t v37 = a3[10];
  uint64_t v38 = (uint64_t *)(a1 + v37);
  uint64_t v39 = (uint64_t *)(a2 + v37);
  uint64_t v40 = *v39;
  unint64_t v41 = v39[1];
  outlined copy of Data._Representation(*v39, v41);
  uint64_t v42 = *v38;
  unint64_t v43 = v38[1];
  *uint64_t v38 = v40;
  v38[1] = v41;
  outlined consume of Data._Representation(v42, v43);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  return a1;
}

uint64_t assignWithTake for AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  outlined consume of Data._Representation(v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = (uint64_t *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  unint64_t v17 = *(void *)(a1 + v14 + 8);
  if (v17 >> 60 != 15)
  {
    unint64_t v18 = v16[1];
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *v15;
      *uint64_t v15 = *v16;
      v15[1] = v18;
      outlined consume of Data._Representation(v19, v17);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)v15);
  }
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
LABEL_6:
  uint64_t v20 = a3[8];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 40))(v21, v22, v23);
  uint64_t v24 = a3[9];
  uint64_t v25 = *(void *)(a1 + v24);
  unint64_t v26 = *(void *)(a1 + v24 + 8);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  outlined consume of Data._Representation(v25, v26);
  uint64_t v27 = a3[10];
  uint64_t v28 = *(void *)(a1 + v27);
  unint64_t v29 = *(void *)(a1 + v27 + 8);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  outlined consume of Data._Representation(v28, v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A37E47C8);
}

uint64_t sub_1A37E47C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for SymmetricKey();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 12)
  {
    uint64_t v14 = *(void *)(a1 + a3[6] + 8) >> 60;
    if (((4 * v14) & 0xC) != 0) {
      return 16 - ((4 * v14) & 0xC | (v14 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v15 = type metadata accessor for URL();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[8];
    return v16(v18, a2, v17);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A37E496C);
}

uint64_t sub_1A37E496C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = type metadata accessor for SymmetricKey();
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 12)
  {
    uint64_t v15 = (void *)(a1 + a4[6]);
    *uint64_t v15 = 0;
    v15[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v16 = type metadata accessor for URL();
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a4[8];
    return v17(v19, a2, a2, v18);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedgerTopic.UploadRequest()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SymmetricKey();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for URL();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedgerTopic.BootstrapTopicInfo()
{
  return &type metadata for AttachmentLedgerTopic.BootstrapTopicInfo;
}

uint64_t getEnumTagSinglePayload for AttachmentLedgerTopic.Errors(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for AttachmentLedgerTopic.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1A37E4EE4);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedgerTopic.Errors()
{
  return &type metadata for AttachmentLedgerTopic.Errors;
}

unsigned char *storeEnumTagSinglePayload for AttachmentLedgerTopic.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A37E4FE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedgerTopic.State()
{
  return &type metadata for AttachmentLedgerTopic.State;
}

unsigned char *storeEnumTagSinglePayload for AttachmentLedgerTopic.Event(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *__n128 result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A37E50ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 11;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AttachmentLedgerTopic.Event()
{
  return &unk_1EF71ACE8;
}

uint64_t partial apply for closure #1 in AttachmentLedgerTopic.setSubscribedPluginTopic(_:)(uint64_t a1)
{
  return closure #1 in AttachmentLedgerTopic.setSubscribedPluginTopic(_:)(a1);
}

uint64_t partial apply for closure #1 in AttachmentLedgerTopic.topic.didset()
{
  return closure #1 in AttachmentLedgerTopic.topic.didset();
}

uint64_t sub_1A37E518C()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:)(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v6 = *((void *)v1 + 4);
  double v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:)(v7, a1, v4, v5, v6);
}

uint64_t sub_1A37E5290()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in closure #2 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(uint64_t a1)
{
  return closure #1 in closure #2 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(a1, *(void *)(v1 + 16), (void *)(v1 + 24));
}

uint64_t outlined init with copy of AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t static ImageRepresentationEncodingErrors.== infix(_:_:)()
{
  return 1;
}

void ImageRepresentationEncodingErrors.hash(into:)()
{
}

Swift::Int ImageRepresentationEncodingErrors.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t ImageRepresentation.Image.image.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t ImageRepresentation.Image.image.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*ImageRepresentation.Image.image.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ImageRepresentation.Image.init(image:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t ImageRepresentation.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v4 = type metadata accessor for UTType();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v23 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v8 = type metadata accessor for DataRepresentation();
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v24 = (char *)&v23 - v12;
  uint64_t v13 = *v2;
  uint64_t v14 = v2[1];
  uint64_t v16 = v2[2];
  uint64_t v15 = v2[3];
  static UTType.data.getter();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = v7;
  _OWORD v17[3] = v6;
  v17[4] = v13;
  v17[5] = v14;
  v17[6] = v16;
  v17[7] = v15;
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = v7;
  _OWORD v18[3] = v6;
  v18[4] = v13;
  v18[5] = v14;
  v18[6] = v16;
  v18[7] = v15;
  swift_retain_n();
  swift_retain_n();
  MEMORY[0x1A624D5D0](v23, &async function pointer to partial apply for closure #1 in ImageRepresentation.body.getter, v17, &async function pointer to partial apply for closure #2 in ImageRepresentation.body.getter, v18, v7, v6);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = v24;
  static TransferRepresentationBuilder.buildExpression<A>(_:)(v11, v7, v8, WitnessTable);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v25 + 8);
  v21(v11, v8);
  static TransferRepresentationBuilder.buildExpression<A>(_:)(v20, v7, v8, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v21)(v20, v8);
}

uint64_t closure #1 in ImageRepresentation.body.getter(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = closure #1 in ImageRepresentation.body.getter;
  return v6(a1);
}

uint64_t closure #1 in ImageRepresentation.body.getter(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 24) = a1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return MEMORY[0x1F4188298](closure #1 in ImageRepresentation.body.getter, 0, 0);
  }
}

id closure #1 in ImageRepresentation.body.getter()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1E050]), sel_initWithCGImage_, *(void *)(v0 + 24));
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1E018]), sel_init);
  id v3 = objc_msgSend(v2, sel_workingFormat);
  id result = objc_msgSend(v2, sel_workingColorSpace);
  if (result)
  {
    uint64_t v5 = result;
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    type metadata accessor for CIImageRepresentationOption(0);
    lazy protocol witness table accessor for type CIImageRepresentationOption and conformance CIImageRepresentationOption();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v2, sel_HEIFRepresentationOfImage_format_colorSpace_options_, v1, v3, v5, isa);

    uint64_t v8 = *(void **)(v0 + 24);
    if (v7)
    {
      uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      return (id)v12(v9, v11);
    }
    else
    {
      lazy protocol witness table accessor for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors();
      swift_allocError();
      swift_willThrow();

      uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
      return (id)v13();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in ImageRepresentation.body.getter(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.body.getter;
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *uint64_t v6 = v5;
  v6[1] = closure #1 in ImageRepresentation.body.getter;
  return v8(a1);
}

uint64_t closure #2 in ImageRepresentation.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  void v7[6] = a7;
  v7[3] = a2;
  v7[4] = a3;
  void v7[2] = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>.Continuation.BufferingPolicy);
  v7[7] = v8;
  v7[8] = *(void *)(v8 - 8);
  v7[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  v7[10] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ImageRepresentation.Image();
  v7[11] = v9;
  v7[12] = *(void *)(v9 - 8);
  v7[13] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in ImageRepresentation.body.getter, 0, 0);
}

uint64_t closure #2 in ImageRepresentation.body.getter()
{
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v7 = v0[4];
  uint64_t v6 = (int *)v0[5];
  uint64_t v8 = v0[3];
  uint64_t v9 = swift_task_alloc();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v7;
  type metadata accessor for CGImageRef(0);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v3, *MEMORY[0x1E4FBD028], v4);
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_task_dealloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v1, v2, v10);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[14] = v11;
  void *v11 = v0;
  v11[1] = closure #2 in ImageRepresentation.body.getter;
  uint64_t v12 = v0[13];
  uint64_t v13 = v0[2];
  return v15(v13, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v3 = *(void *)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #2 in ImageRepresentation.body.getter, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t objectdestroyTm_2()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #2 in ImageRepresentation.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v11 = v3[6];
  uint64_t v10 = v3[7];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v12;
  *uint64_t v12 = v4;
  v12[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #2 in ImageRepresentation.body.getter(a1, a2, a3, v8, v9, v11, v10);
}

void closure #1 in closure #2 in ImageRepresentation.body.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>.Continuation.YieldResult);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_allocWithZone(MEMORY[0x1E4F1E050]);
  outlined copy of Data._Representation(a2, a3);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v11 = objc_msgSend(v9, sel_initWithData_, isa);
  outlined consume of Data._Representation(a2, a3);

  if (v11)
  {
    v22[0] = (os_log_t)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1E018]), sel_init);
    objc_msgSend(v11, sel_extent);
    uint64_t v12 = -[NSObject createCGImage:fromRect:](v22[0], sel_createCGImage_fromRect_, v11);
    if (v12)
    {
      v22[1] = v12;
      uint64_t v13 = v12;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>.Continuation);
      AsyncStream.Continuation.yield(_:)();

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return;
    }
    if (one-time initialization token for ledger != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.ledger);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_1A375F000, v18, v19, "Failed to create CGImage from CIImage", v20, 2u);
      MEMORY[0x1A624F870](v20, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for ledger != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.ledger);
    v22[0] = (os_log_t)Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22[0], v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1A375F000, v22[0], v15, "Failed to create CIImage from Data", v16, 2u);
      MEMORY[0x1A624F870](v16, -1, -1);
    }
  }
  os_log_t v21 = v22[0];
}

uint64_t ImageRepresentation.init(exporting:importing:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors;
  if (!lazy protocol witness table cache variable for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors;
  if (!lazy protocol witness table cache variable for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors);
  }
  return result;
}

uint64_t associated type witness table accessor for TransferRepresentation.Body : TransferRepresentation in ImageRepresentation<A>()
{
  return swift_getOpaqueTypeConformance2();
}

unsigned char *storeEnumTagSinglePayload for ImageRepresentationEncodingErrors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1A37E68D8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageRepresentationEncodingErrors()
{
  return &type metadata for ImageRepresentationEncodingErrors;
}

uint64_t destroy for ImageRepresentation()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ImageRepresentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ImageRepresentation(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ImageRepresentation(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageRepresentation(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageRepresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ImageRepresentation()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata completion function for ImageRepresentation.Image()
{
  type metadata accessor for AsyncStream<CGImageRef>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ImageRepresentation.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for ImageRepresentation.Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for ImageRepresentation.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for ImageRepresentation.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for ImageRepresentation.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for ImageRepresentation.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageRepresentation.Image(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A37E6DF8);
}

uint64_t sub_1A37E6DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ImageRepresentation.Image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A37E6E7C);
}

uint64_t sub_1A37E6E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ImageRepresentation.Image()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for AsyncStream<CGImageRef>()
{
  if (!lazy cache variable for type metadata for AsyncStream<CGImageRef>)
  {
    type metadata accessor for CGImageRef(255);
    unint64_t v0 = type metadata accessor for AsyncStream();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncStream<CGImageRef>);
    }
  }
}

void partial apply for closure #1 in closure #2 in ImageRepresentation.body.getter(uint64_t a1)
{
  closure #1 in closure #2 in ImageRepresentation.body.getter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type CIImageRepresentationOption and conformance CIImageRepresentationOption()
{
  unint64_t result = lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption;
  if (!lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption)
  {
    type metadata accessor for CIImageRepresentationOption(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption);
  }
  return result;
}

uint64_t SystemCoordinatorConfiguration.spatialTemplatePreferenceOutput.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped);
  if (v3)
  {
    swift_getKeyPath();
    (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x90))(&v10);
    uint64_t result = swift_release();
    uint64_t v5 = v10;
    char v6 = v11;
    long long v7 = v12;
    uint64_t v8 = v13;
    char v9 = v14;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v8 = 0;
    long long v7 = xmmword_1A38F7940;
    char v9 = 2;
    char v6 = 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  return result;
}

uint64_t SystemCoordinatorConfiguration.supportsGroupImmersiveSpace.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace);
}

uint64_t SystemCoordinatorConfiguration.isObservingGroupImmersionStyle.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle);
}

uint64_t SystemCoordinatorConfiguration.faceAppTowardsEachParticipant.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPSystemCoordinatorConfiguration_faceAppTowardsEachParticipant);
}

uint64_t SystemCoordinatorConfiguration.localParticipantRoleAssignmentRequest.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped);
  if (v3)
  {
    swift_getKeyPath();
    (*(void (**)(long long *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x90))(&v6);
    uint64_t result = swift_release();
    long long v5 = v6;
  }
  else
  {
    long long v5 = 0uLL;
  }
  *a1 = v5;
  return result;
}

uint64_t SystemCoordinatorConfiguration.defaultSpatialTemplatePreferences.getter()
{
  return SystemCoordinatorConfiguration.defaultSpatialTemplatePreferences.getter((uint64_t)&unk_1A38F7990, (uint64_t (*)(uint64_t))specialized Dictionary.init(dictionaryLiteral:));
}

uint64_t SystemCoordinatorConfiguration.defaultSpatialTemplateRoles.getter()
{
  return SystemCoordinatorConfiguration.defaultSpatialTemplatePreferences.getter((uint64_t)&unk_1A38F79B0, (uint64_t (*)(uint64_t))specialized Dictionary.init(dictionaryLiteral:));
}

uint64_t SystemCoordinatorConfiguration.defaultSpatialTemplatePreferences.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped);
  if (v3)
  {
    swift_getKeyPath();
    (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x90))(&v6);
    swift_release();
    return v6;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
    return a2(v5);
  }
}

id SystemCoordinatorConfiguration.__allocating_init(supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:)(char a1, char a2)
{
  uint64_t v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace] = a1;
  v5[OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle] = a2;
  v5[OBJC_IVAR___CPSystemCoordinatorConfiguration_faceAppTowardsEachParticipant] = 0;
  *(void *)&v5[OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped] = 0;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

id SystemCoordinatorConfiguration.init(supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:)(char a1, char a2)
{
  v2[OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace] = a1;
  v2[OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle] = a2;
  v2[OBJC_IVAR___CPSystemCoordinatorConfiguration_faceAppTowardsEachParticipant] = 0;
  *(void *)&v2[OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped] = 0;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for SystemCoordinatorConfiguration();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for SystemCoordinatorConfiguration()
{
  return self;
}

id SystemCoordinatorConfiguration.__allocating_init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)(uint64_t *a1, char a2, char a3, uint64_t *a4, char a5, uint64_t a6, uint64_t a7)
{
  id v15 = objc_allocWithZone(v7);
  return SystemCoordinatorConfiguration.init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)(a1, a2, a3, a4, a5, a6, a7);
}

id SystemCoordinatorConfiguration.init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)(uint64_t *a1, char a2, char a3, uint64_t *a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a7;
  uint64_t v9 = *a1;
  char v10 = *((unsigned char *)a1 + 8);
  uint64_t v11 = *((char *)a1 + 9);
  uint64_t v12 = *a4;
  uint64_t v19 = a4[1];
  v7[OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace] = a2;
  v7[OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle] = a3;
  v7[OBJC_IVAR___CPSystemCoordinatorConfiguration_faceAppTowardsEachParticipant] = a5;
  uint64_t v13 = qword_1A38F7BB8[v11];
  uint64_t v14 = specialized _NativeDictionary.mapValues<A>(_:)(a6);
  id v15 = v7;
  swift_bridgeObjectRelease();
  *(void *)&long long v21 = v9;
  BYTE8(v21) = v10;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = v13;
  char v25 = 2;
  uint64_t v26 = v12;
  uint64_t v27 = v19;
  uint64_t v28 = v14;
  uint64_t v29 = v30;
  id v16 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorConfiguration.Wrapped>));
  uint64_t v17 = specialized XPCWrapper.init(_:)(&v21);
  if (v8)
  {

    type metadata accessor for SystemCoordinatorConfiguration();
    return (id)swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)&v15[OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped] = v17;

    v20.receiver = v15;
    v20.super_class = (Class)type metadata accessor for SystemCoordinatorConfiguration();
    return objc_msgSendSuper2(&v20, sel_init);
  }
}

__n128 SystemCoordinatorConfiguration.Wrapped.init(spatialTemplatePreferenceOutput:localParticipantRoleAssignmentRequest:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  *(void *)a5 = *(void *)a1;
  *(unsigned char *)(a5 + 8) = v5;
  *(_OWORD *)(a5 + 16) = *(_OWORD *)(a1 + 16);
  *(void *)(a5 + 32) = v6;
  *(unsigned char *)(a5 + 40) = v7;
  __n128 result = *a2;
  *(__n128 *)(a5 + 48) = *a2;
  *(void *)(a5 + 64) = a3;
  *(void *)(a5 + 72) = a4;
  return result;
}

uint64_t SystemCoordinatorConfiguration.description.getter()
{
  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  _StringGuts.grow(_:)(145);
  uint64_t v15 = 0;
  unint64_t v16 = 0xE000000000000000;
  v1._object = (void *)0x80000001A3901090;
  v1._uint64_t countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v1);
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(&v13);
  v3._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v4._object = (void *)0x80000001A39010C0;
  String.append(_:)(v4);
  LOBYTE(v13) = *((unsigned char *)v0 + OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace);
  v5._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x80000001A39010E0;
  v6._uint64_t countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v6);
  LOBYTE(v13) = *((unsigned char *)v0 + OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle);
  v7._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0xD000000000000028;
  v8._object = (void *)0x80000001A3901110;
  String.append(_:)(v8);
  (*(void (**)(uint64_t *__return_ptr))((*v2 & *v0) + 0x78))(&v13);
  uint64_t v9 = v13;
  unint64_t v10 = v14;
  _print_unlocked<A, B>(_:_:)();
  outlined consume of SystemCoordinatorParticipantRoleRequest(v9, v10);
  v11._uint64_t countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v15;
}

uint64_t static SystemCoordinatorConfiguration.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall SystemCoordinatorConfiguration.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace);
  Swift::String v4 = (void *)MEMORY[0x1A624DFA0](0xD00000000000001BLL, 0x80000001A3901140);
  [(objc_class *)with.super.isa encodeBool:v3 forKey:v4];

  uint64_t v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle);
  Swift::String v6 = (void *)MEMORY[0x1A624DFA0](0xD00000000000001ELL, 0x80000001A3901160);
  [(objc_class *)with.super.isa encodeBool:v5 forKey:v6];

  uint64_t v7 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfiguration_faceAppTowardsEachParticipant);
  Swift::String v8 = (void *)MEMORY[0x1A624DFA0](0xD00000000000001DLL, 0x80000001A3901180);
  [(objc_class *)with.super.isa encodeBool:v7 forKey:v8];

  uint64_t v9 = *(void *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped);
  id v10 = (id)MEMORY[0x1A624DFA0](0x64657070617277, 0xE700000000000000);
  [(objc_class *)with.super.isa encodeObject:v9 forKey:v10];
}

id SystemCoordinatorConfiguration.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = specialized SystemCoordinatorConfiguration.init(coder:)(a1);

  return v4;
}

id SystemCoordinatorConfiguration.init(coder:)(void *a1)
{
  id v2 = specialized SystemCoordinatorConfiguration.init(coder:)(a1);

  return v2;
}

void SystemCoordinatorConfiguration.init()()
{
}

id SystemCoordinatorConfiguration.__deallocating_deinit()
{
  return SystemCoordinatorConfiguration.__deallocating_deinit(type metadata accessor for SystemCoordinatorConfiguration);
}

uint64_t SystemCoordinatorConfiguration.Wrapped.spatialTemplatePreferenceOutput.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  char v6 = *(unsigned char *)(v1 + 40);
  *(unsigned char *)(a1 + 40) = v6;
  return outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v3, v4, v5, v6);
}

uint64_t SystemCoordinatorConfiguration.Wrapped.localParticipantRoleAssignmentRequest.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  unint64_t v3 = *(void *)(v1 + 56);
  *a1 = v2;
  a1[1] = v3;
  return outlined copy of SystemCoordinatorParticipantRoleRequest(v2, v3);
}

uint64_t SystemCoordinatorConfiguration.Wrapped.defaultSpatialTemplatePreferences.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SystemCoordinatorConfiguration.Wrapped.defaultSpatialTemplateRoles.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t SystemCoordinatorConfiguration.Wrapped.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD00000000000001FLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000025;
      break;
    case 2:
      unint64_t result = 0xD000000000000021;
      break;
    case 3:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys()
{
  return SystemCoordinatorConfiguration.Wrapped.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SystemCoordinatorConfiguration.Wrapped.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t SystemCoordinatorConfiguration.Wrapped.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SystemCoordinatorConfiguration.Wrapped.CodingKeys>);
  uint64_t v24 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = *v1;
  char v6 = *((unsigned char *)v1 + 8);
  long long v25 = *((_OWORD *)v1 + 1);
  uint64_t v7 = v1[4];
  char v8 = *((unsigned char *)v1 + 40);
  uint64_t v9 = v1[6];
  uint64_t v22 = v1[7];
  uint64_t v23 = v9;
  uint64_t v10 = v1[8];
  uint64_t v20 = v1[9];
  uint64_t v21 = v10;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1;
  uint64_t v13 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v12, v11);
  lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v27 = v5;
  LOBYTE(v28) = v6;
  long long v29 = v25;
  uint64_t v30 = v7;
  char v31 = v8;
  char v32 = 0;
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput();
  uint64_t v14 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v14) {
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v13, v3);
  }
  uint64_t v16 = v20;
  uint64_t v17 = v21;
  uint64_t v18 = v24;
  uint64_t v27 = v23;
  uint64_t v28 = v22;
  char v32 = 1;
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v27 = v17;
  char v32 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : SpatialTemplatePreferenceOutput]);
  lazy protocol witness table accessor for type [String : SpatialTemplatePreferenceOutput] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : SpatialTemplatePreferenceOutput] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v27 = v16;
  char v32 = 3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v13, v3);
}

uint64_t SystemCoordinatorConfiguration.Wrapped.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SystemCoordinatorConfiguration.Wrapped.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  char v40 = 0;
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v29 = v33;
  uint64_t v30 = a2;
  int v39 = v34;
  uint64_t v9 = v36;
  uint64_t v10 = v37;
  int v11 = v38;
  char v40 = 1;
  uint64_t v32 = v35;
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v35, v36, v37, v38);
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v27 = v11;
  uint64_t v25 = v9;
  uint64_t v26 = v10;
  uint64_t v12 = v33;
  unint64_t v13 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : SpatialTemplatePreferenceOutput]);
  char v40 = 2;
  outlined copy of SystemCoordinatorParticipantRoleRequest(v12, v13);
  lazy protocol witness table accessor for type [String : SpatialTemplatePreferenceOutput] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : SpatialTemplatePreferenceOutput] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput);
  v24[1] = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v28 = v12;
  v24[0] = v13;
  uint64_t v14 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  char v40 = 3;
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
  uint64_t v31 = v14;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v32;
  uint64_t v16 = v33;
  uint64_t v18 = v25;
  uint64_t v19 = v26;
  char v20 = v27;
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v32, v25, v26, v27);
  uint64_t v21 = v28;
  unint64_t v22 = v24[0];
  outlined copy of SystemCoordinatorParticipantRoleRequest(v28, v24[0]);
  swift_bridgeObjectRetain();
  outlined consume of SystemCoordinatorParticipantRoleRequest(v21, v22);
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v17, v18, v19, v20);
  uint64_t v23 = v30;
  *uint64_t v30 = v29;
  *((unsigned char *)v23 + 8) = v39;
  void v23[2] = v17;
  v23[3] = v18;
  v23[4] = v19;
  *((unsigned char *)v23 + 40) = v20;
  v23[6] = v21;
  v23[7] = v22;
  v23[8] = v31;
  v23[9] = v16;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v17, v18, v19, v20);
  outlined consume of SystemCoordinatorParticipantRoleRequest(v21, v22);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SystemCoordinatorConfiguration.Wrapped@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return SystemCoordinatorConfiguration.Wrapped.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SystemCoordinatorConfiguration.Wrapped(void *a1)
{
  return SystemCoordinatorConfiguration.Wrapped.encode(to:)(a1);
}

uint64_t SystemCoordinatorConfiguration._SpatialTemplatePreference.storage.getter()
{
  return *(void *)(v0 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_storage);
}

uint64_t SystemCoordinatorConfiguration._SpatialTemplatePreference.contentExtent.getter()
{
  return *(void *)(v0 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent);
}

id SystemCoordinatorConfiguration._SpatialTemplatePreference.__allocating_init(_:)(uint64_t *a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = *a1;
  char v5 = *((unsigned char *)a1 + 8);
  *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_storage] = *((unsigned __int8 *)a1 + 9);
  uint64_t v6 = &v3[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent];
  *(void *)uint64_t v6 = v4;
  v6[8] = v5;
  v8.receiver = v3;
  v8.super_class = v1;
  return objc_msgSendSuper2(&v8, sel_init);
}

id SystemCoordinatorConfiguration._SpatialTemplatePreference.init(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *(void *)&v1[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_storage] = *((unsigned __int8 *)a1 + 9);
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = &v1[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent];
  *(void *)uint64_t v4 = v2;
  v4[8] = v3;
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for SystemCoordinatorConfiguration._SpatialTemplatePreference();
  return objc_msgSendSuper2(&v6, sel_init);
}

void SystemCoordinatorConfiguration._SpatialTemplatePreference.spatialTemplatePreference.getter(uint64_t a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_storage);
  if (v2 >= 5) {
    LOBYTE(v2) = 0;
  }
  char v3 = *(unsigned char *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent + 8);
  *(void *)a1 = *(void *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent);
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v2;
}

id @objc SystemCoordinatorConfiguration.description.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  objc_super v8 = (void *)MEMORY[0x1A624DFA0](v5, v7);
  swift_bridgeObjectRelease();

  return v8;
}

uint64_t SystemCoordinatorConfiguration._SpatialTemplatePreference.description.getter()
{
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x80000001A39011D0;
  v2._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  if (*(unsigned char *)(v0 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent + 8))
  {
    unint64_t v3 = 0xE300000000000000;
    uint64_t v4 = 7104878;
  }
  else
  {
    uint64_t v4 = String.init<A>(reflecting:)();
    unint64_t v3 = v5;
  }
  unint64_t v6 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x656761726F747328;
}

uint64_t static SystemCoordinatorConfiguration._SpatialTemplatePreference.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall SystemCoordinatorConfiguration._SpatialTemplatePreference.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_storage);
  uint64_t v4 = (void *)MEMORY[0x1A624DFA0](0x656761726F7473, 0xE700000000000000);
  [(objc_class *)with.super.isa encodeInteger:v3 forKey:v4];

  if (*(unsigned char *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent + 8))
  {
    id v6 = 0;
  }
  else
  {
    unint64_t v5 = (double *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent);
    id v6 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, *v5);
  }
  id v7 = (id)MEMORY[0x1A624DFA0](0x45746E65746E6F63, 0xED0000746E657478);
  [(objc_class *)with.super.isa encodeObject:v6 forKey:v7];
  swift_unknownObjectRelease();
}

id SystemCoordinatorConfiguration._SpatialTemplatePreference.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = specialized SystemCoordinatorConfiguration._SpatialTemplatePreference.init(coder:)(a1);

  return v4;
}

id SystemCoordinatorConfiguration._SpatialTemplatePreference.init(coder:)(void *a1)
{
  id v2 = specialized SystemCoordinatorConfiguration._SpatialTemplatePreference.init(coder:)(a1);

  return v2;
}

id SystemCoordinatorConfiguration._SpatialTemplatePreference.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void SystemCoordinatorConfiguration._SpatialTemplatePreference.init()()
{
}

id SystemCoordinatorConfiguration._SpatialTemplatePreference.__deallocating_deinit()
{
  return SystemCoordinatorConfiguration.__deallocating_deinit(type metadata accessor for SystemCoordinatorConfiguration._SpatialTemplatePreference);
}

id SystemCoordinatorConfiguration.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

void *specialized XPCWrapper.init(_:)(long long *a1)
{
  long long v4 = a1[3];
  long long v21 = a1[2];
  long long v22 = v4;
  long long v23 = a1[4];
  long long v5 = v23;
  long long v6 = a1[1];
  long long v19 = *a1;
  long long v7 = v19;
  long long v20 = v6;
  objc_super v8 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v9 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68);
  *((_OWORD *)v9 + 2) = v21;
  *((_OWORD *)v9 + 3) = v4;
  *((_OWORD *)v9 + 4) = v5;
  *(_OWORD *)uint64_t v9 = v7;
  *((_OWORD *)v9 + 1) = v6;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  outlined retain of SystemCoordinatorConfiguration.Wrapped((uint64_t)a1);
  uint64_t v10 = v1;
  JSONEncoder.init()();
  lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped and conformance SystemCoordinatorConfiguration.Wrapped();
  uint64_t v11 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v13 = v12;
  swift_release();
  if (v2)
  {
    outlined release of SystemCoordinatorConfiguration.Wrapped((uint64_t)a1);
    uint64_t v14 = *((void *)v9 + 6);
    unint64_t v15 = *((void *)v9 + 7);
    outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(*((void *)v9 + 2), *((void *)v9 + 3), *((void *)v9 + 4), v9[40]);
    outlined consume of SystemCoordinatorParticipantRoleRequest(v14, v15);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorConfiguration.Wrapped>);
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v16 = (void *)((char *)v10 + *(void *)((*v8 & *v10) + 0x70));
    *uint64_t v16 = v11;
    v16[1] = v13;

    v18.receiver = v10;
    v18.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorConfiguration.Wrapped>);
    uint64_t v10 = objc_msgSendSuper2(&v18, sel_init);
    outlined release of SystemCoordinatorConfiguration.Wrapped((uint64_t)a1);
  }
  return v10;
}

id specialized XPCWrapper.init(_:)(uint64_t a1)
{
  id v3 = v1;
  long long v6 = *(_OWORD *)(a1 + 48);
  long long v21 = *(_OWORD *)(a1 + 32);
  long long v5 = v21;
  long long v22 = v6;
  long long v23 = *(_OWORD *)(a1 + 64);
  long long v7 = v23;
  uint64_t v24 = *(void *)(a1 + 80);
  uint64_t v8 = v24;
  long long v9 = *(_OWORD *)(a1 + 16);
  long long v19 = *(_OWORD *)a1;
  long long v20 = v9;
  uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v11 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68);
  *(_OWORD *)uint64_t v11 = v19;
  *((_OWORD *)v11 + 1) = v9;
  *((_OWORD *)v11 + 2) = v5;
  *((_OWORD *)v11 + 3) = v6;
  *((_OWORD *)v11 + 4) = v7;
  *((void *)v11 + 10) = v8;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  outlined retain of SystemCoordinatorState.ParticipantState.Seat(a1);
  uint64_t v12 = v1;
  JSONEncoder.init()();
  lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat();
  uint64_t v13 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v15 = v14;
  swift_release();
  if (v2)
  {
    outlined release of SystemCoordinatorState.ParticipantState.Seat(a1);

    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorState.ParticipantState.Seat>);
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v16 = (void *)((char *)v12 + *(void *)((*v10 & *v12) + 0x70));
    *uint64_t v16 = v13;
    v16[1] = v15;

    v18.receiver = v12;
    v18.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorState.ParticipantState.Seat>);
    id v3 = objc_msgSendSuper2(&v18, sel_init);
    outlined release of SystemCoordinatorState.ParticipantState.Seat(a1);
  }
  return v3;
}

{
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  objc_super v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v2 = (char *)v1 + *(void *)(v14 + 104);
  id v3 = *(void *)(v14 + 80);
  long long v4 = *(void *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v2, a1, v3);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  long long v5 = v1;
  JSONEncoder.init()();
  long long v6 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v12)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);

    type metadata accessor for XPCWrapper();
    return (id)swift_deallocPartialClassInstance();
  }
  else
  {
    long long v9 = v6;
    uint64_t v10 = v7;
    swift_release();
    uint64_t v11 = (void *)((char *)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0x70));
    char *v11 = v9;
    v11[1] = v10;

    v13.receiver = v5;
    v13.super_class = (Class)type metadata accessor for XPCWrapper();
    return objc_msgSendSuper2(&v13, sel_init);
  }
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplatePreferenceOutput>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  id v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = result + 64;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t result = v16[1];
    uint64_t v18 = *(void *)(a1 + 56) + 16 * i;
    uint64_t v19 = *(void *)v18;
    char v20 = *(unsigned char *)(v18 + 8);
    uint64_t v21 = qword_1A38F7BB8[*(char *)(v18 + 9)];
    *(void *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    long long v22 = (void *)(v3[6] + 16 * i);
    *long long v22 = v17;
    v22[1] = result;
    uint64_t v23 = v3[7] + 48 * i;
    *(void *)uint64_t v23 = v19;
    *(unsigned char *)(v23 + 8) = v20;
    *(void *)(v23 + 24) = 0;
    *(void *)(v23 + 32) = 0;
    *(void *)(v23 + 16) = v21;
    *(unsigned char *)(v23 + 40) = 2;
    uint64_t v24 = v3[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v26;
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        return (uint64_t)v3;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v9) {
          return (uint64_t)v3;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return (uint64_t)v3;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void v35[3];
  uint64_t v36;
  uint64_t v37;
  int64_t v38;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  id v3 = 0;
  uint64_t v33 = (void *)result;
  unint64_t v34 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  int64_t v4 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(v5 - 32);
  unint64_t v8 = -1;
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  int64_t v9 = v8 & v4;
  uint64_t v30 = v5;
  uint64_t v31 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v32 = result + 64;
  if ((v8 & v4) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unsigned __int8 v38 = v3;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v34 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    outlined init with copy of AudioSessionAssertionManager(*(void *)(v34 + 56) + 40 * i, (uint64_t)v35);
    uint64_t v19 = v36;
    char v20 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 16);
    swift_bridgeObjectRetain();
    long long v22 = v21(v19, v20);
    uint64_t v24 = v23;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v35);
    uint64_t result = (uint64_t)v33;
    *(void *)(v32 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    BOOL v25 = (void *)(v33[6] + 16 * i);
    *BOOL v25 = v17;
    v25[1] = v18;
    uint64_t v26 = (uint64_t *)(v33[7] + 16 * i);
    *uint64_t v26 = v22;
    v26[1] = v24;
    int v27 = v33[2];
    uint64_t v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v33[2] = v29;
    id v3 = v38;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_24;
    }
    if (v12 >= v31) {
      return result;
    }
    int64_t v13 = *(void *)(v30 + 8 * v12);
    unint64_t v14 = v3 + 1;
    if (!v13)
    {
      unint64_t v14 = v3 + 2;
      if (v3 + 2 >= v31) {
        return result;
      }
      int64_t v13 = *(void *)(v30 + 8 * v14);
      if (!v13)
      {
        unint64_t v14 = v3 + 3;
        if (v3 + 3 >= v31) {
          return result;
        }
        int64_t v13 = *(void *)(v30 + 8 * v14);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    int64_t v9 = (v13 - 1) & v13;
    unsigned __int8 v38 = v14;
  }
  int64_t v15 = v3 + 4;
  if (v3 + 4 >= v31) {
    return result;
  }
  int64_t v13 = *(void *)(v30 + 8 * v15);
  if (v13)
  {
    unint64_t v14 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    unint64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v31) {
      return result;
    }
    int64_t v13 = *(void *)(v30 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t outlined consume of SystemCoordinatorParticipantRoleRequest(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

id specialized SystemCoordinatorConfiguration.init(coder:)(void *a1)
{
  id v3 = v1;
  int64_t v4 = (void *)MEMORY[0x1A624DFA0](0xD00000000000001BLL, 0x80000001A3901140);
  unsigned __int8 v5 = objc_msgSend(a1, sel_decodeBoolForKey_, v4);

  v3[OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace] = v5;
  uint64_t v6 = (void *)MEMORY[0x1A624DFA0](0xD00000000000001ELL, 0x80000001A3901160);
  unsigned __int8 v7 = objc_msgSend(a1, sel_decodeBoolForKey_, v6);

  v3[OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle] = v7;
  unint64_t v8 = (void *)MEMORY[0x1A624DFA0](0xD00000000000001DLL, 0x80000001A3901180);
  unsigned __int8 v9 = objc_msgSend(a1, sel_decodeBoolForKey_, v8);

  v3[OBJC_IVAR___CPSystemCoordinatorConfiguration_faceAppTowardsEachParticipant] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorConfiguration.Wrapped>);
  *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped] = NSCoder.decodeObject<A>(of:forKey:)();

  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for SystemCoordinatorConfiguration();
  return objc_msgSendSuper2(&v11, sel_init);
}

uint64_t outlined copy of SystemCoordinatorParticipantRoleRequest(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest);
  }
  return result;
}

uint64_t outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (!a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for SystemCoordinatorConfiguration._SpatialTemplatePreference()
{
  return self;
}

uint64_t specialized SystemCoordinatorConfiguration.Wrapped.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001FLL && a2 == 0x80000001A39012F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x80000001A3901310 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x80000001A3901340 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001A3901370)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

id specialized SystemCoordinatorConfiguration._SpatialTemplatePreference.init(coder:)(void *a1)
{
  id v3 = v1;
  uint64_t v4 = (void *)MEMORY[0x1A624DFA0](0x656761726F7473, 0xE700000000000000);
  id v5 = objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_storage] = v5;
  type metadata accessor for NSNumber();
  uint64_t v6 = NSCoder.decodeObject<A>(of:forKey:)();
  unsigned __int8 v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, sel_doubleValue);
    uint64_t v9 = v8;

    uint64_t v10 = OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent;
    *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent] = v9;
  }
  else
  {
    uint64_t v10 = OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent;
    *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent] = 0;
  }
  v3[v10 + 8] = v7 == 0;

  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for SystemCoordinatorConfiguration._SpatialTemplatePreference();
  return objc_msgSendSuper2(&v12, sel_init);
}

uint64_t method lookup function for SystemCoordinatorConfiguration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemCoordinatorConfiguration);
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.spatialTemplatePreferenceOutput.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.localParticipantRoleAssignmentRequest.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.defaultSpatialTemplatePreferences.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.defaultSpatialTemplateRoles.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.__allocating_init(supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.__allocating_init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t destroy for SystemCoordinatorConfiguration.Wrapped(uint64_t a1)
{
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  if (*(void *)(a1 + 56) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SystemCoordinatorConfiguration.Wrapped(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 40);
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v4, v5, v6, v7);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  uint64_t v8 = (void *)(a2 + 48);
  unint64_t v9 = *(void *)(a2 + 56);
  if (v9 >= 2)
  {
    *(void *)(a1 + 48) = *v8;
    *(void *)(a1 + 56) = v9;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v8;
  }
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SystemCoordinatorConfiguration.Wrapped(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  char v8 = *((unsigned char *)a2 + 40);
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v5, v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  char v12 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v8;
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v9, v10, v11, v12);
  unint64_t v13 = a2[7];
  if (*(void *)(a1 + 56) >= 2uLL)
  {
    if (v13 >= 2)
    {
      *(void *)(a1 + 48) = a2[6];
      *(void *)(a1 + 56) = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of (roleIdentifier: String)(a1 + 48);
    goto LABEL_6;
  }
  if (v13 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    goto LABEL_8;
  }
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
LABEL_8:
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of (roleIdentifier: String)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (roleIdentifier: String));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for SystemCoordinatorConfiguration.Wrapped(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v4;
  char v9 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v5;
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v6, v7, v8, v9);
  uint64_t v10 = (void *)(a2 + 48);
  if (*(void *)(a1 + 56) >= 2uLL)
  {
    unint64_t v11 = *(void *)(a2 + 56);
    if (v11 >= 2)
    {
      *(void *)(a1 + 48) = *v10;
      *(void *)(a1 + 56) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of (roleIdentifier: String)(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
LABEL_6:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinatorConfiguration.Wrapped(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinatorConfiguration.Wrapped(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemCoordinatorConfiguration.Wrapped()
{
  return &type metadata for SystemCoordinatorConfiguration.Wrapped;
}

uint64_t method lookup function for SystemCoordinatorConfiguration._SpatialTemplatePreference(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemCoordinatorConfiguration._SpatialTemplatePreference);
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration._SpatialTemplatePreference.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration._SpatialTemplatePreference.spatialTemplatePreference.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration._SpatialTemplatePreference.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration._SpatialTemplatePreference.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

unsigned char *storeEnumTagSinglePayload for SystemCoordinatorConfiguration.Wrapped.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A37E9E28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SystemCoordinatorConfiguration.Wrapped.CodingKeys()
{
  return &unk_1EF717550;
}

uint64_t outlined retain of SystemCoordinatorState.ParticipantState.Seat(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat);
  }
  return result;
}

uint64_t outlined release of SystemCoordinatorState.ParticipantState.Seat(uint64_t a1)
{
  return a1;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t outlined retain of SystemCoordinatorConfiguration.Wrapped(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 56);
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  outlined copy of SystemCoordinatorParticipantRoleRequest(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped and conformance SystemCoordinatorConfiguration.Wrapped()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped and conformance SystemCoordinatorConfiguration.Wrapped;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped and conformance SystemCoordinatorConfiguration.Wrapped)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped and conformance SystemCoordinatorConfiguration.Wrapped);
  }
  return result;
}

uint64_t outlined release of SystemCoordinatorConfiguration.Wrapped(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 56);
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  outlined consume of SystemCoordinatorParticipantRoleRequest(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t AssertionManager.updateCallback.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t AssertionManager.assertionCount.getter()
{
  Lock.withLock<A>(_:)();
  return v1;
}

void partial apply for closure #1 in AssertionManager.assertionCount.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 40);
}

void AssertionManager.assertionCount.setter(uint64_t a1)
{
  Lock.lock()();
  uint64_t v3 = *(void *)(v1 + 40);
  if (v3 == a1)
  {
    Lock.unlock()();
  }
  else
  {
    *(void *)(v1 + 40) = a1;
    Lock.unlock()();
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = a1 <= 0;
    }
    if (!v4 || (v3 >= 1 ? (BOOL v5 = a1 == 0) : (BOOL v5 = 0), v5)) {
      (*(void (**)(uint64_t))(v1 + 16))(a1);
    }
  }
  Lock.assertNotOwned()();
}

void *AssertionManager.__allocating_init(callback:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (void *)swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  v4[4] = Lock.init()();
  v4[5] = 0;
  v4[2] = a1;
  v4[3] = a2;
  return v4;
}

void *AssertionManager.init(callback:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Lock();
  swift_allocObject();
  v2[4] = Lock.init()();
  v2[5] = 0;
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t AssertionManager.subscribe()()
{
  type metadata accessor for AssertionManager.Assertion();
  swift_allocObject();
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized AssertionManager.Assertion.init(manager:)(v0);
  swift_release();
  return v1;
}

uint64_t AssertionManager.Assertion.__allocating_init(manager:)(uint64_t a1)
{
  swift_allocObject();
  uint64_t v2 = specialized AssertionManager.Assertion.init(manager:)(a1);
  swift_release();
  return v2;
}

uint64_t type metadata accessor for AssertionManager.Assertion()
{
  return self;
}

uint64_t AssertionManager.Assertion.init(manager:)(uint64_t a1)
{
  uint64_t v1 = specialized AssertionManager.Assertion.init(manager:)(a1);
  swift_release();
  return v1;
}

uint64_t AssertionManager.Assertion.deinit()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
LABEL_11:
    swift_weakDestroy();
    return v0;
  }
  uint64_t v2 = Strong;
  uint64_t result = Lock.withLock<A>(_:)();
  uint64_t v4 = v6 - 1;
  if (!__OFSUB__(v6, 1))
  {
    Lock.lock()();
    uint64_t v5 = *(void *)(v2 + 40);
    if (v5 == v4)
    {
      Lock.unlock()();
    }
    else
    {
      *(void *)(v2 + 40) = v4;
      Lock.unlock()();
      if (!v5 && v4 >= 1 || v5 >= 1 && v6 == 1) {
        (*(void (**)(uint64_t))(v2 + 16))(v4);
      }
    }
    Lock.assertNotOwned()();
    swift_release();
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t AssertionManager.Assertion.__deallocating_deinit()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
LABEL_11:
    swift_weakDestroy();
    return swift_deallocClassInstance();
  }
  uint64_t v1 = Strong;
  uint64_t result = Lock.withLock<A>(_:)();
  uint64_t v3 = v5 - 1;
  if (!__OFSUB__(v5, 1))
  {
    Lock.lock()();
    uint64_t v4 = *(void *)(v1 + 40);
    if (v4 == v3)
    {
      Lock.unlock()();
    }
    else
    {
      *(void *)(v1 + 40) = v3;
      Lock.unlock()();
      if (!v4 && v3 >= 1 || v4 >= 1 && v5 == 1) {
        (*(void (**)(uint64_t))(v1 + 16))(v3);
      }
    }
    Lock.assertNotOwned()();
    swift_release();
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t AssertionManager.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t AssertionManager.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t specialized AssertionManager.Assertion.init(manager:)(uint64_t a1)
{
  swift_weakInit();
  swift_weakAssign();
  uint64_t result = Lock.withLock<A>(_:)();
  uint64_t v4 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    Lock.lock()();
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5 == v4)
    {
      Lock.unlock()();
    }
    else
    {
      *(void *)(a1 + 40) = v4;
      Lock.unlock()();
      if (!v5 && v4 > 0 || v5 >= 1 && v6 == -1) {
        (*(void (**)(uint64_t))(a1 + 16))(v4);
      }
    }
    Lock.assertNotOwned()();
    return v1;
  }
  return result;
}

uint64_t sub_1A37EA7D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

void sub_1A37EA824(uint64_t *a1)
{
}

uint64_t type metadata accessor for AssertionManager()
{
  return self;
}

uint64_t method lookup function for AssertionManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AssertionManager);
}

uint64_t dispatch thunk of AssertionManager.assertionCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of AssertionManager.__allocating_init(callback:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of AssertionManager.subscribe()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t method lookup function for AssertionManager.Assertion(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AssertionManager.Assertion);
}

uint64_t dispatch thunk of AssertionManager.Assertion.__allocating_init(manager:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

void closure #1 in AssertionManager.assertionCount.getterpartial apply(void *a1@<X8>)
{
}

uint64_t SecTaskRef.value<A>(_:forEntitlement:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entitlement?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v66 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v67 = (char *)&v57 - v11;
  uint64_t v70 = type metadata accessor for Entitlement();
  uint64_t v68 = *(void *)(v70 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v70);
  uint64_t v64 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v65 = (char *)&v57 - v15;
  MEMORY[0x1F4188790](v14);
  unint64_t v69 = (char *)&v57 - v16;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  char v20 = (char *)&v57 - v19;
  error[0] = 0;
  uint64_t v21 = Entitlement.rawValue.getter();
  long long v22 = (__CFString *)MEMORY[0x1A624DFA0](v21);
  swift_bridgeObjectRelease();
  CFTypeRef v23 = SecTaskCopyValueForEntitlement(v4, v22, error);

  uint64_t v72 = (uint64_t)v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject?);
  int v24 = swift_dynamicCast();
  BOOL v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
  if (v24)
  {
    uint64_t v26 = *(void *)(a2 - 8);
    v25(v20, 0, 1, a2);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a3, v20, a2);
    uint64_t v27 = a3;
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v63 = a3;
    v25(v20, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Log.default);
    uint64_t v30 = v68;
    uint64_t v31 = v69;
    uint64_t v32 = v70;
    uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
    v62(v69, a1, v70);
    uint64_t v33 = v4;
    unint64_t v34 = Logger.logObject.getter();
    int v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, (os_log_type_t)v35))
    {
      int v59 = v35;
      long long v60 = v34;
      uint64_t v61 = v25;
      uint64_t v36 = v31;
      uint64_t v37 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      uint64_t v73 = v58;
      *(_DWORD *)uint64_t v37 = 136315650;
      uint64_t v72 = (uint64_t)v33;
      type metadata accessor for SecTaskRef(0);
      unsigned __int8 v38 = v33;
      uint64_t v39 = String.init<A>(reflecting:)();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v41 = v70;
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2080;
      uint64_t v42 = (uint64_t)v67;
      v62(v67, (uint64_t)v36, v41);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v42, 0, 1, v41);
      uint64_t v43 = v66;
      outlined init with copy of Entitlement?(v42, v66);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v43, 1, v41) == 1)
      {
        unint64_t v44 = 0xE300000000000000;
        uint64_t v45 = v41;
        uint64_t v46 = 7104878;
      }
      else
      {
        unint64_t v48 = v65;
        (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v65, v43, v41);
        v62(v64, (uint64_t)v48, v41);
        uint64_t v45 = v41;
        uint64_t v46 = String.init<A>(reflecting:)();
        unint64_t v44 = v49;
        (*(void (**)(char *, uint64_t))(v30 + 8))(v48, v45);
      }
      outlined destroy of Entitlement?((uint64_t)v67);
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v44, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v69, v45);
      *(_WORD *)(v37 + 22) = 2080;
      swift_beginAccess();
      uint64_t v47 = v63;
      uint64_t v50 = v60;
      if (error[0])
      {
        CFErrorRef v71 = error[0];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unmanaged<CFErrorRef>);
        uint64_t v51 = String.init<A>(reflecting:)();
        unint64_t v53 = v52;
        BOOL v25 = v61;
        os_log_type_t v54 = v59;
      }
      else
      {
        unint64_t v53 = 0xE300000000000000;
        BOOL v25 = v61;
        os_log_type_t v54 = v59;
        uint64_t v51 = 7104878;
      }
      CFErrorRef v71 = (CFErrorRef)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v50, v54, "Task %s couldn't find entitlement %s error %s", (uint8_t *)v37, 0x20u);
      uint64_t v55 = v58;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v55, -1, -1);
      MEMORY[0x1A624F870](v37, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
      uint64_t v47 = v63;
    }
    uint64_t v27 = v47;
    uint64_t v28 = 1;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v25)(v27, v28, 1, a2);
}

uint64_t outlined init with copy of Entitlement?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entitlement?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Entitlement?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entitlement?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static Encodable.messageIdentifier.getter(uint64_t a1)
{
  uint64_t v2 = swift_conformsToProtocol2();
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v2) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4) {
    return (*(uint64_t (**)(void))(v3 + 8))();
  }

  return _typeName(_:qualified:)();
}

uint64_t _PublisherElements.Iterator.Inner.lock.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t _PublisherElements.Iterator.Inner.pending.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _PublisherElements.Iterator.Inner.pending.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*_PublisherElements.Iterator.Inner.pending.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t _PublisherElements.Iterator.Inner.state.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = type metadata accessor for _PublisherElements.Iterator.Inner.State();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1 + 32, v3);
}

uint64_t _PublisherElements.Iterator.Inner.state.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = type metadata accessor for _PublisherElements.Iterator.Inner.State();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(v1 + 32, a1, v3);
  return swift_endAccess();
}

uint64_t (*_PublisherElements.Iterator.Inner.state.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t _PublisherElements.Iterator.Inner.pendingDemand.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 72);
}

uint64_t _PublisherElements.Iterator.Inner.pendingDemand.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 72) = a1;
  return result;
}

uint64_t (*_PublisherElements.Iterator.Inner.pendingDemand.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t _PublisherElements.Iterator.Inner.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  _PublisherElements.Iterator.Inner.init()();
  return v0;
}

uint64_t _PublisherElements.Iterator.Inner.deinit()
{
  MEMORY[0x1A624F870](*(void *)(v0 + 16), -1, -1);
  swift_bridgeObjectRelease();
  uint64_t v1 = type metadata accessor for _PublisherElements.Iterator.Inner.State();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + 32, v1);
  return v0;
}

uint64_t _PublisherElements.Iterator.Inner.__deallocating_deinit()
{
  _PublisherElements.Iterator.Inner.deinit();

  return swift_deallocClassInstance();
}

uint64_t _PublisherElements.Iterator.Inner.receive(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v21 - v5;
  uint64_t v7 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = type metadata accessor for _PublisherElements.Iterator.Inner.State();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v26, v1 + 32, v8);
  uint64_t v10 = (uint64_t *)(v1 + 24);
  if (v27 >= 2)
  {
LABEL_11:
    swift_beginAccess();
    uint64_t v25 = *v10;
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    swift_getWitnessTable();
    if (Collection.isEmpty.getter())
    {
      os_unfair_lock_unlock(v7);
    }
    else
    {
      swift_beginAccess();
      swift_getWitnessTable();
      RangeReplaceableCollection.removeFirst()();
      swift_endAccess();
      uint64_t v16 = v24;
      os_unfair_lock_unlock(v7);
      uint64_t v17 = v9;
      uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v6, a1, AssociatedTypeWitness);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v6, 0, 1, AssociatedTypeWitness);
      uint64_t v9 = v17;
      (*(void (**)(void, char *, uint64_t))(v23 + 32))(*(void *)(*(void *)(v16 + 64) + 40), v6, v4);
      swift_continuation_resume();
    }
  }
  else
  {
    uint64_t v21 = v9;
    uint64_t v22 = v8;
    swift_beginAccess();
    a1 = *v10;
    swift_beginAccess();
    uint64_t v11 = type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    swift_bridgeObjectRetain();
    Array.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    os_unfair_lock_unlock(v7);
    if (MEMORY[0x1A624E190](a1, v11))
    {
      uint64_t v10 = (uint64_t *)(AssociatedTypeWitness - 8);
      uint64_t v9 = v23 + 32;
      uint64_t v8 = 4;
      do
      {
        uint64_t v12 = v8 - 4;
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          uint64_t v14 = *(void *)(a1 + 8 * v8);
          BOOL v15 = __OFADD__(v12, 1);
          uint64_t v7 = (os_unfair_lock_s *)(v8 - 3);
          if (v15) {
            goto LABEL_10;
          }
        }
        else
        {
          uint64_t v14 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          BOOL v15 = __OFADD__(v12, 1);
          uint64_t v7 = (os_unfair_lock_s *)(v8 - 3);
          if (v15)
          {
LABEL_10:
            __break(1u);
            goto LABEL_11;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v6, 1, 1, AssociatedTypeWitness);
        (*(void (**)(void, char *, uint64_t))v9)(*(void *)(*(void *)(v14 + 64) + 40), v6, v4);
        swift_continuation_resume();
        ++v8;
      }
      while (v7 != (os_unfair_lock_s *)MEMORY[0x1A624E190](a1, v11));
    }
    swift_bridgeObjectRelease();
    uint64_t v9 = v21;
    uint64_t v8 = v22;
  }
  uint64_t v19 = static Subscribers.Demand.none.getter();
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v26, v8);
  return v19;
}

Swift::Void __swiftcall _PublisherElements.Iterator.Inner.cancel()()
{
  uint64_t v55 = *(void *)(*v0 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v46 - v3;
  os_unfair_lock_t v53 = (os_unfair_lock_t)v0[2];
  os_unfair_lock_lock(v53);
  swift_beginAccess();
  uint64_t v5 = v0[3];
  swift_beginAccess();
  uint64_t v56 = v2;
  uint64_t v6 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v7 = type metadata accessor for _PublisherElements.Iterator.Inner.State();
  uint64_t v55 = *(void *)(v7 - 8);
  uint64_t v8 = *(void (**)(long long *, void *, uint64_t))(v55 + 16);
  v8(&v67, v0 + 4, v7);
  os_log_type_t v54 = v0 + 4;
  if (v68 >= 2)
  {
    outlined init with take of TypedPayloadDecoding(&v67, (uint64_t)v65);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.default);
    outlined init with copy of AudioSessionAssertionManager((uint64_t)v65, (uint64_t)v63);
    uint64_t v22 = Logger.logObject.getter();
    int v23 = static os_log_type_t.default.getter();
    os_log_t v50 = v22;
    if (os_log_type_enabled(v22, (os_log_type_t)v23))
    {
      LODWORD(v49) = v23;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v62 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      outlined init with copy of AudioSessionAssertionManager((uint64_t)v63, (uint64_t)v61);
      outlined init with copy of Subscription?((uint64_t)v61, (uint64_t)&v59);
      uint64_t v51 = v7;
      uint64_t v48 = v25;
      if (v60)
      {
        outlined init with take of TypedPayloadDecoding(&v59, (uint64_t)v58);
        outlined init with copy of AudioSessionAssertionManager((uint64_t)v58, (uint64_t)&v57);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
        uint64_t v26 = String.init<A>(reflecting:)();
        unint64_t v28 = v27;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v58);
      }
      else
      {
        unint64_t v28 = 0xE300000000000000;
        uint64_t v26 = 7104878;
      }
      outlined destroy of Subscription?((uint64_t)v61);
      v61[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v63);
      os_log_t v37 = v50;
      _os_log_impl(&dword_1A375F000, v50, (os_log_type_t)v49, "Handling cancellation by terminating upstream subscription: %s", v24, 0xCu);
      uint64_t v38 = v48;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v38, -1, -1);
      MEMORY[0x1A624F870](v24, -1, -1);

      uint64_t v7 = v51;
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v63);
    }
    uint64_t v39 = v54;
    memset(v63, 0, sizeof(v63));
    long long v64 = xmmword_1A38F7C50;
    swift_beginAccess();
    (*(void (**)(void *, uint64_t *, uint64_t))(v55 + 40))(v39, v63, v7);
    swift_endAccess();
    os_unfair_lock_unlock(v53);
    __swift_project_boxed_opaque_existential_1(v65, v66);
    dispatch thunk of Cancellable.cancel()();
    if (MEMORY[0x1A624E190](v5, v6))
    {
      unint64_t v40 = (void (**)(void, char *, uint64_t))(v52 + 32);
      uint64_t v41 = 4;
      do
      {
        uint64_t v42 = v41 - 4;
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          uint64_t v44 = *(void *)(v5 + 8 * v41);
          BOOL v35 = __OFADD__(v42, 1);
          uint64_t v45 = v41 - 3;
          if (v35) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v44 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          BOOL v35 = __OFADD__(v42, 1);
          uint64_t v45 = v41 - 3;
          if (v35)
          {
LABEL_33:
            __break(1u);
            break;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v4, 1, 1, AssociatedTypeWitness);
        (*v40)(*(void *)(*(void *)(v44 + 64) + 40), v4, v56);
        swift_continuation_resume();
        ++v41;
      }
      while (v45 != MEMORY[0x1A624E190](v5, v6));
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v65);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    LODWORD(v50) = v11;
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      v63[0] = v48;
      os_log_t v47 = v10;
      uint64_t v12 = v49;
      *(_DWORD *)unint64_t v49 = 136315138;
      uint64_t v46 = v12 + 4;
      v8((long long *)v65, v54, v7);
      uint64_t v13 = >> prefix<A>(_:)((uint64_t)v65, v7);
      unint64_t v15 = v14;
      uint64_t v16 = type metadata accessor for Optional();
      (*(void (**)(void *, uint64_t))(*(void *)(v16 - 8) + 8))(v65, v16);
      v65[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, v63);
      uint64_t v17 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v18 = v47;
      uint64_t v19 = v49;
      _os_log_impl(&dword_1A375F000, v47, (os_log_type_t)v50, "Terminating sequence from state: %s", v49, 0xCu);
      uint64_t v20 = v48;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v20, -1, -1);
      MEMORY[0x1A624F870](v19, -1, -1);
    }
    else
    {

      swift_release_n();
      uint64_t v17 = v54;
    }
    memset(v65, 0, sizeof(v65));
    long long v66 = xmmword_1A38F7C50;
    swift_beginAccess();
    uint64_t v29 = *(void (**)(void *, void *, uint64_t))(v55 + 40);
    uint64_t v51 = v7;
    v29(v17, v65, v7);
    swift_endAccess();
    os_unfair_lock_unlock(v53);
    if (MEMORY[0x1A624E190](v5, v6))
    {
      uint64_t v30 = (void (**)(void, char *, uint64_t))(v52 + 32);
      uint64_t v31 = 4;
      do
      {
        uint64_t v32 = v31 - 4;
        Swift::Bool v33 = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (v33)
        {
          uint64_t v34 = *(void *)(v5 + 8 * v31);
          BOOL v35 = __OFADD__(v32, 1);
          uint64_t v36 = v31 - 3;
          if (v35) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v34 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          BOOL v35 = __OFADD__(v32, 1);
          uint64_t v36 = v31 - 3;
          if (v35)
          {
LABEL_20:
            __break(1u);
            break;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v4, 1, 1, AssociatedTypeWitness);
        (*v30)(*(void *)(*(void *)(v34 + 64) + 40), v4, v56);
        swift_continuation_resume();
        ++v31;
      }
      while (v36 != MEMORY[0x1A624E190](v5, v6));
    }
    swift_bridgeObjectRelease();
    (*(void (**)(long long *, uint64_t))(v55 + 8))(&v67, v51);
  }
}

uint64_t _PublisherElements.Iterator.Inner.next()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return MEMORY[0x1F4188298](_PublisherElements.Iterator.Inner.next(), 0, 0);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance _PublisherElements<A>.Iterator.Inner(uint64_t a1)
{
  return _PublisherElements.Iterator.Inner.receive(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance _PublisherElements<A>.Iterator.Inner()
{
  return specialized _PublisherElements.Iterator.Inner.receive(completion:)();
}

void protocol witness for Cancellable.cancel() in conformance _PublisherElements<A>.Iterator.Inner()
{
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance _PublisherElements<A>.Iterator.Inner()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t _PublisherElements.Iterator.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = specialized _PublisherElements.Iterator.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t closure #2 in _PublisherElements.Iterator.next()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x1F4188298](closure #2 in _PublisherElements.Iterator.next(), 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance _PublisherElements<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[3] = a2;
  v6[4] = v2;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  void v6[2] = a1;
  return MEMORY[0x1F4188298](_PublisherElements.Iterator.next(), 0, 0);
}

uint64_t _s15GroupActivities18_PublisherElementsV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = _s15GroupActivities18_PublisherElementsV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return MEMORY[0x1F4187C88](a1, a2, a3, a5, a6);
}

uint64_t _s15GroupActivities18_PublisherElementsV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _PublisherElements.publisher.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance _PublisherElements<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = _PublisherElements.makeAsyncIterator()();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v2, a1);
  *a2 = v5;
  return result;
}

uint64_t specialized _PublisherElements.Iterator.Inner.receive(completion:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v18[-v4];
  uint64_t v6 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v6);
  memset(v19, 0, sizeof(v19));
  long long v20 = xmmword_1A38F7C50;
  swift_beginAccess();
  uint64_t v7 = type metadata accessor for _PublisherElements.Iterator.Inner.State();
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v7 - 8) + 40))(v0 + 32, v19, v7);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v8 = *(void *)(v0 + 24);
  swift_beginAccess();
  uint64_t v9 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  os_unfair_lock_unlock(v6);
  if (MEMORY[0x1A624E190](v8, v9))
  {
    uint64_t v10 = (void (**)(void, unsigned char *, uint64_t))(v3 + 32);
    uint64_t v11 = 4;
    do
    {
      uint64_t v12 = v11 - 4;
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v14 = *(void *)(v8 + 8 * v11);
        BOOL v15 = __OFADD__(v12, 1);
        uint64_t v16 = v11 - 3;
        if (v15) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v14 = _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        BOOL v15 = __OFADD__(v12, 1);
        uint64_t v16 = v11 - 3;
        if (v15)
        {
LABEL_9:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v5, 1, 1, AssociatedTypeWitness);
      (*v10)(*(void *)(*(void *)(v14 + 64) + 40), v5, v2);
      swift_continuation_resume();
      ++v11;
    }
    while (v16 != MEMORY[0x1A624E190](v8, v9));
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of Subscription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Subscription?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in _PublisherElements<A>()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for _PublisherElements(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for _PublisherElements(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for _PublisherElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for _PublisherElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for _PublisherElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for _PublisherElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for _PublisherElements(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _PublisherElements(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1A37ED66CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t method lookup function for _PublisherElements.Iterator.Inner(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for _PublisherElements.Iterator.Inner);
}

uint64_t dispatch thunk of _PublisherElements.Iterator.Inner.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t assignWithCopy for _PublisherElements.Iterator.Inner.State(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for _PublisherElements.Iterator.Inner.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _PublisherElements.Iterator.Inner.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for _PublisherElements.Iterator.Inner.State(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double destructiveInjectEnumTag for _PublisherElements.Iterator.Inner.State(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

uint64_t dispatch thunk of AnyTransportSession.receivedDataPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyTransportSession.sendData(_:to:reliability:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of AnyTransportSession.attachmentsPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnyTransportSession.receivedAttachmentPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AnyTransportSession.uploadAttachment(id:attachment:developerMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 40)
                                                                                     + **(int **)(a6 + 40));
  int v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *int v13 = v6;
  v13[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of AnyTransportSession.downloadAttachment(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 48) + **(int **)(a4 + 48));
  BOOL v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *BOOL v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of AnyTransportSession.fetchMetadata(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 56) + **(int **)(a3 + 56));
  unsigned int v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *unsigned int v7 = v3;
  v7[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.body.getter;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of AnyTransportSession.removeAttachment(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 64) + **(int **)(a3 + 64));
  unsigned int v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *unsigned int v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t PresenceSession.__allocating_init(provider:serviceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  uint64_t ObjectType = swift_getObjectType();

  return specialized PresenceSession.init(provider:serviceProvider:)(a1, a2, a3, v8, ObjectType, a4);
}

BOOL static PresenceSession.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t PresenceSessionInfo.Participant.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t PresenceSessionInfo.Participant.handle.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PresenceSessionInfo.Participant(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PresenceSessionInfo.Participant.isCurrentDevice.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PresenceSessionInfo.Participant(0) + 24));
}

uint64_t PresenceSessionInfo.Participant.description.getter()
{
  _StringGuts.grow(_:)(52);
  v1._object = (void *)0x80000001A3901430;
  v1._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x656C646E6168202CLL;
  v3._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v3);
  uint64_t v4 = type metadata accessor for PresenceSessionInfo.Participant(0);
  unsigned int v5 = (uint64_t *)(v0 + *(int *)(v4 + 20));
  uint64_t v6 = *v5;
  unsigned int v7 = (void *)v5[1];
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0xD000000000000013;
  v9._object = (void *)0x80000001A3901450;
  String.append(_:)(v9);
  if (*(unsigned char *)(v0 + *(int *)(v4 + 24))) {
    uint64_t v10 = 1702195828;
  }
  else {
    uint64_t v10 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + *(int *)(v4 + 24))) {
    unint64_t v11 = 0xE400000000000000;
  }
  else {
    unint64_t v11 = 0xE500000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0;
}

void PresenceSessionInfo.Participant.hash(into:)()
{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for PresenceSessionInfo.Participant(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v0 + *(int *)(v1 + 24)));
}

Swift::Int PresenceSessionInfo.Participant.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for PresenceSessionInfo.Participant(0);
  String.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v0 + *(int *)(v1 + 24)));
  return Hasher._finalize()();
}

uint64_t PresenceSessionInfo.Participant.init(id:handle:isCurrentDevice:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t result = type metadata accessor for PresenceSessionInfo.Participant(0);
  unint64_t v12 = (void *)(a5 + *(int *)(result + 20));
  *unint64_t v12 = a2;
  v12[1] = a3;
  *(unsigned char *)(a5 + *(int *)(result + 24)) = a4;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresenceSessionInfo.Participant(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v1 + *(int *)(a1 + 24)));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 24)));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

uint64_t protocol witness for Identifiable.id.getter in conformance PresenceSessionInfo.Participant@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t PresenceSessionInfo.activeParticipants.getter()
{
  return swift_bridgeObjectRetain();
}

void one-time initialization function for default()
{
  static PresenceSessionInfo.default = MEMORY[0x1E4FBC870];
}

uint64_t PresenceSessionInfo.init(activeParticipants:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static PresenceSessionInfo.default.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  *a1 = static PresenceSessionInfo.default;

  return swift_bridgeObjectRetain();
}

BOOL static PresenceSession.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void PresenceSession.Errors.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int PresenceSession.Errors.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

void PresenceSession.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int PresenceSession.State.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t PresenceSession.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_id;
  uint64_t v4 = type metadata accessor for UUID();
  unsigned int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t key path setter for PresenceSession.state : PresenceSession(unsigned char *a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unsigned int v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LOBYTE(a1) = *a1;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, *a2 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v4);
  v9[15] = (_BYTE)a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t PresenceSession.state.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v1);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  return v6[15];
}

uint64_t PresenceSession.$state.getter()
{
  return PresenceSession.$state.getter(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>, &OBJC_IVAR____TtC15GroupActivities15PresenceSession__state);
}

uint64_t key path setter for PresenceSession.activeParticipants : PresenceSession(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = (void *)(*a2 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_activeParticipants);
  swift_beginAccess();
  *uint64_t v4 = v2;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 392))(v5);
}

uint64_t PresenceSession.activeParticipants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PresenceSession.members.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Set<AddressableMember>>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__members, v1);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6[1];
}

uint64_t PresenceSession.members.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Set<AddressableMember>>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__members, v3);
  v8[1] = a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t (*PresenceSession.members.modify(void *a1))()
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Set<AddressableMember>>);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  v2[6] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify();
  return PresenceSession.members.modify;
}

uint64_t PresenceSession.$members.getter()
{
  return PresenceSession.$state.getter(&demangling cache variable for type metadata for CurrentSubject<Set<AddressableMember>>, &OBJC_IVAR____TtC15GroupActivities15PresenceSession__members);
}

uint64_t PresenceSession.sessionInfo.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSessionInfo>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__sessionInfo, v1);
  CurrentSubject.wrappedValue.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t PresenceSession.sessionInfo.setter(uint64_t *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSessionInfo>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__sessionInfo, v3);
  v9[1] = v7;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t (*PresenceSession.sessionInfo.modify(void *a1))()
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSessionInfo>);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  v2[6] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify();
  return PresenceSession.members.modify;
}

uint64_t PresenceSession.$sessionInfo.getter()
{
  return PresenceSession.$state.getter(&demangling cache variable for type metadata for CurrentSubject<PresenceSessionInfo>, &OBJC_IVAR____TtC15GroupActivities15PresenceSession__sessionInfo);
}

uint64_t PresenceSession.$state.getter(uint64_t *a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *a2, v4);
  uint64_t v8 = CurrentSubject.projectedValue.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t PresenceSession.observers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PresenceSession.observers.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_observers);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PresenceSession.observers.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t PresenceSession.provider.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider;
  swift_beginAccess();
  return MEMORY[0x1A624F980](v1);
}

uint64_t PresenceSession.provider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PresenceSession.provider.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1A624F980](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SystemCoordinatorHost.delegate.modify;
}

uint64_t PresenceSession.serviceProvider.getter()
{
  return swift_unknownObjectRetain();
}

void *PresenceSession.connection.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_connection);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void PresenceSession.connection.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_connection);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*v3)
  {
    id v5 = v4;
    dispatch thunk of XPCClient.destroyConnection()();

    uint64_t v4 = *v3;
  }
  void *v3 = a1;
}

void (*PresenceSession.connection.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15GroupActivities15PresenceSession_connection;
  v3[4] = v1;
  v3[5] = v4;
  id v5 = (void **)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *v5;
  v3[3] = *v5;
  id v7 = v6;
  return PresenceSession.connection.modify;
}

void PresenceSession.connection.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = (void **)(*(void *)a1 + 24);
  id v3 = *v4;
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 40);
  id v7 = *(void **)(v6 + v5);
  if (a2)
  {
    id v8 = v3;
    if (v7)
    {
      id v9 = v7;
      dispatch thunk of XPCClient.destroyConnection()();

      uint64_t v10 = *(void **)(v6 + v5);
      uint64_t v6 = v2[4];
      uint64_t v5 = v2[5];
    }
    else
    {
      uint64_t v10 = 0;
    }
    *(void *)(v6 + v5) = v3;

    unint64_t v12 = *v4;
  }
  else
  {
    if (v7)
    {
      id v11 = v7;
      dispatch thunk of XPCClient.destroyConnection()();

      unint64_t v12 = *(void **)(v6 + v5);
      uint64_t v6 = v2[4];
      uint64_t v5 = v2[5];
    }
    else
    {
      unint64_t v12 = 0;
    }
    *(void *)(v6 + v5) = v3;
  }

  free(v2);
}

uint64_t PresenceSession.__allocating_init(provider:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static BackgroundGroupSessionManager.shared;
  id v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _UNKNOWN **))(v2 + 352);
  swift_retain();

  return v7(a1, a2, v5, &protocol witness table for BackgroundGroupSessionManager);
}

uint64_t PresenceSession.init(provider:serviceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType();

  return specialized PresenceSession.init(provider:serviceProvider:)(a1, a2, a3, v4, ObjectType, a4);
}

uint64_t closure #1 in PresenceSession.init(provider:serviceProvider:)(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *a1;
  if (one-time initialization token for presenceSession != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.presenceSession);
  swift_bridgeObjectRetain_n();
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v17 = v5;
    v18[0] = v10;
    *(_DWORD *)id v9 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>);
    uint64_t v11 = String.init<A>(reflecting:)();
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v7, v8, "Received updated membership list: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v10, -1, -1);
    MEMORY[0x1A624F870](v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v4, 1, 1, v15);
    uint64_t v16 = (void *)swift_allocObject();
    _OWORD v16[2] = 0;
    uint64_t v16[3] = 0;
    uint64_t v16[4] = v14;
    v16[5] = v5;
    swift_bridgeObjectRetain();
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PresenceSession.init(provider:serviceProvider:), (uint64_t)v16);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in PresenceSession.init(provider:serviceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)a4 + 376) + **(int **)(*(void *)a4 + 376));
  id v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *id v7 = v5;
  v7[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v9(a5);
}

uint64_t PresenceSession.join()()
{
  *(void *)(v1 + 24) = v0;
  return MEMORY[0x1F4188298](PresenceSession.join(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  unint64_t v12 = v0;
  if (one-time initialization token for presenceSession != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.presenceSession);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_retain();
    uint64_t v6 = PresenceSession.description.getter();
    os_log_type_t v8 = v7;
    swift_release();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v2, v3, "%s received request to join", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_retain();
  id v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v9;
  *id v9 = v0;
  v9[1] = PresenceSession.join();
  return MEMORY[0x1F4113390]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PresenceSession.join();
  }
  else
  {
    swift_release();
    uint64_t v2 = PresenceSession.join();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in PresenceSession.join()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return MEMORY[0x1F4188298](closure #1 in PresenceSession.join(), 0, 0);
}

uint64_t closure #1 in PresenceSession.join()()
{
  uint64_t v3 = (uint64_t (*)(void *))(*(void *)(**(void **)(v0 + 16) + 384)
                                      + **(int **)(**(void **)(v0 + 16) + 384));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in PresenceSession.join();
  return v3(&async function pointer to partial apply for closure #1 in closure #1 in PresenceSession.join());
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in PresenceSession.join(), 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in PresenceSession.join()(uint64_t a1)
{
  v1[8] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in PresenceSession.join(), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 120) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = closure #1 in closure #1 in PresenceSession.join();
  }
  else {
    uint64_t v4 = closure #1 in closure #1 in PresenceSession.join();
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

uint64_t closure #1 in closure #1 in PresenceSession.join()()
{
  uint64_t v34 = v0;
  if (one-time initialization token for presenceSession != -1) {
    swift_once();
  }
  uint64_t v1 = v0 + 8;
  uint64_t v2 = type metadata accessor for Logger();
  v0[12] = __swift_project_value_buffer(v2, (uint64_t)static Log.presenceSession);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v32 = v0;
    uint64_t v5 = v0 + 7;
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v33[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_retain();
    uint64_t v8 = PresenceSession.description.getter();
    unint64_t v10 = v9;
    swift_release();
    *uint64_t v5 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v33);
    uint64_t v0 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v3, v4, "%s Starting to process request to join", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v7, -1, -1);
    MEMORY[0x1A624F870](v6, -1, -1);
  }
  else
  {

    uint64_t v11 = swift_release_n();
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)*v1 + 160))(v11))
  {
    swift_retain_n();
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      v33[0] = v15;
      swift_retain();
      uint64_t v16 = PresenceSession.description.getter();
      unint64_t v18 = v17;
      swift_release();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v19 = "%s Failed to join due to invalid state";
LABEL_12:
      _os_log_impl(&dword_1A375F000, v12, v13, v19, v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v15, -1, -1);
      MEMORY[0x1A624F870](v14, -1, -1);

LABEL_14:
      lazy protocol witness table accessor for type PresenceSession.Errors and conformance PresenceSession.Errors();
      swift_allocError();
      *uint64_t v24 = 0;
      swift_willThrow();
      swift_task_dealloc();
      uint64_t v25 = (uint64_t (*)(void))v0[1];
      return v25();
    }
    goto LABEL_13;
  }
  long long v20 = (void *)(*(uint64_t (**)(void))(*(void *)*v1 + 328))();

  if (v20)
  {
    swift_retain_n();
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      v33[0] = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_retain();
      uint64_t v21 = PresenceSession.description.getter();
      unint64_t v23 = v22;
      swift_release();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v19 = "%s has existing connection. Failing.";
      goto LABEL_12;
    }
LABEL_13:

    swift_release_n();
    goto LABEL_14;
  }
  uint64_t v27 = *(void *)(*v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_serviceProvider + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 + 48) + **(int **)(v27 + 48));
  uint64_t v29 = (void *)swift_task_alloc();
  v0[13] = v29;
  *uint64_t v29 = v0;
  v29[1] = closure #1 in closure #1 in PresenceSession.join();
  uint64_t v30 = v0[8];
  return v31(v30, ObjectType, v27);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = (void *)v0[14];
  uint64_t v2 = v0[8];
  type metadata accessor for PresenceSessionClientConnection();
  uint64_t v3 = v1;
  PresenceSessionConnectionInfo.endpoint.getter();

  os_log_type_t v4 = XPCClient.__allocating_init(listenerEndpoint:)();
  v0[16] = v4;
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  PresenceSessionClientConnection.handleUpdatedPresentDevices.setter();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  PresenceSessionClientConnection.handleServerDisconnectClosure.setter();
  swift_release();
  uint64_t v5 = swift_task_alloc();
  v0[17] = v5;
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[18] = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in closure #1 in PresenceSession.join();
  uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4188160](v6, 0, 0, 0x29286E696F6ALL, 0xE600000000000000, partial apply for closure #3 in closure #1 in closure #1 in PresenceSession.join(), v5, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in PresenceSession.join();
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in PresenceSession.join();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *);
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;

  uint64_t v1 = *(void **)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  os_log_type_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = *(void (**)(void *))(*(void *)v4 + 336);
  uint64_t v7 = v1;
  v6(v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v5);
  *(unsigned char *)(v0 + 184) = 1;
  CurrentSubject.wrappedValue.setter();
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  unint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 216))(v8);
  *(void *)(v0 + 160) = v9;
  unint64_t v12 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v4 + 376) + **(int **)(*(void *)v4 + 376));
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v10;
  *unint64_t v10 = v0;
  v10[1] = closure #1 in closure #1 in PresenceSession.join();
  return v12(v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in PresenceSession.join();
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in PresenceSession.join();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 128);

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18[2];
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  uint64_t v1 = (void *)v0[15];
  swift_retain();
  uint64_t v2 = v1;
  swift_retain();
  uint64_t v3 = v1;
  os_log_type_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[15];
    uint64_t v7 = swift_slowAlloc();
    unint64_t v17 = swift_slowAlloc();
    v18[0] = v17;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_retain();
    uint64_t v8 = PresenceSession.description.getter();
    unint64_t v10 = v9;
    swift_release();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v0[5] = v6;
    uint64_t v11 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    unint64_t v12 = String.init<A>(reflecting:)();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v4, v5, "%s failed to create remote presence session, error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v17, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
    uint64_t v14 = (void *)v0[15];
    swift_release_n();
  }
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 128);

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 128);

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in closure #1 in closure #1 in PresenceSession.join()(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for PresenceSessionInfo.Participant(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v47 - v7;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    if (one-time initialization token for presenceSession != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.presenceSession);
    swift_bridgeObjectRetain_n();
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    unint64_t v50 = a1;
    if (v14)
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      v52[0] = v49;
      uint64_t v48 = v15;
      *(_DWORD *)uint64_t v15 = 136315138;
      v47[1] = v15 + 4;
      uint64_t v16 = type metadata accessor for PresenceSessionParticipant();
      swift_bridgeObjectRetain();
      uint64_t v17 = MEMORY[0x1A624E120](v50, v16);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      uint64_t v20 = v17;
      a1 = v50;
      uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v21 = v48;
      _os_log_impl(&dword_1A375F000, v12, v13, "Received updated participants: %s", v48, 0xCu);
      uint64_t v22 = v49;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v22, -1, -1);
      MEMORY[0x1A624F870](v21, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v24 = MEMORY[0x1E4FBC860];
    if (v23)
    {
      v52[0] = MEMORY[0x1E4FBC860];
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23 & ~(v23 >> 63), 0);
      if (v23 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v49 = v10;
      uint64_t v24 = v52[0];
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v25 = 0;
        do
        {
          MEMORY[0x1A624E900](v25, a1);
          uint64_t v26 = (void *)PresenceSessionParticipant.id.getter();
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v27 = PresenceSessionParticipant.handle.getter();
          uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v30 = v29;

          LOBYTE(v27) = PresenceSessionParticipant.isCurrentDevice.getter();
          swift_unknownObjectRelease();
          uint64_t v31 = (uint64_t *)&v8[*(int *)(v2 + 20)];
          *uint64_t v31 = v28;
          v31[1] = v30;
          v8[*(int *)(v2 + 24)] = v27 & 1;
          v52[0] = v24;
          unint64_t v33 = *(void *)(v24 + 16);
          unint64_t v32 = *(void *)(v24 + 24);
          if (v33 >= v32 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
            uint64_t v24 = v52[0];
          }
          ++v25;
          *(void *)(v24 + 16) = v33 + 1;
          outlined init with take of PresenceSessionInfo.Participant((uint64_t)v8, v24+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v33);
          a1 = v50;
        }
        while (v23 != v25);
      }
      else
      {
        uint64_t v34 = (id *)(a1 + 32);
        do
        {
          id v35 = *v34;
          uint64_t v36 = (void *)PresenceSessionParticipant.id.getter();
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v37 = PresenceSessionParticipant.handle.getter();
          uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v40 = v39;

          LOBYTE(v37) = PresenceSessionParticipant.isCurrentDevice.getter();
          uint64_t v41 = (uint64_t *)&v6[*(int *)(v2 + 20)];
          *uint64_t v41 = v38;
          v41[1] = v40;
          v6[*(int *)(v2 + 24)] = v37 & 1;
          v52[0] = v24;
          unint64_t v43 = *(void *)(v24 + 16);
          unint64_t v42 = *(void *)(v24 + 24);
          if (v43 >= v42 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
            uint64_t v24 = v52[0];
          }
          *(void *)(v24 + 16) = v43 + 1;
          outlined init with take of PresenceSessionInfo.Participant((uint64_t)v6, v24+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v43);
          ++v34;
          --v23;
        }
        while (v23);
      }
      uint64_t v10 = v49;
    }
    uint64_t v44 = specialized Set.init<A>(_:)(v24);
    swift_bridgeObjectRelease();
    uint64_t v45 = (uint64_t *)(v10 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_activeParticipants);
    swift_beginAccess();
    *uint64_t v45 = v44;
    uint64_t v46 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v10 + 392))(v46);
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in closure #1 in closure #1 in PresenceSession.join()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    if (one-time initialization token for presenceSession != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.presenceSession);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl(&dword_1A375F000, v7, v8, "Server disconnected. Invalidating session.", v9, 2u);
      MEMORY[0x1A624F870](v9, -1, -1);
    }

    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 16))(v3, v5 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v0);
    v10[7] = 2;
    CurrentSubject.wrappedValue.setter();
    (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in closure #1 in closure #1 in PresenceSession.join()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(void *)(v11 + ((v8 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join();
  *(void *)(v12 + 24) = v11;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  void aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_95_0;
  os_log_type_t v13 = _Block_copy(aBlock);
  id v14 = a2;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v9, v13);

  _Block_release(v13);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a3) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  uint64_t v12 = a2;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(&v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], a2, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v6 + 32))(v9 + v8, &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

uint64_t PresenceSession.leave()()
{
  *(void *)(v1 + 24) = v0;
  return MEMORY[0x1F4188298](PresenceSession.leave(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v12 = v0;
  if (one-time initialization token for presenceSession != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.presenceSession);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_retain();
    uint64_t v6 = PresenceSession.description.getter();
    unint64_t v8 = v7;
    swift_release();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v2, v3, "%s received request to leave", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v9;
  *uint64_t v9 = v0;
  v9[1] = PresenceSession.leave();
  return MEMORY[0x1F4113390]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PresenceSession.leave();
  }
  else
  {
    swift_release();
    uint64_t v2 = PresenceSession.leave();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t closure #1 in PresenceSession.leave()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return MEMORY[0x1F4188298](closure #1 in PresenceSession.leave(), 0, 0);
}

uint64_t closure #1 in PresenceSession.leave()()
{
  uint64_t v3 = (uint64_t (*)(void *))(*(void *)(**(void **)(v0 + 16) + 384)
                                      + **(int **)(**(void **)(v0 + 16) + 384));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in PresenceSession.leave();
  return v3(&async function pointer to partial apply for closure #1 in closure #1 in PresenceSession.leave());
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in PresenceSession.leave(), 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t closure #1 in closure #1 in PresenceSession.leave()(uint64_t a1)
{
  v1[3] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in PresenceSession.leave(), 0, 0);
}

uint64_t closure #1 in closure #1 in PresenceSession.leave()()
{
  uint64_t v22 = v0;
  if ((*(unsigned __int8 (**)(void))(**(void **)(v0 + 24) + 160))() == 1)
  {
    uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 24) + 328))();
    *(void *)(v0 + 56) = v1;
    if (v1)
    {
      uint64_t v2 = v1;
      uint64_t v3 = *(void *)(v0 + 24);
      uint64_t v4 = swift_task_alloc();
      *(void *)(v0 + 64) = v4;
      *(void *)(v4 + 16) = v2;
      *(void *)(v4 + 24) = v3;
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v5;
      *uint64_t v5 = v0;
      v5[1] = closure #1 in closure #1 in PresenceSession.leave();
      uint64_t v6 = MEMORY[0x1E4FBC848] + 8;
      return MEMORY[0x1F4188160](v5, 0, 0, 0x2928657661656CLL, 0xE700000000000000, partial apply for closure #1 in closure #1 in closure #1 in PresenceSession.leave(), v4, v6);
    }
    if (one-time initialization token for presenceSession != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.presenceSession);
    swift_retain_n();
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v21 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_retain();
      uint64_t v14 = PresenceSession.description.getter();
      unint64_t v16 = v15;
      swift_release();
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v10, v11, "%s couldn't leave because we don't have an XPC connection. Daemon would've torn down when the connection went away so returning success.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v13, -1, -1);
      MEMORY[0x1A624F870](v12, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v18 = *(void *)(v0 + 40);
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v19 = *(void *)(v0 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, *(void *)(v0 + 24) + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v19);
    *(unsigned char *)(v0 + 88) = 2;
    CurrentSubject.wrappedValue.setter();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    (*(void (**)(void))(**(void **)(v0 + 24) + 336))(0);
    swift_task_dealloc();
    unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    lazy protocol witness table accessor for type PresenceSession.Errors and conformance PresenceSession.Errors();
    swift_allocError();
    *uint64_t v7 = 0;
    swift_willThrow();
    swift_task_dealloc();
    unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in closure #1 in PresenceSession.leave();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #1 in closure #1 in PresenceSession.leave();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 24);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v2);
  *(unsigned char *)(v0 + 90) = 2;
  CurrentSubject.wrappedValue.setter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  (*(void (**)(void))(**(void **)(v0 + 24) + 336))(0);
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);

  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v3);
  *(unsigned char *)(v0 + 89) = 2;
  CurrentSubject.wrappedValue.setter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(void))(*(void *)v4 + 336))(0);
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t closure #1 in closure #1 in closure #1 in PresenceSession.leave()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  uint64_t v12 = a1;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(&v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v6 + 32))(v9 + v8, &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

void closure #1 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v18 = a6;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = a4;
  void aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = a5;
  unint64_t v16 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v13, *v18, v16);
  _Block_release(v16);
}

uint64_t PresenceSession.updateMembers(_:)(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x1F4188298](PresenceSession.updateMembers(_:), 0, 0);
}

uint64_t PresenceSession.updateMembers(_:)()
{
  uint64_t v39 = v0;
  uint64_t v1 = v0[6];
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 224);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = v2(v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v4);
  v0[7] = v5;
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    specialized Sequence.compactMap<A>(_:)(v0[5]);
    uint64_t v8 = specialized Set.init<A>(_:)(v7);
    v0[8] = v8;
    swift_bridgeObjectRelease();
    if ((v8 & 0xC000000000000001) != 0) {
      uint64_t v9 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    if (v9 == *(void *)(v0[5] + 16))
    {
      uint64_t v18 = v0[6];
      uint64_t v19 = (void *)swift_task_alloc();
      v0[9] = v19;
      v19[2] = v6;
      void v19[3] = v8;
      v19[4] = v18;
      uint64_t v20 = (void *)swift_task_alloc();
      v0[10] = v20;
      *uint64_t v20 = v0;
      uint64_t v21 = MEMORY[0x1E4FBC848];
      v20[1] = PresenceSession.updateMembers(_:);
      return MEMORY[0x1F4188160](v20, 0, 0, 0xD000000000000011, 0x80000001A3901470, partial apply for closure #2 in PresenceSession.updateMembers(_:), v19, v21 + 8);
    }
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t type = v24;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      v38[0] = v36;
      *(_DWORD *)uint64_t v25 = 136315394;
      lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
      swift_bridgeObjectRetain();
      uint64_t v26 = Set.description.getter();
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      type metadata accessor for TUHandle();
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(uint64_t))type metadata accessor for TUHandle);
      swift_bridgeObjectRetain();
      uint64_t v29 = Set.description.getter();
      unint64_t v31 = v30;
      swift_bridgeObjectRelease();
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v23, type, "Failed to convert members types: %s vs convertedMembers: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v36, -1, -1);
      MEMORY[0x1A624F870](v25, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type PresenceSession.Errors and conformance PresenceSession.Errors();
    swift_allocError();
    *unint64_t v33 = 1;
    swift_willThrow();
  }
  else
  {
    if (one-time initialization token for presenceSession != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.presenceSession);
    swift_retain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      v38[0] = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      swift_retain();
      uint64_t v15 = PresenceSession.description.getter();
      unint64_t v17 = v16;
      swift_release();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v11, v12, "%s Dropping update due to no connection existing", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v14, -1, -1);
      MEMORY[0x1A624F870](v13, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    lazy protocol witness table accessor for type PresenceSession.Errors and conformance PresenceSession.Errors();
    swift_allocError();
    *unint64_t v32 = 0;
    swift_willThrow();
  }
  uint64_t v34 = (uint64_t (*)(void))v0[1];
  return v34();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PresenceSession.updateMembers(_:);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v2 = PresenceSession.updateMembers(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 56);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #2 in PresenceSession.updateMembers(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v13 + ((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = a4;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for closure #1 in closure #2 in PresenceSession.updateMembers(_:);
  *(void *)(v14 + 24) = v13;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  void aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_4;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v15);

  _Block_release(v15);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a4) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #2 in PresenceSession.updateMembers(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(&v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], a3, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v8 + 32))(v11 + v10, &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v7);
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

void closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = *a1;
  type metadata accessor for TUHandle();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(uint64_t))type metadata accessor for TUHandle);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v5);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:);
  void aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_60;
  unint64_t v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v8, sel_updateMembers_completion_, isa, v12);
  _Block_release(v12);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #2 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(void *a1)
{
  if (one-time initialization token for presenceSession != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.presenceSession);
  swift_retain();
  id v3 = a1;
  swift_retain();
  id v4 = a1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v17 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_retain();
    uint64_t v9 = PresenceSession.description.getter();
    unint64_t v11 = v10;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2080;
    id v12 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "%s had its error handler triggered for the XPC message. Error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v17 = (uint64_t)a1;
  id v15 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t PresenceSession.invalidation(block:)(int *a1)
{
  v2[5] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  v2[6] = v4;
  v2[7] = *(void *)(v4 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v7 = (uint64_t (*)(void))((char *)a1 + *a1);
  uint64_t v5 = (void *)swift_task_alloc();
  v2[9] = v5;
  *uint64_t v5 = v2;
  v5[1] = PresenceSession.invalidation(block:);
  return v7();
}

uint64_t PresenceSession.invalidation(block:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](PresenceSession.invalidation(block:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    id v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  NSObject *log;
  os_log_type_t type;
  uint64_t v24;
  uint64_t v25[2];
  uint64_t v26;
  uint64_t v27;

  uint64_t v26 = v0;
  if (one-time initialization token for presenceSession != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.presenceSession);
  swift_retain();
  id v3 = v1;
  swift_retain();
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void **)(v0 + 80);
  if (v7)
  {
    uint64_t v9 = swift_slowAlloc();
    os_log_type_t v24 = swift_slowAlloc();
    v25[0] = v24;
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_retain();
    os_log_type_t type = v6;
    unint64_t v10 = PresenceSession.description.getter();
    log = v5;
    id v12 = v11;
    swift_release();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    *(void *)(v0 + 24) = v8;
    uint64_t v13 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    unint64_t v14 = String.init<A>(reflecting:)();
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    uint64_t v5 = log;
    _os_log_impl(&dword_1A375F000, log, type, "Invalidating %s due to invalidation block throwing error. %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v24, -1, -1);
    MEMORY[0x1A624F870](v9, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v17 = *(void *)(v0 + 56);
  id v16 = *(void *)(v0 + 64);
  uint64_t v19 = *(void *)(v0 + 40);
  uint64_t v18 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v18);
  *(unsigned char *)(v0 + 88) = 2;
  CurrentSubject.wrappedValue.setter();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  (*(void (**)(void))(*(void *)v19 + 336))(0);
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

Swift::Void __swiftcall PresenceSession.updateSessionInfo()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 192))();
  (*(void (**)(uint64_t *))(*(void *)v0 + 256))(&v1);
}

uint64_t PresenceSession.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__members;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Set<AddressableMember>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__sessionInfo;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSessionInfo>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_workQueue;
  uint64_t v10 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider);
  swift_unknownObjectRelease();

  return v0;
}

uint64_t PresenceSession.__deallocating_deinit()
{
  PresenceSession.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Identifiable.id.getter in conformance PresenceSession@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t PresenceSession.description.getter()
{
  _StringGuts.grow(_:)(36);
  v1._object = (void *)0x80000001A3901490;
  v1._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 0x3A6574617473202CLL;
  v2._object = (void *)0xE900000000000020;
  String.append(_:)(v2);
  (*(void (**)(void))(*(void *)v0 + 160))();
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresenceSession()
{
  return PresenceSession.description.getter();
}

uint64_t specialized PresenceSession.init(provider:serviceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = a3;
  uint64_t v49 = a6;
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v46 = *(void *)(v7 - 8);
  uint64_t v47 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v43 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v41 = *(void *)(v9 - 8);
  uint64_t v42 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v40 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v39 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSessionInfo>);
  uint64_t v13 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  id v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Set<AddressableMember>>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state;
  LOBYTE(v51) = 0;
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v24, v23, v20);
  uint64_t v25 = MEMORY[0x1E4FBC870];
  *(void *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_activeParticipants) = MEMORY[0x1E4FBC870];
  uint64_t v26 = a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__members;
  uint64_t v51 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v26, v19, v16);
  uint64_t v27 = a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__sessionInfo;
  uint64_t v51 = v25;
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v27, v15, v38);
  uint64_t v28 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v39, 1, 1, v28);
  (*(void (**)(char *, void, uint64_t))(v41 + 104))(v40, *MEMORY[0x1E4FBD028], v42);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  *(void *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_observers) = v25;
  uint64_t v29 = a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider;
  *(void *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_connection) = 0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v31 = v45;
  uint64_t v32 = *(void *)(v45 + 8);
  uint64_t v33 = v43;
  GroupSessionProvider.uuid.getter(ObjectType, v32, v43);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_id, v33, v47);
  swift_beginAccess();
  *(void *)(v29 + 8) = v31;
  swift_unknownObjectWeakAssign();
  uint64_t v34 = (void *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_serviceProvider);
  uint64_t v35 = v49;
  *uint64_t v34 = v48;
  v34[1] = v35;
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 72);
  swift_unknownObjectRetain();
  uint64_t v50 = v36(ObjectType, v32);
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<Set<AddressableMember>, Never> and conformance CurrentValueSubject<A, B>();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return a4;
}

uint64_t type metadata accessor for PresenceSessionInfo.Participant(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for PresenceSessionInfo.Participant);
}

uint64_t specialized static PresenceSessionInfo.Participant.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (static UUID.== infix(_:_:)())
  {
    uint64_t v4 = type metadata accessor for PresenceSessionInfo.Participant(0);
    uint64_t v5 = *(int *)(v4 + 20);
    uint64_t v6 = *(void *)(a1 + v5);
    uint64_t v7 = *(void *)(a1 + v5 + 8);
    uint64_t v8 = (void *)(a2 + v5);
    BOOL v9 = v6 == *v8 && v7 == v8[1];
    if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), v11 = 0, (v10 & 1) != 0)) {
      char v11 = *(unsigned char *)(a1 + *(int *)(v4 + 24)) ^ *(unsigned char *)(a2 + *(int *)(v4 + 24)) ^ 1;
    }
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t partial apply for closure #1 in PresenceSession.join()()
{
  Swift::String v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *Swift::String v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  v2[2] = v0;
  return MEMORY[0x1F4188298](closure #1 in PresenceSession.join(), 0, 0);
}

uint64_t partial apply for closure #1 in PresenceSession.leave()()
{
  Swift::String v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *Swift::String v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  v2[2] = v0;
  return MEMORY[0x1F4188298](closure #1 in PresenceSession.leave(), 0, 0);
}

unint64_t lazy protocol witness table accessor for type PresenceSession.Errors and conformance PresenceSession.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type PresenceSession.Errors and conformance PresenceSession.Errors;
  if (!lazy protocol witness table cache variable for type PresenceSession.Errors and conformance PresenceSession.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceSession.Errors and conformance PresenceSession.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresenceSession.Errors and conformance PresenceSession.Errors;
  if (!lazy protocol witness table cache variable for type PresenceSession.Errors and conformance PresenceSession.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceSession.Errors and conformance PresenceSession.Errors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember()
{
  unint64_t result = lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember;
  if (!lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember;
  if (!lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember;
  if (!lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember;
  if (!lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
  }
  return result;
}

unint64_t type metadata accessor for TUHandle()
{
  unint64_t result = lazy cache variable for type metadata for TUHandle;
  if (!lazy cache variable for type metadata for TUHandle)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  }
  return result;
}

uint64_t partial apply for closure #2 in PresenceSession.updateMembers(_:)(uint64_t a1)
{
  return closure #2 in PresenceSession.updateMembers(_:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t base witness table accessor for Equatable in PresenceSessionInfo.Participant()
{
  return _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1(&lazy protocol witness table cache variable for type PresenceSessionInfo.Participant and conformance PresenceSessionInfo.Participant, (void (*)(uint64_t))type metadata accessor for PresenceSessionInfo.Participant);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in PresenceSessionInfo.Participant()
{
  return _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
}

unint64_t lazy protocol witness table accessor for type PresenceSession.State and conformance PresenceSession.State()
{
  unint64_t result = lazy protocol witness table cache variable for type PresenceSession.State and conformance PresenceSession.State;
  if (!lazy protocol witness table cache variable for type PresenceSession.State and conformance PresenceSession.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceSession.State and conformance PresenceSession.State);
  }
  return result;
}

uint64_t sub_1A37F5848@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37F5898@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37F58E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 216))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37F5934(uint64_t a1, uint64_t a2)
{
  Swift::String v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 224);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

void *sub_1A37F5988@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 248))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1A37F59E4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 256);
  swift_bridgeObjectRetain();
  return v3(&v5);
}

uint64_t sub_1A37F5A50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 280))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37F5AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 288);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A37F5B00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 304))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A37F5B54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 312);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1A37F5BC0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 328))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37F5C14(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 336);
  id v4 = *a1;
  return v3(v2);
}

ValueMetadata *type metadata accessor for PresenceSessionInfo()
{
  return &type metadata for PresenceSessionInfo;
}

void *initializeBufferWithCopyOfBuffer for PresenceSessionInfo.Participant(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    char v10 = (void *)((char *)a1 + v8);
    char v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *char v10 = *v11;
    v10[1] = v12;
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PresenceSessionInfo.Participant(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  char v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A37F6044);
}

uint64_t sub_1A37F6044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A37F611C);
}

uint64_t sub_1A37F611C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for PresenceSessionInfo.Participant()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for PresenceSession()
{
  return type metadata accessor for PresenceSession(0);
}

uint64_t type metadata accessor for PresenceSession(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for PresenceSession);
}

void type metadata completion function for PresenceSession()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CurrentSubject<PresenceSession.State>(319, &lazy cache variable for type metadata for CurrentSubject<PresenceSession.State>);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CurrentSubject<Set<AddressableMember>>();
      if (v2 <= 0x3F)
      {
        type metadata accessor for CurrentSubject<PresenceSession.State>(319, &lazy cache variable for type metadata for CurrentSubject<PresenceSessionInfo>);
        if (v3 <= 0x3F)
        {
          type metadata accessor for AsyncSerialQueue();
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t method lookup function for PresenceSession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PresenceSession);
}

uint64_t dispatch thunk of PresenceSession.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PresenceSession.$state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of PresenceSession.activeParticipants.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PresenceSession.members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PresenceSession.members.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of PresenceSession.members.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of PresenceSession.$members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of PresenceSession.sessionInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of PresenceSession.sessionInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of PresenceSession.sessionInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of PresenceSession.$sessionInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of PresenceSession.observers.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of PresenceSession.observers.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of PresenceSession.observers.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of PresenceSession.provider.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of PresenceSession.provider.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of PresenceSession.provider.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of PresenceSession.connection.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of PresenceSession.connection.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of PresenceSession.connection.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of PresenceSession.__allocating_init(provider:serviceProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 352))();
}

uint64_t dispatch thunk of PresenceSession.join()()
{
  unint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 360) + **(int **)(*(void *)v0 + 360));
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *unint64_t v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v4();
}

uint64_t dispatch thunk of PresenceSession.leave()()
{
  unint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 368) + **(int **)(*(void *)v0 + 368));
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *unint64_t v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v4();
}

uint64_t dispatch thunk of PresenceSession.updateMembers(_:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 376) + **(int **)(*(void *)v1 + 376));
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *unint64_t v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v6(a1);
}

uint64_t dispatch thunk of PresenceSession.invalidation(block:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 384) + **(int **)(*(void *)v2 + 384));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v8(a1, a2);
}

uint64_t dispatch thunk of PresenceSession.updateSessionInfo()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

void type metadata accessor for CurrentSubject<Set<AddressableMember>>()
{
  if (!lazy cache variable for type metadata for CurrentSubject<Set<AddressableMember>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<AddressableMember>);
    unint64_t v0 = type metadata accessor for CurrentSubject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CurrentSubject<Set<AddressableMember>>);
    }
  }
}

void type metadata accessor for CurrentSubject<PresenceSession.State>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for CurrentSubject();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for PresenceSession.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A37F6D80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresenceSession.Errors()
{
  return &type metadata for PresenceSession.Errors;
}

unsigned char *storeEnumTagSinglePayload for PresenceSession.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A37F6E84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresenceSession.State()
{
  return &type metadata for PresenceSession.State;
}

uint64_t sub_1A37F6EBC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in PresenceSession.init(provider:serviceProvider:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in PresenceSession.init(provider:serviceProvider:)(a1, v4, v5, v7, v6);
}

uint64_t sub_1A37F6FC4()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x1F4186498](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in closure #2 in PresenceSession.updateMembers(_:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in closure #2 in PresenceSession.updateMembers(_:)(v3, v4, v0 + v2, v5);
}

uint64_t sub_1A37F714C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

void partial apply for closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:)(void **a1)
{
  closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in PresenceSession.leave()()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in PresenceSession.leave()(v0);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PresenceSession.leave()(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in PresenceSession.leave()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in PresenceSession.leave()(void **a1)
{
  closure #1 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(a1, *(void *)(v1 + 16), (uint64_t)&unk_1EF71E1D0, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:), (uint64_t)&block_descriptor_74, (SEL *)&selRef_leaveWithCompletion_);
}

uint64_t partial apply for closure #2 in closure #1 in closure #2 in PresenceSession.updateMembers(_:)(void *a1)
{
  return closure #2 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:)(void *a1)
{
  return closure #1 in closure #1 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(a1);
}

uint64_t partial apply for closure #1 in closure #1 in PresenceSession.join()()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in PresenceSession.join()(v0);
}

uint64_t sub_1A37F73EC()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PresenceSession.join()(unint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in PresenceSession.join()(a1);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in PresenceSession.join()()
{
  return closure #2 in closure #1 in closure #1 in PresenceSession.join()();
}

uint64_t partial apply for closure #3 in closure #1 in closure #1 in PresenceSession.join()(uint64_t a1)
{
  return closure #3 in closure #1 in closure #1 in PresenceSession.join()(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1A37F743C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x1F4186498](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(v3, v0 + v2, v4);
}

uint64_t sub_1A37F75BC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(void **a1)
{
  closure #1 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(a1, *(void *)(v1 + 16), (uint64_t)&unk_1EF71E2C0, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:), (uint64_t)&block_descriptor_104, (SEL *)&selRef_joinWithCompletion_);
}

uint64_t objectdestroy_53Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t objectdestroy_56Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t outlined init with take of PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PresenceSessionInfo.Participant(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PresenceSession.init(provider:serviceProvider:)(uint64_t *a1)
{
  return closure #1 in PresenceSession.init(provider:serviceProvider:)(a1);
}

unint64_t lazy protocol witness table accessor for type CurrentValueSubject<Set<AddressableMember>, Never> and conformance CurrentValueSubject<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrentValueSubject<Set<AddressableMember>, Never> and conformance CurrentValueSubject<A, B>;
  if (!lazy protocol witness table cache variable for type CurrentValueSubject<Set<AddressableMember>, Never> and conformance CurrentValueSubject<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<Set<AddressableMember>, Never> and conformance CurrentValueSubject<A, B>);
  }
  return result;
}

uint64_t dispatch thunk of AnyGroupSession.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyGroupSession.initiator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnyGroupSession.isInvalid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnyGroupSession.distributionCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AnyGroupSession.invalidateIfWaiting()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

BOOL static CKShareGroupSessionProvider.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void CKShareGroupSessionProvider.Errors.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int CKShareGroupSessionProvider.Errors.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CKShareGroupSessionProvider<A>.Errors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static CKShareGroupSessionProvider.Errors.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CKShareGroupSessionProvider<A>.Errors()
{
  return CKShareGroupSessionProvider.Errors.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CKShareGroupSessionProvider<A>.Errors(uint64_t a1)
{
  CKShareGroupSessionProvider.Errors.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CKShareGroupSessionProvider<A>.Errors()
{
  Hasher.init(_seed:)();
  CKShareGroupSessionProvider.Errors.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t CKShareGroupSessionProvider.activity.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 120));
}

uint64_t CKShareGroupSessionProvider.localMember.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Member?(v1 + *(void *)(*(void *)v1 + 128), a1);
}

uint64_t CKShareGroupSessionProvider.presenceInfo.getter()
{
  return swift_retain();
}

uint64_t CKShareGroupSessionProvider.presenceInfo.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 136));
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t (*CKShareGroupSessionProvider.presenceInfo.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path setter for CKShareGroupSessionProvider.queue : <A>CKShareGroupSessionProvider<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AsyncSerialQueue();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 280))(v6);
}

uint64_t CKShareGroupSessionProvider.queue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 144);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for AsyncSerialQueue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CKShareGroupSessionProvider.queue.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 144);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*CKShareGroupSessionProvider.queue.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

id CKShareGroupSessionProvider.container.getter()
{
  uint64_t v1 = (void **)(v0 + *(void *)(*(void *)v0 + 152));
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void CKShareGroupSessionProvider.container.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + *(void *)(*(void *)v1 + 152));
  swift_beginAccess();
  uint64_t v4 = *v3;
  void *v3 = a1;
}

uint64_t (*CKShareGroupSessionProvider.container.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for CKShareGroupSessionProvider.share : <A>CKShareGroupSessionProvider<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 320))();
  *a2 = result;
  return result;
}

uint64_t key path setter for CKShareGroupSessionProvider.share : <A>CKShareGroupSessionProvider<A>(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 328))(*a1);
}

uint64_t CKShareGroupSessionProvider.share.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1A37F8070@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 320))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37F80C4(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 328))(*a1);
}

uint64_t sub_1A37F8120()
{
  return 16;
}

__n128 sub_1A37F812C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t CKShareGroupSessionProvider.share.setter()
{
  return static Published.subscript.setter();
}

void (*CKShareGroupSessionProvider.share.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return GroupSession.internalActiveParticipants.modify;
}

uint64_t key path setter for CKShareGroupSessionProvider.$share : <A>CKShareGroupSessionProvider<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>.Publisher);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 352))(v6);
}

uint64_t CKShareGroupSessionProvider.$share.getter()
{
  return swift_endAccess();
}

uint64_t CKShareGroupSessionProvider.$share.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*CKShareGroupSessionProvider.$share.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>.Publisher);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  CKShareGroupSessionProvider.$share.getter();
  return CKShareGroupSessionProvider.$share.modify;
}

void CKShareGroupSessionProvider.$share.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    CKShareGroupSessionProvider.$share.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    CKShareGroupSessionProvider.$share.setter(*(void *)(*(void *)a1 + 32));
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t CKShareGroupSessionProvider.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CKShareGroupSessionProvider.cancellables.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 168));
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*CKShareGroupSessionProvider.cancellables.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t CKShareGroupSessionProvider.__allocating_init(id:activity:share:container:)(char *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v10 = swift_allocObject();
  CKShareGroupSessionProvider.init(id:activity:share:container:)(a1, a2, a3, a4, a5);
  return v10;
}

void *CKShareGroupSessionProvider.init(id:activity:share:container:)(char *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = v5;
  id v78 = a5;
  uint64_t v79 = a1;
  uint64_t v80 = a2;
  id v81 = a4;
  uint64_t v8 = (void *)*v5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v13 - 8);
  id v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<GroupSessionProviderState, Never>);
  swift_allocObject();
  v5[4] = CurrentValueSubject.init(_:)();
  uint64_t v16 = *(void *)(*v5 + 136);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  v82[0] = static PresenceSessionInfo.default;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  *(void *)((char *)v5 + v16) = CurrentValueSubject.init(_:)();
  static TaskPriority.userInitiated.getter();
  uint64_t v17 = type metadata accessor for TaskPriority();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v72 = v18 + 56;
  uint64_t v73 = v19;
  v19((uint64_t)v15, 0, 1, v17);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBD028], v9);
  uint64_t v74 = v15;
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  *(void *)((char *)v5 + *(void *)(*v5 + 168)) = MEMORY[0x1E4FBC870];
  uint64_t v20 = v80;
  v5[2] = v79;
  v5[3] = v20;
  uint64_t v21 = v8[10];
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(void))(v22 + 16);
  uint64_t v79 = (char *)v5 + *(void *)(*v5 + 120);
  v23();
  id v24 = v81;
  id v25 = objc_msgSend(v81, sel_containerID);

  id v76 = v25;
  id v77 = v8;
  uint64_t v80 = v22;
  if (!v25)
  {
    if (one-time initialization token for ckShareGroupSessionProvider != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Log.ckShareGroupSessionProvider);
    uint64_t v46 = v24;
    id v47 = v24;
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v58))
    {
      uint64_t v70 = v21;
      long long v59 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      v82[0] = v60;
      uint64_t v71 = a3;
      *(_DWORD *)long long v59 = 136315138;
      uint64_t v75 = v59 + 4;
      uint64_t v83 = (uint64_t)v47;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      id v61 = v47;
      uint64_t v62 = String.init<A>(reflecting:)();
      uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v82);
      a3 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v21 = v70;
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v48, v58, "Share %s doesn't have a containerID", v59, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v60, -1, -1);
      uint64_t v56 = v59;
      goto LABEL_17;
    }
LABEL_18:

    goto LABEL_19;
  }
  v82[0] = CKShare.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
  swift_allocObject();
  v6[5] = CurrentValueSubject.init(_:)();
  id v26 = objc_msgSend(v24, sel_currentUserParticipant);
  if (v26)
  {
    uint64_t v27 = v26;
    id v28 = CKShareParticipant.handle.getter();

    if (v28)
    {
      uint64_t v70 = v21;
      uint64_t v71 = a3;
      id v29 = objc_msgSend(v28, sel_normalizedValue);
      if (!v29) {
        id v29 = objc_msgSend(v28, sel_value);
      }
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      uint64_t v82[3] = (uint64_t)&type metadata for AddressableMember;
      v82[4] = lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
      v82[0] = v30;
      v82[1] = v32;
      outlined init with take of Member?((uint64_t)v82, (uint64_t)v6 + *(void *)(*v6 + 128));
      id v33 = v78;
      *(void *)((char *)v6 + *(void *)(*v6 + 152)) = v78;
      swift_beginAccess();
      id v34 = v24;
      id v77 = v34;
      uint64_t v79 = (char *)v33;
      uint64_t v83 = (uint64_t)v34;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      Published.init(initialValue:)();
      swift_endAccess();
      id v81 = v28;
      uint64_t v36 = v73;
      uint64_t v35 = (uint64_t)v74;
      v73((uint64_t)v74, 1, 1, v17);
      uint64_t v37 = (void *)swift_allocObject();
      uint64_t v37[2] = 0;
      v37[3] = 0;
      v37[4] = v6;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v35, (uint64_t)&async function pointer to partial apply for closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:), (uint64_t)v37);
      swift_beginAccess();
      type metadata accessor for AnyCancellable();
      swift_allocObject();
      swift_retain();
      uint64_t v38 = AnyCancellable.init(_:)();
      specialized Set._Variant.insert(_:)(&v83, v38);
      swift_release();
      swift_endAccess();
      swift_release();
      v36(v35, 1, 1, v17);
      uint64_t v39 = (void *)swift_allocObject();
      v39[2] = 0;
      void v39[3] = 0;
      uint64_t v40 = v77;
      v39[4] = v6;
      v39[5] = v40;
      uint64_t v41 = v79;
      v39[6] = v79;
      id v42 = v40;
      id v43 = v41;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v35, (uint64_t)&async function pointer to partial apply for closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:), (uint64_t)v39);
      swift_beginAccess();
      swift_allocObject();
      swift_retain();
      uint64_t v44 = AnyCancellable.init(_:)();
      specialized Set._Variant.insert(_:)(&v83, v44);
      swift_release();
      swift_endAccess();

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v71, v70);
      return v6;
    }
  }
  if (one-time initialization token for ckShareGroupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  __swift_project_value_buffer(v45, (uint64_t)static Log.ckShareGroupSessionProvider);
  uint64_t v46 = v24;
  id v47 = v24;
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v48, v49)) {
    goto LABEL_18;
  }
  uint64_t v71 = a3;
  uint64_t v50 = swift_slowAlloc();
  uint64_t v70 = v21;
  uint64_t v51 = (uint8_t *)v50;
  uint64_t v52 = swift_slowAlloc();
  v82[0] = v52;
  *(_DWORD *)uint64_t v51 = 136315138;
  uint64_t v75 = v51 + 4;
  uint64_t v83 = (uint64_t)v47;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
  id v53 = v47;
  uint64_t v54 = String.init<A>(reflecting:)();
  uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v82);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  a3 = v71;
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1A375F000, v48, v49, "Share %s doesn't have a currentUserParticipant", v51, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1A624F870](v52, -1, -1);
  uint64_t v56 = v51;
  uint64_t v21 = v70;
LABEL_17:
  MEMORY[0x1A624F870](v56, -1, -1);
LABEL_19:

  type metadata accessor for CKShareGroupSessionProvider.Errors();
  swift_getWitnessTable();
  swift_allocError();
  *long long v64 = 0;
  swift_willThrow();

  uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
  v65(a3, v21);
  swift_bridgeObjectRelease();
  swift_release();
  if (v76) {
    swift_release();
  }
  v65((uint64_t)v79, v21);
  swift_release();
  long long v66 = (char *)v6 + *(void *)(*v6 + 144);
  uint64_t v67 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(char *, uint64_t))(*(void *)(v67 - 8) + 8))(v66, v67);
  swift_bridgeObjectRelease();
  type metadata accessor for CKShareGroupSessionProvider();
  swift_deallocPartialClassInstance();
  return v6;
}

uint64_t CKShare.members.getter()
{
  id v1 = objc_msgSend(v0, sel_participants);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShareParticipant);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v3 = MEMORY[0x1E4FBC860];
  uint64_t v38 = MEMORY[0x1E4FBC860];
  if (v2 >> 62) {
    goto LABEL_21;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v3 = v2 & 0xC000000000000001;
    uint64_t v5 = 4;
    uint64_t v6 = (SEL *)&property descriptor for LinkManager.hasConnectedOnce;
    unint64_t v36 = v2;
    while (1)
    {
      id v7 = v3 ? (id)MEMORY[0x1A624E900](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      uint64_t v8 = v7;
      uint64_t v9 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if ([v7 v6[309]] == (id)2)
      {
        id v10 = CKShareParticipant.handle.getter();

        if (v10)
        {
          MEMORY[0x1A624E0F0]();
          if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        __swift_project_value_buffer(v11, (uint64_t)static Log.default);
        id v12 = v8;
        uint64_t v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = swift_slowAlloc();
          uint64_t v16 = swift_slowAlloc();
          uint64_t v37 = v16;
          *(_DWORD *)uint64_t v15 = 136315138;
          id v17 = v12;
          uint64_t v18 = String.init<A>(reflecting:)();
          *(void *)(v15 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v37);

          unint64_t v2 = v36;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1A375F000, v13, v14, "Skipping participant due to status: %s", (uint8_t *)v15, 0xCu);
          swift_arrayDestroy();
          uint64_t v20 = v16;
          uint64_t v6 = (SEL *)&property descriptor for LinkManager.hasConnectedOnce;
          MEMORY[0x1A624F870](v20, -1, -1);
          MEMORY[0x1A624F870](v15, -1, -1);
        }
        else
        {
        }
      }
      ++v5;
      if (v9 == v4)
      {
        swift_bridgeObjectRelease();
        unint64_t v21 = v38;
        unint64_t v3 = MEMORY[0x1E4FBC860];
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  unint64_t v21 = MEMORY[0x1E4FBC860];
LABEL_23:
  swift_bridgeObjectRelease();
  if (!(v21 >> 62))
  {
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v22) {
      goto LABEL_25;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    uint64_t v25 = MEMORY[0x1E4FBC860];
LABEL_38:
    uint64_t v35 = specialized Set.init<A>(_:)(v25);
    swift_bridgeObjectRelease();
    return v35;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v22) {
    goto LABEL_37;
  }
LABEL_25:
  uint64_t v38 = v3;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22 & ~(v22 >> 63), 0);
  if ((v22 & 0x8000000000000000) == 0)
  {
    uint64_t v24 = 0;
    uint64_t v25 = v38;
    do
    {
      if ((v21 & 0xC000000000000001) != 0) {
        id v26 = (id)MEMORY[0x1A624E900](v24, v21);
      }
      else {
        id v26 = *(id *)(v21 + 8 * v24 + 32);
      }
      uint64_t v27 = v26;
      id v28 = objc_msgSend(v26, sel_normalizedValue);
      if (!v28) {
        id v28 = objc_msgSend(v27, sel_value);
      }
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;

      uint64_t v38 = v25;
      unint64_t v33 = *(void *)(v25 + 16);
      unint64_t v32 = *(void *)(v25 + 24);
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        uint64_t v25 = v38;
      }
      ++v24;
      *(void *)(v25 + 16) = v33 + 1;
      uint64_t v34 = v25 + 16 * v33;
      *(void *)(v34 + 32) = v29;
      *(void *)(v34 + 40) = v31;
    }
    while (v22 != v24);
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  __break(1u);
  return result;
}

id CKShareParticipant.handle.getter()
{
  id v1 = v0;
  id v2 = objc_msgSend(v0, sel_userIdentity);
  unint64_t v3 = objc_msgSend(v2, sel_lookupInfo);

  if (!v3)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    id v8 = v1;
    unint64_t v3 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v3, v9))
    {

      return 0;
    }
    id v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    v37[0] = v11;
    *(_DWORD *)id v10 = 136315138;
    uint64_t v38 = (uint64_t)v8;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShareParticipant);
    id v12 = v8;
    uint64_t v13 = String.init<A>(reflecting:)();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v3, v9, "Missing user identity for participant: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v11, -1, -1);
    MEMORY[0x1A624F870](v10, -1, -1);
LABEL_22:

    return 0;
  }
  id v4 = [v3 emailAddress];
  if (!v4)
  {
    id v15 = [v3 phoneNumber];
    if (!v15) {
      goto LABEL_17;
    }
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;
    uint64_t v20 = PNCopyBestGuessCountryCodeForNumber();
    if (v20)
    {
      unint64_t v21 = (void *)v20;
      swift_bridgeObjectRelease();
    }
    else
    {
      v37[0] = 43;
      v37[1] = 0xE100000000000000;
      v22._uint64_t countAndFlagsBits = v17;
      v22._object = v19;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      uint64_t v23 = (void *)MEMORY[0x1A624DFA0](43, 0xE100000000000000);
      swift_bridgeObjectRelease();
      unint64_t v21 = (void *)PNCopyBestGuessCountryCodeForNumber();

      if (!v21) {
        goto LABEL_15;
      }
    }
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    unint64_t v21 = (void *)MEMORY[0x1A624DFA0](v24, v26);
    swift_bridgeObjectRelease();
LABEL_15:
    id v6 = objc_msgSend(self, sel_normalizedPhoneNumberHandleForValue_isoCountryCode_, v16, v21);

    if (v6) {
      goto LABEL_16;
    }
LABEL_17:
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Log.default);
    id v28 = v1;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      v37[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v38 = (uint64_t)v28;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShareParticipant);
      id v33 = v28;
      uint64_t v34 = String.init<A>(reflecting:)();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v29, v30, "Missing handle for participant: %s", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v32, -1, -1);
      MEMORY[0x1A624F870](v31, -1, -1);
    }
    else
    {
    }
    goto LABEL_22;
  }
  uint64_t v5 = v4;
  id v6 = objc_msgSend(self, sel_normalizedEmailAddressHandleForValue_, v4);

  if (!v6) {
    goto LABEL_17;
  }
LABEL_16:

  return v6;
}

uint64_t closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>);
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>.Publisher);
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>.Iterator);
  v4[14] = v7;
  v4[15] = *(void *)(v7 - 8);
  v4[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:), 0, 0);
}

uint64_t closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 72);
  (*(void (**)(void))(**(void **)(v0 + 56) + 344))();
  uint64_t v7 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<CKShare>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CKShare>.Publisher);
  MEMORY[0x1A624DD30](v3, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  uint64_t v8 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<CKShare>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>.Iterator);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v9;
  *uint64_t v9 = v0;
  v9[1] = closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  uint64_t v10 = *(void *)(v0 + 112);
  return MEMORY[0x1F4187C78](v0 + 16, v10, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  }
  else {
    uint64_t v2 = closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 152) = *(void *)(v0 + 16);
  return MEMORY[0x1F4188298](closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v31;
  void *v32;
  uint64_t v33;

  uint64_t v32 = v0;
  uint64_t v1 = (void *)v0[19];
  if (v1)
  {
    if (one-time initialization token for ckShareGroupSessionProvider != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.ckShareGroupSessionProvider);
    swift_retain_n();
    uint64_t v3 = v1;
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.default.getter();
    uint64_t v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = v0[7];
    if (v6)
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v31 = v9;
      *(_DWORD *)uint64_t v8 = 136315394;
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 408))(v9);
      uint64_t v12 = v11;
      swift_release();
      *(void *)(v8 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v31);
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v8 + 12) = 2080;
      v0[6] = v3;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      uint64_t v13 = v3;
      unint64_t v14 = String.init<A>(reflecting:)();
      *(void *)(v8 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v31);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v4, v5, "%s Saw an updated CKShare: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v9, -1, -1);
      MEMORY[0x1A624F870](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    (*(void (**)(uint64_t))(*(void *)v0[7] + 224))(v25);
    v0[5] = CKShare.members.getter();
    CurrentValueSubject.send(_:)();
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t v26 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<CKShare>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>.Iterator);
    uint64_t v27 = (void *)swift_task_alloc();
    v0[17] = v27;
    *uint64_t v27 = v0;
    v27[1] = closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:);
    id v28 = v0[14];
    return MEMORY[0x1F4187C78](v0 + 2, v28, v26);
  }
  else
  {
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    if (one-time initialization token for ckShareGroupSessionProvider != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.ckShareGroupSessionProvider);
    swift_retain();
    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.default.getter();
    unint64_t v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[7];
    if (v19)
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      Swift::String v22 = swift_slowAlloc();
      uint64_t v31 = v22;
      *(_DWORD *)unint64_t v21 = 136315138;
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 408))(v22);
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1A375F000, v17, v18, "%s Stopped listening for updated CKShares", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v22, -1, -1);
      MEMORY[0x1A624F870](v21, -1, -1);
    }
    else
    {
      swift_release();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = (uint64_t (*)(void))v0[1];
    return v29();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 24) = *(void *)(v0 + 144);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

uint64_t closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  uint64_t v7 = type metadata accessor for AsyncSerialQueue();
  v6[15] = v7;
  unsigned char v6[16] = *(void *)(v7 - 8);
  v6[17] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>);
  v6[18] = v8;
  v6[19] = *(void *)(v8 - 8);
  v6[20] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Iterator);
  v6[21] = v9;
  v6[22] = *(void *)(v9 - 8);
  v6[23] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:), 0, 0);
}

uint64_t closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  uint64_t v37 = v0;
  if (one-time initialization token for ckShareGroupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)v0[13];
  uint64_t v1 = (void *)v0[14];
  uint64_t v3 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v3, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain_n();
  id v4 = v2;
  id v5 = v1;
  id v6 = v4;
  id v7 = v5;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = (void *)v0[13];
  uint64_t v12 = (void *)v0[14];
  uint64_t v13 = v0[12];
  if (v10)
  {
    id v33 = (void *)v0[14];
    os_log_type_t type = v9;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = v35;
    *(_DWORD *)uint64_t v14 = 136315650;
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v13 + 408))();
    unint64_t v17 = v16;
    swift_release();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v0[8] = v11;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
    id v18 = v11;
    uint64_t v19 = String.init<A>(reflecting:)();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 22) = 2080;
    v0[10] = v33;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKContainer);
    id v21 = v33;
    uint64_t v22 = String.init<A>(reflecting:)();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v8, type, "%s Starting task to listen for CKShare updates on share: %s, container: %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v35, -1, -1);
    MEMORY[0x1A624F870](v14, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v25 = v0[19];
  uint64_t v24 = v0[20];
  uint64_t v26 = v0[18];
  uint64_t v27 = (void *)v0[13];
  id v28 = (void *)v0[14];
  type metadata accessor for ShareChangeObserver();
  swift_allocObject();
  uint64_t v29 = ShareChangeObserver.init(share:container:)(v27, v28);
  v0[25] = v29;
  (*(void (**)(void))(*v29 + 128))();
  MEMORY[0x1A624E3D0](v26);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  os_log_type_t v30 = (void *)swift_task_alloc();
  v0[26] = v30;
  *os_log_type_t v30 = v0;
  v30[1] = closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  uint64_t v31 = v0[21];
  return MEMORY[0x1F4187ED8](v0 + 2, 0, 0, v31, v0 + 3);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0) {
    uint64_t v1 = closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  }
  else {
    uint64_t v1 = closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  }
  return MEMORY[0x1F4188298](v1, 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  uint64_t v32 = v0;
  uint64_t v1 = (void *)v0[2];
  if (v1)
  {
    uint64_t v2 = v1;
    swift_retain_n();
    uint64_t v3 = v2;
    id v4 = Logger.logObject.getter();
    id v5 = static os_log_type_t.default.getter();
    id v6 = os_log_type_enabled(v4, v5);
    id v7 = v0[12];
    if (v6)
    {
      uint64_t v8 = swift_slowAlloc();
      os_log_type_t v30 = swift_slowAlloc();
      uint64_t v31 = v30;
      *(_DWORD *)uint64_t v8 = 136315650;
      os_log_type_t v9 = (*(uint64_t (**)(void))(*(void *)v7 + 408))();
      uint64_t v11 = v10;
      swift_release();
      *(void *)(v8 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v31);
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      v0[5] = v3;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      uint64_t v12 = v3;
      uint64_t v13 = String.init<A>(reflecting:)();
      *(void *)(v8 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v31);

      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 22) = 2080;
      uint64_t v15 = objc_msgSend(v12, sel_participants);
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShareParticipant);
      unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v0[6] = v16;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CKShareParticipant]);
      unint64_t v17 = String.init<A>(reflecting:)();
      *(void *)(v8 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v31);

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v4, v5, "%s Saw share %s updated with participants: %s", (uint8_t *)v8, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v30, -1, -1);
      MEMORY[0x1A624F870](v8, -1, -1);
    }
    else
    {

      uint64_t v19 = swift_release_n();
    }
    unint64_t v23 = v0[16];
    uint64_t v22 = v0[17];
    uint64_t v24 = v0[15];
    uint64_t v25 = v0[12];
    (*(void (**)(uint64_t))(*(void *)v25 + 272))(v19);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v25;
    *(void *)(v26 + 24) = v3;
    swift_retain();
    uint64_t v27 = v3;
    AsyncSerialQueue.perform(_:)();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    id v28 = (void *)swift_task_alloc();
    v0[26] = v28;
    *id v28 = v0;
    v28[1] = closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:);
    uint64_t v29 = v0[21];
    return MEMORY[0x1F4187ED8](v0 + 2, 0, 0, v29, v0 + 3);
  }
  else
  {
    (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
}

{
  void *v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  void *v12;
  uint64_t v13;

  uint64_t v12 = v0;
  (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
  uint64_t v1 = (void *)v0[3];
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = v0[12];
    id v5 = (uint8_t *)swift_slowAlloc();
    id v6 = swift_slowAlloc();
    uint64_t v11 = v6;
    *(_DWORD *)id v5 = 136315138;
    id v7 = (*(uint64_t (**)(void))(*(void *)v4 + 408))();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1A375F000, v2, v3, "%s Share ended", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v6, -1, -1);
    MEMORY[0x1A624F870](v5, -1, -1);
    swift_release();
  }
  else
  {
    swift_release();

    swift_release();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t closure #1 in closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x1F4188298](closure #1 in closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:), 0, 0);
}

uint64_t closure #1 in closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  (*(void (**)(void))(**(void **)(v0 + 16) + 400))(*(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CKShareGroupSessionProvider.updateShare(with:)(CKShare with)
{
  uint64_t v2 = v1;
  id v4 = [(objc_class *)with.super.super.isa recordChangeTag];
  if (!v4) {
    goto LABEL_11;
  }
  id v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  os_log_type_t v9 = (void *)(*(uint64_t (**)(void))(*(void *)v2 + 320))();
  id v10 = objc_msgSend(v9, sel_recordChangeTag);

  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if (v11 == v6 && v13 == v8)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
    (*(void (**)(Class))(*(void *)v2 + 328))(with.super.super.isa);
    return;
  }
LABEL_11:
  if (one-time initialization token for ckShareGroupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.ckShareGroupSessionProvider);
  unint64_t v17 = with.super.super.isa;
  swift_retain_n();
  id v18 = v17;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v34 = v22;
    *(_DWORD *)uint64_t v21 = 136315394;
    id v23 = [(objc_class *)v18 recordChangeTag];
    if (v23)
    {
      uint64_t v24 = v23;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v25 = String.init<A>(reflecting:)();
      unint64_t v27 = v26;
    }
    else
    {
      unint64_t v27 = 0xE300000000000000;
      uint64_t v25 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v21 + 12) = 2080;
    id v28 = (void *)(*(uint64_t (**)(void))(*(void *)v2 + 320))();
    id v29 = objc_msgSend(v28, sel_recordChangeTag);

    if (v29)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v30 = String.init<A>(reflecting:)();
      unint64_t v32 = v31;
    }
    else
    {
      unint64_t v32 = 0xE300000000000000;
      uint64_t v30 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v19, v20, "Dropping share because recordChangeTag %s <= %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v22, -1, -1);
    MEMORY[0x1A624F870](v21, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  type metadata accessor for CKShareGroupSessionProvider.Errors();
  swift_getWitnessTable();
  swift_allocError();
  *id v33 = 0;
  swift_willThrow();
}

uint64_t *CKShareGroupSessionProvider.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if (one-time initialization token for ckShareGroupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain();
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v15 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = (*(uint64_t (**)(void))(*v0 + 408))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v4, v5, "%s Deinit'd", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v7, -1, -1);
    MEMORY[0x1A624F870](v6, -1, -1);
  }
  else
  {

    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 120));
  outlined destroy of Member?((uint64_t)v0 + *(void *)(*v0 + 128));
  swift_release();
  uint64_t v10 = (uint64_t)v0 + *(void *)(*v0 + 144);
  uint64_t v11 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);

  uint64_t v12 = (uint64_t)v1 + *(void *)(*v1 + 160);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t CKShareGroupSessionProvider.__deallocating_deinit()
{
  CKShareGroupSessionProvider.deinit();

  return swift_deallocClassInstance();
}

uint64_t CKShareGroupSessionProvider.description.getter()
{
  _StringGuts.grow(_:)(49);
  v1._object = (void *)0x80000001A3901540;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x203A666C6573283ELL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._uint64_t countAndFlagsBits = 0x203A6469202CLL;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v0 + 176))();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t protocol witness for PresenceGroupSessionProvider.presenceInfo.getter in conformance CKShareGroupSessionProvider<A>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CKShareGroupSessionProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 408))();
}

uint64_t protocol witness for GroupSessionProvider.state.getter in conformance CKShareGroupSessionProvider<A>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t protocol witness for GroupSessionProvider.members.getter in conformance CKShareGroupSessionProvider<A>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t protocol witness for Identifiable.id.getter in conformance CKShareGroupSessionProvider<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 176))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t CKShareGroupSessionProvider.fetchMembershipUpdate()()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for AsyncSerialQueue();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](CKShareGroupSessionProvider.fetchMembershipUpdate(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  uint64_t v13 = v0;
  if (one-time initialization token for ckShareGroupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  Swift::String v3 = static os_log_type_t.default.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  Swift::String v5 = v0[3];
  if (v4)
  {
    Swift::String v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)Swift::String v6 = 136315138;
    uint64_t v12 = v7;
    uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v5 + 408))();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1A375F000, v2, v3, "%s Received request to force fetch membership.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v7, -1, -1);
    MEMORY[0x1A624F870](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  (*(void (**)(void))(*(void *)v0[3] + 272))();
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[7] = v10;
  *uint64_t v10 = v0;
  v10[1] = CKShareGroupSessionProvider.fetchMembershipUpdate();
  return MEMORY[0x1F4113390]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  Swift::String v3 = *(void *)(*(void *)v1 + 40);
  uint64_t v4 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0) {
    Swift::String v5 = AnyGroupActivity.tuConversationActivity<A>(as:);
  }
  else {
    Swift::String v5 = CKShareGroupSessionProvider.fetchMembershipUpdate();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in CKShareGroupSessionProvider.fetchMembershipUpdate()(uint64_t a1, void *a2)
{
  *(void *)(v2 + 128) = a2;
  *(void *)(v2 + 136) = *a2;
  return MEMORY[0x1F4188298](closure #1 in CKShareGroupSessionProvider.fetchMembershipUpdate(), 0, 0);
}

uint64_t closure #1 in CKShareGroupSessionProvider.fetchMembershipUpdate()()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = (uint64_t (**)(void))(*(void *)v1 + 296);
  Swift::String v3 = *v2;
  uint64_t v4 = (void *)(*v2)();
  id v5 = objc_msgSend(v4, sel_sharedCloudDatabase);

  Swift::String v6 = *(uint64_t (**)(void))(*(void *)v1 + 320);
  uint64_t v7 = (void *)v6();
  id v8 = objc_msgSend(v7, sel_recordID);

  id v9 = objc_msgSend(v8, sel_zoneID);
  id v10 = objc_msgSend(v9, sel_ownerName);

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
  {
    uint64_t v17 = swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v17 = swift_bridgeObjectRelease();
  if (v16)
  {
LABEL_8:
    id v18 = (void *)((uint64_t (*)(uint64_t))v3)(v17);
    id v19 = objc_msgSend(v18, sel_privateCloudDatabase);

    id v5 = v19;
  }
  v0[18] = v5;
  os_log_type_t v20 = (void *)((uint64_t (*)(uint64_t))v6)(v17);
  id v21 = objc_msgSend(v20, sel_recordID);
  v0[19] = v21;

  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = closure #1 in CKShareGroupSessionProvider.fetchMembershipUpdate();
  uint64_t v22 = swift_continuation_init();
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) @Sendable (@unowned CKRecord?, @unowned NSError?) -> () with result type CKRecord;
  v0[13] = &block_descriptor;
  v0[14] = v22;
  objc_msgSend(v5, sel_fetchRecordWithID_completionHandler_, v21, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    uint64_t v2 = closure #1 in CKShareGroupSessionProvider.fetchMembershipUpdate();
  }
  else {
    uint64_t v2 = closure #1 in CKShareGroupSessionProvider.fetchMembershipUpdate();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  unsigned char *v26;
  uint64_t (*v27)(void);
  void *v29;
  uint64_t v30;
  uint64_t v31[2];
  uint64_t v32;
  uint64_t v33;

  unint64_t v32 = v0;
  uint64_t v1 = *(void **)(v0 + 120);

  if (one-time initialization token for ckShareGroupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain_n();
  Swift::String v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  id v5 = static os_log_type_t.default.getter();
  Swift::String v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 128);
  if (v6)
  {
    id v8 = swift_slowAlloc();
    id v29 = (void *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    v31[0] = v30;
    *(_DWORD *)id v8 = 136315394;
    id v9 = (*(uint64_t (**)(void))(*(void *)v7 + 408))();
    uint64_t v11 = v10;
    swift_release();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v8 + 12) = 2112;
    *(void *)(v0 + 80) = v3;
    uint64_t v12 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v29 = v3;

    _os_log_impl(&dword_1A375F000, v4, v5, "%s received manually fetched record: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v29, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v30, -1, -1);
    MEMORY[0x1A624F870](v8, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  self;
  uint64_t v13 = swift_dynamicCastObjCClass();
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void (**)(uint64_t))(**(void **)(v0 + 128) + 400);
    char v16 = v3;
    v15(v14);
  }
  else
  {
    swift_retain();
    uint64_t v17 = Logger.logObject.getter();
    id v18 = static os_log_type_t.error.getter();
    id v19 = os_log_type_enabled(v17, v18);
    os_log_type_t v20 = *(void *)(v0 + 128);
    if (v19)
    {
      id v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v31[0] = v22;
      *(_DWORD *)id v21 = 136315138;
      id v23 = (*(uint64_t (**)(void))(*(void *)v20 + 408))();
      *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1A375F000, v17, v18, "%s Received invalid record (non-share) from manual fetch.", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v22, -1, -1);
      MEMORY[0x1A624F870](v21, -1, -1);
    }
    else
    {
      swift_release();
    }

    uint64_t v25 = *(void **)(v0 + 144);
    type metadata accessor for CKShareGroupSessionProvider.Errors();
    swift_getWitnessTable();
    swift_allocError();
    *unint64_t v26 = 1;
    swift_willThrow();
  }
  unint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = (void *)v0[19];
  uint64_t v2 = (void *)v0[18];
  swift_willThrow();

  Swift::String v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) @Sendable (@unowned CKRecord?, @unowned NSError?) -> () with result type CKRecord(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v5 = swift_allocError();
    *Swift::String v6 = a3;
    id v7 = a3;
    return MEMORY[0x1F4188208](v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return MEMORY[0x1F4188200](a1);
  }
}

uint64_t protocol witness for ErrorRecoveryGroupSessionProvider.fetchMembershipUpdate() in conformance CKShareGroupSessionProvider<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return CKShareGroupSessionProvider.fetchMembershipUpdate()();
}

void specialized closure #1 in Task.store(in:)()
{
}

uint64_t type metadata accessor for CKShareGroupSessionProvider.Errors()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CKShareGroupSessionProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of Member?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A37FD2FC()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)(a1, v4, v5, v6);
}

void partial apply for specialized closure #1 in Task.store(in:)()
{
}

uint64_t sub_1A37FD414()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in CKShareGroupSessionProvider.fetchMembershipUpdate()()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  v2[16] = v0;
  v2[17] = *v0;
  return MEMORY[0x1F4188298](closure #1 in CKShareGroupSessionProvider.fetchMembershipUpdate(), 0, 0);
}

uint64_t base witness table accessor for Equatable in CKShareGroupSessionProvider<A>.Errors()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for CKShareGroupSessionProvider<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A37FD690@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A37FD6DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 184);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1A37FD744()
{
  return 16;
}

__n128 sub_1A37FD750(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A37FD75C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37FD7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 208);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A37FD7FC()
{
  return 16;
}

__n128 sub_1A37FD808(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A37FD814@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37FD860(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 232);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A37FD8B4()
{
  return 16;
}

__n128 sub_1A37FD8C0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A37FD8CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37FD918(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 256);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A37FD974()
{
  return 16;
}

__n128 sub_1A37FD980(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A37FD98C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 272))();
}

uint64_t sub_1A37FD9DC()
{
  return 16;
}

__n128 sub_1A37FD9E8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A37FD9F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 296))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37FDA48(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 304))(*a1);
}

uint64_t sub_1A37FDAA4()
{
  return 16;
}

__n128 sub_1A37FDAB0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A37FDABC()
{
  return 16;
}

__n128 sub_1A37FDAC8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A37FDAD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 344))();
}

uint64_t sub_1A37FDB24()
{
  return 16;
}

__n128 sub_1A37FDB30(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A37FDB3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 368))();
  *a2 = result;
  return result;
}

uint64_t sub_1A37FDB90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 376);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A37FDBEC()
{
  return 16;
}

__n128 sub_1A37FDBF8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata completion function for CKShareGroupSessionProvider()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AsyncSerialQueue();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<CKShare>();
      if (v2 <= 0x3F) {
        swift_initClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for CKShareGroupSessionProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CKShareGroupSessionProvider);
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.id.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.id.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.state.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.state.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.members.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.members.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.presenceInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.presenceInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.presenceInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.queue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.queue.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.queue.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.container.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.container.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.container.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.share.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.share.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.share.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.$share.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.$share.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.$share.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.cancellables.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.cancellables.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.cancellables.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.__allocating_init(id:activity:share:container:)()
{
  return (*(uint64_t (**)(void))(v0 + 392))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.updateShare(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

void type metadata accessor for Published<CKShare>()
{
  if (!lazy cache variable for type metadata for Published<CKShare>)
  {
    type metadata accessor for OS_dispatch_queue(255, &lazy cache variable for type metadata for CKShare);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<CKShare>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CKShareGroupSessionProvider.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A37FE380);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1A37FE3A8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  *(_OWORD *)(v2 + 16) = v3;
  return MEMORY[0x1F4188298](closure #1 in closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:), 0, 0);
}

uint64_t closure #1 in closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  id v10 = (uint8_t *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v74 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  char v16 = (uint8_t *)&v74 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  id v19 = (char *)&v74 - v18;
  MEMORY[0x1F4188790](v17);
  id v21 = (char *)&v74 - v20;
  if (!*(void *)(a3 + 16) || (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v23 & 1) == 0))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Log.default);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v21, a1, v6);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v82 = (uint8_t *)a2;
      uint64_t v42 = v41;
      v84[0] = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
      _os_log_impl(&dword_1A375F000, v38, v39, "Allowing session id: %s to be cleaned up and invalidated because session is not present in the list", v40, 0xCu);
      swift_arrayDestroy();
      uint64_t v45 = v42;
      a2 = (uint64_t)v82;
      MEMORY[0x1A624F870](v45, -1, -1);
      MEMORY[0x1A624F870](v40, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
    }

    if (MEMORY[0x1A624F980](a2))
    {
      uint64_t v46 = *(void *)(a2 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v46 + 40))(ObjectType, v46);
      swift_unknownObjectRelease();
    }
    return 1;
  }
  uint64_t v82 = v16;
  uint64_t v24 = *(void *)(*(void *)(a3 + 56) + 8 * v22);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v75 = v13;
  id v76 = v10;
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Log.default);
  outlined init with copy of GroupSessionTable.Storage(a2, (uint64_t)v84);
  id v78 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v79 = v7 + 16;
  v78(v19, a1, v6);
  uint64_t v80 = v26;
  unint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v81 = v24;
    uint64_t v30 = v29;
    uint64_t v74 = swift_slowAlloc();
    uint64_t v85 = v74;
    *(_DWORD *)uint64_t v30 = 134218498;
    uint64_t v83 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2048;
    uint64_t v77 = v7;
    uint64_t v31 = v84[2];
    outlined destroy of weak SystemCoordinatorHostDelegate?((uint64_t)v84);
    uint64_t v83 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 22) = 2080;
    _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v85);
    uint64_t v7 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void (**)(char *, uint64_t))(v7 + 8);
    v34(v19, v6);
    _os_log_impl(&dword_1A375F000, v27, v28, "Comparing the current distributionCount %ld to the cached distribution count %ld for sessionID %s", (uint8_t *)v30, 0x20u);
    uint64_t v35 = v74;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v35, -1, -1);
    uint64_t v36 = v30;
    uint64_t v24 = v81;
    MEMORY[0x1A624F870](v36, -1, -1);
  }
  else
  {
    outlined destroy of weak SystemCoordinatorHostDelegate?((uint64_t)v84);
    uint64_t v34 = *(void (**)(char *, uint64_t))(v7 + 8);
    v34(v19, v6);
  }

  uint64_t v50 = v82;
  if (*(void *)(a2 + 16) >= v24) {
    return 0;
  }
  if (!MEMORY[0x1A624F980](a2))
  {
    v78((char *)v50, a1, v6);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v60))
    {
      id v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      v84[0] = v62;
      uint64_t v77 = v7;
      *(_DWORD *)id v61 = 136315138;
      _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v34((char *)v50, v6);
      _os_log_impl(&dword_1A375F000, v54, v60, "Allowing session id: %s to be cleaned up because we don't have a session tracked.", v61, 0xCu);
      uint64_t v48 = 1;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v62, -1, -1);
      MEMORY[0x1A624F870](v61, -1, -1);

      return v48;
    }
    uint64_t v73 = v50;
LABEL_30:
    v34((char *)v73, v6);

    return 1;
  }
  uint64_t v51 = *(void *)(a2 + 8);
  uint64_t v52 = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v51 + 24))(v52, v51))
  {
    id v53 = v76;
    v78((char *)v76, a1, v6);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      v84[0] = v57;
      uint64_t v77 = v7;
      *(_DWORD *)uint64_t v56 = 136315138;
      uint64_t v82 = v56 + 4;
      _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v34((char *)v53, v6);
      _os_log_impl(&dword_1A375F000, v54, v55, "Allowing session id: %s to be cleaned up because the session is invalid", v56, 0xCu);
      uint64_t v48 = 1;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v57, -1, -1);
      MEMORY[0x1A624F870](v56, -1, -1);
      swift_unknownObjectRelease();

      return v48;
    }
    swift_unknownObjectRelease();
    uint64_t v73 = v53;
    goto LABEL_30;
  }
  uint64_t v65 = v75;
  v78(v75, a1, v6);
  long long v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v66, v67))
  {
    unint64_t v68 = (uint8_t *)swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    uint64_t v77 = v7;
    uint64_t v70 = v69;
    v84[0] = v69;
    *(_DWORD *)unint64_t v68 = 136315138;
    uint64_t v82 = v68 + 4;
    _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v34(v65, v6);
    _os_log_impl(&dword_1A375F000, v66, v67, "Not allowing session id: %s to be cleaned up because app already has an un-joined valid session", v68, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v70, -1, -1);
    MEMORY[0x1A624F870](v68, -1, -1);
    swift_unknownObjectRelease();
  }
  else
  {
    v34(v65, v6);

    swift_unknownObjectRelease();
  }
  return 0;
}

uint64_t closure #2 in closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = a3;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    v21[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v19 = a1;
    _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v21);
    a1 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    _os_log_impl(&dword_1A375F000, v10, v11, "Session %s is no longer tracked. Cleaning up session.", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v14, -1, -1);
    MEMORY[0x1A624F870](v13, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(a1, (uint64_t)v21);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v21, &demangling cache variable for type metadata for GroupSessionTable.Storage?);
  return swift_endAccess();
}

uint64_t GroupSessionTable.registerIfNotPresent<A>(identifier:initialValue:registrationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v25 = a5;
  uint64_t v26 = a4;
  uint64_t v27 = a1;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  Lock.lock()();
  swift_release();
  uint64_t v14 = swift_beginAccess();
  if (!*(void *)(*(void *)(v7 + 24) + 16)
    || (swift_bridgeObjectRetain(),
        specialized __RawDictionaryStorage.find<A>(_:)(v27),
        char v16 = v15,
        uint64_t v14 = swift_bridgeObjectRelease(),
        (v16 & 1) == 0))
  {
    MEMORY[0x1F4188790](v14);
    *(&v23 - 4) = a6;
    *(&v23 - 3) = a7;
    uint64_t v22 = a3;
    uint64_t v21 = a6;
    tryLog<A>(_:_:function:line:)();
    uint64_t v17 = v28[0];
    if (v28[0])
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v13, v27, v11);
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 32);
      swift_unknownObjectRetain();
      uint64_t v19 = v18(a6, a7);
      v28[1] = a7;
      swift_unknownObjectWeakInit();
      swift_unknownObjectRelease();
      v28[2] = v19;
      swift_beginAccess();
      specialized Dictionary.subscript.setter(v28, (uint64_t)v13);
      swift_endAccess();
      v26(v17);
      swift_unknownObjectRelease();
    }
  }
  swift_retain();
  Lock.unlock()();
  return swift_release();
}

uint64_t GroupSessionTable.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t GroupSessionTable.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t GroupSessionTable.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  *(void *)(v0 + 16) = Lock.init()();
  *(void *)(v0 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  return v0;
}

uint64_t GroupSessionTable.init()()
{
  type metadata accessor for Lock();
  swift_allocObject();
  *(void *)(v0 + 16) = Lock.init()();
  *(void *)(v0 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  return v0;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t partial apply for implicit closure #1 in GroupSessionTable.registerIfNotPresent<A>(identifier:initialValue:registrationHandler:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t method lookup function for GroupSessionTable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GroupSessionTable);
}

uint64_t dispatch thunk of GroupSessionTable.cleanUpIfNotPresent(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of GroupSessionTable.registerIfNotPresent<A>(identifier:initialValue:registrationHandler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of GroupSessionTable.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t initializeWithCopy for GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v4;
  return result;
}

uint64_t assignWithCopy for GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  return result;
}

uint64_t initializeWithTake for GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v4;
  return result;
}

uint64_t assignWithTake for GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for GroupSessionTable.Storage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionTable.Storage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      *(void *)(result + 8) = 1;
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v21 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = *(void *)(v11 + 56);
    char v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      char v16 = v11;
      v12(v7, *(void *)(v22 + 48) + v14 * v9, v4);
      uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v15)(v7, v4);
      if (v17) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      uint64_t v11 = v16;
    }
    while (((*(void *)(v20 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  long long v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      uint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          char v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (uint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            uint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
        {
          unint64_t v7 = 0xD000000000000013;
          unint64_t v8 = 0x80000001A38FFB00;
          int v9 = a1;
          if (!a1) {
            goto LABEL_17;
          }
        }
        else
        {
          unint64_t v8 = 0x80000001A38FFB20;
          unint64_t v7 = 0xD000000000000010;
          int v9 = a1;
          if (!a1)
          {
LABEL_17:
            unint64_t v11 = 0xE600000000000000;
            if (v7 != 0x627553627550) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
        }
      }
      else
      {
        unint64_t v8 = 0xE600000000000000;
        unint64_t v7 = 0x627553627550;
        int v9 = a1;
        if (!a1) {
          goto LABEL_17;
        }
      }
      if (v9 == 1) {
        unint64_t v10 = 0xD000000000000013;
      }
      else {
        unint64_t v10 = 0xD000000000000010;
      }
      if (v9 == 1) {
        unint64_t v11 = 0x80000001A38FFB00;
      }
      else {
        unint64_t v11 = 0x80000001A38FFB20;
      }
      if (v7 != v10) {
        goto LABEL_19;
      }
LABEL_18:
      if (v8 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_19:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t partial apply for closure #2 in closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)(a1, a2, v2);
}

uint64_t outlined init with copy of GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit();
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)(a2 + 16) = v4;
  return a2;
}

void *Archived.wrappedValue.getter(void *a1)
{
  id v2 = a1;
  return a1;
}

void Archived.wrappedValue.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*Archived.wrappedValue.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t Archived.init(from:)(void *a1, uint64_t a2)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v10, v11);
    if (dispatch thunk of SingleValueDecodingContainer.decodeNil()())
    {
      a2 = 0;
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(v10, v11);
      lazy protocol witness table accessor for type Data and conformance Data();
      dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
      id v5 = objc_allocWithZone(MEMORY[0x1E4F28DC0]);
      outlined copy of Data._Representation(v8, v9);
      id v6 = specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)();
      outlined consume of Data._Representation(v8, v9);
      objc_msgSend(v6, sel__enableStrictSecureDecodingMode);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      a2 = NSCoder.decodeTopLevelObject<A>(of:forKey:)();
      outlined consume of Data._Representation(v8, v9);
      swift_bridgeObjectRelease();
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return a2;
}

uint64_t Archived.encode(to:)(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  if (a2)
  {
    uint64_t v3 = self;
    v12[0] = 0;
    id v4 = a2;
    id v5 = objc_msgSend(v3, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v4, 1, v12);
    id v6 = v12[0];
    if (v5)
    {
      unint64_t v7 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      v12[0] = v7;
      v12[1] = v9;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, v14);
      lazy protocol witness table accessor for type Data and conformance Data();
      dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
      outlined consume of Data._Representation((uint64_t)v7, (unint64_t)v9);
    }
    else
    {
      unint64_t v10 = v6;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, v14);
    dispatch thunk of SingleValueEncodingContainer.encodeNil()();
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
}

uint64_t static Archived.== infix(_:_:)(void *a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = a2;
      id v4 = a1;
      char v5 = static NSObject.== infix(_:_:)();

      if (v5) {
        return 1;
      }
    }
  }
  else if (!a2)
  {
    return 1;
  }
  return 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Archived<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Archived.init(from:)(a1, *(void *)(a2 + 16));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Archived<A>(void *a1)
{
  return Archived.encode(to:)(a1, *v1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Archived<A>(void **a1, void **a2)
{
  return static Archived.== infix(_:_:)(*a1, *a2);
}

id specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)()
{
  v6[1] = *(id *)MEMORY[0x1E4F143B8];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_initForReadingFromData_error_, isa, v6);

  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for Archived(void **a1, void **a2)
{
  id v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for Archived(id *a1)
{
}

void **assignWithCopy for Archived(void **a1, void **a2)
{
  id v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void **assignWithTake for Archived(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for Archived(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Archived(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for Archived()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of BinaryEncodable.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of BinaryDecodable.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t ShareChangeObserver.__allocating_init(share:container:)(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  ShareChangeObserver.init(share:container:)(a1, a2);
  return v4;
}

uint64_t ShareChangeObserver.shareChanges.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation.BufferingPolicy);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBD120], v0);
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
}

uint64_t closure #1 in ShareChangeObserver.shareChanges.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  unint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = 0;
  *((void *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v13[v12], v7, v4);
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter, (uint64_t)v13);
  return AsyncThrowingStream.Continuation.onTermination.setter();
}

uint64_t closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[12] = a4;
  v5[13] = a5;
  uint64_t v6 = type metadata accessor for CKRecordChange.ChangeType();
  v5[14] = v6;
  v5[15] = *(void *)(v6 - 8);
  v5[16] = swift_task_alloc();
  type metadata accessor for CKRecordObserver.RecordChanges.Iterator();
  v5[17] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncFilterSequence<CKRecordObserver.RecordChanges>.Iterator);
  v5[18] = v7;
  v5[19] = *(void *)(v7 - 8);
  v5[20] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncFilterSequence<CKRecordObserver.RecordChanges>);
  v5[21] = v8;
  v5[22] = *(void *)(v8 - 8);
  v5[23] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation);
  v5[24] = v9;
  v5[25] = *(void *)(v9 - 8);
  v5[26] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for CKRecordObserver.RecordChanges();
  v5[27] = v10;
  v5[28] = *(void *)(v10 - 8);
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter, 0, 0);
}

uint64_t closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  CKRecordObserver.recordChanges.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
  uint64_t v6 = (unint64_t *)(v5 + 32);
  swift_beginAccess();
  unint64_t v7 = *(void *)(v5 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + 32) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, v7);
    *uint64_t v6 = v7;
  }
  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1, v7);
    *uint64_t v6 = v7;
  }
  uint64_t v12 = *(void *)(v0 + 232);
  uint64_t v11 = *(void *)(v0 + 240);
  uint64_t v13 = *(void *)(v0 + 216);
  uint64_t v14 = *(void *)(v0 + 224);
  uint64_t v16 = *(void *)(v0 + 200);
  uint64_t v15 = *(void *)(v0 + 208);
  uint64_t v17 = *(void *)(v0 + 192);
  uint64_t v21 = *(void *)(v0 + 168);
  *(void *)(v7 + 16) = v10 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))(v7+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v10, v15, v17);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v11, v13);
  lazy protocol witness table accessor for type CKRecordObserver.RecordChanges and conformance CKRecordObserver.RecordChanges(&lazy protocol witness table cache variable for type CKRecordObserver.RecordChanges and conformance CKRecordObserver.RecordChanges, MEMORY[0x1E4F59720]);
  swift_retain();
  AsyncFilterSequence.init(_:isIncluded:)();
  MEMORY[0x1A624EB00](v21);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncFilterSequence.isIncluded.getter();
  AsyncFilterSequence.Iterator.init(_:isIncluded:)();
  uint64_t v18 = (_DWORD *)MEMORY[0x1E4F59708];
  *(_DWORD *)(v0 + 272) = *MEMORY[0x1E4F596F8];
  *(_DWORD *)(v0 + 276) = *v18;
  *(_DWORD *)(v0 + 280) = *MEMORY[0x1E4F59700];
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5Tu
                                                 + _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5Tu);
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v19;
  *uint64_t v19 = v0;
  v19[1] = closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter;
  return v22(0, 0);
}

{
  uint64_t v0;
  void *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void **v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t type;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  id v53 = v0;
  uint64_t v1 = *(void **)(v0 + 256);
  if (v1)
  {
    uint64_t v2 = *(_DWORD *)(v0 + 272);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v3 = *(void *)(v0 + 128);
    uint64_t v5 = *(void *)(v0 + 112);
    CKRecordChange.changeType.getter();
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v3, v5);
    if (v6 == v2 || v6 == *(_DWORD *)(v0 + 276))
    {
      unint64_t v7 = *(void ***)(v0 + 128);
      (*(void (**)(void **, void))(*(void *)(v0 + 120) + 96))(v7, *(void *)(v0 + 112));
      uint64_t v8 = *v7;
      unint64_t v9 = v8;
      yieldShareFromRecord #1 (_:) in closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(v8, v1);

LABEL_5:
      uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5Tu
                                                     + _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5Tu);
      unint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 248) = v10;
      *unint64_t v10 = v0;
      v10[1] = closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter;
      return v51(0, 0);
    }
    if (v6 == *(_DWORD *)(v0 + 280))
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Log.default);
      swift_retain_n();
      uint64_t v20 = Logger.logObject.getter();
      uint64_t v21 = static os_log_type_t.default.getter();
      uint64_t v22 = os_log_type_enabled(v20, v21);
      uint64_t v23 = *(void *)(v0 + 96);
      if (v22)
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        *(void *)(v0 + 72) = v25;
        *(_DWORD *)uint64_t v24 = 136315138;
        uint64_t v26 = objc_msgSend(*(id *)(v23 + 16), sel_recordID);
        if (v26)
        {
          *(void *)(v0 + 88) = v26;
          type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKRecordID);
          uint64_t v27 = String.init<A>(reflecting:)();
          uint64_t v29 = v28;
        }
        else
        {
          uint64_t v29 = 0xE300000000000000;
          uint64_t v27 = 7104878;
        }
        *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, (uint64_t *)(v0 + 72));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1A375F000, v20, v21, "Share was deleted on activity: %s", v24, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v25, -1, -1);
        MEMORY[0x1A624F870](v24, -1, -1);
      }
      else
      {
        swift_release_n();
      }
      *(void *)(v0 + 64) = 0;
      AsyncThrowingStream.Continuation.finish(throwing:)();

      goto LABEL_5;
    }
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Log.default);
    uint64_t v31 = v1;
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.error.getter();
    unint64_t v33 = os_log_type_enabled(v32, type);
    uint64_t v34 = *(void *)(v0 + 240);
    uint64_t v36 = *(void *)(v0 + 216);
    uint64_t v35 = *(void *)(v0 + 224);
    uint64_t v37 = *(void *)(v0 + 176);
    uint64_t v38 = *(void *)(v0 + 184);
    os_log_type_t v39 = *(void *)(v0 + 152);
    os_log_type_t v49 = *(void *)(v0 + 160);
    uint64_t v50 = *(void *)(v0 + 168);
    uint64_t v48 = *(void *)(v0 + 144);
    if (v33)
    {
      uint64_t v46 = *(void *)(v0 + 184);
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = v35;
      uint64_t v41 = swift_slowAlloc();
      uint64_t v52 = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      *(void *)(v0 + 48) = v31;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKRecordChange);
      uint64_t v42 = v31;
      uint64_t v43 = String.init<A>(reflecting:)();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v32, type, "Unknown record change type: %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v41, -1, -1);
      MEMORY[0x1A624F870](v40, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v49, v48);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v46, v50);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v34, v36);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v49, v48);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v50);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v14 = *(void *)(v0 + 224);
    uint64_t v15 = *(void *)(v0 + 184);
    uint64_t v16 = *(void *)(v0 + 168);
    uint64_t v17 = *(void *)(v0 + 176);
    (*(void (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 160), *(void *)(v0 + 144));
    *(void *)(v0 + 40) = 0;
    AsyncThrowingStream.Continuation.finish(throwing:)();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[30];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[28];
  uint64_t v5 = v0[22];
  uint64_t v4 = v0[23];
  uint64_t v6 = v0[21];
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 256) = a1;
  *(void *)(v3 + 264) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter;
  }
  else {
    uint64_t v4 = closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter;
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = v3;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter, 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = (void *)v0[3];
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v3 = objc_msgSend(*(id *)(v2 + 16), sel_recordID);
  id v4 = objc_msgSend(v1, sel_recordID);
  char v5 = static NSObject.== infix(_:_:)();

  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6(v5 & 1);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncFilterSequence<CKRecordObserver.RecordChanges>.Iterator);
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  if (a1)
  {
    swift_getObjectType();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  v3[15] = v6;
  v3[16] = v8;
  return MEMORY[0x1F4188298](_ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TY0_, v6, v8);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TY0_()
{
  v0[17] = AsyncFilterSequence.Iterator.baseIterator.modify();
  uint64_t v1 = type metadata accessor for CKRecordObserver.RecordChanges.Iterator();
  uint64_t v2 = lazy protocol witness table accessor for type CKRecordObserver.RecordChanges and conformance CKRecordObserver.RecordChanges(&lazy protocol witness table cache variable for type CKRecordObserver.RecordChanges.Iterator and conformance CKRecordObserver.RecordChanges.Iterator, MEMORY[0x1E4F59710]);
  id v3 = (void *)swift_task_alloc();
  v0[18] = v3;
  void *v3 = v0;
  v3[1] = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TQ1_;
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[10];
  return MEMORY[0x1F4187C80](v0 + 7, v4, v5, v0 + 8, v1, v2);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TQ1_()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 120);
    uint64_t v4 = *(void *)(v2 + 128);
    uint64_t v5 = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TY3_;
  }
  else
  {
    (*(void (**)(void))(v2 + 136))();
    uint64_t v3 = *(void *)(v2 + 120);
    uint64_t v4 = *(void *)(v2 + 128);
    uint64_t v5 = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TY2_;
  }
  return MEMORY[0x1F4188298](v5, v3, v4);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TY2_()
{
  uint64_t v1 = v0[7];
  if (v1)
  {
    uint64_t v3 = v0[13];
    uint64_t v2 = v0[14];
    uint64_t v4 = v0[11];
    uint64_t v5 = v0[12];
    v0[6] = v1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v4, v5);
    uint64_t v6 = (int *)AsyncFilterSequence.isIncluded.getter();
    v0[19] = v7;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
    uint64_t v11 = (uint64_t (*)(void *))((char *)v6 + *v6);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[20] = v8;
    void *v8 = v0;
    v8[1] = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TQ4_;
    return v11(v0 + 6);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10(0);
  }
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TY3_()
{
  (*(void (**)(void))(v0 + 136))();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TQ4_(char a1)
{
  uint64_t v2 = *v1;
  *(unsigned char *)(*v1 + 168) = a1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 128);
  uint64_t v4 = *(void *)(v2 + 120);
  return MEMORY[0x1F4188298](_ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TY5_, v4, v3);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TY5_()
{
  if (*(unsigned char *)(v0 + 168) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 48);
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v2(v1);
  }
  else
  {

    *(void *)(v0 + 136) = AsyncFilterSequence.Iterator.baseIterator.modify();
    uint64_t v4 = type metadata accessor for CKRecordObserver.RecordChanges.Iterator();
    uint64_t v5 = lazy protocol witness table accessor for type CKRecordObserver.RecordChanges and conformance CKRecordObserver.RecordChanges(&lazy protocol witness table cache variable for type CKRecordObserver.RecordChanges.Iterator and conformance CKRecordObserver.RecordChanges.Iterator, MEMORY[0x1E4F59710]);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v6;
    *uint64_t v6 = v0;
    v6[1] = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TQ1_;
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 80);
    return MEMORY[0x1F4187C80](v0 + 56, v7, v8, v0 + 64, v4, v5);
  }
}

void yieldShareFromRecord #1 (_:) in closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(void *a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation.YieldResult);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && (self, (uint64_t v8 = swift_dynamicCastObjCClass()) != 0))
  {
    uint64_t v22 = v8;
    id v9 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation);
    AsyncThrowingStream.Continuation.yield(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.default);
    id v20 = a2;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v22 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v21 = (uint64_t)v20;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKRecordChange);
      id v15 = v20;
      uint64_t v16 = String.init<A>(reflecting:)();
      uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v11, v12, "Share missing from record change: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v14, -1, -1);
      MEMORY[0x1A624F870](v13, -1, -1);
    }
    else
    {

      id v18 = v20;
    }
  }
}

void *ShareChangeObserver.init(share:container:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  v3[4] = MEMORY[0x1E4FBC860];
  v3[2] = a1;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKRecordObserver);
  id v6 = a1;
  id v7 = a2;
  static CKRecord.SystemType.share.getter();
  v3[3] = CKRecordObserver.init(container:recordType:)();
  if (one-time initialization token for shareChangeObserver != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.shareChangeObserver);
  id v9 = v7;
  swift_retain_n();
  id v10 = v9;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v24 = v22;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v23 = v6;
    id v15 = *(uint64_t (**)(uint64_t))(*v3 + 144);
    uint64_t v16 = swift_retain();
    uint64_t v17 = v15(v16);
    unint64_t v19 = v18;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2112;
    id v20 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v10;

    _os_log_impl(&dword_1A375F000, v11, v12, "%s Init with container: %@", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v14, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v22, -1, -1);
    MEMORY[0x1A624F870](v13, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return v3;
}

uint64_t partial apply for closure #1 in ShareChangeObserver.shareChanges.getter(uint64_t a1)
{
  return closure #1 in ShareChangeObserver.shareChanges.getter(a1, v1);
}

uint64_t ShareChangeObserver.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for shareChangeObserver != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.shareChangeObserver);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v13 = v6;
    id v7 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 144);
    uint64_t v8 = swift_retain();
    uint64_t v9 = v7(v8);
    unint64_t v11 = v10;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v3, v4, "%s Deinit", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v6, -1, -1);
    MEMORY[0x1A624F870](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t ShareChangeObserver.__deallocating_deinit()
{
  ShareChangeObserver.deinit();

  return swift_deallocClassInstance();
}

uint64_t ShareChangeObserver.description.getter()
{
  _StringGuts.grow(_:)(48);
  v1._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v1._object = (void *)0x80000001A3901670;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x80000001A3901690;
  v2._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v2);
  id v3 = objc_msgSend(*(id *)(v0 + 16), sel_recordID);
  id v4 = objc_msgSend(v3, sel_description);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = v6;

  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);

  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ShareChangeObserver()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t type metadata accessor for ShareChangeObserver()
{
  return self;
}

uint64_t method lookup function for ShareChangeObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ShareChangeObserver);
}

uint64_t dispatch thunk of ShareChangeObserver.shareChanges.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ShareChangeObserver.__allocating_init(share:container:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of ShareChangeObserver.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ShareProviderProtocol.shareChanges.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ShareProviderProtocol.update(share:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_1A3802F90()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation)
                 - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  Swift::String v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *Swift::String v9 = v2;
  v9[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(void *a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = SystemCoordinatorTable.systemCoordinator(for:);
  v4[2] = v1;
  v4[3] = *a1;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter, 0, 0);
}

uint64_t lazy protocol witness table accessor for type CKRecordObserver.RecordChanges and conformance CKRecordObserver.RecordChanges(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Publisher.dynamicThrottle<A>(for:after:scheduler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v113 = a3;
  uint64_t v87 = a2;
  uint64_t v112 = a1;
  uint64_t v107 = a4;
  uint64_t v114 = a6;
  uint64_t v9 = type metadata accessor for Publishers.Share();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v111 = v9;
  uint64_t v115 = type metadata accessor for Publishers.MeasureInterval();
  uint64_t v109 = type metadata accessor for PublishRate();
  uint64_t v88 = swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for Publishers.Scan();
  uint64_t v90 = swift_getWitnessTable();
  uint64_t v104 = v10;
  uint64_t v11 = type metadata accessor for Publishers.Zip();
  uint64_t v86 = swift_getWitnessTable();
  uint64_t v81 = v11;
  uint64_t v95 = type metadata accessor for Publishers.Share();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v93 = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for Publishers.CompactMap();
  uint64_t v98 = swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for Publishers.Throttle();
  uint64_t v100 = swift_getWitnessTable();
  uint64_t v116 = v12;
  uint64_t v117 = v13;
  uint64_t v91 = v12;
  uint64_t v97 = v13;
  uint64_t v118 = v98;
  uint64_t v119 = v100;
  uint64_t v99 = type metadata accessor for Publishers.Merge();
  uint64_t v102 = *(void *)(v99 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v99);
  unint64_t v96 = (char *)&v73 - v15;
  uint64_t v101 = *(void *)(v13 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v89 = (char *)&v73 - v17;
  uint64_t v92 = *(void *)(v12 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v85 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v108 = (char *)&v73 - v21;
  uint64_t v82 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v80 = (char *)&v73 - v22;
  swift_getAssociatedTypeWitness();
  uint64_t v76 = a7;
  uint64_t v75 = a5;
  swift_getAssociatedConformanceWitness();
  uint64_t v78 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v78 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  uint64_t v25 = MEMORY[0x1F4188790](v78);
  uint64_t v77 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  os_log_type_t v28 = (char *)&v73 - v27;
  uint64_t v79 = *(void *)(v109 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  uint64_t v31 = (char *)&v73 - v30;
  uint64_t v74 = (char *)&v73 - v30;
  uint64_t v84 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v103 = (char *)&v73 - v32;
  uint64_t v33 = swift_getAssociatedTypeWitness();
  uint64_t v34 = type metadata accessor for Optional();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v38 = (char *)&v73 - v37;
  uint64_t v83 = *(void *)(v115 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v106 = (char *)&v73 - v39;
  uint64_t v105 = Publisher.share()();
  uint64_t v116 = v105;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v38, 1, 1, v33);
  uint64_t v40 = v75;
  uint64_t v41 = v76;
  Publisher.measureInterval<A>(using:options:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v34);
  default argument 0 of PublishRate.init(timeInGracePeriod:isThrottled:)();
  PublishRate.init(timeInGracePeriod:isThrottled:)((uint64_t)v28, 0, (uint64_t)v31);
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v43 = v78;
  v42(v28, v112, v78);
  unint64_t v44 = v77;
  v42(v77, v87, v43);
  uint64_t v45 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v46 = (v45 + 48) & ~v45;
  uint64_t v47 = (v24 + v45 + v46) & ~v45;
  uint64_t v48 = (char *)swift_allocObject();
  uint64_t v49 = v107;
  *((void *)v48 + 2) = v107;
  *((void *)v48 + 3) = v40;
  *((void *)v48 + 4) = v114;
  *((void *)v48 + 5) = v41;
  uint64_t v50 = &v48[v46];
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v51(v50, v28, v43);
  v51(&v48[v47], v44, v43);
  uint64_t v52 = v74;
  uint64_t v53 = v109;
  Publisher.scan<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v52, v53);
  uint64_t v116 = v105;
  uint64_t v54 = v80;
  Publisher.zip<A>(_:)();
  uint64_t v55 = v81;
  uint64_t v56 = Publisher.share()();
  uint64_t v111 = v56;
  (*(void (**)(char *, uint64_t))(v82 + 8))(v54, v55);
  uint64_t v116 = v56;
  uint64_t v57 = (void *)swift_allocObject();
  v57[2] = v49;
  uint64_t v57[3] = v40;
  uint64_t v58 = v114;
  v57[4] = v114;
  v57[5] = v41;
  unint64_t v59 = (void *)swift_allocObject();
  v59[2] = v49;
  v59[3] = v40;
  v59[4] = v58;
  v59[5] = v41;
  v59[6] = partial apply for closure #2 in Publisher.dynamicThrottle<A>(for:after:scheduler:);
  v59[7] = v57;
  Publisher.compactMap<A>(_:)();
  swift_release();
  uint64_t v116 = v111;
  os_log_type_t v60 = (void *)swift_allocObject();
  v60[2] = v49;
  v60[3] = v40;
  v60[4] = v58;
  v60[5] = v41;
  id v61 = (void *)swift_allocObject();
  v61[2] = v49;
  v61[3] = v40;
  v61[4] = v58;
  void v61[5] = v41;
  v61[6] = partial apply for closure #3 in Publisher.dynamicThrottle<A>(for:after:scheduler:);
  v61[7] = v60;
  uint64_t v62 = v85;
  Publisher.compactMap<A>(_:)();
  swift_release();
  uint64_t v63 = v89;
  uint64_t v64 = v91;
  Publisher.throttle<A>(for:scheduler:latest:)();
  uint64_t v65 = *(void (**)(char *, uint64_t))(v92 + 8);
  v65(v62, v64);
  long long v66 = v96;
  uint64_t v67 = v64;
  uint64_t v68 = v97;
  uint64_t v69 = v108;
  Publisher.merge<A>(with:)();
  uint64_t v70 = v99;
  swift_getWitnessTable();
  uint64_t v71 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v66, v70);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v63, v68);
  v65(v69, v67);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v103, v104);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v106, v115);
  return v71;
}

uint64_t type metadata accessor for PublishRate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t default argument 0 of PublishRate.init(timeInGracePeriod:isThrottled:)()
{
  return dispatch thunk of static AdditiveArithmetic.zero.getter();
}

uint64_t PublishRate.init(timeInGracePeriod:isThrottled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a3, a1, AssociatedTypeWitness);
  uint64_t result = type metadata accessor for PublishRate();
  *(unsigned char *)(a3 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t closure #1 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v34 = a5;
  uint64_t v35 = a2;
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for PublishRate();
  uint64_t v31 = *(void *)(v6 - 8);
  uint64_t v32 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v29 = (char *)&v26 - v7;
  swift_getAssociatedTypeWitness();
  uint64_t v33 = a4;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v26 - v12;
  swift_getAssociatedConformanceWitness();
  char v14 = dispatch thunk of static Comparable.< infix(_:_:)();
  swift_getAssociatedConformanceWitness();
  if ((v14 & 1) == 0)
  {
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    char v24 = 0;
    uint64_t v22 = v34;
    return PublishRate.init(timeInGracePeriod:isThrottled:)((uint64_t)v11, v24, v22);
  }
  uint64_t v15 = v30;
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  char v16 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v17 = v31;
  uint64_t v18 = v29;
  uint64_t v19 = v15;
  uint64_t v20 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v29, v19, v32);
  if ((v16 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v20);
    uint64_t v22 = v34;
    uint64_t v23 = v27;
    goto LABEL_7;
  }
  char v21 = v18[*(int *)(v20 + 36)];
  (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v20);
  uint64_t v22 = v34;
  uint64_t v23 = v27;
  if (v21)
  {
LABEL_7:
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v13, AssociatedTypeWitness);
    char v24 = 1;
    return PublishRate.init(timeInGracePeriod:isThrottled:)((uint64_t)v11, v24, v22);
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v11, v13, AssociatedTypeWitness);
  char v24 = 0;
  return PublishRate.init(timeInGracePeriod:isThrottled:)((uint64_t)v11, v24, v22);
}

uint64_t sub_1A3804438()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 48) & ~v4;
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v7 = v4 | 7;
  uint64_t v8 = (v6 + v4 + v5) & ~v4;
  uint64_t v9 = v8 + v6;
  v3(v0 + v5, AssociatedTypeWitness);
  v3(v0 + v8, AssociatedTypeWitness);

  return MEMORY[0x1F4186498](v0, v9, v7);
}

uint64_t partial apply for closure #1 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 40);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 48) & ~v7;
  uint64_t v9 = v2 + ((*(void *)(v6 + 64) + v7 + v8) & ~v7);

  return closure #1 in Publisher.dynamicThrottle<A>(for:after:scheduler:)(a1, v2 + v8, v9, v5, a2);
}

uint64_t closure #2 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = *(unsigned char *)(a1 + *(int *)(type metadata accessor for PublishRate() + 36));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  if (v5)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a3, a2, AssociatedTypeWitness);
    uint64_t v7 = v11;
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);

  return v9(a3, v8, 1, AssociatedTypeWitness);
}

uint64_t sub_1A38047B0()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #2 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #2 in Publisher.dynamicThrottle<A>(for:after:scheduler:)(a1, a2, a3);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed PublishRate<A1>, @in_guaranteed A.Publisher.Output) -> (@out A.Publisher.Output?)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  type metadata accessor for PublishRate();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t closure #3 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for PublishRate() + 36));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  if (v5 == 1)
  {
    uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a3, a2, AssociatedTypeWitness);
    uint64_t v7 = v11;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);

  return v9(a3, v8, 1, AssociatedTypeWitness);
}

uint64_t sub_1A3804998()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #3 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #3 in Publisher.dynamicThrottle<A>(for:after:scheduler:)(a1, a2, a3);
}

uint64_t sub_1A38049B4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PublishRate<A1>, @in_guaranteed A.Publisher.Output) -> (@out A.Publisher.Output?)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed PublishRate<A1>, @in_guaranteed A.Publisher.Output) -> (@out A.Publisher.Output?)(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 48));
}

uint64_t type metadata completion function for PublishRate()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PublishRate(void *a1, void *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((unsigned char *)a1 + v6) = *((unsigned char *)a2 + v6);
  }
  else
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for PublishRate(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for PublishRate(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 48) + a1) = *(unsigned char *)(*(void *)(v5 + 48) + a2);
  return a1;
}

uint64_t assignWithCopy for PublishRate(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 40) + a1) = *(unsigned char *)(*(void *)(v5 + 40) + a2);
  return a1;
}

uint64_t initializeWithTake for PublishRate(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 32) + a1) = *(unsigned char *)(*(void *)(v5 + 32) + a2);
  return a1;
}

uint64_t assignWithTake for PublishRate(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 24) + a1) = *(unsigned char *)(*(void *)(v5 + 24) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for PublishRate(unsigned __int16 *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 > v7)
  {
    uint64_t v9 = v8 + 1;
    char v10 = 8 * (v8 + 1);
    if ((v8 + 1) > 3) {
      goto LABEL_7;
    }
    unsigned int v12 = ((a2 - v7 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 >= 2)
    {
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      int v17 = v7 + (v9 | v13);
      return (v17 + 1);
    }
  }
LABEL_22:
  if (v6 < 0xFE)
  {
    unsigned int v16 = *((unsigned __int8 *)a1 + v8);
    if (v16 < 2) {
      return 0;
    }
    int v17 = (v16 + 2147483646) & 0x7FFFFFFF;
    return (v17 + 1);
  }
  char v14 = *(uint64_t (**)(unsigned __int16 *))(v5 + 48);

  return v14(a1);
}

void storeEnumTagSinglePayload for PublishRate(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFE) {
    unsigned int v9 = 254;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(v6 + 64);
  size_t v11 = v10 + 1;
  if (a3 <= v9)
  {
    int v12 = 0;
  }
  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 - v9 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      int v12 = 4;
    }
    else if (v15 >= 0x100)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = v15 > 1;
    }
  }
  else
  {
    int v12 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v13 = ~v9 + a2;
    if (v11 < 4)
    {
      int v14 = (v13 >> (8 * v11)) + 1;
      if (v10 != -1)
      {
        int v16 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v11] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v14;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v11] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1A3805598);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v8 < 0xFE)
        {
          a1[v10] = a2 + 1;
        }
        else
        {
          int v17 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
          v17(a1, a2);
        }
      }
      return;
  }
}

GroupActivities::TypedPayloadBox::CodingKeys_optional __swiftcall TypedPayloadBox.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TypedPayloadBox.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = GroupActivities_TypedPayloadBox_CodingKeys_value;
  }
  else {
    v4.value = GroupActivities_TypedPayloadBox_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

GroupActivities::TypedPayloadBox::CodingKeys_optional __swiftcall TypedPayloadBox.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  v2._uint64_t countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TypedPayloadBox.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = GroupActivities_TypedPayloadBox_CodingKeys_value;
  }
  else {
    v4.value = GroupActivities_TypedPayloadBox_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

GroupActivities::TypedPayloadBox::CodingKeys_optional __swiftcall TypedPayloadBox.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (GroupActivities::TypedPayloadBox::CodingKeys_optional)2;
}

uint64_t TypedPayloadBox.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t TypedPayloadBox.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 118;
  }
  else {
    return 110;
  }
}

uint64_t TypedPayloadBox.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 118;
  }
  else {
    return 110;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TypedPayloadBox.CodingKeys(unsigned char *a1, unsigned char *a2)
{
  if (*a1) {
    uint64_t v2 = 118;
  }
  else {
    uint64_t v2 = 110;
  }
  if (*a2) {
    uint64_t v3 = 118;
  }
  else {
    uint64_t v3 = 110;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TypedPayloadBox.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TypedPayloadBox.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TypedPayloadBox.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TypedPayloadBox.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TypedPayloadBox.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TypedPayloadBox.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 110;
  if (*v1) {
    uint64_t v2 = 118;
  }
  *a1 = v2;
  a1[1] = 0xE100000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TypedPayloadBox.CodingKeys()
{
  if (*v0) {
    return 118;
  }
  else {
    return 110;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TypedPayloadBox.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TypedPayloadBox.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TypedPayloadBox.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TypedPayloadBox.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

_OWORD *TypedPayloadBox.init(value:)@<X0>(long long *a1@<X0>, _OWORD *a2@<X8>)
{
  return outlined init with take of Decodable & Encodable(a1, a2);
}

_OWORD *outlined init with take of Decodable & Encodable(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t TypedPayloadBox.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TypedPayloadBox.CodingKeys>);
  uint64_t v32 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  Swift::Int v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CodingUserInfoKey();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unsigned int v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v10 = dispatch thunk of Decoder.userInfo.getter();
  if (one-time initialization token for typedPayloadDecoderMap != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_project_value_buffer(v6, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  if (*(void *)(v10 + 16) && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v13 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v10 + 56) + 32 * v12, (uint64_t)&v33);
  }
  else
  {
    long long v33 = 0u;
    long long v34 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (!*((void *)&v34 + 1))
  {
    uint64_t result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v33, &demangling cache variable for type metadata for Any?);
    __break(1u);
    goto LABEL_23;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : TypedPayloadDecoding]);
  uint64_t v14 = MEMORY[0x1E4FBC840];
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  uint64_t v16 = v36[0];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v33) = 0;
    uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v19 = v18;
    if (*(void *)(v16 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, (uint64_t)v19);
      if (v21)
      {
        outlined init with copy of AudioSessionAssertionManager(*(void *)(v16 + 56) + 40 * v20, (uint64_t)&v33);
      }
      else
      {
        uint64_t v35 = 0;
        long long v33 = 0u;
        long long v34 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v35 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v34 + 1))
    {
      swift_bridgeObjectRelease();
      outlined init with take of TypedPayloadDecoding(&v33, (uint64_t)v36);
      uint64_t v22 = v37;
      uint64_t v23 = v38;
      __swift_project_boxed_opaque_existential_1(v36, v37);
      (*(void (**)(long long *__return_ptr, char *, uint64_t, uint64_t))(v23 + 8))(&v33, v5, v22, v23);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v40);
      outlined init with take of Decodable & Encodable(&v33, v39);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
      long long v28 = v39[1];
      uint64_t v29 = v31;
      *uint64_t v31 = v39[0];
      v29[1] = v28;
      long long v29[2] = v39[2];
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v33, &demangling cache variable for type metadata for TypedPayloadDecoding?);
      uint64_t v31 = (_OWORD *)type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v25 = v24;
      v30[1] = (char *)v24
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                      + 48);
      *uint64_t v25 = v14 + 8;
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      dispatch thunk of Decoder.codingPath.getter();
      *(void *)&long long v33 = 0;
      *((void *)&v33 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      *(void *)&long long v33 = 0xD000000000000015;
      *((void *)&v33 + 1) = 0x80000001A3901700;
      v26._uint64_t countAndFlagsBits = v17;
      v26._object = v19;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._object = (void *)0x80000001A3901720;
      v27._uint64_t countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v27);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*((void *)v31 - 1) + 104))(v25, *MEMORY[0x1E4FBBA80]);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v40);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t TypedPayloadBox.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TypedPayloadBox.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v8 = v2[3];
  unsigned int v9 = __swift_project_boxed_opaque_existential_1(v2, v8);
  specialized encode #1 <A>(openedValue:) in TypedPayloadBox.encode(to:)((uint64_t)v9, (uint64_t)v7, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t specialized encode #1 <A>(openedValue:) in TypedPayloadBox.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static Encodable.messageIdentifier.getter(a3);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TypedPayloadBox.CodingKeys>);
  KeyedEncodingContainer.encode(_:forKey:)();
  swift_endAccess();
  if (v3) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return swift_endAccess();
}

uint64_t TypedPayloadBox.unbox<A>(as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  outlined init with copy of Decodable & Encodable(v3, (uint64_t)&v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable & Encodable);
  int v6 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v6 ^ 1u, 1, a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TypedPayloadBox@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return TypedPayloadBox.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TypedPayloadBox(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TypedPayloadBox.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v8 = v2[3];
  unsigned int v9 = __swift_project_boxed_opaque_existential_1(v2, v8);
  specialized encode #1 <A>(openedValue:) in TypedPayloadBox.encode(to:)((uint64_t)v9, (uint64_t)v7, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys;
  if (!lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys;
  if (!lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys;
  if (!lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys;
  if (!lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys);
  }
  return result;
}

uint64_t destroy for TypedPayloadBox(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t initializeWithCopy for TypedPayloadBox(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = v3;
  (**(void (***)(void))(v4 - 8))();
  return a1;
}

uint64_t *assignWithCopy for TypedPayloadBox(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_2(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      result[5] = a2[5];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

_OWORD *assignWithTake for TypedPayloadBox(_OWORD *a1, _OWORD *a2)
{
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for TypedPayloadBox()
{
  return &type metadata for TypedPayloadBox;
}

unsigned char *storeEnumTagSinglePayload for TypedPayloadBox.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A38068E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TypedPayloadBox.CodingKeys()
{
  return &type metadata for TypedPayloadBox.CodingKeys;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15GroupActivities015SpatialTemplateB0_pG_Sis5NeverOTg504_s15d15Activities18Anyfg33V4hash4intoys6HasherVz_tFSiAA0dE7B58_pcfu_33_566d7d6091ff79e655ff2a961c0070a4AaH_pSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v9;
    unsigned int v4 = (void *)(a1 + 32);
    do
    {
      __swift_project_boxed_opaque_existential_1(v4, v4[3]);
      uint64_t v5 = dispatch thunk of Hashable.hashValue.getter();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
      }
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      *(void *)(v9 + 16) = v7 + 1;
      *(void *)(v9 + 8 * v7 + 32) = v5;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t AnySpatialTemplate.spatialTemplate.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AudioSessionAssertionManager(v1, a1);
}

double AnySpatialTemplate.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of TypedPayloadDecoding((long long *)a1, (uint64_t)v4);
    outlined init with take of TypedPayloadDecoding(v4, a2);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for SpatialTemplate?);
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t AnySpatialTemplate.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 8))(&v30, v4, v5);
  outlined init with copy of URL?((uint64_t)&v30, (uint64_t)&v25, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v26 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v25, (uint64_t)v28);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v25, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v28, 0, sizeof(v28));
    uint64_t v29 = 0;
  }
  outlined init with copy of URL?((uint64_t)v28, (uint64_t)&v25, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v26 + 1))
  {
    long long v22 = v25;
    long long v23 = v26;
    uint64_t v24 = v27;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v22, *((uint64_t *)&v23 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v22);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v28, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined destroy of SpatialTemplateConfiguration((uint64_t)&v30);
  uint64_t v6 = v1[3];
  uint64_t v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  SpatialTemplate.output.getter(v6, v7, (uint64_t)&v30);
  uint64_t v8 = v30;
  unsigned long long v9 = v31;
  if (v32)
  {
    if (v32 == 1)
    {
      Hasher._combine(_:)(5uLL);
      Hasher._combine(_:)(v8 & 1);
    }
    else
    {
      if (*((void *)&v31 + 1) | (unint64_t)v31 | v30)
      {
        if (v30 == 1 && v31 == 0)
        {
          Swift::UInt v13 = 2;
        }
        else if (v30 == 2 && v31 == 0)
        {
          Swift::UInt v13 = 3;
        }
        else
        {
          Swift::UInt v13 = 4;
        }
      }
      else
      {
        Swift::UInt v13 = 1;
      }
      Hasher._combine(_:)(v13);
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)(a1, v8);
    if (*((void *)&v9 + 1))
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v10 = v8;
      uint64_t v12 = v9 >> 64;
      uint64_t v11 = v9;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v10 = v8;
      uint64_t v11 = v9;
      uint64_t v12 = 0;
    }
    outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v10, v11, v12, 0);
  }
  uint64_t v14 = v2[3];
  uint64_t v15 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
  uint64_t v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15GroupActivities015SpatialTemplateB0_pG_Sis5NeverOTg504_s15d15Activities18Anyfg33V4hash4intoys6HasherVz_tFSiAA0dE7B58_pcfu_33_566d7d6091ff79e655ff2a961c0070a4AaH_pSiTf3nnnpk_nTf1cn_n(v16);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v17 + 16));
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v19 = (Swift::UInt *)(v17 + 32);
    do
    {
      Swift::UInt v20 = *v19++;
      Hasher._combine(_:)(v20);
      --v18;
    }
    while (v18);
  }
  return swift_bridgeObjectRelease();
}

Swift::Int AnySpatialTemplate.hashValue.getter()
{
  Hasher.init(_seed:)();
  AnySpatialTemplate.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnySpatialTemplate()
{
  Hasher.init(_seed:)();
  AnySpatialTemplate.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnySpatialTemplate()
{
  Hasher.init(_seed:)();
  AnySpatialTemplate.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t outlined destroy of SpatialTemplateConfiguration(uint64_t a1)
{
  return a1;
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 64;
    do
    {
      uint64_t v5 = *(void *)(v4 - 24);
      uint64_t v6 = *(void *)(v4 + 32);
      char v7 = *(unsigned char *)(v4 + 64);
      Hasher._combine(_:)(0);
      if (v5)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      Hasher._combine(_:)(0);
      SPVector3D.hash(into:)();
      SPAngle.hash(into:)();
      if (v7)
      {
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v6);
      }
      else
      {
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(0);
        SPVector3D.hash(into:)();
      }
      swift_bridgeObjectRelease();
      v4 += 112;
      --v3;
    }
    while (v3);
  }
}

uint64_t specialized static AnySpatialTemplate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of AudioSessionAssertionManager(a1, (uint64_t)v42);
  outlined init with copy of AudioSessionAssertionManager(a2, (uint64_t)v39);
  uint64_t v3 = v43;
  uint64_t v4 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v35, v3, v4);
  uint64_t v5 = v40;
  uint64_t v6 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v6 + 8))(&v37, v5, v6);
  LOBYTE(a2) = specialized static SpatialTemplateConfiguration.== infix(_:_:)((uint64_t)v35, (uint64_t)&v37);
  outlined destroy of SpatialTemplateConfiguration((uint64_t)&v37);
  outlined destroy of SpatialTemplateConfiguration((uint64_t)v35);
  if ((a2 & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v7 = v43;
  uint64_t v8 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  uint64_t v9 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8) + 16);
  swift_bridgeObjectRelease();
  uint64_t v10 = v40;
  uint64_t v11 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  uint64_t v12 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11) + 16);
  swift_bridgeObjectRelease();
  if (v9 != v12)
  {
LABEL_14:
    uint64_t v30 = 0;
    goto LABEL_15;
  }
  uint64_t v13 = v43;
  uint64_t v14 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
  uint64_t v16 = v40;
  uint64_t v17 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
  uint64_t v19 = result;
  uint64_t v32 = *(void *)(v15 + 16);
  if (!v32)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = 1;
LABEL_15:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
    return v30;
  }
  unint64_t v20 = 0;
  uint64_t v21 = 32;
  while (v20 < *(void *)(v15 + 16))
  {
    uint64_t result = outlined init with copy of AudioSessionAssertionManager(v15 + v21, (uint64_t)&v37);
    unint64_t v22 = *(void *)(v19 + 16);
    if (v20 == v22)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v37);
      goto LABEL_12;
    }
    if (v20 >= v22) {
      goto LABEL_17;
    }
    outlined init with take of TypedPayloadDecoding(&v37, (uint64_t)v35);
    outlined init with copy of AudioSessionAssertionManager(v19 + v21, (uint64_t)v36);
    outlined init with take of TypedPayloadDecoding(v36, (uint64_t)&v37);
    long long v23 = __swift_project_boxed_opaque_existential_1(v35, v35[3]);
    MEMORY[0x1F4188790](v23);
    (*(void (**)(char *))(v25 + 16))((char *)&v31 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v35);
    AnyHashable.init<A>(_:)();
    long long v26 = __swift_project_boxed_opaque_existential_1(&v37, v38);
    MEMORY[0x1F4188790](v26);
    (*(void (**)(char *))(v28 + 16))((char *)&v31 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
    AnyHashable.init<A>(_:)();
    char v29 = MEMORY[0x1A624E850](v34, v33);
    outlined destroy of AnyHashable((uint64_t)v33);
    outlined destroy of AnyHashable((uint64_t)v34);
    if ((v29 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v37);
      goto LABEL_14;
    }
    ++v20;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v37);
    v21 += 40;
    if (v32 == v20) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AnySpatialTemplate and conformance AnySpatialTemplate()
{
  unint64_t result = lazy protocol witness table cache variable for type AnySpatialTemplate and conformance AnySpatialTemplate;
  if (!lazy protocol witness table cache variable for type AnySpatialTemplate and conformance AnySpatialTemplate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnySpatialTemplate and conformance AnySpatialTemplate);
  }
  return result;
}

uint64_t initializeWithCopy for AnySpatialTemplate(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnySpatialTemplate(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t assignWithTake for AnySpatialTemplate(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnySpatialTemplate(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnySpatialTemplate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnySpatialTemplate()
{
  return &type metadata for AnySpatialTemplate;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

id AddressableMember.tuHandle.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  long long v3 = self;
  long long v4 = (void *)MEMORY[0x1A624DFA0](v1, v2);
  id v5 = objc_msgSend(v3, sel_normalizedHandleWithDestinationID_, v4);

  return v5;
}

GroupActivities::AddressableMember __swiftcall AddressableMember.init(handle:)(GroupActivities::AddressableMember handle)
{
  *uint64_t v1 = handle;
  return handle;
}

uint64_t AddressableMember.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AddressableMember.handle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AddressableMember.handle.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AddressableMember.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static AddressableMember.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int AddressableMember.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AddressableMember()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AddressableMember()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AddressableMember()
{
  return Hasher._finalize()();
}

uint64_t LocalAccountMember.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t LocalAccountMember.id.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*LocalAccountMember.id.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t LocalAccountMember.hash(into:)()
{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);

  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int LocalAccountMember.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t LocalAccountMember.init(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocalAccountMember()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocalAccountMember()
{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);

  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalAccountMember()
{
  return Hasher._finalize()();
}

unint64_t instantiation function for generic protocol witness table for AddressableMember(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
  unint64_t result = lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for LocalAccountMember(uint64_t a1)
{
  *(void *)(a1 + 8) = _s10Foundation4UUIDVACSHAAWlTm_2(&lazy protocol witness table cache variable for type LocalAccountMember and conformance LocalAccountMember, (void (*)(uint64_t))type metadata accessor for LocalAccountMember);
  uint64_t result = _s10Foundation4UUIDVACSHAAWlTm_2(&lazy protocol witness table cache variable for type LocalAccountMember and conformance LocalAccountMember, (void (*)(uint64_t))type metadata accessor for LocalAccountMember);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for LocalAccountMember()
{
  uint64_t result = type metadata singleton initialization cache for LocalAccountMember;
  if (!type metadata singleton initialization cache for LocalAccountMember) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t base witness table accessor for Equatable in LocalAccountMember()
{
  return _s10Foundation4UUIDVACSHAAWlTm_2(&lazy protocol witness table cache variable for type LocalAccountMember and conformance LocalAccountMember, (void (*)(uint64_t))type metadata accessor for LocalAccountMember);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in LocalAccountMember()
{
  return _s10Foundation4UUIDVACSHAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
}

ValueMetadata *type metadata accessor for AddressableMember()
{
  return &type metadata for AddressableMember;
}

uint64_t initializeBufferWithCopyOfBuffer for LocalAccountMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  id v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for LocalAccountMember(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for LocalAccountMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for LocalAccountMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for LocalAccountMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for LocalAccountMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalAccountMember(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A3808178);
}

uint64_t sub_1A3808178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for LocalAccountMember(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A38081F8);
}

uint64_t sub_1A38081F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for LocalAccountMember()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Task.store(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a3;
  v9[3] = a4;
  v9[4] = a5;
  v9[5] = a2;
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  uint64_t v10 = AnyCancellable.init(_:)();
  specialized Set._Variant.insert(_:)(&v12, v10);

  return swift_release();
}

uint64_t sub_1A38083C0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #1 in Task.store(in:)()
{
}

uint64_t SystemCoordinatorHostManager.state.getter()
{
  type metadata accessor for SystemCoordinatorState();
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t key path getter for SystemCoordinatorHostManager.state : SystemCoordinatorHostManager@<X0>(void *a1@<X8>)
{
  type metadata accessor for SystemCoordinatorState();
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  *a1 = v3;
  return result;
}

uint64_t SystemCoordinatorHostManager.state.setter(void *a1)
{
  uint64_t v3 = *(NSObject **)(v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in SystemCoordinatorHostManager.state.setter;
  *(void *)(v5 + 24) = v4;
  v9[4] = _sIg_Ieg_TRTA_0;
  v9[5] = v5;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  void v9[2] = thunk for @escaping @callee_guaranteed () -> ();
  v9[3] = &block_descriptor_5;
  uint64_t v6 = _Block_copy(v9);
  swift_retain();
  id v7 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);

  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v3) {
    __break(1u);
  }
  return result;
}

id partial apply for closure #1 in SystemCoordinatorHostManager.state.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state);
  *a1 = v2;
  return v2;
}

void closure #1 in SystemCoordinatorHostManager.state.setter(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state);
  *(void *)(a1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state) = a2;
  id v3 = a2;
  SystemCoordinatorHostManager._state.didset();
}

uint64_t sub_1A38086FC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in SystemCoordinatorHostManager.state.setter()
{
  closure #1 in SystemCoordinatorHostManager.state.setter(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1A3808744()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

void (*SystemCoordinatorHostManager.state.modify(uint64_t a1))(void **a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  type metadata accessor for SystemCoordinatorState();
  OS_dispatch_queue.sync<A>(execute:)();
  return SystemCoordinatorHostManager.state.modify;
}

void SystemCoordinatorHostManager.state.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    SystemCoordinatorHostManager.state.setter(v3);
  }
  else
  {
    SystemCoordinatorHostManager.state.setter(v2);
  }
}

uint64_t SystemCoordinatorHostManager.configurations.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for SystemCoordinatorHostManager.configurations : SystemCoordinatorHostManager@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for SystemCoordinatorHostManager.configurations : SystemCoordinatorHostManager()
{
  return static Published.subscript.setter();
}

uint64_t SystemCoordinatorHostManager.configurations.setter()
{
  return static Published.subscript.setter();
}

void (*SystemCoordinatorHostManager.configurations.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return GroupSession.internalActiveParticipants.modify;
}

uint64_t SystemCoordinatorHostManager.$configurations.getter()
{
  return swift_endAccess();
}

uint64_t key path getter for SystemCoordinatorHostManager.$configurations : SystemCoordinatorHostManager()
{
  return swift_endAccess();
}

uint64_t key path setter for SystemCoordinatorHostManager.$configurations : SystemCoordinatorHostManager(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t SystemCoordinatorHostManager.$configurations.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*SystemCoordinatorHostManager.$configurations.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__configurations;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return SystemCoordinatorHostManager.$configurations.modify;
}

void SystemCoordinatorHostManager.$configurations.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 88) + 16);
  v4(*(void *)(*(void *)a1 + 104), v3[14], v3[10]);
  uint64_t v5 = (void *)v3[14];
  size_t v6 = (void *)v3[12];
  uint64_t v7 = (void *)v3[13];
  uint64_t v8 = v3[10];
  uint64_t v9 = v3[11];
  if (a2)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v9 + 8);
    v10(v7, v8);
    v10(v5, v8);
  }
  else
  {
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v9 + 8))(v5, v8);
  }
  free(v5);
  free(v7);
  free(v6);

  free(v3);
}

uint64_t SystemCoordinatorHostManager.hosts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SystemCoordinatorHostManager.hosts.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_hosts);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SystemCoordinatorHostManager.hosts.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

id SystemCoordinatorHostManager.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue);
}

void SystemCoordinatorHostManager._state.didset()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state);
    type metadata accessor for SystemCoordinatorState();
    id v8 = v7;
    char v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      swift_beginAccess();
      uint64_t v10 = swift_bridgeObjectRetain();
      specialized Sequence.forEach(_:)(v10, (void (*)(char *, void *))partial apply for closure #1 in SystemCoordinatorHostManager._state.didset);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in SystemCoordinatorHostManager._state.didset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state);
  uint64_t v4 = (void **)(a2 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
  swift_beginAccess();
  uint64_t v5 = *v4;
  *uint64_t v4 = v3;
  id v6 = v3;
  SystemCoordinatorHost.currentState.didset();
}

uint64_t SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit.debounceInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit.throttleInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0) + 20);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit);
}

uint64_t SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit.gracePeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0) + 24);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit.init(throttleInterval:gracePeriod:debounceInterval:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0);
  uint64_t v9 = a4 + *(int *)(v8 + 20);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t))v12)((void *)(v10 - 8), v9, a1, v10);
  v12(a4 + *(int *)(v8 + 24), a2, v10);

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(a4, a3, v10);
}

uint64_t SystemCoordinatorHostManager.configurationUpdatesRateLimit.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_configurationUpdatesRateLimit, a1, type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit);
}

uint64_t SystemCoordinatorHostManager.__allocating_init(configurationUpdatesRateLimit:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  SystemCoordinatorHostManager.init(configurationUpdatesRateLimit:)(a1);
  return v2;
}

uint64_t SystemCoordinatorHostManager.init(configurationUpdatesRateLimit:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v28 = a1;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__configurations;
  unint64_t v13 = MEMORY[0x1E4FBC860];
  unint64_t v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : SystemCoordinatorConfiguration]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v12, v11, v8);
  *(void *)(v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_hosts) = MEMORY[0x1E4FBC868];
  uint64_t v14 = OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue;
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  unint64_t v29 = v13;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v26 + 104))(v5, *MEMORY[0x1E4FBCC58], v27);
  *(void *)(v1 + v14) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v15 = OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state;
  uint64_t v16 = (objc_class *)type metadata accessor for SystemCoordinatorState.ParticipantState();
  uint64_t v17 = objc_allocWithZone(v16);
  v17[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = 0;
  v17[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = 0;
  uint64_t v18 = &v17[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  void *v18 = 0;
  v18[1] = 0;
  *(void *)&v17[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = 0;
  v31.receiver = v17;
  v31.super_class = v16;
  id v19 = objc_msgSendSuper2(&v31, sel_init);
  unint64_t v20 = (objc_class *)type metadata accessor for SystemCoordinatorState();
  uint64_t v21 = objc_allocWithZone(v20);
  *(void *)&v21[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = v19;
  v21[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = 3;
  *(void *)&v21[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = 0;
  v30.receiver = v21;
  v30.super_class = v20;
  *(void *)(v2 + v15) = objc_msgSendSuper2(&v30, sel_init);
  uint64_t v22 = v28;
  outlined init with copy of SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(v28, v2 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_configurationUpdatesRateLimit, type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit);
  type metadata accessor for ConversationManagerClient();
  long long v23 = (void *)static ConversationManagerClient.shared.getter();
  type metadata accessor for SystemCoordinatorHostManager.EndpointProvider();
  swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type SystemCoordinatorHostManager.EndpointProvider and conformance SystemCoordinatorHostManager.EndpointProvider, v24, (void (*)(uint64_t))type metadata accessor for SystemCoordinatorHostManager.EndpointProvider);
  ConversationManagerClient.registerEndpointProvider(_:)();

  swift_release();
  outlined destroy of SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(v22);
  return v2;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

Swift::Void __swiftcall SystemCoordinatorHostManager.registerEndpointProvider()()
{
  type metadata accessor for ConversationManagerClient();
  uint64_t v0 = (void *)static ConversationManagerClient.shared.getter();
  type metadata accessor for SystemCoordinatorHostManager.EndpointProvider();
  swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type SystemCoordinatorHostManager.EndpointProvider and conformance SystemCoordinatorHostManager.EndpointProvider, v1, (void (*)(uint64_t))type metadata accessor for SystemCoordinatorHostManager.EndpointProvider);
  ConversationManagerClient.registerEndpointProvider(_:)();

  swift_release();
}

uint64_t SystemCoordinatorHostManager.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  SystemCoordinatorHostManager.init()();
  return v0;
}

uint64_t SystemCoordinatorHostManager.init()()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v32 = *(void *)(v1 - 8);
  uint64_t v33 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__configurations;
  unint64_t v11 = MEMORY[0x1E4FBC860];
  unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : SystemCoordinatorConfiguration]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v10, v9, v6);
  *(void *)(v0 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_hosts) = MEMORY[0x1E4FBC868];
  uint64_t v12 = OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue;
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  unint64_t v34 = v11;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v32 + 104))(v3, *MEMORY[0x1E4FBCC58], v33);
  uint64_t v13 = v0;
  *(void *)(v0 + v12) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v14 = OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state;
  uint64_t v15 = (objc_class *)type metadata accessor for SystemCoordinatorState.ParticipantState();
  uint64_t v16 = objc_allocWithZone(v15);
  v16[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = 0;
  v16[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = 0;
  uint64_t v17 = &v16[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *uint64_t v17 = 0;
  v17[1] = 0;
  *(void *)&v16[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = 0;
  v36.receiver = v16;
  v36.super_class = v15;
  id v18 = objc_msgSendSuper2(&v36, sel_init);
  id v19 = (objc_class *)type metadata accessor for SystemCoordinatorState();
  unint64_t v20 = objc_allocWithZone(v19);
  *(void *)&v20[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = v18;
  v20[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = 3;
  *(void *)&v20[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = 0;
  v35.receiver = v20;
  v35.super_class = v19;
  *(void *)(v13 + v14) = objc_msgSendSuper2(&v35, sel_init);
  uint64_t v21 = (void *)(v13 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_configurationUpdatesRateLimit);
  uint64_t v22 = type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0);
  long long v23 = (void *)((char *)v21 + *(int *)(v22 + 20));
  *long long v23 = 1;
  uint64_t v24 = *MEMORY[0x1E4FBCAE8];
  uint64_t v25 = type metadata accessor for DispatchTimeInterval();
  uint64_t v26 = *(void (**)(void))(*(void *)(v25 - 8) + 104);
  ((void (*)(void *, uint64_t, uint64_t))v26)(v23, v24, v25);
  *(void *)((char *)v21 + *(int *)(v22 + 24)) = 500;
  uint64_t v27 = *MEMORY[0x1E4FBCAC8];
  v26();
  *uint64_t v21 = 100;
  ((void (*)(void *, uint64_t, uint64_t))v26)(v21, v27, v25);
  type metadata accessor for ConversationManagerClient();
  uint64_t v28 = (void *)static ConversationManagerClient.shared.getter();
  type metadata accessor for SystemCoordinatorHostManager.EndpointProvider();
  swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type SystemCoordinatorHostManager.EndpointProvider and conformance SystemCoordinatorHostManager.EndpointProvider, v29, (void (*)(uint64_t))type metadata accessor for SystemCoordinatorHostManager.EndpointProvider);
  ConversationManagerClient.registerEndpointProvider(_:)();

  swift_release();
  return v13;
}

uint64_t SystemCoordinatorHostManager.deinit()
{
  uint64_t v1 = v0;
  type metadata accessor for ConversationManagerClient();
  uint64_t v2 = (void *)static ConversationManagerClient.shared.getter();
  v3._object = (void *)0x80000001A3901780;
  v3._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  ConversationManagerClient.unregisterEndpointProvider(identifier:)(v3);

  uint64_t v4 = v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__configurations;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  outlined destroy of SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_configurationUpdatesRateLimit);
  return v1;
}

Swift::Void __swiftcall SystemCoordinatorHostManager.unregisterEndpointProvider()()
{
  type metadata accessor for ConversationManagerClient();
  id v1 = (id)static ConversationManagerClient.shared.getter();
  v0._object = (void *)0x80000001A3901780;
  v0._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  ConversationManagerClient.unregisterEndpointProvider(identifier:)(v0);
}

uint64_t SystemCoordinatorHostManager.__deallocating_deinit()
{
  SystemCoordinatorHostManager.deinit();

  return swift_deallocClassInstance();
}

uint64_t SystemCoordinatorHostManager.EndpointProvider.__allocating_init(_:)()
{
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

unint64_t static SystemCoordinatorHostManager.EndpointProvider.identifier.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t SystemCoordinatorHostManager.host(for:)()
{
  type metadata accessor for SystemCoordinatorHost();
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

objc_class *closure #1 in SystemCoordinatorHostManager.host(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, objc_class **a3@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v5 = type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t *)(a1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_hosts);
  swift_beginAccess();
  uint64_t v13 = *v12;
  if (*(void *)(*v12 + 16) && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v15 & 1) != 0))
  {
    uint64_t v16 = *(objc_class **)(*(void *)(v13 + 56) + 8 * v14);
    swift_endAccess();
    *uint64_t v32 = v16;
    return v16;
  }
  else
  {
    swift_endAccess();
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v31(v11, a2, v8);
    uint64_t v30 = a2;
    id v18 = *(void **)(a1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue);
    outlined init with copy of SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(a1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_configurationUpdatesRateLimit, (uint64_t)v7, type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit);
    id v19 = objc_allocWithZone((Class)type metadata accessor for SystemCoordinatorHost());
    id v20 = v18;
    uint64_t v21 = specialized SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)((uint64_t)v11, v20, (uint64_t)v7);

    uint64_t v22 = (char *)v21 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
    swift_beginAccess();
    *((void *)v22 + 1) = &protocol witness table for SystemCoordinatorHostManager;
    swift_unknownObjectWeakAssign();
    long long v23 = *(void **)(a1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state);
    uint64_t v24 = (void **)((char *)v21 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
    swift_beginAccess();
    uint64_t v25 = *v24;
    *uint64_t v24 = v23;
    id v26 = v23;
    SystemCoordinatorHost.currentState.didset();

    v31(v11, v30, v8);
    swift_beginAccess();
    uint64_t v27 = v21;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v33 = *v12;
    *uint64_t v12 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v27, (uint64_t)v11, isUniquelyReferenced_nonNull_native, (void (*)(uint64_t))specialized _NativeDictionary.copy(), &demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorHost>);
    *uint64_t v12 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    unint64_t result = (objc_class *)swift_endAccess();
    *uint64_t v32 = v27;
  }
  return result;
}

uint64_t SystemCoordinatorHostManager.EndpointProvider.manager.getter()
{
  return swift_weakLoadStrong();
}

uint64_t SystemCoordinatorHostManager.EndpointProvider.manager.setter()
{
  return swift_release();
}

void (*SystemCoordinatorHostManager.EndpointProvider.manager.modify(void *a1))(void **a1, char a2)
{
  Swift::String v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return SystemCoordinatorHostManager.EndpointProvider.manager.modify;
}

void SystemCoordinatorHostManager.EndpointProvider.manager.modify(void **a1, char a2)
{
  Swift::String v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }

  free(v3);
}

uint64_t SystemCoordinatorHostManager.EndpointProvider.init(_:)()
{
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

id SystemCoordinatorHostManager.EndpointProvider.customEndpoint(for:activity:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for systemCoordinator != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.systemCoordinator);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  id v9 = a2;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v27 = a1;
    uint64_t v13 = v12;
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    v29[0] = v26;
    *(_DWORD *)uint64_t v13 = 136315394;
    v24[1] = v13 + 4;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_WORD *)(v13 + 12) = 2112;
    uint64_t v28 = (uint64_t)v9;
    id v16 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v17 = v25;
    *uint64_t v25 = v9;

    _os_log_impl(&dword_1A375F000, v10, v11, "SystemCoordinatorHostManager: Received custom endpoint request for %s %@", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v17, -1, -1);
    uint64_t v18 = v26;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v18, -1, -1);
    uint64_t v19 = v13;
    a1 = v27;
    MEMORY[0x1A624F870](v19, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  v24[-2] = MEMORY[0x1F4188790](Strong);
  v24[-1] = a1;
  type metadata accessor for SystemCoordinatorHost();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  uint64_t v21 = (void *)v28;
  id v22 = *(id *)(v28 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_endpoint);

  return v22;
}

uint64_t SystemCoordinatorHostManager.EndpointProvider.deinit()
{
  swift_weakDestroy();
  return v0;
}

uint64_t SystemCoordinatorHostManager.EndpointProvider.__deallocating_deinit()
{
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

unint64_t protocol witness for static CustomEndpointProvider.identifier.getter in conformance SystemCoordinatorHostManager.EndpointProvider()
{
  return 0xD00000000000002CLL;
}

void SystemCoordinatorHostManager.systemCoordinatorHost(_:didUpdateConfiguration:)(void *a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v11 = *(void **)(v4 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBCBF0], v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_8;
  }
  uint64_t v3 = (uint64_t)a1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_uuid;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v13 = v43[0];
  if (*(void *)(v43[0] + 16) && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v3), (v15 & 1) != 0))
  {
    id v16 = *(id *)(*(void *)(v13 + 56) + 8 * v14);
    swift_bridgeObjectRelease();
    type metadata accessor for SystemCoordinatorConfiguration();
    id v17 = v16;
    id v18 = a2;
    char v19 = static NSObject.== infix(_:_:)();

    if (v19) {
      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for systemCoordinator != -1) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.systemCoordinator);
  id v21 = a2;
  id v22 = a1;
  id v23 = v21;
  id v24 = v22;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v41 = v3;
    uint64_t v29 = v28;
    v43[0] = v28;
    *(_DWORD *)uint64_t v27 = 136315394;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v42 = (uint64_t)v23;
    type metadata accessor for SystemCoordinatorConfiguration();
    id v32 = v23;
    uint64_t v33 = String.init<A>(reflecting:)();
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v25, v26, "SystemCoordinatorHostManager: Updating configuration for %s to %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    uint64_t v35 = v29;
    uint64_t v3 = v41;
    MEMORY[0x1A624F870](v35, -1, -1);
    MEMORY[0x1A624F870](v27, -1, -1);
  }
  else
  {
  }
  swift_getKeyPath();
  swift_getKeyPath();
  id v36 = v23;
  long long v37 = (void (*)(uint64_t *, void))static Published.subscript.modify();
  uint64_t v39 = v38;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = *v39;
  *uint64_t v39 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v36, v3, isUniquelyReferenced_nonNull_native, (void (*)(uint64_t))specialized _NativeDictionary.copy(), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorConfiguration>);
  *uint64_t v39 = v42;
  swift_bridgeObjectRelease();
  v37(v43, 0);
  swift_release();
  swift_release();
}

uint64_t SystemCoordinatorHostManager.systemCoordinatorHostDidInvalidate(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (void *)((char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    if (one-time initialization token for systemCoordinator == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.systemCoordinator);
  id v11 = a1;
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    v23[0] = v15;
    *(_DWORD *)unint64_t v14 = 136315138;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v22[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v12, v13, "SystemCoordinatorHostManager: Host connection invalidated for %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v15, -1, -1);
    MEMORY[0x1A624F870](v14, -1, -1);
  }
  else
  {
  }
  uint64_t v18 = (uint64_t)v11 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_uuid;
  swift_beginAccess();
  char v19 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v18);
  swift_endAccess();

  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v20 = (void (*)(uint64_t *, void))static Published.subscript.modify();

  v20(v23, 0);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for SystemCoordinatorHostManager.EndpointProvider()
{
  return self;
}

objc_class *partial apply for closure #1 in SystemCoordinatorHostManager.host(for:)@<X0>(objc_class **a1@<X8>)
{
  return closure #1 in SystemCoordinatorHostManager.host(for:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  uint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  char v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    uint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      id v32 = *(id *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      id v32 = *(id *)(*(void *)(v13 + 56) + 8 * v25);
    }
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  uint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v14;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (**v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  void *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  void *v44;
  void (**v45)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v47;
  int v48;

  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  uint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  char v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    uint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      id v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      id v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_retain();
    }
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  uint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v14;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for LinkManager.Attachment(0);
  uint64_t v49 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v54 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, LinkManager.Attachment>);
  int v50 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v46 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v44 = v2;
  int64_t v45 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v52 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v53 = v7;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v48 = v11;
  id v21 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45) {
      break;
    }
    int64_t v26 = v46;
    unint64_t v27 = v46[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v27 = v46[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v45) {
              goto LABEL_34;
            }
            unint64_t v27 = v46[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
    id v21 = v51;
LABEL_22:
    uint64_t v29 = v8;
    uint64_t v30 = *(void *)(v8 + 72);
    unint64_t v31 = *(void *)(v11 + 48) + v30 * v24;
    if (v50)
    {
      (*v52)(v21, v31, v53);
      uint64_t v32 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      outlined init with take of LinkManager.Attachment(v32 + v33 * v24, v54);
    }
    else
    {
      (*v47)(v21, v31, v53);
      uint64_t v34 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      outlined init with copy of SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(v34 + v33 * v24, v54, type metadata accessor for LinkManager.Attachment);
    }
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v35 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      id v21 = v51;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      id v21 = v51;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v52)((char *)(*(void *)(v13 + 48) + v30 * v22), (unint64_t)v21, v53);
    uint64_t result = outlined init with take of LinkManager.Attachment(v54, *(void *)(v13 + 56) + v33 * v22);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
    uint64_t v8 = v29;
  }
  swift_release();
  uint64_t v3 = v44;
  int64_t v26 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v11 + 32);
  if (v42 >= 64) {
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v26 = -1 << v42;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v13;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  void (**v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  void (**v46)(char *, unint64_t, uint64_t);
  _OWORD v47[2];

  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  int64_t v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    char v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    BOOL v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    uint64_t v14 = v13 & v12;
    unint64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    unint64_t v17 = 0;
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        char v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        int64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        id v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          unint64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                unint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                unint64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v17 = v23;
          }
        }
LABEL_21:
        uint64_t v14 = (v22 - 1) & v22;
        int64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      unint64_t v24 = v5;
      int64_t v25 = *(void *)(v5 + 72);
      int64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      unint64_t v27 = v43;
      int64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        outlined init with take of Any((_OWORD *)(*(void *)(v8 + 56) + 32 * v20), v47);
      }
      else
      {
        (*v41)(v43, v26, v44);
        outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47);
      }
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      uint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        uint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = (uint64_t)outlined init with take of Any(v47, (_OWORD *)(*(void *)(v10 + 56) + 32 * v18));
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  void *v43;
  void (**v44)(char *, unint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int v47;
  void (**v48)(char *, unint64_t, uint64_t);
  char *v49;
  uint64_t v50;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorTable.Storage>);
  uint64_t v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v49 = v8;
  int v50 = v5;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  uint64_t v15 = v14 & v13;
  uint64_t v41 = v2;
  uint64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  uint64_t v18 = 0;
  int64_t v45 = v9;
  uint64_t v46 = v6;
  while (1)
  {
    if (v15)
    {
      id v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    unint64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    unint64_t v24 = v43;
    int64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      uint64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      int64_t v25 = v43[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            uint64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            int64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v18 = v26;
      }
    }
LABEL_21:
    uint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    unint64_t v27 = *(void *)(v6 + 72);
    int64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      uint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      unint64_t v31 = *v29;
      uint64_t v30 = v29[1];
    }
    else
    {
      (*v44)(v49, v28, v50);
      uint64_t v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      unint64_t v31 = *v32;
      uint64_t v30 = v32[1];
      swift_retain();
      swift_retain();
    }
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    uint64_t v34 = result & ~v33;
    uint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      char v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v46;
    }
    else
    {
      unint64_t v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v6 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        char v38 = v35 == v37;
        if (v35 == v37) {
          uint64_t v35 = 0;
        }
        v36 |= v38;
        unint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      char v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    int64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    *int64_t v20 = v31;
    v20[1] = v30;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v45;
  }
  swift_release();
  uint64_t v3 = v41;
  unint64_t v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  BOOL v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  void (**v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  void (**v46)(char *, unint64_t, uint64_t);
  unsigned char v47[24];

  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionTable.Storage>);
  int64_t v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  BOOL v40 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  uint64_t v14 = v13 & v12;
  char v38 = v2;
  unint64_t v39 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  unint64_t v17 = 0;
  uint64_t v42 = v8;
  uint64_t v43 = v7;
  while (1)
  {
    if (v14)
    {
      char v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    id v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v39) {
      break;
    }
    unint64_t v22 = v40;
    unint64_t v23 = v40[v21];
    ++v17;
    if (!v23)
    {
      unint64_t v17 = v21 + 1;
      if (v21 + 1 >= v39) {
        goto LABEL_34;
      }
      unint64_t v23 = v40[v17];
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v38;
          if ((v45 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v40[v24];
        if (!v23)
        {
          while (1)
          {
            unint64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v39) {
              goto LABEL_34;
            }
            unint64_t v23 = v40[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v17 = v24;
      }
    }
LABEL_21:
    uint64_t v14 = (v23 - 1) & v23;
    int64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    int64_t v25 = v5;
    int64_t v26 = *(void *)(v5 + 72);
    unint64_t v27 = *(void *)(v8 + 48) + v26 * v20;
    int64_t v28 = v43;
    uint64_t v29 = v44;
    if (v45)
    {
      (*v46)(v43, v27, v44);
      outlined init with take of GroupSessionTable.Storage(*(void *)(v8 + 56) + 24 * v20, (uint64_t)v47);
    }
    else
    {
      (*v41)(v43, v27, v44);
      outlined init with copy of GroupSessionTable.Storage(*(void *)(v8 + 56) + 24 * v20, (uint64_t)v47);
    }
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v31 = result & ~v30;
    uint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v35 = v32 == v34;
        if (v32 == v34) {
          uint64_t v32 = 0;
        }
        v33 |= v35;
        unint64_t v36 = *(void *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      uint64_t v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    (*v46)((char *)(*(void *)(v10 + 48) + v26 * v18), (unint64_t)v28, v29);
    uint64_t result = outlined init with take of GroupSessionTable.Storage((uint64_t)v47, *(void *)(v10 + 56) + 24 * v18);
    ++*(void *)(v10 + 16);
    uint64_t v5 = v25;
    uint64_t v8 = v42;
  }
  swift_release();
  uint64_t v3 = v38;
  unint64_t v22 = v40;
  if ((v45 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  unint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
  if (v37 >= 64) {
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v37;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  void *v39;
  void (**v40)(char *, unint64_t, uint64_t);
  uint64_t i;
  int v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t v44;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Int>);
  uint64_t v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    unint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    unint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    uint64_t v15 = v14 & v13;
    char v38 = (unint64_t)(v12 + 63) >> 6;
    BOOL v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    uint64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        int64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        id v21 = v20 | (v18 << 6);
      }
      else
      {
        unint64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          uint64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                unint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v18 = v24;
          }
        }
LABEL_21:
        uint64_t v15 = (v23 - 1) & v23;
        id v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      int64_t v25 = *(void *)(v6 + 72);
      int64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      unint64_t v27 = v9;
      int64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      uint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        char v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        char v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  void *v38;
  void (**v39)(char *, unint64_t, uint64_t);
  int v40;
  uint64_t v41;

  uint64_t v3 = v2;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  uint64_t v5 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, AsyncStream<Int>.Continuation>);
  BOOL v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    unint64_t v36 = v3;
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    char v38 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    uint64_t v15 = v14 & v12;
    unint64_t v37 = (unint64_t)(v13 + 63) >> 6;
    unint64_t v39 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    unint64_t v17 = result + 64;
    while (1)
    {
      if (v15)
      {
        char v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        int64_t v20 = v19 | (v11 << 6);
      }
      else
      {
        id v21 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v21 >= v37) {
          goto LABEL_34;
        }
        unint64_t v22 = v38[v21];
        ++v11;
        if (!v22)
        {
          uint64_t v11 = v21 + 1;
          if (v21 + 1 >= v37) {
            goto LABEL_34;
          }
          unint64_t v22 = v38[v11];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_34:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_41;
              }
              uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
              if (v35 >= 64) {
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v38 = -1 << v35;
              }
              uint64_t v3 = v36;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v11 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v37) {
                  goto LABEL_34;
                }
                unint64_t v22 = v38[v11];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v11 = v23;
          }
        }
LABEL_21:
        uint64_t v15 = (v22 - 1) & v22;
        int64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
      }
      unint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      int64_t v25 = v5;
      int64_t v26 = *(void *)(v5 + 72);
      unint64_t v27 = *(void *)(v8 + 56) + v26 * v20;
      if (v40) {
        (*v16)(v7, v27, v41);
      }
      else {
        (*v39)(v7, v27, v41);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      int64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      uint64_t v29 = result & ~v28;
      uint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v31 = 0;
        uint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v33 = v30 == v32;
          if (v30 == v32) {
            uint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        uint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v10 + 48) + 8 * v18) = v24;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v10 + 56) + v26 * v18, v7, v41);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v25;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  uint64_t *v3 = v10;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UUID, TUConversationActivitySessionContainer>);
}